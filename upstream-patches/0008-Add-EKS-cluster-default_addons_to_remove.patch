From 648d11fe0c5d398410fe2988a1b96acc7c168cc2 Mon Sep 17 00:00:00 2001
From: Daniel Bradley <daniel@pulumi.com>
Date: Fri, 4 Nov 2022 17:31:27 +0000
Subject: [PATCH 08/29] Add EKS cluster default_addons_to_remove

---
 internal/service/eks/cluster.go               |   7 +
 internal/service/eks/cluster_addon_removal.go | 128 ++++++++++++++++++
 .../service/eks/cluster_addon_removal_test.go |  83 ++++++++++++
 internal/service/eks/wait.go                  |   3 +
 4 files changed, 221 insertions(+)
 create mode 100644 internal/service/eks/cluster_addon_removal.go
 create mode 100644 internal/service/eks/cluster_addon_removal_test.go

diff --git a/internal/service/eks/cluster.go b/internal/service/eks/cluster.go
index cd1ce02bfb..eb8a035219 100644
--- a/internal/service/eks/cluster.go
+++ b/internal/service/eks/cluster.go
@@ -74,6 +74,13 @@ func ResourceCluster() *schema.Resource {
 				Type:     schema.TypeString,
 				Computed: true,
 			},
+			"default_addons_to_remove": {
+				Type:     schema.TypeList,
+				Optional: true,
+				Elem: &schema.Schema{
+					Type: schema.TypeString,
+				},
+			},
 			"enabled_cluster_log_types": {
 				Type:     schema.TypeSet,
 				Optional: true,
diff --git a/internal/service/eks/cluster_addon_removal.go b/internal/service/eks/cluster_addon_removal.go
new file mode 100644
index 0000000000..faa4fb9c6a
--- /dev/null
+++ b/internal/service/eks/cluster_addon_removal.go
@@ -0,0 +1,128 @@
+package eks
+
+import (
+	"context"
+	"fmt"
+	"log"
+	"sync"
+
+	"github.com/aws/aws-sdk-go/aws"
+	"github.com/aws/aws-sdk-go/service/eks"
+	"github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr"
+	"github.com/hashicorp/go-multierror"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
+
+	"github.com/hashicorp/terraform-provider-aws/internal/flex"
+	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
+)
+
+func removeAddons(d *schema.ResourceData, conn *eks.EKS) error {
+	if v, ok := d.GetOk("default_addons_to_remove"); ok && len(v.([]interface{})) > 0 {
+		ctx := context.Background()
+		var wg sync.WaitGroup
+		var removalErrors *multierror.Error
+
+		for _, addon := range flex.ExpandStringList(v.([]interface{})) {
+			if addon == nil {
+				return fmt.Errorf("addonName cannot be dereferenced")
+			}
+			addonName := *addon
+			wg.Add(1)
+
+			go func() {
+				defer wg.Done()
+				removalErrors = multierror.Append(removalErrors, removeAddon(d, conn, addonName, ctx))
+			}()
+		}
+		wg.Wait()
+		return removalErrors.ErrorOrNil()
+	}
+	return nil
+}
+
+func removeAddon(d *schema.ResourceData, conn *eks.EKS, addonName string, ctx context.Context) error {
+	log.Printf("[DEBUG] Creating EKS Add-On: %s", addonName)
+	createAddonInput := &eks.CreateAddonInput{
+		AddonName:          aws.String(addonName),
+		ClientRequestToken: aws.String(resource.UniqueId()),
+		ClusterName:        aws.String(d.Id()),
+		ResolveConflicts:   aws.String(eks.ResolveConflictsOverwrite),
+	}
+
+	err := resource.RetryContext(ctx, propagationTimeout, func() *resource.RetryError {
+		_, err := conn.CreateAddonWithContext(ctx, createAddonInput)
+
+		if tfawserr.ErrMessageContains(err, eks.ErrCodeInvalidParameterException, "CREATE_FAILED") {
+			return resource.RetryableError(err)
+		}
+
+		if tfawserr.ErrMessageContains(err, eks.ErrCodeInvalidParameterException, "does not exist") {
+			return resource.RetryableError(err)
+		}
+
+		if err != nil {
+			return resource.NonRetryableError(err)
+		}
+
+		return nil
+	})
+
+	if tfresource.TimedOut(err) {
+		_, err = conn.CreateAddonWithContext(ctx, createAddonInput)
+	}
+
+	if err != nil {
+		return fmt.Errorf("error creating EKS Add-On (%s): %w", addonName, err)
+	}
+
+	_, err = waitAddonCreatedAllowDegraded(ctx, conn, d.Id(), addonName)
+
+	if err != nil {
+		return fmt.Errorf("unexpected EKS Add-On (%s) state returned during creation: %w", addonName, err)
+	}
+	log.Printf("[DEBUG] Created EKS Add-On: %s", addonName)
+
+	deleteAddonInput := &eks.DeleteAddonInput{
+		AddonName:   aws.String(addonName),
+		ClusterName: aws.String(d.Id()),
+	}
+
+	log.Printf("[DEBUG] Deleting EKS Add-On: %s", addonName)
+	_, err = conn.DeleteAddonWithContext(ctx, deleteAddonInput)
+
+	if err != nil {
+		return fmt.Errorf("error deleting EKS Add-On (%s): %w", addonName, err)
+	}
+
+	_, err = waitAddonDeleted(ctx, conn, d.Id(), addonName, addonDeletedTimeout)
+
+	if err != nil {
+		return fmt.Errorf("error waiting for EKS Add-On (%s) to delete: %w", addonName, err)
+	}
+	log.Printf("[DEBUG] Deleted EKS Add-On: %s", addonName)
+	return nil
+}
+
+func waitAddonCreatedAllowDegraded(ctx context.Context, conn *eks.EKS, clusterName, addonName string) (*eks.Addon, error) {
+	// We do not care about the addons actually being created successfully here. We only want them to be adopted by
+	// Terraform to be able to fully remove them afterwards again.
+	stateConf := resource.StateChangeConf{
+		Pending: []string{eks.AddonStatusCreating},
+		Target:  []string{eks.AddonStatusActive, eks.AddonStatusDegraded},
+		Refresh: statusAddon(ctx, conn, clusterName, addonName),
+		Timeout: addonCreatedTimeout,
+	}
+
+	outputRaw, err := stateConf.WaitForStateContext(ctx)
+
+	if output, ok := outputRaw.(*eks.Addon); ok {
+		if status, health := aws.StringValue(output.Status), output.Health; status == eks.AddonStatusCreateFailed && health != nil {
+			tfresource.SetLastError(err, AddonIssuesError(health.Issues))
+		}
+
+		return output, err
+	}
+
+	return nil, err
+}
diff --git a/internal/service/eks/cluster_addon_removal_test.go b/internal/service/eks/cluster_addon_removal_test.go
new file mode 100644
index 0000000000..7ec8d0303e
--- /dev/null
+++ b/internal/service/eks/cluster_addon_removal_test.go
@@ -0,0 +1,83 @@
+package eks_test
+
+import (
+	"context"
+	"fmt"
+	"testing"
+
+	"github.com/aws/aws-sdk-go/service/eks"
+	sdkacctest "github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
+
+	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
+	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+	tfeks "github.com/hashicorp/terraform-provider-aws/internal/service/eks"
+)
+
+func TestAccEKSCluster_Addons_remove(t *testing.T) {
+	var cluster eks.Cluster
+	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
+	resourceName := "aws_eks_cluster.test"
+
+	resource.ParallelTest(t, resource.TestCase{
+		PreCheck:          func() { acctest.PreCheck(t); testAccPreCheck(t) },
+		ErrorCheck:        acctest.ErrorCheck(t, eks.EndpointsID),
+		ProviderFactories: acctest.ProviderFactories,
+		CheckDestroy:      testAccCheckClusterDestroy,
+		Steps: []resource.TestStep{
+			{
+				Config: testAccClusterConfig_addons(rName),
+				Check: resource.ComposeTestCheckFunc(
+					testAccCheckClusterExists(resourceName, &cluster),
+					testAccCheckAddonNotExists(resourceName, "kube-proxy"),
+					testAccCheckAddonNotExists(resourceName, "coredns"),
+					testAccCheckAddonNotExists(resourceName, "vpc-cni"),
+				),
+			},
+		},
+	})
+}
+
+func testAccClusterConfig_addons(rName string) string {
+	return acctest.ConfigCompose(testAccClusterConfig_Base(rName), fmt.Sprintf(`
+
+resource "aws_eks_cluster" "test" {
+  name     = %[1]q
+  role_arn = aws_iam_role.test.arn
+
+  vpc_config {
+    subnet_ids = aws_subnet.test[*].id
+  }
+
+  default_addons_to_remove = ["kube-proxy", "coredns", "vpc-cni"]
+
+}
+`, rName))
+}
+
+func testAccCheckAddonNotExists(resourceName, addonName string) resource.TestCheckFunc {
+	return func(s *terraform.State) error {
+		rs, ok := s.RootModule().Resources[resourceName]
+		if !ok {
+			return fmt.Errorf("Not found: %s", resourceName)
+		}
+
+		if rs.Primary.ID == "" {
+			return fmt.Errorf("No EKS Cluster ID is set")
+		}
+
+		conn := acctest.Provider.Meta().(*conns.AWSClient).EKSConn
+
+		_, err := tfeks.FindAddonByClusterNameAndAddonName(context.Background(), conn, rs.Primary.ID, addonName)
+
+		if err != nil {
+			_, ok := err.(*resource.NotFoundError)
+			if ok {
+				return nil
+			}
+		}
+
+		return fmt.Errorf("EKS Addon with ID %q found", addonName)
+	}
+}
diff --git a/internal/service/eks/wait.go b/internal/service/eks/wait.go
index 34fa213a1a..8039919c31 100644
--- a/internal/service/eks/wait.go
+++ b/internal/service/eks/wait.go
@@ -11,6 +11,9 @@ import (
 )
 
 const (
+	addonCreatedTimeout = 20 * time.Minute
+	addonUpdatedTimeout = 20 * time.Minute
+	addonDeletedTimeout = 40 * time.Minute
 	clusterDeleteRetryTimeout = 60 * time.Minute
 )
 
