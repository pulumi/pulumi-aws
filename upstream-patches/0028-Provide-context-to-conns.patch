From 225e17c8a683de1264a1e6d07e2ccc62852dead4 Mon Sep 17 00:00:00 2001
From: Ian Wahbe <ian@wahbe.com>
Date: Mon, 10 Jul 2023 11:51:24 +0200
Subject: [PATCH 28/28] Provide context to conns

---
 internal/service/ecr/credentials_data_source.go  |  4 +++-
 internal/service/elasticache/security_group.go   |  4 ++--
 .../gamelift/matchmaking_configuration.go        | 12 ++++++------
 .../service/gamelift/matchmaking_rule_set.go     | 12 ++++++------
 internal/service/rds/security_group.go           |  6 +++---
 internal/service/redshift/security_group.go      |  6 +++---
 internal/service/s3legacy/bucket_legacy.go       | 16 ++++++++--------
 7 files changed, 31 insertions(+), 29 deletions(-)

diff --git a/internal/service/ecr/credentials_data_source.go b/internal/service/ecr/credentials_data_source.go
index 572754846f..9dd9fd0e8c 100644
--- a/internal/service/ecr/credentials_data_source.go
+++ b/internal/service/ecr/credentials_data_source.go
@@ -1,6 +1,7 @@
 package ecr
 
 import (
+	"context"
 	"log"
 	"time"
 
@@ -39,7 +40,8 @@ func DataSourceCredentials() *schema.Resource {
 }
 
 func dataSourceAwsEcrCredentialsRead(d *schema.ResourceData, meta interface{}) error {
-	conn := meta.(*conns.AWSClient).ECRConn()
+	ctx := context.Background()
+	conn := meta.(*conns.AWSClient).ECRConn(ctx)
 
 	registryID := d.Get("registry_id").(string)
 	log.Printf("[DEBUG] Reading ECR repository credentials %s", registryID)
diff --git a/internal/service/elasticache/security_group.go b/internal/service/elasticache/security_group.go
index f587fcbcce..f77ca2b249 100644
--- a/internal/service/elasticache/security_group.go
+++ b/internal/service/elasticache/security_group.go
@@ -58,7 +58,7 @@ func resourceSecurityGroupCreate(ctx context.Context, d *schema.ResourceData, me
 
 func resourceSecurityGroupRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	var diags diag.Diagnostics
-	conn := meta.(*conns.AWSClient).ElastiCacheConn()
+	conn := meta.(*conns.AWSClient).ElastiCacheConn(ctx)
 	req := &elasticache.DescribeCacheSecurityGroupsInput{
 		CacheSecurityGroupName: aws.String(d.Id()),
 	}
@@ -95,7 +95,7 @@ func resourceSecurityGroupRead(ctx context.Context, d *schema.ResourceData, meta
 
 func resourceSecurityGroupDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	var diags diag.Diagnostics
-	conn := meta.(*conns.AWSClient).ElastiCacheConn()
+	conn := meta.(*conns.AWSClient).ElastiCacheConn(ctx)
 
 	log.Printf("[DEBUG] Cache security group delete: %s", d.Id())
 
diff --git a/internal/service/gamelift/matchmaking_configuration.go b/internal/service/gamelift/matchmaking_configuration.go
index 4a0ccf149d..72f7d31d85 100644
--- a/internal/service/gamelift/matchmaking_configuration.go
+++ b/internal/service/gamelift/matchmaking_configuration.go
@@ -146,7 +146,7 @@ func ResourceMatchMakingConfiguration() *schema.Resource {
 }
 
 func resourceMatchmakingConfigurationCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn()
+	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
 	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
 	tags := defaultTagsConfig.MergeTags(tftags.New(ctx, d.Get("tags").(map[string]interface{})))
 
@@ -201,7 +201,7 @@ func resourceMatchmakingConfigurationCreate(ctx context.Context, d *schema.Resou
 }
 
 func resourceMatchmakingConfigurationRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn()
+	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
 	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
 	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig
 
@@ -249,7 +249,7 @@ func resourceMatchmakingConfigurationRead(ctx context.Context, d *schema.Resourc
 	d.Set("rule_set_arn", configuration.RuleSetArn)
 	d.Set("rule_set_name", configuration.RuleSetName)
 
-	tags, err := ListTags(ctx, conn, arn)
+	tags, err := listTags(ctx, conn, arn)
 
 	if err != nil {
 		return diag.Errorf("error listing tags for GameLift Matchmaking Configuration (%s): %s", arn, err)
@@ -270,7 +270,7 @@ func resourceMatchmakingConfigurationRead(ctx context.Context, d *schema.Resourc
 }
 
 func resourceMatchmakingConfigurationUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn()
+	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
 
 	log.Printf("[INFO] Updating GameLift Matchmaking Configuration: %s", d.Id())
 
@@ -325,7 +325,7 @@ func resourceMatchmakingConfigurationUpdate(ctx context.Context, d *schema.Resou
 	if d.HasChange("tags_all") {
 		o, n := d.GetChange("tags_all")
 
-		if err := UpdateTags(ctx, conn, arn, o, n); err != nil {
+		if err := updateTags(ctx, conn, arn, o, n); err != nil {
 			return diag.Errorf("error updating GameLift Matchmaking Configuration (%s) tags: %s", arn, err)
 		}
 	}
@@ -334,7 +334,7 @@ func resourceMatchmakingConfigurationUpdate(ctx context.Context, d *schema.Resou
 }
 
 func resourceMatchmakingConfigurationDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn()
+	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
 	log.Printf("[INFO] Deleting GameLift Matchmaking Configuration: %s", d.Id())
 	_, err := conn.DeleteMatchmakingConfiguration(&gamelift.DeleteMatchmakingConfigurationInput{
 		Name: aws.String(d.Id()),
diff --git a/internal/service/gamelift/matchmaking_rule_set.go b/internal/service/gamelift/matchmaking_rule_set.go
index 54b86a0426..d9f2424b7a 100644
--- a/internal/service/gamelift/matchmaking_rule_set.go
+++ b/internal/service/gamelift/matchmaking_rule_set.go
@@ -58,7 +58,7 @@ func ResourceMatchmakingRuleSet() *schema.Resource {
 }
 
 func resourceMatchmakingRuleSetCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn()
+	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
 	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
 	tags := defaultTagsConfig.MergeTags(tftags.New(ctx, d.Get("tags").(map[string]interface{})))
 
@@ -79,7 +79,7 @@ func resourceMatchmakingRuleSetCreate(ctx context.Context, d *schema.ResourceDat
 }
 
 func resourceMatchmakingRuleSetRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn()
+	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
 	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
 
 	log.Printf("[INFO] Describing GameLift Matchmaking Rule Set: %s", d.Id())
@@ -112,7 +112,7 @@ func resourceMatchmakingRuleSetRead(ctx context.Context, d *schema.ResourceData,
 	d.Set("name", ruleSet.RuleSetName)
 	d.Set("rule_set_body", ruleSet.RuleSetBody)
 
-	tags, err := ListTags(ctx, conn, arn)
+	tags, err := listTags(ctx, conn, arn)
 
 	if err != nil {
 		return diag.Errorf("error listing tags for GameLift Matchmaking Rule Set (%s): %s", arn, err)
@@ -130,7 +130,7 @@ func resourceMatchmakingRuleSetRead(ctx context.Context, d *schema.ResourceData,
 }
 
 func resourceMatchmakingRuleSetUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn()
+	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
 
 	log.Printf("[INFO] Updating GameLift Matchmaking Rule Set: %s", d.Id())
 
@@ -138,7 +138,7 @@ func resourceMatchmakingRuleSetUpdate(ctx context.Context, d *schema.ResourceDat
 	if d.HasChange("tags_all") {
 		o, n := d.GetChange("tags_all")
 
-		if err := UpdateTags(ctx, conn, arn, o, n); err != nil {
+		if err := updateTags(ctx, conn, arn, o, n); err != nil {
 			return diag.Errorf("error updating GameLift Matchmaking Rule Set (%s) tags: %s", arn, err)
 		}
 	}
@@ -147,7 +147,7 @@ func resourceMatchmakingRuleSetUpdate(ctx context.Context, d *schema.ResourceDat
 }
 
 func resourceMatchmakingRuleSetDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).GameLiftConn()
+	conn := meta.(*conns.AWSClient).GameLiftConn(ctx)
 	log.Printf("[INFO] Deleting GameLift Matchmaking Rule Set: %s", d.Id())
 	_, err := conn.DeleteMatchmakingRuleSet(&gamelift.DeleteMatchmakingRuleSetInput{
 		Name: aws.String(d.Id()),
diff --git a/internal/service/rds/security_group.go b/internal/service/rds/security_group.go
index 54d4e61495..4f04bdc861 100644
--- a/internal/service/rds/security_group.go
+++ b/internal/service/rds/security_group.go
@@ -142,7 +142,7 @@ func resourceSecurityGroupRead(ctx context.Context, d *schema.ResourceData, meta
 
 func resourceSecurityGroupUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	var diags diag.Diagnostics
-	conn := meta.(*conns.AWSClient).RDSConn()
+	conn := meta.(*conns.AWSClient).RDSConn(ctx)
 
 	if d.HasChange("ingress") {
 		sg, err := resourceSecurityGroupRetrieve(ctx, d, meta)
@@ -185,7 +185,7 @@ func resourceSecurityGroupUpdate(ctx context.Context, d *schema.ResourceData, me
 
 func resourceSecurityGroupDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	var diags diag.Diagnostics
-	conn := meta.(*conns.AWSClient).RDSConn()
+	conn := meta.(*conns.AWSClient).RDSConn(ctx)
 
 	log.Printf("[DEBUG] DB Security Group destroy: %v", d.Id())
 
@@ -203,7 +203,7 @@ func resourceSecurityGroupDelete(ctx context.Context, d *schema.ResourceData, me
 }
 
 func resourceSecurityGroupRetrieve(ctx context.Context, d *schema.ResourceData, meta interface{}) (*rds.DBSecurityGroup, error) {
-	conn := meta.(*conns.AWSClient).RDSConn()
+	conn := meta.(*conns.AWSClient).RDSConn(ctx)
 
 	opts := rds.DescribeDBSecurityGroupsInput{
 		DBSecurityGroupName: aws.String(d.Id()),
diff --git a/internal/service/redshift/security_group.go b/internal/service/redshift/security_group.go
index 47b5d7cda2..050fee663a 100644
--- a/internal/service/redshift/security_group.go
+++ b/internal/service/redshift/security_group.go
@@ -119,7 +119,7 @@ func resourceSecurityGroupRead(ctx context.Context, d *schema.ResourceData, meta
 
 func resourceSecurityGroupUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	var diags diag.Diagnostics
-	conn := meta.(*conns.AWSClient).RedshiftConn()
+	conn := meta.(*conns.AWSClient).RedshiftConn(ctx)
 
 	if d.HasChange("ingress") {
 		o, n := d.GetChange("ingress")
@@ -162,7 +162,7 @@ func resourceSecurityGroupUpdate(ctx context.Context, d *schema.ResourceData, me
 
 func resourceSecurityGroupDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
 	var diags diag.Diagnostics
-	conn := meta.(*conns.AWSClient).RedshiftConn()
+	conn := meta.(*conns.AWSClient).RedshiftConn(ctx)
 
 	log.Printf("[DEBUG] Redshift Security Group destroy: %v", d.Id())
 	opts := redshift.DeleteClusterSecurityGroupInput{
@@ -183,7 +183,7 @@ func resourceSecurityGroupDelete(ctx context.Context, d *schema.ResourceData, me
 }
 
 func resourceSecurityGroupRetrieve(ctx context.Context, d *schema.ResourceData, meta interface{}) (*redshift.ClusterSecurityGroup, error) {
-	conn := meta.(*conns.AWSClient).RedshiftConn()
+	conn := meta.(*conns.AWSClient).RedshiftConn(ctx)
 
 	opts := redshift.DescribeClusterSecurityGroupsInput{
 		ClusterSecurityGroupName: aws.String(d.Id()),
diff --git a/internal/service/s3legacy/bucket_legacy.go b/internal/service/s3legacy/bucket_legacy.go
index ba95f6c2b6..0563bd3a25 100644
--- a/internal/service/s3legacy/bucket_legacy.go
+++ b/internal/service/s3legacy/bucket_legacy.go
@@ -672,7 +672,7 @@ func ResourceBucketLegacy() *schema.Resource {
 }
 
 func resourceBucketLegacyCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).S3Conn()
+	conn := meta.(*conns.AWSClient).S3Conn(ctx)
 
 	// Get the bucket and acl
 	var bucket string
@@ -745,7 +745,7 @@ func resourceBucketLegacyCreate(ctx context.Context, d *schema.ResourceData, met
 }
 
 func resourceBucketLegacyUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).S3Conn()
+	conn := meta.(*conns.AWSClient).S3Conn(ctx)
 
 	if d.HasChange("tags_all") {
 		o, n := d.GetChange("tags_all")
@@ -853,7 +853,7 @@ func resourceBucketLegacyUpdate(ctx context.Context, d *schema.ResourceData, met
 }
 
 func resourceBucketLegacyRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).S3Conn()
+	conn := meta.(*conns.AWSClient).S3Conn(ctx)
 	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig
 	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig
 
@@ -1364,7 +1364,7 @@ func resourceBucketLegacyRead(ctx context.Context, d *schema.ResourceData, meta
 	}
 
 	// Add website_endpoint as an attribute
-	websiteEndpoint, err := websiteLegacyEndpoint(meta.(*conns.AWSClient), d)
+	websiteEndpoint, err := websiteLegacyEndpoint(ctx, meta.(*conns.AWSClient), d)
 	if err != nil {
 		return diag.FromErr(err)
 	}
@@ -1414,7 +1414,7 @@ func resourceBucketLegacyRead(ctx context.Context, d *schema.ResourceData, meta
 }
 
 func resourceBucketLegacyDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
-	conn := meta.(*conns.AWSClient).S3Conn()
+	conn := meta.(*conns.AWSClient).S3Conn(ctx)
 
 	log.Printf("[DEBUG] S3 Delete Bucket: %s", d.Id())
 	_, err := conn.DeleteBucket(&s3.DeleteBucketInput{
@@ -1430,7 +1430,7 @@ func resourceBucketLegacyDelete(ctx context.Context, d *schema.ResourceData, met
 			// Use a S3 service client that can handle multiple slashes in URIs.
 			// While aws_s3_bucket_object resources cannot create these object
 			// keys, other AWS services and applications using the S3 Bucket can.
-			conn = meta.(*conns.AWSClient).S3ConnURICleaningDisabled()
+			conn = meta.(*conns.AWSClient).S3ConnURICleaningDisabled(ctx)
 
 			// bucket may have things delete them
 			log.Printf("[DEBUG] S3 Bucket attempting to forceDestroy %+v", err)
@@ -1752,7 +1752,7 @@ func resourceBucketLegacyWebsiteDelete(conn *s3.S3, d *schema.ResourceData) erro
 	return nil
 }
 
-func websiteLegacyEndpoint(client *conns.AWSClient, d *schema.ResourceData) (*S3WebsiteLegacy, error) {
+func websiteLegacyEndpoint(ctx context.Context, client *conns.AWSClient, d *schema.ResourceData) (*S3WebsiteLegacy, error) {
 	// If the bucket doesn't have a website configuration, return an empty
 	// endpoint
 	if _, ok := d.GetOk("website"); !ok {
@@ -1764,7 +1764,7 @@ func websiteLegacyEndpoint(client *conns.AWSClient, d *schema.ResourceData) (*S3
 	// Lookup the region for this bucket
 
 	locationResponse, err := retryOnAWSCode(s3.ErrCodeNoSuchBucket, func() (interface{}, error) {
-		return client.S3Conn().GetBucketLocation(
+		return client.S3Conn(ctx).GetBucketLocation(
 			&s3.GetBucketLocationInput{
 				Bucket: aws.String(bucket),
 			},
