From 9c43d636ac50c167ef701ed2063d496754942136 Mon Sep 17 00:00:00 2001
From: Daniel Bradley <daniel@pulumi.com>
Date: Fri, 4 Nov 2022 17:36:34 +0000
Subject: [PATCH 11/29] Add ECR credentials_data_source

---
 internal/provider/provider.go                 |  6 +-
 .../service/ecr/credentials_data_source.go    | 69 +++++++++++++++++++
 .../ecr/credentials_data_source_test.go       | 37 ++++++++++
 3 files changed, 111 insertions(+), 1 deletion(-)
 create mode 100644 internal/service/ecr/credentials_data_source.go
 create mode 100644 internal/service/ecr/credentials_data_source_test.go

diff --git a/internal/provider/provider.go b/internal/provider/provider.go
index 83a9786f34..92e08099d8 100644
--- a/internal/provider/provider.go
+++ b/internal/provider/provider.go
@@ -8,6 +8,7 @@ import (
 	"regexp"
 	"time"
 
+	"github.com/hashicorp/terraform-provider-aws/internal/service/ecr"
 	"github.com/hashicorp/terraform-provider-aws/internal/service/s3legacy"
 
 	"github.com/aws/aws-sdk-go-v2/feature/ec2/imds"
@@ -223,7 +224,10 @@ func New(ctx context.Context) (*schema.Provider, error) {
 		// Data sources and resources implemented using Terraform Plugin SDK
 		// should use the @SDKDataSource and @SDKResource function-level annotations
 		// rather than adding directly to these maps.
-		DataSourcesMap: make(map[string]*schema.Resource),
+		DataSourcesMap: map[string]*schema.Resource{
+			"aws_ecr_credentials": ecr.DataSourceCredentials(),
+		},
+
 		ResourcesMap: map[string]*schema.Resource{
 			"aws_s3_bucket_legacy": s3legacy.ResourceBucketLegacy(),
 		},
diff --git a/internal/service/ecr/credentials_data_source.go b/internal/service/ecr/credentials_data_source.go
new file mode 100644
index 0000000000..572754846f
--- /dev/null
+++ b/internal/service/ecr/credentials_data_source.go
@@ -0,0 +1,69 @@
+package ecr
+
+import (
+	"log"
+	"time"
+
+	"github.com/hashicorp/terraform-provider-aws/internal/conns"
+
+	"github.com/aws/aws-sdk-go/aws"
+	"github.com/aws/aws-sdk-go/aws/awserr"
+	"github.com/aws/aws-sdk-go/service/ecr"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
+)
+
+func DataSourceCredentials() *schema.Resource {
+	return &schema.Resource{
+		Read: dataSourceAwsEcrCredentialsRead,
+
+		Schema: map[string]*schema.Schema{
+			"registry_id": {
+				Type:     schema.TypeString,
+				Required: true,
+				ForceNew: true,
+			},
+			"authorization_token": {
+				Type:     schema.TypeString,
+				Computed: true,
+			},
+			"expires_at": {
+				Type:     schema.TypeString,
+				Computed: true,
+			},
+			"proxy_endpoint": {
+				Type:     schema.TypeString,
+				Computed: true,
+			},
+		},
+	}
+}
+
+func dataSourceAwsEcrCredentialsRead(d *schema.ResourceData, meta interface{}) error {
+	conn := meta.(*conns.AWSClient).ECRConn()
+
+	registryID := d.Get("registry_id").(string)
+	log.Printf("[DEBUG] Reading ECR repository credentials %s", registryID)
+
+	out, err := conn.GetAuthorizationToken(&ecr.GetAuthorizationTokenInput{
+		RegistryIds: []*string{aws.String(registryID)},
+	})
+
+	if err != nil {
+		if ecrerr, ok := err.(awserr.Error); ok && ecrerr.Code() == "ErrCodeInvalidParameterException" {
+			log.Printf("[WARN] ECR Repository %s not found", d.Id())
+			d.SetId("")
+			return nil
+		}
+		return err
+	}
+
+	auth := out.AuthorizationData[0]
+	log.Printf("[DEBUG] Received ECR repository credentials for %s", auth.ProxyEndpoint)
+
+	d.SetId(registryID)
+	d.Set("authorization_token", auth.AuthorizationToken)
+	d.Set("expires_at", auth.ExpiresAt.Format(time.RFC3339))
+	d.Set("proxy_endpoint", auth.ProxyEndpoint)
+
+	return nil
+}
diff --git a/internal/service/ecr/credentials_data_source_test.go b/internal/service/ecr/credentials_data_source_test.go
new file mode 100644
index 0000000000..28bc53646f
--- /dev/null
+++ b/internal/service/ecr/credentials_data_source_test.go
@@ -0,0 +1,37 @@
+package ecr_test
+
+import (
+	"fmt"
+	"regexp"
+	"testing"
+
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
+)
+
+func TestAccAWSEcrDataSource_ecrCredentials(t *testing.T) {
+	resource.Test(t, resource.TestCase{
+		PreCheck:  func() { testAccPreCheck(t) },
+		Providers: testAccProviders,
+		Steps: []resource.TestStep{
+			{
+				Config: testAccCheckAwsEcrCredentialsDataSourceConfig,
+				Check: resource.ComposeTestCheckFunc(
+					resource.TestCheckResourceAttrSet("data.aws_ecr_credentials.default", "authorization_token"),
+					resource.TestCheckResourceAttrSet("data.aws_ecr_credentials.default", "expires_at"),
+					resource.TestMatchResourceAttr("data.aws_ecr_credentials.default", "proxy_endpoint", regexp.MustCompile("^https://\\d+\\.dkr\\.ecr\\.[a-zA-Z]+-[a-zA-Z]+-\\d+\\.amazonaws\\.com$")),
+				),
+			},
+		},
+	})
+}
+
+var testAccCheckAwsEcrCredentialsDataSourceConfig = fmt.Sprintf(`
+resource "aws_ecr_repository" "default" {
+  name = "foo-repository-terraform-%d"
+}
+
+data "aws_ecr_credentials" "default" {
+  registry_id = "${aws_ecr_repository.default.registry_id}"
+}
+`, acctest.RandInt())
