# WARNING: This file is autogenerated - changes will be overwritten if not made via https://github.com/pulumi/ci-mgmt

env:
  PR_COMMIT_SHA: ${{ github.event.client_payload.pull_request.head.sha }}
  AWS_REGION: us-west-2
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}
  OIDC_ROLE_ARN: ${{ secrets.OIDC_ROLE_ARN }}
  PUBLISH_REPO_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
  PUBLISH_REPO_USERNAME: ${{ secrets.OSSRH_USERNAME }}
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  PULUMI_API: https://api.pulumi-staging.io
  PULUMI_GO_DEP_ROOT: ${{ github.workspace }}/..
  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
  PULUMI_MISSING_DOCS_ERROR: true
  PYPI_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  PYPI_USERNAME: __token__
  SIGNING_KEY: ${{ secrets.JAVA_SIGNING_KEY }}
  SIGNING_KEY_ID: ${{ secrets.JAVA_SIGNING_KEY_ID }}
  SIGNING_PASSWORD: ${{ secrets.JAVA_SIGNING_PASSWORD }}
  TF_APPEND_USER_AGENT: pulumi

# This should cancel any previous runs of the same workflow on the same branch which are still running.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  prerequisites:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    uses: ./.github/workflows/prerequisites.yml
    secrets: inherit
    with:
      default_branch: ${{ github.event.repository.default_branch }}
      is_pr: ${{ github.event_name == 'pull_request' }}
      is_automated: ${{ github.actor == 'dependabot[bot]' }}

  build_provider:
    uses: ./.github/workflows/build_provider.yml
    needs: prerequisites
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}

  build_sdk:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: build_sdk
    needs: prerequisites
    uses: ./.github/workflows/build_sdk.yml
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}
  combine_build_artifacts:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: combine_build_artifacts
    needs: build_sdk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "*-sdk.tar.gz"
          merge-multiple: true
          path: ${{ github.workspace }}/sdk
      - name: Uncompress SDK folders
        run: |
          files=$(find ${{ github.workspace }}/sdk -name "*.tar.gz" -print)
          echo "$files"
          ls -R ${{ github.workspace }}/sdk
          for file in $files
          do
            echo "$file"
            filename=$(basename $file)
            language=$(echo $filename | sed 's/\..*//')
            mkdir -p ${{ github.workspace }}/sdk/$language/
            tar -zxf $file -C ${{ github.workspace }}/sdk/$language
          done
      - name: Compress sdk
        run: |
          ls ${{ github.workspace }}/sdk/python
          tar -zcf sdk.tar.gz -C ${{ github.workspace }}/sdk .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdk.tar.gz
          path: ${{ github.workspace }}/sdk.tar.gz
          retention-days: 30

  comment-notification:
    if: github.event_name == 'repository_dispatch'
    name: comment-notification
    runs-on: ubuntu-latest
    steps:
    - id: run-url
      name: Create URL to the run output
      run: echo "run-url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "$GITHUB_OUTPUT"
    - name: Update with Result
      uses: peter-evans/create-or-update-comment@v1
      with:
        body: "Please view the PR build: ${{ steps.run-url.outputs.run-url }}"
        issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
        repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
        token: ${{ secrets.PULUMI_BOT_TOKEN }}
  sentinel:
    name: sentinel
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    needs:
    - test
    - build_provider
    - license_check
    - go_test_shim
    - provider_test
    - test_oidc
    - upstream_lint
    runs-on: ubuntu-latest
    steps:
    - uses: guibranco/github-status-action-v2@0849440ec82c5fa69b2377725b9b7852a3977e76
      with: 
        authToken: ${{secrets.GITHUB_TOKEN}}
        # Write an explicit status check called "Sentinel" which will only pass if this code really runs.
        # This should always be a required check for PRs.
        context: 'Sentinel'
        description: 'All required checks passed'
        state: 'success'
        # Write to the PR commit SHA if it's available as we don't want the merge commit sha,
        # otherwise use the current SHA for any other type of build.
        sha: ${{ github.event.pull_request.head.sha || github.sha }}

  test:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: test
    needs:
      - prerequisites
      - build_sdk
      - combine_build_artifacts
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
    # Run as first step so we don't delete things that have just been installed
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
      with:
        tool-cache: false
        swap-storage: false
    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        ref: ${{ env.PR_COMMIT_SHA }}
        submodules: true
    - name: Checkout p/examples
      if: matrix.testTarget == 'pulumiExamples'
      uses: actions/checkout@v4
      with:
        repository: pulumi/examples
        path: p-examples
    - name: Setup tools
      uses: ./.github/actions/setup-tools
      with:
        tools: pulumictl, pulumicli, go, node, dotnet, python, java
        cache_name: test-examples
    - name: Download bin
      uses: ./.github/actions/download-bin
    - run: dotnet nuget add source ${{ github.workspace }}/nuget
    - name: Download SDK
      uses: ./.github/actions/download-sdk
      with:
        language: ${{ matrix.language }}
    - name: Update path
      run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
    - name: Install Python deps
      run: |-
        pip3 install virtualenv==20.0.23
        pip3 install pipenv
    - name: Install dependencies
      run: make install_sdks
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: ${{ env.AWS_REGION }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 3600
        role-session-name: aws@githubActions
        role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
    - name: Make upstream
      run: make upstream
    - name: Install gotestsum
      run: go install gotest.tools/gotestsum@latest
    - name: Download JUnit Summary from Previous Workflow
      id: download-artifact
      uses: dawidd6/action-download-artifact@v4
      with:
        workflow_conclusion: success
        name: junit-test-summary
        if_no_artifact_found: warn
        # Uncomment the next line before pushing to main branch, that way all branches can
        # benefit from timing data once it's established there.
        # branch: main
    - name: Generate go test Slice
      id: test_split
      uses: hashicorp-forge/go-test-split-action@v2.0.0
      with:
        working-directory: examples
        flags: "-tags=all -timeout 30m"
        total: ${{ matrix.parallel }}
        index: ${{ matrix.index }}
        junit-summary: ./junit-test-summary.xml
    - name: Run tests
      if: matrix.testTarget == 'local'
      run: cd examples && gotestsum --junitfile node-summary.xml --format github-actions -- -v -count=1 -timeout 2h -tags=all -skip TestPulumiExamples -parallel 4 -run "${{ steps.test_split.outputs.run }}"
    - name: Run pulumi/examples tests
      if: matrix.testTarget == 'pulumiExamples'
      run: cd examples && gotestsum --junitfile node-summary.xml --format github-actions -- -v -count=1 -timeout 2h -tags=all -skip TestPulumiExamples -parallel 4 -run "${{ steps.test_split.outputs.run }}"
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: junit-test-summary-${{ matrix.index }}
        path: examples/node-summary.xml
        retention-days: 1
    strategy:
      fail-fast: false
      matrix:
        parallel: [5]
        index: [0, 1, 2, 3, 4]
        testTarget: [local]
  tests-combine-summaries:
    name: Combine Test Reports
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          pattern: "junit-*.xml"

      - name: Install junit-report-merger
        run: npm install -g junit-report-merger

      - name: Merge examples reports
        run: jrm ./junit-test-summary.xml "junit-test-summary-0/*.xml" "junit-test-summary-1/*.xml" "junit-test-summary-2/*.xml" "junit-test-summary-3/*.xml" "junit-test-summary-4/*.xml"

      - name: Merge provider reports
        run: jrm ./junit-provider-test-summary.xml "junit-provider-test-summary-0/*.xml" "junit-provider-test-summary-1/*.xml" "junit-provider-test-summary-2/*.xml" "junit-provider-test-summary-3/*.xml" "junit-provider-test-summary-4/*.xml"

      - name: Upload provider artifacts
        uses: actions/upload-artifact@v4
        with:
          name: junit-provider-test-summary
          path: ./junit-provider-test-summary.xml

      - name: Upload examples artifacts
        uses: actions/upload-artifact@v4
        with:
          name: junit-test-summary
          path: ./junit-test-summary.xml
  license_check:
    name: License Check
    uses: ./.github/workflows/license.yml
    secrets: inherit
  go_test_shim:
      name: Run test of provider shim
      runs-on: ubuntu-latest
      steps:
          - name: Checkout Repo
            uses: actions/checkout@v4
            with:
              ref: ${{ env.PR_COMMIT_SHA }}
              submodules: true
          - uses: pulumi/provider-version-action@v1
            with:
              set-env: PROVIDER_VERSION
          - name: Setup tools
            uses: ./.github/actions/setup-tools
            with:
              tools: pulumictl, pulumi, go
              cache_name: shim
          - name: Make upstream
            run: make upstream
          - name: go test
            run: |
              cd upstream
              go get github.com/hashicorp/aws-sdk-go-base@v1.1.0
              cd shim
              go test -v -coverprofile="coverage.txt" .
          - env:
              CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
            name: Upload coverage reports to Codecov
            uses: codecov/codecov-action@v4
      timeout-minutes: 60
  provider_test:
      name: provider_test
      needs: 
        - build_sdk
        - combine_build_artifacts
      permissions:
          contents: read
          id-token: write
      runs-on: ubuntu-latest
      steps:
          - name: Free Disk Space (Ubuntu)
            uses: jlumbroso/free-disk-space@main
            with:
              swap-storage: false
              tool-cache: false
          - name: Checkout Repo
            uses: actions/checkout@v4
            with:
              ref: ${{ env.PR_COMMIT_SHA }}
              submodules: true
          - uses: pulumi/provider-version-action@v1
            with:
              set-env: PROVIDER_VERSION
          - name: Setup tools
            uses: ./.github/actions/setup-tools
            with:
              tools: pulumictl, pulumi, go, node, dotnet, python, java
              cache_name: test-provider
          - name: Make upstream
            run: make upstream
          - name: Download provider + tfgen binaries
            uses: actions/download-artifact@v4
            with:
              name: aws-provider.tar.gz
              path: ${{ github.workspace }}/bin
          - name: Untar provider binaries
            run: |-
              tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace}}/bin
              find ${{ github.workspace }} -name "pulumi-*-aws" -print -exec chmod +x {} \;
          - run: dotnet nuget add source ${{ github.workspace }}/nuget
          - name: Download SDK
            uses: ./.github/actions/download-sdk
            with:
              language: ${{ matrix.language }}
          - name: Update path
            run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
          - name: Install Python deps
            run: |-
              pip3 install virtualenv==20.0.23
              pip3 install pipenv
          - name: Install dependencies
            run: make install_sdks
          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-region: ${{ env.AWS_REGION }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              role-duration-seconds: 3600
              role-session-name: aws@githubActions
              role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
          - name: Install gotestsum
            run: go install gotest.tools/gotestsum@latest
          - name: Download JUnit Summary from Previous Workflow
            id: download-artifact
            uses: dawidd6/action-download-artifact@v4
            with:
              workflow_conclusion: success
              name: junit-provider-test-summary
              if_no_artifact_found: warn
              # Uncomment the next line before pushing to main branch, that way all branches can
              # benefit from timing data once it's established there.
              # branch: main
          - name: Download schema-embed.json
            uses: actions/download-artifact@v4
            with:
              # Use a pattern to avoid failing if the artifact doesn't exist
              pattern: schema-embed.*
              # Avoid creating directories for each artifact
              merge-multiple: true
              path: provider/cmd/pulumi-resource-aws/schema-embed.json
          - name: List tests
            run: cd provider && go test ./... -list . -tags=all -timeout 30m
          - name: Generate go test Slice
            id: test_split
            uses: hashicorp-forge/go-test-split-action@v2.0.0
            with:
              working-directory: provider
              flags: "-tags=all -timeout 30m"
              total: ${{ matrix.parallel }}
              index: ${{ matrix.index }}
              junit-summary: ./junit-provider-test-summary.xml
          - name: Run provider tests
            run: cd provider && gotestsum --junitfile node-summary.xml --format github-actions -- -v -count=1 -timeout 2h -tags=all -parallel 4 -run "${{ steps.test_split.outputs.run }}"
          - name: Upload test artifacts
            uses: actions/upload-artifact@v4
            with:
              name: junit-provider-test-summary-${{ matrix.index }}
              path: provider/node-summary.xml
              retention-days: 1
      strategy:
          fail-fast: false
          matrix:
            parallel: [5]
            index: [0, 1, 2, 3, 4]
  test_oidc:
      name: test_oidc
      needs: build_sdk
      permissions:
          contents: read
          id-token: write
      runs-on: ubuntu-latest
      steps:
          - name: Free Disk Space (Ubuntu)
            uses: jlumbroso/free-disk-space@main
            with:
              dotnet: ${{ matrix.language != 'dotnet' }}
              swap-storage: false
              tool-cache: false
          - name: Checkout Repo
            uses: actions/checkout@v4
            with:
              ref: ${{ env.PR_COMMIT_SHA }}
              submodules: true
          - uses: pulumi/provider-version-action@v1
            with:
              set-env: PROVIDER_VERSION
          - name: Setup tools
            uses: ./.github/actions/setup-tools
            with:
              tools: pulumictl, pulumi, go, node
              cache_name: test-oidc
          - name: Download provider + tfgen binaries
            uses: actions/download-artifact@v4
            with:
              name: aws-provider.tar.gz
              path: ${{ github.workspace }}/bin
          - name: Untar provider binaries
            run: |-
              tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{ github.workspace}}/bin
              find ${{ github.workspace }} -name "pulumi-*-aws" -print -exec chmod +x {} \;
          - name: Download SDK
            uses: actions/download-artifact@v4
            with:
              name: ${{ matrix.language }}-sdk.tar.gz
              path: ${{ github.workspace}}/sdk/
          - name: Uncompress SDK folder
            run: tar -zxf ${{ github.workspace }}/sdk/${{ matrix.language }}.tar.gz -C ${{ github.workspace }}/sdk/${{ matrix.language }}
          - name: Update path
            run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
          - name: Install dependencies
            run: make install_${{ matrix.language}}_sdk
          - name: Install gotestfmt
            uses: GoTestTools/gotestfmt-action@v2
            with:
              token: ${{ secrets.GITHUB_TOKEN }}
              version: v2.4.0
          - name: Make upstream
            run: make upstream
          - name: Run selected tests with manual web identity/OIDC auth
            run: cd examples && go test -v -json -count=1 -run TestAccCloudWatchOidcManual -tags=${{ matrix.language }} -parallel 4 . 2>&1 | tee /tmp/gotest.log | gotestfmt
          - name: Configure AWS Credentials for OIDC
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-region: ${{ env.AWS_REGION }}
              role-duration-seconds: 3600
              role-session-name: aws@githubActions
              role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
              unset-current-credentials: true
          - name: Run selected tests with configure-aws-credentials web identity/OIDC auth
            run: cd examples && go test -v -json -count=1 -run TestAccCloudWatch -tags=${{ matrix.language }} -parallel 4 . 2>&1 | tee /tmp/gotest.log | gotestfmt
          - if: failure() && github.event_name == 'push'
            name: Notify Slack
            uses: 8398a7/action-slack@v3
            with:
              author_name: Failure in running ${{ matrix.language }} tests
              fields: repo,commit,author,action
              status: ${{ job.status }}
      strategy:
          fail-fast: false
          matrix:
              language:
                  - nodejs
  upstream_lint:
      name: Run upstream provider-lint
      runs-on: ubuntu-latest
      steps:
          - name: Free Disk Space (Ubuntu)
            uses: jlumbroso/free-disk-space@main
            with:
              swap-storage: false
              tool-cache: false
          - name: Checkout Repo
            uses: actions/checkout@v4
            with:
              ref: ${{ env.PR_COMMIT_SHA }}
              submodules: true
          - name: Setup tools
            uses: ./.github/actions/setup-tools
            with:
              tools: go
              cache_name: upstream-lint
          - name: Make upstream
            run: make upstream
          - name: upstream lint
            run: |
              cd upstream
              make provider-lint
      timeout-minutes: 60

name: run-acceptance-tests
on:
  pull_request:
    paths-ignore:
    - CHANGELOG.md
  repository_dispatch:
    types:
    - run-acceptance-tests-command
