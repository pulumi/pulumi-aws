name: ecs-service
runtime: yaml
resources:
  vpc:
    type: aws:ec2/vpc:Vpc
    properties:
      cidrBlock: "10.0.0.0/16"

  subnet:
    type: aws:ec2/subnet:Subnet
    properties:
      cidrBlock: "10.0.1.0/24"
      vpcId: ${vpc.id}

  secondSubnet:
    type: aws:ec2/subnet:Subnet
    properties:
      cidrBlock: "10.0.2.0/24"
      vpcId: ${vpc.id}
  ecsCluster:
    type: aws:ecs/cluster:Cluster

  taskDefinition:
    type: aws:ecs/taskDefinition:TaskDefinition
    properties:
      family: fargate-task-definition
      cpu: 256
      memory: 512
      networkMode: awsvpc
      requiresCompatibilities:
        - FARGATE
      executionRoleArn: ${ecsExecutionRole.arn}
      containerDefinitions: |
        [{
          "name": "my-app",
          "image": "nginx",
          "portMappings": [{
            "containerPort": 80,
            "hostPort": 80,
            "protocol": "tcp"
          }]
        }]

  ecsExecutionRole:
    type: aws:iam/role:Role
    properties:
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Effect": "Allow",
              "Sid": ""
            }
          ]
        }

  ecsExecutionRolePolicy:
    type: aws:iam/rolePolicy:RolePolicy
    properties:
      role: ${ecsExecutionRole.name}
      policy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "logs:*",
                "ecs:*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ]
        }

  ecsSecurityGroup:
    type: aws:ec2/securityGroup:SecurityGroup
    properties:
      vpcId: ${vpc.id}

  securityGroupRule:
    type: aws:ec2:SecurityGroupRule
    properties:
      type: ingress
      fromPort: 80
      toPort: 80
      protocol: tcp
      cidrBlocks:
        - ${vpc.cidrBlock}
      securityGroupId: ${ecsSecurityGroup}

  ecsService:
    type: aws:ecs/service:Service
    properties:
      cluster: ${ecsCluster.id}
      taskDefinition: ${taskDefinition.arn}
      desiredCount: 1
      launchType: FARGATE
      networkConfiguration:
          securityGroups: ["${ecsSecurityGroup.id}"]
          subnets: ["${subnet.id}", "${secondSubnet.id}"]
          assignPublicIp: true
