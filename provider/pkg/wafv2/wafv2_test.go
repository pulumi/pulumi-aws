// Copyright 2016-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wafv2

import (
	"context"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	awsShim "github.com/hashicorp/terraform-provider-aws/shim"
	"github.com/pulumi/pulumi/sdk/v3/go/common/util/contract"
	"github.com/stretchr/testify/require"
)

func TestWebAclSetHash(t *testing.T) {
	ctx := context.Background()
	upstreamProvider, err := awsShim.NewUpstreamProvider(ctx)
	contract.AssertNoErrorf(err, "NewUpstreamProvider failed to initialize")
	ReconfigureResources(upstreamProvider.SDKV2Provider)

	res := upstreamProvider.SDKV2Provider.ResourcesMap["aws_wafv2_web_acl"]

	cfg := func(block any) map[string]any {
		return map[string]any{
			"scope": "REGIONAL",
			"name":  "autogenerated-name",
			"default_action": []any{
				map[string]any{
					"allow": []any{map[string]any{}},
				},
			},
			"visibility_config": []any{
				map[string]any{
					"cloudwatch_metrics_enabled": true,
					"metric_name":                "myWebAclMetrics",
					"sampled_requests_enabled":   false,
				},
			},
			"rule": schema.NewSet(res.SchemaMap()["rule"].Set, []any{
				map[string]any{
					"action": []any{
						map[string]any{
							"block": block,
						},
					},
					"name":     "IPAllowRule",
					"priority": 0,
					"statement": []any{
						map[string]any{
							"ip_set_reference_statement": []any{map[string]any{
								"arn": "some-arn",
							}},
						},
					},
					"visibility_config": []any{
						map[string]any{
							"cloudwatch_metrics_enabled": true,
							"metric_name":                "IPAllowRule",
							"sampled_requests_enabled":   true,
						},
					},
				},
			}),
		}
	}

	hash1 := schema.HashResource(res)(cfg([]any{map[string]any{
		"custom_response": nil,
	}}))

	hash2 := schema.HashResource(res)(cfg([]any{map[string]any{
		"custom_response": []any{},
	}}))

	require.Equal(t, hash2, hash1)
}
