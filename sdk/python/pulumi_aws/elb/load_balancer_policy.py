# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoadBalancerPolicyArgs', 'LoadBalancerPolicy']

@pulumi.input_type
class LoadBalancerPolicyArgs:
    def __init__(__self__, *,
                 load_balancer_name: pulumi.Input[str],
                 policy_name: pulumi.Input[str],
                 policy_type_name: pulumi.Input[str],
                 policy_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPolicyPolicyAttributeArgs']]]] = None):
        """
        The set of arguments for constructing a LoadBalancerPolicy resource.
        :param pulumi.Input[str] load_balancer_name: The load balancer on which the policy is defined.
        :param pulumi.Input[str] policy_name: The name of the load balancer policy.
        :param pulumi.Input[str] policy_type_name: The policy type.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerPolicyPolicyAttributeArgs']]] policy_attributes: Policy attribute to apply to the policy.
        """
        LoadBalancerPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            load_balancer_name=load_balancer_name,
            policy_name=policy_name,
            policy_type_name=policy_type_name,
            policy_attributes=policy_attributes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             load_balancer_name: Optional[pulumi.Input[str]] = None,
             policy_name: Optional[pulumi.Input[str]] = None,
             policy_type_name: Optional[pulumi.Input[str]] = None,
             policy_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPolicyPolicyAttributeArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if load_balancer_name is None and 'loadBalancerName' in kwargs:
            load_balancer_name = kwargs['loadBalancerName']
        if load_balancer_name is None:
            raise TypeError("Missing 'load_balancer_name' argument")
        if policy_name is None and 'policyName' in kwargs:
            policy_name = kwargs['policyName']
        if policy_name is None:
            raise TypeError("Missing 'policy_name' argument")
        if policy_type_name is None and 'policyTypeName' in kwargs:
            policy_type_name = kwargs['policyTypeName']
        if policy_type_name is None:
            raise TypeError("Missing 'policy_type_name' argument")
        if policy_attributes is None and 'policyAttributes' in kwargs:
            policy_attributes = kwargs['policyAttributes']

        _setter("load_balancer_name", load_balancer_name)
        _setter("policy_name", policy_name)
        _setter("policy_type_name", policy_type_name)
        if policy_attributes is not None:
            _setter("policy_attributes", policy_attributes)

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> pulumi.Input[str]:
        """
        The load balancer on which the policy is defined.
        """
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_name", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        """
        The name of the load balancer policy.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="policyTypeName")
    def policy_type_name(self) -> pulumi.Input[str]:
        """
        The policy type.
        """
        return pulumi.get(self, "policy_type_name")

    @policy_type_name.setter
    def policy_type_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_type_name", value)

    @property
    @pulumi.getter(name="policyAttributes")
    def policy_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPolicyPolicyAttributeArgs']]]]:
        """
        Policy attribute to apply to the policy.
        """
        return pulumi.get(self, "policy_attributes")

    @policy_attributes.setter
    def policy_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPolicyPolicyAttributeArgs']]]]):
        pulumi.set(self, "policy_attributes", value)


@pulumi.input_type
class _LoadBalancerPolicyState:
    def __init__(__self__, *,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 policy_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPolicyPolicyAttributeArgs']]]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 policy_type_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LoadBalancerPolicy resources.
        :param pulumi.Input[str] load_balancer_name: The load balancer on which the policy is defined.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerPolicyPolicyAttributeArgs']]] policy_attributes: Policy attribute to apply to the policy.
        :param pulumi.Input[str] policy_name: The name of the load balancer policy.
        :param pulumi.Input[str] policy_type_name: The policy type.
        """
        _LoadBalancerPolicyState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            load_balancer_name=load_balancer_name,
            policy_attributes=policy_attributes,
            policy_name=policy_name,
            policy_type_name=policy_type_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             load_balancer_name: Optional[pulumi.Input[str]] = None,
             policy_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPolicyPolicyAttributeArgs']]]] = None,
             policy_name: Optional[pulumi.Input[str]] = None,
             policy_type_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if load_balancer_name is None and 'loadBalancerName' in kwargs:
            load_balancer_name = kwargs['loadBalancerName']
        if policy_attributes is None and 'policyAttributes' in kwargs:
            policy_attributes = kwargs['policyAttributes']
        if policy_name is None and 'policyName' in kwargs:
            policy_name = kwargs['policyName']
        if policy_type_name is None and 'policyTypeName' in kwargs:
            policy_type_name = kwargs['policyTypeName']

        if load_balancer_name is not None:
            _setter("load_balancer_name", load_balancer_name)
        if policy_attributes is not None:
            _setter("policy_attributes", policy_attributes)
        if policy_name is not None:
            _setter("policy_name", policy_name)
        if policy_type_name is not None:
            _setter("policy_type_name", policy_type_name)

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> Optional[pulumi.Input[str]]:
        """
        The load balancer on which the policy is defined.
        """
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_name", value)

    @property
    @pulumi.getter(name="policyAttributes")
    def policy_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPolicyPolicyAttributeArgs']]]]:
        """
        Policy attribute to apply to the policy.
        """
        return pulumi.get(self, "policy_attributes")

    @policy_attributes.setter
    def policy_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPolicyPolicyAttributeArgs']]]]):
        pulumi.set(self, "policy_attributes", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the load balancer policy.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="policyTypeName")
    def policy_type_name(self) -> Optional[pulumi.Input[str]]:
        """
        The policy type.
        """
        return pulumi.get(self, "policy_type_name")

    @policy_type_name.setter
    def policy_type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type_name", value)


class LoadBalancerPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 policy_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerPolicyPolicyAttributeArgs']]]]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 policy_type_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a load balancer policy, which can be attached to an ELB listener or backend server.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] load_balancer_name: The load balancer on which the policy is defined.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerPolicyPolicyAttributeArgs']]]] policy_attributes: Policy attribute to apply to the policy.
        :param pulumi.Input[str] policy_name: The name of the load balancer policy.
        :param pulumi.Input[str] policy_type_name: The policy type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadBalancerPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a load balancer policy, which can be attached to an ELB listener or backend server.

        :param str resource_name: The name of the resource.
        :param LoadBalancerPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadBalancerPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            LoadBalancerPolicyArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 policy_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerPolicyPolicyAttributeArgs']]]]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 policy_type_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadBalancerPolicyArgs.__new__(LoadBalancerPolicyArgs)

            if load_balancer_name is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_name'")
            __props__.__dict__["load_balancer_name"] = load_balancer_name
            __props__.__dict__["policy_attributes"] = policy_attributes
            if policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_name'")
            __props__.__dict__["policy_name"] = policy_name
            if policy_type_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_type_name'")
            __props__.__dict__["policy_type_name"] = policy_type_name
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="aws:elasticloadbalancing/loadBalancerPolicy:LoadBalancerPolicy")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(LoadBalancerPolicy, __self__).__init__(
            'aws:elb/loadBalancerPolicy:LoadBalancerPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            load_balancer_name: Optional[pulumi.Input[str]] = None,
            policy_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerPolicyPolicyAttributeArgs']]]]] = None,
            policy_name: Optional[pulumi.Input[str]] = None,
            policy_type_name: Optional[pulumi.Input[str]] = None) -> 'LoadBalancerPolicy':
        """
        Get an existing LoadBalancerPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] load_balancer_name: The load balancer on which the policy is defined.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerPolicyPolicyAttributeArgs']]]] policy_attributes: Policy attribute to apply to the policy.
        :param pulumi.Input[str] policy_name: The name of the load balancer policy.
        :param pulumi.Input[str] policy_type_name: The policy type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadBalancerPolicyState.__new__(_LoadBalancerPolicyState)

        __props__.__dict__["load_balancer_name"] = load_balancer_name
        __props__.__dict__["policy_attributes"] = policy_attributes
        __props__.__dict__["policy_name"] = policy_name
        __props__.__dict__["policy_type_name"] = policy_type_name
        return LoadBalancerPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> pulumi.Output[str]:
        """
        The load balancer on which the policy is defined.
        """
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="policyAttributes")
    def policy_attributes(self) -> pulumi.Output[Sequence['outputs.LoadBalancerPolicyPolicyAttribute']]:
        """
        Policy attribute to apply to the policy.
        """
        return pulumi.get(self, "policy_attributes")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Output[str]:
        """
        The name of the load balancer policy.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyTypeName")
    def policy_type_name(self) -> pulumi.Output[str]:
        """
        The policy type.
        """
        return pulumi.get(self, "policy_type_name")

