# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'RepositoryExternalConnectionsArgs',
    'RepositoryUpstreamArgs',
]

@pulumi.input_type
class RepositoryExternalConnectionsArgs:
    def __init__(__self__, *,
                 external_connection_name: pulumi.Input[str],
                 package_format: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] external_connection_name: The name of the external connection associated with a repository.
        """
        RepositoryExternalConnectionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            external_connection_name=external_connection_name,
            package_format=package_format,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             external_connection_name: Optional[pulumi.Input[str]] = None,
             package_format: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if external_connection_name is None and 'externalConnectionName' in kwargs:
            external_connection_name = kwargs['externalConnectionName']
        if external_connection_name is None:
            raise TypeError("Missing 'external_connection_name' argument")
        if package_format is None and 'packageFormat' in kwargs:
            package_format = kwargs['packageFormat']

        _setter("external_connection_name", external_connection_name)
        if package_format is not None:
            _setter("package_format", package_format)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="externalConnectionName")
    def external_connection_name(self) -> pulumi.Input[str]:
        """
        The name of the external connection associated with a repository.
        """
        return pulumi.get(self, "external_connection_name")

    @external_connection_name.setter
    def external_connection_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_connection_name", value)

    @property
    @pulumi.getter(name="packageFormat")
    def package_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_format")

    @package_format.setter
    def package_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_format", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RepositoryUpstreamArgs:
    def __init__(__self__, *,
                 repository_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] repository_name: The name of an upstream repository.
        """
        RepositoryUpstreamArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            repository_name=repository_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             repository_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if repository_name is None and 'repositoryName' in kwargs:
            repository_name = kwargs['repositoryName']
        if repository_name is None:
            raise TypeError("Missing 'repository_name' argument")

        _setter("repository_name", repository_name)

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> pulumi.Input[str]:
        """
        The name of an upstream repository.
        """
        return pulumi.get(self, "repository_name")

    @repository_name.setter
    def repository_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_name", value)


