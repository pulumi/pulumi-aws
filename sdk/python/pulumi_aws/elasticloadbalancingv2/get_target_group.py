# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetTargetGroupResult(object):
    """
    A collection of values returned by getTargetGroup.
    """
    def __init__(__self__, arn=None, arn_suffix=None, deregistration_delay=None, health_check=None, name=None, port=None, protocol=None, slow_start=None, stickiness=None, tags=None, vpc_id=None):
        if not arn:
            raise TypeError('Missing required argument arn')
        elif not isinstance(arn, basestring):
            raise TypeError('Expected argument arn to be a basestring')
        __self__.arn = arn
        if not arn_suffix:
            raise TypeError('Missing required argument arn_suffix')
        elif not isinstance(arn_suffix, basestring):
            raise TypeError('Expected argument arn_suffix to be a basestring')
        __self__.arn_suffix = arn_suffix
        if not deregistration_delay:
            raise TypeError('Missing required argument deregistration_delay')
        elif not isinstance(deregistration_delay, int):
            raise TypeError('Expected argument deregistration_delay to be a int')
        __self__.deregistration_delay = deregistration_delay
        if not health_check:
            raise TypeError('Missing required argument health_check')
        elif not isinstance(health_check, dict):
            raise TypeError('Expected argument health_check to be a dict')
        __self__.health_check = health_check
        if not name:
            raise TypeError('Missing required argument name')
        elif not isinstance(name, basestring):
            raise TypeError('Expected argument name to be a basestring')
        __self__.name = name
        if not port:
            raise TypeError('Missing required argument port')
        elif not isinstance(port, int):
            raise TypeError('Expected argument port to be a int')
        __self__.port = port
        if not protocol:
            raise TypeError('Missing required argument protocol')
        elif not isinstance(protocol, basestring):
            raise TypeError('Expected argument protocol to be a basestring')
        __self__.protocol = protocol
        if not slow_start:
            raise TypeError('Missing required argument slow_start')
        elif not isinstance(slow_start, int):
            raise TypeError('Expected argument slow_start to be a int')
        __self__.slow_start = slow_start
        if not stickiness:
            raise TypeError('Missing required argument stickiness')
        elif not isinstance(stickiness, dict):
            raise TypeError('Expected argument stickiness to be a dict')
        __self__.stickiness = stickiness
        if not tags:
            raise TypeError('Missing required argument tags')
        elif not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags
        if not vpc_id:
            raise TypeError('Missing required argument vpc_id')
        elif not isinstance(vpc_id, basestring):
            raise TypeError('Expected argument vpc_id to be a basestring')
        __self__.vpc_id = vpc_id

def get_target_group(arn=None, name=None, tags=None):
    """
    ~> **Note:** `aws_alb_target_group` is known as `aws_lb_target_group`. The functionality is identical.
    
    Provides information about a Load Balancer Target Group.
    
    This data source can prove useful when a module accepts an LB Target Group as an
    input variable and needs to know its attributes. It can also be used to get the ARN of
    an LB Target Group for use in other resources, given LB Target Group name.
    """
    __args__ = dict()

    __args__['arn'] = arn
    __args__['name'] = name
    __args__['tags'] = tags
    __ret__ = pulumi.runtime.invoke('aws:elasticloadbalancingv2/getTargetGroup:getTargetGroup', __args__)

    return GetTargetGroupResult(
        arn=__ret__['arn'],
        arn_suffix=__ret__['arnSuffix'],
        deregistration_delay=__ret__['deregistrationDelay'],
        health_check=__ret__['healthCheck'],
        name=__ret__['name'],
        port=__ret__['port'],
        protocol=__ret__['protocol'],
        slow_start=__ret__['slowStart'],
        stickiness=__ret__['stickiness'],
        tags=__ret__['tags'],
        vpc_id=__ret__['vpcId'])
