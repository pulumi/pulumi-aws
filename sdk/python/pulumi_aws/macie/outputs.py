# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'FindingsFilterFindingCriteria',
    'FindingsFilterFindingCriteriaCriterion',
]

@pulumi.output_type
class FindingsFilterFindingCriteria(dict):
    def __init__(__self__, *,
                 criterions: Optional[Sequence['outputs.FindingsFilterFindingCriteriaCriterion']] = None):
        """
        :param Sequence['FindingsFilterFindingCriteriaCriterionArgs'] criterions: A condition that specifies the property, operator, and one or more values to use to filter the results.  (documented below)
        """
        if criterions is not None:
            pulumi.set(__self__, "criterions", criterions)

    @_builtins.property
    @pulumi.getter
    def criterions(self) -> Optional[Sequence['outputs.FindingsFilterFindingCriteriaCriterion']]:
        """
        A condition that specifies the property, operator, and one or more values to use to filter the results.  (documented below)
        """
        return pulumi.get(self, "criterions")


@pulumi.output_type
class FindingsFilterFindingCriteriaCriterion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eqExactMatches":
            suggest = "eq_exact_matches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FindingsFilterFindingCriteriaCriterion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FindingsFilterFindingCriteriaCriterion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FindingsFilterFindingCriteriaCriterion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field: _builtins.str,
                 eq_exact_matches: Optional[Sequence[_builtins.str]] = None,
                 eqs: Optional[Sequence[_builtins.str]] = None,
                 gt: Optional[_builtins.str] = None,
                 gte: Optional[_builtins.str] = None,
                 lt: Optional[_builtins.str] = None,
                 lte: Optional[_builtins.str] = None,
                 neqs: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str field: The name of the field to be evaluated.
        :param Sequence[_builtins.str] eq_exact_matches: The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
        :param Sequence[_builtins.str] eqs: The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        :param _builtins.str gt: The value for the property is greater than the specified value.
        :param _builtins.str gte: The value for the property is greater than or equal to the specified value.
        :param _builtins.str lt: The value for the property is less than the specified value.
        :param _builtins.str lte: The value for the property is less than or equal to the specified value.
        :param Sequence[_builtins.str] neqs: The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
        pulumi.set(__self__, "field", field)
        if eq_exact_matches is not None:
            pulumi.set(__self__, "eq_exact_matches", eq_exact_matches)
        if eqs is not None:
            pulumi.set(__self__, "eqs", eqs)
        if gt is not None:
            pulumi.set(__self__, "gt", gt)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lt is not None:
            pulumi.set(__self__, "lt", lt)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)
        if neqs is not None:
            pulumi.set(__self__, "neqs", neqs)

    @_builtins.property
    @pulumi.getter
    def field(self) -> _builtins.str:
        """
        The name of the field to be evaluated.
        """
        return pulumi.get(self, "field")

    @_builtins.property
    @pulumi.getter(name="eqExactMatches")
    def eq_exact_matches(self) -> Optional[Sequence[_builtins.str]]:
        """
        The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
        """
        return pulumi.get(self, "eq_exact_matches")

    @_builtins.property
    @pulumi.getter
    def eqs(self) -> Optional[Sequence[_builtins.str]]:
        """
        The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
        return pulumi.get(self, "eqs")

    @_builtins.property
    @pulumi.getter
    def gt(self) -> Optional[_builtins.str]:
        """
        The value for the property is greater than the specified value.
        """
        return pulumi.get(self, "gt")

    @_builtins.property
    @pulumi.getter
    def gte(self) -> Optional[_builtins.str]:
        """
        The value for the property is greater than or equal to the specified value.
        """
        return pulumi.get(self, "gte")

    @_builtins.property
    @pulumi.getter
    def lt(self) -> Optional[_builtins.str]:
        """
        The value for the property is less than the specified value.
        """
        return pulumi.get(self, "lt")

    @_builtins.property
    @pulumi.getter
    def lte(self) -> Optional[_builtins.str]:
        """
        The value for the property is less than or equal to the specified value.
        """
        return pulumi.get(self, "lte")

    @_builtins.property
    @pulumi.getter
    def neqs(self) -> Optional[Sequence[_builtins.str]]:
        """
        The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
        return pulumi.get(self, "neqs")


