# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FindingsFilterFindingCriteria',
    'FindingsFilterFindingCriteriaCriterion',
    'S3BucketAssociationClassificationType',
]

@pulumi.output_type
class FindingsFilterFindingCriteria(dict):
    def __init__(__self__, *,
                 criterions: Optional[Sequence['outputs.FindingsFilterFindingCriteriaCriterion']] = None):
        if criterions is not None:
            pulumi.set(__self__, "criterions", criterions)

    @property
    @pulumi.getter
    def criterions(self) -> Optional[Sequence['outputs.FindingsFilterFindingCriteriaCriterion']]:
        return pulumi.get(self, "criterions")


@pulumi.output_type
class FindingsFilterFindingCriteriaCriterion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eqExactMatches":
            suggest = "eq_exact_matches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FindingsFilterFindingCriteriaCriterion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FindingsFilterFindingCriteriaCriterion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FindingsFilterFindingCriteriaCriterion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field: str,
                 eq_exact_matches: Optional[Sequence[str]] = None,
                 eqs: Optional[Sequence[str]] = None,
                 gt: Optional[str] = None,
                 gte: Optional[str] = None,
                 lt: Optional[str] = None,
                 lte: Optional[str] = None,
                 neqs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "field", field)
        if eq_exact_matches is not None:
            pulumi.set(__self__, "eq_exact_matches", eq_exact_matches)
        if eqs is not None:
            pulumi.set(__self__, "eqs", eqs)
        if gt is not None:
            pulumi.set(__self__, "gt", gt)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lt is not None:
            pulumi.set(__self__, "lt", lt)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)
        if neqs is not None:
            pulumi.set(__self__, "neqs", neqs)

    @property
    @pulumi.getter
    def field(self) -> str:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter(name="eqExactMatches")
    def eq_exact_matches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "eq_exact_matches")

    @property
    @pulumi.getter
    def eqs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "eqs")

    @property
    @pulumi.getter
    def gt(self) -> Optional[str]:
        return pulumi.get(self, "gt")

    @property
    @pulumi.getter
    def gte(self) -> Optional[str]:
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lt(self) -> Optional[str]:
        return pulumi.get(self, "lt")

    @property
    @pulumi.getter
    def lte(self) -> Optional[str]:
        return pulumi.get(self, "lte")

    @property
    @pulumi.getter
    def neqs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "neqs")


@pulumi.output_type
class S3BucketAssociationClassificationType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "oneTime":
            suggest = "one_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3BucketAssociationClassificationType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3BucketAssociationClassificationType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3BucketAssociationClassificationType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continuous: Optional[str] = None,
                 one_time: Optional[str] = None):
        if continuous is not None:
            pulumi.set(__self__, "continuous", continuous)
        if one_time is not None:
            pulumi.set(__self__, "one_time", one_time)

    @property
    @pulumi.getter
    def continuous(self) -> Optional[str]:
        return pulumi.get(self, "continuous")

    @property
    @pulumi.getter(name="oneTime")
    def one_time(self) -> Optional[str]:
        return pulumi.get(self, "one_time")


