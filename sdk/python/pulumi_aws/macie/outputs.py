# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FindingsFilterFindingCriteria',
    'FindingsFilterFindingCriteriaCriterion',
]

@pulumi.output_type
class FindingsFilterFindingCriteria(dict):
    def __init__(__self__, *,
                 criterions: Optional[Sequence['outputs.FindingsFilterFindingCriteriaCriterion']] = None):
        """
        :param Sequence['FindingsFilterFindingCriteriaCriterionArgs'] criterions: A condition that specifies the property, operator, and one or more values to use to filter the results.  (documented below)
        """
        FindingsFilterFindingCriteria._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            criterions=criterions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             criterions: Optional[Sequence['outputs.FindingsFilterFindingCriteriaCriterion']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if criterions is not None:
            _setter("criterions", criterions)

    @property
    @pulumi.getter
    def criterions(self) -> Optional[Sequence['outputs.FindingsFilterFindingCriteriaCriterion']]:
        """
        A condition that specifies the property, operator, and one or more values to use to filter the results.  (documented below)
        """
        return pulumi.get(self, "criterions")


@pulumi.output_type
class FindingsFilterFindingCriteriaCriterion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eqExactMatches":
            suggest = "eq_exact_matches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FindingsFilterFindingCriteriaCriterion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FindingsFilterFindingCriteriaCriterion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FindingsFilterFindingCriteriaCriterion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field: str,
                 eq_exact_matches: Optional[Sequence[str]] = None,
                 eqs: Optional[Sequence[str]] = None,
                 gt: Optional[str] = None,
                 gte: Optional[str] = None,
                 lt: Optional[str] = None,
                 lte: Optional[str] = None,
                 neqs: Optional[Sequence[str]] = None):
        """
        :param str field: The name of the field to be evaluated.
        :param Sequence[str] eq_exact_matches: The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
        :param Sequence[str] eqs: The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        :param str gt: The value for the property is greater than the specified value.
        :param str gte: The value for the property is greater than or equal to the specified value.
        :param str lt: The value for the property is less than the specified value.
        :param str lte: The value for the property is less than or equal to the specified value.
        :param Sequence[str] neqs: The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
        FindingsFilterFindingCriteriaCriterion._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field=field,
            eq_exact_matches=eq_exact_matches,
            eqs=eqs,
            gt=gt,
            gte=gte,
            lt=lt,
            lte=lte,
            neqs=neqs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field: Optional[str] = None,
             eq_exact_matches: Optional[Sequence[str]] = None,
             eqs: Optional[Sequence[str]] = None,
             gt: Optional[str] = None,
             gte: Optional[str] = None,
             lt: Optional[str] = None,
             lte: Optional[str] = None,
             neqs: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if field is None:
            raise TypeError("Missing 'field' argument")
        if eq_exact_matches is None and 'eqExactMatches' in kwargs:
            eq_exact_matches = kwargs['eqExactMatches']

        _setter("field", field)
        if eq_exact_matches is not None:
            _setter("eq_exact_matches", eq_exact_matches)
        if eqs is not None:
            _setter("eqs", eqs)
        if gt is not None:
            _setter("gt", gt)
        if gte is not None:
            _setter("gte", gte)
        if lt is not None:
            _setter("lt", lt)
        if lte is not None:
            _setter("lte", lte)
        if neqs is not None:
            _setter("neqs", neqs)

    @property
    @pulumi.getter
    def field(self) -> str:
        """
        The name of the field to be evaluated.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter(name="eqExactMatches")
    def eq_exact_matches(self) -> Optional[Sequence[str]]:
        """
        The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
        """
        return pulumi.get(self, "eq_exact_matches")

    @property
    @pulumi.getter
    def eqs(self) -> Optional[Sequence[str]]:
        """
        The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
        return pulumi.get(self, "eqs")

    @property
    @pulumi.getter
    def gt(self) -> Optional[str]:
        """
        The value for the property is greater than the specified value.
        """
        return pulumi.get(self, "gt")

    @property
    @pulumi.getter
    def gte(self) -> Optional[str]:
        """
        The value for the property is greater than or equal to the specified value.
        """
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lt(self) -> Optional[str]:
        """
        The value for the property is less than the specified value.
        """
        return pulumi.get(self, "lt")

    @property
    @pulumi.getter
    def lte(self) -> Optional[str]:
        """
        The value for the property is less than or equal to the specified value.
        """
        return pulumi.get(self, "lte")

    @property
    @pulumi.getter
    def neqs(self) -> Optional[Sequence[str]]:
        """
        The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
        return pulumi.get(self, "neqs")


