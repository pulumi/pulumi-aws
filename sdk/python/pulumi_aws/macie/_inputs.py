# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'FindingsFilterFindingCriteriaArgs',
    'FindingsFilterFindingCriteriaArgsDict',
    'FindingsFilterFindingCriteriaCriterionArgs',
    'FindingsFilterFindingCriteriaCriterionArgsDict',
]

MYPY = False

if not MYPY:
    class FindingsFilterFindingCriteriaArgsDict(TypedDict):
        criterions: NotRequired[pulumi.Input[Sequence[pulumi.Input['FindingsFilterFindingCriteriaCriterionArgsDict']]]]
        """
        A condition that specifies the property, operator, and one or more values to use to filter the results.  (documented below)
        """
elif False:
    FindingsFilterFindingCriteriaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FindingsFilterFindingCriteriaArgs:
    def __init__(__self__, *,
                 criterions: Optional[pulumi.Input[Sequence[pulumi.Input['FindingsFilterFindingCriteriaCriterionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['FindingsFilterFindingCriteriaCriterionArgs']]] criterions: A condition that specifies the property, operator, and one or more values to use to filter the results.  (documented below)
        """
        if criterions is not None:
            pulumi.set(__self__, "criterions", criterions)

    @_builtins.property
    @pulumi.getter
    def criterions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FindingsFilterFindingCriteriaCriterionArgs']]]]:
        """
        A condition that specifies the property, operator, and one or more values to use to filter the results.  (documented below)
        """
        return pulumi.get(self, "criterions")

    @criterions.setter
    def criterions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FindingsFilterFindingCriteriaCriterionArgs']]]]):
        pulumi.set(self, "criterions", value)


if not MYPY:
    class FindingsFilterFindingCriteriaCriterionArgsDict(TypedDict):
        field: pulumi.Input[_builtins.str]
        """
        The name of the field to be evaluated.
        """
        eq_exact_matches: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
        """
        eqs: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
        gt: NotRequired[pulumi.Input[_builtins.str]]
        """
        The value for the property is greater than the specified value.
        """
        gte: NotRequired[pulumi.Input[_builtins.str]]
        """
        The value for the property is greater than or equal to the specified value.
        """
        lt: NotRequired[pulumi.Input[_builtins.str]]
        """
        The value for the property is less than the specified value.
        """
        lte: NotRequired[pulumi.Input[_builtins.str]]
        """
        The value for the property is less than or equal to the specified value.
        """
        neqs: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
elif False:
    FindingsFilterFindingCriteriaCriterionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FindingsFilterFindingCriteriaCriterionArgs:
    def __init__(__self__, *,
                 field: pulumi.Input[_builtins.str],
                 eq_exact_matches: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 eqs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 gt: Optional[pulumi.Input[_builtins.str]] = None,
                 gte: Optional[pulumi.Input[_builtins.str]] = None,
                 lt: Optional[pulumi.Input[_builtins.str]] = None,
                 lte: Optional[pulumi.Input[_builtins.str]] = None,
                 neqs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] field: The name of the field to be evaluated.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] eq_exact_matches: The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] eqs: The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        :param pulumi.Input[_builtins.str] gt: The value for the property is greater than the specified value.
        :param pulumi.Input[_builtins.str] gte: The value for the property is greater than or equal to the specified value.
        :param pulumi.Input[_builtins.str] lt: The value for the property is less than the specified value.
        :param pulumi.Input[_builtins.str] lte: The value for the property is less than or equal to the specified value.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] neqs: The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
        pulumi.set(__self__, "field", field)
        if eq_exact_matches is not None:
            pulumi.set(__self__, "eq_exact_matches", eq_exact_matches)
        if eqs is not None:
            pulumi.set(__self__, "eqs", eqs)
        if gt is not None:
            pulumi.set(__self__, "gt", gt)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lt is not None:
            pulumi.set(__self__, "lt", lt)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)
        if neqs is not None:
            pulumi.set(__self__, "neqs", neqs)

    @_builtins.property
    @pulumi.getter
    def field(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the field to be evaluated.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "field", value)

    @_builtins.property
    @pulumi.getter(name="eqExactMatches")
    def eq_exact_matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values.
        """
        return pulumi.get(self, "eq_exact_matches")

    @eq_exact_matches.setter
    def eq_exact_matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "eq_exact_matches", value)

    @_builtins.property
    @pulumi.getter
    def eqs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The value for the property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
        return pulumi.get(self, "eqs")

    @eqs.setter
    def eqs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "eqs", value)

    @_builtins.property
    @pulumi.getter
    def gt(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The value for the property is greater than the specified value.
        """
        return pulumi.get(self, "gt")

    @gt.setter
    def gt(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gt", value)

    @_builtins.property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The value for the property is greater than or equal to the specified value.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gte", value)

    @_builtins.property
    @pulumi.getter
    def lt(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The value for the property is less than the specified value.
        """
        return pulumi.get(self, "lt")

    @lt.setter
    def lt(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lt", value)

    @_builtins.property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The value for the property is less than or equal to the specified value.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lte", value)

    @_builtins.property
    @pulumi.getter
    def neqs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
        """
        return pulumi.get(self, "neqs")

    @neqs.setter
    def neqs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "neqs", value)


