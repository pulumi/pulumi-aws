# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['ImageVersion']


class ImageVersion(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base_image: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Sagemaker Image Version resource.

        ## Example Usage
        ### Basic usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test = aws.sagemaker.ImageVersion("test",
            image_name=aws_sagemaker_image["test"]["id"],
            base_image="012345678912.dkr.ecr.us-west-2.amazonaws.com/image:latest")
        ```

        ## Import

        Sagemaker Image Versions can be imported using the `name`, e.g.

        ```sh
         $ pulumi import aws:sagemaker/imageVersion:ImageVersion test_image my-code-repo
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] base_image: The registry path of the container image on which this image version is based.
        :param pulumi.Input[str] image_name: The name of the image. Must be unique to your account.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if base_image is None and not opts.urn:
                raise TypeError("Missing required property 'base_image'")
            __props__['base_image'] = base_image
            if image_name is None and not opts.urn:
                raise TypeError("Missing required property 'image_name'")
            __props__['image_name'] = image_name
            __props__['arn'] = None
            __props__['container_image'] = None
            __props__['image_arn'] = None
            __props__['version'] = None
        super(ImageVersion, __self__).__init__(
            'aws:sagemaker/imageVersion:ImageVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            base_image: Optional[pulumi.Input[str]] = None,
            container_image: Optional[pulumi.Input[str]] = None,
            image_arn: Optional[pulumi.Input[str]] = None,
            image_name: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'ImageVersion':
        """
        Get an existing ImageVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) assigned by AWS to this Image Version.
               * `image_arn`- The Amazon Resource Name (ARN) of the image the version is based on.
        :param pulumi.Input[str] base_image: The registry path of the container image on which this image version is based.
        :param pulumi.Input[str] container_image: The registry path of the container image that contains this image version.
        :param pulumi.Input[str] image_name: The name of the image. Must be unique to your account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["arn"] = arn
        __props__["base_image"] = base_image
        __props__["container_image"] = container_image
        __props__["image_arn"] = image_arn
        __props__["image_name"] = image_name
        __props__["version"] = version
        return ImageVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        The Amazon Resource Name (ARN) assigned by AWS to this Image Version.
        * `image_arn`- The Amazon Resource Name (ARN) of the image the version is based on.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> pulumi.Output[str]:
        """
        The registry path of the container image on which this image version is based.
        """
        return pulumi.get(self, "base_image")

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> pulumi.Output[str]:
        """
        The registry path of the container image that contains this image version.
        """
        return pulumi.get(self, "container_image")

    @property
    @pulumi.getter(name="imageArn")
    def image_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image_arn")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[str]:
        """
        The name of the image. Must be unique to your account.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        return pulumi.get(self, "version")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

