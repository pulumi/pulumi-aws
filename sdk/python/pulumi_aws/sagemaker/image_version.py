# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ImageVersionArgs', 'ImageVersion']

@pulumi.input_type
class ImageVersionArgs:
    def __init__(__self__, *,
                 base_image: pulumi.Input[builtins.str],
                 image_name: pulumi.Input[builtins.str],
                 horovod: Optional[pulumi.Input[builtins.bool]] = None,
                 job_type: Optional[pulumi.Input[builtins.str]] = None,
                 ml_framework: Optional[pulumi.Input[builtins.str]] = None,
                 processor: Optional[pulumi.Input[builtins.str]] = None,
                 programming_lang: Optional[pulumi.Input[builtins.str]] = None,
                 release_notes: Optional[pulumi.Input[builtins.str]] = None,
                 vendor_guidance: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ImageVersion resource.
        :param pulumi.Input[builtins.str] base_image: The registry path of the container image on which this image version is based.
        :param pulumi.Input[builtins.str] image_name: The name of the image. Must be unique to your account.
        :param pulumi.Input[builtins.bool] horovod: Indicates Horovod compatibility.
        :param pulumi.Input[builtins.str] job_type: Indicates SageMaker AI job type compatibility. Valid values are: `TRAINING`, `INFERENCE`, and `NOTEBOOK_KERNEL`.
        :param pulumi.Input[builtins.str] ml_framework: The machine learning framework vended in the image version.
        :param pulumi.Input[builtins.str] processor: Indicates CPU or GPU compatibility. Valid values are: `CPU` and `GPU`.
        :param pulumi.Input[builtins.str] programming_lang: The supported programming language and its version.
        :param pulumi.Input[builtins.str] release_notes: The maintainer description of the image version.
        :param pulumi.Input[builtins.str] vendor_guidance: The stability of the image version, specified by the maintainer. Valid values are: `NOT_PROVIDED`, `STABLE`, `TO_BE_ARCHIVED`, and `ARCHIVED`.
        """
        pulumi.set(__self__, "base_image", base_image)
        pulumi.set(__self__, "image_name", image_name)
        if horovod is not None:
            pulumi.set(__self__, "horovod", horovod)
        if job_type is not None:
            pulumi.set(__self__, "job_type", job_type)
        if ml_framework is not None:
            pulumi.set(__self__, "ml_framework", ml_framework)
        if processor is not None:
            pulumi.set(__self__, "processor", processor)
        if programming_lang is not None:
            pulumi.set(__self__, "programming_lang", programming_lang)
        if release_notes is not None:
            pulumi.set(__self__, "release_notes", release_notes)
        if vendor_guidance is not None:
            pulumi.set(__self__, "vendor_guidance", vendor_guidance)

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> pulumi.Input[builtins.str]:
        """
        The registry path of the container image on which this image version is based.
        """
        return pulumi.get(self, "base_image")

    @base_image.setter
    def base_image(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "base_image", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the image. Must be unique to your account.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter
    def horovod(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates Horovod compatibility.
        """
        return pulumi.get(self, "horovod")

    @horovod.setter
    def horovod(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "horovod", value)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Indicates SageMaker AI job type compatibility. Valid values are: `TRAINING`, `INFERENCE`, and `NOTEBOOK_KERNEL`.
        """
        return pulumi.get(self, "job_type")

    @job_type.setter
    def job_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "job_type", value)

    @property
    @pulumi.getter(name="mlFramework")
    def ml_framework(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The machine learning framework vended in the image version.
        """
        return pulumi.get(self, "ml_framework")

    @ml_framework.setter
    def ml_framework(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ml_framework", value)

    @property
    @pulumi.getter
    def processor(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Indicates CPU or GPU compatibility. Valid values are: `CPU` and `GPU`.
        """
        return pulumi.get(self, "processor")

    @processor.setter
    def processor(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "processor", value)

    @property
    @pulumi.getter(name="programmingLang")
    def programming_lang(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The supported programming language and its version.
        """
        return pulumi.get(self, "programming_lang")

    @programming_lang.setter
    def programming_lang(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "programming_lang", value)

    @property
    @pulumi.getter(name="releaseNotes")
    def release_notes(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The maintainer description of the image version.
        """
        return pulumi.get(self, "release_notes")

    @release_notes.setter
    def release_notes(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "release_notes", value)

    @property
    @pulumi.getter(name="vendorGuidance")
    def vendor_guidance(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The stability of the image version, specified by the maintainer. Valid values are: `NOT_PROVIDED`, `STABLE`, `TO_BE_ARCHIVED`, and `ARCHIVED`.
        """
        return pulumi.get(self, "vendor_guidance")

    @vendor_guidance.setter
    def vendor_guidance(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vendor_guidance", value)


@pulumi.input_type
class _ImageVersionState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[builtins.str]] = None,
                 base_image: Optional[pulumi.Input[builtins.str]] = None,
                 container_image: Optional[pulumi.Input[builtins.str]] = None,
                 horovod: Optional[pulumi.Input[builtins.bool]] = None,
                 image_arn: Optional[pulumi.Input[builtins.str]] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 job_type: Optional[pulumi.Input[builtins.str]] = None,
                 ml_framework: Optional[pulumi.Input[builtins.str]] = None,
                 processor: Optional[pulumi.Input[builtins.str]] = None,
                 programming_lang: Optional[pulumi.Input[builtins.str]] = None,
                 release_notes: Optional[pulumi.Input[builtins.str]] = None,
                 vendor_guidance: Optional[pulumi.Input[builtins.str]] = None,
                 version: Optional[pulumi.Input[builtins.int]] = None):
        """
        Input properties used for looking up and filtering ImageVersion resources.
        :param pulumi.Input[builtins.str] arn: The Amazon Resource Name (ARN) assigned by AWS to this Image Version.
        :param pulumi.Input[builtins.str] base_image: The registry path of the container image on which this image version is based.
        :param pulumi.Input[builtins.str] container_image: The registry path of the container image that contains this image version.
        :param pulumi.Input[builtins.bool] horovod: Indicates Horovod compatibility.
        :param pulumi.Input[builtins.str] image_name: The name of the image. Must be unique to your account.
        :param pulumi.Input[builtins.str] job_type: Indicates SageMaker AI job type compatibility. Valid values are: `TRAINING`, `INFERENCE`, and `NOTEBOOK_KERNEL`.
        :param pulumi.Input[builtins.str] ml_framework: The machine learning framework vended in the image version.
        :param pulumi.Input[builtins.str] processor: Indicates CPU or GPU compatibility. Valid values are: `CPU` and `GPU`.
        :param pulumi.Input[builtins.str] programming_lang: The supported programming language and its version.
        :param pulumi.Input[builtins.str] release_notes: The maintainer description of the image version.
        :param pulumi.Input[builtins.str] vendor_guidance: The stability of the image version, specified by the maintainer. Valid values are: `NOT_PROVIDED`, `STABLE`, `TO_BE_ARCHIVED`, and `ARCHIVED`.
        :param pulumi.Input[builtins.int] version: The version of the image. If not specified, the latest version is described.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if base_image is not None:
            pulumi.set(__self__, "base_image", base_image)
        if container_image is not None:
            pulumi.set(__self__, "container_image", container_image)
        if horovod is not None:
            pulumi.set(__self__, "horovod", horovod)
        if image_arn is not None:
            pulumi.set(__self__, "image_arn", image_arn)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if job_type is not None:
            pulumi.set(__self__, "job_type", job_type)
        if ml_framework is not None:
            pulumi.set(__self__, "ml_framework", ml_framework)
        if processor is not None:
            pulumi.set(__self__, "processor", processor)
        if programming_lang is not None:
            pulumi.set(__self__, "programming_lang", programming_lang)
        if release_notes is not None:
            pulumi.set(__self__, "release_notes", release_notes)
        if vendor_guidance is not None:
            pulumi.set(__self__, "vendor_guidance", vendor_guidance)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Amazon Resource Name (ARN) assigned by AWS to this Image Version.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The registry path of the container image on which this image version is based.
        """
        return pulumi.get(self, "base_image")

    @base_image.setter
    def base_image(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "base_image", value)

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The registry path of the container image that contains this image version.
        """
        return pulumi.get(self, "container_image")

    @container_image.setter
    def container_image(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "container_image", value)

    @property
    @pulumi.getter
    def horovod(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates Horovod compatibility.
        """
        return pulumi.get(self, "horovod")

    @horovod.setter
    def horovod(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "horovod", value)

    @property
    @pulumi.getter(name="imageArn")
    def image_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "image_arn")

    @image_arn.setter
    def image_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "image_arn", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the image. Must be unique to your account.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Indicates SageMaker AI job type compatibility. Valid values are: `TRAINING`, `INFERENCE`, and `NOTEBOOK_KERNEL`.
        """
        return pulumi.get(self, "job_type")

    @job_type.setter
    def job_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "job_type", value)

    @property
    @pulumi.getter(name="mlFramework")
    def ml_framework(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The machine learning framework vended in the image version.
        """
        return pulumi.get(self, "ml_framework")

    @ml_framework.setter
    def ml_framework(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ml_framework", value)

    @property
    @pulumi.getter
    def processor(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Indicates CPU or GPU compatibility. Valid values are: `CPU` and `GPU`.
        """
        return pulumi.get(self, "processor")

    @processor.setter
    def processor(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "processor", value)

    @property
    @pulumi.getter(name="programmingLang")
    def programming_lang(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The supported programming language and its version.
        """
        return pulumi.get(self, "programming_lang")

    @programming_lang.setter
    def programming_lang(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "programming_lang", value)

    @property
    @pulumi.getter(name="releaseNotes")
    def release_notes(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The maintainer description of the image version.
        """
        return pulumi.get(self, "release_notes")

    @release_notes.setter
    def release_notes(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "release_notes", value)

    @property
    @pulumi.getter(name="vendorGuidance")
    def vendor_guidance(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The stability of the image version, specified by the maintainer. Valid values are: `NOT_PROVIDED`, `STABLE`, `TO_BE_ARCHIVED`, and `ARCHIVED`.
        """
        return pulumi.get(self, "vendor_guidance")

    @vendor_guidance.setter
    def vendor_guidance(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vendor_guidance", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The version of the image. If not specified, the latest version is described.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("aws:sagemaker/imageVersion:ImageVersion")
class ImageVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base_image: Optional[pulumi.Input[builtins.str]] = None,
                 horovod: Optional[pulumi.Input[builtins.bool]] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 job_type: Optional[pulumi.Input[builtins.str]] = None,
                 ml_framework: Optional[pulumi.Input[builtins.str]] = None,
                 processor: Optional[pulumi.Input[builtins.str]] = None,
                 programming_lang: Optional[pulumi.Input[builtins.str]] = None,
                 release_notes: Optional[pulumi.Input[builtins.str]] = None,
                 vendor_guidance: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Provides a SageMaker AI Image Version resource.

        ## Example Usage

        ### Basic usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test = aws.sagemaker.ImageVersion("test",
            image_name=test_aws_sagemaker_image["id"],
            base_image="012345678912.dkr.ecr.us-west-2.amazonaws.com/image:latest")
        ```

        ## Import

        Using `pulumi import`, import SageMaker AI Image Versions using the `name`. For example:

        ```sh
        $ pulumi import aws:sagemaker/imageVersion:ImageVersion test_image my-code-repo
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] base_image: The registry path of the container image on which this image version is based.
        :param pulumi.Input[builtins.bool] horovod: Indicates Horovod compatibility.
        :param pulumi.Input[builtins.str] image_name: The name of the image. Must be unique to your account.
        :param pulumi.Input[builtins.str] job_type: Indicates SageMaker AI job type compatibility. Valid values are: `TRAINING`, `INFERENCE`, and `NOTEBOOK_KERNEL`.
        :param pulumi.Input[builtins.str] ml_framework: The machine learning framework vended in the image version.
        :param pulumi.Input[builtins.str] processor: Indicates CPU or GPU compatibility. Valid values are: `CPU` and `GPU`.
        :param pulumi.Input[builtins.str] programming_lang: The supported programming language and its version.
        :param pulumi.Input[builtins.str] release_notes: The maintainer description of the image version.
        :param pulumi.Input[builtins.str] vendor_guidance: The stability of the image version, specified by the maintainer. Valid values are: `NOT_PROVIDED`, `STABLE`, `TO_BE_ARCHIVED`, and `ARCHIVED`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a SageMaker AI Image Version resource.

        ## Example Usage

        ### Basic usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test = aws.sagemaker.ImageVersion("test",
            image_name=test_aws_sagemaker_image["id"],
            base_image="012345678912.dkr.ecr.us-west-2.amazonaws.com/image:latest")
        ```

        ## Import

        Using `pulumi import`, import SageMaker AI Image Versions using the `name`. For example:

        ```sh
        $ pulumi import aws:sagemaker/imageVersion:ImageVersion test_image my-code-repo
        ```

        :param str resource_name: The name of the resource.
        :param ImageVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base_image: Optional[pulumi.Input[builtins.str]] = None,
                 horovod: Optional[pulumi.Input[builtins.bool]] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 job_type: Optional[pulumi.Input[builtins.str]] = None,
                 ml_framework: Optional[pulumi.Input[builtins.str]] = None,
                 processor: Optional[pulumi.Input[builtins.str]] = None,
                 programming_lang: Optional[pulumi.Input[builtins.str]] = None,
                 release_notes: Optional[pulumi.Input[builtins.str]] = None,
                 vendor_guidance: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageVersionArgs.__new__(ImageVersionArgs)

            if base_image is None and not opts.urn:
                raise TypeError("Missing required property 'base_image'")
            __props__.__dict__["base_image"] = base_image
            __props__.__dict__["horovod"] = horovod
            if image_name is None and not opts.urn:
                raise TypeError("Missing required property 'image_name'")
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["job_type"] = job_type
            __props__.__dict__["ml_framework"] = ml_framework
            __props__.__dict__["processor"] = processor
            __props__.__dict__["programming_lang"] = programming_lang
            __props__.__dict__["release_notes"] = release_notes
            __props__.__dict__["vendor_guidance"] = vendor_guidance
            __props__.__dict__["arn"] = None
            __props__.__dict__["container_image"] = None
            __props__.__dict__["image_arn"] = None
            __props__.__dict__["version"] = None
        super(ImageVersion, __self__).__init__(
            'aws:sagemaker/imageVersion:ImageVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[builtins.str]] = None,
            base_image: Optional[pulumi.Input[builtins.str]] = None,
            container_image: Optional[pulumi.Input[builtins.str]] = None,
            horovod: Optional[pulumi.Input[builtins.bool]] = None,
            image_arn: Optional[pulumi.Input[builtins.str]] = None,
            image_name: Optional[pulumi.Input[builtins.str]] = None,
            job_type: Optional[pulumi.Input[builtins.str]] = None,
            ml_framework: Optional[pulumi.Input[builtins.str]] = None,
            processor: Optional[pulumi.Input[builtins.str]] = None,
            programming_lang: Optional[pulumi.Input[builtins.str]] = None,
            release_notes: Optional[pulumi.Input[builtins.str]] = None,
            vendor_guidance: Optional[pulumi.Input[builtins.str]] = None,
            version: Optional[pulumi.Input[builtins.int]] = None) -> 'ImageVersion':
        """
        Get an existing ImageVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] arn: The Amazon Resource Name (ARN) assigned by AWS to this Image Version.
        :param pulumi.Input[builtins.str] base_image: The registry path of the container image on which this image version is based.
        :param pulumi.Input[builtins.str] container_image: The registry path of the container image that contains this image version.
        :param pulumi.Input[builtins.bool] horovod: Indicates Horovod compatibility.
        :param pulumi.Input[builtins.str] image_name: The name of the image. Must be unique to your account.
        :param pulumi.Input[builtins.str] job_type: Indicates SageMaker AI job type compatibility. Valid values are: `TRAINING`, `INFERENCE`, and `NOTEBOOK_KERNEL`.
        :param pulumi.Input[builtins.str] ml_framework: The machine learning framework vended in the image version.
        :param pulumi.Input[builtins.str] processor: Indicates CPU or GPU compatibility. Valid values are: `CPU` and `GPU`.
        :param pulumi.Input[builtins.str] programming_lang: The supported programming language and its version.
        :param pulumi.Input[builtins.str] release_notes: The maintainer description of the image version.
        :param pulumi.Input[builtins.str] vendor_guidance: The stability of the image version, specified by the maintainer. Valid values are: `NOT_PROVIDED`, `STABLE`, `TO_BE_ARCHIVED`, and `ARCHIVED`.
        :param pulumi.Input[builtins.int] version: The version of the image. If not specified, the latest version is described.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageVersionState.__new__(_ImageVersionState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["base_image"] = base_image
        __props__.__dict__["container_image"] = container_image
        __props__.__dict__["horovod"] = horovod
        __props__.__dict__["image_arn"] = image_arn
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["job_type"] = job_type
        __props__.__dict__["ml_framework"] = ml_framework
        __props__.__dict__["processor"] = processor
        __props__.__dict__["programming_lang"] = programming_lang
        __props__.__dict__["release_notes"] = release_notes
        __props__.__dict__["vendor_guidance"] = vendor_guidance
        __props__.__dict__["version"] = version
        return ImageVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) assigned by AWS to this Image Version.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="baseImage")
    def base_image(self) -> pulumi.Output[builtins.str]:
        """
        The registry path of the container image on which this image version is based.
        """
        return pulumi.get(self, "base_image")

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> pulumi.Output[builtins.str]:
        """
        The registry path of the container image that contains this image version.
        """
        return pulumi.get(self, "container_image")

    @property
    @pulumi.getter
    def horovod(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Indicates Horovod compatibility.
        """
        return pulumi.get(self, "horovod")

    @property
    @pulumi.getter(name="imageArn")
    def image_arn(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "image_arn")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the image. Must be unique to your account.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Indicates SageMaker AI job type compatibility. Valid values are: `TRAINING`, `INFERENCE`, and `NOTEBOOK_KERNEL`.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="mlFramework")
    def ml_framework(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The machine learning framework vended in the image version.
        """
        return pulumi.get(self, "ml_framework")

    @property
    @pulumi.getter
    def processor(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Indicates CPU or GPU compatibility. Valid values are: `CPU` and `GPU`.
        """
        return pulumi.get(self, "processor")

    @property
    @pulumi.getter(name="programmingLang")
    def programming_lang(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The supported programming language and its version.
        """
        return pulumi.get(self, "programming_lang")

    @property
    @pulumi.getter(name="releaseNotes")
    def release_notes(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The maintainer description of the image version.
        """
        return pulumi.get(self, "release_notes")

    @property
    @pulumi.getter(name="vendorGuidance")
    def vendor_guidance(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The stability of the image version, specified by the maintainer. Valid values are: `NOT_PROVIDED`, `STABLE`, `TO_BE_ARCHIVED`, and `ARCHIVED`.
        """
        return pulumi.get(self, "vendor_guidance")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[builtins.int]:
        """
        The version of the image. If not specified, the latest version is described.
        """
        return pulumi.get(self, "version")

