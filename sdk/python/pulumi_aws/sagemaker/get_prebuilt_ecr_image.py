# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPrebuiltEcrImageResult',
    'AwaitableGetPrebuiltEcrImageResult',
    'get_prebuilt_ecr_image',
    'get_prebuilt_ecr_image_output',
]

@pulumi.output_type
class GetPrebuiltEcrImageResult:
    """
    A collection of values returned by getPrebuiltEcrImage.
    """
    def __init__(__self__, dns_suffix=None, id=None, image_tag=None, region=None, registry_id=None, registry_path=None, repository_name=None):
        if dns_suffix and not isinstance(dns_suffix, str):
            raise TypeError("Expected argument 'dns_suffix' to be a str")
        pulumi.set(__self__, "dns_suffix", dns_suffix)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_tag and not isinstance(image_tag, str):
            raise TypeError("Expected argument 'image_tag' to be a str")
        pulumi.set(__self__, "image_tag", image_tag)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if registry_path and not isinstance(registry_path, str):
            raise TypeError("Expected argument 'registry_path' to be a str")
        pulumi.set(__self__, "registry_path", registry_path)
        if repository_name and not isinstance(repository_name, str):
            raise TypeError("Expected argument 'repository_name' to be a str")
        pulumi.set(__self__, "repository_name", repository_name)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[str]:
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageTag")
    def image_tag(self) -> Optional[str]:
        return pulumi.get(self, "image_tag")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryPath")
    def registry_path(self) -> str:
        return pulumi.get(self, "registry_path")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> str:
        return pulumi.get(self, "repository_name")


class AwaitableGetPrebuiltEcrImageResult(GetPrebuiltEcrImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrebuiltEcrImageResult(
            dns_suffix=self.dns_suffix,
            id=self.id,
            image_tag=self.image_tag,
            region=self.region,
            registry_id=self.registry_id,
            registry_path=self.registry_path,
            repository_name=self.repository_name)


def get_prebuilt_ecr_image(dns_suffix: Optional[str] = None,
                           image_tag: Optional[str] = None,
                           region: Optional[str] = None,
                           repository_name: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrebuiltEcrImageResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dnsSuffix'] = dns_suffix
    __args__['imageTag'] = image_tag
    __args__['region'] = region
    __args__['repositoryName'] = repository_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:sagemaker/getPrebuiltEcrImage:getPrebuiltEcrImage', __args__, opts=opts, typ=GetPrebuiltEcrImageResult).value

    return AwaitableGetPrebuiltEcrImageResult(
        dns_suffix=__ret__.dns_suffix,
        id=__ret__.id,
        image_tag=__ret__.image_tag,
        region=__ret__.region,
        registry_id=__ret__.registry_id,
        registry_path=__ret__.registry_path,
        repository_name=__ret__.repository_name)


@_utilities.lift_output_func(get_prebuilt_ecr_image)
def get_prebuilt_ecr_image_output(dns_suffix: Optional[pulumi.Input[Optional[str]]] = None,
                                  image_tag: Optional[pulumi.Input[Optional[str]]] = None,
                                  region: Optional[pulumi.Input[Optional[str]]] = None,
                                  repository_name: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPrebuiltEcrImageResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
