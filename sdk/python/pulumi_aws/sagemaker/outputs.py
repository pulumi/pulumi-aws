# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AppImageConfigKernelGatewayImageConfig',
    'AppImageConfigKernelGatewayImageConfigFileSystemConfig',
    'AppImageConfigKernelGatewayImageConfigKernelSpec',
    'AppResourceSpec',
    'CodeRepositoryGitConfig',
    'DataQualityJobDefinitionDataQualityAppSpecification',
    'DataQualityJobDefinitionDataQualityBaselineConfig',
    'DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResource',
    'DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResource',
    'DataQualityJobDefinitionDataQualityJobInput',
    'DataQualityJobDefinitionDataQualityJobInputBatchTransformInput',
    'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormat',
    'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsv',
    'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJson',
    'DataQualityJobDefinitionDataQualityJobInputEndpointInput',
    'DataQualityJobDefinitionDataQualityJobOutputConfig',
    'DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputs',
    'DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3Output',
    'DataQualityJobDefinitionJobResources',
    'DataQualityJobDefinitionJobResourcesClusterConfig',
    'DataQualityJobDefinitionNetworkConfig',
    'DataQualityJobDefinitionNetworkConfigVpcConfig',
    'DataQualityJobDefinitionStoppingCondition',
    'DeviceDevice',
    'DeviceFleetOutputConfig',
    'DomainDefaultSpaceSettings',
    'DomainDefaultSpaceSettingsJupyterServerAppSettings',
    'DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository',
    'DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec',
    'DomainDefaultSpaceSettingsKernelGatewayAppSettings',
    'DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage',
    'DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec',
    'DomainDefaultUserSettings',
    'DomainDefaultUserSettingsCanvasAppSettings',
    'DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettings',
    'DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings',
    'DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettings',
    'DomainDefaultUserSettingsJupyterServerAppSettings',
    'DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepository',
    'DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec',
    'DomainDefaultUserSettingsKernelGatewayAppSettings',
    'DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImage',
    'DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec',
    'DomainDefaultUserSettingsRSessionAppSettings',
    'DomainDefaultUserSettingsRSessionAppSettingsCustomImage',
    'DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec',
    'DomainDefaultUserSettingsRStudioServerProAppSettings',
    'DomainDefaultUserSettingsSharingSettings',
    'DomainDefaultUserSettingsTensorBoardAppSettings',
    'DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec',
    'DomainDomainSettings',
    'DomainDomainSettingsRStudioServerProDomainSettings',
    'DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec',
    'DomainRetentionPolicy',
    'EndpointConfigurationAsyncInferenceConfig',
    'EndpointConfigurationAsyncInferenceConfigClientConfig',
    'EndpointConfigurationAsyncInferenceConfigOutputConfig',
    'EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfig',
    'EndpointConfigurationDataCaptureConfig',
    'EndpointConfigurationDataCaptureConfigCaptureContentTypeHeader',
    'EndpointConfigurationDataCaptureConfigCaptureOption',
    'EndpointConfigurationProductionVariant',
    'EndpointConfigurationProductionVariantCoreDumpConfig',
    'EndpointConfigurationProductionVariantServerlessConfig',
    'EndpointConfigurationShadowProductionVariant',
    'EndpointConfigurationShadowProductionVariantCoreDumpConfig',
    'EndpointConfigurationShadowProductionVariantServerlessConfig',
    'EndpointDeploymentConfig',
    'EndpointDeploymentConfigAutoRollbackConfiguration',
    'EndpointDeploymentConfigAutoRollbackConfigurationAlarm',
    'EndpointDeploymentConfigBlueGreenUpdatePolicy',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySize',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSize',
    'EndpointDeploymentConfigRollingUpdatePolicy',
    'EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSize',
    'EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSize',
    'FeatureGroupFeatureDefinition',
    'FeatureGroupOfflineStoreConfig',
    'FeatureGroupOfflineStoreConfigDataCatalogConfig',
    'FeatureGroupOfflineStoreConfigS3StorageConfig',
    'FeatureGroupOnlineStoreConfig',
    'FeatureGroupOnlineStoreConfigSecurityConfig',
    'FlowDefinitionHumanLoopActivationConfig',
    'FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfig',
    'FlowDefinitionHumanLoopConfig',
    'FlowDefinitionHumanLoopConfigPublicWorkforceTaskPrice',
    'FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsd',
    'FlowDefinitionHumanLoopRequestSource',
    'FlowDefinitionOutputConfig',
    'HumanTaskUIUiTemplate',
    'ModelContainer',
    'ModelContainerImageConfig',
    'ModelContainerImageConfigRepositoryAuthConfig',
    'ModelInferenceExecutionConfig',
    'ModelPrimaryContainer',
    'ModelPrimaryContainerImageConfig',
    'ModelPrimaryContainerImageConfigRepositoryAuthConfig',
    'ModelVpcConfig',
    'MonitoringScheduleMonitoringScheduleConfig',
    'MonitoringScheduleMonitoringScheduleConfigScheduleConfig',
    'NotebookInstanceInstanceMetadataServiceConfiguration',
    'PipelineParallelismConfiguration',
    'PipelinePipelineDefinitionS3Location',
    'ProjectServiceCatalogProvisioningDetails',
    'ProjectServiceCatalogProvisioningDetailsProvisioningParameter',
    'SpaceSpaceSettings',
    'SpaceSpaceSettingsJupyterServerAppSettings',
    'SpaceSpaceSettingsJupyterServerAppSettingsCodeRepository',
    'SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec',
    'SpaceSpaceSettingsKernelGatewayAppSettings',
    'SpaceSpaceSettingsKernelGatewayAppSettingsCustomImage',
    'SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec',
    'UserProfileUserSettings',
    'UserProfileUserSettingsCanvasAppSettings',
    'UserProfileUserSettingsCanvasAppSettingsModelRegisterSettings',
    'UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings',
    'UserProfileUserSettingsCanvasAppSettingsWorkspaceSettings',
    'UserProfileUserSettingsJupyterServerAppSettings',
    'UserProfileUserSettingsJupyterServerAppSettingsCodeRepository',
    'UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec',
    'UserProfileUserSettingsKernelGatewayAppSettings',
    'UserProfileUserSettingsKernelGatewayAppSettingsCustomImage',
    'UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec',
    'UserProfileUserSettingsRSessionAppSettings',
    'UserProfileUserSettingsRSessionAppSettingsCustomImage',
    'UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpec',
    'UserProfileUserSettingsRStudioServerProAppSettings',
    'UserProfileUserSettingsSharingSettings',
    'UserProfileUserSettingsTensorBoardAppSettings',
    'UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpec',
    'WorkforceCognitoConfig',
    'WorkforceOidcConfig',
    'WorkforceSourceIpConfig',
    'WorkforceWorkforceVpcConfig',
    'WorkteamMemberDefinition',
    'WorkteamMemberDefinitionCognitoMemberDefinition',
    'WorkteamMemberDefinitionOidcMemberDefinition',
    'WorkteamNotificationConfiguration',
]

@pulumi.output_type
class AppImageConfigKernelGatewayImageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kernelSpec":
            suggest = "kernel_spec"
        elif key == "fileSystemConfig":
            suggest = "file_system_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppImageConfigKernelGatewayImageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppImageConfigKernelGatewayImageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppImageConfigKernelGatewayImageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kernel_spec: 'outputs.AppImageConfigKernelGatewayImageConfigKernelSpec',
                 file_system_config: Optional['outputs.AppImageConfigKernelGatewayImageConfigFileSystemConfig'] = None):
        """
        :param 'AppImageConfigKernelGatewayImageConfigKernelSpecArgs' kernel_spec: The default branch for the Git repository. See Kernel Spec details below.
        :param 'AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs' file_system_config: The URL where the Git repository is located. See File System Config details below.
        """
        pulumi.set(__self__, "kernel_spec", kernel_spec)
        if file_system_config is not None:
            pulumi.set(__self__, "file_system_config", file_system_config)

    @property
    @pulumi.getter(name="kernelSpec")
    def kernel_spec(self) -> 'outputs.AppImageConfigKernelGatewayImageConfigKernelSpec':
        """
        The default branch for the Git repository. See Kernel Spec details below.
        """
        return pulumi.get(self, "kernel_spec")

    @property
    @pulumi.getter(name="fileSystemConfig")
    def file_system_config(self) -> Optional['outputs.AppImageConfigKernelGatewayImageConfigFileSystemConfig']:
        """
        The URL where the Git repository is located. See File System Config details below.
        """
        return pulumi.get(self, "file_system_config")


@pulumi.output_type
class AppImageConfigKernelGatewayImageConfigFileSystemConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultGid":
            suggest = "default_gid"
        elif key == "defaultUid":
            suggest = "default_uid"
        elif key == "mountPath":
            suggest = "mount_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppImageConfigKernelGatewayImageConfigFileSystemConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppImageConfigKernelGatewayImageConfigFileSystemConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppImageConfigKernelGatewayImageConfigFileSystemConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_gid: Optional[int] = None,
                 default_uid: Optional[int] = None,
                 mount_path: Optional[str] = None):
        """
        :param int default_gid: The default POSIX group ID (GID). If not specified, defaults to `100`. Valid values are `0` and `100`.
        :param int default_uid: The default POSIX user ID (UID). If not specified, defaults to `1000`. Valid values are `0` and `1000`.
        :param str mount_path: The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to `/home/sagemaker-user`.
               
               > **Note:** When specifying `default_gid` and `default_uid`, Valid value pairs are [`0`, `0`] and [`100`, `1000`].
        """
        if default_gid is not None:
            pulumi.set(__self__, "default_gid", default_gid)
        if default_uid is not None:
            pulumi.set(__self__, "default_uid", default_uid)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)

    @property
    @pulumi.getter(name="defaultGid")
    def default_gid(self) -> Optional[int]:
        """
        The default POSIX group ID (GID). If not specified, defaults to `100`. Valid values are `0` and `100`.
        """
        return pulumi.get(self, "default_gid")

    @property
    @pulumi.getter(name="defaultUid")
    def default_uid(self) -> Optional[int]:
        """
        The default POSIX user ID (UID). If not specified, defaults to `1000`. Valid values are `0` and `1000`.
        """
        return pulumi.get(self, "default_uid")

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[str]:
        """
        The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to `/home/sagemaker-user`.

        > **Note:** When specifying `default_gid` and `default_uid`, Valid value pairs are [`0`, `0`] and [`100`, `1000`].
        """
        return pulumi.get(self, "mount_path")


@pulumi.output_type
class AppImageConfigKernelGatewayImageConfigKernelSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppImageConfigKernelGatewayImageConfigKernelSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppImageConfigKernelGatewayImageConfigKernelSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppImageConfigKernelGatewayImageConfigKernelSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 display_name: Optional[str] = None):
        """
        :param str name: The name of the kernel.
        :param str display_name: The display name of the kernel.
        """
        pulumi.set(__self__, "name", name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the kernel.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the kernel.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class AppResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type that the image version runs on. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type that the image version runs on. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class CodeRepositoryGitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryUrl":
            suggest = "repository_url"
        elif key == "secretArn":
            suggest = "secret_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeRepositoryGitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeRepositoryGitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeRepositoryGitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_url: str,
                 branch: Optional[str] = None,
                 secret_arn: Optional[str] = None):
        """
        :param str repository_url: The URL where the Git repository is located.
        :param str branch: The default branch for the Git repository.
        :param str secret_arn: The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: `{"username": UserName, "password": Password}`
        """
        pulumi.set(__self__, "repository_url", repository_url)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if secret_arn is not None:
            pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> str:
        """
        The URL where the Git repository is located.
        """
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        """
        The default branch for the Git repository.
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: `{"username": UserName, "password": Password}`
        """
        return pulumi.get(self, "secret_arn")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityAppSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUri":
            suggest = "image_uri"
        elif key == "postAnalyticsProcessorSourceUri":
            suggest = "post_analytics_processor_source_uri"
        elif key == "recordPreprocessorSourceUri":
            suggest = "record_preprocessor_source_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityAppSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityAppSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityAppSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_uri: str,
                 environment: Optional[Mapping[str, str]] = None,
                 post_analytics_processor_source_uri: Optional[str] = None,
                 record_preprocessor_source_uri: Optional[str] = None):
        """
        :param str image_uri: The container image that the data quality monitoring job runs.
        :param Mapping[str, str] environment: Sets the environment variables in the container that the monitoring job runs. A list of key value pairs.
        :param str post_analytics_processor_source_uri: An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        :param str record_preprocessor_source_uri: An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        """
        pulumi.set(__self__, "image_uri", image_uri)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if post_analytics_processor_source_uri is not None:
            pulumi.set(__self__, "post_analytics_processor_source_uri", post_analytics_processor_source_uri)
        if record_preprocessor_source_uri is not None:
            pulumi.set(__self__, "record_preprocessor_source_uri", record_preprocessor_source_uri)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        """
        The container image that the data quality monitoring job runs.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, str]]:
        """
        Sets the environment variables in the container that the monitoring job runs. A list of key value pairs.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="postAnalyticsProcessorSourceUri")
    def post_analytics_processor_source_uri(self) -> Optional[str]:
        """
        An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        """
        return pulumi.get(self, "post_analytics_processor_source_uri")

    @property
    @pulumi.getter(name="recordPreprocessorSourceUri")
    def record_preprocessor_source_uri(self) -> Optional[str]:
        """
        An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        """
        return pulumi.get(self, "record_preprocessor_source_uri")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityBaselineConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "constraintsResource":
            suggest = "constraints_resource"
        elif key == "statisticsResource":
            suggest = "statistics_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityBaselineConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityBaselineConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityBaselineConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 constraints_resource: Optional['outputs.DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResource'] = None,
                 statistics_resource: Optional['outputs.DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResource'] = None):
        """
        :param 'DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceArgs' constraints_resource: The constraints resource for a monitoring job. Fields are documented below.
        :param 'DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceArgs' statistics_resource: The statistics resource for a monitoring job. Fields are documented below.
        """
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)
        if statistics_resource is not None:
            pulumi.set(__self__, "statistics_resource", statistics_resource)

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional['outputs.DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResource']:
        """
        The constraints resource for a monitoring job. Fields are documented below.
        """
        return pulumi.get(self, "constraints_resource")

    @property
    @pulumi.getter(name="statisticsResource")
    def statistics_resource(self) -> Optional['outputs.DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResource']:
        """
        The statistics resource for a monitoring job. Fields are documented below.
        """
        return pulumi.get(self, "statistics_resource")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: Optional[str] = None):
        """
        :param str s3_uri: The Amazon S3 URI for the constraints resource.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[str]:
        """
        The Amazon S3 URI for the constraints resource.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: Optional[str] = None):
        """
        :param str s3_uri: The Amazon S3 URI for the statistics resource.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[str]:
        """
        The Amazon S3 URI for the statistics resource.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityJobInput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchTransformInput":
            suggest = "batch_transform_input"
        elif key == "endpointInput":
            suggest = "endpoint_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityJobInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityJobInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityJobInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_transform_input: Optional['outputs.DataQualityJobDefinitionDataQualityJobInputBatchTransformInput'] = None,
                 endpoint_input: Optional['outputs.DataQualityJobDefinitionDataQualityJobInputEndpointInput'] = None):
        """
        :param 'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputArgs' batch_transform_input: Input object for the batch transform job. Fields are documented below.
        :param 'DataQualityJobDefinitionDataQualityJobInputEndpointInputArgs' endpoint_input: Input object for the endpoint. Fields are documented below.
        """
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional['outputs.DataQualityJobDefinitionDataQualityJobInputBatchTransformInput']:
        """
        Input object for the batch transform job. Fields are documented below.
        """
        return pulumi.get(self, "batch_transform_input")

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional['outputs.DataQualityJobDefinitionDataQualityJobInputEndpointInput']:
        """
        Input object for the endpoint. Fields are documented below.
        """
        return pulumi.get(self, "endpoint_input")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityJobInputBatchTransformInput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCapturedDestinationS3Uri":
            suggest = "data_captured_destination_s3_uri"
        elif key == "datasetFormat":
            suggest = "dataset_format"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityJobInputBatchTransformInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityJobInputBatchTransformInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityJobInputBatchTransformInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_captured_destination_s3_uri: str,
                 dataset_format: 'outputs.DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormat',
                 local_path: Optional[str] = None,
                 s3_data_distribution_type: Optional[str] = None,
                 s3_input_mode: Optional[str] = None):
        """
        :param str data_captured_destination_s3_uri: The Amazon S3 location being used to capture the data.
        :param 'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatArgs' dataset_format: The dataset format for your batch transform job. Fields are documented below.
        :param str local_path: Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
        :param str s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to `FullyReplicated`. Valid values are `FullyReplicated` or `ShardedByS3Key`
        :param str s3_input_mode: Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job. `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File`.  Valid values are `Pipe` or `File`
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        if local_path is not None:
            pulumi.set(__self__, "local_path", local_path)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> str:
        """
        The Amazon S3 location being used to capture the data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> 'outputs.DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormat':
        """
        The dataset format for your batch transform job. Fields are documented below.
        """
        return pulumi.get(self, "dataset_format")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[str]:
        """
        Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[str]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to `FullyReplicated`. Valid values are `FullyReplicated` or `ShardedByS3Key`
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[str]:
        """
        Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job. `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File`.  Valid values are `Pipe` or `File`
        """
        return pulumi.get(self, "s3_input_mode")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormat(dict):
    def __init__(__self__, *,
                 csv: Optional['outputs.DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsv'] = None,
                 json: Optional['outputs.DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJson'] = None):
        """
        :param 'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvArgs' csv: The CSV dataset used in the monitoring job. Fields are documented below.
        :param 'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonArgs' json: The JSON dataset used in the monitoring job. Fields are documented below.
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)

    @property
    @pulumi.getter
    def csv(self) -> Optional['outputs.DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsv']:
        """
        The CSV dataset used in the monitoring job. Fields are documented below.
        """
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def json(self) -> Optional['outputs.DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJson']:
        """
        The JSON dataset used in the monitoring job. Fields are documented below.
        """
        return pulumi.get(self, "json")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsv(dict):
    def __init__(__self__, *,
                 header: Optional[bool] = None):
        """
        :param bool header: Indicates if the CSV data has a header.
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[bool]:
        """
        Indicates if the CSV data has a header.
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJson(dict):
    def __init__(__self__, *,
                 line: Optional[bool] = None):
        """
        :param bool line: Indicates if the file should be read as a json object per line.
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[bool]:
        """
        Indicates if the file should be read as a json object per line.
        """
        return pulumi.get(self, "line")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityJobInputEndpointInput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointName":
            suggest = "endpoint_name"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityJobInputEndpointInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityJobInputEndpointInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityJobInputEndpointInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_name: str,
                 local_path: Optional[str] = None,
                 s3_data_distribution_type: Optional[str] = None,
                 s3_input_mode: Optional[str] = None):
        """
        :param str endpoint_name: An endpoint in customer's account which has `data_capture_config` enabled.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container. Defaults to `/opt/ml/processing/input`.
        :param str s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to `FullyReplicated`. Valid values are `FullyReplicated` or `ShardedByS3Key`
        :param str s3_input_mode: Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job. `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File`.  Valid values are `Pipe` or `File`
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        if local_path is not None:
            pulumi.set(__self__, "local_path", local_path)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> str:
        """
        An endpoint in customer's account which has `data_capture_config` enabled.
        """
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[str]:
        """
        Path to the filesystem where the endpoint data is available to the container. Defaults to `/opt/ml/processing/input`.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[str]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to `FullyReplicated`. Valid values are `FullyReplicated` or `ShardedByS3Key`
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[str]:
        """
        Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job. `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File`.  Valid values are `Pipe` or `File`
        """
        return pulumi.get(self, "s3_input_mode")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityJobOutputConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitoringOutputs":
            suggest = "monitoring_outputs"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityJobOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityJobOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityJobOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitoring_outputs: 'outputs.DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputs',
                 kms_key_id: Optional[str] = None):
        """
        :param 'DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsArgs' monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded. Fields are documented below.
        :param str kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> 'outputs.DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputs':
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded. Fields are documented below.
        """
        return pulumi.get(self, "monitoring_outputs")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Output":
            suggest = "s3_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output: 'outputs.DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3Output'):
        """
        :param 'DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs' s3_output: The Amazon S3 storage location where the results of a monitoring job are saved. Fields are documented below.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> 'outputs.DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3Output':
        """
        The Amazon S3 storage location where the results of a monitoring job are saved. Fields are documented below.
        """
        return pulumi.get(self, "s3_output")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3Output(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "s3UploadMode":
            suggest = "s3_upload_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3Output. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3Output.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3Output.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: str,
                 local_path: Optional[str] = None,
                 s3_upload_mode: Optional[str] = None):
        """
        :param str s3_uri: The Amazon S3 URI for the constraints resource.
        :param str local_path: Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
        :param str s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes. Valid values are `Continuous` or `EndOfJob`
        """
        pulumi.set(__self__, "s3_uri", s3_uri)
        if local_path is not None:
            pulumi.set(__self__, "local_path", local_path)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        The Amazon S3 URI for the constraints resource.
        """
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[str]:
        """
        Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional[str]:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes. Valid values are `Continuous` or `EndOfJob`
        """
        return pulumi.get(self, "s3_upload_mode")


@pulumi.output_type
class DataQualityJobDefinitionJobResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterConfig":
            suggest = "cluster_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionJobResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionJobResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionJobResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_config: 'outputs.DataQualityJobDefinitionJobResourcesClusterConfig'):
        """
        :param 'DataQualityJobDefinitionJobResourcesClusterConfigArgs' cluster_config: The configuration for the cluster resources used to run the processing job. Fields are documented below.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> 'outputs.DataQualityJobDefinitionJobResourcesClusterConfig':
        """
        The configuration for the cluster resources used to run the processing job. Fields are documented below.
        """
        return pulumi.get(self, "cluster_config")


@pulumi.output_type
class DataQualityJobDefinitionJobResourcesClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "volumeSizeInGb":
            suggest = "volume_size_in_gb"
        elif key == "volumeKmsKeyId":
            suggest = "volume_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionJobResourcesClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionJobResourcesClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionJobResourcesClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 instance_type: str,
                 volume_size_in_gb: int,
                 volume_kms_key_id: Optional[str] = None):
        """
        :param int instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1.
        :param str instance_type: The ML compute instance type for the processing job.
        :param int volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param str volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> int:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")


@pulumi.output_type
class DataQualityJobDefinitionNetworkConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableInterContainerTrafficEncryption":
            suggest = "enable_inter_container_traffic_encryption"
        elif key == "enableNetworkIsolation":
            suggest = "enable_network_isolation"
        elif key == "vpcConfig":
            suggest = "vpc_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[bool] = None,
                 enable_network_isolation: Optional[bool] = None,
                 vpc_config: Optional['outputs.DataQualityJobDefinitionNetworkConfigVpcConfig'] = None):
        """
        :param bool enable_inter_container_traffic_encryption: Whether to encrypt all communications between the instances used for the monitoring jobs. Choose `true` to encrypt communications. Encryption provides greater security for distributed jobs, but the processing might take longer.
        :param bool enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the monitoring job.
        :param 'DataQualityJobDefinitionNetworkConfigVpcConfigArgs' vpc_config: Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. Fields are documented below.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[bool]:
        """
        Whether to encrypt all communications between the instances used for the monitoring jobs. Choose `true` to encrypt communications. Encryption provides greater security for distributed jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[bool]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the monitoring job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional['outputs.DataQualityJobDefinitionNetworkConfigVpcConfig']:
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. Fields are documented below.
        """
        return pulumi.get(self, "vpc_config")


@pulumi.output_type
class DataQualityJobDefinitionNetworkConfigVpcConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionNetworkConfigVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionNetworkConfigVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionNetworkConfigVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnets: Sequence[str]):
        """
        :param Sequence[str] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the `subnets` field.
        :param Sequence[str] subnets: The ID of the subnets in the VPC to which you want to connect your training job or model.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the `subnets` field.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        """
        The ID of the subnets in the VPC to which you want to connect your training job or model.
        """
        return pulumi.get(self, "subnets")


@pulumi.output_type
class DataQualityJobDefinitionStoppingCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRuntimeInSeconds":
            suggest = "max_runtime_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionStoppingCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionStoppingCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionStoppingCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_runtime_in_seconds: Optional[int] = None):
        """
        :param int max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        if max_runtime_in_seconds is not None:
            pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> Optional[int]:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")


@pulumi.output_type
class DeviceDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "iotThingName":
            suggest = "iot_thing_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_name: str,
                 description: Optional[str] = None,
                 iot_thing_name: Optional[str] = None):
        """
        :param str device_name: The name of the device.
        :param str description: A description for the device.
        :param str iot_thing_name: Amazon Web Services Internet of Things (IoT) object name.
        """
        pulumi.set(__self__, "device_name", device_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iot_thing_name is not None:
            pulumi.set(__self__, "iot_thing_name", iot_thing_name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The name of the device.
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description for the device.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="iotThingName")
    def iot_thing_name(self) -> Optional[str]:
        """
        Amazon Web Services Internet of Things (IoT) object name.
        """
        return pulumi.get(self, "iot_thing_name")


@pulumi.output_type
class DeviceFleetOutputConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3OutputLocation":
            suggest = "s3_output_location"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceFleetOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceFleetOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceFleetOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output_location: str,
                 kms_key_id: Optional[str] = None):
        """
        :param str s3_output_location: The Amazon Simple Storage (S3) bucker URI.
        :param str kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.
        """
        pulumi.set(__self__, "s3_output_location", s3_output_location)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3OutputLocation")
    def s3_output_location(self) -> str:
        """
        The Amazon Simple Storage (S3) bucker URI.
        """
        return pulumi.get(self, "s3_output_location")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class DomainDefaultSpaceSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionRole":
            suggest = "execution_role"
        elif key == "jupyterServerAppSettings":
            suggest = "jupyter_server_app_settings"
        elif key == "kernelGatewayAppSettings":
            suggest = "kernel_gateway_app_settings"
        elif key == "securityGroups":
            suggest = "security_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultSpaceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultSpaceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultSpaceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_role: str,
                 jupyter_server_app_settings: Optional['outputs.DomainDefaultSpaceSettingsJupyterServerAppSettings'] = None,
                 kernel_gateway_app_settings: Optional['outputs.DomainDefaultSpaceSettingsKernelGatewayAppSettings'] = None,
                 security_groups: Optional[Sequence[str]] = None):
        """
        :param str execution_role: The execution role for the space.
        :param 'DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs' jupyter_server_app_settings: The Jupyter server's app settings. See Jupyter Server App Settings below.
        :param 'DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs' kernel_gateway_app_settings: The kernel gateway app settings. See Kernel Gateway App Settings below.
        :param Sequence[str] security_groups: The security groups for the Amazon Virtual Private Cloud that the space uses for communication.
        """
        pulumi.set(__self__, "execution_role", execution_role)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> str:
        """
        The execution role for the space.
        """
        return pulumi.get(self, "execution_role")

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional['outputs.DomainDefaultSpaceSettingsJupyterServerAppSettings']:
        """
        The Jupyter server's app settings. See Jupyter Server App Settings below.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional['outputs.DomainDefaultSpaceSettingsKernelGatewayAppSettings']:
        """
        The kernel gateway app settings. See Kernel Gateway App Settings below.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        The security groups for the Amazon Virtual Private Cloud that the space uses for communication.
        """
        return pulumi.get(self, "security_groups")


@pulumi.output_type
class DomainDefaultSpaceSettingsJupyterServerAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeRepositories":
            suggest = "code_repositories"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"
        elif key == "lifecycleConfigArns":
            suggest = "lifecycle_config_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultSpaceSettingsJupyterServerAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultSpaceSettingsJupyterServerAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultSpaceSettingsJupyterServerAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_repositories: Optional[Sequence['outputs.DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository']] = None,
                 default_resource_spec: Optional['outputs.DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec'] = None,
                 lifecycle_config_arns: Optional[Sequence[str]] = None):
        """
        :param Sequence['DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs'] code_repositories: A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        :param 'DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param Sequence[str] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[Sequence['outputs.DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository']]:
        """
        A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        """
        return pulumi.get(self, "code_repositories")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[Sequence[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")


@pulumi.output_type
class DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryUrl":
            suggest = "repository_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepository.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_url: str):
        """
        :param str repository_url: The URL of the Git repository.
        """
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> str:
        """
        The URL of the Git repository.
        """
        return pulumi.get(self, "repository_url")


@pulumi.output_type
class DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class DomainDefaultSpaceSettingsKernelGatewayAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customImages":
            suggest = "custom_images"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"
        elif key == "lifecycleConfigArns":
            suggest = "lifecycle_config_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultSpaceSettingsKernelGatewayAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultSpaceSettingsKernelGatewayAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultSpaceSettingsKernelGatewayAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_images: Optional[Sequence['outputs.DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage']] = None,
                 default_resource_spec: Optional['outputs.DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec'] = None,
                 lifecycle_config_arns: Optional[Sequence[str]] = None):
        """
        :param Sequence['DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs'] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param 'DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param Sequence[str] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[Sequence['outputs.DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage']]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[Sequence[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")


@pulumi.output_type
class DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appImageConfigName":
            suggest = "app_image_config_name"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "imageVersionNumber":
            suggest = "image_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_image_config_name: str,
                 image_name: str,
                 image_version_number: Optional[int] = None):
        """
        :param str app_image_config_name: The name of the App Image Config.
        :param str image_name: The name of the Custom Image.
        :param int image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> str:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[int]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")


@pulumi.output_type
class DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class DomainDefaultUserSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionRole":
            suggest = "execution_role"
        elif key == "canvasAppSettings":
            suggest = "canvas_app_settings"
        elif key == "jupyterServerAppSettings":
            suggest = "jupyter_server_app_settings"
        elif key == "kernelGatewayAppSettings":
            suggest = "kernel_gateway_app_settings"
        elif key == "rSessionAppSettings":
            suggest = "r_session_app_settings"
        elif key == "rStudioServerProAppSettings":
            suggest = "r_studio_server_pro_app_settings"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "sharingSettings":
            suggest = "sharing_settings"
        elif key == "tensorBoardAppSettings":
            suggest = "tensor_board_app_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_role: str,
                 canvas_app_settings: Optional['outputs.DomainDefaultUserSettingsCanvasAppSettings'] = None,
                 jupyter_server_app_settings: Optional['outputs.DomainDefaultUserSettingsJupyterServerAppSettings'] = None,
                 kernel_gateway_app_settings: Optional['outputs.DomainDefaultUserSettingsKernelGatewayAppSettings'] = None,
                 r_session_app_settings: Optional['outputs.DomainDefaultUserSettingsRSessionAppSettings'] = None,
                 r_studio_server_pro_app_settings: Optional['outputs.DomainDefaultUserSettingsRStudioServerProAppSettings'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 sharing_settings: Optional['outputs.DomainDefaultUserSettingsSharingSettings'] = None,
                 tensor_board_app_settings: Optional['outputs.DomainDefaultUserSettingsTensorBoardAppSettings'] = None):
        """
        :param str execution_role: The execution role ARN for the user.
        :param 'DomainDefaultUserSettingsCanvasAppSettingsArgs' canvas_app_settings: The Canvas app settings. See Canvas App Settings below.
        :param 'DomainDefaultUserSettingsJupyterServerAppSettingsArgs' jupyter_server_app_settings: The Jupyter server's app settings. See Jupyter Server App Settings below.
        :param 'DomainDefaultUserSettingsKernelGatewayAppSettingsArgs' kernel_gateway_app_settings: The kernel gateway app settings. See Kernel Gateway App Settings below.
        :param 'DomainDefaultUserSettingsRSessionAppSettingsArgs' r_session_app_settings: The RSession app settings. See RSession App Settings below.
        :param 'DomainDefaultUserSettingsRStudioServerProAppSettingsArgs' r_studio_server_pro_app_settings: A collection of settings that configure user interaction with the RStudioServerPro app. See RStudioServerProAppSettings below.
        :param Sequence[str] security_groups: A list of security group IDs that will be attached to the user.
        :param 'DomainDefaultUserSettingsSharingSettingsArgs' sharing_settings: The sharing settings. See Sharing Settings below.
        :param 'DomainDefaultUserSettingsTensorBoardAppSettingsArgs' tensor_board_app_settings: The TensorBoard app settings. See TensorBoard App Settings below.
        """
        pulumi.set(__self__, "execution_role", execution_role)
        if canvas_app_settings is not None:
            pulumi.set(__self__, "canvas_app_settings", canvas_app_settings)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if r_session_app_settings is not None:
            pulumi.set(__self__, "r_session_app_settings", r_session_app_settings)
        if r_studio_server_pro_app_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_app_settings", r_studio_server_pro_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharing_settings is not None:
            pulumi.set(__self__, "sharing_settings", sharing_settings)
        if tensor_board_app_settings is not None:
            pulumi.set(__self__, "tensor_board_app_settings", tensor_board_app_settings)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> str:
        """
        The execution role ARN for the user.
        """
        return pulumi.get(self, "execution_role")

    @property
    @pulumi.getter(name="canvasAppSettings")
    def canvas_app_settings(self) -> Optional['outputs.DomainDefaultUserSettingsCanvasAppSettings']:
        """
        The Canvas app settings. See Canvas App Settings below.
        """
        return pulumi.get(self, "canvas_app_settings")

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional['outputs.DomainDefaultUserSettingsJupyterServerAppSettings']:
        """
        The Jupyter server's app settings. See Jupyter Server App Settings below.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional['outputs.DomainDefaultUserSettingsKernelGatewayAppSettings']:
        """
        The kernel gateway app settings. See Kernel Gateway App Settings below.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @property
    @pulumi.getter(name="rSessionAppSettings")
    def r_session_app_settings(self) -> Optional['outputs.DomainDefaultUserSettingsRSessionAppSettings']:
        """
        The RSession app settings. See RSession App Settings below.
        """
        return pulumi.get(self, "r_session_app_settings")

    @property
    @pulumi.getter(name="rStudioServerProAppSettings")
    def r_studio_server_pro_app_settings(self) -> Optional['outputs.DomainDefaultUserSettingsRStudioServerProAppSettings']:
        """
        A collection of settings that configure user interaction with the RStudioServerPro app. See RStudioServerProAppSettings below.
        """
        return pulumi.get(self, "r_studio_server_pro_app_settings")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        A list of security group IDs that will be attached to the user.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="sharingSettings")
    def sharing_settings(self) -> Optional['outputs.DomainDefaultUserSettingsSharingSettings']:
        """
        The sharing settings. See Sharing Settings below.
        """
        return pulumi.get(self, "sharing_settings")

    @property
    @pulumi.getter(name="tensorBoardAppSettings")
    def tensor_board_app_settings(self) -> Optional['outputs.DomainDefaultUserSettingsTensorBoardAppSettings']:
        """
        The TensorBoard app settings. See TensorBoard App Settings below.
        """
        return pulumi.get(self, "tensor_board_app_settings")


@pulumi.output_type
class DomainDefaultUserSettingsCanvasAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelRegisterSettings":
            suggest = "model_register_settings"
        elif key == "timeSeriesForecastingSettings":
            suggest = "time_series_forecasting_settings"
        elif key == "workspaceSettings":
            suggest = "workspace_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsCanvasAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsCanvasAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsCanvasAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model_register_settings: Optional['outputs.DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettings'] = None,
                 time_series_forecasting_settings: Optional['outputs.DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings'] = None,
                 workspace_settings: Optional['outputs.DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettings'] = None):
        """
        :param 'DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsArgs' model_register_settings: The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
        :param 'DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs' time_series_forecasting_settings: Time series forecast settings for the Canvas app. See Time Series Forecasting Settings below.
        :param 'DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsArgs' workspace_settings: The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
        """
        if model_register_settings is not None:
            pulumi.set(__self__, "model_register_settings", model_register_settings)
        if time_series_forecasting_settings is not None:
            pulumi.set(__self__, "time_series_forecasting_settings", time_series_forecasting_settings)
        if workspace_settings is not None:
            pulumi.set(__self__, "workspace_settings", workspace_settings)

    @property
    @pulumi.getter(name="modelRegisterSettings")
    def model_register_settings(self) -> Optional['outputs.DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettings']:
        """
        The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
        """
        return pulumi.get(self, "model_register_settings")

    @property
    @pulumi.getter(name="timeSeriesForecastingSettings")
    def time_series_forecasting_settings(self) -> Optional['outputs.DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings']:
        """
        Time series forecast settings for the Canvas app. See Time Series Forecasting Settings below.
        """
        return pulumi.get(self, "time_series_forecasting_settings")

    @property
    @pulumi.getter(name="workspaceSettings")
    def workspace_settings(self) -> Optional['outputs.DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettings']:
        """
        The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
        """
        return pulumi.get(self, "workspace_settings")


@pulumi.output_type
class DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crossAccountModelRegisterRoleArn":
            suggest = "cross_account_model_register_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cross_account_model_register_role_arn: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str cross_account_model_register_role_arn: The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
        :param str status: Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are `ENABLED` and `DISABLED`.
        """
        if cross_account_model_register_role_arn is not None:
            pulumi.set(__self__, "cross_account_model_register_role_arn", cross_account_model_register_role_arn)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="crossAccountModelRegisterRoleArn")
    def cross_account_model_register_role_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
        """
        return pulumi.get(self, "cross_account_model_register_role_arn")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "amazonForecastRoleArn":
            suggest = "amazon_forecast_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 amazon_forecast_role_arn: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str amazon_forecast_role_arn: The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the [AmazonSageMakerCanvasForecastAccess](https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-canvas.html#security-iam-awsmanpol-AmazonSageMakerCanvasForecastAccess) policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
        :param str status: Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are `ENABLED` and `DISABLED`.
        """
        if amazon_forecast_role_arn is not None:
            pulumi.set(__self__, "amazon_forecast_role_arn", amazon_forecast_role_arn)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="amazonForecastRoleArn")
    def amazon_forecast_role_arn(self) -> Optional[str]:
        """
        The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the [AmazonSageMakerCanvasForecastAccess](https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-canvas.html#security-iam-awsmanpol-AmazonSageMakerCanvasForecastAccess) policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
        """
        return pulumi.get(self, "amazon_forecast_role_arn")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3ArtifactPath":
            suggest = "s3_artifact_path"
        elif key == "s3KmsKeyId":
            suggest = "s3_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_artifact_path: Optional[str] = None,
                 s3_kms_key_id: Optional[str] = None):
        """
        :param str s3_artifact_path: The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
        :param str s3_kms_key_id: The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
        """
        if s3_artifact_path is not None:
            pulumi.set(__self__, "s3_artifact_path", s3_artifact_path)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)

    @property
    @pulumi.getter(name="s3ArtifactPath")
    def s3_artifact_path(self) -> Optional[str]:
        """
        The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
        """
        return pulumi.get(self, "s3_artifact_path")

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[str]:
        """
        The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")


@pulumi.output_type
class DomainDefaultUserSettingsJupyterServerAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeRepositories":
            suggest = "code_repositories"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"
        elif key == "lifecycleConfigArns":
            suggest = "lifecycle_config_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsJupyterServerAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsJupyterServerAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsJupyterServerAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_repositories: Optional[Sequence['outputs.DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepository']] = None,
                 default_resource_spec: Optional['outputs.DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec'] = None,
                 lifecycle_config_arns: Optional[Sequence[str]] = None):
        """
        :param Sequence['DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs'] code_repositories: A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        :param 'DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param Sequence[str] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[Sequence['outputs.DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepository']]:
        """
        A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        """
        return pulumi.get(self, "code_repositories")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[Sequence[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")


@pulumi.output_type
class DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepository(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryUrl":
            suggest = "repository_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepository. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepository.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepository.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_url: str):
        """
        :param str repository_url: The URL of the Git repository.
        """
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> str:
        """
        The URL of the Git repository.
        """
        return pulumi.get(self, "repository_url")


@pulumi.output_type
class DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class DomainDefaultUserSettingsKernelGatewayAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customImages":
            suggest = "custom_images"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"
        elif key == "lifecycleConfigArns":
            suggest = "lifecycle_config_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsKernelGatewayAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsKernelGatewayAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsKernelGatewayAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_images: Optional[Sequence['outputs.DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImage']] = None,
                 default_resource_spec: Optional['outputs.DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec'] = None,
                 lifecycle_config_arns: Optional[Sequence[str]] = None):
        """
        :param Sequence['DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs'] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param 'DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param Sequence[str] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[Sequence['outputs.DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImage']]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[Sequence[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")


@pulumi.output_type
class DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appImageConfigName":
            suggest = "app_image_config_name"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "imageVersionNumber":
            suggest = "image_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_image_config_name: str,
                 image_name: str,
                 image_version_number: Optional[int] = None):
        """
        :param str app_image_config_name: The name of the App Image Config.
        :param str image_name: The name of the Custom Image.
        :param int image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> str:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[int]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")


@pulumi.output_type
class DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class DomainDefaultUserSettingsRSessionAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customImages":
            suggest = "custom_images"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsRSessionAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsRSessionAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsRSessionAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_images: Optional[Sequence['outputs.DomainDefaultUserSettingsRSessionAppSettingsCustomImage']] = None,
                 default_resource_spec: Optional['outputs.DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec'] = None):
        """
        :param Sequence['DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs'] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param 'DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[Sequence['outputs.DomainDefaultUserSettingsRSessionAppSettingsCustomImage']]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class DomainDefaultUserSettingsRSessionAppSettingsCustomImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appImageConfigName":
            suggest = "app_image_config_name"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "imageVersionNumber":
            suggest = "image_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsRSessionAppSettingsCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsRSessionAppSettingsCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsRSessionAppSettingsCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_image_config_name: str,
                 image_name: str,
                 image_version_number: Optional[int] = None):
        """
        :param str app_image_config_name: The name of the App Image Config.
        :param str image_name: The name of the Custom Image.
        :param int image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> str:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[int]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")


@pulumi.output_type
class DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class DomainDefaultUserSettingsRStudioServerProAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessStatus":
            suggest = "access_status"
        elif key == "userGroup":
            suggest = "user_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsRStudioServerProAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsRStudioServerProAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsRStudioServerProAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_status: Optional[str] = None,
                 user_group: Optional[str] = None):
        """
        :param str access_status: Indicates whether the current user has access to the RStudioServerPro app. Valid values are `ENABLED` and `DISABLED`.
        :param str user_group: The level of permissions that the user has within the RStudioServerPro app. This value defaults to `R_STUDIO_USER`. The `R_STUDIO_ADMIN` value allows the user access to the RStudio Administrative Dashboard. Valid values are `R_STUDIO_USER` and `R_STUDIO_ADMIN`.
        """
        if access_status is not None:
            pulumi.set(__self__, "access_status", access_status)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)

    @property
    @pulumi.getter(name="accessStatus")
    def access_status(self) -> Optional[str]:
        """
        Indicates whether the current user has access to the RStudioServerPro app. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "access_status")

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[str]:
        """
        The level of permissions that the user has within the RStudioServerPro app. This value defaults to `R_STUDIO_USER`. The `R_STUDIO_ADMIN` value allows the user access to the RStudio Administrative Dashboard. Valid values are `R_STUDIO_USER` and `R_STUDIO_ADMIN`.
        """
        return pulumi.get(self, "user_group")


@pulumi.output_type
class DomainDefaultUserSettingsSharingSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notebookOutputOption":
            suggest = "notebook_output_option"
        elif key == "s3KmsKeyId":
            suggest = "s3_kms_key_id"
        elif key == "s3OutputPath":
            suggest = "s3_output_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsSharingSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsSharingSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsSharingSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notebook_output_option: Optional[str] = None,
                 s3_kms_key_id: Optional[str] = None,
                 s3_output_path: Optional[str] = None):
        """
        :param str notebook_output_option: Whether to include the notebook cell output when sharing the notebook. The default is `Disabled`. Valid values are `Allowed` and `Disabled`.
        :param str s3_kms_key_id: When `notebook_output_option` is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        :param str s3_output_path: When `notebook_output_option` is Allowed, the Amazon S3 bucket used to save the notebook cell output.
        """
        if notebook_output_option is not None:
            pulumi.set(__self__, "notebook_output_option", notebook_output_option)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="notebookOutputOption")
    def notebook_output_option(self) -> Optional[str]:
        """
        Whether to include the notebook cell output when sharing the notebook. The default is `Disabled`. Valid values are `Allowed` and `Disabled`.
        """
        return pulumi.get(self, "notebook_output_option")

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[str]:
        """
        When `notebook_output_option` is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[str]:
        """
        When `notebook_output_option` is Allowed, the Amazon S3 bucket used to save the notebook cell output.
        """
        return pulumi.get(self, "s3_output_path")


@pulumi.output_type
class DomainDefaultUserSettingsTensorBoardAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsTensorBoardAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsTensorBoardAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsTensorBoardAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_resource_spec: Optional['outputs.DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec'] = None):
        """
        :param 'DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class DomainDomainSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionRoleIdentityConfig":
            suggest = "execution_role_identity_config"
        elif key == "rStudioServerProDomainSettings":
            suggest = "r_studio_server_pro_domain_settings"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDomainSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDomainSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDomainSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_role_identity_config: Optional[str] = None,
                 r_studio_server_pro_domain_settings: Optional['outputs.DomainDomainSettingsRStudioServerProDomainSettings'] = None,
                 security_group_ids: Optional[Sequence[str]] = None):
        """
        :param str execution_role_identity_config: The configuration for attaching a SageMaker user profile name to the execution role as a sts:SourceIdentity key [AWS Docs](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html). Valid values are `USER_PROFILE_NAME` and `DISABLED`.
        :param 'DomainDomainSettingsRStudioServerProDomainSettingsArgs' r_studio_server_pro_domain_settings: A collection of settings that configure the RStudioServerPro Domain-level app. see RStudioServerProDomainSettings below.
        :param Sequence[str] security_group_ids: The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        """
        if execution_role_identity_config is not None:
            pulumi.set(__self__, "execution_role_identity_config", execution_role_identity_config)
        if r_studio_server_pro_domain_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_domain_settings", r_studio_server_pro_domain_settings)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="executionRoleIdentityConfig")
    def execution_role_identity_config(self) -> Optional[str]:
        """
        The configuration for attaching a SageMaker user profile name to the execution role as a sts:SourceIdentity key [AWS Docs](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html). Valid values are `USER_PROFILE_NAME` and `DISABLED`.
        """
        return pulumi.get(self, "execution_role_identity_config")

    @property
    @pulumi.getter(name="rStudioServerProDomainSettings")
    def r_studio_server_pro_domain_settings(self) -> Optional['outputs.DomainDomainSettingsRStudioServerProDomainSettings']:
        """
        A collection of settings that configure the RStudioServerPro Domain-level app. see RStudioServerProDomainSettings below.
        """
        return pulumi.get(self, "r_studio_server_pro_domain_settings")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        """
        return pulumi.get(self, "security_group_ids")


@pulumi.output_type
class DomainDomainSettingsRStudioServerProDomainSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainExecutionRoleArn":
            suggest = "domain_execution_role_arn"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"
        elif key == "rStudioConnectUrl":
            suggest = "r_studio_connect_url"
        elif key == "rStudioPackageManagerUrl":
            suggest = "r_studio_package_manager_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDomainSettingsRStudioServerProDomainSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDomainSettingsRStudioServerProDomainSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDomainSettingsRStudioServerProDomainSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_execution_role_arn: str,
                 default_resource_spec: Optional['outputs.DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec'] = None,
                 r_studio_connect_url: Optional[str] = None,
                 r_studio_package_manager_url: Optional[str] = None):
        """
        :param str domain_execution_role_arn: The ARN of the execution role for the RStudioServerPro Domain-level app.
        :param 'DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param str r_studio_connect_url: A URL pointing to an RStudio Connect server.
        :param str r_studio_package_manager_url: A URL pointing to an RStudio Package Manager server.
        """
        pulumi.set(__self__, "domain_execution_role_arn", domain_execution_role_arn)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if r_studio_connect_url is not None:
            pulumi.set(__self__, "r_studio_connect_url", r_studio_connect_url)
        if r_studio_package_manager_url is not None:
            pulumi.set(__self__, "r_studio_package_manager_url", r_studio_package_manager_url)

    @property
    @pulumi.getter(name="domainExecutionRoleArn")
    def domain_execution_role_arn(self) -> str:
        """
        The ARN of the execution role for the RStudioServerPro Domain-level app.
        """
        return pulumi.get(self, "domain_execution_role_arn")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @property
    @pulumi.getter(name="rStudioConnectUrl")
    def r_studio_connect_url(self) -> Optional[str]:
        """
        A URL pointing to an RStudio Connect server.
        """
        return pulumi.get(self, "r_studio_connect_url")

    @property
    @pulumi.getter(name="rStudioPackageManagerUrl")
    def r_studio_package_manager_url(self) -> Optional[str]:
        """
        A URL pointing to an RStudio Package Manager server.
        """
        return pulumi.get(self, "r_studio_package_manager_url")


@pulumi.output_type
class DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class DomainRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "homeEfsFileSystem":
            suggest = "home_efs_file_system"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 home_efs_file_system: Optional[str] = None):
        """
        :param str home_efs_file_system: The retention policy for data stored on an Amazon Elastic File System (EFS) volume. Valid values are `Retain` or `Delete`.  Default value is `Retain`.
        """
        if home_efs_file_system is not None:
            pulumi.set(__self__, "home_efs_file_system", home_efs_file_system)

    @property
    @pulumi.getter(name="homeEfsFileSystem")
    def home_efs_file_system(self) -> Optional[str]:
        """
        The retention policy for data stored on an Amazon Elastic File System (EFS) volume. Valid values are `Retain` or `Delete`.  Default value is `Retain`.
        """
        return pulumi.get(self, "home_efs_file_system")


@pulumi.output_type
class EndpointConfigurationAsyncInferenceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputConfig":
            suggest = "output_config"
        elif key == "clientConfig":
            suggest = "client_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationAsyncInferenceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationAsyncInferenceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationAsyncInferenceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_config: 'outputs.EndpointConfigurationAsyncInferenceConfigOutputConfig',
                 client_config: Optional['outputs.EndpointConfigurationAsyncInferenceConfigClientConfig'] = None):
        """
        :param 'EndpointConfigurationAsyncInferenceConfigOutputConfigArgs' output_config: Specifies the configuration for asynchronous inference invocation outputs.
        :param 'EndpointConfigurationAsyncInferenceConfigClientConfigArgs' client_config: Configures the behavior of the client used by Amazon SageMaker to interact with the model container during asynchronous inference.
        """
        pulumi.set(__self__, "output_config", output_config)
        if client_config is not None:
            pulumi.set(__self__, "client_config", client_config)

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> 'outputs.EndpointConfigurationAsyncInferenceConfigOutputConfig':
        """
        Specifies the configuration for asynchronous inference invocation outputs.
        """
        return pulumi.get(self, "output_config")

    @property
    @pulumi.getter(name="clientConfig")
    def client_config(self) -> Optional['outputs.EndpointConfigurationAsyncInferenceConfigClientConfig']:
        """
        Configures the behavior of the client used by Amazon SageMaker to interact with the model container during asynchronous inference.
        """
        return pulumi.get(self, "client_config")


@pulumi.output_type
class EndpointConfigurationAsyncInferenceConfigClientConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrentInvocationsPerInstance":
            suggest = "max_concurrent_invocations_per_instance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationAsyncInferenceConfigClientConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationAsyncInferenceConfigClientConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationAsyncInferenceConfigClientConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrent_invocations_per_instance: Optional[int] = None):
        """
        :param int max_concurrent_invocations_per_instance: The maximum number of concurrent requests sent by the SageMaker client to the model container. If no value is provided, Amazon SageMaker will choose an optimal value for you.
        """
        if max_concurrent_invocations_per_instance is not None:
            pulumi.set(__self__, "max_concurrent_invocations_per_instance", max_concurrent_invocations_per_instance)

    @property
    @pulumi.getter(name="maxConcurrentInvocationsPerInstance")
    def max_concurrent_invocations_per_instance(self) -> Optional[int]:
        """
        The maximum number of concurrent requests sent by the SageMaker client to the model container. If no value is provided, Amazon SageMaker will choose an optimal value for you.
        """
        return pulumi.get(self, "max_concurrent_invocations_per_instance")


@pulumi.output_type
class EndpointConfigurationAsyncInferenceConfigOutputConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3OutputPath":
            suggest = "s3_output_path"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "notificationConfig":
            suggest = "notification_config"
        elif key == "s3FailurePath":
            suggest = "s3_failure_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationAsyncInferenceConfigOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationAsyncInferenceConfigOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationAsyncInferenceConfigOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output_path: str,
                 kms_key_id: Optional[str] = None,
                 notification_config: Optional['outputs.EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfig'] = None,
                 s3_failure_path: Optional[str] = None):
        """
        :param str s3_output_path: The Amazon S3 location to upload inference responses to.
        :param str kms_key_id: The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the asynchronous inference output in Amazon S3.
        :param 'EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs' notification_config: Specifies the configuration for notifications of inference results for asynchronous inference.
        :param str s3_failure_path: The Amazon S3 location to upload failure inference responses to.
        """
        pulumi.set(__self__, "s3_output_path", s3_output_path)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if notification_config is not None:
            pulumi.set(__self__, "notification_config", notification_config)
        if s3_failure_path is not None:
            pulumi.set(__self__, "s3_failure_path", s3_failure_path)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> str:
        """
        The Amazon S3 location to upload inference responses to.
        """
        return pulumi.get(self, "s3_output_path")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the asynchronous inference output in Amazon S3.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="notificationConfig")
    def notification_config(self) -> Optional['outputs.EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfig']:
        """
        Specifies the configuration for notifications of inference results for asynchronous inference.
        """
        return pulumi.get(self, "notification_config")

    @property
    @pulumi.getter(name="s3FailurePath")
    def s3_failure_path(self) -> Optional[str]:
        """
        The Amazon S3 location to upload failure inference responses to.
        """
        return pulumi.get(self, "s3_failure_path")


@pulumi.output_type
class EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorTopic":
            suggest = "error_topic"
        elif key == "includeInferenceResponseIns":
            suggest = "include_inference_response_ins"
        elif key == "successTopic":
            suggest = "success_topic"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_topic: Optional[str] = None,
                 include_inference_response_ins: Optional[Sequence[str]] = None,
                 success_topic: Optional[str] = None):
        """
        :param str error_topic: Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.
        :param Sequence[str] include_inference_response_ins: The Amazon SNS topics where you want the inference response to be included. Valid values are `SUCCESS_NOTIFICATION_TOPIC` and `ERROR_NOTIFICATION_TOPIC`.
        :param str success_topic: Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.
        """
        if error_topic is not None:
            pulumi.set(__self__, "error_topic", error_topic)
        if include_inference_response_ins is not None:
            pulumi.set(__self__, "include_inference_response_ins", include_inference_response_ins)
        if success_topic is not None:
            pulumi.set(__self__, "success_topic", success_topic)

    @property
    @pulumi.getter(name="errorTopic")
    def error_topic(self) -> Optional[str]:
        """
        Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.
        """
        return pulumi.get(self, "error_topic")

    @property
    @pulumi.getter(name="includeInferenceResponseIns")
    def include_inference_response_ins(self) -> Optional[Sequence[str]]:
        """
        The Amazon SNS topics where you want the inference response to be included. Valid values are `SUCCESS_NOTIFICATION_TOPIC` and `ERROR_NOTIFICATION_TOPIC`.
        """
        return pulumi.get(self, "include_inference_response_ins")

    @property
    @pulumi.getter(name="successTopic")
    def success_topic(self) -> Optional[str]:
        """
        Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.
        """
        return pulumi.get(self, "success_topic")


@pulumi.output_type
class EndpointConfigurationDataCaptureConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "captureOptions":
            suggest = "capture_options"
        elif key == "destinationS3Uri":
            suggest = "destination_s3_uri"
        elif key == "initialSamplingPercentage":
            suggest = "initial_sampling_percentage"
        elif key == "captureContentTypeHeader":
            suggest = "capture_content_type_header"
        elif key == "enableCapture":
            suggest = "enable_capture"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationDataCaptureConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationDataCaptureConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationDataCaptureConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capture_options: Sequence['outputs.EndpointConfigurationDataCaptureConfigCaptureOption'],
                 destination_s3_uri: str,
                 initial_sampling_percentage: int,
                 capture_content_type_header: Optional['outputs.EndpointConfigurationDataCaptureConfigCaptureContentTypeHeader'] = None,
                 enable_capture: Optional[bool] = None,
                 kms_key_id: Optional[str] = None):
        """
        :param Sequence['EndpointConfigurationDataCaptureConfigCaptureOptionArgs'] capture_options: Specifies what data to capture. Fields are documented below.
        :param str destination_s3_uri: The URL for S3 location where the captured data is stored.
        :param int initial_sampling_percentage: Portion of data to capture. Should be between 0 and 100.
        :param 'EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs' capture_content_type_header: The content type headers to capture. Fields are documented below.
        :param bool enable_capture: Flag to enable data capture. Defaults to `false`.
        :param str kms_key_id: Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon SageMaker uses to encrypt the captured data on Amazon S3.
        """
        pulumi.set(__self__, "capture_options", capture_options)
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        pulumi.set(__self__, "initial_sampling_percentage", initial_sampling_percentage)
        if capture_content_type_header is not None:
            pulumi.set(__self__, "capture_content_type_header", capture_content_type_header)
        if enable_capture is not None:
            pulumi.set(__self__, "enable_capture", enable_capture)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="captureOptions")
    def capture_options(self) -> Sequence['outputs.EndpointConfigurationDataCaptureConfigCaptureOption']:
        """
        Specifies what data to capture. Fields are documented below.
        """
        return pulumi.get(self, "capture_options")

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> str:
        """
        The URL for S3 location where the captured data is stored.
        """
        return pulumi.get(self, "destination_s3_uri")

    @property
    @pulumi.getter(name="initialSamplingPercentage")
    def initial_sampling_percentage(self) -> int:
        """
        Portion of data to capture. Should be between 0 and 100.
        """
        return pulumi.get(self, "initial_sampling_percentage")

    @property
    @pulumi.getter(name="captureContentTypeHeader")
    def capture_content_type_header(self) -> Optional['outputs.EndpointConfigurationDataCaptureConfigCaptureContentTypeHeader']:
        """
        The content type headers to capture. Fields are documented below.
        """
        return pulumi.get(self, "capture_content_type_header")

    @property
    @pulumi.getter(name="enableCapture")
    def enable_capture(self) -> Optional[bool]:
        """
        Flag to enable data capture. Defaults to `false`.
        """
        return pulumi.get(self, "enable_capture")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon SageMaker uses to encrypt the captured data on Amazon S3.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class EndpointConfigurationDataCaptureConfigCaptureContentTypeHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "csvContentTypes":
            suggest = "csv_content_types"
        elif key == "jsonContentTypes":
            suggest = "json_content_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationDataCaptureConfigCaptureContentTypeHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationDataCaptureConfigCaptureContentTypeHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationDataCaptureConfigCaptureContentTypeHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 csv_content_types: Optional[Sequence[str]] = None,
                 json_content_types: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] csv_content_types: The CSV content type headers to capture.
        :param Sequence[str] json_content_types: The JSON content type headers to capture.
        """
        if csv_content_types is not None:
            pulumi.set(__self__, "csv_content_types", csv_content_types)
        if json_content_types is not None:
            pulumi.set(__self__, "json_content_types", json_content_types)

    @property
    @pulumi.getter(name="csvContentTypes")
    def csv_content_types(self) -> Optional[Sequence[str]]:
        """
        The CSV content type headers to capture.
        """
        return pulumi.get(self, "csv_content_types")

    @property
    @pulumi.getter(name="jsonContentTypes")
    def json_content_types(self) -> Optional[Sequence[str]]:
        """
        The JSON content type headers to capture.
        """
        return pulumi.get(self, "json_content_types")


@pulumi.output_type
class EndpointConfigurationDataCaptureConfigCaptureOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "captureMode":
            suggest = "capture_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationDataCaptureConfigCaptureOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationDataCaptureConfigCaptureOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationDataCaptureConfigCaptureOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capture_mode: str):
        """
        :param str capture_mode: Specifies the data to be captured. Should be one of `Input` or `Output`.
        """
        pulumi.set(__self__, "capture_mode", capture_mode)

    @property
    @pulumi.getter(name="captureMode")
    def capture_mode(self) -> str:
        """
        Specifies the data to be captured. Should be one of `Input` or `Output`.
        """
        return pulumi.get(self, "capture_mode")


@pulumi.output_type
class EndpointConfigurationProductionVariant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelName":
            suggest = "model_name"
        elif key == "acceleratorType":
            suggest = "accelerator_type"
        elif key == "containerStartupHealthCheckTimeoutInSeconds":
            suggest = "container_startup_health_check_timeout_in_seconds"
        elif key == "coreDumpConfig":
            suggest = "core_dump_config"
        elif key == "enableSsmAccess":
            suggest = "enable_ssm_access"
        elif key == "initialInstanceCount":
            suggest = "initial_instance_count"
        elif key == "initialVariantWeight":
            suggest = "initial_variant_weight"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "modelDataDownloadTimeoutInSeconds":
            suggest = "model_data_download_timeout_in_seconds"
        elif key == "serverlessConfig":
            suggest = "serverless_config"
        elif key == "variantName":
            suggest = "variant_name"
        elif key == "volumeSizeInGb":
            suggest = "volume_size_in_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationProductionVariant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationProductionVariant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationProductionVariant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model_name: str,
                 accelerator_type: Optional[str] = None,
                 container_startup_health_check_timeout_in_seconds: Optional[int] = None,
                 core_dump_config: Optional['outputs.EndpointConfigurationProductionVariantCoreDumpConfig'] = None,
                 enable_ssm_access: Optional[bool] = None,
                 initial_instance_count: Optional[int] = None,
                 initial_variant_weight: Optional[float] = None,
                 instance_type: Optional[str] = None,
                 model_data_download_timeout_in_seconds: Optional[int] = None,
                 serverless_config: Optional['outputs.EndpointConfigurationProductionVariantServerlessConfig'] = None,
                 variant_name: Optional[str] = None,
                 volume_size_in_gb: Optional[int] = None):
        """
        :param str model_name: The name of the model to use.
        :param str accelerator_type: The size of the Elastic Inference (EI) instance to use for the production variant.
        :param int container_startup_health_check_timeout_in_seconds: The timeout value, in seconds, for your inference container to pass health check by SageMaker Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests). Valid values between `60` and `3600`.
        :param 'EndpointConfigurationProductionVariantCoreDumpConfigArgs' core_dump_config: Specifies configuration for a core dump from the model container when the process crashes. Fields are documented below.
        :param bool enable_ssm_access: You can use this parameter to turn on native Amazon Web Services Systems Manager (SSM) access for a production variant behind an endpoint. By default, SSM access is disabled for all production variants behind an endpoints.
        :param int initial_instance_count: Initial number of instances used for auto-scaling.
        :param float initial_variant_weight: Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. If unspecified, it defaults to `1.0`.
        :param str instance_type: The type of instance to start.
        :param int model_data_download_timeout_in_seconds: The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this production variant. Valid values between `60` and `3600`.
        :param 'EndpointConfigurationProductionVariantServerlessConfigArgs' serverless_config: Specifies configuration for how an endpoint performs asynchronous inference.
        :param str variant_name: The name of the variant. If omitted, this provider will assign a random, unique name.
        :param int volume_size_in_gb: The size, in GB, of the ML storage volume attached to individual inference instance associated with the production variant. Valid values between `1` and `512`.
        """
        pulumi.set(__self__, "model_name", model_name)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if container_startup_health_check_timeout_in_seconds is not None:
            pulumi.set(__self__, "container_startup_health_check_timeout_in_seconds", container_startup_health_check_timeout_in_seconds)
        if core_dump_config is not None:
            pulumi.set(__self__, "core_dump_config", core_dump_config)
        if enable_ssm_access is not None:
            pulumi.set(__self__, "enable_ssm_access", enable_ssm_access)
        if initial_instance_count is not None:
            pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        if initial_variant_weight is not None:
            pulumi.set(__self__, "initial_variant_weight", initial_variant_weight)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if model_data_download_timeout_in_seconds is not None:
            pulumi.set(__self__, "model_data_download_timeout_in_seconds", model_data_download_timeout_in_seconds)
        if serverless_config is not None:
            pulumi.set(__self__, "serverless_config", serverless_config)
        if variant_name is not None:
            pulumi.set(__self__, "variant_name", variant_name)
        if volume_size_in_gb is not None:
            pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> str:
        """
        The name of the model to use.
        """
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[str]:
        """
        The size of the Elastic Inference (EI) instance to use for the production variant.
        """
        return pulumi.get(self, "accelerator_type")

    @property
    @pulumi.getter(name="containerStartupHealthCheckTimeoutInSeconds")
    def container_startup_health_check_timeout_in_seconds(self) -> Optional[int]:
        """
        The timeout value, in seconds, for your inference container to pass health check by SageMaker Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests). Valid values between `60` and `3600`.
        """
        return pulumi.get(self, "container_startup_health_check_timeout_in_seconds")

    @property
    @pulumi.getter(name="coreDumpConfig")
    def core_dump_config(self) -> Optional['outputs.EndpointConfigurationProductionVariantCoreDumpConfig']:
        """
        Specifies configuration for a core dump from the model container when the process crashes. Fields are documented below.
        """
        return pulumi.get(self, "core_dump_config")

    @property
    @pulumi.getter(name="enableSsmAccess")
    def enable_ssm_access(self) -> Optional[bool]:
        """
        You can use this parameter to turn on native Amazon Web Services Systems Manager (SSM) access for a production variant behind an endpoint. By default, SSM access is disabled for all production variants behind an endpoints.
        """
        return pulumi.get(self, "enable_ssm_access")

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> Optional[int]:
        """
        Initial number of instances used for auto-scaling.
        """
        return pulumi.get(self, "initial_instance_count")

    @property
    @pulumi.getter(name="initialVariantWeight")
    def initial_variant_weight(self) -> Optional[float]:
        """
        Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. If unspecified, it defaults to `1.0`.
        """
        return pulumi.get(self, "initial_variant_weight")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The type of instance to start.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="modelDataDownloadTimeoutInSeconds")
    def model_data_download_timeout_in_seconds(self) -> Optional[int]:
        """
        The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this production variant. Valid values between `60` and `3600`.
        """
        return pulumi.get(self, "model_data_download_timeout_in_seconds")

    @property
    @pulumi.getter(name="serverlessConfig")
    def serverless_config(self) -> Optional['outputs.EndpointConfigurationProductionVariantServerlessConfig']:
        """
        Specifies configuration for how an endpoint performs asynchronous inference.
        """
        return pulumi.get(self, "serverless_config")

    @property
    @pulumi.getter(name="variantName")
    def variant_name(self) -> Optional[str]:
        """
        The name of the variant. If omitted, this provider will assign a random, unique name.
        """
        return pulumi.get(self, "variant_name")

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> Optional[int]:
        """
        The size, in GB, of the ML storage volume attached to individual inference instance associated with the production variant. Valid values between `1` and `512`.
        """
        return pulumi.get(self, "volume_size_in_gb")


@pulumi.output_type
class EndpointConfigurationProductionVariantCoreDumpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3Uri":
            suggest = "destination_s3_uri"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationProductionVariantCoreDumpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationProductionVariantCoreDumpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationProductionVariantCoreDumpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_uri: str,
                 kms_key_id: Optional[str] = None):
        """
        :param str destination_s3_uri: The Amazon S3 bucket to send the core dump to.
        :param str kms_key_id: The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the core dump data at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> str:
        """
        The Amazon S3 bucket to send the core dump to.
        """
        return pulumi.get(self, "destination_s3_uri")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the core dump data at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class EndpointConfigurationProductionVariantServerlessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrency":
            suggest = "max_concurrency"
        elif key == "memorySizeInMb":
            suggest = "memory_size_in_mb"
        elif key == "provisionedConcurrency":
            suggest = "provisioned_concurrency"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationProductionVariantServerlessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationProductionVariantServerlessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationProductionVariantServerlessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrency: int,
                 memory_size_in_mb: int,
                 provisioned_concurrency: Optional[int] = None):
        """
        :param int max_concurrency: The maximum number of concurrent invocations your serverless endpoint can process. Valid values are between `1` and `200`.
        :param int memory_size_in_mb: The memory size of your serverless endpoint. Valid values are in 1 GB increments: `1024` MB, `2048` MB, `3072` MB, `4096` MB, `5120` MB, or `6144` MB.
        :param int provisioned_concurrency: The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to `max_concurrency`. Valid values are between `1` and `200`.
        """
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "memory_size_in_mb", memory_size_in_mb)
        if provisioned_concurrency is not None:
            pulumi.set(__self__, "provisioned_concurrency", provisioned_concurrency)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> int:
        """
        The maximum number of concurrent invocations your serverless endpoint can process. Valid values are between `1` and `200`.
        """
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter(name="memorySizeInMb")
    def memory_size_in_mb(self) -> int:
        """
        The memory size of your serverless endpoint. Valid values are in 1 GB increments: `1024` MB, `2048` MB, `3072` MB, `4096` MB, `5120` MB, or `6144` MB.
        """
        return pulumi.get(self, "memory_size_in_mb")

    @property
    @pulumi.getter(name="provisionedConcurrency")
    def provisioned_concurrency(self) -> Optional[int]:
        """
        The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to `max_concurrency`. Valid values are between `1` and `200`.
        """
        return pulumi.get(self, "provisioned_concurrency")


@pulumi.output_type
class EndpointConfigurationShadowProductionVariant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelName":
            suggest = "model_name"
        elif key == "acceleratorType":
            suggest = "accelerator_type"
        elif key == "containerStartupHealthCheckTimeoutInSeconds":
            suggest = "container_startup_health_check_timeout_in_seconds"
        elif key == "coreDumpConfig":
            suggest = "core_dump_config"
        elif key == "enableSsmAccess":
            suggest = "enable_ssm_access"
        elif key == "initialInstanceCount":
            suggest = "initial_instance_count"
        elif key == "initialVariantWeight":
            suggest = "initial_variant_weight"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "modelDataDownloadTimeoutInSeconds":
            suggest = "model_data_download_timeout_in_seconds"
        elif key == "serverlessConfig":
            suggest = "serverless_config"
        elif key == "variantName":
            suggest = "variant_name"
        elif key == "volumeSizeInGb":
            suggest = "volume_size_in_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationShadowProductionVariant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationShadowProductionVariant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationShadowProductionVariant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model_name: str,
                 accelerator_type: Optional[str] = None,
                 container_startup_health_check_timeout_in_seconds: Optional[int] = None,
                 core_dump_config: Optional['outputs.EndpointConfigurationShadowProductionVariantCoreDumpConfig'] = None,
                 enable_ssm_access: Optional[bool] = None,
                 initial_instance_count: Optional[int] = None,
                 initial_variant_weight: Optional[float] = None,
                 instance_type: Optional[str] = None,
                 model_data_download_timeout_in_seconds: Optional[int] = None,
                 serverless_config: Optional['outputs.EndpointConfigurationShadowProductionVariantServerlessConfig'] = None,
                 variant_name: Optional[str] = None,
                 volume_size_in_gb: Optional[int] = None):
        """
        :param str model_name: The name of the model to use.
        :param str accelerator_type: The size of the Elastic Inference (EI) instance to use for the production variant.
        :param int container_startup_health_check_timeout_in_seconds: The timeout value, in seconds, for your inference container to pass health check by SageMaker Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests). Valid values between `60` and `3600`.
        :param 'EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs' core_dump_config: Specifies configuration for a core dump from the model container when the process crashes. Fields are documented below.
        :param bool enable_ssm_access: You can use this parameter to turn on native Amazon Web Services Systems Manager (SSM) access for a production variant behind an endpoint. By default, SSM access is disabled for all production variants behind an endpoints.
        :param int initial_instance_count: Initial number of instances used for auto-scaling.
        :param float initial_variant_weight: Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. If unspecified, it defaults to `1.0`.
        :param str instance_type: The type of instance to start.
        :param int model_data_download_timeout_in_seconds: The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this production variant. Valid values between `60` and `3600`.
        :param 'EndpointConfigurationShadowProductionVariantServerlessConfigArgs' serverless_config: Specifies configuration for how an endpoint performs asynchronous inference.
        :param str variant_name: The name of the variant. If omitted, this provider will assign a random, unique name.
        :param int volume_size_in_gb: The size, in GB, of the ML storage volume attached to individual inference instance associated with the production variant. Valid values between `1` and `512`.
        """
        pulumi.set(__self__, "model_name", model_name)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if container_startup_health_check_timeout_in_seconds is not None:
            pulumi.set(__self__, "container_startup_health_check_timeout_in_seconds", container_startup_health_check_timeout_in_seconds)
        if core_dump_config is not None:
            pulumi.set(__self__, "core_dump_config", core_dump_config)
        if enable_ssm_access is not None:
            pulumi.set(__self__, "enable_ssm_access", enable_ssm_access)
        if initial_instance_count is not None:
            pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        if initial_variant_weight is not None:
            pulumi.set(__self__, "initial_variant_weight", initial_variant_weight)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if model_data_download_timeout_in_seconds is not None:
            pulumi.set(__self__, "model_data_download_timeout_in_seconds", model_data_download_timeout_in_seconds)
        if serverless_config is not None:
            pulumi.set(__self__, "serverless_config", serverless_config)
        if variant_name is not None:
            pulumi.set(__self__, "variant_name", variant_name)
        if volume_size_in_gb is not None:
            pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> str:
        """
        The name of the model to use.
        """
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[str]:
        """
        The size of the Elastic Inference (EI) instance to use for the production variant.
        """
        return pulumi.get(self, "accelerator_type")

    @property
    @pulumi.getter(name="containerStartupHealthCheckTimeoutInSeconds")
    def container_startup_health_check_timeout_in_seconds(self) -> Optional[int]:
        """
        The timeout value, in seconds, for your inference container to pass health check by SageMaker Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests). Valid values between `60` and `3600`.
        """
        return pulumi.get(self, "container_startup_health_check_timeout_in_seconds")

    @property
    @pulumi.getter(name="coreDumpConfig")
    def core_dump_config(self) -> Optional['outputs.EndpointConfigurationShadowProductionVariantCoreDumpConfig']:
        """
        Specifies configuration for a core dump from the model container when the process crashes. Fields are documented below.
        """
        return pulumi.get(self, "core_dump_config")

    @property
    @pulumi.getter(name="enableSsmAccess")
    def enable_ssm_access(self) -> Optional[bool]:
        """
        You can use this parameter to turn on native Amazon Web Services Systems Manager (SSM) access for a production variant behind an endpoint. By default, SSM access is disabled for all production variants behind an endpoints.
        """
        return pulumi.get(self, "enable_ssm_access")

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> Optional[int]:
        """
        Initial number of instances used for auto-scaling.
        """
        return pulumi.get(self, "initial_instance_count")

    @property
    @pulumi.getter(name="initialVariantWeight")
    def initial_variant_weight(self) -> Optional[float]:
        """
        Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. If unspecified, it defaults to `1.0`.
        """
        return pulumi.get(self, "initial_variant_weight")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The type of instance to start.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="modelDataDownloadTimeoutInSeconds")
    def model_data_download_timeout_in_seconds(self) -> Optional[int]:
        """
        The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this production variant. Valid values between `60` and `3600`.
        """
        return pulumi.get(self, "model_data_download_timeout_in_seconds")

    @property
    @pulumi.getter(name="serverlessConfig")
    def serverless_config(self) -> Optional['outputs.EndpointConfigurationShadowProductionVariantServerlessConfig']:
        """
        Specifies configuration for how an endpoint performs asynchronous inference.
        """
        return pulumi.get(self, "serverless_config")

    @property
    @pulumi.getter(name="variantName")
    def variant_name(self) -> Optional[str]:
        """
        The name of the variant. If omitted, this provider will assign a random, unique name.
        """
        return pulumi.get(self, "variant_name")

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> Optional[int]:
        """
        The size, in GB, of the ML storage volume attached to individual inference instance associated with the production variant. Valid values between `1` and `512`.
        """
        return pulumi.get(self, "volume_size_in_gb")


@pulumi.output_type
class EndpointConfigurationShadowProductionVariantCoreDumpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationS3Uri":
            suggest = "destination_s3_uri"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationShadowProductionVariantCoreDumpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationShadowProductionVariantCoreDumpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationShadowProductionVariantCoreDumpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_s3_uri: str,
                 kms_key_id: str):
        """
        :param str destination_s3_uri: The Amazon S3 bucket to send the core dump to.
        :param str kms_key_id: The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the core dump data at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> str:
        """
        The Amazon S3 bucket to send the core dump to.
        """
        return pulumi.get(self, "destination_s3_uri")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> str:
        """
        The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the core dump data at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class EndpointConfigurationShadowProductionVariantServerlessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrency":
            suggest = "max_concurrency"
        elif key == "memorySizeInMb":
            suggest = "memory_size_in_mb"
        elif key == "provisionedConcurrency":
            suggest = "provisioned_concurrency"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigurationShadowProductionVariantServerlessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigurationShadowProductionVariantServerlessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigurationShadowProductionVariantServerlessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrency: int,
                 memory_size_in_mb: int,
                 provisioned_concurrency: Optional[int] = None):
        """
        :param int max_concurrency: The maximum number of concurrent invocations your serverless endpoint can process. Valid values are between `1` and `200`.
        :param int memory_size_in_mb: The memory size of your serverless endpoint. Valid values are in 1 GB increments: `1024` MB, `2048` MB, `3072` MB, `4096` MB, `5120` MB, or `6144` MB.
        :param int provisioned_concurrency: The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to `max_concurrency`. Valid values are between `1` and `200`.
        """
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "memory_size_in_mb", memory_size_in_mb)
        if provisioned_concurrency is not None:
            pulumi.set(__self__, "provisioned_concurrency", provisioned_concurrency)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> int:
        """
        The maximum number of concurrent invocations your serverless endpoint can process. Valid values are between `1` and `200`.
        """
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter(name="memorySizeInMb")
    def memory_size_in_mb(self) -> int:
        """
        The memory size of your serverless endpoint. Valid values are in 1 GB increments: `1024` MB, `2048` MB, `3072` MB, `4096` MB, `5120` MB, or `6144` MB.
        """
        return pulumi.get(self, "memory_size_in_mb")

    @property
    @pulumi.getter(name="provisionedConcurrency")
    def provisioned_concurrency(self) -> Optional[int]:
        """
        The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to `max_concurrency`. Valid values are between `1` and `200`.
        """
        return pulumi.get(self, "provisioned_concurrency")


@pulumi.output_type
class EndpointDeploymentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoRollbackConfiguration":
            suggest = "auto_rollback_configuration"
        elif key == "blueGreenUpdatePolicy":
            suggest = "blue_green_update_policy"
        elif key == "rollingUpdatePolicy":
            suggest = "rolling_update_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointDeploymentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointDeploymentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointDeploymentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_rollback_configuration: Optional['outputs.EndpointDeploymentConfigAutoRollbackConfiguration'] = None,
                 blue_green_update_policy: Optional['outputs.EndpointDeploymentConfigBlueGreenUpdatePolicy'] = None,
                 rolling_update_policy: Optional['outputs.EndpointDeploymentConfigRollingUpdatePolicy'] = None):
        """
        :param 'EndpointDeploymentConfigAutoRollbackConfigurationArgs' auto_rollback_configuration: Automatic rollback configuration for handling endpoint deployment failures and recovery. See Auto Rollback Configuration.
        :param 'EndpointDeploymentConfigBlueGreenUpdatePolicyArgs' blue_green_update_policy: Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. See Blue Green Update Config.
        :param 'EndpointDeploymentConfigRollingUpdatePolicyArgs' rolling_update_policy: Specifies a rolling deployment strategy for updating a SageMaker endpoint. See Rolling Update Policy.
        """
        if auto_rollback_configuration is not None:
            pulumi.set(__self__, "auto_rollback_configuration", auto_rollback_configuration)
        if blue_green_update_policy is not None:
            pulumi.set(__self__, "blue_green_update_policy", blue_green_update_policy)
        if rolling_update_policy is not None:
            pulumi.set(__self__, "rolling_update_policy", rolling_update_policy)

    @property
    @pulumi.getter(name="autoRollbackConfiguration")
    def auto_rollback_configuration(self) -> Optional['outputs.EndpointDeploymentConfigAutoRollbackConfiguration']:
        """
        Automatic rollback configuration for handling endpoint deployment failures and recovery. See Auto Rollback Configuration.
        """
        return pulumi.get(self, "auto_rollback_configuration")

    @property
    @pulumi.getter(name="blueGreenUpdatePolicy")
    def blue_green_update_policy(self) -> Optional['outputs.EndpointDeploymentConfigBlueGreenUpdatePolicy']:
        """
        Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. See Blue Green Update Config.
        """
        return pulumi.get(self, "blue_green_update_policy")

    @property
    @pulumi.getter(name="rollingUpdatePolicy")
    def rolling_update_policy(self) -> Optional['outputs.EndpointDeploymentConfigRollingUpdatePolicy']:
        """
        Specifies a rolling deployment strategy for updating a SageMaker endpoint. See Rolling Update Policy.
        """
        return pulumi.get(self, "rolling_update_policy")


@pulumi.output_type
class EndpointDeploymentConfigAutoRollbackConfiguration(dict):
    def __init__(__self__, *,
                 alarms: Optional[Sequence['outputs.EndpointDeploymentConfigAutoRollbackConfigurationAlarm']] = None):
        """
        :param Sequence['EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs'] alarms: List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint. If any alarms are tripped during a deployment, SageMaker rolls back the deployment. See Alarms.
        """
        if alarms is not None:
            pulumi.set(__self__, "alarms", alarms)

    @property
    @pulumi.getter
    def alarms(self) -> Optional[Sequence['outputs.EndpointDeploymentConfigAutoRollbackConfigurationAlarm']]:
        """
        List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint. If any alarms are tripped during a deployment, SageMaker rolls back the deployment. See Alarms.
        """
        return pulumi.get(self, "alarms")


@pulumi.output_type
class EndpointDeploymentConfigAutoRollbackConfigurationAlarm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alarmName":
            suggest = "alarm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointDeploymentConfigAutoRollbackConfigurationAlarm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointDeploymentConfigAutoRollbackConfigurationAlarm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointDeploymentConfigAutoRollbackConfigurationAlarm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarm_name: str):
        """
        :param str alarm_name: The name of a CloudWatch alarm in your account.
        """
        pulumi.set(__self__, "alarm_name", alarm_name)

    @property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> str:
        """
        The name of a CloudWatch alarm in your account.
        """
        return pulumi.get(self, "alarm_name")


@pulumi.output_type
class EndpointDeploymentConfigBlueGreenUpdatePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trafficRoutingConfiguration":
            suggest = "traffic_routing_configuration"
        elif key == "maximumExecutionTimeoutInSeconds":
            suggest = "maximum_execution_timeout_in_seconds"
        elif key == "terminationWaitInSeconds":
            suggest = "termination_wait_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointDeploymentConfigBlueGreenUpdatePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointDeploymentConfigBlueGreenUpdatePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointDeploymentConfigBlueGreenUpdatePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 traffic_routing_configuration: 'outputs.EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration',
                 maximum_execution_timeout_in_seconds: Optional[int] = None,
                 termination_wait_in_seconds: Optional[int] = None):
        """
        :param 'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs' traffic_routing_configuration: Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment. See Traffic Routing Configuration.
        :param int maximum_execution_timeout_in_seconds: Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in `termination_wait_in_seconds` and `wait_interval_in_seconds`. Valid values are between `600` and `14400`.
        :param int termination_wait_in_seconds: Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is `0`. Valid values are between `0` and `3600`.
        """
        pulumi.set(__self__, "traffic_routing_configuration", traffic_routing_configuration)
        if maximum_execution_timeout_in_seconds is not None:
            pulumi.set(__self__, "maximum_execution_timeout_in_seconds", maximum_execution_timeout_in_seconds)
        if termination_wait_in_seconds is not None:
            pulumi.set(__self__, "termination_wait_in_seconds", termination_wait_in_seconds)

    @property
    @pulumi.getter(name="trafficRoutingConfiguration")
    def traffic_routing_configuration(self) -> 'outputs.EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration':
        """
        Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment. See Traffic Routing Configuration.
        """
        return pulumi.get(self, "traffic_routing_configuration")

    @property
    @pulumi.getter(name="maximumExecutionTimeoutInSeconds")
    def maximum_execution_timeout_in_seconds(self) -> Optional[int]:
        """
        Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in `termination_wait_in_seconds` and `wait_interval_in_seconds`. Valid values are between `600` and `14400`.
        """
        return pulumi.get(self, "maximum_execution_timeout_in_seconds")

    @property
    @pulumi.getter(name="terminationWaitInSeconds")
    def termination_wait_in_seconds(self) -> Optional[int]:
        """
        Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is `0`. Valid values are between `0` and `3600`.
        """
        return pulumi.get(self, "termination_wait_in_seconds")


@pulumi.output_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitIntervalInSeconds":
            suggest = "wait_interval_in_seconds"
        elif key == "canarySize":
            suggest = "canary_size"
        elif key == "linearStepSize":
            suggest = "linear_step_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 wait_interval_in_seconds: int,
                 canary_size: Optional['outputs.EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySize'] = None,
                 linear_step_size: Optional['outputs.EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSize'] = None):
        """
        :param str type: Traffic routing strategy type. Valid values are: `ALL_AT_ONCE`, `CANARY`, and `LINEAR`.
        :param int wait_interval_in_seconds: The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet. Valid values are between `0` and `3600`.
        :param 'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs' canary_size: Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count. See Canary Size.
        :param 'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs' linear_step_size: Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count. See Linear Step Size.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "wait_interval_in_seconds", wait_interval_in_seconds)
        if canary_size is not None:
            pulumi.set(__self__, "canary_size", canary_size)
        if linear_step_size is not None:
            pulumi.set(__self__, "linear_step_size", linear_step_size)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Traffic routing strategy type. Valid values are: `ALL_AT_ONCE`, `CANARY`, and `LINEAR`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="waitIntervalInSeconds")
    def wait_interval_in_seconds(self) -> int:
        """
        The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet. Valid values are between `0` and `3600`.
        """
        return pulumi.get(self, "wait_interval_in_seconds")

    @property
    @pulumi.getter(name="canarySize")
    def canary_size(self) -> Optional['outputs.EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySize']:
        """
        Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count. See Canary Size.
        """
        return pulumi.get(self, "canary_size")

    @property
    @pulumi.getter(name="linearStepSize")
    def linear_step_size(self) -> Optional['outputs.EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSize']:
        """
        Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count. See Linear Step Size.
        """
        return pulumi.get(self, "linear_step_size")


@pulumi.output_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySize(dict):
    def __init__(__self__, *,
                 type: str,
                 value: int):
        """
        :param str type: Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        :param int value: Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSize(dict):
    def __init__(__self__, *,
                 type: str,
                 value: int):
        """
        :param str type: Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        :param int value: Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EndpointDeploymentConfigRollingUpdatePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumBatchSize":
            suggest = "maximum_batch_size"
        elif key == "waitIntervalInSeconds":
            suggest = "wait_interval_in_seconds"
        elif key == "maximumExecutionTimeoutInSeconds":
            suggest = "maximum_execution_timeout_in_seconds"
        elif key == "rollbackMaximumBatchSize":
            suggest = "rollback_maximum_batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointDeploymentConfigRollingUpdatePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointDeploymentConfigRollingUpdatePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointDeploymentConfigRollingUpdatePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_batch_size: 'outputs.EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSize',
                 wait_interval_in_seconds: int,
                 maximum_execution_timeout_in_seconds: Optional[int] = None,
                 rollback_maximum_batch_size: Optional['outputs.EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSize'] = None):
        """
        :param 'EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSizeArgs' maximum_batch_size: Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count. See Maximum Batch Size.
        :param int wait_interval_in_seconds: The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet. Valid values are between `0` and `3600`.
        :param int maximum_execution_timeout_in_seconds: The time limit for the total deployment. Exceeding this limit causes a timeout. Valid values are between `600` and `14400`.
        :param 'EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSizeArgs' rollback_maximum_batch_size: Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback. See Rollback Maximum Batch Size.
        """
        pulumi.set(__self__, "maximum_batch_size", maximum_batch_size)
        pulumi.set(__self__, "wait_interval_in_seconds", wait_interval_in_seconds)
        if maximum_execution_timeout_in_seconds is not None:
            pulumi.set(__self__, "maximum_execution_timeout_in_seconds", maximum_execution_timeout_in_seconds)
        if rollback_maximum_batch_size is not None:
            pulumi.set(__self__, "rollback_maximum_batch_size", rollback_maximum_batch_size)

    @property
    @pulumi.getter(name="maximumBatchSize")
    def maximum_batch_size(self) -> 'outputs.EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSize':
        """
        Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count. See Maximum Batch Size.
        """
        return pulumi.get(self, "maximum_batch_size")

    @property
    @pulumi.getter(name="waitIntervalInSeconds")
    def wait_interval_in_seconds(self) -> int:
        """
        The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet. Valid values are between `0` and `3600`.
        """
        return pulumi.get(self, "wait_interval_in_seconds")

    @property
    @pulumi.getter(name="maximumExecutionTimeoutInSeconds")
    def maximum_execution_timeout_in_seconds(self) -> Optional[int]:
        """
        The time limit for the total deployment. Exceeding this limit causes a timeout. Valid values are between `600` and `14400`.
        """
        return pulumi.get(self, "maximum_execution_timeout_in_seconds")

    @property
    @pulumi.getter(name="rollbackMaximumBatchSize")
    def rollback_maximum_batch_size(self) -> Optional['outputs.EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSize']:
        """
        Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback. See Rollback Maximum Batch Size.
        """
        return pulumi.get(self, "rollback_maximum_batch_size")


@pulumi.output_type
class EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSize(dict):
    def __init__(__self__, *,
                 type: str,
                 value: int):
        """
        :param str type: Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        :param int value: Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSize(dict):
    def __init__(__self__, *,
                 type: str,
                 value: int):
        """
        :param str type: Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        :param int value: Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FeatureGroupFeatureDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "featureName":
            suggest = "feature_name"
        elif key == "featureType":
            suggest = "feature_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureGroupFeatureDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureGroupFeatureDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureGroupFeatureDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feature_name: Optional[str] = None,
                 feature_type: Optional[str] = None):
        """
        :param str feature_name: The name of a feature. `feature_name` cannot be any of the following: `is_deleted`, `write_time`, `api_invocation_time`.
        :param str feature_type: The value type of a feature. Valid values are `Integral`, `Fractional`, or `String`.
        """
        if feature_name is not None:
            pulumi.set(__self__, "feature_name", feature_name)
        if feature_type is not None:
            pulumi.set(__self__, "feature_type", feature_type)

    @property
    @pulumi.getter(name="featureName")
    def feature_name(self) -> Optional[str]:
        """
        The name of a feature. `feature_name` cannot be any of the following: `is_deleted`, `write_time`, `api_invocation_time`.
        """
        return pulumi.get(self, "feature_name")

    @property
    @pulumi.getter(name="featureType")
    def feature_type(self) -> Optional[str]:
        """
        The value type of a feature. Valid values are `Integral`, `Fractional`, or `String`.
        """
        return pulumi.get(self, "feature_type")


@pulumi.output_type
class FeatureGroupOfflineStoreConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3StorageConfig":
            suggest = "s3_storage_config"
        elif key == "dataCatalogConfig":
            suggest = "data_catalog_config"
        elif key == "disableGlueTableCreation":
            suggest = "disable_glue_table_creation"
        elif key == "tableFormat":
            suggest = "table_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureGroupOfflineStoreConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureGroupOfflineStoreConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureGroupOfflineStoreConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_storage_config: 'outputs.FeatureGroupOfflineStoreConfigS3StorageConfig',
                 data_catalog_config: Optional['outputs.FeatureGroupOfflineStoreConfigDataCatalogConfig'] = None,
                 disable_glue_table_creation: Optional[bool] = None,
                 table_format: Optional[str] = None):
        """
        :param 'FeatureGroupOfflineStoreConfigS3StorageConfigArgs' s3_storage_config: The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.
        :param 'FeatureGroupOfflineStoreConfigDataCatalogConfigArgs' data_catalog_config: The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.
        :param bool disable_glue_table_creation: Set to `true` to turn Online Store On.
        :param str table_format: Format for the offline store table. Supported formats are `Glue` (Default) and Apache `Iceberg` (https://iceberg.apache.org/).
        """
        pulumi.set(__self__, "s3_storage_config", s3_storage_config)
        if data_catalog_config is not None:
            pulumi.set(__self__, "data_catalog_config", data_catalog_config)
        if disable_glue_table_creation is not None:
            pulumi.set(__self__, "disable_glue_table_creation", disable_glue_table_creation)
        if table_format is not None:
            pulumi.set(__self__, "table_format", table_format)

    @property
    @pulumi.getter(name="s3StorageConfig")
    def s3_storage_config(self) -> 'outputs.FeatureGroupOfflineStoreConfigS3StorageConfig':
        """
        The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.
        """
        return pulumi.get(self, "s3_storage_config")

    @property
    @pulumi.getter(name="dataCatalogConfig")
    def data_catalog_config(self) -> Optional['outputs.FeatureGroupOfflineStoreConfigDataCatalogConfig']:
        """
        The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.
        """
        return pulumi.get(self, "data_catalog_config")

    @property
    @pulumi.getter(name="disableGlueTableCreation")
    def disable_glue_table_creation(self) -> Optional[bool]:
        """
        Set to `true` to turn Online Store On.
        """
        return pulumi.get(self, "disable_glue_table_creation")

    @property
    @pulumi.getter(name="tableFormat")
    def table_format(self) -> Optional[str]:
        """
        Format for the offline store table. Supported formats are `Glue` (Default) and Apache `Iceberg` (https://iceberg.apache.org/).
        """
        return pulumi.get(self, "table_format")


@pulumi.output_type
class FeatureGroupOfflineStoreConfigDataCatalogConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureGroupOfflineStoreConfigDataCatalogConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureGroupOfflineStoreConfigDataCatalogConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureGroupOfflineStoreConfigDataCatalogConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog: Optional[str] = None,
                 database: Optional[str] = None,
                 table_name: Optional[str] = None):
        """
        :param str catalog: The name of the Glue table catalog.
        :param str database: The name of the Glue table database.
        :param str table_name: The name of the Glue table.
        """
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[str]:
        """
        The name of the Glue table catalog.
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        The name of the Glue table database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        """
        The name of the Glue table.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class FeatureGroupOfflineStoreConfigS3StorageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureGroupOfflineStoreConfigS3StorageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureGroupOfflineStoreConfigS3StorageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureGroupOfflineStoreConfigS3StorageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: str,
                 kms_key_id: Optional[str] = None):
        """
        :param str s3_uri: The S3 URI, or location in Amazon S3, of OfflineStore.
        :param str kms_key_id: The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
        """
        pulumi.set(__self__, "s3_uri", s3_uri)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        The S3 URI, or location in Amazon S3, of OfflineStore.
        """
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class FeatureGroupOnlineStoreConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableOnlineStore":
            suggest = "enable_online_store"
        elif key == "securityConfig":
            suggest = "security_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureGroupOnlineStoreConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureGroupOnlineStoreConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureGroupOnlineStoreConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_online_store: Optional[bool] = None,
                 security_config: Optional['outputs.FeatureGroupOnlineStoreConfigSecurityConfig'] = None):
        """
        :param bool enable_online_store: Set to `true` to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.
        :param 'FeatureGroupOnlineStoreConfigSecurityConfigArgs' security_config: Security config for at-rest encryption of your OnlineStore. See Security Config Below.
        """
        if enable_online_store is not None:
            pulumi.set(__self__, "enable_online_store", enable_online_store)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)

    @property
    @pulumi.getter(name="enableOnlineStore")
    def enable_online_store(self) -> Optional[bool]:
        """
        Set to `true` to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.
        """
        return pulumi.get(self, "enable_online_store")

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional['outputs.FeatureGroupOnlineStoreConfigSecurityConfig']:
        """
        Security config for at-rest encryption of your OnlineStore. See Security Config Below.
        """
        return pulumi.get(self, "security_config")


@pulumi.output_type
class FeatureGroupOnlineStoreConfigSecurityConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureGroupOnlineStoreConfigSecurityConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureGroupOnlineStoreConfigSecurityConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureGroupOnlineStoreConfigSecurityConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None):
        """
        :param str kms_key_id: The ID of the AWS Key Management Service (AWS KMS) key that SageMaker Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption.
        """
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The ID of the AWS Key Management Service (AWS KMS) key that SageMaker Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class FlowDefinitionHumanLoopActivationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "humanLoopActivationConditionsConfig":
            suggest = "human_loop_activation_conditions_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowDefinitionHumanLoopActivationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowDefinitionHumanLoopActivationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowDefinitionHumanLoopActivationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 human_loop_activation_conditions_config: Optional['outputs.FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfig'] = None):
        """
        :param 'FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs' human_loop_activation_conditions_config: defines under what conditions SageMaker creates a human loop. See Human Loop Activation Conditions Config details below.
        """
        if human_loop_activation_conditions_config is not None:
            pulumi.set(__self__, "human_loop_activation_conditions_config", human_loop_activation_conditions_config)

    @property
    @pulumi.getter(name="humanLoopActivationConditionsConfig")
    def human_loop_activation_conditions_config(self) -> Optional['outputs.FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfig']:
        """
        defines under what conditions SageMaker creates a human loop. See Human Loop Activation Conditions Config details below.
        """
        return pulumi.get(self, "human_loop_activation_conditions_config")


@pulumi.output_type
class FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "humanLoopActivationConditions":
            suggest = "human_loop_activation_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 human_loop_activation_conditions: str):
        """
        :param str human_loop_activation_conditions: A JSON expressing use-case specific conditions declaratively. If any condition is matched, atomic tasks are created against the configured work team. For more information about how to structure the JSON, see [JSON Schema for Human Loop Activation Conditions in Amazon Augmented AI](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-human-fallback-conditions-json-schema.html).
        """
        pulumi.set(__self__, "human_loop_activation_conditions", human_loop_activation_conditions)

    @property
    @pulumi.getter(name="humanLoopActivationConditions")
    def human_loop_activation_conditions(self) -> str:
        """
        A JSON expressing use-case specific conditions declaratively. If any condition is matched, atomic tasks are created against the configured work team. For more information about how to structure the JSON, see [JSON Schema for Human Loop Activation Conditions in Amazon Augmented AI](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-human-fallback-conditions-json-schema.html).
        """
        return pulumi.get(self, "human_loop_activation_conditions")


@pulumi.output_type
class FlowDefinitionHumanLoopConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "humanTaskUiArn":
            suggest = "human_task_ui_arn"
        elif key == "taskCount":
            suggest = "task_count"
        elif key == "taskDescription":
            suggest = "task_description"
        elif key == "taskTitle":
            suggest = "task_title"
        elif key == "workteamArn":
            suggest = "workteam_arn"
        elif key == "publicWorkforceTaskPrice":
            suggest = "public_workforce_task_price"
        elif key == "taskAvailabilityLifetimeInSeconds":
            suggest = "task_availability_lifetime_in_seconds"
        elif key == "taskKeywords":
            suggest = "task_keywords"
        elif key == "taskTimeLimitInSeconds":
            suggest = "task_time_limit_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowDefinitionHumanLoopConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowDefinitionHumanLoopConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowDefinitionHumanLoopConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 human_task_ui_arn: str,
                 task_count: int,
                 task_description: str,
                 task_title: str,
                 workteam_arn: str,
                 public_workforce_task_price: Optional['outputs.FlowDefinitionHumanLoopConfigPublicWorkforceTaskPrice'] = None,
                 task_availability_lifetime_in_seconds: Optional[int] = None,
                 task_keywords: Optional[Sequence[str]] = None,
                 task_time_limit_in_seconds: Optional[int] = None):
        """
        :param str human_task_ui_arn: The Amazon Resource Name (ARN) of the human task user interface.
        :param int task_count: The number of distinct workers who will perform the same task on each object. Valid value range between `1` and `3`.
        :param str task_description: A description for the human worker task.
        :param str task_title: A title for the human worker task.
        :param str workteam_arn: The Amazon Resource Name (ARN) of the human task user interface. Amazon Resource Name (ARN) of a team of workers. For Public workforces see [AWS Docs](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-management-public.html).
        :param 'FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs' public_workforce_task_price: Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. See Public Workforce Task Price details below.
        :param int task_availability_lifetime_in_seconds: The length of time that a task remains available for review by human workers. Valid value range between `1` and `864000`.
        :param Sequence[str] task_keywords: An array of keywords used to describe the task so that workers can discover the task.
        :param int task_time_limit_in_seconds: The amount of time that a worker has to complete a task. The default value is `3600` seconds.
        """
        pulumi.set(__self__, "human_task_ui_arn", human_task_ui_arn)
        pulumi.set(__self__, "task_count", task_count)
        pulumi.set(__self__, "task_description", task_description)
        pulumi.set(__self__, "task_title", task_title)
        pulumi.set(__self__, "workteam_arn", workteam_arn)
        if public_workforce_task_price is not None:
            pulumi.set(__self__, "public_workforce_task_price", public_workforce_task_price)
        if task_availability_lifetime_in_seconds is not None:
            pulumi.set(__self__, "task_availability_lifetime_in_seconds", task_availability_lifetime_in_seconds)
        if task_keywords is not None:
            pulumi.set(__self__, "task_keywords", task_keywords)
        if task_time_limit_in_seconds is not None:
            pulumi.set(__self__, "task_time_limit_in_seconds", task_time_limit_in_seconds)

    @property
    @pulumi.getter(name="humanTaskUiArn")
    def human_task_ui_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the human task user interface.
        """
        return pulumi.get(self, "human_task_ui_arn")

    @property
    @pulumi.getter(name="taskCount")
    def task_count(self) -> int:
        """
        The number of distinct workers who will perform the same task on each object. Valid value range between `1` and `3`.
        """
        return pulumi.get(self, "task_count")

    @property
    @pulumi.getter(name="taskDescription")
    def task_description(self) -> str:
        """
        A description for the human worker task.
        """
        return pulumi.get(self, "task_description")

    @property
    @pulumi.getter(name="taskTitle")
    def task_title(self) -> str:
        """
        A title for the human worker task.
        """
        return pulumi.get(self, "task_title")

    @property
    @pulumi.getter(name="workteamArn")
    def workteam_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the human task user interface. Amazon Resource Name (ARN) of a team of workers. For Public workforces see [AWS Docs](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-management-public.html).
        """
        return pulumi.get(self, "workteam_arn")

    @property
    @pulumi.getter(name="publicWorkforceTaskPrice")
    def public_workforce_task_price(self) -> Optional['outputs.FlowDefinitionHumanLoopConfigPublicWorkforceTaskPrice']:
        """
        Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. See Public Workforce Task Price details below.
        """
        return pulumi.get(self, "public_workforce_task_price")

    @property
    @pulumi.getter(name="taskAvailabilityLifetimeInSeconds")
    def task_availability_lifetime_in_seconds(self) -> Optional[int]:
        """
        The length of time that a task remains available for review by human workers. Valid value range between `1` and `864000`.
        """
        return pulumi.get(self, "task_availability_lifetime_in_seconds")

    @property
    @pulumi.getter(name="taskKeywords")
    def task_keywords(self) -> Optional[Sequence[str]]:
        """
        An array of keywords used to describe the task so that workers can discover the task.
        """
        return pulumi.get(self, "task_keywords")

    @property
    @pulumi.getter(name="taskTimeLimitInSeconds")
    def task_time_limit_in_seconds(self) -> Optional[int]:
        """
        The amount of time that a worker has to complete a task. The default value is `3600` seconds.
        """
        return pulumi.get(self, "task_time_limit_in_seconds")


@pulumi.output_type
class FlowDefinitionHumanLoopConfigPublicWorkforceTaskPrice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "amountInUsd":
            suggest = "amount_in_usd"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowDefinitionHumanLoopConfigPublicWorkforceTaskPrice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowDefinitionHumanLoopConfigPublicWorkforceTaskPrice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowDefinitionHumanLoopConfigPublicWorkforceTaskPrice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 amount_in_usd: Optional['outputs.FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsd'] = None):
        """
        :param 'FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs' amount_in_usd: Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars. See Amount In Usd details below.
        """
        if amount_in_usd is not None:
            pulumi.set(__self__, "amount_in_usd", amount_in_usd)

    @property
    @pulumi.getter(name="amountInUsd")
    def amount_in_usd(self) -> Optional['outputs.FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsd']:
        """
        Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars. See Amount In Usd details below.
        """
        return pulumi.get(self, "amount_in_usd")


@pulumi.output_type
class FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tenthFractionsOfACent":
            suggest = "tenth_fractions_of_a_cent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cents: Optional[int] = None,
                 dollars: Optional[int] = None,
                 tenth_fractions_of_a_cent: Optional[int] = None):
        """
        :param int cents: The fractional portion, in cents, of the amount. Valid value range between `0` and `99`.
        :param int dollars: The whole number of dollars in the amount. Valid value range between `0` and `2`.
        :param int tenth_fractions_of_a_cent: Fractions of a cent, in tenths. Valid value range between `0` and `9`.
        """
        if cents is not None:
            pulumi.set(__self__, "cents", cents)
        if dollars is not None:
            pulumi.set(__self__, "dollars", dollars)
        if tenth_fractions_of_a_cent is not None:
            pulumi.set(__self__, "tenth_fractions_of_a_cent", tenth_fractions_of_a_cent)

    @property
    @pulumi.getter
    def cents(self) -> Optional[int]:
        """
        The fractional portion, in cents, of the amount. Valid value range between `0` and `99`.
        """
        return pulumi.get(self, "cents")

    @property
    @pulumi.getter
    def dollars(self) -> Optional[int]:
        """
        The whole number of dollars in the amount. Valid value range between `0` and `2`.
        """
        return pulumi.get(self, "dollars")

    @property
    @pulumi.getter(name="tenthFractionsOfACent")
    def tenth_fractions_of_a_cent(self) -> Optional[int]:
        """
        Fractions of a cent, in tenths. Valid value range between `0` and `9`.
        """
        return pulumi.get(self, "tenth_fractions_of_a_cent")


@pulumi.output_type
class FlowDefinitionHumanLoopRequestSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsManagedHumanLoopRequestSource":
            suggest = "aws_managed_human_loop_request_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowDefinitionHumanLoopRequestSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowDefinitionHumanLoopRequestSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowDefinitionHumanLoopRequestSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_managed_human_loop_request_source: str):
        """
        :param str aws_managed_human_loop_request_source: Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. Valid values are: `AWS/Rekognition/DetectModerationLabels/Image/V3` and `AWS/Textract/AnalyzeDocument/Forms/V1`.
        """
        pulumi.set(__self__, "aws_managed_human_loop_request_source", aws_managed_human_loop_request_source)

    @property
    @pulumi.getter(name="awsManagedHumanLoopRequestSource")
    def aws_managed_human_loop_request_source(self) -> str:
        """
        Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. Valid values are: `AWS/Rekognition/DetectModerationLabels/Image/V3` and `AWS/Textract/AnalyzeDocument/Forms/V1`.
        """
        return pulumi.get(self, "aws_managed_human_loop_request_source")


@pulumi.output_type
class FlowDefinitionOutputConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3OutputPath":
            suggest = "s3_output_path"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowDefinitionOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowDefinitionOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowDefinitionOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output_path: str,
                 kms_key_id: Optional[str] = None):
        """
        :param str s3_output_path: The Amazon S3 path where the object containing human output will be made available.
        :param str kms_key_id: The Amazon Key Management Service (KMS) key ARN for server-side encryption.
        """
        pulumi.set(__self__, "s3_output_path", s3_output_path)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> str:
        """
        The Amazon S3 path where the object containing human output will be made available.
        """
        return pulumi.get(self, "s3_output_path")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The Amazon Key Management Service (KMS) key ARN for server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class HumanTaskUIUiTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentSha256":
            suggest = "content_sha256"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HumanTaskUIUiTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HumanTaskUIUiTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HumanTaskUIUiTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: Optional[str] = None,
                 content_sha256: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str content: The content of the Liquid template for the worker user interface.
        :param str content_sha256: The SHA-256 digest of the contents of the template.
        :param str url: The URL for the user interface template.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_sha256 is not None:
            pulumi.set(__self__, "content_sha256", content_sha256)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        The content of the Liquid template for the worker user interface.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentSha256")
    def content_sha256(self) -> Optional[str]:
        """
        The SHA-256 digest of the contents of the template.
        """
        return pulumi.get(self, "content_sha256")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL for the user interface template.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ModelContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerHostname":
            suggest = "container_hostname"
        elif key == "imageConfig":
            suggest = "image_config"
        elif key == "modelDataUrl":
            suggest = "model_data_url"
        elif key == "modelPackageName":
            suggest = "model_package_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_hostname: Optional[str] = None,
                 environment: Optional[Mapping[str, str]] = None,
                 image: Optional[str] = None,
                 image_config: Optional['outputs.ModelContainerImageConfig'] = None,
                 mode: Optional[str] = None,
                 model_data_url: Optional[str] = None,
                 model_package_name: Optional[str] = None):
        """
        :param str container_hostname: The DNS host name for the container.
        :param Mapping[str, str] environment: Environment variables for the Docker container.
               A list of key value pairs.
        :param str image: The registry path where the inference code image is stored in Amazon ECR.
        :param 'ModelContainerImageConfigArgs' image_config: Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
        :param str mode: The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        :param str model_data_url: The URL for the S3 location where model artifacts are stored.
        :param str model_package_name: The Amazon Resource Name (ARN) of the model package to use to create the model.
        """
        if container_hostname is not None:
            pulumi.set(__self__, "container_hostname", container_hostname)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_config is not None:
            pulumi.set(__self__, "image_config", image_config)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)
        if model_package_name is not None:
            pulumi.set(__self__, "model_package_name", model_package_name)

    @property
    @pulumi.getter(name="containerHostname")
    def container_hostname(self) -> Optional[str]:
        """
        The DNS host name for the container.
        """
        return pulumi.get(self, "container_hostname")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, str]]:
        """
        Environment variables for the Docker container.
        A list of key value pairs.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        The registry path where the inference code image is stored in Amazon ECR.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageConfig")
    def image_config(self) -> Optional['outputs.ModelContainerImageConfig']:
        """
        Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
        """
        return pulumi.get(self, "image_config")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[str]:
        """
        The URL for the S3 location where model artifacts are stored.
        """
        return pulumi.get(self, "model_data_url")

    @property
    @pulumi.getter(name="modelPackageName")
    def model_package_name(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the model package to use to create the model.
        """
        return pulumi.get(self, "model_package_name")


@pulumi.output_type
class ModelContainerImageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryAccessMode":
            suggest = "repository_access_mode"
        elif key == "repositoryAuthConfig":
            suggest = "repository_auth_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelContainerImageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelContainerImageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelContainerImageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_access_mode: str,
                 repository_auth_config: Optional['outputs.ModelContainerImageConfigRepositoryAuthConfig'] = None):
        """
        :param str repository_access_mode: Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: `Platform` and `Vpc`.
        :param 'ModelContainerImageConfigRepositoryAuthConfigArgs' repository_auth_config: Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
        """
        pulumi.set(__self__, "repository_access_mode", repository_access_mode)
        if repository_auth_config is not None:
            pulumi.set(__self__, "repository_auth_config", repository_auth_config)

    @property
    @pulumi.getter(name="repositoryAccessMode")
    def repository_access_mode(self) -> str:
        """
        Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: `Platform` and `Vpc`.
        """
        return pulumi.get(self, "repository_access_mode")

    @property
    @pulumi.getter(name="repositoryAuthConfig")
    def repository_auth_config(self) -> Optional['outputs.ModelContainerImageConfigRepositoryAuthConfig']:
        """
        Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
        """
        return pulumi.get(self, "repository_auth_config")


@pulumi.output_type
class ModelContainerImageConfigRepositoryAuthConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryCredentialsProviderArn":
            suggest = "repository_credentials_provider_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelContainerImageConfigRepositoryAuthConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelContainerImageConfigRepositoryAuthConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelContainerImageConfigRepositoryAuthConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_credentials_provider_arn: str):
        """
        :param str repository_credentials_provider_arn: The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the _AWS Lambda Developer Guide_.
        """
        pulumi.set(__self__, "repository_credentials_provider_arn", repository_credentials_provider_arn)

    @property
    @pulumi.getter(name="repositoryCredentialsProviderArn")
    def repository_credentials_provider_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the _AWS Lambda Developer Guide_.
        """
        return pulumi.get(self, "repository_credentials_provider_arn")


@pulumi.output_type
class ModelInferenceExecutionConfig(dict):
    def __init__(__self__, *,
                 mode: str):
        """
        :param str mode: The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        """
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class ModelPrimaryContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerHostname":
            suggest = "container_hostname"
        elif key == "imageConfig":
            suggest = "image_config"
        elif key == "modelDataUrl":
            suggest = "model_data_url"
        elif key == "modelPackageName":
            suggest = "model_package_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPrimaryContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPrimaryContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPrimaryContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_hostname: Optional[str] = None,
                 environment: Optional[Mapping[str, str]] = None,
                 image: Optional[str] = None,
                 image_config: Optional['outputs.ModelPrimaryContainerImageConfig'] = None,
                 mode: Optional[str] = None,
                 model_data_url: Optional[str] = None,
                 model_package_name: Optional[str] = None):
        """
        :param str container_hostname: The DNS host name for the container.
        :param Mapping[str, str] environment: Environment variables for the Docker container.
               A list of key value pairs.
        :param str image: The registry path where the inference code image is stored in Amazon ECR.
        :param 'ModelPrimaryContainerImageConfigArgs' image_config: Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
        :param str mode: The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        :param str model_data_url: The URL for the S3 location where model artifacts are stored.
        :param str model_package_name: The Amazon Resource Name (ARN) of the model package to use to create the model.
        """
        if container_hostname is not None:
            pulumi.set(__self__, "container_hostname", container_hostname)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_config is not None:
            pulumi.set(__self__, "image_config", image_config)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)
        if model_package_name is not None:
            pulumi.set(__self__, "model_package_name", model_package_name)

    @property
    @pulumi.getter(name="containerHostname")
    def container_hostname(self) -> Optional[str]:
        """
        The DNS host name for the container.
        """
        return pulumi.get(self, "container_hostname")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, str]]:
        """
        Environment variables for the Docker container.
        A list of key value pairs.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        The registry path where the inference code image is stored in Amazon ECR.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageConfig")
    def image_config(self) -> Optional['outputs.ModelPrimaryContainerImageConfig']:
        """
        Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
        """
        return pulumi.get(self, "image_config")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[str]:
        """
        The URL for the S3 location where model artifacts are stored.
        """
        return pulumi.get(self, "model_data_url")

    @property
    @pulumi.getter(name="modelPackageName")
    def model_package_name(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the model package to use to create the model.
        """
        return pulumi.get(self, "model_package_name")


@pulumi.output_type
class ModelPrimaryContainerImageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryAccessMode":
            suggest = "repository_access_mode"
        elif key == "repositoryAuthConfig":
            suggest = "repository_auth_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPrimaryContainerImageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPrimaryContainerImageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPrimaryContainerImageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_access_mode: str,
                 repository_auth_config: Optional['outputs.ModelPrimaryContainerImageConfigRepositoryAuthConfig'] = None):
        """
        :param str repository_access_mode: Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: `Platform` and `Vpc`.
        :param 'ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs' repository_auth_config: Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
        """
        pulumi.set(__self__, "repository_access_mode", repository_access_mode)
        if repository_auth_config is not None:
            pulumi.set(__self__, "repository_auth_config", repository_auth_config)

    @property
    @pulumi.getter(name="repositoryAccessMode")
    def repository_access_mode(self) -> str:
        """
        Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: `Platform` and `Vpc`.
        """
        return pulumi.get(self, "repository_access_mode")

    @property
    @pulumi.getter(name="repositoryAuthConfig")
    def repository_auth_config(self) -> Optional['outputs.ModelPrimaryContainerImageConfigRepositoryAuthConfig']:
        """
        Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
        """
        return pulumi.get(self, "repository_auth_config")


@pulumi.output_type
class ModelPrimaryContainerImageConfigRepositoryAuthConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryCredentialsProviderArn":
            suggest = "repository_credentials_provider_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPrimaryContainerImageConfigRepositoryAuthConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPrimaryContainerImageConfigRepositoryAuthConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPrimaryContainerImageConfigRepositoryAuthConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_credentials_provider_arn: str):
        """
        :param str repository_credentials_provider_arn: The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the _AWS Lambda Developer Guide_.
        """
        pulumi.set(__self__, "repository_credentials_provider_arn", repository_credentials_provider_arn)

    @property
    @pulumi.getter(name="repositoryCredentialsProviderArn")
    def repository_credentials_provider_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the _AWS Lambda Developer Guide_.
        """
        return pulumi.get(self, "repository_credentials_provider_arn")


@pulumi.output_type
class ModelVpcConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnets: Sequence[str]):
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        return pulumi.get(self, "subnets")


@pulumi.output_type
class MonitoringScheduleMonitoringScheduleConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitoringJobDefinitionName":
            suggest = "monitoring_job_definition_name"
        elif key == "monitoringType":
            suggest = "monitoring_type"
        elif key == "scheduleConfig":
            suggest = "schedule_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleMonitoringScheduleConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleMonitoringScheduleConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleMonitoringScheduleConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitoring_job_definition_name: str,
                 monitoring_type: str,
                 schedule_config: Optional['outputs.MonitoringScheduleMonitoringScheduleConfigScheduleConfig'] = None):
        """
        :param str monitoring_job_definition_name: The name of the monitoring job definition to schedule.
        :param str monitoring_type: The type of the monitoring job definition to schedule. Valid values are `DataQuality`, `ModelQuality`, `ModelBias` or `ModelExplainability`
        :param 'MonitoringScheduleMonitoringScheduleConfigScheduleConfigArgs' schedule_config: Configures the monitoring schedule. Fields are documented below.
        """
        pulumi.set(__self__, "monitoring_job_definition_name", monitoring_job_definition_name)
        pulumi.set(__self__, "monitoring_type", monitoring_type)
        if schedule_config is not None:
            pulumi.set(__self__, "schedule_config", schedule_config)

    @property
    @pulumi.getter(name="monitoringJobDefinitionName")
    def monitoring_job_definition_name(self) -> str:
        """
        The name of the monitoring job definition to schedule.
        """
        return pulumi.get(self, "monitoring_job_definition_name")

    @property
    @pulumi.getter(name="monitoringType")
    def monitoring_type(self) -> str:
        """
        The type of the monitoring job definition to schedule. Valid values are `DataQuality`, `ModelQuality`, `ModelBias` or `ModelExplainability`
        """
        return pulumi.get(self, "monitoring_type")

    @property
    @pulumi.getter(name="scheduleConfig")
    def schedule_config(self) -> Optional['outputs.MonitoringScheduleMonitoringScheduleConfigScheduleConfig']:
        """
        Configures the monitoring schedule. Fields are documented below.
        """
        return pulumi.get(self, "schedule_config")


@pulumi.output_type
class MonitoringScheduleMonitoringScheduleConfigScheduleConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleExpression":
            suggest = "schedule_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleMonitoringScheduleConfigScheduleConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleMonitoringScheduleConfigScheduleConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleMonitoringScheduleConfigScheduleConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_expression: str):
        """
        :param str schedule_expression: A cron expression that describes details about the monitoring schedule. For example, and hourly schedule would be `cron(0 * ? * * *)`.
        """
        pulumi.set(__self__, "schedule_expression", schedule_expression)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> str:
        """
        A cron expression that describes details about the monitoring schedule. For example, and hourly schedule would be `cron(0 * ? * * *)`.
        """
        return pulumi.get(self, "schedule_expression")


@pulumi.output_type
class NotebookInstanceInstanceMetadataServiceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minimumInstanceMetadataServiceVersion":
            suggest = "minimum_instance_metadata_service_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookInstanceInstanceMetadataServiceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookInstanceInstanceMetadataServiceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookInstanceInstanceMetadataServiceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minimum_instance_metadata_service_version: Optional[str] = None):
        """
        :param str minimum_instance_metadata_service_version: Indicates the minimum IMDS version that the notebook instance supports. When passed "1" is passed. This means that both IMDSv1 and IMDSv2 are supported. Valid values are `1` and `2`.
        """
        if minimum_instance_metadata_service_version is not None:
            pulumi.set(__self__, "minimum_instance_metadata_service_version", minimum_instance_metadata_service_version)

    @property
    @pulumi.getter(name="minimumInstanceMetadataServiceVersion")
    def minimum_instance_metadata_service_version(self) -> Optional[str]:
        """
        Indicates the minimum IMDS version that the notebook instance supports. When passed "1" is passed. This means that both IMDSv1 and IMDSv2 are supported. Valid values are `1` and `2`.
        """
        return pulumi.get(self, "minimum_instance_metadata_service_version")


@pulumi.output_type
class PipelineParallelismConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxParallelExecutionSteps":
            suggest = "max_parallel_execution_steps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineParallelismConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineParallelismConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineParallelismConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_parallel_execution_steps: int):
        """
        :param int max_parallel_execution_steps: The max number of steps that can be executed in parallel.
        """
        pulumi.set(__self__, "max_parallel_execution_steps", max_parallel_execution_steps)

    @property
    @pulumi.getter(name="maxParallelExecutionSteps")
    def max_parallel_execution_steps(self) -> int:
        """
        The max number of steps that can be executed in parallel.
        """
        return pulumi.get(self, "max_parallel_execution_steps")


@pulumi.output_type
class PipelinePipelineDefinitionS3Location(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectKey":
            suggest = "object_key"
        elif key == "versionId":
            suggest = "version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelinePipelineDefinitionS3Location. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelinePipelineDefinitionS3Location.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelinePipelineDefinitionS3Location.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 object_key: str,
                 version_id: Optional[str] = None):
        """
        :param str bucket: Name of the S3 bucket.
        :param str object_key: The object key (or key name) uniquely identifies the object in an S3 bucket.
        :param str version_id: Version Id of the pipeline definition file. If not specified, Amazon SageMaker will retrieve the latest version.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object_key", object_key)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the S3 bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="objectKey")
    def object_key(self) -> str:
        """
        The object key (or key name) uniquely identifies the object in an S3 bucket.
        """
        return pulumi.get(self, "object_key")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[str]:
        """
        Version Id of the pipeline definition file. If not specified, Amazon SageMaker will retrieve the latest version.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class ProjectServiceCatalogProvisioningDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productId":
            suggest = "product_id"
        elif key == "pathId":
            suggest = "path_id"
        elif key == "provisioningArtifactId":
            suggest = "provisioning_artifact_id"
        elif key == "provisioningParameters":
            suggest = "provisioning_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectServiceCatalogProvisioningDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectServiceCatalogProvisioningDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectServiceCatalogProvisioningDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 product_id: str,
                 path_id: Optional[str] = None,
                 provisioning_artifact_id: Optional[str] = None,
                 provisioning_parameters: Optional[Sequence['outputs.ProjectServiceCatalogProvisioningDetailsProvisioningParameter']] = None):
        """
        :param str product_id: The ID of the product to provision.
        :param str path_id: The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path.
        :param str provisioning_artifact_id: The ID of the provisioning artifact.
        :param Sequence['ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs'] provisioning_parameters: A list of key value pairs that you specify when you provision a product. See Provisioning Parameter below.
        """
        pulumi.set(__self__, "product_id", product_id)
        if path_id is not None:
            pulumi.set(__self__, "path_id", path_id)
        if provisioning_artifact_id is not None:
            pulumi.set(__self__, "provisioning_artifact_id", provisioning_artifact_id)
        if provisioning_parameters is not None:
            pulumi.set(__self__, "provisioning_parameters", provisioning_parameters)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        """
        The ID of the product to provision.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="pathId")
    def path_id(self) -> Optional[str]:
        """
        The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path.
        """
        return pulumi.get(self, "path_id")

    @property
    @pulumi.getter(name="provisioningArtifactId")
    def provisioning_artifact_id(self) -> Optional[str]:
        """
        The ID of the provisioning artifact.
        """
        return pulumi.get(self, "provisioning_artifact_id")

    @property
    @pulumi.getter(name="provisioningParameters")
    def provisioning_parameters(self) -> Optional[Sequence['outputs.ProjectServiceCatalogProvisioningDetailsProvisioningParameter']]:
        """
        A list of key value pairs that you specify when you provision a product. See Provisioning Parameter below.
        """
        return pulumi.get(self, "provisioning_parameters")


@pulumi.output_type
class ProjectServiceCatalogProvisioningDetailsProvisioningParameter(dict):
    def __init__(__self__, *,
                 key: str,
                 value: Optional[str] = None):
        """
        :param str key: The key that identifies a provisioning parameter.
        :param str value: The value of the provisioning parameter.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key that identifies a provisioning parameter.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the provisioning parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SpaceSpaceSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jupyterServerAppSettings":
            suggest = "jupyter_server_app_settings"
        elif key == "kernelGatewayAppSettings":
            suggest = "kernel_gateway_app_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceSpaceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceSpaceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceSpaceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jupyter_server_app_settings: Optional['outputs.SpaceSpaceSettingsJupyterServerAppSettings'] = None,
                 kernel_gateway_app_settings: Optional['outputs.SpaceSpaceSettingsKernelGatewayAppSettings'] = None):
        """
        :param 'SpaceSpaceSettingsJupyterServerAppSettingsArgs' jupyter_server_app_settings: The Jupyter server's app settings. See Jupyter Server App Settings below.
        :param 'SpaceSpaceSettingsKernelGatewayAppSettingsArgs' kernel_gateway_app_settings: The kernel gateway app settings. See Kernel Gateway App Settings below.
        """
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional['outputs.SpaceSpaceSettingsJupyterServerAppSettings']:
        """
        The Jupyter server's app settings. See Jupyter Server App Settings below.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional['outputs.SpaceSpaceSettingsKernelGatewayAppSettings']:
        """
        The kernel gateway app settings. See Kernel Gateway App Settings below.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")


@pulumi.output_type
class SpaceSpaceSettingsJupyterServerAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultResourceSpec":
            suggest = "default_resource_spec"
        elif key == "codeRepositories":
            suggest = "code_repositories"
        elif key == "lifecycleConfigArns":
            suggest = "lifecycle_config_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceSpaceSettingsJupyterServerAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceSpaceSettingsJupyterServerAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceSpaceSettingsJupyterServerAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_resource_spec: 'outputs.SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec',
                 code_repositories: Optional[Sequence['outputs.SpaceSpaceSettingsJupyterServerAppSettingsCodeRepository']] = None,
                 lifecycle_config_arns: Optional[Sequence[str]] = None):
        """
        :param 'SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param Sequence['SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs'] code_repositories: A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        :param Sequence[str] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> 'outputs.SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec':
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[Sequence['outputs.SpaceSpaceSettingsJupyterServerAppSettingsCodeRepository']]:
        """
        A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        """
        return pulumi.get(self, "code_repositories")

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[Sequence[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")


@pulumi.output_type
class SpaceSpaceSettingsJupyterServerAppSettingsCodeRepository(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryUrl":
            suggest = "repository_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceSpaceSettingsJupyterServerAppSettingsCodeRepository. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceSpaceSettingsJupyterServerAppSettingsCodeRepository.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceSpaceSettingsJupyterServerAppSettingsCodeRepository.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_url: str):
        """
        :param str repository_url: The URL of the Git repository.
        """
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> str:
        """
        The URL of the Git repository.
        """
        return pulumi.get(self, "repository_url")


@pulumi.output_type
class SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type.
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class SpaceSpaceSettingsKernelGatewayAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultResourceSpec":
            suggest = "default_resource_spec"
        elif key == "customImages":
            suggest = "custom_images"
        elif key == "lifecycleConfigArns":
            suggest = "lifecycle_config_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceSpaceSettingsKernelGatewayAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceSpaceSettingsKernelGatewayAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceSpaceSettingsKernelGatewayAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_resource_spec: 'outputs.SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec',
                 custom_images: Optional[Sequence['outputs.SpaceSpaceSettingsKernelGatewayAppSettingsCustomImage']] = None,
                 lifecycle_config_arns: Optional[Sequence[str]] = None):
        """
        :param 'SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param Sequence['SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs'] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param Sequence[str] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> 'outputs.SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec':
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[Sequence['outputs.SpaceSpaceSettingsKernelGatewayAppSettingsCustomImage']]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[Sequence[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")


@pulumi.output_type
class SpaceSpaceSettingsKernelGatewayAppSettingsCustomImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appImageConfigName":
            suggest = "app_image_config_name"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "imageVersionNumber":
            suggest = "image_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceSpaceSettingsKernelGatewayAppSettingsCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceSpaceSettingsKernelGatewayAppSettingsCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceSpaceSettingsKernelGatewayAppSettingsCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_image_config_name: str,
                 image_name: str,
                 image_version_number: Optional[int] = None):
        """
        :param str app_image_config_name: The name of the App Image Config.
        :param str image_name: The name of the Custom Image.
        :param int image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> str:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[int]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")


@pulumi.output_type
class SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type.
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class UserProfileUserSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionRole":
            suggest = "execution_role"
        elif key == "canvasAppSettings":
            suggest = "canvas_app_settings"
        elif key == "jupyterServerAppSettings":
            suggest = "jupyter_server_app_settings"
        elif key == "kernelGatewayAppSettings":
            suggest = "kernel_gateway_app_settings"
        elif key == "rSessionAppSettings":
            suggest = "r_session_app_settings"
        elif key == "rStudioServerProAppSettings":
            suggest = "r_studio_server_pro_app_settings"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "sharingSettings":
            suggest = "sharing_settings"
        elif key == "tensorBoardAppSettings":
            suggest = "tensor_board_app_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_role: str,
                 canvas_app_settings: Optional['outputs.UserProfileUserSettingsCanvasAppSettings'] = None,
                 jupyter_server_app_settings: Optional['outputs.UserProfileUserSettingsJupyterServerAppSettings'] = None,
                 kernel_gateway_app_settings: Optional['outputs.UserProfileUserSettingsKernelGatewayAppSettings'] = None,
                 r_session_app_settings: Optional['outputs.UserProfileUserSettingsRSessionAppSettings'] = None,
                 r_studio_server_pro_app_settings: Optional['outputs.UserProfileUserSettingsRStudioServerProAppSettings'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 sharing_settings: Optional['outputs.UserProfileUserSettingsSharingSettings'] = None,
                 tensor_board_app_settings: Optional['outputs.UserProfileUserSettingsTensorBoardAppSettings'] = None):
        """
        :param str execution_role: The execution role ARN for the user.
        :param 'UserProfileUserSettingsCanvasAppSettingsArgs' canvas_app_settings: The Canvas app settings. See Canvas App Settings below.
        :param 'UserProfileUserSettingsJupyterServerAppSettingsArgs' jupyter_server_app_settings: The Jupyter server's app settings. See Jupyter Server App Settings below.
        :param 'UserProfileUserSettingsKernelGatewayAppSettingsArgs' kernel_gateway_app_settings: The kernel gateway app settings. See Kernel Gateway App Settings below.
        :param 'UserProfileUserSettingsRSessionAppSettingsArgs' r_session_app_settings: The RSession app settings. See RSession App Settings below.
        :param 'UserProfileUserSettingsRStudioServerProAppSettingsArgs' r_studio_server_pro_app_settings: A collection of settings that configure user interaction with the RStudioServerPro app. See RStudio Server Pro App Settings below.
        :param Sequence[str] security_groups: The security groups.
        :param 'UserProfileUserSettingsSharingSettingsArgs' sharing_settings: The sharing settings. See Sharing Settings below.
        :param 'UserProfileUserSettingsTensorBoardAppSettingsArgs' tensor_board_app_settings: The TensorBoard app settings. See TensorBoard App Settings below.
        """
        pulumi.set(__self__, "execution_role", execution_role)
        if canvas_app_settings is not None:
            pulumi.set(__self__, "canvas_app_settings", canvas_app_settings)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if r_session_app_settings is not None:
            pulumi.set(__self__, "r_session_app_settings", r_session_app_settings)
        if r_studio_server_pro_app_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_app_settings", r_studio_server_pro_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharing_settings is not None:
            pulumi.set(__self__, "sharing_settings", sharing_settings)
        if tensor_board_app_settings is not None:
            pulumi.set(__self__, "tensor_board_app_settings", tensor_board_app_settings)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> str:
        """
        The execution role ARN for the user.
        """
        return pulumi.get(self, "execution_role")

    @property
    @pulumi.getter(name="canvasAppSettings")
    def canvas_app_settings(self) -> Optional['outputs.UserProfileUserSettingsCanvasAppSettings']:
        """
        The Canvas app settings. See Canvas App Settings below.
        """
        return pulumi.get(self, "canvas_app_settings")

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional['outputs.UserProfileUserSettingsJupyterServerAppSettings']:
        """
        The Jupyter server's app settings. See Jupyter Server App Settings below.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional['outputs.UserProfileUserSettingsKernelGatewayAppSettings']:
        """
        The kernel gateway app settings. See Kernel Gateway App Settings below.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @property
    @pulumi.getter(name="rSessionAppSettings")
    def r_session_app_settings(self) -> Optional['outputs.UserProfileUserSettingsRSessionAppSettings']:
        """
        The RSession app settings. See RSession App Settings below.
        """
        return pulumi.get(self, "r_session_app_settings")

    @property
    @pulumi.getter(name="rStudioServerProAppSettings")
    def r_studio_server_pro_app_settings(self) -> Optional['outputs.UserProfileUserSettingsRStudioServerProAppSettings']:
        """
        A collection of settings that configure user interaction with the RStudioServerPro app. See RStudio Server Pro App Settings below.
        """
        return pulumi.get(self, "r_studio_server_pro_app_settings")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        The security groups.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="sharingSettings")
    def sharing_settings(self) -> Optional['outputs.UserProfileUserSettingsSharingSettings']:
        """
        The sharing settings. See Sharing Settings below.
        """
        return pulumi.get(self, "sharing_settings")

    @property
    @pulumi.getter(name="tensorBoardAppSettings")
    def tensor_board_app_settings(self) -> Optional['outputs.UserProfileUserSettingsTensorBoardAppSettings']:
        """
        The TensorBoard app settings. See TensorBoard App Settings below.
        """
        return pulumi.get(self, "tensor_board_app_settings")


@pulumi.output_type
class UserProfileUserSettingsCanvasAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelRegisterSettings":
            suggest = "model_register_settings"
        elif key == "timeSeriesForecastingSettings":
            suggest = "time_series_forecasting_settings"
        elif key == "workspaceSettings":
            suggest = "workspace_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsCanvasAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsCanvasAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsCanvasAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model_register_settings: Optional['outputs.UserProfileUserSettingsCanvasAppSettingsModelRegisterSettings'] = None,
                 time_series_forecasting_settings: Optional['outputs.UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings'] = None,
                 workspace_settings: Optional['outputs.UserProfileUserSettingsCanvasAppSettingsWorkspaceSettings'] = None):
        """
        :param 'UserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsArgs' model_register_settings: The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
        :param 'UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs' time_series_forecasting_settings: Time series forecast settings for the Canvas app. see Time Series Forecasting Settings below.
        :param 'UserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsArgs' workspace_settings: The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
        """
        if model_register_settings is not None:
            pulumi.set(__self__, "model_register_settings", model_register_settings)
        if time_series_forecasting_settings is not None:
            pulumi.set(__self__, "time_series_forecasting_settings", time_series_forecasting_settings)
        if workspace_settings is not None:
            pulumi.set(__self__, "workspace_settings", workspace_settings)

    @property
    @pulumi.getter(name="modelRegisterSettings")
    def model_register_settings(self) -> Optional['outputs.UserProfileUserSettingsCanvasAppSettingsModelRegisterSettings']:
        """
        The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
        """
        return pulumi.get(self, "model_register_settings")

    @property
    @pulumi.getter(name="timeSeriesForecastingSettings")
    def time_series_forecasting_settings(self) -> Optional['outputs.UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings']:
        """
        Time series forecast settings for the Canvas app. see Time Series Forecasting Settings below.
        """
        return pulumi.get(self, "time_series_forecasting_settings")

    @property
    @pulumi.getter(name="workspaceSettings")
    def workspace_settings(self) -> Optional['outputs.UserProfileUserSettingsCanvasAppSettingsWorkspaceSettings']:
        """
        The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
        """
        return pulumi.get(self, "workspace_settings")


@pulumi.output_type
class UserProfileUserSettingsCanvasAppSettingsModelRegisterSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crossAccountModelRegisterRoleArn":
            suggest = "cross_account_model_register_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsCanvasAppSettingsModelRegisterSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsCanvasAppSettingsModelRegisterSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsCanvasAppSettingsModelRegisterSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cross_account_model_register_role_arn: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str cross_account_model_register_role_arn: The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
        :param str status: Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are `ENABLED` and `DISABLED`.
        """
        if cross_account_model_register_role_arn is not None:
            pulumi.set(__self__, "cross_account_model_register_role_arn", cross_account_model_register_role_arn)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="crossAccountModelRegisterRoleArn")
    def cross_account_model_register_role_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
        """
        return pulumi.get(self, "cross_account_model_register_role_arn")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "amazonForecastRoleArn":
            suggest = "amazon_forecast_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 amazon_forecast_role_arn: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str amazon_forecast_role_arn: The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the [AmazonSageMakerCanvasForecastAccess](https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-canvas.html#security-iam-awsmanpol-AmazonSageMakerCanvasForecastAccess) policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
        :param str status: Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are `ENABLED` and `DISABLED`.
        """
        if amazon_forecast_role_arn is not None:
            pulumi.set(__self__, "amazon_forecast_role_arn", amazon_forecast_role_arn)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="amazonForecastRoleArn")
    def amazon_forecast_role_arn(self) -> Optional[str]:
        """
        The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the [AmazonSageMakerCanvasForecastAccess](https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-canvas.html#security-iam-awsmanpol-AmazonSageMakerCanvasForecastAccess) policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
        """
        return pulumi.get(self, "amazon_forecast_role_arn")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class UserProfileUserSettingsCanvasAppSettingsWorkspaceSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3ArtifactPath":
            suggest = "s3_artifact_path"
        elif key == "s3KmsKeyId":
            suggest = "s3_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsCanvasAppSettingsWorkspaceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsCanvasAppSettingsWorkspaceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsCanvasAppSettingsWorkspaceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_artifact_path: Optional[str] = None,
                 s3_kms_key_id: Optional[str] = None):
        """
        :param str s3_artifact_path: The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
        :param str s3_kms_key_id: The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
        """
        if s3_artifact_path is not None:
            pulumi.set(__self__, "s3_artifact_path", s3_artifact_path)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)

    @property
    @pulumi.getter(name="s3ArtifactPath")
    def s3_artifact_path(self) -> Optional[str]:
        """
        The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
        """
        return pulumi.get(self, "s3_artifact_path")

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[str]:
        """
        The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")


@pulumi.output_type
class UserProfileUserSettingsJupyterServerAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeRepositories":
            suggest = "code_repositories"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"
        elif key == "lifecycleConfigArns":
            suggest = "lifecycle_config_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsJupyterServerAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsJupyterServerAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsJupyterServerAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_repositories: Optional[Sequence['outputs.UserProfileUserSettingsJupyterServerAppSettingsCodeRepository']] = None,
                 default_resource_spec: Optional['outputs.UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec'] = None,
                 lifecycle_config_arns: Optional[Sequence[str]] = None):
        """
        :param Sequence['UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs'] code_repositories: A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        :param 'UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param Sequence[str] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[Sequence['outputs.UserProfileUserSettingsJupyterServerAppSettingsCodeRepository']]:
        """
        A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        """
        return pulumi.get(self, "code_repositories")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[Sequence[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")


@pulumi.output_type
class UserProfileUserSettingsJupyterServerAppSettingsCodeRepository(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryUrl":
            suggest = "repository_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsJupyterServerAppSettingsCodeRepository. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsJupyterServerAppSettingsCodeRepository.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsJupyterServerAppSettingsCodeRepository.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_url: str):
        """
        :param str repository_url: The URL of the Git repository.
        """
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> str:
        """
        The URL of the Git repository.
        """
        return pulumi.get(self, "repository_url")


@pulumi.output_type
class UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type.
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class UserProfileUserSettingsKernelGatewayAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customImages":
            suggest = "custom_images"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"
        elif key == "lifecycleConfigArns":
            suggest = "lifecycle_config_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsKernelGatewayAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsKernelGatewayAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsKernelGatewayAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_images: Optional[Sequence['outputs.UserProfileUserSettingsKernelGatewayAppSettingsCustomImage']] = None,
                 default_resource_spec: Optional['outputs.UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec'] = None,
                 lifecycle_config_arns: Optional[Sequence[str]] = None):
        """
        :param Sequence['UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs'] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param 'UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param Sequence[str] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[Sequence['outputs.UserProfileUserSettingsKernelGatewayAppSettingsCustomImage']]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[Sequence[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")


@pulumi.output_type
class UserProfileUserSettingsKernelGatewayAppSettingsCustomImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appImageConfigName":
            suggest = "app_image_config_name"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "imageVersionNumber":
            suggest = "image_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsKernelGatewayAppSettingsCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsKernelGatewayAppSettingsCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsKernelGatewayAppSettingsCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_image_config_name: str,
                 image_name: str,
                 image_version_number: Optional[int] = None):
        """
        :param str app_image_config_name: The name of the App Image Config.
        :param str image_name: The name of the Custom Image.
        :param int image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> str:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[int]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")


@pulumi.output_type
class UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type.
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class UserProfileUserSettingsRSessionAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customImages":
            suggest = "custom_images"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsRSessionAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsRSessionAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsRSessionAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_images: Optional[Sequence['outputs.UserProfileUserSettingsRSessionAppSettingsCustomImage']] = None,
                 default_resource_spec: Optional['outputs.UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpec'] = None):
        """
        :param Sequence['UserProfileUserSettingsRSessionAppSettingsCustomImageArgs'] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param 'UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[Sequence['outputs.UserProfileUserSettingsRSessionAppSettingsCustomImage']]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class UserProfileUserSettingsRSessionAppSettingsCustomImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appImageConfigName":
            suggest = "app_image_config_name"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "imageVersionNumber":
            suggest = "image_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsRSessionAppSettingsCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsRSessionAppSettingsCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsRSessionAppSettingsCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_image_config_name: str,
                 image_name: str,
                 image_version_number: Optional[int] = None):
        """
        :param str app_image_config_name: The name of the App Image Config.
        :param str image_name: The name of the Custom Image.
        :param int image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> str:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[int]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")


@pulumi.output_type
class UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type.
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class UserProfileUserSettingsRStudioServerProAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessStatus":
            suggest = "access_status"
        elif key == "userGroup":
            suggest = "user_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsRStudioServerProAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsRStudioServerProAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsRStudioServerProAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_status: Optional[str] = None,
                 user_group: Optional[str] = None):
        """
        :param str access_status: Indicates whether the current user has access to the RStudioServerPro app. Valid values are `ENABLED` and `DISABLED`.
        :param str user_group: The level of permissions that the user has within the RStudioServerPro app. This value defaults to `R_STUDIO_USER`. The `R_STUDIO_ADMIN` value allows the user access to the RStudio Administrative Dashboard. Valid values are `R_STUDIO_USER` and `R_STUDIO_ADMIN`.
        """
        if access_status is not None:
            pulumi.set(__self__, "access_status", access_status)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)

    @property
    @pulumi.getter(name="accessStatus")
    def access_status(self) -> Optional[str]:
        """
        Indicates whether the current user has access to the RStudioServerPro app. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "access_status")

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[str]:
        """
        The level of permissions that the user has within the RStudioServerPro app. This value defaults to `R_STUDIO_USER`. The `R_STUDIO_ADMIN` value allows the user access to the RStudio Administrative Dashboard. Valid values are `R_STUDIO_USER` and `R_STUDIO_ADMIN`.
        """
        return pulumi.get(self, "user_group")


@pulumi.output_type
class UserProfileUserSettingsSharingSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notebookOutputOption":
            suggest = "notebook_output_option"
        elif key == "s3KmsKeyId":
            suggest = "s3_kms_key_id"
        elif key == "s3OutputPath":
            suggest = "s3_output_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsSharingSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsSharingSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsSharingSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notebook_output_option: Optional[str] = None,
                 s3_kms_key_id: Optional[str] = None,
                 s3_output_path: Optional[str] = None):
        """
        :param str notebook_output_option: Whether to include the notebook cell output when sharing the notebook. The default is `Disabled`. Valid values are `Allowed` and `Disabled`.
        :param str s3_kms_key_id: When `notebook_output_option` is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        :param str s3_output_path: When `notebook_output_option` is Allowed, the Amazon S3 bucket used to save the notebook cell output.
        """
        if notebook_output_option is not None:
            pulumi.set(__self__, "notebook_output_option", notebook_output_option)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="notebookOutputOption")
    def notebook_output_option(self) -> Optional[str]:
        """
        Whether to include the notebook cell output when sharing the notebook. The default is `Disabled`. Valid values are `Allowed` and `Disabled`.
        """
        return pulumi.get(self, "notebook_output_option")

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[str]:
        """
        When `notebook_output_option` is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[str]:
        """
        When `notebook_output_option` is Allowed, the Amazon S3 bucket used to save the notebook cell output.
        """
        return pulumi.get(self, "s3_output_path")


@pulumi.output_type
class UserProfileUserSettingsTensorBoardAppSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsTensorBoardAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsTensorBoardAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsTensorBoardAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_resource_spec: 'outputs.UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpec'):
        """
        :param 'UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> 'outputs.UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpec':
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sagemakerImageArn":
            suggest = "sagemaker_image_arn"
        elif key == "sagemakerImageVersionArn":
            suggest = "sagemaker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional[str] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sagemaker_image_arn: Optional[str] = None,
                 sagemaker_image_version_arn: Optional[str] = None):
        """
        :param str instance_type: The instance type.
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param str sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param str sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")


@pulumi.output_type
class WorkforceCognitoConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "userPool":
            suggest = "user_pool"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkforceCognitoConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkforceCognitoConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkforceCognitoConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 user_pool: str):
        """
        :param str client_id: The client ID for your Amazon Cognito user pool.
        :param str user_pool: ID for your Amazon Cognito user pool.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "user_pool", user_pool)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID for your Amazon Cognito user pool.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="userPool")
    def user_pool(self) -> str:
        """
        ID for your Amazon Cognito user pool.
        """
        return pulumi.get(self, "user_pool")


@pulumi.output_type
class WorkforceOidcConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationEndpoint":
            suggest = "authorization_endpoint"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "jwksUri":
            suggest = "jwks_uri"
        elif key == "logoutEndpoint":
            suggest = "logout_endpoint"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "userInfoEndpoint":
            suggest = "user_info_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkforceOidcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkforceOidcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkforceOidcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_endpoint: str,
                 client_id: str,
                 client_secret: str,
                 issuer: str,
                 jwks_uri: str,
                 logout_endpoint: str,
                 token_endpoint: str,
                 user_info_endpoint: str):
        """
        :param str authorization_endpoint: The OIDC IdP authorization endpoint used to configure your private workforce.
        :param str client_id: The OIDC IdP client ID used to configure your private workforce.
        :param str client_secret: The OIDC IdP client secret used to configure your private workforce.
        :param str issuer: The OIDC IdP issuer used to configure your private workforce.
        :param str jwks_uri: The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
        :param str logout_endpoint: The OIDC IdP logout endpoint used to configure your private workforce.
        :param str token_endpoint: The OIDC IdP token endpoint used to configure your private workforce.
        :param str user_info_endpoint: The OIDC IdP user information endpoint used to configure your private workforce.
        """
        pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "jwks_uri", jwks_uri)
        pulumi.set(__self__, "logout_endpoint", logout_endpoint)
        pulumi.set(__self__, "token_endpoint", token_endpoint)
        pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> str:
        """
        The OIDC IdP authorization endpoint used to configure your private workforce.
        """
        return pulumi.get(self, "authorization_endpoint")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The OIDC IdP client ID used to configure your private workforce.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        The OIDC IdP client secret used to configure your private workforce.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        """
        The OIDC IdP issuer used to configure your private workforce.
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="jwksUri")
    def jwks_uri(self) -> str:
        """
        The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
        """
        return pulumi.get(self, "jwks_uri")

    @property
    @pulumi.getter(name="logoutEndpoint")
    def logout_endpoint(self) -> str:
        """
        The OIDC IdP logout endpoint used to configure your private workforce.
        """
        return pulumi.get(self, "logout_endpoint")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> str:
        """
        The OIDC IdP token endpoint used to configure your private workforce.
        """
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> str:
        """
        The OIDC IdP user information endpoint used to configure your private workforce.
        """
        return pulumi.get(self, "user_info_endpoint")


@pulumi.output_type
class WorkforceSourceIpConfig(dict):
    def __init__(__self__, *,
                 cidrs: Sequence[str]):
        """
        :param Sequence[str] cidrs: A list of up to 10 CIDR values.
        """
        pulumi.set(__self__, "cidrs", cidrs)

    @property
    @pulumi.getter
    def cidrs(self) -> Sequence[str]:
        """
        A list of up to 10 CIDR values.
        """
        return pulumi.get(self, "cidrs")


@pulumi.output_type
class WorkforceWorkforceVpcConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "vpcEndpointId":
            suggest = "vpc_endpoint_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkforceWorkforceVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkforceWorkforceVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkforceWorkforceVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Optional[Sequence[str]] = None,
                 subnets: Optional[Sequence[str]] = None,
                 vpc_endpoint_id: Optional[str] = None,
                 vpc_id: Optional[str] = None):
        """
        :param Sequence[str] security_group_ids: The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
        :param Sequence[str] subnets: The ID of the subnets in the VPC that you want to connect.
        :param str vpc_id: The ID of the VPC that the workforce uses for communication.
        """
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if vpc_endpoint_id is not None:
            pulumi.set(__self__, "vpc_endpoint_id", vpc_endpoint_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[str]]:
        """
        The ID of the subnets in the VPC that you want to connect.
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="vpcEndpointId")
    def vpc_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "vpc_endpoint_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        The ID of the VPC that the workforce uses for communication.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class WorkteamMemberDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cognitoMemberDefinition":
            suggest = "cognito_member_definition"
        elif key == "oidcMemberDefinition":
            suggest = "oidc_member_definition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkteamMemberDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkteamMemberDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkteamMemberDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cognito_member_definition: Optional['outputs.WorkteamMemberDefinitionCognitoMemberDefinition'] = None,
                 oidc_member_definition: Optional['outputs.WorkteamMemberDefinitionOidcMemberDefinition'] = None):
        """
        :param 'WorkteamMemberDefinitionCognitoMemberDefinitionArgs' cognito_member_definition: The Amazon Cognito user group that is part of the work team. See Cognito Member Definition details below.
        :param 'WorkteamMemberDefinitionOidcMemberDefinitionArgs' oidc_member_definition: A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. See Cognito Member Definition details below.
        """
        if cognito_member_definition is not None:
            pulumi.set(__self__, "cognito_member_definition", cognito_member_definition)
        if oidc_member_definition is not None:
            pulumi.set(__self__, "oidc_member_definition", oidc_member_definition)

    @property
    @pulumi.getter(name="cognitoMemberDefinition")
    def cognito_member_definition(self) -> Optional['outputs.WorkteamMemberDefinitionCognitoMemberDefinition']:
        """
        The Amazon Cognito user group that is part of the work team. See Cognito Member Definition details below.
        """
        return pulumi.get(self, "cognito_member_definition")

    @property
    @pulumi.getter(name="oidcMemberDefinition")
    def oidc_member_definition(self) -> Optional['outputs.WorkteamMemberDefinitionOidcMemberDefinition']:
        """
        A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. See Cognito Member Definition details below.
        """
        return pulumi.get(self, "oidc_member_definition")


@pulumi.output_type
class WorkteamMemberDefinitionCognitoMemberDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "userGroup":
            suggest = "user_group"
        elif key == "userPool":
            suggest = "user_pool"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkteamMemberDefinitionCognitoMemberDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkteamMemberDefinitionCognitoMemberDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkteamMemberDefinitionCognitoMemberDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 user_group: str,
                 user_pool: str):
        """
        :param str client_id: An identifier for an application client. You must create the app client ID using Amazon Cognito.
        :param str user_group: An identifier for a user group.
        :param str user_pool: An identifier for a user pool. The user pool must be in the same region as the service that you are calling.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "user_group", user_group)
        pulumi.set(__self__, "user_pool", user_pool)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        An identifier for an application client. You must create the app client ID using Amazon Cognito.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> str:
        """
        An identifier for a user group.
        """
        return pulumi.get(self, "user_group")

    @property
    @pulumi.getter(name="userPool")
    def user_pool(self) -> str:
        """
        An identifier for a user pool. The user pool must be in the same region as the service that you are calling.
        """
        return pulumi.get(self, "user_pool")


@pulumi.output_type
class WorkteamMemberDefinitionOidcMemberDefinition(dict):
    def __init__(__self__, *,
                 groups: Sequence[str]):
        """
        :param Sequence[str] groups: A list of comma separated strings that identifies user groups in your OIDC IdP. Each user group is made up of a group of private workers.
        """
        pulumi.set(__self__, "groups", groups)

    @property
    @pulumi.getter
    def groups(self) -> Sequence[str]:
        """
        A list of comma separated strings that identifies user groups in your OIDC IdP. Each user group is made up of a group of private workers.
        """
        return pulumi.get(self, "groups")


@pulumi.output_type
class WorkteamNotificationConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationTopicArn":
            suggest = "notification_topic_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkteamNotificationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkteamNotificationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkteamNotificationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_topic_arn: Optional[str] = None):
        """
        :param str notification_topic_arn: The ARN for the SNS topic to which notifications should be published.
        """
        if notification_topic_arn is not None:
            pulumi.set(__self__, "notification_topic_arn", notification_topic_arn)

    @property
    @pulumi.getter(name="notificationTopicArn")
    def notification_topic_arn(self) -> Optional[str]:
        """
        The ARN for the SNS topic to which notifications should be published.
        """
        return pulumi.get(self, "notification_topic_arn")


