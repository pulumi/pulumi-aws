# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AppImageConfigKernelGatewayImageConfigArgs',
    'AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs',
    'AppImageConfigKernelGatewayImageConfigKernelSpecArgs',
    'AppResourceSpecArgs',
    'CodeRepositoryGitConfigArgs',
    'DeviceDeviceArgs',
    'DeviceFleetOutputConfigArgs',
    'DomainDefaultSpaceSettingsArgs',
    'DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs',
    'DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs',
    'DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs',
    'DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs',
    'DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs',
    'DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs',
    'DomainDefaultUserSettingsArgs',
    'DomainDefaultUserSettingsCanvasAppSettingsArgs',
    'DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs',
    'DomainDefaultUserSettingsJupyterServerAppSettingsArgs',
    'DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs',
    'DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs',
    'DomainDefaultUserSettingsKernelGatewayAppSettingsArgs',
    'DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs',
    'DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs',
    'DomainDefaultUserSettingsRSessionAppSettingsArgs',
    'DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs',
    'DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs',
    'DomainDefaultUserSettingsSharingSettingsArgs',
    'DomainDefaultUserSettingsTensorBoardAppSettingsArgs',
    'DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs',
    'DomainDomainSettingsArgs',
    'DomainRetentionPolicyArgs',
    'EndpointConfigurationAsyncInferenceConfigArgs',
    'EndpointConfigurationAsyncInferenceConfigClientConfigArgs',
    'EndpointConfigurationAsyncInferenceConfigOutputConfigArgs',
    'EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs',
    'EndpointConfigurationDataCaptureConfigArgs',
    'EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs',
    'EndpointConfigurationDataCaptureConfigCaptureOptionArgs',
    'EndpointConfigurationProductionVariantArgs',
    'EndpointConfigurationProductionVariantCoreDumpConfigArgs',
    'EndpointConfigurationProductionVariantServerlessConfigArgs',
    'EndpointConfigurationShadowProductionVariantArgs',
    'EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs',
    'EndpointConfigurationShadowProductionVariantServerlessConfigArgs',
    'EndpointDeploymentConfigArgs',
    'EndpointDeploymentConfigAutoRollbackConfigurationArgs',
    'EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyArgs',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs',
    'FeatureGroupFeatureDefinitionArgs',
    'FeatureGroupOfflineStoreConfigArgs',
    'FeatureGroupOfflineStoreConfigDataCatalogConfigArgs',
    'FeatureGroupOfflineStoreConfigS3StorageConfigArgs',
    'FeatureGroupOnlineStoreConfigArgs',
    'FeatureGroupOnlineStoreConfigSecurityConfigArgs',
    'FlowDefinitionHumanLoopActivationConfigArgs',
    'FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs',
    'FlowDefinitionHumanLoopConfigArgs',
    'FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs',
    'FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs',
    'FlowDefinitionHumanLoopRequestSourceArgs',
    'FlowDefinitionOutputConfigArgs',
    'HumanTaskUIUiTemplateArgs',
    'ModelContainerArgs',
    'ModelContainerImageConfigArgs',
    'ModelContainerImageConfigRepositoryAuthConfigArgs',
    'ModelInferenceExecutionConfigArgs',
    'ModelPrimaryContainerArgs',
    'ModelPrimaryContainerImageConfigArgs',
    'ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs',
    'ModelVpcConfigArgs',
    'NotebookInstanceInstanceMetadataServiceConfigurationArgs',
    'ProjectServiceCatalogProvisioningDetailsArgs',
    'ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs',
    'SpaceSpaceSettingsArgs',
    'SpaceSpaceSettingsJupyterServerAppSettingsArgs',
    'SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs',
    'SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs',
    'SpaceSpaceSettingsKernelGatewayAppSettingsArgs',
    'SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs',
    'SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs',
    'UserProfileUserSettingsArgs',
    'UserProfileUserSettingsCanvasAppSettingsArgs',
    'UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs',
    'UserProfileUserSettingsJupyterServerAppSettingsArgs',
    'UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs',
    'UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs',
    'UserProfileUserSettingsKernelGatewayAppSettingsArgs',
    'UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs',
    'UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs',
    'UserProfileUserSettingsRSessionAppSettingsArgs',
    'UserProfileUserSettingsRSessionAppSettingsCustomImageArgs',
    'UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs',
    'UserProfileUserSettingsSharingSettingsArgs',
    'UserProfileUserSettingsTensorBoardAppSettingsArgs',
    'UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs',
    'WorkforceCognitoConfigArgs',
    'WorkforceOidcConfigArgs',
    'WorkforceSourceIpConfigArgs',
    'WorkforceWorkforceVpcConfigArgs',
    'WorkteamMemberDefinitionArgs',
    'WorkteamMemberDefinitionCognitoMemberDefinitionArgs',
    'WorkteamMemberDefinitionOidcMemberDefinitionArgs',
    'WorkteamNotificationConfigurationArgs',
]

@pulumi.input_type
class AppImageConfigKernelGatewayImageConfigArgs:
    def __init__(__self__, *,
                 kernel_spec: pulumi.Input['AppImageConfigKernelGatewayImageConfigKernelSpecArgs'],
                 file_system_config: Optional[pulumi.Input['AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs']] = None):
        pulumi.set(__self__, "kernel_spec", kernel_spec)
        if file_system_config is not None:
            pulumi.set(__self__, "file_system_config", file_system_config)

    @property
    @pulumi.getter(name="kernelSpec")
    def kernel_spec(self) -> pulumi.Input['AppImageConfigKernelGatewayImageConfigKernelSpecArgs']:
        return pulumi.get(self, "kernel_spec")

    @kernel_spec.setter
    def kernel_spec(self, value: pulumi.Input['AppImageConfigKernelGatewayImageConfigKernelSpecArgs']):
        pulumi.set(self, "kernel_spec", value)

    @property
    @pulumi.getter(name="fileSystemConfig")
    def file_system_config(self) -> Optional[pulumi.Input['AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs']]:
        return pulumi.get(self, "file_system_config")

    @file_system_config.setter
    def file_system_config(self, value: Optional[pulumi.Input['AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs']]):
        pulumi.set(self, "file_system_config", value)


@pulumi.input_type
class AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs:
    def __init__(__self__, *,
                 default_gid: Optional[pulumi.Input[int]] = None,
                 default_uid: Optional[pulumi.Input[int]] = None,
                 mount_path: Optional[pulumi.Input[str]] = None):
        if default_gid is not None:
            pulumi.set(__self__, "default_gid", default_gid)
        if default_uid is not None:
            pulumi.set(__self__, "default_uid", default_uid)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)

    @property
    @pulumi.getter(name="defaultGid")
    def default_gid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_gid")

    @default_gid.setter
    def default_gid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_gid", value)

    @property
    @pulumi.getter(name="defaultUid")
    def default_uid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_uid")

    @default_uid.setter
    def default_uid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_uid", value)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)


@pulumi.input_type
class AppImageConfigKernelGatewayImageConfigKernelSpecArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class AppResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class CodeRepositoryGitConfigArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str],
                 branch: Optional[pulumi.Input[str]] = None,
                 secret_arn: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "repository_url", repository_url)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if secret_arn is not None:
            pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_arn")

    @secret_arn.setter
    def secret_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_arn", value)


@pulumi.input_type
class DeviceDeviceArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 iot_thing_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "device_name", device_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iot_thing_name is not None:
            pulumi.set(__self__, "iot_thing_name", iot_thing_name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="iotThingName")
    def iot_thing_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iot_thing_name")

    @iot_thing_name.setter
    def iot_thing_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iot_thing_name", value)


@pulumi.input_type
class DeviceFleetOutputConfigArgs:
    def __init__(__self__, *,
                 s3_output_location: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_output_location", s3_output_location)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3OutputLocation")
    def s3_output_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_output_location")

    @s3_output_location.setter
    def s3_output_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_output_location", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsArgs:
    def __init__(__self__, *,
                 execution_role: pulumi.Input[str],
                 jupyter_server_app_settings: Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs']] = None,
                 kernel_gateway_app_settings: Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "execution_role", execution_role)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: pulumi.Input[str]):
        pulumi.set(self, "execution_role", value)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs']]:
        return pulumi.get(self, "jupyter_server_app_settings")

    @jupyter_server_app_settings.setter
    def jupyter_server_app_settings(self, value: Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs']]):
        pulumi.set(self, "jupyter_server_app_settings", value)

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs']]:
        return pulumi.get(self, "kernel_gateway_app_settings")

    @kernel_gateway_app_settings.setter
    def kernel_gateway_app_settings(self, value: Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs']]):
        pulumi.set(self, "kernel_gateway_app_settings", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs:
    def __init__(__self__, *,
                 code_repositories: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]:
        return pulumi.get(self, "code_repositories")

    @code_repositories.setter
    def code_repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]):
        pulumi.set(self, "code_repositories", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str]):
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]]:
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDefaultUserSettingsArgs:
    def __init__(__self__, *,
                 execution_role: pulumi.Input[str],
                 canvas_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsArgs']] = None,
                 jupyter_server_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsArgs']] = None,
                 kernel_gateway_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsArgs']] = None,
                 r_session_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sharing_settings: Optional[pulumi.Input['DomainDefaultUserSettingsSharingSettingsArgs']] = None,
                 tensor_board_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsArgs']] = None):
        pulumi.set(__self__, "execution_role", execution_role)
        if canvas_app_settings is not None:
            pulumi.set(__self__, "canvas_app_settings", canvas_app_settings)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if r_session_app_settings is not None:
            pulumi.set(__self__, "r_session_app_settings", r_session_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharing_settings is not None:
            pulumi.set(__self__, "sharing_settings", sharing_settings)
        if tensor_board_app_settings is not None:
            pulumi.set(__self__, "tensor_board_app_settings", tensor_board_app_settings)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: pulumi.Input[str]):
        pulumi.set(self, "execution_role", value)

    @property
    @pulumi.getter(name="canvasAppSettings")
    def canvas_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsArgs']]:
        return pulumi.get(self, "canvas_app_settings")

    @canvas_app_settings.setter
    def canvas_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsArgs']]):
        pulumi.set(self, "canvas_app_settings", value)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsArgs']]:
        return pulumi.get(self, "jupyter_server_app_settings")

    @jupyter_server_app_settings.setter
    def jupyter_server_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsArgs']]):
        pulumi.set(self, "jupyter_server_app_settings", value)

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsArgs']]:
        return pulumi.get(self, "kernel_gateway_app_settings")

    @kernel_gateway_app_settings.setter
    def kernel_gateway_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsArgs']]):
        pulumi.set(self, "kernel_gateway_app_settings", value)

    @property
    @pulumi.getter(name="rSessionAppSettings")
    def r_session_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsArgs']]:
        return pulumi.get(self, "r_session_app_settings")

    @r_session_app_settings.setter
    def r_session_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsArgs']]):
        pulumi.set(self, "r_session_app_settings", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="sharingSettings")
    def sharing_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsSharingSettingsArgs']]:
        return pulumi.get(self, "sharing_settings")

    @sharing_settings.setter
    def sharing_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsSharingSettingsArgs']]):
        pulumi.set(self, "sharing_settings", value)

    @property
    @pulumi.getter(name="tensorBoardAppSettings")
    def tensor_board_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsArgs']]:
        return pulumi.get(self, "tensor_board_app_settings")

    @tensor_board_app_settings.setter
    def tensor_board_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsArgs']]):
        pulumi.set(self, "tensor_board_app_settings", value)


@pulumi.input_type
class DomainDefaultUserSettingsCanvasAppSettingsArgs:
    def __init__(__self__, *,
                 time_series_forecasting_settings: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']] = None):
        if time_series_forecasting_settings is not None:
            pulumi.set(__self__, "time_series_forecasting_settings", time_series_forecasting_settings)

    @property
    @pulumi.getter(name="timeSeriesForecastingSettings")
    def time_series_forecasting_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']]:
        return pulumi.get(self, "time_series_forecasting_settings")

    @time_series_forecasting_settings.setter
    def time_series_forecasting_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']]):
        pulumi.set(self, "time_series_forecasting_settings", value)


@pulumi.input_type
class DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs:
    def __init__(__self__, *,
                 amazon_forecast_role_arn: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if amazon_forecast_role_arn is not None:
            pulumi.set(__self__, "amazon_forecast_role_arn", amazon_forecast_role_arn)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="amazonForecastRoleArn")
    def amazon_forecast_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "amazon_forecast_role_arn")

    @amazon_forecast_role_arn.setter
    def amazon_forecast_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amazon_forecast_role_arn", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DomainDefaultUserSettingsJupyterServerAppSettingsArgs:
    def __init__(__self__, *,
                 code_repositories: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]:
        return pulumi.get(self, "code_repositories")

    @code_repositories.setter
    def code_repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]):
        pulumi.set(self, "code_repositories", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str]):
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)


@pulumi.input_type
class DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDefaultUserSettingsKernelGatewayAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]]:
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDefaultUserSettingsRSessionAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']] = None):
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs']]]]:
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDefaultUserSettingsSharingSettingsArgs:
    def __init__(__self__, *,
                 notebook_output_option: Optional[pulumi.Input[str]] = None,
                 s3_kms_key_id: Optional[pulumi.Input[str]] = None,
                 s3_output_path: Optional[pulumi.Input[str]] = None):
        if notebook_output_option is not None:
            pulumi.set(__self__, "notebook_output_option", notebook_output_option)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="notebookOutputOption")
    def notebook_output_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notebook_output_option")

    @notebook_output_option.setter
    def notebook_output_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notebook_output_option", value)

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_kms_key_id")

    @s3_kms_key_id.setter
    def s3_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_kms_key_id", value)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_output_path", value)


@pulumi.input_type
class DomainDefaultUserSettingsTensorBoardAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']] = None):
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDomainSettingsArgs:
    def __init__(__self__, *,
                 execution_role_identity_config: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if execution_role_identity_config is not None:
            pulumi.set(__self__, "execution_role_identity_config", execution_role_identity_config)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="executionRoleIdentityConfig")
    def execution_role_identity_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "execution_role_identity_config")

    @execution_role_identity_config.setter
    def execution_role_identity_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_role_identity_config", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)


@pulumi.input_type
class DomainRetentionPolicyArgs:
    def __init__(__self__, *,
                 home_efs_file_system: Optional[pulumi.Input[str]] = None):
        if home_efs_file_system is not None:
            pulumi.set(__self__, "home_efs_file_system", home_efs_file_system)

    @property
    @pulumi.getter(name="homeEfsFileSystem")
    def home_efs_file_system(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "home_efs_file_system")

    @home_efs_file_system.setter
    def home_efs_file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_efs_file_system", value)


@pulumi.input_type
class EndpointConfigurationAsyncInferenceConfigArgs:
    def __init__(__self__, *,
                 output_config: pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigArgs'],
                 client_config: Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigClientConfigArgs']] = None):
        pulumi.set(__self__, "output_config", output_config)
        if client_config is not None:
            pulumi.set(__self__, "client_config", client_config)

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigArgs']:
        return pulumi.get(self, "output_config")

    @output_config.setter
    def output_config(self, value: pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigArgs']):
        pulumi.set(self, "output_config", value)

    @property
    @pulumi.getter(name="clientConfig")
    def client_config(self) -> Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigClientConfigArgs']]:
        return pulumi.get(self, "client_config")

    @client_config.setter
    def client_config(self, value: Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigClientConfigArgs']]):
        pulumi.set(self, "client_config", value)


@pulumi.input_type
class EndpointConfigurationAsyncInferenceConfigClientConfigArgs:
    def __init__(__self__, *,
                 max_concurrent_invocations_per_instance: Optional[pulumi.Input[int]] = None):
        if max_concurrent_invocations_per_instance is not None:
            pulumi.set(__self__, "max_concurrent_invocations_per_instance", max_concurrent_invocations_per_instance)

    @property
    @pulumi.getter(name="maxConcurrentInvocationsPerInstance")
    def max_concurrent_invocations_per_instance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_invocations_per_instance")

    @max_concurrent_invocations_per_instance.setter
    def max_concurrent_invocations_per_instance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_invocations_per_instance", value)


@pulumi.input_type
class EndpointConfigurationAsyncInferenceConfigOutputConfigArgs:
    def __init__(__self__, *,
                 s3_output_path: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 notification_config: Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs']] = None):
        pulumi.set(__self__, "s3_output_path", s3_output_path)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if notification_config is not None:
            pulumi.set(__self__, "notification_config", notification_config)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_output_path", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="notificationConfig")
    def notification_config(self) -> Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs']]:
        return pulumi.get(self, "notification_config")

    @notification_config.setter
    def notification_config(self, value: Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs']]):
        pulumi.set(self, "notification_config", value)


@pulumi.input_type
class EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs:
    def __init__(__self__, *,
                 error_topic: Optional[pulumi.Input[str]] = None,
                 success_topic: Optional[pulumi.Input[str]] = None):
        if error_topic is not None:
            pulumi.set(__self__, "error_topic", error_topic)
        if success_topic is not None:
            pulumi.set(__self__, "success_topic", success_topic)

    @property
    @pulumi.getter(name="errorTopic")
    def error_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_topic")

    @error_topic.setter
    def error_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_topic", value)

    @property
    @pulumi.getter(name="successTopic")
    def success_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_topic")

    @success_topic.setter
    def success_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_topic", value)


@pulumi.input_type
class EndpointConfigurationDataCaptureConfigArgs:
    def __init__(__self__, *,
                 capture_options: pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureOptionArgs']]],
                 destination_s3_uri: pulumi.Input[str],
                 initial_sampling_percentage: pulumi.Input[int],
                 capture_content_type_header: Optional[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs']] = None,
                 enable_capture: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "capture_options", capture_options)
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        pulumi.set(__self__, "initial_sampling_percentage", initial_sampling_percentage)
        if capture_content_type_header is not None:
            pulumi.set(__self__, "capture_content_type_header", capture_content_type_header)
        if enable_capture is not None:
            pulumi.set(__self__, "enable_capture", enable_capture)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="captureOptions")
    def capture_options(self) -> pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureOptionArgs']]]:
        return pulumi.get(self, "capture_options")

    @capture_options.setter
    def capture_options(self, value: pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureOptionArgs']]]):
        pulumi.set(self, "capture_options", value)

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_s3_uri")

    @destination_s3_uri.setter
    def destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_s3_uri", value)

    @property
    @pulumi.getter(name="initialSamplingPercentage")
    def initial_sampling_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "initial_sampling_percentage")

    @initial_sampling_percentage.setter
    def initial_sampling_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "initial_sampling_percentage", value)

    @property
    @pulumi.getter(name="captureContentTypeHeader")
    def capture_content_type_header(self) -> Optional[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs']]:
        return pulumi.get(self, "capture_content_type_header")

    @capture_content_type_header.setter
    def capture_content_type_header(self, value: Optional[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs']]):
        pulumi.set(self, "capture_content_type_header", value)

    @property
    @pulumi.getter(name="enableCapture")
    def enable_capture(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_capture")

    @enable_capture.setter
    def enable_capture(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_capture", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs:
    def __init__(__self__, *,
                 csv_content_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_content_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if csv_content_types is not None:
            pulumi.set(__self__, "csv_content_types", csv_content_types)
        if json_content_types is not None:
            pulumi.set(__self__, "json_content_types", json_content_types)

    @property
    @pulumi.getter(name="csvContentTypes")
    def csv_content_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "csv_content_types")

    @csv_content_types.setter
    def csv_content_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "csv_content_types", value)

    @property
    @pulumi.getter(name="jsonContentTypes")
    def json_content_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "json_content_types")

    @json_content_types.setter
    def json_content_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_content_types", value)


@pulumi.input_type
class EndpointConfigurationDataCaptureConfigCaptureOptionArgs:
    def __init__(__self__, *,
                 capture_mode: pulumi.Input[str]):
        pulumi.set(__self__, "capture_mode", capture_mode)

    @property
    @pulumi.getter(name="captureMode")
    def capture_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "capture_mode")

    @capture_mode.setter
    def capture_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "capture_mode", value)


@pulumi.input_type
class EndpointConfigurationProductionVariantArgs:
    def __init__(__self__, *,
                 model_name: pulumi.Input[str],
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 container_startup_health_check_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 core_dump_config: Optional[pulumi.Input['EndpointConfigurationProductionVariantCoreDumpConfigArgs']] = None,
                 initial_instance_count: Optional[pulumi.Input[int]] = None,
                 initial_variant_weight: Optional[pulumi.Input[float]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 model_data_download_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 serverless_config: Optional[pulumi.Input['EndpointConfigurationProductionVariantServerlessConfigArgs']] = None,
                 variant_name: Optional[pulumi.Input[str]] = None,
                 volume_size_in_gb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "model_name", model_name)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if container_startup_health_check_timeout_in_seconds is not None:
            pulumi.set(__self__, "container_startup_health_check_timeout_in_seconds", container_startup_health_check_timeout_in_seconds)
        if core_dump_config is not None:
            pulumi.set(__self__, "core_dump_config", core_dump_config)
        if initial_instance_count is not None:
            pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        if initial_variant_weight is not None:
            pulumi.set(__self__, "initial_variant_weight", initial_variant_weight)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if model_data_download_timeout_in_seconds is not None:
            pulumi.set(__self__, "model_data_download_timeout_in_seconds", model_data_download_timeout_in_seconds)
        if serverless_config is not None:
            pulumi.set(__self__, "serverless_config", serverless_config)
        if variant_name is not None:
            pulumi.set(__self__, "variant_name", variant_name)
        if volume_size_in_gb is not None:
            pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "model_name")

    @model_name.setter
    def model_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_name", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter(name="containerStartupHealthCheckTimeoutInSeconds")
    def container_startup_health_check_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "container_startup_health_check_timeout_in_seconds")

    @container_startup_health_check_timeout_in_seconds.setter
    def container_startup_health_check_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_startup_health_check_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="coreDumpConfig")
    def core_dump_config(self) -> Optional[pulumi.Input['EndpointConfigurationProductionVariantCoreDumpConfigArgs']]:
        return pulumi.get(self, "core_dump_config")

    @core_dump_config.setter
    def core_dump_config(self, value: Optional[pulumi.Input['EndpointConfigurationProductionVariantCoreDumpConfigArgs']]):
        pulumi.set(self, "core_dump_config", value)

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_instance_count")

    @initial_instance_count.setter
    def initial_instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_instance_count", value)

    @property
    @pulumi.getter(name="initialVariantWeight")
    def initial_variant_weight(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "initial_variant_weight")

    @initial_variant_weight.setter
    def initial_variant_weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "initial_variant_weight", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="modelDataDownloadTimeoutInSeconds")
    def model_data_download_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "model_data_download_timeout_in_seconds")

    @model_data_download_timeout_in_seconds.setter
    def model_data_download_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "model_data_download_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="serverlessConfig")
    def serverless_config(self) -> Optional[pulumi.Input['EndpointConfigurationProductionVariantServerlessConfigArgs']]:
        return pulumi.get(self, "serverless_config")

    @serverless_config.setter
    def serverless_config(self, value: Optional[pulumi.Input['EndpointConfigurationProductionVariantServerlessConfigArgs']]):
        pulumi.set(self, "serverless_config", value)

    @property
    @pulumi.getter(name="variantName")
    def variant_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variant_name")

    @variant_name.setter
    def variant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variant_name", value)

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size_in_gb", value)


@pulumi.input_type
class EndpointConfigurationProductionVariantCoreDumpConfigArgs:
    def __init__(__self__, *,
                 destination_s3_uri: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_s3_uri")

    @destination_s3_uri.setter
    def destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_s3_uri", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class EndpointConfigurationProductionVariantServerlessConfigArgs:
    def __init__(__self__, *,
                 max_concurrency: pulumi.Input[int],
                 memory_size_in_mb: pulumi.Input[int]):
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "memory_size_in_mb", memory_size_in_mb)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="memorySizeInMb")
    def memory_size_in_mb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "memory_size_in_mb")

    @memory_size_in_mb.setter
    def memory_size_in_mb(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory_size_in_mb", value)


@pulumi.input_type
class EndpointConfigurationShadowProductionVariantArgs:
    def __init__(__self__, *,
                 model_name: pulumi.Input[str],
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 container_startup_health_check_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 core_dump_config: Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs']] = None,
                 initial_instance_count: Optional[pulumi.Input[int]] = None,
                 initial_variant_weight: Optional[pulumi.Input[float]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 model_data_download_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 serverless_config: Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantServerlessConfigArgs']] = None,
                 variant_name: Optional[pulumi.Input[str]] = None,
                 volume_size_in_gb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "model_name", model_name)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if container_startup_health_check_timeout_in_seconds is not None:
            pulumi.set(__self__, "container_startup_health_check_timeout_in_seconds", container_startup_health_check_timeout_in_seconds)
        if core_dump_config is not None:
            pulumi.set(__self__, "core_dump_config", core_dump_config)
        if initial_instance_count is not None:
            pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        if initial_variant_weight is not None:
            pulumi.set(__self__, "initial_variant_weight", initial_variant_weight)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if model_data_download_timeout_in_seconds is not None:
            pulumi.set(__self__, "model_data_download_timeout_in_seconds", model_data_download_timeout_in_seconds)
        if serverless_config is not None:
            pulumi.set(__self__, "serverless_config", serverless_config)
        if variant_name is not None:
            pulumi.set(__self__, "variant_name", variant_name)
        if volume_size_in_gb is not None:
            pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "model_name")

    @model_name.setter
    def model_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_name", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter(name="containerStartupHealthCheckTimeoutInSeconds")
    def container_startup_health_check_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "container_startup_health_check_timeout_in_seconds")

    @container_startup_health_check_timeout_in_seconds.setter
    def container_startup_health_check_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_startup_health_check_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="coreDumpConfig")
    def core_dump_config(self) -> Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs']]:
        return pulumi.get(self, "core_dump_config")

    @core_dump_config.setter
    def core_dump_config(self, value: Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs']]):
        pulumi.set(self, "core_dump_config", value)

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_instance_count")

    @initial_instance_count.setter
    def initial_instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_instance_count", value)

    @property
    @pulumi.getter(name="initialVariantWeight")
    def initial_variant_weight(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "initial_variant_weight")

    @initial_variant_weight.setter
    def initial_variant_weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "initial_variant_weight", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="modelDataDownloadTimeoutInSeconds")
    def model_data_download_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "model_data_download_timeout_in_seconds")

    @model_data_download_timeout_in_seconds.setter
    def model_data_download_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "model_data_download_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="serverlessConfig")
    def serverless_config(self) -> Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantServerlessConfigArgs']]:
        return pulumi.get(self, "serverless_config")

    @serverless_config.setter
    def serverless_config(self, value: Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantServerlessConfigArgs']]):
        pulumi.set(self, "serverless_config", value)

    @property
    @pulumi.getter(name="variantName")
    def variant_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variant_name")

    @variant_name.setter
    def variant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variant_name", value)

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size_in_gb", value)


@pulumi.input_type
class EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs:
    def __init__(__self__, *,
                 destination_s3_uri: pulumi.Input[str],
                 kms_key_id: pulumi.Input[str]):
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_s3_uri")

    @destination_s3_uri.setter
    def destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_s3_uri", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class EndpointConfigurationShadowProductionVariantServerlessConfigArgs:
    def __init__(__self__, *,
                 max_concurrency: pulumi.Input[int],
                 memory_size_in_mb: pulumi.Input[int]):
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "memory_size_in_mb", memory_size_in_mb)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="memorySizeInMb")
    def memory_size_in_mb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "memory_size_in_mb")

    @memory_size_in_mb.setter
    def memory_size_in_mb(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory_size_in_mb", value)


@pulumi.input_type
class EndpointDeploymentConfigArgs:
    def __init__(__self__, *,
                 blue_green_update_policy: pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyArgs'],
                 auto_rollback_configuration: Optional[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationArgs']] = None):
        pulumi.set(__self__, "blue_green_update_policy", blue_green_update_policy)
        if auto_rollback_configuration is not None:
            pulumi.set(__self__, "auto_rollback_configuration", auto_rollback_configuration)

    @property
    @pulumi.getter(name="blueGreenUpdatePolicy")
    def blue_green_update_policy(self) -> pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyArgs']:
        return pulumi.get(self, "blue_green_update_policy")

    @blue_green_update_policy.setter
    def blue_green_update_policy(self, value: pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyArgs']):
        pulumi.set(self, "blue_green_update_policy", value)

    @property
    @pulumi.getter(name="autoRollbackConfiguration")
    def auto_rollback_configuration(self) -> Optional[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationArgs']]:
        return pulumi.get(self, "auto_rollback_configuration")

    @auto_rollback_configuration.setter
    def auto_rollback_configuration(self, value: Optional[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationArgs']]):
        pulumi.set(self, "auto_rollback_configuration", value)


@pulumi.input_type
class EndpointDeploymentConfigAutoRollbackConfigurationArgs:
    def __init__(__self__, *,
                 alarms: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs']]]] = None):
        if alarms is not None:
            pulumi.set(__self__, "alarms", alarms)

    @property
    @pulumi.getter
    def alarms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs']]]]:
        return pulumi.get(self, "alarms")

    @alarms.setter
    def alarms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs']]]]):
        pulumi.set(self, "alarms", value)


@pulumi.input_type
class EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs:
    def __init__(__self__, *,
                 alarm_name: pulumi.Input[str]):
        pulumi.set(__self__, "alarm_name", alarm_name)

    @property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alarm_name")

    @alarm_name.setter
    def alarm_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "alarm_name", value)


@pulumi.input_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyArgs:
    def __init__(__self__, *,
                 traffic_routing_configuration: pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs'],
                 maximum_execution_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 termination_wait_in_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "traffic_routing_configuration", traffic_routing_configuration)
        if maximum_execution_timeout_in_seconds is not None:
            pulumi.set(__self__, "maximum_execution_timeout_in_seconds", maximum_execution_timeout_in_seconds)
        if termination_wait_in_seconds is not None:
            pulumi.set(__self__, "termination_wait_in_seconds", termination_wait_in_seconds)

    @property
    @pulumi.getter(name="trafficRoutingConfiguration")
    def traffic_routing_configuration(self) -> pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs']:
        return pulumi.get(self, "traffic_routing_configuration")

    @traffic_routing_configuration.setter
    def traffic_routing_configuration(self, value: pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs']):
        pulumi.set(self, "traffic_routing_configuration", value)

    @property
    @pulumi.getter(name="maximumExecutionTimeoutInSeconds")
    def maximum_execution_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_execution_timeout_in_seconds")

    @maximum_execution_timeout_in_seconds.setter
    def maximum_execution_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_execution_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="terminationWaitInSeconds")
    def termination_wait_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "termination_wait_in_seconds")

    @termination_wait_in_seconds.setter
    def termination_wait_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "termination_wait_in_seconds", value)


@pulumi.input_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 wait_interval_in_seconds: pulumi.Input[int],
                 canary_size: Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs']] = None,
                 linear_step_size: Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs']] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "wait_interval_in_seconds", wait_interval_in_seconds)
        if canary_size is not None:
            pulumi.set(__self__, "canary_size", canary_size)
        if linear_step_size is not None:
            pulumi.set(__self__, "linear_step_size", linear_step_size)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="waitIntervalInSeconds")
    def wait_interval_in_seconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "wait_interval_in_seconds")

    @wait_interval_in_seconds.setter
    def wait_interval_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "wait_interval_in_seconds", value)

    @property
    @pulumi.getter(name="canarySize")
    def canary_size(self) -> Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs']]:
        return pulumi.get(self, "canary_size")

    @canary_size.setter
    def canary_size(self, value: Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs']]):
        pulumi.set(self, "canary_size", value)

    @property
    @pulumi.getter(name="linearStepSize")
    def linear_step_size(self) -> Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs']]:
        return pulumi.get(self, "linear_step_size")

    @linear_step_size.setter
    def linear_step_size(self, value: Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs']]):
        pulumi.set(self, "linear_step_size", value)


@pulumi.input_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FeatureGroupFeatureDefinitionArgs:
    def __init__(__self__, *,
                 feature_name: Optional[pulumi.Input[str]] = None,
                 feature_type: Optional[pulumi.Input[str]] = None):
        if feature_name is not None:
            pulumi.set(__self__, "feature_name", feature_name)
        if feature_type is not None:
            pulumi.set(__self__, "feature_type", feature_type)

    @property
    @pulumi.getter(name="featureName")
    def feature_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_name")

    @feature_name.setter
    def feature_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_name", value)

    @property
    @pulumi.getter(name="featureType")
    def feature_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feature_type")

    @feature_type.setter
    def feature_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_type", value)


@pulumi.input_type
class FeatureGroupOfflineStoreConfigArgs:
    def __init__(__self__, *,
                 s3_storage_config: pulumi.Input['FeatureGroupOfflineStoreConfigS3StorageConfigArgs'],
                 data_catalog_config: Optional[pulumi.Input['FeatureGroupOfflineStoreConfigDataCatalogConfigArgs']] = None,
                 disable_glue_table_creation: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "s3_storage_config", s3_storage_config)
        if data_catalog_config is not None:
            pulumi.set(__self__, "data_catalog_config", data_catalog_config)
        if disable_glue_table_creation is not None:
            pulumi.set(__self__, "disable_glue_table_creation", disable_glue_table_creation)

    @property
    @pulumi.getter(name="s3StorageConfig")
    def s3_storage_config(self) -> pulumi.Input['FeatureGroupOfflineStoreConfigS3StorageConfigArgs']:
        return pulumi.get(self, "s3_storage_config")

    @s3_storage_config.setter
    def s3_storage_config(self, value: pulumi.Input['FeatureGroupOfflineStoreConfigS3StorageConfigArgs']):
        pulumi.set(self, "s3_storage_config", value)

    @property
    @pulumi.getter(name="dataCatalogConfig")
    def data_catalog_config(self) -> Optional[pulumi.Input['FeatureGroupOfflineStoreConfigDataCatalogConfigArgs']]:
        return pulumi.get(self, "data_catalog_config")

    @data_catalog_config.setter
    def data_catalog_config(self, value: Optional[pulumi.Input['FeatureGroupOfflineStoreConfigDataCatalogConfigArgs']]):
        pulumi.set(self, "data_catalog_config", value)

    @property
    @pulumi.getter(name="disableGlueTableCreation")
    def disable_glue_table_creation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_glue_table_creation")

    @disable_glue_table_creation.setter
    def disable_glue_table_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_glue_table_creation", value)


@pulumi.input_type
class FeatureGroupOfflineStoreConfigDataCatalogConfigArgs:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None):
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class FeatureGroupOfflineStoreConfigS3StorageConfigArgs:
    def __init__(__self__, *,
                 s3_uri: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_uri", s3_uri)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class FeatureGroupOnlineStoreConfigArgs:
    def __init__(__self__, *,
                 enable_online_store: Optional[pulumi.Input[bool]] = None,
                 security_config: Optional[pulumi.Input['FeatureGroupOnlineStoreConfigSecurityConfigArgs']] = None):
        if enable_online_store is not None:
            pulumi.set(__self__, "enable_online_store", enable_online_store)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)

    @property
    @pulumi.getter(name="enableOnlineStore")
    def enable_online_store(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_online_store")

    @enable_online_store.setter
    def enable_online_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_online_store", value)

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional[pulumi.Input['FeatureGroupOnlineStoreConfigSecurityConfigArgs']]:
        return pulumi.get(self, "security_config")

    @security_config.setter
    def security_config(self, value: Optional[pulumi.Input['FeatureGroupOnlineStoreConfigSecurityConfigArgs']]):
        pulumi.set(self, "security_config", value)


@pulumi.input_type
class FeatureGroupOnlineStoreConfigSecurityConfigArgs:
    def __init__(__self__, *,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class FlowDefinitionHumanLoopActivationConfigArgs:
    def __init__(__self__, *,
                 human_loop_activation_conditions_config: Optional[pulumi.Input['FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs']] = None):
        if human_loop_activation_conditions_config is not None:
            pulumi.set(__self__, "human_loop_activation_conditions_config", human_loop_activation_conditions_config)

    @property
    @pulumi.getter(name="humanLoopActivationConditionsConfig")
    def human_loop_activation_conditions_config(self) -> Optional[pulumi.Input['FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs']]:
        return pulumi.get(self, "human_loop_activation_conditions_config")

    @human_loop_activation_conditions_config.setter
    def human_loop_activation_conditions_config(self, value: Optional[pulumi.Input['FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs']]):
        pulumi.set(self, "human_loop_activation_conditions_config", value)


@pulumi.input_type
class FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs:
    def __init__(__self__, *,
                 human_loop_activation_conditions: pulumi.Input[str]):
        pulumi.set(__self__, "human_loop_activation_conditions", human_loop_activation_conditions)

    @property
    @pulumi.getter(name="humanLoopActivationConditions")
    def human_loop_activation_conditions(self) -> pulumi.Input[str]:
        return pulumi.get(self, "human_loop_activation_conditions")

    @human_loop_activation_conditions.setter
    def human_loop_activation_conditions(self, value: pulumi.Input[str]):
        pulumi.set(self, "human_loop_activation_conditions", value)


@pulumi.input_type
class FlowDefinitionHumanLoopConfigArgs:
    def __init__(__self__, *,
                 human_task_ui_arn: pulumi.Input[str],
                 task_count: pulumi.Input[int],
                 task_description: pulumi.Input[str],
                 task_title: pulumi.Input[str],
                 workteam_arn: pulumi.Input[str],
                 public_workforce_task_price: Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs']] = None,
                 task_availability_lifetime_in_seconds: Optional[pulumi.Input[int]] = None,
                 task_keywords: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 task_time_limit_in_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "human_task_ui_arn", human_task_ui_arn)
        pulumi.set(__self__, "task_count", task_count)
        pulumi.set(__self__, "task_description", task_description)
        pulumi.set(__self__, "task_title", task_title)
        pulumi.set(__self__, "workteam_arn", workteam_arn)
        if public_workforce_task_price is not None:
            pulumi.set(__self__, "public_workforce_task_price", public_workforce_task_price)
        if task_availability_lifetime_in_seconds is not None:
            pulumi.set(__self__, "task_availability_lifetime_in_seconds", task_availability_lifetime_in_seconds)
        if task_keywords is not None:
            pulumi.set(__self__, "task_keywords", task_keywords)
        if task_time_limit_in_seconds is not None:
            pulumi.set(__self__, "task_time_limit_in_seconds", task_time_limit_in_seconds)

    @property
    @pulumi.getter(name="humanTaskUiArn")
    def human_task_ui_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "human_task_ui_arn")

    @human_task_ui_arn.setter
    def human_task_ui_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "human_task_ui_arn", value)

    @property
    @pulumi.getter(name="taskCount")
    def task_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "task_count")

    @task_count.setter
    def task_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "task_count", value)

    @property
    @pulumi.getter(name="taskDescription")
    def task_description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "task_description")

    @task_description.setter
    def task_description(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_description", value)

    @property
    @pulumi.getter(name="taskTitle")
    def task_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "task_title")

    @task_title.setter
    def task_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_title", value)

    @property
    @pulumi.getter(name="workteamArn")
    def workteam_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "workteam_arn")

    @workteam_arn.setter
    def workteam_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "workteam_arn", value)

    @property
    @pulumi.getter(name="publicWorkforceTaskPrice")
    def public_workforce_task_price(self) -> Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs']]:
        return pulumi.get(self, "public_workforce_task_price")

    @public_workforce_task_price.setter
    def public_workforce_task_price(self, value: Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs']]):
        pulumi.set(self, "public_workforce_task_price", value)

    @property
    @pulumi.getter(name="taskAvailabilityLifetimeInSeconds")
    def task_availability_lifetime_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "task_availability_lifetime_in_seconds")

    @task_availability_lifetime_in_seconds.setter
    def task_availability_lifetime_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_availability_lifetime_in_seconds", value)

    @property
    @pulumi.getter(name="taskKeywords")
    def task_keywords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "task_keywords")

    @task_keywords.setter
    def task_keywords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "task_keywords", value)

    @property
    @pulumi.getter(name="taskTimeLimitInSeconds")
    def task_time_limit_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "task_time_limit_in_seconds")

    @task_time_limit_in_seconds.setter
    def task_time_limit_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_time_limit_in_seconds", value)


@pulumi.input_type
class FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs:
    def __init__(__self__, *,
                 amount_in_usd: Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs']] = None):
        if amount_in_usd is not None:
            pulumi.set(__self__, "amount_in_usd", amount_in_usd)

    @property
    @pulumi.getter(name="amountInUsd")
    def amount_in_usd(self) -> Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs']]:
        return pulumi.get(self, "amount_in_usd")

    @amount_in_usd.setter
    def amount_in_usd(self, value: Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs']]):
        pulumi.set(self, "amount_in_usd", value)


@pulumi.input_type
class FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs:
    def __init__(__self__, *,
                 cents: Optional[pulumi.Input[int]] = None,
                 dollars: Optional[pulumi.Input[int]] = None,
                 tenth_fractions_of_a_cent: Optional[pulumi.Input[int]] = None):
        if cents is not None:
            pulumi.set(__self__, "cents", cents)
        if dollars is not None:
            pulumi.set(__self__, "dollars", dollars)
        if tenth_fractions_of_a_cent is not None:
            pulumi.set(__self__, "tenth_fractions_of_a_cent", tenth_fractions_of_a_cent)

    @property
    @pulumi.getter
    def cents(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cents")

    @cents.setter
    def cents(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cents", value)

    @property
    @pulumi.getter
    def dollars(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dollars")

    @dollars.setter
    def dollars(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dollars", value)

    @property
    @pulumi.getter(name="tenthFractionsOfACent")
    def tenth_fractions_of_a_cent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenth_fractions_of_a_cent")

    @tenth_fractions_of_a_cent.setter
    def tenth_fractions_of_a_cent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenth_fractions_of_a_cent", value)


@pulumi.input_type
class FlowDefinitionHumanLoopRequestSourceArgs:
    def __init__(__self__, *,
                 aws_managed_human_loop_request_source: pulumi.Input[str]):
        pulumi.set(__self__, "aws_managed_human_loop_request_source", aws_managed_human_loop_request_source)

    @property
    @pulumi.getter(name="awsManagedHumanLoopRequestSource")
    def aws_managed_human_loop_request_source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_managed_human_loop_request_source")

    @aws_managed_human_loop_request_source.setter
    def aws_managed_human_loop_request_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_managed_human_loop_request_source", value)


@pulumi.input_type
class FlowDefinitionOutputConfigArgs:
    def __init__(__self__, *,
                 s3_output_path: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_output_path", s3_output_path)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_output_path", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class HumanTaskUIUiTemplateArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 content_sha256: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_sha256 is not None:
            pulumi.set(__self__, "content_sha256", content_sha256)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentSha256")
    def content_sha256(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_sha256")

    @content_sha256.setter
    def content_sha256(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_sha256", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ModelContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 container_hostname: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_config: Optional[pulumi.Input['ModelContainerImageConfigArgs']] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 model_data_url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image", image)
        if container_hostname is not None:
            pulumi.set(__self__, "container_hostname", container_hostname)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if image_config is not None:
            pulumi.set(__self__, "image_config", image_config)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="containerHostname")
    def container_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_hostname")

    @container_hostname.setter
    def container_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_hostname", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="imageConfig")
    def image_config(self) -> Optional[pulumi.Input['ModelContainerImageConfigArgs']]:
        return pulumi.get(self, "image_config")

    @image_config.setter
    def image_config(self, value: Optional[pulumi.Input['ModelContainerImageConfigArgs']]):
        pulumi.set(self, "image_config", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model_data_url")

    @model_data_url.setter
    def model_data_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_data_url", value)


@pulumi.input_type
class ModelContainerImageConfigArgs:
    def __init__(__self__, *,
                 repository_access_mode: pulumi.Input[str],
                 repository_auth_config: Optional[pulumi.Input['ModelContainerImageConfigRepositoryAuthConfigArgs']] = None):
        pulumi.set(__self__, "repository_access_mode", repository_access_mode)
        if repository_auth_config is not None:
            pulumi.set(__self__, "repository_auth_config", repository_auth_config)

    @property
    @pulumi.getter(name="repositoryAccessMode")
    def repository_access_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_access_mode")

    @repository_access_mode.setter
    def repository_access_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_access_mode", value)

    @property
    @pulumi.getter(name="repositoryAuthConfig")
    def repository_auth_config(self) -> Optional[pulumi.Input['ModelContainerImageConfigRepositoryAuthConfigArgs']]:
        return pulumi.get(self, "repository_auth_config")

    @repository_auth_config.setter
    def repository_auth_config(self, value: Optional[pulumi.Input['ModelContainerImageConfigRepositoryAuthConfigArgs']]):
        pulumi.set(self, "repository_auth_config", value)


@pulumi.input_type
class ModelContainerImageConfigRepositoryAuthConfigArgs:
    def __init__(__self__, *,
                 repository_credentials_provider_arn: pulumi.Input[str]):
        pulumi.set(__self__, "repository_credentials_provider_arn", repository_credentials_provider_arn)

    @property
    @pulumi.getter(name="repositoryCredentialsProviderArn")
    def repository_credentials_provider_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_credentials_provider_arn")

    @repository_credentials_provider_arn.setter
    def repository_credentials_provider_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_credentials_provider_arn", value)


@pulumi.input_type
class ModelInferenceExecutionConfigArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ModelPrimaryContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 container_hostname: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image_config: Optional[pulumi.Input['ModelPrimaryContainerImageConfigArgs']] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 model_data_url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image", image)
        if container_hostname is not None:
            pulumi.set(__self__, "container_hostname", container_hostname)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if image_config is not None:
            pulumi.set(__self__, "image_config", image_config)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="containerHostname")
    def container_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_hostname")

    @container_hostname.setter
    def container_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_hostname", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="imageConfig")
    def image_config(self) -> Optional[pulumi.Input['ModelPrimaryContainerImageConfigArgs']]:
        return pulumi.get(self, "image_config")

    @image_config.setter
    def image_config(self, value: Optional[pulumi.Input['ModelPrimaryContainerImageConfigArgs']]):
        pulumi.set(self, "image_config", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model_data_url")

    @model_data_url.setter
    def model_data_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_data_url", value)


@pulumi.input_type
class ModelPrimaryContainerImageConfigArgs:
    def __init__(__self__, *,
                 repository_access_mode: pulumi.Input[str],
                 repository_auth_config: Optional[pulumi.Input['ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs']] = None):
        pulumi.set(__self__, "repository_access_mode", repository_access_mode)
        if repository_auth_config is not None:
            pulumi.set(__self__, "repository_auth_config", repository_auth_config)

    @property
    @pulumi.getter(name="repositoryAccessMode")
    def repository_access_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_access_mode")

    @repository_access_mode.setter
    def repository_access_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_access_mode", value)

    @property
    @pulumi.getter(name="repositoryAuthConfig")
    def repository_auth_config(self) -> Optional[pulumi.Input['ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs']]:
        return pulumi.get(self, "repository_auth_config")

    @repository_auth_config.setter
    def repository_auth_config(self, value: Optional[pulumi.Input['ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs']]):
        pulumi.set(self, "repository_auth_config", value)


@pulumi.input_type
class ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs:
    def __init__(__self__, *,
                 repository_credentials_provider_arn: pulumi.Input[str]):
        pulumi.set(__self__, "repository_credentials_provider_arn", repository_credentials_provider_arn)

    @property
    @pulumi.getter(name="repositoryCredentialsProviderArn")
    def repository_credentials_provider_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_credentials_provider_arn")

    @repository_credentials_provider_arn.setter
    def repository_credentials_provider_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_credentials_provider_arn", value)


@pulumi.input_type
class ModelVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class NotebookInstanceInstanceMetadataServiceConfigurationArgs:
    def __init__(__self__, *,
                 minimum_instance_metadata_service_version: Optional[pulumi.Input[str]] = None):
        if minimum_instance_metadata_service_version is not None:
            pulumi.set(__self__, "minimum_instance_metadata_service_version", minimum_instance_metadata_service_version)

    @property
    @pulumi.getter(name="minimumInstanceMetadataServiceVersion")
    def minimum_instance_metadata_service_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "minimum_instance_metadata_service_version")

    @minimum_instance_metadata_service_version.setter
    def minimum_instance_metadata_service_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum_instance_metadata_service_version", value)


@pulumi.input_type
class ProjectServiceCatalogProvisioningDetailsArgs:
    def __init__(__self__, *,
                 product_id: pulumi.Input[str],
                 path_id: Optional[pulumi.Input[str]] = None,
                 provisioning_artifact_id: Optional[pulumi.Input[str]] = None,
                 provisioning_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs']]]] = None):
        pulumi.set(__self__, "product_id", product_id)
        if path_id is not None:
            pulumi.set(__self__, "path_id", path_id)
        if provisioning_artifact_id is not None:
            pulumi.set(__self__, "provisioning_artifact_id", provisioning_artifact_id)
        if provisioning_parameters is not None:
            pulumi.set(__self__, "provisioning_parameters", provisioning_parameters)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter(name="pathId")
    def path_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_id")

    @path_id.setter
    def path_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_id", value)

    @property
    @pulumi.getter(name="provisioningArtifactId")
    def provisioning_artifact_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provisioning_artifact_id")

    @provisioning_artifact_id.setter
    def provisioning_artifact_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioning_artifact_id", value)

    @property
    @pulumi.getter(name="provisioningParameters")
    def provisioning_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs']]]]:
        return pulumi.get(self, "provisioning_parameters")

    @provisioning_parameters.setter
    def provisioning_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs']]]]):
        pulumi.set(self, "provisioning_parameters", value)


@pulumi.input_type
class ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SpaceSpaceSettingsArgs:
    def __init__(__self__, *,
                 jupyter_server_app_settings: Optional[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsArgs']] = None,
                 kernel_gateway_app_settings: Optional[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsArgs']] = None):
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsArgs']]:
        return pulumi.get(self, "jupyter_server_app_settings")

    @jupyter_server_app_settings.setter
    def jupyter_server_app_settings(self, value: Optional[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsArgs']]):
        pulumi.set(self, "jupyter_server_app_settings", value)

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsArgs']]:
        return pulumi.get(self, "kernel_gateway_app_settings")

    @kernel_gateway_app_settings.setter
    def kernel_gateway_app_settings(self, value: Optional[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsArgs']]):
        pulumi.set(self, "kernel_gateway_app_settings", value)


@pulumi.input_type
class SpaceSpaceSettingsJupyterServerAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs'],
                 code_repositories: Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]:
        return pulumi.get(self, "code_repositories")

    @code_repositories.setter
    def code_repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]):
        pulumi.set(self, "code_repositories", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str]):
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)


@pulumi.input_type
class SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class SpaceSpaceSettingsKernelGatewayAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs'],
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]]:
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class UserProfileUserSettingsArgs:
    def __init__(__self__, *,
                 execution_role: pulumi.Input[str],
                 canvas_app_settings: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsArgs']] = None,
                 jupyter_server_app_settings: Optional[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsArgs']] = None,
                 kernel_gateway_app_settings: Optional[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsArgs']] = None,
                 r_session_app_settings: Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sharing_settings: Optional[pulumi.Input['UserProfileUserSettingsSharingSettingsArgs']] = None,
                 tensor_board_app_settings: Optional[pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsArgs']] = None):
        pulumi.set(__self__, "execution_role", execution_role)
        if canvas_app_settings is not None:
            pulumi.set(__self__, "canvas_app_settings", canvas_app_settings)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if r_session_app_settings is not None:
            pulumi.set(__self__, "r_session_app_settings", r_session_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharing_settings is not None:
            pulumi.set(__self__, "sharing_settings", sharing_settings)
        if tensor_board_app_settings is not None:
            pulumi.set(__self__, "tensor_board_app_settings", tensor_board_app_settings)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: pulumi.Input[str]):
        pulumi.set(self, "execution_role", value)

    @property
    @pulumi.getter(name="canvasAppSettings")
    def canvas_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsArgs']]:
        return pulumi.get(self, "canvas_app_settings")

    @canvas_app_settings.setter
    def canvas_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsArgs']]):
        pulumi.set(self, "canvas_app_settings", value)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsArgs']]:
        return pulumi.get(self, "jupyter_server_app_settings")

    @jupyter_server_app_settings.setter
    def jupyter_server_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsArgs']]):
        pulumi.set(self, "jupyter_server_app_settings", value)

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsArgs']]:
        return pulumi.get(self, "kernel_gateway_app_settings")

    @kernel_gateway_app_settings.setter
    def kernel_gateway_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsArgs']]):
        pulumi.set(self, "kernel_gateway_app_settings", value)

    @property
    @pulumi.getter(name="rSessionAppSettings")
    def r_session_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsArgs']]:
        return pulumi.get(self, "r_session_app_settings")

    @r_session_app_settings.setter
    def r_session_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsArgs']]):
        pulumi.set(self, "r_session_app_settings", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="sharingSettings")
    def sharing_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsSharingSettingsArgs']]:
        return pulumi.get(self, "sharing_settings")

    @sharing_settings.setter
    def sharing_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsSharingSettingsArgs']]):
        pulumi.set(self, "sharing_settings", value)

    @property
    @pulumi.getter(name="tensorBoardAppSettings")
    def tensor_board_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsArgs']]:
        return pulumi.get(self, "tensor_board_app_settings")

    @tensor_board_app_settings.setter
    def tensor_board_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsArgs']]):
        pulumi.set(self, "tensor_board_app_settings", value)


@pulumi.input_type
class UserProfileUserSettingsCanvasAppSettingsArgs:
    def __init__(__self__, *,
                 time_series_forecasting_settings: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']] = None):
        if time_series_forecasting_settings is not None:
            pulumi.set(__self__, "time_series_forecasting_settings", time_series_forecasting_settings)

    @property
    @pulumi.getter(name="timeSeriesForecastingSettings")
    def time_series_forecasting_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']]:
        return pulumi.get(self, "time_series_forecasting_settings")

    @time_series_forecasting_settings.setter
    def time_series_forecasting_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']]):
        pulumi.set(self, "time_series_forecasting_settings", value)


@pulumi.input_type
class UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs:
    def __init__(__self__, *,
                 amazon_forecast_role_arn: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if amazon_forecast_role_arn is not None:
            pulumi.set(__self__, "amazon_forecast_role_arn", amazon_forecast_role_arn)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="amazonForecastRoleArn")
    def amazon_forecast_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "amazon_forecast_role_arn")

    @amazon_forecast_role_arn.setter
    def amazon_forecast_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amazon_forecast_role_arn", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class UserProfileUserSettingsJupyterServerAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs'],
                 code_repositories: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]:
        return pulumi.get(self, "code_repositories")

    @code_repositories.setter
    def code_repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]):
        pulumi.set(self, "code_repositories", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str]):
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)


@pulumi.input_type
class UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class UserProfileUserSettingsKernelGatewayAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs'],
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]]:
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class UserProfileUserSettingsRSessionAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']] = None):
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsCustomImageArgs']]]]:
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class UserProfileUserSettingsRSessionAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class UserProfileUserSettingsSharingSettingsArgs:
    def __init__(__self__, *,
                 notebook_output_option: Optional[pulumi.Input[str]] = None,
                 s3_kms_key_id: Optional[pulumi.Input[str]] = None,
                 s3_output_path: Optional[pulumi.Input[str]] = None):
        if notebook_output_option is not None:
            pulumi.set(__self__, "notebook_output_option", notebook_output_option)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="notebookOutputOption")
    def notebook_output_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notebook_output_option")

    @notebook_output_option.setter
    def notebook_output_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notebook_output_option", value)

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_kms_key_id")

    @s3_kms_key_id.setter
    def s3_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_kms_key_id", value)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_output_path", value)


@pulumi.input_type
class UserProfileUserSettingsTensorBoardAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']):
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class WorkforceCognitoConfigArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 user_pool: pulumi.Input[str]):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "user_pool", user_pool)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="userPool")
    def user_pool(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_pool")

    @user_pool.setter
    def user_pool(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_pool", value)


@pulumi.input_type
class WorkforceOidcConfigArgs:
    def __init__(__self__, *,
                 authorization_endpoint: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 issuer: pulumi.Input[str],
                 jwks_uri: pulumi.Input[str],
                 logout_endpoint: pulumi.Input[str],
                 token_endpoint: pulumi.Input[str],
                 user_info_endpoint: pulumi.Input[str]):
        pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "jwks_uri", jwks_uri)
        pulumi.set(__self__, "logout_endpoint", logout_endpoint)
        pulumi.set(__self__, "token_endpoint", token_endpoint)
        pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization_endpoint", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="jwksUri")
    def jwks_uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "jwks_uri")

    @jwks_uri.setter
    def jwks_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "jwks_uri", value)

    @property
    @pulumi.getter(name="logoutEndpoint")
    def logout_endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "logout_endpoint")

    @logout_endpoint.setter
    def logout_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "logout_endpoint", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_info_endpoint")

    @user_info_endpoint.setter
    def user_info_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_info_endpoint", value)


@pulumi.input_type
class WorkforceSourceIpConfigArgs:
    def __init__(__self__, *,
                 cidrs: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "cidrs", cidrs)

    @property
    @pulumi.getter
    def cidrs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "cidrs")

    @cidrs.setter
    def cidrs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "cidrs", value)


@pulumi.input_type
class WorkforceWorkforceVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_endpoint_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if vpc_endpoint_id is not None:
            pulumi.set(__self__, "vpc_endpoint_id", vpc_endpoint_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="vpcEndpointId")
    def vpc_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc_endpoint_id")

    @vpc_endpoint_id.setter
    def vpc_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_endpoint_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class WorkteamMemberDefinitionArgs:
    def __init__(__self__, *,
                 cognito_member_definition: Optional[pulumi.Input['WorkteamMemberDefinitionCognitoMemberDefinitionArgs']] = None,
                 oidc_member_definition: Optional[pulumi.Input['WorkteamMemberDefinitionOidcMemberDefinitionArgs']] = None):
        if cognito_member_definition is not None:
            pulumi.set(__self__, "cognito_member_definition", cognito_member_definition)
        if oidc_member_definition is not None:
            pulumi.set(__self__, "oidc_member_definition", oidc_member_definition)

    @property
    @pulumi.getter(name="cognitoMemberDefinition")
    def cognito_member_definition(self) -> Optional[pulumi.Input['WorkteamMemberDefinitionCognitoMemberDefinitionArgs']]:
        return pulumi.get(self, "cognito_member_definition")

    @cognito_member_definition.setter
    def cognito_member_definition(self, value: Optional[pulumi.Input['WorkteamMemberDefinitionCognitoMemberDefinitionArgs']]):
        pulumi.set(self, "cognito_member_definition", value)

    @property
    @pulumi.getter(name="oidcMemberDefinition")
    def oidc_member_definition(self) -> Optional[pulumi.Input['WorkteamMemberDefinitionOidcMemberDefinitionArgs']]:
        return pulumi.get(self, "oidc_member_definition")

    @oidc_member_definition.setter
    def oidc_member_definition(self, value: Optional[pulumi.Input['WorkteamMemberDefinitionOidcMemberDefinitionArgs']]):
        pulumi.set(self, "oidc_member_definition", value)


@pulumi.input_type
class WorkteamMemberDefinitionCognitoMemberDefinitionArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 user_group: pulumi.Input[str],
                 user_pool: pulumi.Input[str]):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "user_group", user_group)
        pulumi.set(__self__, "user_pool", user_pool)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_group", value)

    @property
    @pulumi.getter(name="userPool")
    def user_pool(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_pool")

    @user_pool.setter
    def user_pool(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_pool", value)


@pulumi.input_type
class WorkteamMemberDefinitionOidcMemberDefinitionArgs:
    def __init__(__self__, *,
                 groups: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "groups", groups)

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "groups", value)


@pulumi.input_type
class WorkteamNotificationConfigurationArgs:
    def __init__(__self__, *,
                 notification_topic_arn: Optional[pulumi.Input[str]] = None):
        if notification_topic_arn is not None:
            pulumi.set(__self__, "notification_topic_arn", notification_topic_arn)

    @property
    @pulumi.getter(name="notificationTopicArn")
    def notification_topic_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_topic_arn")

    @notification_topic_arn.setter
    def notification_topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_topic_arn", value)


