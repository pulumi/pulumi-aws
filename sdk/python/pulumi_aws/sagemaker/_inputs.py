# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AppImageConfigKernelGatewayImageConfigArgs',
    'AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs',
    'AppImageConfigKernelGatewayImageConfigKernelSpecArgs',
    'AppResourceSpecArgs',
    'CodeRepositoryGitConfigArgs',
    'DataQualityJobDefinitionDataQualityAppSpecificationArgs',
    'DataQualityJobDefinitionDataQualityBaselineConfigArgs',
    'DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceArgs',
    'DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceArgs',
    'DataQualityJobDefinitionDataQualityJobInputArgs',
    'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputArgs',
    'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatArgs',
    'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvArgs',
    'DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonArgs',
    'DataQualityJobDefinitionDataQualityJobInputEndpointInputArgs',
    'DataQualityJobDefinitionDataQualityJobOutputConfigArgs',
    'DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsArgs',
    'DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs',
    'DataQualityJobDefinitionJobResourcesArgs',
    'DataQualityJobDefinitionJobResourcesClusterConfigArgs',
    'DataQualityJobDefinitionNetworkConfigArgs',
    'DataQualityJobDefinitionNetworkConfigVpcConfigArgs',
    'DataQualityJobDefinitionStoppingConditionArgs',
    'DeviceDeviceArgs',
    'DeviceFleetOutputConfigArgs',
    'DomainDefaultSpaceSettingsArgs',
    'DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs',
    'DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs',
    'DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs',
    'DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs',
    'DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs',
    'DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs',
    'DomainDefaultUserSettingsArgs',
    'DomainDefaultUserSettingsCanvasAppSettingsArgs',
    'DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsArgs',
    'DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs',
    'DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsArgs',
    'DomainDefaultUserSettingsJupyterServerAppSettingsArgs',
    'DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs',
    'DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs',
    'DomainDefaultUserSettingsKernelGatewayAppSettingsArgs',
    'DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs',
    'DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs',
    'DomainDefaultUserSettingsRSessionAppSettingsArgs',
    'DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs',
    'DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs',
    'DomainDefaultUserSettingsRStudioServerProAppSettingsArgs',
    'DomainDefaultUserSettingsSharingSettingsArgs',
    'DomainDefaultUserSettingsTensorBoardAppSettingsArgs',
    'DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs',
    'DomainDomainSettingsArgs',
    'DomainDomainSettingsRStudioServerProDomainSettingsArgs',
    'DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecArgs',
    'DomainRetentionPolicyArgs',
    'EndpointConfigurationAsyncInferenceConfigArgs',
    'EndpointConfigurationAsyncInferenceConfigClientConfigArgs',
    'EndpointConfigurationAsyncInferenceConfigOutputConfigArgs',
    'EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs',
    'EndpointConfigurationDataCaptureConfigArgs',
    'EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs',
    'EndpointConfigurationDataCaptureConfigCaptureOptionArgs',
    'EndpointConfigurationProductionVariantArgs',
    'EndpointConfigurationProductionVariantCoreDumpConfigArgs',
    'EndpointConfigurationProductionVariantServerlessConfigArgs',
    'EndpointConfigurationShadowProductionVariantArgs',
    'EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs',
    'EndpointConfigurationShadowProductionVariantServerlessConfigArgs',
    'EndpointDeploymentConfigArgs',
    'EndpointDeploymentConfigAutoRollbackConfigurationArgs',
    'EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyArgs',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs',
    'EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs',
    'EndpointDeploymentConfigRollingUpdatePolicyArgs',
    'EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSizeArgs',
    'EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSizeArgs',
    'FeatureGroupFeatureDefinitionArgs',
    'FeatureGroupOfflineStoreConfigArgs',
    'FeatureGroupOfflineStoreConfigDataCatalogConfigArgs',
    'FeatureGroupOfflineStoreConfigS3StorageConfigArgs',
    'FeatureGroupOnlineStoreConfigArgs',
    'FeatureGroupOnlineStoreConfigSecurityConfigArgs',
    'FlowDefinitionHumanLoopActivationConfigArgs',
    'FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs',
    'FlowDefinitionHumanLoopConfigArgs',
    'FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs',
    'FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs',
    'FlowDefinitionHumanLoopRequestSourceArgs',
    'FlowDefinitionOutputConfigArgs',
    'HumanTaskUIUiTemplateArgs',
    'ModelContainerArgs',
    'ModelContainerImageConfigArgs',
    'ModelContainerImageConfigRepositoryAuthConfigArgs',
    'ModelInferenceExecutionConfigArgs',
    'ModelPrimaryContainerArgs',
    'ModelPrimaryContainerImageConfigArgs',
    'ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs',
    'ModelVpcConfigArgs',
    'MonitoringScheduleMonitoringScheduleConfigArgs',
    'MonitoringScheduleMonitoringScheduleConfigScheduleConfigArgs',
    'NotebookInstanceInstanceMetadataServiceConfigurationArgs',
    'PipelineParallelismConfigurationArgs',
    'PipelinePipelineDefinitionS3LocationArgs',
    'ProjectServiceCatalogProvisioningDetailsArgs',
    'ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs',
    'SpaceSpaceSettingsArgs',
    'SpaceSpaceSettingsJupyterServerAppSettingsArgs',
    'SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs',
    'SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs',
    'SpaceSpaceSettingsKernelGatewayAppSettingsArgs',
    'SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs',
    'SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs',
    'UserProfileUserSettingsArgs',
    'UserProfileUserSettingsCanvasAppSettingsArgs',
    'UserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsArgs',
    'UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs',
    'UserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsArgs',
    'UserProfileUserSettingsJupyterServerAppSettingsArgs',
    'UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs',
    'UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs',
    'UserProfileUserSettingsKernelGatewayAppSettingsArgs',
    'UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs',
    'UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs',
    'UserProfileUserSettingsRSessionAppSettingsArgs',
    'UserProfileUserSettingsRSessionAppSettingsCustomImageArgs',
    'UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs',
    'UserProfileUserSettingsRStudioServerProAppSettingsArgs',
    'UserProfileUserSettingsSharingSettingsArgs',
    'UserProfileUserSettingsTensorBoardAppSettingsArgs',
    'UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs',
    'WorkforceCognitoConfigArgs',
    'WorkforceOidcConfigArgs',
    'WorkforceSourceIpConfigArgs',
    'WorkforceWorkforceVpcConfigArgs',
    'WorkteamMemberDefinitionArgs',
    'WorkteamMemberDefinitionCognitoMemberDefinitionArgs',
    'WorkteamMemberDefinitionOidcMemberDefinitionArgs',
    'WorkteamNotificationConfigurationArgs',
]

@pulumi.input_type
class AppImageConfigKernelGatewayImageConfigArgs:
    def __init__(__self__, *,
                 kernel_spec: pulumi.Input['AppImageConfigKernelGatewayImageConfigKernelSpecArgs'],
                 file_system_config: Optional[pulumi.Input['AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs']] = None):
        """
        :param pulumi.Input['AppImageConfigKernelGatewayImageConfigKernelSpecArgs'] kernel_spec: The default branch for the Git repository. See Kernel Spec details below.
        :param pulumi.Input['AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs'] file_system_config: The URL where the Git repository is located. See File System Config details below.
        """
        pulumi.set(__self__, "kernel_spec", kernel_spec)
        if file_system_config is not None:
            pulumi.set(__self__, "file_system_config", file_system_config)

    @property
    @pulumi.getter(name="kernelSpec")
    def kernel_spec(self) -> pulumi.Input['AppImageConfigKernelGatewayImageConfigKernelSpecArgs']:
        """
        The default branch for the Git repository. See Kernel Spec details below.
        """
        return pulumi.get(self, "kernel_spec")

    @kernel_spec.setter
    def kernel_spec(self, value: pulumi.Input['AppImageConfigKernelGatewayImageConfigKernelSpecArgs']):
        pulumi.set(self, "kernel_spec", value)

    @property
    @pulumi.getter(name="fileSystemConfig")
    def file_system_config(self) -> Optional[pulumi.Input['AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs']]:
        """
        The URL where the Git repository is located. See File System Config details below.
        """
        return pulumi.get(self, "file_system_config")

    @file_system_config.setter
    def file_system_config(self, value: Optional[pulumi.Input['AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs']]):
        pulumi.set(self, "file_system_config", value)


@pulumi.input_type
class AppImageConfigKernelGatewayImageConfigFileSystemConfigArgs:
    def __init__(__self__, *,
                 default_gid: Optional[pulumi.Input[int]] = None,
                 default_uid: Optional[pulumi.Input[int]] = None,
                 mount_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] default_gid: The default POSIX group ID (GID). If not specified, defaults to `100`. Valid values are `0` and `100`.
        :param pulumi.Input[int] default_uid: The default POSIX user ID (UID). If not specified, defaults to `1000`. Valid values are `0` and `1000`.
        :param pulumi.Input[str] mount_path: The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to `/home/sagemaker-user`.
               
               > **Note:** When specifying `default_gid` and `default_uid`, Valid value pairs are [`0`, `0`] and [`100`, `1000`].
        """
        if default_gid is not None:
            pulumi.set(__self__, "default_gid", default_gid)
        if default_uid is not None:
            pulumi.set(__self__, "default_uid", default_uid)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)

    @property
    @pulumi.getter(name="defaultGid")
    def default_gid(self) -> Optional[pulumi.Input[int]]:
        """
        The default POSIX group ID (GID). If not specified, defaults to `100`. Valid values are `0` and `100`.
        """
        return pulumi.get(self, "default_gid")

    @default_gid.setter
    def default_gid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_gid", value)

    @property
    @pulumi.getter(name="defaultUid")
    def default_uid(self) -> Optional[pulumi.Input[int]]:
        """
        The default POSIX user ID (UID). If not specified, defaults to `1000`. Valid values are `0` and `1000`.
        """
        return pulumi.get(self, "default_uid")

    @default_uid.setter
    def default_uid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_uid", value)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to `/home/sagemaker-user`.

        > **Note:** When specifying `default_gid` and `default_uid`, Valid value pairs are [`0`, `0`] and [`100`, `1000`].
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)


@pulumi.input_type
class AppImageConfigKernelGatewayImageConfigKernelSpecArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the kernel.
        :param pulumi.Input[str] display_name: The display name of the kernel.
        """
        pulumi.set(__self__, "name", name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the kernel.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the kernel.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class AppResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type that the image version runs on. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type that the image version runs on. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class CodeRepositoryGitConfigArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str],
                 branch: Optional[pulumi.Input[str]] = None,
                 secret_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] repository_url: The URL where the Git repository is located.
        :param pulumi.Input[str] branch: The default branch for the Git repository.
        :param pulumi.Input[str] secret_arn: The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: `{"username": UserName, "password": Password}`
        """
        pulumi.set(__self__, "repository_url", repository_url)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if secret_arn is not None:
            pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        """
        The URL where the Git repository is located.
        """
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch for the Git repository.
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: `{"username": UserName, "password": Password}`
        """
        return pulumi.get(self, "secret_arn")

    @secret_arn.setter
    def secret_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_arn", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityAppSpecificationArgs:
    def __init__(__self__, *,
                 image_uri: pulumi.Input[str],
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 post_analytics_processor_source_uri: Optional[pulumi.Input[str]] = None,
                 record_preprocessor_source_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] image_uri: The container image that the data quality monitoring job runs.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] environment: Sets the environment variables in the container that the monitoring job runs. A list of key value pairs.
        :param pulumi.Input[str] post_analytics_processor_source_uri: An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        :param pulumi.Input[str] record_preprocessor_source_uri: An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        """
        pulumi.set(__self__, "image_uri", image_uri)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if post_analytics_processor_source_uri is not None:
            pulumi.set(__self__, "post_analytics_processor_source_uri", post_analytics_processor_source_uri)
        if record_preprocessor_source_uri is not None:
            pulumi.set(__self__, "record_preprocessor_source_uri", record_preprocessor_source_uri)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> pulumi.Input[str]:
        """
        The container image that the data quality monitoring job runs.
        """
        return pulumi.get(self, "image_uri")

    @image_uri.setter
    def image_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_uri", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Sets the environment variables in the container that the monitoring job runs. A list of key value pairs.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="postAnalyticsProcessorSourceUri")
    def post_analytics_processor_source_uri(self) -> Optional[pulumi.Input[str]]:
        """
        An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        """
        return pulumi.get(self, "post_analytics_processor_source_uri")

    @post_analytics_processor_source_uri.setter
    def post_analytics_processor_source_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_analytics_processor_source_uri", value)

    @property
    @pulumi.getter(name="recordPreprocessorSourceUri")
    def record_preprocessor_source_uri(self) -> Optional[pulumi.Input[str]]:
        """
        An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        """
        return pulumi.get(self, "record_preprocessor_source_uri")

    @record_preprocessor_source_uri.setter
    def record_preprocessor_source_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_preprocessor_source_uri", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityBaselineConfigArgs:
    def __init__(__self__, *,
                 constraints_resource: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceArgs']] = None,
                 statistics_resource: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceArgs']] = None):
        """
        :param pulumi.Input['DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceArgs'] constraints_resource: The constraints resource for a monitoring job. Fields are documented below.
        :param pulumi.Input['DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceArgs'] statistics_resource: The statistics resource for a monitoring job. Fields are documented below.
        """
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)
        if statistics_resource is not None:
            pulumi.set(__self__, "statistics_resource", statistics_resource)

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional[pulumi.Input['DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceArgs']]:
        """
        The constraints resource for a monitoring job. Fields are documented below.
        """
        return pulumi.get(self, "constraints_resource")

    @constraints_resource.setter
    def constraints_resource(self, value: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceArgs']]):
        pulumi.set(self, "constraints_resource", value)

    @property
    @pulumi.getter(name="statisticsResource")
    def statistics_resource(self) -> Optional[pulumi.Input['DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceArgs']]:
        """
        The statistics resource for a monitoring job. Fields are documented below.
        """
        return pulumi.get(self, "statistics_resource")

    @statistics_resource.setter
    def statistics_resource(self, value: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceArgs']]):
        pulumi.set(self, "statistics_resource", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityBaselineConfigConstraintsResourceArgs:
    def __init__(__self__, *,
                 s3_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for the constraints resource.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 URI for the constraints resource.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityBaselineConfigStatisticsResourceArgs:
    def __init__(__self__, *,
                 s3_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for the statistics resource.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 URI for the statistics resource.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityJobInputArgs:
    def __init__(__self__, *,
                 batch_transform_input: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputArgs']] = None,
                 endpoint_input: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputEndpointInputArgs']] = None):
        """
        :param pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputArgs'] batch_transform_input: Input object for the batch transform job. Fields are documented below.
        :param pulumi.Input['DataQualityJobDefinitionDataQualityJobInputEndpointInputArgs'] endpoint_input: Input object for the endpoint. Fields are documented below.
        """
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputArgs']]:
        """
        Input object for the batch transform job. Fields are documented below.
        """
        return pulumi.get(self, "batch_transform_input")

    @batch_transform_input.setter
    def batch_transform_input(self, value: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputArgs']]):
        pulumi.set(self, "batch_transform_input", value)

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputEndpointInputArgs']]:
        """
        Input object for the endpoint. Fields are documented below.
        """
        return pulumi.get(self, "endpoint_input")

    @endpoint_input.setter
    def endpoint_input(self, value: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputEndpointInputArgs']]):
        pulumi.set(self, "endpoint_input", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityJobInputBatchTransformInputArgs:
    def __init__(__self__, *,
                 data_captured_destination_s3_uri: pulumi.Input[str],
                 dataset_format: pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatArgs'],
                 local_path: Optional[pulumi.Input[str]] = None,
                 s3_data_distribution_type: Optional[pulumi.Input[str]] = None,
                 s3_input_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_captured_destination_s3_uri: The Amazon S3 location being used to capture the data.
        :param pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatArgs'] dataset_format: The dataset format for your batch transform job. Fields are documented below.
        :param pulumi.Input[str] local_path: Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
        :param pulumi.Input[str] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to `FullyReplicated`. Valid values are `FullyReplicated` or `ShardedByS3Key`
        :param pulumi.Input[str] s3_input_mode: Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job. `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File`.  Valid values are `Pipe` or `File`
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        if local_path is not None:
            pulumi.set(__self__, "local_path", local_path)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> pulumi.Input[str]:
        """
        The Amazon S3 location being used to capture the data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @data_captured_destination_s3_uri.setter
    def data_captured_destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_captured_destination_s3_uri", value)

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatArgs']:
        """
        The dataset format for your batch transform job. Fields are documented below.
        """
        return pulumi.get(self, "dataset_format")

    @dataset_format.setter
    def dataset_format(self, value: pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatArgs']):
        pulumi.set(self, "dataset_format", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input[str]]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to `FullyReplicated`. Valid values are `FullyReplicated` or `ShardedByS3Key`
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job. `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File`.  Valid values are `Pipe` or `File`
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_input_mode", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvArgs']] = None,
                 json: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonArgs']] = None):
        """
        :param pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvArgs'] csv: The CSV dataset used in the monitoring job. Fields are documented below.
        :param pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonArgs'] json: The JSON dataset used in the monitoring job. Fields are documented below.
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvArgs']]:
        """
        The CSV dataset used in the monitoring job. Fields are documented below.
        """
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvArgs']]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonArgs']]:
        """
        The JSON dataset used in the monitoring job. Fields are documented below.
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonArgs']]):
        pulumi.set(self, "json", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatCsvArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] header: Indicates if the CSV data has a header.
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the CSV data has a header.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "header", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormatJsonArgs:
    def __init__(__self__, *,
                 line: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] line: Indicates if the file should be read as a json object per line.
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the file should be read as a json object per line.
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "line", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityJobInputEndpointInputArgs:
    def __init__(__self__, *,
                 endpoint_name: pulumi.Input[str],
                 local_path: Optional[pulumi.Input[str]] = None,
                 s3_data_distribution_type: Optional[pulumi.Input[str]] = None,
                 s3_input_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] endpoint_name: An endpoint in customer's account which has `data_capture_config` enabled.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container. Defaults to `/opt/ml/processing/input`.
        :param pulumi.Input[str] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to `FullyReplicated`. Valid values are `FullyReplicated` or `ShardedByS3Key`
        :param pulumi.Input[str] s3_input_mode: Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job. `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File`.  Valid values are `Pipe` or `File`
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        if local_path is not None:
            pulumi.set(__self__, "local_path", local_path)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Input[str]:
        """
        An endpoint in customer's account which has `data_capture_config` enabled.
        """
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the filesystem where the endpoint data is available to the container. Defaults to `/opt/ml/processing/input`.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input[str]]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to `FullyReplicated`. Valid values are `FullyReplicated` or `ShardedByS3Key`
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job. `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File`.  Valid values are `Pipe` or `File`
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_input_mode", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityJobOutputConfigArgs:
    def __init__(__self__, *,
                 monitoring_outputs: pulumi.Input['DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsArgs'],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsArgs'] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded. Fields are documented below.
        :param pulumi.Input[str] kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> pulumi.Input['DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsArgs']:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded. Fields are documented below.
        """
        return pulumi.get(self, "monitoring_outputs")

    @monitoring_outputs.setter
    def monitoring_outputs(self, value: pulumi.Input['DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsArgs']):
        pulumi.set(self, "monitoring_outputs", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsArgs:
    def __init__(__self__, *,
                 s3_output: pulumi.Input['DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs']):
        """
        :param pulumi.Input['DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs'] s3_output: The Amazon S3 storage location where the results of a monitoring job are saved. Fields are documented below.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> pulumi.Input['DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs']:
        """
        The Amazon S3 storage location where the results of a monitoring job are saved. Fields are documented below.
        """
        return pulumi.get(self, "s3_output")

    @s3_output.setter
    def s3_output(self, value: pulumi.Input['DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs']):
        pulumi.set(self, "s3_output", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityJobOutputConfigMonitoringOutputsS3OutputArgs:
    def __init__(__self__, *,
                 s3_uri: pulumi.Input[str],
                 local_path: Optional[pulumi.Input[str]] = None,
                 s3_upload_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for the constraints resource.
        :param pulumi.Input[str] local_path: Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
        :param pulumi.Input[str] s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes. Valid values are `Continuous` or `EndOfJob`
        """
        pulumi.set(__self__, "s3_uri", s3_uri)
        if local_path is not None:
            pulumi.set(__self__, "local_path", local_path)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        The Amazon S3 URI for the constraints resource.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes. Valid values are `Continuous` or `EndOfJob`
        """
        return pulumi.get(self, "s3_upload_mode")

    @s3_upload_mode.setter
    def s3_upload_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_upload_mode", value)


@pulumi.input_type
class DataQualityJobDefinitionJobResourcesArgs:
    def __init__(__self__, *,
                 cluster_config: pulumi.Input['DataQualityJobDefinitionJobResourcesClusterConfigArgs']):
        """
        :param pulumi.Input['DataQualityJobDefinitionJobResourcesClusterConfigArgs'] cluster_config: The configuration for the cluster resources used to run the processing job. Fields are documented below.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Input['DataQualityJobDefinitionJobResourcesClusterConfigArgs']:
        """
        The configuration for the cluster resources used to run the processing job. Fields are documented below.
        """
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: pulumi.Input['DataQualityJobDefinitionJobResourcesClusterConfigArgs']):
        pulumi.set(self, "cluster_config", value)


@pulumi.input_type
class DataQualityJobDefinitionJobResourcesClusterConfigArgs:
    def __init__(__self__, *,
                 instance_count: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 volume_size_in_gb: pulumi.Input[int],
                 volume_kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1.
        :param pulumi.Input[str] instance_type: The ML compute instance type for the processing job.
        :param pulumi.Input[int] volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param pulumi.Input[str] volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Input[int]:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> pulumi.Input[int]:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_size_in_gb", value)

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")

    @volume_kms_key_id.setter
    def volume_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_kms_key_id", value)


@pulumi.input_type
class DataQualityJobDefinitionNetworkConfigArgs:
    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[pulumi.Input[bool]] = None,
                 enable_network_isolation: Optional[pulumi.Input[bool]] = None,
                 vpc_config: Optional[pulumi.Input['DataQualityJobDefinitionNetworkConfigVpcConfigArgs']] = None):
        """
        :param pulumi.Input[bool] enable_inter_container_traffic_encryption: Whether to encrypt all communications between the instances used for the monitoring jobs. Choose `true` to encrypt communications. Encryption provides greater security for distributed jobs, but the processing might take longer.
        :param pulumi.Input[bool] enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the monitoring job.
        :param pulumi.Input['DataQualityJobDefinitionNetworkConfigVpcConfigArgs'] vpc_config: Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. Fields are documented below.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to encrypt all communications between the instances used for the monitoring jobs. Choose `true` to encrypt communications. Encryption provides greater security for distributed jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @enable_inter_container_traffic_encryption.setter
    def enable_inter_container_traffic_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_inter_container_traffic_encryption", value)

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the monitoring job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @enable_network_isolation.setter
    def enable_network_isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_network_isolation", value)

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional[pulumi.Input['DataQualityJobDefinitionNetworkConfigVpcConfigArgs']]:
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. Fields are documented below.
        """
        return pulumi.get(self, "vpc_config")

    @vpc_config.setter
    def vpc_config(self, value: Optional[pulumi.Input['DataQualityJobDefinitionNetworkConfigVpcConfigArgs']]):
        pulumi.set(self, "vpc_config", value)


@pulumi.input_type
class DataQualityJobDefinitionNetworkConfigVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the `subnets` field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The ID of the subnets in the VPC to which you want to connect your training job or model.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the `subnets` field.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The ID of the subnets in the VPC to which you want to connect your training job or model.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class DataQualityJobDefinitionStoppingConditionArgs:
    def __init__(__self__, *,
                 max_runtime_in_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        if max_runtime_in_seconds is not None:
            pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")

    @max_runtime_in_seconds.setter
    def max_runtime_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_runtime_in_seconds", value)


@pulumi.input_type
class DeviceDeviceArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 iot_thing_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] device_name: The name of the device.
        :param pulumi.Input[str] description: A description for the device.
        :param pulumi.Input[str] iot_thing_name: Amazon Web Services Internet of Things (IoT) object name.
        """
        pulumi.set(__self__, "device_name", device_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iot_thing_name is not None:
            pulumi.set(__self__, "iot_thing_name", iot_thing_name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[str]:
        """
        The name of the device.
        """
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the device.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="iotThingName")
    def iot_thing_name(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon Web Services Internet of Things (IoT) object name.
        """
        return pulumi.get(self, "iot_thing_name")

    @iot_thing_name.setter
    def iot_thing_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iot_thing_name", value)


@pulumi.input_type
class DeviceFleetOutputConfigArgs:
    def __init__(__self__, *,
                 s3_output_location: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_output_location: The Amazon Simple Storage (S3) bucker URI.
        :param pulumi.Input[str] kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.
        """
        pulumi.set(__self__, "s3_output_location", s3_output_location)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3OutputLocation")
    def s3_output_location(self) -> pulumi.Input[str]:
        """
        The Amazon Simple Storage (S3) bucker URI.
        """
        return pulumi.get(self, "s3_output_location")

    @s3_output_location.setter
    def s3_output_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_output_location", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsArgs:
    def __init__(__self__, *,
                 execution_role: pulumi.Input[str],
                 jupyter_server_app_settings: Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs']] = None,
                 kernel_gateway_app_settings: Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] execution_role: The execution role for the space.
        :param pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs'] jupyter_server_app_settings: The Jupyter server's app settings. See Jupyter Server App Settings below.
        :param pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs'] kernel_gateway_app_settings: The kernel gateway app settings. See Kernel Gateway App Settings below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: The security groups for the Amazon Virtual Private Cloud that the space uses for communication.
        """
        pulumi.set(__self__, "execution_role", execution_role)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> pulumi.Input[str]:
        """
        The execution role for the space.
        """
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: pulumi.Input[str]):
        pulumi.set(self, "execution_role", value)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs']]:
        """
        The Jupyter server's app settings. See Jupyter Server App Settings below.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @jupyter_server_app_settings.setter
    def jupyter_server_app_settings(self, value: Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs']]):
        pulumi.set(self, "jupyter_server_app_settings", value)

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs']]:
        """
        The kernel gateway app settings. See Kernel Gateway App Settings below.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @kernel_gateway_app_settings.setter
    def kernel_gateway_app_settings(self, value: Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs']]):
        pulumi.set(self, "kernel_gateway_app_settings", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security groups for the Amazon Virtual Private Cloud that the space uses for communication.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsJupyterServerAppSettingsArgs:
    def __init__(__self__, *,
                 code_repositories: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]] code_repositories: A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        :param pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]:
        """
        A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        """
        return pulumi.get(self, "code_repositories")

    @code_repositories.setter
    def code_repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]):
        pulumi.set(self, "code_repositories", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] repository_url: The URL of the Git repository.
        """
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        """
        The URL of the Git repository.
        """
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsKernelGatewayAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsKernelGatewayAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] app_image_config_name: The name of the App Image Config.
        :param pulumi.Input[str] image_name: The name of the Custom Image.
        :param pulumi.Input[int] image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class DomainDefaultSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDefaultUserSettingsArgs:
    def __init__(__self__, *,
                 execution_role: pulumi.Input[str],
                 canvas_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsArgs']] = None,
                 jupyter_server_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsArgs']] = None,
                 kernel_gateway_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsArgs']] = None,
                 r_session_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsArgs']] = None,
                 r_studio_server_pro_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsRStudioServerProAppSettingsArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sharing_settings: Optional[pulumi.Input['DomainDefaultUserSettingsSharingSettingsArgs']] = None,
                 tensor_board_app_settings: Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsArgs']] = None):
        """
        :param pulumi.Input[str] execution_role: The execution role ARN for the user.
        :param pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsArgs'] canvas_app_settings: The Canvas app settings. See Canvas App Settings below.
        :param pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsArgs'] jupyter_server_app_settings: The Jupyter server's app settings. See Jupyter Server App Settings below.
        :param pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsArgs'] kernel_gateway_app_settings: The kernel gateway app settings. See Kernel Gateway App Settings below.
        :param pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsArgs'] r_session_app_settings: The RSession app settings. See RSession App Settings below.
        :param pulumi.Input['DomainDefaultUserSettingsRStudioServerProAppSettingsArgs'] r_studio_server_pro_app_settings: A collection of settings that configure user interaction with the RStudioServerPro app. See RStudioServerProAppSettings below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A list of security group IDs that will be attached to the user.
        :param pulumi.Input['DomainDefaultUserSettingsSharingSettingsArgs'] sharing_settings: The sharing settings. See Sharing Settings below.
        :param pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsArgs'] tensor_board_app_settings: The TensorBoard app settings. See TensorBoard App Settings below.
        """
        pulumi.set(__self__, "execution_role", execution_role)
        if canvas_app_settings is not None:
            pulumi.set(__self__, "canvas_app_settings", canvas_app_settings)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if r_session_app_settings is not None:
            pulumi.set(__self__, "r_session_app_settings", r_session_app_settings)
        if r_studio_server_pro_app_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_app_settings", r_studio_server_pro_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharing_settings is not None:
            pulumi.set(__self__, "sharing_settings", sharing_settings)
        if tensor_board_app_settings is not None:
            pulumi.set(__self__, "tensor_board_app_settings", tensor_board_app_settings)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> pulumi.Input[str]:
        """
        The execution role ARN for the user.
        """
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: pulumi.Input[str]):
        pulumi.set(self, "execution_role", value)

    @property
    @pulumi.getter(name="canvasAppSettings")
    def canvas_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsArgs']]:
        """
        The Canvas app settings. See Canvas App Settings below.
        """
        return pulumi.get(self, "canvas_app_settings")

    @canvas_app_settings.setter
    def canvas_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsArgs']]):
        pulumi.set(self, "canvas_app_settings", value)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsArgs']]:
        """
        The Jupyter server's app settings. See Jupyter Server App Settings below.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @jupyter_server_app_settings.setter
    def jupyter_server_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsArgs']]):
        pulumi.set(self, "jupyter_server_app_settings", value)

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsArgs']]:
        """
        The kernel gateway app settings. See Kernel Gateway App Settings below.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @kernel_gateway_app_settings.setter
    def kernel_gateway_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsArgs']]):
        pulumi.set(self, "kernel_gateway_app_settings", value)

    @property
    @pulumi.getter(name="rSessionAppSettings")
    def r_session_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsArgs']]:
        """
        The RSession app settings. See RSession App Settings below.
        """
        return pulumi.get(self, "r_session_app_settings")

    @r_session_app_settings.setter
    def r_session_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsArgs']]):
        pulumi.set(self, "r_session_app_settings", value)

    @property
    @pulumi.getter(name="rStudioServerProAppSettings")
    def r_studio_server_pro_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsRStudioServerProAppSettingsArgs']]:
        """
        A collection of settings that configure user interaction with the RStudioServerPro app. See RStudioServerProAppSettings below.
        """
        return pulumi.get(self, "r_studio_server_pro_app_settings")

    @r_studio_server_pro_app_settings.setter
    def r_studio_server_pro_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsRStudioServerProAppSettingsArgs']]):
        pulumi.set(self, "r_studio_server_pro_app_settings", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of security group IDs that will be attached to the user.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="sharingSettings")
    def sharing_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsSharingSettingsArgs']]:
        """
        The sharing settings. See Sharing Settings below.
        """
        return pulumi.get(self, "sharing_settings")

    @sharing_settings.setter
    def sharing_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsSharingSettingsArgs']]):
        pulumi.set(self, "sharing_settings", value)

    @property
    @pulumi.getter(name="tensorBoardAppSettings")
    def tensor_board_app_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsArgs']]:
        """
        The TensorBoard app settings. See TensorBoard App Settings below.
        """
        return pulumi.get(self, "tensor_board_app_settings")

    @tensor_board_app_settings.setter
    def tensor_board_app_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsArgs']]):
        pulumi.set(self, "tensor_board_app_settings", value)


@pulumi.input_type
class DomainDefaultUserSettingsCanvasAppSettingsArgs:
    def __init__(__self__, *,
                 model_register_settings: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsArgs']] = None,
                 time_series_forecasting_settings: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']] = None,
                 workspace_settings: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsArgs']] = None):
        """
        :param pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsArgs'] model_register_settings: The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
        :param pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs'] time_series_forecasting_settings: Time series forecast settings for the Canvas app. See Time Series Forecasting Settings below.
        :param pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsArgs'] workspace_settings: The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
        """
        if model_register_settings is not None:
            pulumi.set(__self__, "model_register_settings", model_register_settings)
        if time_series_forecasting_settings is not None:
            pulumi.set(__self__, "time_series_forecasting_settings", time_series_forecasting_settings)
        if workspace_settings is not None:
            pulumi.set(__self__, "workspace_settings", workspace_settings)

    @property
    @pulumi.getter(name="modelRegisterSettings")
    def model_register_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsArgs']]:
        """
        The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
        """
        return pulumi.get(self, "model_register_settings")

    @model_register_settings.setter
    def model_register_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsArgs']]):
        pulumi.set(self, "model_register_settings", value)

    @property
    @pulumi.getter(name="timeSeriesForecastingSettings")
    def time_series_forecasting_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']]:
        """
        Time series forecast settings for the Canvas app. See Time Series Forecasting Settings below.
        """
        return pulumi.get(self, "time_series_forecasting_settings")

    @time_series_forecasting_settings.setter
    def time_series_forecasting_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']]):
        pulumi.set(self, "time_series_forecasting_settings", value)

    @property
    @pulumi.getter(name="workspaceSettings")
    def workspace_settings(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsArgs']]:
        """
        The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
        """
        return pulumi.get(self, "workspace_settings")

    @workspace_settings.setter
    def workspace_settings(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsArgs']]):
        pulumi.set(self, "workspace_settings", value)


@pulumi.input_type
class DomainDefaultUserSettingsCanvasAppSettingsModelRegisterSettingsArgs:
    def __init__(__self__, *,
                 cross_account_model_register_role_arn: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cross_account_model_register_role_arn: The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
        :param pulumi.Input[str] status: Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are `ENABLED` and `DISABLED`.
        """
        if cross_account_model_register_role_arn is not None:
            pulumi.set(__self__, "cross_account_model_register_role_arn", cross_account_model_register_role_arn)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="crossAccountModelRegisterRoleArn")
    def cross_account_model_register_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
        """
        return pulumi.get(self, "cross_account_model_register_role_arn")

    @cross_account_model_register_role_arn.setter
    def cross_account_model_register_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cross_account_model_register_role_arn", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DomainDefaultUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs:
    def __init__(__self__, *,
                 amazon_forecast_role_arn: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] amazon_forecast_role_arn: The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the [AmazonSageMakerCanvasForecastAccess](https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-canvas.html#security-iam-awsmanpol-AmazonSageMakerCanvasForecastAccess) policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
        :param pulumi.Input[str] status: Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are `ENABLED` and `DISABLED`.
        """
        if amazon_forecast_role_arn is not None:
            pulumi.set(__self__, "amazon_forecast_role_arn", amazon_forecast_role_arn)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="amazonForecastRoleArn")
    def amazon_forecast_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the [AmazonSageMakerCanvasForecastAccess](https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-canvas.html#security-iam-awsmanpol-AmazonSageMakerCanvasForecastAccess) policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
        """
        return pulumi.get(self, "amazon_forecast_role_arn")

    @amazon_forecast_role_arn.setter
    def amazon_forecast_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amazon_forecast_role_arn", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DomainDefaultUserSettingsCanvasAppSettingsWorkspaceSettingsArgs:
    def __init__(__self__, *,
                 s3_artifact_path: Optional[pulumi.Input[str]] = None,
                 s3_kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_artifact_path: The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
        :param pulumi.Input[str] s3_kms_key_id: The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
        """
        if s3_artifact_path is not None:
            pulumi.set(__self__, "s3_artifact_path", s3_artifact_path)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)

    @property
    @pulumi.getter(name="s3ArtifactPath")
    def s3_artifact_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
        """
        return pulumi.get(self, "s3_artifact_path")

    @s3_artifact_path.setter
    def s3_artifact_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_artifact_path", value)

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")

    @s3_kms_key_id.setter
    def s3_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_kms_key_id", value)


@pulumi.input_type
class DomainDefaultUserSettingsJupyterServerAppSettingsArgs:
    def __init__(__self__, *,
                 code_repositories: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]] code_repositories: A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        :param pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]:
        """
        A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        """
        return pulumi.get(self, "code_repositories")

    @code_repositories.setter
    def code_repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]):
        pulumi.set(self, "code_repositories", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class DomainDefaultUserSettingsJupyterServerAppSettingsCodeRepositoryArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] repository_url: The URL of the Git repository.
        """
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        """
        The URL of the Git repository.
        """
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)


@pulumi.input_type
class DomainDefaultUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDefaultUserSettingsKernelGatewayAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs']]] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class DomainDefaultUserSettingsKernelGatewayAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] app_image_config_name: The name of the App Image Config.
        :param pulumi.Input[str] image_name: The name of the Custom Image.
        :param pulumi.Input[int] image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class DomainDefaultUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDefaultUserSettingsRSessionAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs']]] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs']]]]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class DomainDefaultUserSettingsRSessionAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] app_image_config_name: The name of the App Image Config.
        :param pulumi.Input[str] image_name: The name of the Custom Image.
        :param pulumi.Input[int] image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class DomainDefaultUserSettingsRSessionAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDefaultUserSettingsRStudioServerProAppSettingsArgs:
    def __init__(__self__, *,
                 access_status: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_status: Indicates whether the current user has access to the RStudioServerPro app. Valid values are `ENABLED` and `DISABLED`.
        :param pulumi.Input[str] user_group: The level of permissions that the user has within the RStudioServerPro app. This value defaults to `R_STUDIO_USER`. The `R_STUDIO_ADMIN` value allows the user access to the RStudio Administrative Dashboard. Valid values are `R_STUDIO_USER` and `R_STUDIO_ADMIN`.
        """
        if access_status is not None:
            pulumi.set(__self__, "access_status", access_status)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)

    @property
    @pulumi.getter(name="accessStatus")
    def access_status(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether the current user has access to the RStudioServerPro app. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "access_status")

    @access_status.setter
    def access_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_status", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input[str]]:
        """
        The level of permissions that the user has within the RStudioServerPro app. This value defaults to `R_STUDIO_USER`. The `R_STUDIO_ADMIN` value allows the user access to the RStudio Administrative Dashboard. Valid values are `R_STUDIO_USER` and `R_STUDIO_ADMIN`.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_group", value)


@pulumi.input_type
class DomainDefaultUserSettingsSharingSettingsArgs:
    def __init__(__self__, *,
                 notebook_output_option: Optional[pulumi.Input[str]] = None,
                 s3_kms_key_id: Optional[pulumi.Input[str]] = None,
                 s3_output_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] notebook_output_option: Whether to include the notebook cell output when sharing the notebook. The default is `Disabled`. Valid values are `Allowed` and `Disabled`.
        :param pulumi.Input[str] s3_kms_key_id: When `notebook_output_option` is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        :param pulumi.Input[str] s3_output_path: When `notebook_output_option` is Allowed, the Amazon S3 bucket used to save the notebook cell output.
        """
        if notebook_output_option is not None:
            pulumi.set(__self__, "notebook_output_option", notebook_output_option)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="notebookOutputOption")
    def notebook_output_option(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to include the notebook cell output when sharing the notebook. The default is `Disabled`. Valid values are `Allowed` and `Disabled`.
        """
        return pulumi.get(self, "notebook_output_option")

    @notebook_output_option.setter
    def notebook_output_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notebook_output_option", value)

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        When `notebook_output_option` is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")

    @s3_kms_key_id.setter
    def s3_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_kms_key_id", value)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[pulumi.Input[str]]:
        """
        When `notebook_output_option` is Allowed, the Amazon S3 bucket used to save the notebook cell output.
        """
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_output_path", value)


@pulumi.input_type
class DomainDefaultUserSettingsTensorBoardAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']] = None):
        """
        :param pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class DomainDefaultUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainDomainSettingsArgs:
    def __init__(__self__, *,
                 execution_role_identity_config: Optional[pulumi.Input[str]] = None,
                 r_studio_server_pro_domain_settings: Optional[pulumi.Input['DomainDomainSettingsRStudioServerProDomainSettingsArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] execution_role_identity_config: The configuration for attaching a SageMaker user profile name to the execution role as a sts:SourceIdentity key [AWS Docs](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html). Valid values are `USER_PROFILE_NAME` and `DISABLED`.
        :param pulumi.Input['DomainDomainSettingsRStudioServerProDomainSettingsArgs'] r_studio_server_pro_domain_settings: A collection of settings that configure the RStudioServerPro Domain-level app. see RStudioServerProDomainSettings below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        """
        if execution_role_identity_config is not None:
            pulumi.set(__self__, "execution_role_identity_config", execution_role_identity_config)
        if r_studio_server_pro_domain_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_domain_settings", r_studio_server_pro_domain_settings)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="executionRoleIdentityConfig")
    def execution_role_identity_config(self) -> Optional[pulumi.Input[str]]:
        """
        The configuration for attaching a SageMaker user profile name to the execution role as a sts:SourceIdentity key [AWS Docs](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html). Valid values are `USER_PROFILE_NAME` and `DISABLED`.
        """
        return pulumi.get(self, "execution_role_identity_config")

    @execution_role_identity_config.setter
    def execution_role_identity_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_role_identity_config", value)

    @property
    @pulumi.getter(name="rStudioServerProDomainSettings")
    def r_studio_server_pro_domain_settings(self) -> Optional[pulumi.Input['DomainDomainSettingsRStudioServerProDomainSettingsArgs']]:
        """
        A collection of settings that configure the RStudioServerPro Domain-level app. see RStudioServerProDomainSettings below.
        """
        return pulumi.get(self, "r_studio_server_pro_domain_settings")

    @r_studio_server_pro_domain_settings.setter
    def r_studio_server_pro_domain_settings(self, value: Optional[pulumi.Input['DomainDomainSettingsRStudioServerProDomainSettingsArgs']]):
        pulumi.set(self, "r_studio_server_pro_domain_settings", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)


@pulumi.input_type
class DomainDomainSettingsRStudioServerProDomainSettingsArgs:
    def __init__(__self__, *,
                 domain_execution_role_arn: pulumi.Input[str],
                 default_resource_spec: Optional[pulumi.Input['DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecArgs']] = None,
                 r_studio_connect_url: Optional[pulumi.Input[str]] = None,
                 r_studio_package_manager_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain_execution_role_arn: The ARN of the execution role for the RStudioServerPro Domain-level app.
        :param pulumi.Input['DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param pulumi.Input[str] r_studio_connect_url: A URL pointing to an RStudio Connect server.
        :param pulumi.Input[str] r_studio_package_manager_url: A URL pointing to an RStudio Package Manager server.
        """
        pulumi.set(__self__, "domain_execution_role_arn", domain_execution_role_arn)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if r_studio_connect_url is not None:
            pulumi.set(__self__, "r_studio_connect_url", r_studio_connect_url)
        if r_studio_package_manager_url is not None:
            pulumi.set(__self__, "r_studio_package_manager_url", r_studio_package_manager_url)

    @property
    @pulumi.getter(name="domainExecutionRoleArn")
    def domain_execution_role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the execution role for the RStudioServerPro Domain-level app.
        """
        return pulumi.get(self, "domain_execution_role_arn")

    @domain_execution_role_arn.setter
    def domain_execution_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_execution_role_arn", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="rStudioConnectUrl")
    def r_studio_connect_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL pointing to an RStudio Connect server.
        """
        return pulumi.get(self, "r_studio_connect_url")

    @r_studio_connect_url.setter
    def r_studio_connect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "r_studio_connect_url", value)

    @property
    @pulumi.getter(name="rStudioPackageManagerUrl")
    def r_studio_package_manager_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL pointing to an RStudio Package Manager server.
        """
        return pulumi.get(self, "r_studio_package_manager_url")

    @r_studio_package_manager_url.setter
    def r_studio_package_manager_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "r_studio_package_manager_url", value)


@pulumi.input_type
class DomainDomainSettingsRStudioServerProDomainSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type that the image version runs on.. For valid values see [SageMaker Instance Types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class DomainRetentionPolicyArgs:
    def __init__(__self__, *,
                 home_efs_file_system: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] home_efs_file_system: The retention policy for data stored on an Amazon Elastic File System (EFS) volume. Valid values are `Retain` or `Delete`.  Default value is `Retain`.
        """
        if home_efs_file_system is not None:
            pulumi.set(__self__, "home_efs_file_system", home_efs_file_system)

    @property
    @pulumi.getter(name="homeEfsFileSystem")
    def home_efs_file_system(self) -> Optional[pulumi.Input[str]]:
        """
        The retention policy for data stored on an Amazon Elastic File System (EFS) volume. Valid values are `Retain` or `Delete`.  Default value is `Retain`.
        """
        return pulumi.get(self, "home_efs_file_system")

    @home_efs_file_system.setter
    def home_efs_file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_efs_file_system", value)


@pulumi.input_type
class EndpointConfigurationAsyncInferenceConfigArgs:
    def __init__(__self__, *,
                 output_config: pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigArgs'],
                 client_config: Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigClientConfigArgs']] = None):
        """
        :param pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigArgs'] output_config: Specifies the configuration for asynchronous inference invocation outputs.
        :param pulumi.Input['EndpointConfigurationAsyncInferenceConfigClientConfigArgs'] client_config: Configures the behavior of the client used by Amazon SageMaker to interact with the model container during asynchronous inference.
        """
        pulumi.set(__self__, "output_config", output_config)
        if client_config is not None:
            pulumi.set(__self__, "client_config", client_config)

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigArgs']:
        """
        Specifies the configuration for asynchronous inference invocation outputs.
        """
        return pulumi.get(self, "output_config")

    @output_config.setter
    def output_config(self, value: pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigArgs']):
        pulumi.set(self, "output_config", value)

    @property
    @pulumi.getter(name="clientConfig")
    def client_config(self) -> Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigClientConfigArgs']]:
        """
        Configures the behavior of the client used by Amazon SageMaker to interact with the model container during asynchronous inference.
        """
        return pulumi.get(self, "client_config")

    @client_config.setter
    def client_config(self, value: Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigClientConfigArgs']]):
        pulumi.set(self, "client_config", value)


@pulumi.input_type
class EndpointConfigurationAsyncInferenceConfigClientConfigArgs:
    def __init__(__self__, *,
                 max_concurrent_invocations_per_instance: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_concurrent_invocations_per_instance: The maximum number of concurrent requests sent by the SageMaker client to the model container. If no value is provided, Amazon SageMaker will choose an optimal value for you.
        """
        if max_concurrent_invocations_per_instance is not None:
            pulumi.set(__self__, "max_concurrent_invocations_per_instance", max_concurrent_invocations_per_instance)

    @property
    @pulumi.getter(name="maxConcurrentInvocationsPerInstance")
    def max_concurrent_invocations_per_instance(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of concurrent requests sent by the SageMaker client to the model container. If no value is provided, Amazon SageMaker will choose an optimal value for you.
        """
        return pulumi.get(self, "max_concurrent_invocations_per_instance")

    @max_concurrent_invocations_per_instance.setter
    def max_concurrent_invocations_per_instance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_invocations_per_instance", value)


@pulumi.input_type
class EndpointConfigurationAsyncInferenceConfigOutputConfigArgs:
    def __init__(__self__, *,
                 s3_output_path: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 notification_config: Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs']] = None,
                 s3_failure_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_output_path: The Amazon S3 location to upload inference responses to.
        :param pulumi.Input[str] kms_key_id: The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the asynchronous inference output in Amazon S3.
        :param pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs'] notification_config: Specifies the configuration for notifications of inference results for asynchronous inference.
        :param pulumi.Input[str] s3_failure_path: The Amazon S3 location to upload failure inference responses to.
        """
        pulumi.set(__self__, "s3_output_path", s3_output_path)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if notification_config is not None:
            pulumi.set(__self__, "notification_config", notification_config)
        if s3_failure_path is not None:
            pulumi.set(__self__, "s3_failure_path", s3_failure_path)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> pulumi.Input[str]:
        """
        The Amazon S3 location to upload inference responses to.
        """
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_output_path", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the asynchronous inference output in Amazon S3.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="notificationConfig")
    def notification_config(self) -> Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs']]:
        """
        Specifies the configuration for notifications of inference results for asynchronous inference.
        """
        return pulumi.get(self, "notification_config")

    @notification_config.setter
    def notification_config(self, value: Optional[pulumi.Input['EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs']]):
        pulumi.set(self, "notification_config", value)

    @property
    @pulumi.getter(name="s3FailurePath")
    def s3_failure_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 location to upload failure inference responses to.
        """
        return pulumi.get(self, "s3_failure_path")

    @s3_failure_path.setter
    def s3_failure_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_failure_path", value)


@pulumi.input_type
class EndpointConfigurationAsyncInferenceConfigOutputConfigNotificationConfigArgs:
    def __init__(__self__, *,
                 error_topic: Optional[pulumi.Input[str]] = None,
                 include_inference_response_ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 success_topic: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] error_topic: Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] include_inference_response_ins: The Amazon SNS topics where you want the inference response to be included. Valid values are `SUCCESS_NOTIFICATION_TOPIC` and `ERROR_NOTIFICATION_TOPIC`.
        :param pulumi.Input[str] success_topic: Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.
        """
        if error_topic is not None:
            pulumi.set(__self__, "error_topic", error_topic)
        if include_inference_response_ins is not None:
            pulumi.set(__self__, "include_inference_response_ins", include_inference_response_ins)
        if success_topic is not None:
            pulumi.set(__self__, "success_topic", success_topic)

    @property
    @pulumi.getter(name="errorTopic")
    def error_topic(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.
        """
        return pulumi.get(self, "error_topic")

    @error_topic.setter
    def error_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_topic", value)

    @property
    @pulumi.getter(name="includeInferenceResponseIns")
    def include_inference_response_ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Amazon SNS topics where you want the inference response to be included. Valid values are `SUCCESS_NOTIFICATION_TOPIC` and `ERROR_NOTIFICATION_TOPIC`.
        """
        return pulumi.get(self, "include_inference_response_ins")

    @include_inference_response_ins.setter
    def include_inference_response_ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_inference_response_ins", value)

    @property
    @pulumi.getter(name="successTopic")
    def success_topic(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.
        """
        return pulumi.get(self, "success_topic")

    @success_topic.setter
    def success_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_topic", value)


@pulumi.input_type
class EndpointConfigurationDataCaptureConfigArgs:
    def __init__(__self__, *,
                 capture_options: pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureOptionArgs']]],
                 destination_s3_uri: pulumi.Input[str],
                 initial_sampling_percentage: pulumi.Input[int],
                 capture_content_type_header: Optional[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs']] = None,
                 enable_capture: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureOptionArgs']]] capture_options: Specifies what data to capture. Fields are documented below.
        :param pulumi.Input[str] destination_s3_uri: The URL for S3 location where the captured data is stored.
        :param pulumi.Input[int] initial_sampling_percentage: Portion of data to capture. Should be between 0 and 100.
        :param pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs'] capture_content_type_header: The content type headers to capture. Fields are documented below.
        :param pulumi.Input[bool] enable_capture: Flag to enable data capture. Defaults to `false`.
        :param pulumi.Input[str] kms_key_id: Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon SageMaker uses to encrypt the captured data on Amazon S3.
        """
        pulumi.set(__self__, "capture_options", capture_options)
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        pulumi.set(__self__, "initial_sampling_percentage", initial_sampling_percentage)
        if capture_content_type_header is not None:
            pulumi.set(__self__, "capture_content_type_header", capture_content_type_header)
        if enable_capture is not None:
            pulumi.set(__self__, "enable_capture", enable_capture)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="captureOptions")
    def capture_options(self) -> pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureOptionArgs']]]:
        """
        Specifies what data to capture. Fields are documented below.
        """
        return pulumi.get(self, "capture_options")

    @capture_options.setter
    def capture_options(self, value: pulumi.Input[Sequence[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureOptionArgs']]]):
        pulumi.set(self, "capture_options", value)

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> pulumi.Input[str]:
        """
        The URL for S3 location where the captured data is stored.
        """
        return pulumi.get(self, "destination_s3_uri")

    @destination_s3_uri.setter
    def destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_s3_uri", value)

    @property
    @pulumi.getter(name="initialSamplingPercentage")
    def initial_sampling_percentage(self) -> pulumi.Input[int]:
        """
        Portion of data to capture. Should be between 0 and 100.
        """
        return pulumi.get(self, "initial_sampling_percentage")

    @initial_sampling_percentage.setter
    def initial_sampling_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "initial_sampling_percentage", value)

    @property
    @pulumi.getter(name="captureContentTypeHeader")
    def capture_content_type_header(self) -> Optional[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs']]:
        """
        The content type headers to capture. Fields are documented below.
        """
        return pulumi.get(self, "capture_content_type_header")

    @capture_content_type_header.setter
    def capture_content_type_header(self, value: Optional[pulumi.Input['EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs']]):
        pulumi.set(self, "capture_content_type_header", value)

    @property
    @pulumi.getter(name="enableCapture")
    def enable_capture(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to enable data capture. Defaults to `false`.
        """
        return pulumi.get(self, "enable_capture")

    @enable_capture.setter
    def enable_capture(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_capture", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon SageMaker uses to encrypt the captured data on Amazon S3.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class EndpointConfigurationDataCaptureConfigCaptureContentTypeHeaderArgs:
    def __init__(__self__, *,
                 csv_content_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_content_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] csv_content_types: The CSV content type headers to capture.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] json_content_types: The JSON content type headers to capture.
        """
        if csv_content_types is not None:
            pulumi.set(__self__, "csv_content_types", csv_content_types)
        if json_content_types is not None:
            pulumi.set(__self__, "json_content_types", json_content_types)

    @property
    @pulumi.getter(name="csvContentTypes")
    def csv_content_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CSV content type headers to capture.
        """
        return pulumi.get(self, "csv_content_types")

    @csv_content_types.setter
    def csv_content_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "csv_content_types", value)

    @property
    @pulumi.getter(name="jsonContentTypes")
    def json_content_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The JSON content type headers to capture.
        """
        return pulumi.get(self, "json_content_types")

    @json_content_types.setter
    def json_content_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_content_types", value)


@pulumi.input_type
class EndpointConfigurationDataCaptureConfigCaptureOptionArgs:
    def __init__(__self__, *,
                 capture_mode: pulumi.Input[str]):
        """
        :param pulumi.Input[str] capture_mode: Specifies the data to be captured. Should be one of `Input` or `Output`.
        """
        pulumi.set(__self__, "capture_mode", capture_mode)

    @property
    @pulumi.getter(name="captureMode")
    def capture_mode(self) -> pulumi.Input[str]:
        """
        Specifies the data to be captured. Should be one of `Input` or `Output`.
        """
        return pulumi.get(self, "capture_mode")

    @capture_mode.setter
    def capture_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "capture_mode", value)


@pulumi.input_type
class EndpointConfigurationProductionVariantArgs:
    def __init__(__self__, *,
                 model_name: pulumi.Input[str],
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 container_startup_health_check_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 core_dump_config: Optional[pulumi.Input['EndpointConfigurationProductionVariantCoreDumpConfigArgs']] = None,
                 enable_ssm_access: Optional[pulumi.Input[bool]] = None,
                 initial_instance_count: Optional[pulumi.Input[int]] = None,
                 initial_variant_weight: Optional[pulumi.Input[float]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 model_data_download_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 serverless_config: Optional[pulumi.Input['EndpointConfigurationProductionVariantServerlessConfigArgs']] = None,
                 variant_name: Optional[pulumi.Input[str]] = None,
                 volume_size_in_gb: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] model_name: The name of the model to use.
        :param pulumi.Input[str] accelerator_type: The size of the Elastic Inference (EI) instance to use for the production variant.
        :param pulumi.Input[int] container_startup_health_check_timeout_in_seconds: The timeout value, in seconds, for your inference container to pass health check by SageMaker Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests). Valid values between `60` and `3600`.
        :param pulumi.Input['EndpointConfigurationProductionVariantCoreDumpConfigArgs'] core_dump_config: Specifies configuration for a core dump from the model container when the process crashes. Fields are documented below.
        :param pulumi.Input[bool] enable_ssm_access: You can use this parameter to turn on native Amazon Web Services Systems Manager (SSM) access for a production variant behind an endpoint. By default, SSM access is disabled for all production variants behind an endpoints.
        :param pulumi.Input[int] initial_instance_count: Initial number of instances used for auto-scaling.
        :param pulumi.Input[float] initial_variant_weight: Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. If unspecified, it defaults to `1.0`.
        :param pulumi.Input[str] instance_type: The type of instance to start.
        :param pulumi.Input[int] model_data_download_timeout_in_seconds: The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this production variant. Valid values between `60` and `3600`.
        :param pulumi.Input['EndpointConfigurationProductionVariantServerlessConfigArgs'] serverless_config: Specifies configuration for how an endpoint performs asynchronous inference.
        :param pulumi.Input[str] variant_name: The name of the variant. If omitted, this provider will assign a random, unique name.
        :param pulumi.Input[int] volume_size_in_gb: The size, in GB, of the ML storage volume attached to individual inference instance associated with the production variant. Valid values between `1` and `512`.
        """
        pulumi.set(__self__, "model_name", model_name)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if container_startup_health_check_timeout_in_seconds is not None:
            pulumi.set(__self__, "container_startup_health_check_timeout_in_seconds", container_startup_health_check_timeout_in_seconds)
        if core_dump_config is not None:
            pulumi.set(__self__, "core_dump_config", core_dump_config)
        if enable_ssm_access is not None:
            pulumi.set(__self__, "enable_ssm_access", enable_ssm_access)
        if initial_instance_count is not None:
            pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        if initial_variant_weight is not None:
            pulumi.set(__self__, "initial_variant_weight", initial_variant_weight)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if model_data_download_timeout_in_seconds is not None:
            pulumi.set(__self__, "model_data_download_timeout_in_seconds", model_data_download_timeout_in_seconds)
        if serverless_config is not None:
            pulumi.set(__self__, "serverless_config", serverless_config)
        if variant_name is not None:
            pulumi.set(__self__, "variant_name", variant_name)
        if volume_size_in_gb is not None:
            pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> pulumi.Input[str]:
        """
        The name of the model to use.
        """
        return pulumi.get(self, "model_name")

    @model_name.setter
    def model_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_name", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the Elastic Inference (EI) instance to use for the production variant.
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter(name="containerStartupHealthCheckTimeoutInSeconds")
    def container_startup_health_check_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout value, in seconds, for your inference container to pass health check by SageMaker Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests). Valid values between `60` and `3600`.
        """
        return pulumi.get(self, "container_startup_health_check_timeout_in_seconds")

    @container_startup_health_check_timeout_in_seconds.setter
    def container_startup_health_check_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_startup_health_check_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="coreDumpConfig")
    def core_dump_config(self) -> Optional[pulumi.Input['EndpointConfigurationProductionVariantCoreDumpConfigArgs']]:
        """
        Specifies configuration for a core dump from the model container when the process crashes. Fields are documented below.
        """
        return pulumi.get(self, "core_dump_config")

    @core_dump_config.setter
    def core_dump_config(self, value: Optional[pulumi.Input['EndpointConfigurationProductionVariantCoreDumpConfigArgs']]):
        pulumi.set(self, "core_dump_config", value)

    @property
    @pulumi.getter(name="enableSsmAccess")
    def enable_ssm_access(self) -> Optional[pulumi.Input[bool]]:
        """
        You can use this parameter to turn on native Amazon Web Services Systems Manager (SSM) access for a production variant behind an endpoint. By default, SSM access is disabled for all production variants behind an endpoints.
        """
        return pulumi.get(self, "enable_ssm_access")

    @enable_ssm_access.setter
    def enable_ssm_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ssm_access", value)

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Initial number of instances used for auto-scaling.
        """
        return pulumi.get(self, "initial_instance_count")

    @initial_instance_count.setter
    def initial_instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_instance_count", value)

    @property
    @pulumi.getter(name="initialVariantWeight")
    def initial_variant_weight(self) -> Optional[pulumi.Input[float]]:
        """
        Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. If unspecified, it defaults to `1.0`.
        """
        return pulumi.get(self, "initial_variant_weight")

    @initial_variant_weight.setter
    def initial_variant_weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "initial_variant_weight", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of instance to start.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="modelDataDownloadTimeoutInSeconds")
    def model_data_download_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this production variant. Valid values between `60` and `3600`.
        """
        return pulumi.get(self, "model_data_download_timeout_in_seconds")

    @model_data_download_timeout_in_seconds.setter
    def model_data_download_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "model_data_download_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="serverlessConfig")
    def serverless_config(self) -> Optional[pulumi.Input['EndpointConfigurationProductionVariantServerlessConfigArgs']]:
        """
        Specifies configuration for how an endpoint performs asynchronous inference.
        """
        return pulumi.get(self, "serverless_config")

    @serverless_config.setter
    def serverless_config(self, value: Optional[pulumi.Input['EndpointConfigurationProductionVariantServerlessConfigArgs']]):
        pulumi.set(self, "serverless_config", value)

    @property
    @pulumi.getter(name="variantName")
    def variant_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variant. If omitted, this provider will assign a random, unique name.
        """
        return pulumi.get(self, "variant_name")

    @variant_name.setter
    def variant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variant_name", value)

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> Optional[pulumi.Input[int]]:
        """
        The size, in GB, of the ML storage volume attached to individual inference instance associated with the production variant. Valid values between `1` and `512`.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size_in_gb", value)


@pulumi.input_type
class EndpointConfigurationProductionVariantCoreDumpConfigArgs:
    def __init__(__self__, *,
                 destination_s3_uri: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] destination_s3_uri: The Amazon S3 bucket to send the core dump to.
        :param pulumi.Input[str] kms_key_id: The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the core dump data at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> pulumi.Input[str]:
        """
        The Amazon S3 bucket to send the core dump to.
        """
        return pulumi.get(self, "destination_s3_uri")

    @destination_s3_uri.setter
    def destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_s3_uri", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the core dump data at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class EndpointConfigurationProductionVariantServerlessConfigArgs:
    def __init__(__self__, *,
                 max_concurrency: pulumi.Input[int],
                 memory_size_in_mb: pulumi.Input[int],
                 provisioned_concurrency: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_concurrency: The maximum number of concurrent invocations your serverless endpoint can process. Valid values are between `1` and `200`.
        :param pulumi.Input[int] memory_size_in_mb: The memory size of your serverless endpoint. Valid values are in 1 GB increments: `1024` MB, `2048` MB, `3072` MB, `4096` MB, `5120` MB, or `6144` MB.
        :param pulumi.Input[int] provisioned_concurrency: The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to `max_concurrency`. Valid values are between `1` and `200`.
        """
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "memory_size_in_mb", memory_size_in_mb)
        if provisioned_concurrency is not None:
            pulumi.set(__self__, "provisioned_concurrency", provisioned_concurrency)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> pulumi.Input[int]:
        """
        The maximum number of concurrent invocations your serverless endpoint can process. Valid values are between `1` and `200`.
        """
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="memorySizeInMb")
    def memory_size_in_mb(self) -> pulumi.Input[int]:
        """
        The memory size of your serverless endpoint. Valid values are in 1 GB increments: `1024` MB, `2048` MB, `3072` MB, `4096` MB, `5120` MB, or `6144` MB.
        """
        return pulumi.get(self, "memory_size_in_mb")

    @memory_size_in_mb.setter
    def memory_size_in_mb(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory_size_in_mb", value)

    @property
    @pulumi.getter(name="provisionedConcurrency")
    def provisioned_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to `max_concurrency`. Valid values are between `1` and `200`.
        """
        return pulumi.get(self, "provisioned_concurrency")

    @provisioned_concurrency.setter
    def provisioned_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "provisioned_concurrency", value)


@pulumi.input_type
class EndpointConfigurationShadowProductionVariantArgs:
    def __init__(__self__, *,
                 model_name: pulumi.Input[str],
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 container_startup_health_check_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 core_dump_config: Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs']] = None,
                 enable_ssm_access: Optional[pulumi.Input[bool]] = None,
                 initial_instance_count: Optional[pulumi.Input[int]] = None,
                 initial_variant_weight: Optional[pulumi.Input[float]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 model_data_download_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 serverless_config: Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantServerlessConfigArgs']] = None,
                 variant_name: Optional[pulumi.Input[str]] = None,
                 volume_size_in_gb: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] model_name: The name of the model to use.
        :param pulumi.Input[str] accelerator_type: The size of the Elastic Inference (EI) instance to use for the production variant.
        :param pulumi.Input[int] container_startup_health_check_timeout_in_seconds: The timeout value, in seconds, for your inference container to pass health check by SageMaker Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests). Valid values between `60` and `3600`.
        :param pulumi.Input['EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs'] core_dump_config: Specifies configuration for a core dump from the model container when the process crashes. Fields are documented below.
        :param pulumi.Input[bool] enable_ssm_access: You can use this parameter to turn on native Amazon Web Services Systems Manager (SSM) access for a production variant behind an endpoint. By default, SSM access is disabled for all production variants behind an endpoints.
        :param pulumi.Input[int] initial_instance_count: Initial number of instances used for auto-scaling.
        :param pulumi.Input[float] initial_variant_weight: Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. If unspecified, it defaults to `1.0`.
        :param pulumi.Input[str] instance_type: The type of instance to start.
        :param pulumi.Input[int] model_data_download_timeout_in_seconds: The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this production variant. Valid values between `60` and `3600`.
        :param pulumi.Input['EndpointConfigurationShadowProductionVariantServerlessConfigArgs'] serverless_config: Specifies configuration for how an endpoint performs asynchronous inference.
        :param pulumi.Input[str] variant_name: The name of the variant. If omitted, this provider will assign a random, unique name.
        :param pulumi.Input[int] volume_size_in_gb: The size, in GB, of the ML storage volume attached to individual inference instance associated with the production variant. Valid values between `1` and `512`.
        """
        pulumi.set(__self__, "model_name", model_name)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if container_startup_health_check_timeout_in_seconds is not None:
            pulumi.set(__self__, "container_startup_health_check_timeout_in_seconds", container_startup_health_check_timeout_in_seconds)
        if core_dump_config is not None:
            pulumi.set(__self__, "core_dump_config", core_dump_config)
        if enable_ssm_access is not None:
            pulumi.set(__self__, "enable_ssm_access", enable_ssm_access)
        if initial_instance_count is not None:
            pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        if initial_variant_weight is not None:
            pulumi.set(__self__, "initial_variant_weight", initial_variant_weight)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if model_data_download_timeout_in_seconds is not None:
            pulumi.set(__self__, "model_data_download_timeout_in_seconds", model_data_download_timeout_in_seconds)
        if serverless_config is not None:
            pulumi.set(__self__, "serverless_config", serverless_config)
        if variant_name is not None:
            pulumi.set(__self__, "variant_name", variant_name)
        if volume_size_in_gb is not None:
            pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> pulumi.Input[str]:
        """
        The name of the model to use.
        """
        return pulumi.get(self, "model_name")

    @model_name.setter
    def model_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_name", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the Elastic Inference (EI) instance to use for the production variant.
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter(name="containerStartupHealthCheckTimeoutInSeconds")
    def container_startup_health_check_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout value, in seconds, for your inference container to pass health check by SageMaker Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests). Valid values between `60` and `3600`.
        """
        return pulumi.get(self, "container_startup_health_check_timeout_in_seconds")

    @container_startup_health_check_timeout_in_seconds.setter
    def container_startup_health_check_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_startup_health_check_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="coreDumpConfig")
    def core_dump_config(self) -> Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs']]:
        """
        Specifies configuration for a core dump from the model container when the process crashes. Fields are documented below.
        """
        return pulumi.get(self, "core_dump_config")

    @core_dump_config.setter
    def core_dump_config(self, value: Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs']]):
        pulumi.set(self, "core_dump_config", value)

    @property
    @pulumi.getter(name="enableSsmAccess")
    def enable_ssm_access(self) -> Optional[pulumi.Input[bool]]:
        """
        You can use this parameter to turn on native Amazon Web Services Systems Manager (SSM) access for a production variant behind an endpoint. By default, SSM access is disabled for all production variants behind an endpoints.
        """
        return pulumi.get(self, "enable_ssm_access")

    @enable_ssm_access.setter
    def enable_ssm_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ssm_access", value)

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Initial number of instances used for auto-scaling.
        """
        return pulumi.get(self, "initial_instance_count")

    @initial_instance_count.setter
    def initial_instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_instance_count", value)

    @property
    @pulumi.getter(name="initialVariantWeight")
    def initial_variant_weight(self) -> Optional[pulumi.Input[float]]:
        """
        Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. If unspecified, it defaults to `1.0`.
        """
        return pulumi.get(self, "initial_variant_weight")

    @initial_variant_weight.setter
    def initial_variant_weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "initial_variant_weight", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of instance to start.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="modelDataDownloadTimeoutInSeconds")
    def model_data_download_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this production variant. Valid values between `60` and `3600`.
        """
        return pulumi.get(self, "model_data_download_timeout_in_seconds")

    @model_data_download_timeout_in_seconds.setter
    def model_data_download_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "model_data_download_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="serverlessConfig")
    def serverless_config(self) -> Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantServerlessConfigArgs']]:
        """
        Specifies configuration for how an endpoint performs asynchronous inference.
        """
        return pulumi.get(self, "serverless_config")

    @serverless_config.setter
    def serverless_config(self, value: Optional[pulumi.Input['EndpointConfigurationShadowProductionVariantServerlessConfigArgs']]):
        pulumi.set(self, "serverless_config", value)

    @property
    @pulumi.getter(name="variantName")
    def variant_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variant. If omitted, this provider will assign a random, unique name.
        """
        return pulumi.get(self, "variant_name")

    @variant_name.setter
    def variant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variant_name", value)

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> Optional[pulumi.Input[int]]:
        """
        The size, in GB, of the ML storage volume attached to individual inference instance associated with the production variant. Valid values between `1` and `512`.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size_in_gb", value)


@pulumi.input_type
class EndpointConfigurationShadowProductionVariantCoreDumpConfigArgs:
    def __init__(__self__, *,
                 destination_s3_uri: pulumi.Input[str],
                 kms_key_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] destination_s3_uri: The Amazon S3 bucket to send the core dump to.
        :param pulumi.Input[str] kms_key_id: The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the core dump data at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> pulumi.Input[str]:
        """
        The Amazon S3 bucket to send the core dump to.
        """
        return pulumi.get(self, "destination_s3_uri")

    @destination_s3_uri.setter
    def destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_s3_uri", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Input[str]:
        """
        The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the core dump data at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class EndpointConfigurationShadowProductionVariantServerlessConfigArgs:
    def __init__(__self__, *,
                 max_concurrency: pulumi.Input[int],
                 memory_size_in_mb: pulumi.Input[int],
                 provisioned_concurrency: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_concurrency: The maximum number of concurrent invocations your serverless endpoint can process. Valid values are between `1` and `200`.
        :param pulumi.Input[int] memory_size_in_mb: The memory size of your serverless endpoint. Valid values are in 1 GB increments: `1024` MB, `2048` MB, `3072` MB, `4096` MB, `5120` MB, or `6144` MB.
        :param pulumi.Input[int] provisioned_concurrency: The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to `max_concurrency`. Valid values are between `1` and `200`.
        """
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "memory_size_in_mb", memory_size_in_mb)
        if provisioned_concurrency is not None:
            pulumi.set(__self__, "provisioned_concurrency", provisioned_concurrency)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> pulumi.Input[int]:
        """
        The maximum number of concurrent invocations your serverless endpoint can process. Valid values are between `1` and `200`.
        """
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="memorySizeInMb")
    def memory_size_in_mb(self) -> pulumi.Input[int]:
        """
        The memory size of your serverless endpoint. Valid values are in 1 GB increments: `1024` MB, `2048` MB, `3072` MB, `4096` MB, `5120` MB, or `6144` MB.
        """
        return pulumi.get(self, "memory_size_in_mb")

    @memory_size_in_mb.setter
    def memory_size_in_mb(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory_size_in_mb", value)

    @property
    @pulumi.getter(name="provisionedConcurrency")
    def provisioned_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to `max_concurrency`. Valid values are between `1` and `200`.
        """
        return pulumi.get(self, "provisioned_concurrency")

    @provisioned_concurrency.setter
    def provisioned_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "provisioned_concurrency", value)


@pulumi.input_type
class EndpointDeploymentConfigArgs:
    def __init__(__self__, *,
                 auto_rollback_configuration: Optional[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationArgs']] = None,
                 blue_green_update_policy: Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyArgs']] = None,
                 rolling_update_policy: Optional[pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyArgs']] = None):
        """
        :param pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationArgs'] auto_rollback_configuration: Automatic rollback configuration for handling endpoint deployment failures and recovery. See Auto Rollback Configuration.
        :param pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyArgs'] blue_green_update_policy: Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. See Blue Green Update Config.
        :param pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyArgs'] rolling_update_policy: Specifies a rolling deployment strategy for updating a SageMaker endpoint. See Rolling Update Policy.
        """
        if auto_rollback_configuration is not None:
            pulumi.set(__self__, "auto_rollback_configuration", auto_rollback_configuration)
        if blue_green_update_policy is not None:
            pulumi.set(__self__, "blue_green_update_policy", blue_green_update_policy)
        if rolling_update_policy is not None:
            pulumi.set(__self__, "rolling_update_policy", rolling_update_policy)

    @property
    @pulumi.getter(name="autoRollbackConfiguration")
    def auto_rollback_configuration(self) -> Optional[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationArgs']]:
        """
        Automatic rollback configuration for handling endpoint deployment failures and recovery. See Auto Rollback Configuration.
        """
        return pulumi.get(self, "auto_rollback_configuration")

    @auto_rollback_configuration.setter
    def auto_rollback_configuration(self, value: Optional[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationArgs']]):
        pulumi.set(self, "auto_rollback_configuration", value)

    @property
    @pulumi.getter(name="blueGreenUpdatePolicy")
    def blue_green_update_policy(self) -> Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyArgs']]:
        """
        Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. See Blue Green Update Config.
        """
        return pulumi.get(self, "blue_green_update_policy")

    @blue_green_update_policy.setter
    def blue_green_update_policy(self, value: Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyArgs']]):
        pulumi.set(self, "blue_green_update_policy", value)

    @property
    @pulumi.getter(name="rollingUpdatePolicy")
    def rolling_update_policy(self) -> Optional[pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyArgs']]:
        """
        Specifies a rolling deployment strategy for updating a SageMaker endpoint. See Rolling Update Policy.
        """
        return pulumi.get(self, "rolling_update_policy")

    @rolling_update_policy.setter
    def rolling_update_policy(self, value: Optional[pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyArgs']]):
        pulumi.set(self, "rolling_update_policy", value)


@pulumi.input_type
class EndpointDeploymentConfigAutoRollbackConfigurationArgs:
    def __init__(__self__, *,
                 alarms: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs']]] alarms: List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint. If any alarms are tripped during a deployment, SageMaker rolls back the deployment. See Alarms.
        """
        if alarms is not None:
            pulumi.set(__self__, "alarms", alarms)

    @property
    @pulumi.getter
    def alarms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs']]]]:
        """
        List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint. If any alarms are tripped during a deployment, SageMaker rolls back the deployment. See Alarms.
        """
        return pulumi.get(self, "alarms")

    @alarms.setter
    def alarms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs']]]]):
        pulumi.set(self, "alarms", value)


@pulumi.input_type
class EndpointDeploymentConfigAutoRollbackConfigurationAlarmArgs:
    def __init__(__self__, *,
                 alarm_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] alarm_name: The name of a CloudWatch alarm in your account.
        """
        pulumi.set(__self__, "alarm_name", alarm_name)

    @property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> pulumi.Input[str]:
        """
        The name of a CloudWatch alarm in your account.
        """
        return pulumi.get(self, "alarm_name")

    @alarm_name.setter
    def alarm_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "alarm_name", value)


@pulumi.input_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyArgs:
    def __init__(__self__, *,
                 traffic_routing_configuration: pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs'],
                 maximum_execution_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 termination_wait_in_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs'] traffic_routing_configuration: Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment. See Traffic Routing Configuration.
        :param pulumi.Input[int] maximum_execution_timeout_in_seconds: Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in `termination_wait_in_seconds` and `wait_interval_in_seconds`. Valid values are between `600` and `14400`.
        :param pulumi.Input[int] termination_wait_in_seconds: Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is `0`. Valid values are between `0` and `3600`.
        """
        pulumi.set(__self__, "traffic_routing_configuration", traffic_routing_configuration)
        if maximum_execution_timeout_in_seconds is not None:
            pulumi.set(__self__, "maximum_execution_timeout_in_seconds", maximum_execution_timeout_in_seconds)
        if termination_wait_in_seconds is not None:
            pulumi.set(__self__, "termination_wait_in_seconds", termination_wait_in_seconds)

    @property
    @pulumi.getter(name="trafficRoutingConfiguration")
    def traffic_routing_configuration(self) -> pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs']:
        """
        Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment. See Traffic Routing Configuration.
        """
        return pulumi.get(self, "traffic_routing_configuration")

    @traffic_routing_configuration.setter
    def traffic_routing_configuration(self, value: pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs']):
        pulumi.set(self, "traffic_routing_configuration", value)

    @property
    @pulumi.getter(name="maximumExecutionTimeoutInSeconds")
    def maximum_execution_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in `termination_wait_in_seconds` and `wait_interval_in_seconds`. Valid values are between `600` and `14400`.
        """
        return pulumi.get(self, "maximum_execution_timeout_in_seconds")

    @maximum_execution_timeout_in_seconds.setter
    def maximum_execution_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_execution_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="terminationWaitInSeconds")
    def termination_wait_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is `0`. Valid values are between `0` and `3600`.
        """
        return pulumi.get(self, "termination_wait_in_seconds")

    @termination_wait_in_seconds.setter
    def termination_wait_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "termination_wait_in_seconds", value)


@pulumi.input_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 wait_interval_in_seconds: pulumi.Input[int],
                 canary_size: Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs']] = None,
                 linear_step_size: Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs']] = None):
        """
        :param pulumi.Input[str] type: Traffic routing strategy type. Valid values are: `ALL_AT_ONCE`, `CANARY`, and `LINEAR`.
        :param pulumi.Input[int] wait_interval_in_seconds: The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet. Valid values are between `0` and `3600`.
        :param pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs'] canary_size: Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count. See Canary Size.
        :param pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs'] linear_step_size: Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count. See Linear Step Size.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "wait_interval_in_seconds", wait_interval_in_seconds)
        if canary_size is not None:
            pulumi.set(__self__, "canary_size", canary_size)
        if linear_step_size is not None:
            pulumi.set(__self__, "linear_step_size", linear_step_size)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Traffic routing strategy type. Valid values are: `ALL_AT_ONCE`, `CANARY`, and `LINEAR`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="waitIntervalInSeconds")
    def wait_interval_in_seconds(self) -> pulumi.Input[int]:
        """
        The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet. Valid values are between `0` and `3600`.
        """
        return pulumi.get(self, "wait_interval_in_seconds")

    @wait_interval_in_seconds.setter
    def wait_interval_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "wait_interval_in_seconds", value)

    @property
    @pulumi.getter(name="canarySize")
    def canary_size(self) -> Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs']]:
        """
        Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count. See Canary Size.
        """
        return pulumi.get(self, "canary_size")

    @canary_size.setter
    def canary_size(self, value: Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs']]):
        pulumi.set(self, "canary_size", value)

    @property
    @pulumi.getter(name="linearStepSize")
    def linear_step_size(self) -> Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs']]:
        """
        Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count. See Linear Step Size.
        """
        return pulumi.get(self, "linear_step_size")

    @linear_step_size.setter
    def linear_step_size(self, value: Optional[pulumi.Input['EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs']]):
        pulumi.set(self, "linear_step_size", value)


@pulumi.input_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationCanarySizeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] type: Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        :param pulumi.Input[int] value: Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EndpointDeploymentConfigBlueGreenUpdatePolicyTrafficRoutingConfigurationLinearStepSizeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] type: Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        :param pulumi.Input[int] value: Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EndpointDeploymentConfigRollingUpdatePolicyArgs:
    def __init__(__self__, *,
                 maximum_batch_size: pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSizeArgs'],
                 wait_interval_in_seconds: pulumi.Input[int],
                 maximum_execution_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 rollback_maximum_batch_size: Optional[pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSizeArgs']] = None):
        """
        :param pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSizeArgs'] maximum_batch_size: Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count. See Maximum Batch Size.
        :param pulumi.Input[int] wait_interval_in_seconds: The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet. Valid values are between `0` and `3600`.
        :param pulumi.Input[int] maximum_execution_timeout_in_seconds: The time limit for the total deployment. Exceeding this limit causes a timeout. Valid values are between `600` and `14400`.
        :param pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSizeArgs'] rollback_maximum_batch_size: Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback. See Rollback Maximum Batch Size.
        """
        pulumi.set(__self__, "maximum_batch_size", maximum_batch_size)
        pulumi.set(__self__, "wait_interval_in_seconds", wait_interval_in_seconds)
        if maximum_execution_timeout_in_seconds is not None:
            pulumi.set(__self__, "maximum_execution_timeout_in_seconds", maximum_execution_timeout_in_seconds)
        if rollback_maximum_batch_size is not None:
            pulumi.set(__self__, "rollback_maximum_batch_size", rollback_maximum_batch_size)

    @property
    @pulumi.getter(name="maximumBatchSize")
    def maximum_batch_size(self) -> pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSizeArgs']:
        """
        Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count. See Maximum Batch Size.
        """
        return pulumi.get(self, "maximum_batch_size")

    @maximum_batch_size.setter
    def maximum_batch_size(self, value: pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSizeArgs']):
        pulumi.set(self, "maximum_batch_size", value)

    @property
    @pulumi.getter(name="waitIntervalInSeconds")
    def wait_interval_in_seconds(self) -> pulumi.Input[int]:
        """
        The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet. Valid values are between `0` and `3600`.
        """
        return pulumi.get(self, "wait_interval_in_seconds")

    @wait_interval_in_seconds.setter
    def wait_interval_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "wait_interval_in_seconds", value)

    @property
    @pulumi.getter(name="maximumExecutionTimeoutInSeconds")
    def maximum_execution_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The time limit for the total deployment. Exceeding this limit causes a timeout. Valid values are between `600` and `14400`.
        """
        return pulumi.get(self, "maximum_execution_timeout_in_seconds")

    @maximum_execution_timeout_in_seconds.setter
    def maximum_execution_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_execution_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="rollbackMaximumBatchSize")
    def rollback_maximum_batch_size(self) -> Optional[pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSizeArgs']]:
        """
        Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback. See Rollback Maximum Batch Size.
        """
        return pulumi.get(self, "rollback_maximum_batch_size")

    @rollback_maximum_batch_size.setter
    def rollback_maximum_batch_size(self, value: Optional[pulumi.Input['EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSizeArgs']]):
        pulumi.set(self, "rollback_maximum_batch_size", value)


@pulumi.input_type
class EndpointDeploymentConfigRollingUpdatePolicyMaximumBatchSizeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] type: Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        :param pulumi.Input[int] value: Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EndpointDeploymentConfigRollingUpdatePolicyRollbackMaximumBatchSizeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] type: Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        :param pulumi.Input[int] value: Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Specifies the endpoint capacity type. Valid values are: `INSTANCE_COUNT`, or `CAPACITY_PERCENT`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        Defines the capacity size, either as a number of instances or a capacity percentage.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FeatureGroupFeatureDefinitionArgs:
    def __init__(__self__, *,
                 feature_name: Optional[pulumi.Input[str]] = None,
                 feature_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] feature_name: The name of a feature. `feature_name` cannot be any of the following: `is_deleted`, `write_time`, `api_invocation_time`.
        :param pulumi.Input[str] feature_type: The value type of a feature. Valid values are `Integral`, `Fractional`, or `String`.
        """
        if feature_name is not None:
            pulumi.set(__self__, "feature_name", feature_name)
        if feature_type is not None:
            pulumi.set(__self__, "feature_type", feature_type)

    @property
    @pulumi.getter(name="featureName")
    def feature_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a feature. `feature_name` cannot be any of the following: `is_deleted`, `write_time`, `api_invocation_time`.
        """
        return pulumi.get(self, "feature_name")

    @feature_name.setter
    def feature_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_name", value)

    @property
    @pulumi.getter(name="featureType")
    def feature_type(self) -> Optional[pulumi.Input[str]]:
        """
        The value type of a feature. Valid values are `Integral`, `Fractional`, or `String`.
        """
        return pulumi.get(self, "feature_type")

    @feature_type.setter
    def feature_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_type", value)


@pulumi.input_type
class FeatureGroupOfflineStoreConfigArgs:
    def __init__(__self__, *,
                 s3_storage_config: pulumi.Input['FeatureGroupOfflineStoreConfigS3StorageConfigArgs'],
                 data_catalog_config: Optional[pulumi.Input['FeatureGroupOfflineStoreConfigDataCatalogConfigArgs']] = None,
                 disable_glue_table_creation: Optional[pulumi.Input[bool]] = None,
                 table_format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['FeatureGroupOfflineStoreConfigS3StorageConfigArgs'] s3_storage_config: The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.
        :param pulumi.Input['FeatureGroupOfflineStoreConfigDataCatalogConfigArgs'] data_catalog_config: The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.
        :param pulumi.Input[bool] disable_glue_table_creation: Set to `true` to turn Online Store On.
        :param pulumi.Input[str] table_format: Format for the offline store table. Supported formats are `Glue` (Default) and Apache `Iceberg` (https://iceberg.apache.org/).
        """
        pulumi.set(__self__, "s3_storage_config", s3_storage_config)
        if data_catalog_config is not None:
            pulumi.set(__self__, "data_catalog_config", data_catalog_config)
        if disable_glue_table_creation is not None:
            pulumi.set(__self__, "disable_glue_table_creation", disable_glue_table_creation)
        if table_format is not None:
            pulumi.set(__self__, "table_format", table_format)

    @property
    @pulumi.getter(name="s3StorageConfig")
    def s3_storage_config(self) -> pulumi.Input['FeatureGroupOfflineStoreConfigS3StorageConfigArgs']:
        """
        The Amazon Simple Storage (Amazon S3) location of OfflineStore. See S3 Storage Config Below.
        """
        return pulumi.get(self, "s3_storage_config")

    @s3_storage_config.setter
    def s3_storage_config(self, value: pulumi.Input['FeatureGroupOfflineStoreConfigS3StorageConfigArgs']):
        pulumi.set(self, "s3_storage_config", value)

    @property
    @pulumi.getter(name="dataCatalogConfig")
    def data_catalog_config(self) -> Optional[pulumi.Input['FeatureGroupOfflineStoreConfigDataCatalogConfigArgs']]:
        """
        The meta data of the Glue table that is autogenerated when an OfflineStore is created. See Data Catalog Config Below.
        """
        return pulumi.get(self, "data_catalog_config")

    @data_catalog_config.setter
    def data_catalog_config(self, value: Optional[pulumi.Input['FeatureGroupOfflineStoreConfigDataCatalogConfigArgs']]):
        pulumi.set(self, "data_catalog_config", value)

    @property
    @pulumi.getter(name="disableGlueTableCreation")
    def disable_glue_table_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `true` to turn Online Store On.
        """
        return pulumi.get(self, "disable_glue_table_creation")

    @disable_glue_table_creation.setter
    def disable_glue_table_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_glue_table_creation", value)

    @property
    @pulumi.getter(name="tableFormat")
    def table_format(self) -> Optional[pulumi.Input[str]]:
        """
        Format for the offline store table. Supported formats are `Glue` (Default) and Apache `Iceberg` (https://iceberg.apache.org/).
        """
        return pulumi.get(self, "table_format")

    @table_format.setter
    def table_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_format", value)


@pulumi.input_type
class FeatureGroupOfflineStoreConfigDataCatalogConfigArgs:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] catalog: The name of the Glue table catalog.
        :param pulumi.Input[str] database: The name of the Glue table database.
        :param pulumi.Input[str] table_name: The name of the Glue table.
        """
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Glue table catalog.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Glue table database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Glue table.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class FeatureGroupOfflineStoreConfigS3StorageConfigArgs:
    def __init__(__self__, *,
                 s3_uri: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_uri: The S3 URI, or location in Amazon S3, of OfflineStore.
        :param pulumi.Input[str] kms_key_id: The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
        """
        pulumi.set(__self__, "s3_uri", s3_uri)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        The S3 URI, or location in Amazon S3, of OfflineStore.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class FeatureGroupOnlineStoreConfigArgs:
    def __init__(__self__, *,
                 enable_online_store: Optional[pulumi.Input[bool]] = None,
                 security_config: Optional[pulumi.Input['FeatureGroupOnlineStoreConfigSecurityConfigArgs']] = None):
        """
        :param pulumi.Input[bool] enable_online_store: Set to `true` to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.
        :param pulumi.Input['FeatureGroupOnlineStoreConfigSecurityConfigArgs'] security_config: Security config for at-rest encryption of your OnlineStore. See Security Config Below.
        """
        if enable_online_store is not None:
            pulumi.set(__self__, "enable_online_store", enable_online_store)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)

    @property
    @pulumi.getter(name="enableOnlineStore")
    def enable_online_store(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to `true` to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.
        """
        return pulumi.get(self, "enable_online_store")

    @enable_online_store.setter
    def enable_online_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_online_store", value)

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional[pulumi.Input['FeatureGroupOnlineStoreConfigSecurityConfigArgs']]:
        """
        Security config for at-rest encryption of your OnlineStore. See Security Config Below.
        """
        return pulumi.get(self, "security_config")

    @security_config.setter
    def security_config(self, value: Optional[pulumi.Input['FeatureGroupOnlineStoreConfigSecurityConfigArgs']]):
        pulumi.set(self, "security_config", value)


@pulumi.input_type
class FeatureGroupOnlineStoreConfigSecurityConfigArgs:
    def __init__(__self__, *,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_id: The ID of the AWS Key Management Service (AWS KMS) key that SageMaker Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption.
        """
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the AWS Key Management Service (AWS KMS) key that SageMaker Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class FlowDefinitionHumanLoopActivationConfigArgs:
    def __init__(__self__, *,
                 human_loop_activation_conditions_config: Optional[pulumi.Input['FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs']] = None):
        """
        :param pulumi.Input['FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs'] human_loop_activation_conditions_config: defines under what conditions SageMaker creates a human loop. See Human Loop Activation Conditions Config details below.
        """
        if human_loop_activation_conditions_config is not None:
            pulumi.set(__self__, "human_loop_activation_conditions_config", human_loop_activation_conditions_config)

    @property
    @pulumi.getter(name="humanLoopActivationConditionsConfig")
    def human_loop_activation_conditions_config(self) -> Optional[pulumi.Input['FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs']]:
        """
        defines under what conditions SageMaker creates a human loop. See Human Loop Activation Conditions Config details below.
        """
        return pulumi.get(self, "human_loop_activation_conditions_config")

    @human_loop_activation_conditions_config.setter
    def human_loop_activation_conditions_config(self, value: Optional[pulumi.Input['FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs']]):
        pulumi.set(self, "human_loop_activation_conditions_config", value)


@pulumi.input_type
class FlowDefinitionHumanLoopActivationConfigHumanLoopActivationConditionsConfigArgs:
    def __init__(__self__, *,
                 human_loop_activation_conditions: pulumi.Input[str]):
        """
        :param pulumi.Input[str] human_loop_activation_conditions: A JSON expressing use-case specific conditions declaratively. If any condition is matched, atomic tasks are created against the configured work team. For more information about how to structure the JSON, see [JSON Schema for Human Loop Activation Conditions in Amazon Augmented AI](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-human-fallback-conditions-json-schema.html).
        """
        pulumi.set(__self__, "human_loop_activation_conditions", human_loop_activation_conditions)

    @property
    @pulumi.getter(name="humanLoopActivationConditions")
    def human_loop_activation_conditions(self) -> pulumi.Input[str]:
        """
        A JSON expressing use-case specific conditions declaratively. If any condition is matched, atomic tasks are created against the configured work team. For more information about how to structure the JSON, see [JSON Schema for Human Loop Activation Conditions in Amazon Augmented AI](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-human-fallback-conditions-json-schema.html).
        """
        return pulumi.get(self, "human_loop_activation_conditions")

    @human_loop_activation_conditions.setter
    def human_loop_activation_conditions(self, value: pulumi.Input[str]):
        pulumi.set(self, "human_loop_activation_conditions", value)


@pulumi.input_type
class FlowDefinitionHumanLoopConfigArgs:
    def __init__(__self__, *,
                 human_task_ui_arn: pulumi.Input[str],
                 task_count: pulumi.Input[int],
                 task_description: pulumi.Input[str],
                 task_title: pulumi.Input[str],
                 workteam_arn: pulumi.Input[str],
                 public_workforce_task_price: Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs']] = None,
                 task_availability_lifetime_in_seconds: Optional[pulumi.Input[int]] = None,
                 task_keywords: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 task_time_limit_in_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] human_task_ui_arn: The Amazon Resource Name (ARN) of the human task user interface.
        :param pulumi.Input[int] task_count: The number of distinct workers who will perform the same task on each object. Valid value range between `1` and `3`.
        :param pulumi.Input[str] task_description: A description for the human worker task.
        :param pulumi.Input[str] task_title: A title for the human worker task.
        :param pulumi.Input[str] workteam_arn: The Amazon Resource Name (ARN) of the human task user interface. Amazon Resource Name (ARN) of a team of workers. For Public workforces see [AWS Docs](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-management-public.html).
        :param pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs'] public_workforce_task_price: Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. See Public Workforce Task Price details below.
        :param pulumi.Input[int] task_availability_lifetime_in_seconds: The length of time that a task remains available for review by human workers. Valid value range between `1` and `864000`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] task_keywords: An array of keywords used to describe the task so that workers can discover the task.
        :param pulumi.Input[int] task_time_limit_in_seconds: The amount of time that a worker has to complete a task. The default value is `3600` seconds.
        """
        pulumi.set(__self__, "human_task_ui_arn", human_task_ui_arn)
        pulumi.set(__self__, "task_count", task_count)
        pulumi.set(__self__, "task_description", task_description)
        pulumi.set(__self__, "task_title", task_title)
        pulumi.set(__self__, "workteam_arn", workteam_arn)
        if public_workforce_task_price is not None:
            pulumi.set(__self__, "public_workforce_task_price", public_workforce_task_price)
        if task_availability_lifetime_in_seconds is not None:
            pulumi.set(__self__, "task_availability_lifetime_in_seconds", task_availability_lifetime_in_seconds)
        if task_keywords is not None:
            pulumi.set(__self__, "task_keywords", task_keywords)
        if task_time_limit_in_seconds is not None:
            pulumi.set(__self__, "task_time_limit_in_seconds", task_time_limit_in_seconds)

    @property
    @pulumi.getter(name="humanTaskUiArn")
    def human_task_ui_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the human task user interface.
        """
        return pulumi.get(self, "human_task_ui_arn")

    @human_task_ui_arn.setter
    def human_task_ui_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "human_task_ui_arn", value)

    @property
    @pulumi.getter(name="taskCount")
    def task_count(self) -> pulumi.Input[int]:
        """
        The number of distinct workers who will perform the same task on each object. Valid value range between `1` and `3`.
        """
        return pulumi.get(self, "task_count")

    @task_count.setter
    def task_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "task_count", value)

    @property
    @pulumi.getter(name="taskDescription")
    def task_description(self) -> pulumi.Input[str]:
        """
        A description for the human worker task.
        """
        return pulumi.get(self, "task_description")

    @task_description.setter
    def task_description(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_description", value)

    @property
    @pulumi.getter(name="taskTitle")
    def task_title(self) -> pulumi.Input[str]:
        """
        A title for the human worker task.
        """
        return pulumi.get(self, "task_title")

    @task_title.setter
    def task_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_title", value)

    @property
    @pulumi.getter(name="workteamArn")
    def workteam_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the human task user interface. Amazon Resource Name (ARN) of a team of workers. For Public workforces see [AWS Docs](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-management-public.html).
        """
        return pulumi.get(self, "workteam_arn")

    @workteam_arn.setter
    def workteam_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "workteam_arn", value)

    @property
    @pulumi.getter(name="publicWorkforceTaskPrice")
    def public_workforce_task_price(self) -> Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs']]:
        """
        Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. See Public Workforce Task Price details below.
        """
        return pulumi.get(self, "public_workforce_task_price")

    @public_workforce_task_price.setter
    def public_workforce_task_price(self, value: Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs']]):
        pulumi.set(self, "public_workforce_task_price", value)

    @property
    @pulumi.getter(name="taskAvailabilityLifetimeInSeconds")
    def task_availability_lifetime_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The length of time that a task remains available for review by human workers. Valid value range between `1` and `864000`.
        """
        return pulumi.get(self, "task_availability_lifetime_in_seconds")

    @task_availability_lifetime_in_seconds.setter
    def task_availability_lifetime_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_availability_lifetime_in_seconds", value)

    @property
    @pulumi.getter(name="taskKeywords")
    def task_keywords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of keywords used to describe the task so that workers can discover the task.
        """
        return pulumi.get(self, "task_keywords")

    @task_keywords.setter
    def task_keywords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "task_keywords", value)

    @property
    @pulumi.getter(name="taskTimeLimitInSeconds")
    def task_time_limit_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of time that a worker has to complete a task. The default value is `3600` seconds.
        """
        return pulumi.get(self, "task_time_limit_in_seconds")

    @task_time_limit_in_seconds.setter
    def task_time_limit_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_time_limit_in_seconds", value)


@pulumi.input_type
class FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceArgs:
    def __init__(__self__, *,
                 amount_in_usd: Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs']] = None):
        """
        :param pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs'] amount_in_usd: Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars. See Amount In Usd details below.
        """
        if amount_in_usd is not None:
            pulumi.set(__self__, "amount_in_usd", amount_in_usd)

    @property
    @pulumi.getter(name="amountInUsd")
    def amount_in_usd(self) -> Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs']]:
        """
        Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars. See Amount In Usd details below.
        """
        return pulumi.get(self, "amount_in_usd")

    @amount_in_usd.setter
    def amount_in_usd(self, value: Optional[pulumi.Input['FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs']]):
        pulumi.set(self, "amount_in_usd", value)


@pulumi.input_type
class FlowDefinitionHumanLoopConfigPublicWorkforceTaskPriceAmountInUsdArgs:
    def __init__(__self__, *,
                 cents: Optional[pulumi.Input[int]] = None,
                 dollars: Optional[pulumi.Input[int]] = None,
                 tenth_fractions_of_a_cent: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] cents: The fractional portion, in cents, of the amount. Valid value range between `0` and `99`.
        :param pulumi.Input[int] dollars: The whole number of dollars in the amount. Valid value range between `0` and `2`.
        :param pulumi.Input[int] tenth_fractions_of_a_cent: Fractions of a cent, in tenths. Valid value range between `0` and `9`.
        """
        if cents is not None:
            pulumi.set(__self__, "cents", cents)
        if dollars is not None:
            pulumi.set(__self__, "dollars", dollars)
        if tenth_fractions_of_a_cent is not None:
            pulumi.set(__self__, "tenth_fractions_of_a_cent", tenth_fractions_of_a_cent)

    @property
    @pulumi.getter
    def cents(self) -> Optional[pulumi.Input[int]]:
        """
        The fractional portion, in cents, of the amount. Valid value range between `0` and `99`.
        """
        return pulumi.get(self, "cents")

    @cents.setter
    def cents(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cents", value)

    @property
    @pulumi.getter
    def dollars(self) -> Optional[pulumi.Input[int]]:
        """
        The whole number of dollars in the amount. Valid value range between `0` and `2`.
        """
        return pulumi.get(self, "dollars")

    @dollars.setter
    def dollars(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dollars", value)

    @property
    @pulumi.getter(name="tenthFractionsOfACent")
    def tenth_fractions_of_a_cent(self) -> Optional[pulumi.Input[int]]:
        """
        Fractions of a cent, in tenths. Valid value range between `0` and `9`.
        """
        return pulumi.get(self, "tenth_fractions_of_a_cent")

    @tenth_fractions_of_a_cent.setter
    def tenth_fractions_of_a_cent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenth_fractions_of_a_cent", value)


@pulumi.input_type
class FlowDefinitionHumanLoopRequestSourceArgs:
    def __init__(__self__, *,
                 aws_managed_human_loop_request_source: pulumi.Input[str]):
        """
        :param pulumi.Input[str] aws_managed_human_loop_request_source: Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. Valid values are: `AWS/Rekognition/DetectModerationLabels/Image/V3` and `AWS/Textract/AnalyzeDocument/Forms/V1`.
        """
        pulumi.set(__self__, "aws_managed_human_loop_request_source", aws_managed_human_loop_request_source)

    @property
    @pulumi.getter(name="awsManagedHumanLoopRequestSource")
    def aws_managed_human_loop_request_source(self) -> pulumi.Input[str]:
        """
        Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. Valid values are: `AWS/Rekognition/DetectModerationLabels/Image/V3` and `AWS/Textract/AnalyzeDocument/Forms/V1`.
        """
        return pulumi.get(self, "aws_managed_human_loop_request_source")

    @aws_managed_human_loop_request_source.setter
    def aws_managed_human_loop_request_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_managed_human_loop_request_source", value)


@pulumi.input_type
class FlowDefinitionOutputConfigArgs:
    def __init__(__self__, *,
                 s3_output_path: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_output_path: The Amazon S3 path where the object containing human output will be made available.
        :param pulumi.Input[str] kms_key_id: The Amazon Key Management Service (KMS) key ARN for server-side encryption.
        """
        pulumi.set(__self__, "s3_output_path", s3_output_path)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> pulumi.Input[str]:
        """
        The Amazon S3 path where the object containing human output will be made available.
        """
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_output_path", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Key Management Service (KMS) key ARN for server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class HumanTaskUIUiTemplateArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 content_sha256: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: The content of the Liquid template for the worker user interface.
        :param pulumi.Input[str] content_sha256: The SHA-256 digest of the contents of the template.
        :param pulumi.Input[str] url: The URL for the user interface template.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_sha256 is not None:
            pulumi.set(__self__, "content_sha256", content_sha256)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the Liquid template for the worker user interface.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentSha256")
    def content_sha256(self) -> Optional[pulumi.Input[str]]:
        """
        The SHA-256 digest of the contents of the template.
        """
        return pulumi.get(self, "content_sha256")

    @content_sha256.setter
    def content_sha256(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_sha256", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL for the user interface template.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ModelContainerArgs:
    def __init__(__self__, *,
                 container_hostname: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_config: Optional[pulumi.Input['ModelContainerImageConfigArgs']] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 model_data_url: Optional[pulumi.Input[str]] = None,
                 model_package_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] container_hostname: The DNS host name for the container.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] environment: Environment variables for the Docker container.
               A list of key value pairs.
        :param pulumi.Input[str] image: The registry path where the inference code image is stored in Amazon ECR.
        :param pulumi.Input['ModelContainerImageConfigArgs'] image_config: Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
        :param pulumi.Input[str] mode: The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        :param pulumi.Input[str] model_data_url: The URL for the S3 location where model artifacts are stored.
        :param pulumi.Input[str] model_package_name: The Amazon Resource Name (ARN) of the model package to use to create the model.
        """
        if container_hostname is not None:
            pulumi.set(__self__, "container_hostname", container_hostname)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_config is not None:
            pulumi.set(__self__, "image_config", image_config)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)
        if model_package_name is not None:
            pulumi.set(__self__, "model_package_name", model_package_name)

    @property
    @pulumi.getter(name="containerHostname")
    def container_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS host name for the container.
        """
        return pulumi.get(self, "container_hostname")

    @container_hostname.setter
    def container_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_hostname", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Environment variables for the Docker container.
        A list of key value pairs.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        The registry path where the inference code image is stored in Amazon ECR.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imageConfig")
    def image_config(self) -> Optional[pulumi.Input['ModelContainerImageConfigArgs']]:
        """
        Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
        """
        return pulumi.get(self, "image_config")

    @image_config.setter
    def image_config(self, value: Optional[pulumi.Input['ModelContainerImageConfigArgs']]):
        pulumi.set(self, "image_config", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL for the S3 location where model artifacts are stored.
        """
        return pulumi.get(self, "model_data_url")

    @model_data_url.setter
    def model_data_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_data_url", value)

    @property
    @pulumi.getter(name="modelPackageName")
    def model_package_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the model package to use to create the model.
        """
        return pulumi.get(self, "model_package_name")

    @model_package_name.setter
    def model_package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_package_name", value)


@pulumi.input_type
class ModelContainerImageConfigArgs:
    def __init__(__self__, *,
                 repository_access_mode: pulumi.Input[str],
                 repository_auth_config: Optional[pulumi.Input['ModelContainerImageConfigRepositoryAuthConfigArgs']] = None):
        """
        :param pulumi.Input[str] repository_access_mode: Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: `Platform` and `Vpc`.
        :param pulumi.Input['ModelContainerImageConfigRepositoryAuthConfigArgs'] repository_auth_config: Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
        """
        pulumi.set(__self__, "repository_access_mode", repository_access_mode)
        if repository_auth_config is not None:
            pulumi.set(__self__, "repository_auth_config", repository_auth_config)

    @property
    @pulumi.getter(name="repositoryAccessMode")
    def repository_access_mode(self) -> pulumi.Input[str]:
        """
        Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: `Platform` and `Vpc`.
        """
        return pulumi.get(self, "repository_access_mode")

    @repository_access_mode.setter
    def repository_access_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_access_mode", value)

    @property
    @pulumi.getter(name="repositoryAuthConfig")
    def repository_auth_config(self) -> Optional[pulumi.Input['ModelContainerImageConfigRepositoryAuthConfigArgs']]:
        """
        Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
        """
        return pulumi.get(self, "repository_auth_config")

    @repository_auth_config.setter
    def repository_auth_config(self, value: Optional[pulumi.Input['ModelContainerImageConfigRepositoryAuthConfigArgs']]):
        pulumi.set(self, "repository_auth_config", value)


@pulumi.input_type
class ModelContainerImageConfigRepositoryAuthConfigArgs:
    def __init__(__self__, *,
                 repository_credentials_provider_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] repository_credentials_provider_arn: The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the _AWS Lambda Developer Guide_.
        """
        pulumi.set(__self__, "repository_credentials_provider_arn", repository_credentials_provider_arn)

    @property
    @pulumi.getter(name="repositoryCredentialsProviderArn")
    def repository_credentials_provider_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the _AWS Lambda Developer Guide_.
        """
        return pulumi.get(self, "repository_credentials_provider_arn")

    @repository_credentials_provider_arn.setter
    def repository_credentials_provider_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_credentials_provider_arn", value)


@pulumi.input_type
class ModelInferenceExecutionConfigArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        """
        :param pulumi.Input[str] mode: The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        """
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ModelPrimaryContainerArgs:
    def __init__(__self__, *,
                 container_hostname: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_config: Optional[pulumi.Input['ModelPrimaryContainerImageConfigArgs']] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 model_data_url: Optional[pulumi.Input[str]] = None,
                 model_package_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] container_hostname: The DNS host name for the container.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] environment: Environment variables for the Docker container.
               A list of key value pairs.
        :param pulumi.Input[str] image: The registry path where the inference code image is stored in Amazon ECR.
        :param pulumi.Input['ModelPrimaryContainerImageConfigArgs'] image_config: Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
        :param pulumi.Input[str] mode: The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        :param pulumi.Input[str] model_data_url: The URL for the S3 location where model artifacts are stored.
        :param pulumi.Input[str] model_package_name: The Amazon Resource Name (ARN) of the model package to use to create the model.
        """
        if container_hostname is not None:
            pulumi.set(__self__, "container_hostname", container_hostname)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_config is not None:
            pulumi.set(__self__, "image_config", image_config)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)
        if model_package_name is not None:
            pulumi.set(__self__, "model_package_name", model_package_name)

    @property
    @pulumi.getter(name="containerHostname")
    def container_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS host name for the container.
        """
        return pulumi.get(self, "container_hostname")

    @container_hostname.setter
    def container_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_hostname", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Environment variables for the Docker container.
        A list of key value pairs.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        The registry path where the inference code image is stored in Amazon ECR.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imageConfig")
    def image_config(self) -> Optional[pulumi.Input['ModelPrimaryContainerImageConfigArgs']]:
        """
        Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
        """
        return pulumi.get(self, "image_config")

    @image_config.setter
    def image_config(self, value: Optional[pulumi.Input['ModelPrimaryContainerImageConfigArgs']]):
        pulumi.set(self, "image_config", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL for the S3 location where model artifacts are stored.
        """
        return pulumi.get(self, "model_data_url")

    @model_data_url.setter
    def model_data_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_data_url", value)

    @property
    @pulumi.getter(name="modelPackageName")
    def model_package_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the model package to use to create the model.
        """
        return pulumi.get(self, "model_package_name")

    @model_package_name.setter
    def model_package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_package_name", value)


@pulumi.input_type
class ModelPrimaryContainerImageConfigArgs:
    def __init__(__self__, *,
                 repository_access_mode: pulumi.Input[str],
                 repository_auth_config: Optional[pulumi.Input['ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs']] = None):
        """
        :param pulumi.Input[str] repository_access_mode: Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: `Platform` and `Vpc`.
        :param pulumi.Input['ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs'] repository_auth_config: Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
        """
        pulumi.set(__self__, "repository_access_mode", repository_access_mode)
        if repository_auth_config is not None:
            pulumi.set(__self__, "repository_auth_config", repository_auth_config)

    @property
    @pulumi.getter(name="repositoryAccessMode")
    def repository_access_mode(self) -> pulumi.Input[str]:
        """
        Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: `Platform` and `Vpc`.
        """
        return pulumi.get(self, "repository_access_mode")

    @repository_access_mode.setter
    def repository_access_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_access_mode", value)

    @property
    @pulumi.getter(name="repositoryAuthConfig")
    def repository_auth_config(self) -> Optional[pulumi.Input['ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs']]:
        """
        Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
        """
        return pulumi.get(self, "repository_auth_config")

    @repository_auth_config.setter
    def repository_auth_config(self, value: Optional[pulumi.Input['ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs']]):
        pulumi.set(self, "repository_auth_config", value)


@pulumi.input_type
class ModelPrimaryContainerImageConfigRepositoryAuthConfigArgs:
    def __init__(__self__, *,
                 repository_credentials_provider_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] repository_credentials_provider_arn: The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the _AWS Lambda Developer Guide_.
        """
        pulumi.set(__self__, "repository_credentials_provider_arn", repository_credentials_provider_arn)

    @property
    @pulumi.getter(name="repositoryCredentialsProviderArn")
    def repository_credentials_provider_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the _AWS Lambda Developer Guide_.
        """
        return pulumi.get(self, "repository_credentials_provider_arn")

    @repository_credentials_provider_arn.setter
    def repository_credentials_provider_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_credentials_provider_arn", value)


@pulumi.input_type
class ModelVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class MonitoringScheduleMonitoringScheduleConfigArgs:
    def __init__(__self__, *,
                 monitoring_job_definition_name: pulumi.Input[str],
                 monitoring_type: pulumi.Input[str],
                 schedule_config: Optional[pulumi.Input['MonitoringScheduleMonitoringScheduleConfigScheduleConfigArgs']] = None):
        """
        :param pulumi.Input[str] monitoring_job_definition_name: The name of the monitoring job definition to schedule.
        :param pulumi.Input[str] monitoring_type: The type of the monitoring job definition to schedule. Valid values are `DataQuality`, `ModelQuality`, `ModelBias` or `ModelExplainability`
        :param pulumi.Input['MonitoringScheduleMonitoringScheduleConfigScheduleConfigArgs'] schedule_config: Configures the monitoring schedule. Fields are documented below.
        """
        pulumi.set(__self__, "monitoring_job_definition_name", monitoring_job_definition_name)
        pulumi.set(__self__, "monitoring_type", monitoring_type)
        if schedule_config is not None:
            pulumi.set(__self__, "schedule_config", schedule_config)

    @property
    @pulumi.getter(name="monitoringJobDefinitionName")
    def monitoring_job_definition_name(self) -> pulumi.Input[str]:
        """
        The name of the monitoring job definition to schedule.
        """
        return pulumi.get(self, "monitoring_job_definition_name")

    @monitoring_job_definition_name.setter
    def monitoring_job_definition_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitoring_job_definition_name", value)

    @property
    @pulumi.getter(name="monitoringType")
    def monitoring_type(self) -> pulumi.Input[str]:
        """
        The type of the monitoring job definition to schedule. Valid values are `DataQuality`, `ModelQuality`, `ModelBias` or `ModelExplainability`
        """
        return pulumi.get(self, "monitoring_type")

    @monitoring_type.setter
    def monitoring_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitoring_type", value)

    @property
    @pulumi.getter(name="scheduleConfig")
    def schedule_config(self) -> Optional[pulumi.Input['MonitoringScheduleMonitoringScheduleConfigScheduleConfigArgs']]:
        """
        Configures the monitoring schedule. Fields are documented below.
        """
        return pulumi.get(self, "schedule_config")

    @schedule_config.setter
    def schedule_config(self, value: Optional[pulumi.Input['MonitoringScheduleMonitoringScheduleConfigScheduleConfigArgs']]):
        pulumi.set(self, "schedule_config", value)


@pulumi.input_type
class MonitoringScheduleMonitoringScheduleConfigScheduleConfigArgs:
    def __init__(__self__, *,
                 schedule_expression: pulumi.Input[str]):
        """
        :param pulumi.Input[str] schedule_expression: A cron expression that describes details about the monitoring schedule. For example, and hourly schedule would be `cron(0 * ? * * *)`.
        """
        pulumi.set(__self__, "schedule_expression", schedule_expression)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> pulumi.Input[str]:
        """
        A cron expression that describes details about the monitoring schedule. For example, and hourly schedule would be `cron(0 * ? * * *)`.
        """
        return pulumi.get(self, "schedule_expression")

    @schedule_expression.setter
    def schedule_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_expression", value)


@pulumi.input_type
class NotebookInstanceInstanceMetadataServiceConfigurationArgs:
    def __init__(__self__, *,
                 minimum_instance_metadata_service_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] minimum_instance_metadata_service_version: Indicates the minimum IMDS version that the notebook instance supports. When passed "1" is passed. This means that both IMDSv1 and IMDSv2 are supported. Valid values are `1` and `2`.
        """
        if minimum_instance_metadata_service_version is not None:
            pulumi.set(__self__, "minimum_instance_metadata_service_version", minimum_instance_metadata_service_version)

    @property
    @pulumi.getter(name="minimumInstanceMetadataServiceVersion")
    def minimum_instance_metadata_service_version(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the minimum IMDS version that the notebook instance supports. When passed "1" is passed. This means that both IMDSv1 and IMDSv2 are supported. Valid values are `1` and `2`.
        """
        return pulumi.get(self, "minimum_instance_metadata_service_version")

    @minimum_instance_metadata_service_version.setter
    def minimum_instance_metadata_service_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum_instance_metadata_service_version", value)


@pulumi.input_type
class PipelineParallelismConfigurationArgs:
    def __init__(__self__, *,
                 max_parallel_execution_steps: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max_parallel_execution_steps: The max number of steps that can be executed in parallel.
        """
        pulumi.set(__self__, "max_parallel_execution_steps", max_parallel_execution_steps)

    @property
    @pulumi.getter(name="maxParallelExecutionSteps")
    def max_parallel_execution_steps(self) -> pulumi.Input[int]:
        """
        The max number of steps that can be executed in parallel.
        """
        return pulumi.get(self, "max_parallel_execution_steps")

    @max_parallel_execution_steps.setter
    def max_parallel_execution_steps(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_parallel_execution_steps", value)


@pulumi.input_type
class PipelinePipelineDefinitionS3LocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object_key: pulumi.Input[str],
                 version_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: Name of the S3 bucket.
        :param pulumi.Input[str] object_key: The object key (or key name) uniquely identifies the object in an S3 bucket.
        :param pulumi.Input[str] version_id: Version Id of the pipeline definition file. If not specified, Amazon SageMaker will retrieve the latest version.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object_key", object_key)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Name of the S3 bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="objectKey")
    def object_key(self) -> pulumi.Input[str]:
        """
        The object key (or key name) uniquely identifies the object in an S3 bucket.
        """
        return pulumi.get(self, "object_key")

    @object_key.setter
    def object_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_key", value)

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[str]]:
        """
        Version Id of the pipeline definition file. If not specified, Amazon SageMaker will retrieve the latest version.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_id", value)


@pulumi.input_type
class ProjectServiceCatalogProvisioningDetailsArgs:
    def __init__(__self__, *,
                 product_id: pulumi.Input[str],
                 path_id: Optional[pulumi.Input[str]] = None,
                 provisioning_artifact_id: Optional[pulumi.Input[str]] = None,
                 provisioning_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs']]]] = None):
        """
        :param pulumi.Input[str] product_id: The ID of the product to provision.
        :param pulumi.Input[str] path_id: The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path.
        :param pulumi.Input[str] provisioning_artifact_id: The ID of the provisioning artifact.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs']]] provisioning_parameters: A list of key value pairs that you specify when you provision a product. See Provisioning Parameter below.
        """
        pulumi.set(__self__, "product_id", product_id)
        if path_id is not None:
            pulumi.set(__self__, "path_id", path_id)
        if provisioning_artifact_id is not None:
            pulumi.set(__self__, "provisioning_artifact_id", provisioning_artifact_id)
        if provisioning_parameters is not None:
            pulumi.set(__self__, "provisioning_parameters", provisioning_parameters)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[str]:
        """
        The ID of the product to provision.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter(name="pathId")
    def path_id(self) -> Optional[pulumi.Input[str]]:
        """
        The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path.
        """
        return pulumi.get(self, "path_id")

    @path_id.setter
    def path_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_id", value)

    @property
    @pulumi.getter(name="provisioningArtifactId")
    def provisioning_artifact_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the provisioning artifact.
        """
        return pulumi.get(self, "provisioning_artifact_id")

    @provisioning_artifact_id.setter
    def provisioning_artifact_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioning_artifact_id", value)

    @property
    @pulumi.getter(name="provisioningParameters")
    def provisioning_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs']]]]:
        """
        A list of key value pairs that you specify when you provision a product. See Provisioning Parameter below.
        """
        return pulumi.get(self, "provisioning_parameters")

    @provisioning_parameters.setter
    def provisioning_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs']]]]):
        pulumi.set(self, "provisioning_parameters", value)


@pulumi.input_type
class ProjectServiceCatalogProvisioningDetailsProvisioningParameterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The key that identifies a provisioning parameter.
        :param pulumi.Input[str] value: The value of the provisioning parameter.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key that identifies a provisioning parameter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the provisioning parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SpaceSpaceSettingsArgs:
    def __init__(__self__, *,
                 jupyter_server_app_settings: Optional[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsArgs']] = None,
                 kernel_gateway_app_settings: Optional[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsArgs']] = None):
        """
        :param pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsArgs'] jupyter_server_app_settings: The Jupyter server's app settings. See Jupyter Server App Settings below.
        :param pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsArgs'] kernel_gateway_app_settings: The kernel gateway app settings. See Kernel Gateway App Settings below.
        """
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsArgs']]:
        """
        The Jupyter server's app settings. See Jupyter Server App Settings below.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @jupyter_server_app_settings.setter
    def jupyter_server_app_settings(self, value: Optional[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsArgs']]):
        pulumi.set(self, "jupyter_server_app_settings", value)

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsArgs']]:
        """
        The kernel gateway app settings. See Kernel Gateway App Settings below.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @kernel_gateway_app_settings.setter
    def kernel_gateway_app_settings(self, value: Optional[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsArgs']]):
        pulumi.set(self, "kernel_gateway_app_settings", value)


@pulumi.input_type
class SpaceSpaceSettingsJupyterServerAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs'],
                 code_repositories: Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]] code_repositories: A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]:
        """
        A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        """
        return pulumi.get(self, "code_repositories")

    @code_repositories.setter
    def code_repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]):
        pulumi.set(self, "code_repositories", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class SpaceSpaceSettingsJupyterServerAppSettingsCodeRepositoryArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] repository_url: The URL of the Git repository.
        """
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        """
        The URL of the Git repository.
        """
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)


@pulumi.input_type
class SpaceSpaceSettingsJupyterServerAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type.
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class SpaceSpaceSettingsKernelGatewayAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs'],
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class SpaceSpaceSettingsKernelGatewayAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] app_image_config_name: The name of the App Image Config.
        :param pulumi.Input[str] image_name: The name of the Custom Image.
        :param pulumi.Input[int] image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class SpaceSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type.
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class UserProfileUserSettingsArgs:
    def __init__(__self__, *,
                 execution_role: pulumi.Input[str],
                 canvas_app_settings: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsArgs']] = None,
                 jupyter_server_app_settings: Optional[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsArgs']] = None,
                 kernel_gateway_app_settings: Optional[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsArgs']] = None,
                 r_session_app_settings: Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsArgs']] = None,
                 r_studio_server_pro_app_settings: Optional[pulumi.Input['UserProfileUserSettingsRStudioServerProAppSettingsArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sharing_settings: Optional[pulumi.Input['UserProfileUserSettingsSharingSettingsArgs']] = None,
                 tensor_board_app_settings: Optional[pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsArgs']] = None):
        """
        :param pulumi.Input[str] execution_role: The execution role ARN for the user.
        :param pulumi.Input['UserProfileUserSettingsCanvasAppSettingsArgs'] canvas_app_settings: The Canvas app settings. See Canvas App Settings below.
        :param pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsArgs'] jupyter_server_app_settings: The Jupyter server's app settings. See Jupyter Server App Settings below.
        :param pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsArgs'] kernel_gateway_app_settings: The kernel gateway app settings. See Kernel Gateway App Settings below.
        :param pulumi.Input['UserProfileUserSettingsRSessionAppSettingsArgs'] r_session_app_settings: The RSession app settings. See RSession App Settings below.
        :param pulumi.Input['UserProfileUserSettingsRStudioServerProAppSettingsArgs'] r_studio_server_pro_app_settings: A collection of settings that configure user interaction with the RStudioServerPro app. See RStudio Server Pro App Settings below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: The security groups.
        :param pulumi.Input['UserProfileUserSettingsSharingSettingsArgs'] sharing_settings: The sharing settings. See Sharing Settings below.
        :param pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsArgs'] tensor_board_app_settings: The TensorBoard app settings. See TensorBoard App Settings below.
        """
        pulumi.set(__self__, "execution_role", execution_role)
        if canvas_app_settings is not None:
            pulumi.set(__self__, "canvas_app_settings", canvas_app_settings)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if r_session_app_settings is not None:
            pulumi.set(__self__, "r_session_app_settings", r_session_app_settings)
        if r_studio_server_pro_app_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_app_settings", r_studio_server_pro_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharing_settings is not None:
            pulumi.set(__self__, "sharing_settings", sharing_settings)
        if tensor_board_app_settings is not None:
            pulumi.set(__self__, "tensor_board_app_settings", tensor_board_app_settings)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> pulumi.Input[str]:
        """
        The execution role ARN for the user.
        """
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: pulumi.Input[str]):
        pulumi.set(self, "execution_role", value)

    @property
    @pulumi.getter(name="canvasAppSettings")
    def canvas_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsArgs']]:
        """
        The Canvas app settings. See Canvas App Settings below.
        """
        return pulumi.get(self, "canvas_app_settings")

    @canvas_app_settings.setter
    def canvas_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsArgs']]):
        pulumi.set(self, "canvas_app_settings", value)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsArgs']]:
        """
        The Jupyter server's app settings. See Jupyter Server App Settings below.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @jupyter_server_app_settings.setter
    def jupyter_server_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsArgs']]):
        pulumi.set(self, "jupyter_server_app_settings", value)

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsArgs']]:
        """
        The kernel gateway app settings. See Kernel Gateway App Settings below.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @kernel_gateway_app_settings.setter
    def kernel_gateway_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsArgs']]):
        pulumi.set(self, "kernel_gateway_app_settings", value)

    @property
    @pulumi.getter(name="rSessionAppSettings")
    def r_session_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsArgs']]:
        """
        The RSession app settings. See RSession App Settings below.
        """
        return pulumi.get(self, "r_session_app_settings")

    @r_session_app_settings.setter
    def r_session_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsArgs']]):
        pulumi.set(self, "r_session_app_settings", value)

    @property
    @pulumi.getter(name="rStudioServerProAppSettings")
    def r_studio_server_pro_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsRStudioServerProAppSettingsArgs']]:
        """
        A collection of settings that configure user interaction with the RStudioServerPro app. See RStudio Server Pro App Settings below.
        """
        return pulumi.get(self, "r_studio_server_pro_app_settings")

    @r_studio_server_pro_app_settings.setter
    def r_studio_server_pro_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsRStudioServerProAppSettingsArgs']]):
        pulumi.set(self, "r_studio_server_pro_app_settings", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security groups.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="sharingSettings")
    def sharing_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsSharingSettingsArgs']]:
        """
        The sharing settings. See Sharing Settings below.
        """
        return pulumi.get(self, "sharing_settings")

    @sharing_settings.setter
    def sharing_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsSharingSettingsArgs']]):
        pulumi.set(self, "sharing_settings", value)

    @property
    @pulumi.getter(name="tensorBoardAppSettings")
    def tensor_board_app_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsArgs']]:
        """
        The TensorBoard app settings. See TensorBoard App Settings below.
        """
        return pulumi.get(self, "tensor_board_app_settings")

    @tensor_board_app_settings.setter
    def tensor_board_app_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsArgs']]):
        pulumi.set(self, "tensor_board_app_settings", value)


@pulumi.input_type
class UserProfileUserSettingsCanvasAppSettingsArgs:
    def __init__(__self__, *,
                 model_register_settings: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsArgs']] = None,
                 time_series_forecasting_settings: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']] = None,
                 workspace_settings: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsArgs']] = None):
        """
        :param pulumi.Input['UserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsArgs'] model_register_settings: The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
        :param pulumi.Input['UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs'] time_series_forecasting_settings: Time series forecast settings for the Canvas app. see Time Series Forecasting Settings below.
        :param pulumi.Input['UserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsArgs'] workspace_settings: The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
        """
        if model_register_settings is not None:
            pulumi.set(__self__, "model_register_settings", model_register_settings)
        if time_series_forecasting_settings is not None:
            pulumi.set(__self__, "time_series_forecasting_settings", time_series_forecasting_settings)
        if workspace_settings is not None:
            pulumi.set(__self__, "workspace_settings", workspace_settings)

    @property
    @pulumi.getter(name="modelRegisterSettings")
    def model_register_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsArgs']]:
        """
        The model registry settings for the SageMaker Canvas application. See Model Register Settings below.
        """
        return pulumi.get(self, "model_register_settings")

    @model_register_settings.setter
    def model_register_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsArgs']]):
        pulumi.set(self, "model_register_settings", value)

    @property
    @pulumi.getter(name="timeSeriesForecastingSettings")
    def time_series_forecasting_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']]:
        """
        Time series forecast settings for the Canvas app. see Time Series Forecasting Settings below.
        """
        return pulumi.get(self, "time_series_forecasting_settings")

    @time_series_forecasting_settings.setter
    def time_series_forecasting_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs']]):
        pulumi.set(self, "time_series_forecasting_settings", value)

    @property
    @pulumi.getter(name="workspaceSettings")
    def workspace_settings(self) -> Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsArgs']]:
        """
        The workspace settings for the SageMaker Canvas application. See Workspace Settings below.
        """
        return pulumi.get(self, "workspace_settings")

    @workspace_settings.setter
    def workspace_settings(self, value: Optional[pulumi.Input['UserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsArgs']]):
        pulumi.set(self, "workspace_settings", value)


@pulumi.input_type
class UserProfileUserSettingsCanvasAppSettingsModelRegisterSettingsArgs:
    def __init__(__self__, *,
                 cross_account_model_register_role_arn: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cross_account_model_register_role_arn: The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
        :param pulumi.Input[str] status: Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are `ENABLED` and `DISABLED`.
        """
        if cross_account_model_register_role_arn is not None:
            pulumi.set(__self__, "cross_account_model_register_role_arn", cross_account_model_register_role_arn)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="crossAccountModelRegisterRoleArn")
    def cross_account_model_register_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas AWS account than the AWS account in which SageMaker model registry is set up.
        """
        return pulumi.get(self, "cross_account_model_register_role_arn")

    @cross_account_model_register_role_arn.setter
    def cross_account_model_register_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cross_account_model_register_role_arn", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Describes whether the integration to the model registry is enabled or disabled in the Canvas application. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class UserProfileUserSettingsCanvasAppSettingsTimeSeriesForecastingSettingsArgs:
    def __init__(__self__, *,
                 amazon_forecast_role_arn: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] amazon_forecast_role_arn: The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the [AmazonSageMakerCanvasForecastAccess](https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-canvas.html#security-iam-awsmanpol-AmazonSageMakerCanvasForecastAccess) policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
        :param pulumi.Input[str] status: Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are `ENABLED` and `DISABLED`.
        """
        if amazon_forecast_role_arn is not None:
            pulumi.set(__self__, "amazon_forecast_role_arn", amazon_forecast_role_arn)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="amazonForecastRoleArn")
    def amazon_forecast_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas app. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the [AmazonSageMakerCanvasForecastAccess](https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-canvas.html#security-iam-awsmanpol-AmazonSageMakerCanvasForecastAccess) policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
        """
        return pulumi.get(self, "amazon_forecast_role_arn")

    @amazon_forecast_role_arn.setter
    def amazon_forecast_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amazon_forecast_role_arn", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Describes whether time series forecasting is enabled or disabled in the Canvas app. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class UserProfileUserSettingsCanvasAppSettingsWorkspaceSettingsArgs:
    def __init__(__self__, *,
                 s3_artifact_path: Optional[pulumi.Input[str]] = None,
                 s3_kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_artifact_path: The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
        :param pulumi.Input[str] s3_kms_key_id: The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
        """
        if s3_artifact_path is not None:
            pulumi.set(__self__, "s3_artifact_path", s3_artifact_path)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)

    @property
    @pulumi.getter(name="s3ArtifactPath")
    def s3_artifact_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
        """
        return pulumi.get(self, "s3_artifact_path")

    @s3_artifact_path.setter
    def s3_artifact_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_artifact_path", value)

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")

    @s3_kms_key_id.setter
    def s3_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_kms_key_id", value)


@pulumi.input_type
class UserProfileUserSettingsJupyterServerAppSettingsArgs:
    def __init__(__self__, *,
                 code_repositories: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]] code_repositories: A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        :param pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if code_repositories is not None:
            pulumi.set(__self__, "code_repositories", code_repositories)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="codeRepositories")
    def code_repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]:
        """
        A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. see Code Repository below.
        """
        return pulumi.get(self, "code_repositories")

    @code_repositories.setter
    def code_repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs']]]]):
        pulumi.set(self, "code_repositories", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class UserProfileUserSettingsJupyterServerAppSettingsCodeRepositoryArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] repository_url: The URL of the Git repository.
        """
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        """
        The URL of the Git repository.
        """
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)


@pulumi.input_type
class UserProfileUserSettingsJupyterServerAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type.
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class UserProfileUserSettingsKernelGatewayAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']] = None,
                 lifecycle_config_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs']]] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lifecycle_config_arns: The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if lifecycle_config_arns is not None:
            pulumi.set(__self__, "lifecycle_config_arns", lifecycle_config_arns)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="lifecycleConfigArns")
    def lifecycle_config_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configurations.
        """
        return pulumi.get(self, "lifecycle_config_arns")

    @lifecycle_config_arns.setter
    def lifecycle_config_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "lifecycle_config_arns", value)


@pulumi.input_type
class UserProfileUserSettingsKernelGatewayAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] app_image_config_name: The name of the App Image Config.
        :param pulumi.Input[str] image_name: The name of the Custom Image.
        :param pulumi.Input[int] image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class UserProfileUserSettingsKernelGatewayAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type.
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class UserProfileUserSettingsRSessionAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsCustomImageArgs']]] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        :param pulumi.Input['UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsCustomImageArgs']]]]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app. see Custom Image below.
        """
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class UserProfileUserSettingsRSessionAppSettingsCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] app_image_config_name: The name of the App Image Config.
        :param pulumi.Input[str] image_name: The name of the Custom Image.
        :param pulumi.Input[int] image_version_number: The version number of the Custom Image.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        """
        The name of the App Image Config.
        """
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the Custom Image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the Custom Image.
        """
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class UserProfileUserSettingsRSessionAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type.
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class UserProfileUserSettingsRStudioServerProAppSettingsArgs:
    def __init__(__self__, *,
                 access_status: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_status: Indicates whether the current user has access to the RStudioServerPro app. Valid values are `ENABLED` and `DISABLED`.
        :param pulumi.Input[str] user_group: The level of permissions that the user has within the RStudioServerPro app. This value defaults to `R_STUDIO_USER`. The `R_STUDIO_ADMIN` value allows the user access to the RStudio Administrative Dashboard. Valid values are `R_STUDIO_USER` and `R_STUDIO_ADMIN`.
        """
        if access_status is not None:
            pulumi.set(__self__, "access_status", access_status)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)

    @property
    @pulumi.getter(name="accessStatus")
    def access_status(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether the current user has access to the RStudioServerPro app. Valid values are `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "access_status")

    @access_status.setter
    def access_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_status", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input[str]]:
        """
        The level of permissions that the user has within the RStudioServerPro app. This value defaults to `R_STUDIO_USER`. The `R_STUDIO_ADMIN` value allows the user access to the RStudio Administrative Dashboard. Valid values are `R_STUDIO_USER` and `R_STUDIO_ADMIN`.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_group", value)


@pulumi.input_type
class UserProfileUserSettingsSharingSettingsArgs:
    def __init__(__self__, *,
                 notebook_output_option: Optional[pulumi.Input[str]] = None,
                 s3_kms_key_id: Optional[pulumi.Input[str]] = None,
                 s3_output_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] notebook_output_option: Whether to include the notebook cell output when sharing the notebook. The default is `Disabled`. Valid values are `Allowed` and `Disabled`.
        :param pulumi.Input[str] s3_kms_key_id: When `notebook_output_option` is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        :param pulumi.Input[str] s3_output_path: When `notebook_output_option` is Allowed, the Amazon S3 bucket used to save the notebook cell output.
        """
        if notebook_output_option is not None:
            pulumi.set(__self__, "notebook_output_option", notebook_output_option)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="notebookOutputOption")
    def notebook_output_option(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to include the notebook cell output when sharing the notebook. The default is `Disabled`. Valid values are `Allowed` and `Disabled`.
        """
        return pulumi.get(self, "notebook_output_option")

    @notebook_output_option.setter
    def notebook_output_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notebook_output_option", value)

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        When `notebook_output_option` is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")

    @s3_kms_key_id.setter
    def s3_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_kms_key_id", value)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[pulumi.Input[str]]:
        """
        When `notebook_output_option` is Allowed, the Amazon S3 bucket used to save the notebook cell output.
        """
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_output_path", value)


@pulumi.input_type
class UserProfileUserSettingsTensorBoardAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']):
        """
        :param pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. see Default Resource Spec below.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: pulumi.Input['UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs']):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class UserProfileUserSettingsTensorBoardAppSettingsDefaultResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_arn: Optional[pulumi.Input[str]] = None,
                 sagemaker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: The instance type.
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        :param pulumi.Input[str] sagemaker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        :param pulumi.Input[str] sagemaker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sagemaker_image_arn is not None:
            pulumi.set(__self__, "sagemaker_image_arn", sagemaker_image_arn)
        if sagemaker_image_version_arn is not None:
            pulumi.set(__self__, "sagemaker_image_version_arn", sagemaker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageArn")
    def sagemaker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_arn")

    @sagemaker_image_arn.setter
    def sagemaker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_arn", value)

    @property
    @pulumi.getter(name="sagemakerImageVersionArn")
    def sagemaker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sagemaker_image_version_arn")

    @sagemaker_image_version_arn.setter
    def sagemaker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker_image_version_arn", value)


@pulumi.input_type
class WorkforceCognitoConfigArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 user_pool: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_id: The client ID for your Amazon Cognito user pool.
        :param pulumi.Input[str] user_pool: ID for your Amazon Cognito user pool.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "user_pool", user_pool)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The client ID for your Amazon Cognito user pool.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="userPool")
    def user_pool(self) -> pulumi.Input[str]:
        """
        ID for your Amazon Cognito user pool.
        """
        return pulumi.get(self, "user_pool")

    @user_pool.setter
    def user_pool(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_pool", value)


@pulumi.input_type
class WorkforceOidcConfigArgs:
    def __init__(__self__, *,
                 authorization_endpoint: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 issuer: pulumi.Input[str],
                 jwks_uri: pulumi.Input[str],
                 logout_endpoint: pulumi.Input[str],
                 token_endpoint: pulumi.Input[str],
                 user_info_endpoint: pulumi.Input[str]):
        """
        :param pulumi.Input[str] authorization_endpoint: The OIDC IdP authorization endpoint used to configure your private workforce.
        :param pulumi.Input[str] client_id: The OIDC IdP client ID used to configure your private workforce.
        :param pulumi.Input[str] client_secret: The OIDC IdP client secret used to configure your private workforce.
        :param pulumi.Input[str] issuer: The OIDC IdP issuer used to configure your private workforce.
        :param pulumi.Input[str] jwks_uri: The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
        :param pulumi.Input[str] logout_endpoint: The OIDC IdP logout endpoint used to configure your private workforce.
        :param pulumi.Input[str] token_endpoint: The OIDC IdP token endpoint used to configure your private workforce.
        :param pulumi.Input[str] user_info_endpoint: The OIDC IdP user information endpoint used to configure your private workforce.
        """
        pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "jwks_uri", jwks_uri)
        pulumi.set(__self__, "logout_endpoint", logout_endpoint)
        pulumi.set(__self__, "token_endpoint", token_endpoint)
        pulumi.set(__self__, "user_info_endpoint", user_info_endpoint)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> pulumi.Input[str]:
        """
        The OIDC IdP authorization endpoint used to configure your private workforce.
        """
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization_endpoint", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The OIDC IdP client ID used to configure your private workforce.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The OIDC IdP client secret used to configure your private workforce.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        """
        The OIDC IdP issuer used to configure your private workforce.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="jwksUri")
    def jwks_uri(self) -> pulumi.Input[str]:
        """
        The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
        """
        return pulumi.get(self, "jwks_uri")

    @jwks_uri.setter
    def jwks_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "jwks_uri", value)

    @property
    @pulumi.getter(name="logoutEndpoint")
    def logout_endpoint(self) -> pulumi.Input[str]:
        """
        The OIDC IdP logout endpoint used to configure your private workforce.
        """
        return pulumi.get(self, "logout_endpoint")

    @logout_endpoint.setter
    def logout_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "logout_endpoint", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> pulumi.Input[str]:
        """
        The OIDC IdP token endpoint used to configure your private workforce.
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="userInfoEndpoint")
    def user_info_endpoint(self) -> pulumi.Input[str]:
        """
        The OIDC IdP user information endpoint used to configure your private workforce.
        """
        return pulumi.get(self, "user_info_endpoint")

    @user_info_endpoint.setter
    def user_info_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_info_endpoint", value)


@pulumi.input_type
class WorkforceSourceIpConfigArgs:
    def __init__(__self__, *,
                 cidrs: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cidrs: A list of up to 10 CIDR values.
        """
        pulumi.set(__self__, "cidrs", cidrs)

    @property
    @pulumi.getter
    def cidrs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of up to 10 CIDR values.
        """
        return pulumi.get(self, "cidrs")

    @cidrs.setter
    def cidrs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "cidrs", value)


@pulumi.input_type
class WorkforceWorkforceVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_endpoint_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The ID of the subnets in the VPC that you want to connect.
        :param pulumi.Input[str] vpc_id: The ID of the VPC that the workforce uses for communication.
        """
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if vpc_endpoint_id is not None:
            pulumi.set(__self__, "vpc_endpoint_id", vpc_endpoint_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ID of the subnets in the VPC that you want to connect.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="vpcEndpointId")
    def vpc_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc_endpoint_id")

    @vpc_endpoint_id.setter
    def vpc_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_endpoint_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the VPC that the workforce uses for communication.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class WorkteamMemberDefinitionArgs:
    def __init__(__self__, *,
                 cognito_member_definition: Optional[pulumi.Input['WorkteamMemberDefinitionCognitoMemberDefinitionArgs']] = None,
                 oidc_member_definition: Optional[pulumi.Input['WorkteamMemberDefinitionOidcMemberDefinitionArgs']] = None):
        """
        :param pulumi.Input['WorkteamMemberDefinitionCognitoMemberDefinitionArgs'] cognito_member_definition: The Amazon Cognito user group that is part of the work team. See Cognito Member Definition details below.
        :param pulumi.Input['WorkteamMemberDefinitionOidcMemberDefinitionArgs'] oidc_member_definition: A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. See Cognito Member Definition details below.
        """
        if cognito_member_definition is not None:
            pulumi.set(__self__, "cognito_member_definition", cognito_member_definition)
        if oidc_member_definition is not None:
            pulumi.set(__self__, "oidc_member_definition", oidc_member_definition)

    @property
    @pulumi.getter(name="cognitoMemberDefinition")
    def cognito_member_definition(self) -> Optional[pulumi.Input['WorkteamMemberDefinitionCognitoMemberDefinitionArgs']]:
        """
        The Amazon Cognito user group that is part of the work team. See Cognito Member Definition details below.
        """
        return pulumi.get(self, "cognito_member_definition")

    @cognito_member_definition.setter
    def cognito_member_definition(self, value: Optional[pulumi.Input['WorkteamMemberDefinitionCognitoMemberDefinitionArgs']]):
        pulumi.set(self, "cognito_member_definition", value)

    @property
    @pulumi.getter(name="oidcMemberDefinition")
    def oidc_member_definition(self) -> Optional[pulumi.Input['WorkteamMemberDefinitionOidcMemberDefinitionArgs']]:
        """
        A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. See Cognito Member Definition details below.
        """
        return pulumi.get(self, "oidc_member_definition")

    @oidc_member_definition.setter
    def oidc_member_definition(self, value: Optional[pulumi.Input['WorkteamMemberDefinitionOidcMemberDefinitionArgs']]):
        pulumi.set(self, "oidc_member_definition", value)


@pulumi.input_type
class WorkteamMemberDefinitionCognitoMemberDefinitionArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 user_group: pulumi.Input[str],
                 user_pool: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_id: An identifier for an application client. You must create the app client ID using Amazon Cognito.
        :param pulumi.Input[str] user_group: An identifier for a user group.
        :param pulumi.Input[str] user_pool: An identifier for a user pool. The user pool must be in the same region as the service that you are calling.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "user_group", user_group)
        pulumi.set(__self__, "user_pool", user_pool)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        An identifier for an application client. You must create the app client ID using Amazon Cognito.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> pulumi.Input[str]:
        """
        An identifier for a user group.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_group", value)

    @property
    @pulumi.getter(name="userPool")
    def user_pool(self) -> pulumi.Input[str]:
        """
        An identifier for a user pool. The user pool must be in the same region as the service that you are calling.
        """
        return pulumi.get(self, "user_pool")

    @user_pool.setter
    def user_pool(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_pool", value)


@pulumi.input_type
class WorkteamMemberDefinitionOidcMemberDefinitionArgs:
    def __init__(__self__, *,
                 groups: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: A list of comma separated strings that identifies user groups in your OIDC IdP. Each user group is made up of a group of private workers.
        """
        pulumi.set(__self__, "groups", groups)

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of comma separated strings that identifies user groups in your OIDC IdP. Each user group is made up of a group of private workers.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "groups", value)


@pulumi.input_type
class WorkteamNotificationConfigurationArgs:
    def __init__(__self__, *,
                 notification_topic_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] notification_topic_arn: The ARN for the SNS topic to which notifications should be published.
        """
        if notification_topic_arn is not None:
            pulumi.set(__self__, "notification_topic_arn", notification_topic_arn)

    @property
    @pulumi.getter(name="notificationTopicArn")
    def notification_topic_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN for the SNS topic to which notifications should be published.
        """
        return pulumi.get(self, "notification_topic_arn")

    @notification_topic_arn.setter
    def notification_topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_topic_arn", value)


