# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PreferencesArgs', 'Preferences']

@pulumi.input_type
class PreferencesArgs:
    def __init__(__self__, *,
                 member_account_discount_visibility: Optional[pulumi.Input[str]] = None,
                 savings_estimation_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Preferences resource.
        :param pulumi.Input[str] member_account_discount_visibility: Customize whether the member accounts can see the "After Discounts" savings estimates. Valid values are `All` and `None`. Default value is `All`.
        :param pulumi.Input[str] savings_estimation_mode: Customize how estimated monthly savings are calculated. Valid values are `BeforeDiscounts` and `AfterDiscounts`. Default value is `BeforeDiscounts`.
        """
        if member_account_discount_visibility is not None:
            pulumi.set(__self__, "member_account_discount_visibility", member_account_discount_visibility)
        if savings_estimation_mode is not None:
            pulumi.set(__self__, "savings_estimation_mode", savings_estimation_mode)

    @property
    @pulumi.getter(name="memberAccountDiscountVisibility")
    def member_account_discount_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Customize whether the member accounts can see the "After Discounts" savings estimates. Valid values are `All` and `None`. Default value is `All`.
        """
        return pulumi.get(self, "member_account_discount_visibility")

    @member_account_discount_visibility.setter
    def member_account_discount_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_account_discount_visibility", value)

    @property
    @pulumi.getter(name="savingsEstimationMode")
    def savings_estimation_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Customize how estimated monthly savings are calculated. Valid values are `BeforeDiscounts` and `AfterDiscounts`. Default value is `BeforeDiscounts`.
        """
        return pulumi.get(self, "savings_estimation_mode")

    @savings_estimation_mode.setter
    def savings_estimation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "savings_estimation_mode", value)


@pulumi.input_type
class _PreferencesState:
    def __init__(__self__, *,
                 member_account_discount_visibility: Optional[pulumi.Input[str]] = None,
                 savings_estimation_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Preferences resources.
        :param pulumi.Input[str] member_account_discount_visibility: Customize whether the member accounts can see the "After Discounts" savings estimates. Valid values are `All` and `None`. Default value is `All`.
        :param pulumi.Input[str] savings_estimation_mode: Customize how estimated monthly savings are calculated. Valid values are `BeforeDiscounts` and `AfterDiscounts`. Default value is `BeforeDiscounts`.
        """
        if member_account_discount_visibility is not None:
            pulumi.set(__self__, "member_account_discount_visibility", member_account_discount_visibility)
        if savings_estimation_mode is not None:
            pulumi.set(__self__, "savings_estimation_mode", savings_estimation_mode)

    @property
    @pulumi.getter(name="memberAccountDiscountVisibility")
    def member_account_discount_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Customize whether the member accounts can see the "After Discounts" savings estimates. Valid values are `All` and `None`. Default value is `All`.
        """
        return pulumi.get(self, "member_account_discount_visibility")

    @member_account_discount_visibility.setter
    def member_account_discount_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_account_discount_visibility", value)

    @property
    @pulumi.getter(name="savingsEstimationMode")
    def savings_estimation_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Customize how estimated monthly savings are calculated. Valid values are `BeforeDiscounts` and `AfterDiscounts`. Default value is `BeforeDiscounts`.
        """
        return pulumi.get(self, "savings_estimation_mode")

    @savings_estimation_mode.setter
    def savings_estimation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "savings_estimation_mode", value)


class Preferences(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 member_account_discount_visibility: Optional[pulumi.Input[str]] = None,
                 savings_estimation_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource for managing AWS Cost Optimization Hub Preferences.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.costoptimizationhub.Preferences("example")
        ```

        ### Usage with all the arguments

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.costoptimizationhub.Preferences("example",
            member_account_discount_visibility="None",
            savings_estimation_mode="AfterDiscounts")
        ```

        ## Import

        Using `pulumi import`, import Cost Optimization Hub Preferences using the `id`. For example:

        ```sh
        $ pulumi import aws:costoptimizationhub/preferences:Preferences example 111222333444
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] member_account_discount_visibility: Customize whether the member accounts can see the "After Discounts" savings estimates. Valid values are `All` and `None`. Default value is `All`.
        :param pulumi.Input[str] savings_estimation_mode: Customize how estimated monthly savings are calculated. Valid values are `BeforeDiscounts` and `AfterDiscounts`. Default value is `BeforeDiscounts`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PreferencesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource for managing AWS Cost Optimization Hub Preferences.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.costoptimizationhub.Preferences("example")
        ```

        ### Usage with all the arguments

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.costoptimizationhub.Preferences("example",
            member_account_discount_visibility="None",
            savings_estimation_mode="AfterDiscounts")
        ```

        ## Import

        Using `pulumi import`, import Cost Optimization Hub Preferences using the `id`. For example:

        ```sh
        $ pulumi import aws:costoptimizationhub/preferences:Preferences example 111222333444
        ```

        :param str resource_name: The name of the resource.
        :param PreferencesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PreferencesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 member_account_discount_visibility: Optional[pulumi.Input[str]] = None,
                 savings_estimation_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PreferencesArgs.__new__(PreferencesArgs)

            __props__.__dict__["member_account_discount_visibility"] = member_account_discount_visibility
            __props__.__dict__["savings_estimation_mode"] = savings_estimation_mode
        super(Preferences, __self__).__init__(
            'aws:costoptimizationhub/preferences:Preferences',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            member_account_discount_visibility: Optional[pulumi.Input[str]] = None,
            savings_estimation_mode: Optional[pulumi.Input[str]] = None) -> 'Preferences':
        """
        Get an existing Preferences resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] member_account_discount_visibility: Customize whether the member accounts can see the "After Discounts" savings estimates. Valid values are `All` and `None`. Default value is `All`.
        :param pulumi.Input[str] savings_estimation_mode: Customize how estimated monthly savings are calculated. Valid values are `BeforeDiscounts` and `AfterDiscounts`. Default value is `BeforeDiscounts`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PreferencesState.__new__(_PreferencesState)

        __props__.__dict__["member_account_discount_visibility"] = member_account_discount_visibility
        __props__.__dict__["savings_estimation_mode"] = savings_estimation_mode
        return Preferences(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="memberAccountDiscountVisibility")
    def member_account_discount_visibility(self) -> pulumi.Output[str]:
        """
        Customize whether the member accounts can see the "After Discounts" savings estimates. Valid values are `All` and `None`. Default value is `All`.
        """
        return pulumi.get(self, "member_account_discount_visibility")

    @property
    @pulumi.getter(name="savingsEstimationMode")
    def savings_estimation_mode(self) -> pulumi.Output[str]:
        """
        Customize how estimated monthly savings are calculated. Valid values are `BeforeDiscounts` and `AfterDiscounts`. Default value is `BeforeDiscounts`.
        """
        return pulumi.get(self, "savings_estimation_mode")

