# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Group(pulumi.CustomResource):
    """
    Provides an AutoScaling Group resource.
    
    -> **Note:** You must specify either `launch_configuration` or `launch_template`.
    """
    def __init__(__self__, __name__, __opts__=None, availability_zones=None, default_cooldown=None, desired_capacity=None, enabled_metrics=None, force_delete=None, health_check_grace_period=None, health_check_type=None, initial_lifecycle_hooks=None, launch_configuration=None, launch_template=None, load_balancers=None, max_size=None, metrics_granularity=None, min_elb_capacity=None, min_size=None, name=None, name_prefix=None, placement_group=None, protect_from_scale_in=None, service_linked_role_arn=None, suspended_processes=None, tags=None, tags_collection=None, target_group_arns=None, termination_policies=None, vpc_zone_identifiers=None, wait_for_capacity_timeout=None, wait_for_elb_capacity=None):
        """Create a Group resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['availabilityZones'] = availability_zones

        __props__['defaultCooldown'] = default_cooldown

        __props__['desiredCapacity'] = desired_capacity

        __props__['enabledMetrics'] = enabled_metrics

        __props__['forceDelete'] = force_delete

        __props__['healthCheckGracePeriod'] = health_check_grace_period

        __props__['healthCheckType'] = health_check_type

        __props__['initialLifecycleHooks'] = initial_lifecycle_hooks

        __props__['launchConfiguration'] = launch_configuration

        __props__['launchTemplate'] = launch_template

        __props__['loadBalancers'] = load_balancers

        if not max_size:
            raise TypeError('Missing required property max_size')
        __props__['maxSize'] = max_size

        __props__['metricsGranularity'] = metrics_granularity

        __props__['minElbCapacity'] = min_elb_capacity

        if not min_size:
            raise TypeError('Missing required property min_size')
        __props__['minSize'] = min_size

        __props__['name'] = name

        __props__['namePrefix'] = name_prefix

        __props__['placementGroup'] = placement_group

        __props__['protectFromScaleIn'] = protect_from_scale_in

        __props__['serviceLinkedRoleArn'] = service_linked_role_arn

        __props__['suspendedProcesses'] = suspended_processes

        __props__['tags'] = tags

        __props__['tagsCollection'] = tags_collection

        __props__['targetGroupArns'] = target_group_arns

        __props__['terminationPolicies'] = termination_policies

        __props__['vpcZoneIdentifiers'] = vpc_zone_identifiers

        __props__['waitForCapacityTimeout'] = wait_for_capacity_timeout

        __props__['waitForElbCapacity'] = wait_for_elb_capacity

        __props__['arn'] = None

        super(Group, __self__).__init__(
            'aws:autoscaling/group:Group',
            __name__,
            __props__,
            __opts__)

