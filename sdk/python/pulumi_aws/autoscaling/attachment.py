# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AttachmentArgs', 'Attachment']

@pulumi.input_type
class AttachmentArgs:
    def __init__(__self__, *,
                 autoscaling_group_name: pulumi.Input[str],
                 alb_target_group_arn: Optional[pulumi.Input[str]] = None,
                 elb: Optional[pulumi.Input[str]] = None,
                 lb_target_group_arn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Attachment resource.
        """
        pulumi.set(__self__, "autoscaling_group_name", autoscaling_group_name)
        if alb_target_group_arn is not None:
            warnings.warn("""Use lb_target_group_arn instead""", DeprecationWarning)
            pulumi.log.warn("""alb_target_group_arn is deprecated: Use lb_target_group_arn instead""")
        if alb_target_group_arn is not None:
            pulumi.set(__self__, "alb_target_group_arn", alb_target_group_arn)
        if elb is not None:
            pulumi.set(__self__, "elb", elb)
        if lb_target_group_arn is not None:
            pulumi.set(__self__, "lb_target_group_arn", lb_target_group_arn)

    @property
    @pulumi.getter(name="autoscalingGroupName")
    def autoscaling_group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "autoscaling_group_name")

    @autoscaling_group_name.setter
    def autoscaling_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "autoscaling_group_name", value)

    @property
    @pulumi.getter(name="albTargetGroupArn")
    def alb_target_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alb_target_group_arn")

    @alb_target_group_arn.setter
    def alb_target_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alb_target_group_arn", value)

    @property
    @pulumi.getter
    def elb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elb")

    @elb.setter
    def elb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elb", value)

    @property
    @pulumi.getter(name="lbTargetGroupArn")
    def lb_target_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lb_target_group_arn")

    @lb_target_group_arn.setter
    def lb_target_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_target_group_arn", value)


@pulumi.input_type
class _AttachmentState:
    def __init__(__self__, *,
                 alb_target_group_arn: Optional[pulumi.Input[str]] = None,
                 autoscaling_group_name: Optional[pulumi.Input[str]] = None,
                 elb: Optional[pulumi.Input[str]] = None,
                 lb_target_group_arn: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Attachment resources.
        """
        if alb_target_group_arn is not None:
            warnings.warn("""Use lb_target_group_arn instead""", DeprecationWarning)
            pulumi.log.warn("""alb_target_group_arn is deprecated: Use lb_target_group_arn instead""")
        if alb_target_group_arn is not None:
            pulumi.set(__self__, "alb_target_group_arn", alb_target_group_arn)
        if autoscaling_group_name is not None:
            pulumi.set(__self__, "autoscaling_group_name", autoscaling_group_name)
        if elb is not None:
            pulumi.set(__self__, "elb", elb)
        if lb_target_group_arn is not None:
            pulumi.set(__self__, "lb_target_group_arn", lb_target_group_arn)

    @property
    @pulumi.getter(name="albTargetGroupArn")
    def alb_target_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alb_target_group_arn")

    @alb_target_group_arn.setter
    def alb_target_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alb_target_group_arn", value)

    @property
    @pulumi.getter(name="autoscalingGroupName")
    def autoscaling_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autoscaling_group_name")

    @autoscaling_group_name.setter
    def autoscaling_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autoscaling_group_name", value)

    @property
    @pulumi.getter
    def elb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elb")

    @elb.setter
    def elb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elb", value)

    @property
    @pulumi.getter(name="lbTargetGroupArn")
    def lb_target_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lb_target_group_arn")

    @lb_target_group_arn.setter
    def lb_target_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_target_group_arn", value)


class Attachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alb_target_group_arn: Optional[pulumi.Input[str]] = None,
                 autoscaling_group_name: Optional[pulumi.Input[str]] = None,
                 elb: Optional[pulumi.Input[str]] = None,
                 lb_target_group_arn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Attachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Attachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alb_target_group_arn: Optional[pulumi.Input[str]] = None,
                 autoscaling_group_name: Optional[pulumi.Input[str]] = None,
                 elb: Optional[pulumi.Input[str]] = None,
                 lb_target_group_arn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AttachmentArgs.__new__(AttachmentArgs)

            if alb_target_group_arn is not None and not opts.urn:
                warnings.warn("""Use lb_target_group_arn instead""", DeprecationWarning)
                pulumi.log.warn("""alb_target_group_arn is deprecated: Use lb_target_group_arn instead""")
            __props__.__dict__["alb_target_group_arn"] = alb_target_group_arn
            if autoscaling_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'autoscaling_group_name'")
            __props__.__dict__["autoscaling_group_name"] = autoscaling_group_name
            __props__.__dict__["elb"] = elb
            __props__.__dict__["lb_target_group_arn"] = lb_target_group_arn
        super(Attachment, __self__).__init__(
            'aws:autoscaling/attachment:Attachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alb_target_group_arn: Optional[pulumi.Input[str]] = None,
            autoscaling_group_name: Optional[pulumi.Input[str]] = None,
            elb: Optional[pulumi.Input[str]] = None,
            lb_target_group_arn: Optional[pulumi.Input[str]] = None) -> 'Attachment':
        """
        Get an existing Attachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AttachmentState.__new__(_AttachmentState)

        __props__.__dict__["alb_target_group_arn"] = alb_target_group_arn
        __props__.__dict__["autoscaling_group_name"] = autoscaling_group_name
        __props__.__dict__["elb"] = elb
        __props__.__dict__["lb_target_group_arn"] = lb_target_group_arn
        return Attachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="albTargetGroupArn")
    def alb_target_group_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "alb_target_group_arn")

    @property
    @pulumi.getter(name="autoscalingGroupName")
    def autoscaling_group_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "autoscaling_group_name")

    @property
    @pulumi.getter
    def elb(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "elb")

    @property
    @pulumi.getter(name="lbTargetGroupArn")
    def lb_target_group_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lb_target_group_arn")

