# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'IdentitySourceConfigurationArgs',
    'IdentitySourceConfigurationArgsDict',
    'IdentitySourceConfigurationCognitoUserPoolConfigurationArgs',
    'IdentitySourceConfigurationCognitoUserPoolConfigurationArgsDict',
    'IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs',
    'IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgsDict',
    'IdentitySourceConfigurationOpenIdConnectConfigurationArgs',
    'IdentitySourceConfigurationOpenIdConnectConfigurationArgsDict',
    'IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs',
    'IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgsDict',
    'IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs',
    'IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgsDict',
    'IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs',
    'IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgsDict',
    'IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs',
    'IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgsDict',
    'PolicyDefinitionArgs',
    'PolicyDefinitionArgsDict',
    'PolicyDefinitionStaticArgs',
    'PolicyDefinitionStaticArgsDict',
    'PolicyDefinitionTemplateLinkedArgs',
    'PolicyDefinitionTemplateLinkedArgsDict',
    'PolicyDefinitionTemplateLinkedPrincipalArgs',
    'PolicyDefinitionTemplateLinkedPrincipalArgsDict',
    'PolicyDefinitionTemplateLinkedResourceArgs',
    'PolicyDefinitionTemplateLinkedResourceArgsDict',
    'PolicyStoreValidationSettingsArgs',
    'PolicyStoreValidationSettingsArgsDict',
    'SchemaDefinitionArgs',
    'SchemaDefinitionArgsDict',
]

MYPY = False

if not MYPY:
    class IdentitySourceConfigurationArgsDict(TypedDict):
        cognito_user_pool_configuration: NotRequired[pulumi.Input['IdentitySourceConfigurationCognitoUserPoolConfigurationArgsDict']]
        """
        Specifies the configuration details of an Amazon Cognito user pool that Verified Permissions can use as a source of authenticated identities as entities. See Cognito User Pool Configuration below.
        """
        open_id_connect_configuration: NotRequired[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationArgsDict']]
        """
        Specifies the configuration details of an OpenID Connect (OIDC) identity provider, or identity source, that Verified Permissions can use to generate entities from authenticated identities. See Open ID Connect Configuration below.
        """
elif False:
    IdentitySourceConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceConfigurationArgs:
    def __init__(__self__, *,
                 cognito_user_pool_configuration: Optional[pulumi.Input['IdentitySourceConfigurationCognitoUserPoolConfigurationArgs']] = None,
                 open_id_connect_configuration: Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationArgs']] = None):
        """
        :param pulumi.Input['IdentitySourceConfigurationCognitoUserPoolConfigurationArgs'] cognito_user_pool_configuration: Specifies the configuration details of an Amazon Cognito user pool that Verified Permissions can use as a source of authenticated identities as entities. See Cognito User Pool Configuration below.
        :param pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationArgs'] open_id_connect_configuration: Specifies the configuration details of an OpenID Connect (OIDC) identity provider, or identity source, that Verified Permissions can use to generate entities from authenticated identities. See Open ID Connect Configuration below.
        """
        if cognito_user_pool_configuration is not None:
            pulumi.set(__self__, "cognito_user_pool_configuration", cognito_user_pool_configuration)
        if open_id_connect_configuration is not None:
            pulumi.set(__self__, "open_id_connect_configuration", open_id_connect_configuration)

    @property
    @pulumi.getter(name="cognitoUserPoolConfiguration")
    def cognito_user_pool_configuration(self) -> Optional[pulumi.Input['IdentitySourceConfigurationCognitoUserPoolConfigurationArgs']]:
        """
        Specifies the configuration details of an Amazon Cognito user pool that Verified Permissions can use as a source of authenticated identities as entities. See Cognito User Pool Configuration below.
        """
        return pulumi.get(self, "cognito_user_pool_configuration")

    @cognito_user_pool_configuration.setter
    def cognito_user_pool_configuration(self, value: Optional[pulumi.Input['IdentitySourceConfigurationCognitoUserPoolConfigurationArgs']]):
        pulumi.set(self, "cognito_user_pool_configuration", value)

    @property
    @pulumi.getter(name="openIdConnectConfiguration")
    def open_id_connect_configuration(self) -> Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationArgs']]:
        """
        Specifies the configuration details of an OpenID Connect (OIDC) identity provider, or identity source, that Verified Permissions can use to generate entities from authenticated identities. See Open ID Connect Configuration below.
        """
        return pulumi.get(self, "open_id_connect_configuration")

    @open_id_connect_configuration.setter
    def open_id_connect_configuration(self, value: Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationArgs']]):
        pulumi.set(self, "open_id_connect_configuration", value)


if not MYPY:
    class IdentitySourceConfigurationCognitoUserPoolConfigurationArgsDict(TypedDict):
        user_pool_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the Amazon Cognito user pool that contains the identities to be authorized.
        """
        client_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The unique application client IDs that are associated with the specified Amazon Cognito user pool.
        """
        group_configuration: NotRequired[pulumi.Input['IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgsDict']]
        """
        The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
        """
elif False:
    IdentitySourceConfigurationCognitoUserPoolConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceConfigurationCognitoUserPoolConfigurationArgs:
    def __init__(__self__, *,
                 user_pool_arn: pulumi.Input[str],
                 client_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_configuration: Optional[pulumi.Input['IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs']] = None):
        """
        :param pulumi.Input[str] user_pool_arn: The Amazon Resource Name (ARN) of the Amazon Cognito user pool that contains the identities to be authorized.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_ids: The unique application client IDs that are associated with the specified Amazon Cognito user pool.
        :param pulumi.Input['IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs'] group_configuration: The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
        """
        pulumi.set(__self__, "user_pool_arn", user_pool_arn)
        if client_ids is not None:
            pulumi.set(__self__, "client_ids", client_ids)
        if group_configuration is not None:
            pulumi.set(__self__, "group_configuration", group_configuration)

    @property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the Amazon Cognito user pool that contains the identities to be authorized.
        """
        return pulumi.get(self, "user_pool_arn")

    @user_pool_arn.setter
    def user_pool_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_pool_arn", value)

    @property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The unique application client IDs that are associated with the specified Amazon Cognito user pool.
        """
        return pulumi.get(self, "client_ids")

    @client_ids.setter
    def client_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_ids", value)

    @property
    @pulumi.getter(name="groupConfiguration")
    def group_configuration(self) -> Optional[pulumi.Input['IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs']]:
        """
        The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
        """
        return pulumi.get(self, "group_configuration")

    @group_configuration.setter
    def group_configuration(self, value: Optional[pulumi.Input['IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs']]):
        pulumi.set(self, "group_configuration", value)


if not MYPY:
    class IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgsDict(TypedDict):
        group_entity_type: pulumi.Input[str]
        """
        The name of the schema entity type that's mapped to the user pool group. Defaults to `AWS::CognitoGroup`.
        """
elif False:
    IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceConfigurationCognitoUserPoolConfigurationGroupConfigurationArgs:
    def __init__(__self__, *,
                 group_entity_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] group_entity_type: The name of the schema entity type that's mapped to the user pool group. Defaults to `AWS::CognitoGroup`.
        """
        pulumi.set(__self__, "group_entity_type", group_entity_type)

    @property
    @pulumi.getter(name="groupEntityType")
    def group_entity_type(self) -> pulumi.Input[str]:
        """
        The name of the schema entity type that's mapped to the user pool group. Defaults to `AWS::CognitoGroup`.
        """
        return pulumi.get(self, "group_entity_type")

    @group_entity_type.setter
    def group_entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_entity_type", value)


if not MYPY:
    class IdentitySourceConfigurationOpenIdConnectConfigurationArgsDict(TypedDict):
        issuer: pulumi.Input[str]
        """
        The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
        """
        entity_id_prefix: NotRequired[pulumi.Input[str]]
        """
        A descriptive string that you want to prefix to user entities from your OIDC identity provider.
        """
        group_configuration: NotRequired[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgsDict']]
        """
        The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
        """
        token_selection: NotRequired[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgsDict']]
        """
        The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
        """
elif False:
    IdentitySourceConfigurationOpenIdConnectConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceConfigurationOpenIdConnectConfigurationArgs:
    def __init__(__self__, *,
                 issuer: pulumi.Input[str],
                 entity_id_prefix: Optional[pulumi.Input[str]] = None,
                 group_configuration: Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs']] = None,
                 token_selection: Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs']] = None):
        """
        :param pulumi.Input[str] issuer: The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
        :param pulumi.Input[str] entity_id_prefix: A descriptive string that you want to prefix to user entities from your OIDC identity provider.
        :param pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs'] group_configuration: The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
        :param pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs'] token_selection: The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
        """
        pulumi.set(__self__, "issuer", issuer)
        if entity_id_prefix is not None:
            pulumi.set(__self__, "entity_id_prefix", entity_id_prefix)
        if group_configuration is not None:
            pulumi.set(__self__, "group_configuration", group_configuration)
        if token_selection is not None:
            pulumi.set(__self__, "token_selection", token_selection)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        """
        The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="entityIdPrefix")
    def entity_id_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        A descriptive string that you want to prefix to user entities from your OIDC identity provider.
        """
        return pulumi.get(self, "entity_id_prefix")

    @entity_id_prefix.setter
    def entity_id_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id_prefix", value)

    @property
    @pulumi.getter(name="groupConfiguration")
    def group_configuration(self) -> Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs']]:
        """
        The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
        """
        return pulumi.get(self, "group_configuration")

    @group_configuration.setter
    def group_configuration(self, value: Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs']]):
        pulumi.set(self, "group_configuration", value)

    @property
    @pulumi.getter(name="tokenSelection")
    def token_selection(self) -> Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs']]:
        """
        The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
        """
        return pulumi.get(self, "token_selection")

    @token_selection.setter
    def token_selection(self, value: Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs']]):
        pulumi.set(self, "token_selection", value)


if not MYPY:
    class IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgsDict(TypedDict):
        group_claim: pulumi.Input[str]
        """
        The token claim that you want Verified Permissions to interpret as group membership. For example, `groups`.
        """
        group_entity_type: pulumi.Input[str]
        """
        The name of the schema entity type that's mapped to the user pool group. Defaults to `AWS::CognitoGroup`.
        """
elif False:
    IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs:
    def __init__(__self__, *,
                 group_claim: pulumi.Input[str],
                 group_entity_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] group_claim: The token claim that you want Verified Permissions to interpret as group membership. For example, `groups`.
        :param pulumi.Input[str] group_entity_type: The name of the schema entity type that's mapped to the user pool group. Defaults to `AWS::CognitoGroup`.
        """
        pulumi.set(__self__, "group_claim", group_claim)
        pulumi.set(__self__, "group_entity_type", group_entity_type)

    @property
    @pulumi.getter(name="groupClaim")
    def group_claim(self) -> pulumi.Input[str]:
        """
        The token claim that you want Verified Permissions to interpret as group membership. For example, `groups`.
        """
        return pulumi.get(self, "group_claim")

    @group_claim.setter
    def group_claim(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_claim", value)

    @property
    @pulumi.getter(name="groupEntityType")
    def group_entity_type(self) -> pulumi.Input[str]:
        """
        The name of the schema entity type that's mapped to the user pool group. Defaults to `AWS::CognitoGroup`.
        """
        return pulumi.get(self, "group_entity_type")

    @group_entity_type.setter
    def group_entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_entity_type", value)


if not MYPY:
    class IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgsDict(TypedDict):
        access_token_only: NotRequired[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgsDict']]
        """
        The OIDC configuration for processing access tokens. See Access Token Only below.
        """
        identity_token_only: NotRequired[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgsDict']]
        """
        The OIDC configuration for processing identity (ID) tokens. See Identity Token Only below.
        """
elif False:
    IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs:
    def __init__(__self__, *,
                 access_token_only: Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs']] = None,
                 identity_token_only: Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs']] = None):
        """
        :param pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs'] access_token_only: The OIDC configuration for processing access tokens. See Access Token Only below.
        :param pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs'] identity_token_only: The OIDC configuration for processing identity (ID) tokens. See Identity Token Only below.
        """
        if access_token_only is not None:
            pulumi.set(__self__, "access_token_only", access_token_only)
        if identity_token_only is not None:
            pulumi.set(__self__, "identity_token_only", identity_token_only)

    @property
    @pulumi.getter(name="accessTokenOnly")
    def access_token_only(self) -> Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs']]:
        """
        The OIDC configuration for processing access tokens. See Access Token Only below.
        """
        return pulumi.get(self, "access_token_only")

    @access_token_only.setter
    def access_token_only(self, value: Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs']]):
        pulumi.set(self, "access_token_only", value)

    @property
    @pulumi.getter(name="identityTokenOnly")
    def identity_token_only(self) -> Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs']]:
        """
        The OIDC configuration for processing identity (ID) tokens. See Identity Token Only below.
        """
        return pulumi.get(self, "identity_token_only")

    @identity_token_only.setter
    def identity_token_only(self, value: Optional[pulumi.Input['IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs']]):
        pulumi.set(self, "identity_token_only", value)


if not MYPY:
    class IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgsDict(TypedDict):
        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The access token aud claim values that you want to accept in your policy store.
        """
        principal_id_claim: NotRequired[pulumi.Input[str]]
        """
        The claim that determines the principal in OIDC access tokens.
        """
elif False:
    IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionAccessTokenOnlyArgs:
    def __init__(__self__, *,
                 audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principal_id_claim: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: The access token aud claim values that you want to accept in your policy store.
        :param pulumi.Input[str] principal_id_claim: The claim that determines the principal in OIDC access tokens.
        """
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if principal_id_claim is not None:
            pulumi.set(__self__, "principal_id_claim", principal_id_claim)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The access token aud claim values that you want to accept in your policy store.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter(name="principalIdClaim")
    def principal_id_claim(self) -> Optional[pulumi.Input[str]]:
        """
        The claim that determines the principal in OIDC access tokens.
        """
        return pulumi.get(self, "principal_id_claim")

    @principal_id_claim.setter
    def principal_id_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id_claim", value)


if not MYPY:
    class IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgsDict(TypedDict):
        client_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider.
        """
        principal_id_claim: NotRequired[pulumi.Input[str]]
        """
        The claim that determines the principal in OIDC access tokens.
        """
elif False:
    IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionIdentityTokenOnlyArgs:
    def __init__(__self__, *,
                 client_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principal_id_claim: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_ids: The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider.
        :param pulumi.Input[str] principal_id_claim: The claim that determines the principal in OIDC access tokens.
        """
        if client_ids is not None:
            pulumi.set(__self__, "client_ids", client_ids)
        if principal_id_claim is not None:
            pulumi.set(__self__, "principal_id_claim", principal_id_claim)

    @property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider.
        """
        return pulumi.get(self, "client_ids")

    @client_ids.setter
    def client_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_ids", value)

    @property
    @pulumi.getter(name="principalIdClaim")
    def principal_id_claim(self) -> Optional[pulumi.Input[str]]:
        """
        The claim that determines the principal in OIDC access tokens.
        """
        return pulumi.get(self, "principal_id_claim")

    @principal_id_claim.setter
    def principal_id_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id_claim", value)


if not MYPY:
    class PolicyDefinitionArgsDict(TypedDict):
        static: NotRequired[pulumi.Input['PolicyDefinitionStaticArgsDict']]
        """
        The static policy statement. See Static below.
        """
        template_linked: NotRequired[pulumi.Input['PolicyDefinitionTemplateLinkedArgsDict']]
        """
        The template linked policy. See Template Linked below.
        """
elif False:
    PolicyDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyDefinitionArgs:
    def __init__(__self__, *,
                 static: Optional[pulumi.Input['PolicyDefinitionStaticArgs']] = None,
                 template_linked: Optional[pulumi.Input['PolicyDefinitionTemplateLinkedArgs']] = None):
        """
        :param pulumi.Input['PolicyDefinitionStaticArgs'] static: The static policy statement. See Static below.
        :param pulumi.Input['PolicyDefinitionTemplateLinkedArgs'] template_linked: The template linked policy. See Template Linked below.
        """
        if static is not None:
            pulumi.set(__self__, "static", static)
        if template_linked is not None:
            pulumi.set(__self__, "template_linked", template_linked)

    @property
    @pulumi.getter
    def static(self) -> Optional[pulumi.Input['PolicyDefinitionStaticArgs']]:
        """
        The static policy statement. See Static below.
        """
        return pulumi.get(self, "static")

    @static.setter
    def static(self, value: Optional[pulumi.Input['PolicyDefinitionStaticArgs']]):
        pulumi.set(self, "static", value)

    @property
    @pulumi.getter(name="templateLinked")
    def template_linked(self) -> Optional[pulumi.Input['PolicyDefinitionTemplateLinkedArgs']]:
        """
        The template linked policy. See Template Linked below.
        """
        return pulumi.get(self, "template_linked")

    @template_linked.setter
    def template_linked(self, value: Optional[pulumi.Input['PolicyDefinitionTemplateLinkedArgs']]):
        pulumi.set(self, "template_linked", value)


if not MYPY:
    class PolicyDefinitionStaticArgsDict(TypedDict):
        statement: pulumi.Input[str]
        """
        The statement of the static policy.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the static policy.
        """
elif False:
    PolicyDefinitionStaticArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyDefinitionStaticArgs:
    def __init__(__self__, *,
                 statement: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] statement: The statement of the static policy.
        :param pulumi.Input[str] description: The description of the static policy.
        """
        pulumi.set(__self__, "statement", statement)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def statement(self) -> pulumi.Input[str]:
        """
        The statement of the static policy.
        """
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: pulumi.Input[str]):
        pulumi.set(self, "statement", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the static policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class PolicyDefinitionTemplateLinkedArgsDict(TypedDict):
        policy_template_id: pulumi.Input[str]
        """
        The ID of the template.
        """
        principal: NotRequired[pulumi.Input['PolicyDefinitionTemplateLinkedPrincipalArgsDict']]
        """
        The principal of the template linked policy.
        """
        resource: NotRequired[pulumi.Input['PolicyDefinitionTemplateLinkedResourceArgsDict']]
        """
        The resource of the template linked policy.
        """
elif False:
    PolicyDefinitionTemplateLinkedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyDefinitionTemplateLinkedArgs:
    def __init__(__self__, *,
                 policy_template_id: pulumi.Input[str],
                 principal: Optional[pulumi.Input['PolicyDefinitionTemplateLinkedPrincipalArgs']] = None,
                 resource: Optional[pulumi.Input['PolicyDefinitionTemplateLinkedResourceArgs']] = None):
        """
        :param pulumi.Input[str] policy_template_id: The ID of the template.
        :param pulumi.Input['PolicyDefinitionTemplateLinkedPrincipalArgs'] principal: The principal of the template linked policy.
        :param pulumi.Input['PolicyDefinitionTemplateLinkedResourceArgs'] resource: The resource of the template linked policy.
        """
        pulumi.set(__self__, "policy_template_id", policy_template_id)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter(name="policyTemplateId")
    def policy_template_id(self) -> pulumi.Input[str]:
        """
        The ID of the template.
        """
        return pulumi.get(self, "policy_template_id")

    @policy_template_id.setter
    def policy_template_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_template_id", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input['PolicyDefinitionTemplateLinkedPrincipalArgs']]:
        """
        The principal of the template linked policy.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input['PolicyDefinitionTemplateLinkedPrincipalArgs']]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input['PolicyDefinitionTemplateLinkedResourceArgs']]:
        """
        The resource of the template linked policy.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input['PolicyDefinitionTemplateLinkedResourceArgs']]):
        pulumi.set(self, "resource", value)


if not MYPY:
    class PolicyDefinitionTemplateLinkedPrincipalArgsDict(TypedDict):
        entity_id: pulumi.Input[str]
        """
        The entity ID of the principal.
        """
        entity_type: pulumi.Input[str]
        """
        The entity type of the principal.
        """
elif False:
    PolicyDefinitionTemplateLinkedPrincipalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyDefinitionTemplateLinkedPrincipalArgs:
    def __init__(__self__, *,
                 entity_id: pulumi.Input[str],
                 entity_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] entity_id: The entity ID of the principal.
        :param pulumi.Input[str] entity_type: The entity type of the principal.
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Input[str]:
        """
        The entity ID of the principal.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Input[str]:
        """
        The entity type of the principal.
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_type", value)


if not MYPY:
    class PolicyDefinitionTemplateLinkedResourceArgsDict(TypedDict):
        entity_id: pulumi.Input[str]
        """
        The entity ID of the resource.
        """
        entity_type: pulumi.Input[str]
        """
        The entity type of the resource.
        """
elif False:
    PolicyDefinitionTemplateLinkedResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyDefinitionTemplateLinkedResourceArgs:
    def __init__(__self__, *,
                 entity_id: pulumi.Input[str],
                 entity_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] entity_id: The entity ID of the resource.
        :param pulumi.Input[str] entity_type: The entity type of the resource.
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Input[str]:
        """
        The entity ID of the resource.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Input[str]:
        """
        The entity type of the resource.
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_type", value)


if not MYPY:
    class PolicyStoreValidationSettingsArgsDict(TypedDict):
        mode: pulumi.Input[str]
        """
        The mode for the validation settings. Valid values: `OFF`, `STRICT`.

        The following arguments are optional:
        """
elif False:
    PolicyStoreValidationSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyStoreValidationSettingsArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        """
        :param pulumi.Input[str] mode: The mode for the validation settings. Valid values: `OFF`, `STRICT`.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        The mode for the validation settings. Valid values: `OFF`, `STRICT`.

        The following arguments are optional:
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


if not MYPY:
    class SchemaDefinitionArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        A JSON string representation of the schema.
        """
elif False:
    SchemaDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SchemaDefinitionArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: A JSON string representation of the schema.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A JSON string representation of the schema.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


