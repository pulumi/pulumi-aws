# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetServerlessAccessPolicyResult',
    'AwaitableGetServerlessAccessPolicyResult',
    'get_serverless_access_policy',
    'get_serverless_access_policy_output',
]

@pulumi.output_type
class GetServerlessAccessPolicyResult:
    """
    A collection of values returned by getServerlessAccessPolicy.
    """
    def __init__(__self__, description=None, id=None, name=None, policy=None, policy_version=None, region=None, type=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy and not isinstance(policy, str):
            raise TypeError("Expected argument 'policy' to be a str")
        pulumi.set(__self__, "policy", policy)
        if policy_version and not isinstance(policy_version, str):
            raise TypeError("Expected argument 'policy_version' to be a str")
        pulumi.set(__self__, "policy_version", policy_version)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the policy. Typically used to store information about the permissions defined in the policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        """
        JSON policy document to use as the content for the new policy.
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="policyVersion")
    def policy_version(self) -> _builtins.str:
        """
        Version of the policy.
        """
        return pulumi.get(self, "policy_version")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetServerlessAccessPolicyResult(GetServerlessAccessPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServerlessAccessPolicyResult(
            description=self.description,
            id=self.id,
            name=self.name,
            policy=self.policy,
            policy_version=self.policy_version,
            region=self.region,
            type=self.type)


def get_serverless_access_policy(name: Optional[_builtins.str] = None,
                                 region: Optional[_builtins.str] = None,
                                 type: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServerlessAccessPolicyResult:
    """
    Data source for managing an AWS OpenSearch Serverless Access Policy.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.opensearch.get_serverless_access_policy(name=example_aws_opensearchserverless_access_policy["name"],
        type=example_aws_opensearchserverless_access_policy["type"])
    ```


    :param _builtins.str name: Name of the policy.
    :param _builtins.str region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
    :param _builtins.str type: Type of access policy. Must be `data`.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:opensearch/getServerlessAccessPolicy:getServerlessAccessPolicy', __args__, opts=opts, typ=GetServerlessAccessPolicyResult).value

    return AwaitableGetServerlessAccessPolicyResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policy=pulumi.get(__ret__, 'policy'),
        policy_version=pulumi.get(__ret__, 'policy_version'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_serverless_access_policy_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        type: Optional[pulumi.Input[_builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServerlessAccessPolicyResult]:
    """
    Data source for managing an AWS OpenSearch Serverless Access Policy.

    ## Example Usage

    ### Basic Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.opensearch.get_serverless_access_policy(name=example_aws_opensearchserverless_access_policy["name"],
        type=example_aws_opensearchserverless_access_policy["type"])
    ```


    :param _builtins.str name: Name of the policy.
    :param _builtins.str region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
    :param _builtins.str type: Type of access policy. Must be `data`.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws:opensearch/getServerlessAccessPolicy:getServerlessAccessPolicy', __args__, opts=opts, typ=GetServerlessAccessPolicyResult)
    return __ret__.apply(lambda __response__: GetServerlessAccessPolicyResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        policy=pulumi.get(__response__, 'policy'),
        policy_version=pulumi.get(__response__, 'policy_version'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))
