# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CollaborationDataEncryptionMetadataArgs',
    'CollaborationDataEncryptionMetadataArgsDict',
    'CollaborationMemberArgs',
    'CollaborationMemberArgsDict',
    'ConfiguredTableTableReferenceArgs',
    'ConfiguredTableTableReferenceArgsDict',
    'MembershipDefaultResultConfigurationArgs',
    'MembershipDefaultResultConfigurationArgsDict',
    'MembershipDefaultResultConfigurationOutputConfigurationArgs',
    'MembershipDefaultResultConfigurationOutputConfigurationArgsDict',
    'MembershipDefaultResultConfigurationOutputConfigurationS3Args',
    'MembershipDefaultResultConfigurationOutputConfigurationS3ArgsDict',
    'MembershipPaymentConfigurationArgs',
    'MembershipPaymentConfigurationArgsDict',
    'MembershipPaymentConfigurationQueryComputeArgs',
    'MembershipPaymentConfigurationQueryComputeArgsDict',
]

MYPY = False

if not MYPY:
    class CollaborationDataEncryptionMetadataArgsDict(TypedDict):
        allow_clear_text: pulumi.Input[bool]
        allow_duplicates: pulumi.Input[bool]
        allow_joins_on_columns_with_different_names: pulumi.Input[bool]
        preserve_nulls: pulumi.Input[bool]
elif False:
    CollaborationDataEncryptionMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CollaborationDataEncryptionMetadataArgs:
    def __init__(__self__, *,
                 allow_clear_text: pulumi.Input[bool],
                 allow_duplicates: pulumi.Input[bool],
                 allow_joins_on_columns_with_different_names: pulumi.Input[bool],
                 preserve_nulls: pulumi.Input[bool]):
        pulumi.set(__self__, "allow_clear_text", allow_clear_text)
        pulumi.set(__self__, "allow_duplicates", allow_duplicates)
        pulumi.set(__self__, "allow_joins_on_columns_with_different_names", allow_joins_on_columns_with_different_names)
        pulumi.set(__self__, "preserve_nulls", preserve_nulls)

    @property
    @pulumi.getter(name="allowClearText")
    def allow_clear_text(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_clear_text")

    @allow_clear_text.setter
    def allow_clear_text(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_clear_text", value)

    @property
    @pulumi.getter(name="allowDuplicates")
    def allow_duplicates(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_duplicates")

    @allow_duplicates.setter
    def allow_duplicates(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_duplicates", value)

    @property
    @pulumi.getter(name="allowJoinsOnColumnsWithDifferentNames")
    def allow_joins_on_columns_with_different_names(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_joins_on_columns_with_different_names")

    @allow_joins_on_columns_with_different_names.setter
    def allow_joins_on_columns_with_different_names(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_joins_on_columns_with_different_names", value)

    @property
    @pulumi.getter(name="preserveNulls")
    def preserve_nulls(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "preserve_nulls")

    @preserve_nulls.setter
    def preserve_nulls(self, value: pulumi.Input[bool]):
        pulumi.set(self, "preserve_nulls", value)


if not MYPY:
    class CollaborationMemberArgsDict(TypedDict):
        account_id: pulumi.Input[str]
        display_name: pulumi.Input[str]
        member_abilities: pulumi.Input[Sequence[pulumi.Input[str]]]
        status: NotRequired[pulumi.Input[str]]
elif False:
    CollaborationMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CollaborationMemberArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 member_abilities: pulumi.Input[Sequence[pulumi.Input[str]]],
                 status: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "member_abilities", member_abilities)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="memberAbilities")
    def member_abilities(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "member_abilities")

    @member_abilities.setter
    def member_abilities(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "member_abilities", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ConfiguredTableTableReferenceArgsDict(TypedDict):
        database_name: pulumi.Input[str]
        table_name: pulumi.Input[str]
elif False:
    ConfiguredTableTableReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfiguredTableTableReferenceArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 table_name: pulumi.Input[str]):
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)


if not MYPY:
    class MembershipDefaultResultConfigurationArgsDict(TypedDict):
        output_configuration: NotRequired[pulumi.Input['MembershipDefaultResultConfigurationOutputConfigurationArgsDict']]
        role_arn: NotRequired[pulumi.Input[str]]
        """
        The ARN of the IAM role which will be used to create the membership.
        - `output_configuration.s3.bucket` - (Required) - The name of the S3 bucket where the query results will be stored.
        - `output_configuration.s3.result_format` - (Required) - The format of the query results. Valid values are `PARQUET` and `CSV`.
        - `output_configuration.s3.key_prefix` - (Optional) - The prefix used for the query results.
        """
elif False:
    MembershipDefaultResultConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MembershipDefaultResultConfigurationArgs:
    def __init__(__self__, *,
                 output_configuration: Optional[pulumi.Input['MembershipDefaultResultConfigurationOutputConfigurationArgs']] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role_arn: The ARN of the IAM role which will be used to create the membership.
               - `output_configuration.s3.bucket` - (Required) - The name of the S3 bucket where the query results will be stored.
               - `output_configuration.s3.result_format` - (Required) - The format of the query results. Valid values are `PARQUET` and `CSV`.
               - `output_configuration.s3.key_prefix` - (Optional) - The prefix used for the query results.
        """
        if output_configuration is not None:
            pulumi.set(__self__, "output_configuration", output_configuration)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="outputConfiguration")
    def output_configuration(self) -> Optional[pulumi.Input['MembershipDefaultResultConfigurationOutputConfigurationArgs']]:
        return pulumi.get(self, "output_configuration")

    @output_configuration.setter
    def output_configuration(self, value: Optional[pulumi.Input['MembershipDefaultResultConfigurationOutputConfigurationArgs']]):
        pulumi.set(self, "output_configuration", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the IAM role which will be used to create the membership.
        - `output_configuration.s3.bucket` - (Required) - The name of the S3 bucket where the query results will be stored.
        - `output_configuration.s3.result_format` - (Required) - The format of the query results. Valid values are `PARQUET` and `CSV`.
        - `output_configuration.s3.key_prefix` - (Optional) - The prefix used for the query results.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


if not MYPY:
    class MembershipDefaultResultConfigurationOutputConfigurationArgsDict(TypedDict):
        s3: NotRequired[pulumi.Input['MembershipDefaultResultConfigurationOutputConfigurationS3ArgsDict']]
elif False:
    MembershipDefaultResultConfigurationOutputConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MembershipDefaultResultConfigurationOutputConfigurationArgs:
    def __init__(__self__, *,
                 s3: Optional[pulumi.Input['MembershipDefaultResultConfigurationOutputConfigurationS3Args']] = None):
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['MembershipDefaultResultConfigurationOutputConfigurationS3Args']]:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['MembershipDefaultResultConfigurationOutputConfigurationS3Args']]):
        pulumi.set(self, "s3", value)


if not MYPY:
    class MembershipDefaultResultConfigurationOutputConfigurationS3ArgsDict(TypedDict):
        bucket: pulumi.Input[str]
        result_format: pulumi.Input[str]
        key_prefix: NotRequired[pulumi.Input[str]]
elif False:
    MembershipDefaultResultConfigurationOutputConfigurationS3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MembershipDefaultResultConfigurationOutputConfigurationS3Args:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 result_format: pulumi.Input[str],
                 key_prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "result_format", result_format)
        if key_prefix is not None:
            pulumi.set(__self__, "key_prefix", key_prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="resultFormat")
    def result_format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "result_format")

    @result_format.setter
    def result_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "result_format", value)

    @property
    @pulumi.getter(name="keyPrefix")
    def key_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_prefix")

    @key_prefix.setter
    def key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_prefix", value)


if not MYPY:
    class MembershipPaymentConfigurationArgsDict(TypedDict):
        query_compute: NotRequired[pulumi.Input['MembershipPaymentConfigurationQueryComputeArgsDict']]
elif False:
    MembershipPaymentConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MembershipPaymentConfigurationArgs:
    def __init__(__self__, *,
                 query_compute: Optional[pulumi.Input['MembershipPaymentConfigurationQueryComputeArgs']] = None):
        if query_compute is not None:
            pulumi.set(__self__, "query_compute", query_compute)

    @property
    @pulumi.getter(name="queryCompute")
    def query_compute(self) -> Optional[pulumi.Input['MembershipPaymentConfigurationQueryComputeArgs']]:
        return pulumi.get(self, "query_compute")

    @query_compute.setter
    def query_compute(self, value: Optional[pulumi.Input['MembershipPaymentConfigurationQueryComputeArgs']]):
        pulumi.set(self, "query_compute", value)


if not MYPY:
    class MembershipPaymentConfigurationQueryComputeArgsDict(TypedDict):
        is_responsible: pulumi.Input[bool]
        """
        Indicates whether the collaboration member has accepted to pay for query compute costs.
        """
elif False:
    MembershipPaymentConfigurationQueryComputeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MembershipPaymentConfigurationQueryComputeArgs:
    def __init__(__self__, *,
                 is_responsible: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] is_responsible: Indicates whether the collaboration member has accepted to pay for query compute costs.
        """
        pulumi.set(__self__, "is_responsible", is_responsible)

    @property
    @pulumi.getter(name="isResponsible")
    def is_responsible(self) -> pulumi.Input[bool]:
        """
        Indicates whether the collaboration member has accepted to pay for query compute costs.
        """
        return pulumi.get(self, "is_responsible")

    @is_responsible.setter
    def is_responsible(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_responsible", value)


