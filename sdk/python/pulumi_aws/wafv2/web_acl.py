# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WebAclArgs', 'WebAcl']

@pulumi.input_type
class WebAclArgs:
    def __init__(__self__, *,
                 default_action: pulumi.Input['WebAclDefaultActionArgs'],
                 scope: pulumi.Input[_builtins.str],
                 visibility_config: pulumi.Input['WebAclVisibilityConfigArgs'],
                 association_config: Optional[pulumi.Input['WebAclAssociationConfigArgs']] = None,
                 captcha_config: Optional[pulumi.Input['WebAclCaptchaConfigArgs']] = None,
                 challenge_config: Optional[pulumi.Input['WebAclChallengeConfigArgs']] = None,
                 custom_response_bodies: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclCustomResponseBodyArgs']]]] = None,
                 data_protection_config: Optional[pulumi.Input['WebAclDataProtectionConfigArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_json: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 token_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a WebAcl resource.
        :param pulumi.Input['WebAclDefaultActionArgs'] default_action: Action to perform if none of the `rules` contained in the WebACL match. See `default_action` below for details.
        :param pulumi.Input[_builtins.str] scope: Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        :param pulumi.Input['WebAclVisibilityConfigArgs'] visibility_config: Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibility_config` below for details.
        :param pulumi.Input['WebAclAssociationConfigArgs'] association_config: Specifies custom configurations for the associations between the web ACL and protected resources. See `association_config` below for details.
        :param pulumi.Input['WebAclCaptchaConfigArgs'] captcha_config: Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captcha_config` below for details.
        :param pulumi.Input['WebAclChallengeConfigArgs'] challenge_config: Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challenge_config` below for details.
        :param pulumi.Input[Sequence[pulumi.Input['WebAclCustomResponseBodyArgs']]] custom_response_bodies: Defines custom response bodies that can be referenced by `custom_response` actions. See `custom_response_body` below for details.
        :param pulumi.Input['WebAclDataProtectionConfigArgs'] data_protection_config: Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option. See `data_protection_config` below for details.
        :param pulumi.Input[_builtins.str] description: Friendly description of the WebACL.
        :param pulumi.Input[_builtins.str] name: Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        :param pulumi.Input[_builtins.str] name_prefix: Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        :param pulumi.Input[_builtins.str] region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        :param pulumi.Input[_builtins.str] rule_json: Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `rule_json` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        :param pulumi.Input[Sequence[pulumi.Input['WebAclRuleArgs']]] rules: Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Map of key-value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] token_domains: Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        """
        pulumi.set(__self__, "default_action", default_action)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "visibility_config", visibility_config)
        if association_config is not None:
            pulumi.set(__self__, "association_config", association_config)
        if captcha_config is not None:
            pulumi.set(__self__, "captcha_config", captcha_config)
        if challenge_config is not None:
            pulumi.set(__self__, "challenge_config", challenge_config)
        if custom_response_bodies is not None:
            pulumi.set(__self__, "custom_response_bodies", custom_response_bodies)
        if data_protection_config is not None:
            pulumi.set(__self__, "data_protection_config", data_protection_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rule_json is not None:
            pulumi.set(__self__, "rule_json", rule_json)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token_domains is not None:
            pulumi.set(__self__, "token_domains", token_domains)

    @_builtins.property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> pulumi.Input['WebAclDefaultActionArgs']:
        """
        Action to perform if none of the `rules` contained in the WebACL match. See `default_action` below for details.
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: pulumi.Input['WebAclDefaultActionArgs']):
        pulumi.set(self, "default_action", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="visibilityConfig")
    def visibility_config(self) -> pulumi.Input['WebAclVisibilityConfigArgs']:
        """
        Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibility_config` below for details.
        """
        return pulumi.get(self, "visibility_config")

    @visibility_config.setter
    def visibility_config(self, value: pulumi.Input['WebAclVisibilityConfigArgs']):
        pulumi.set(self, "visibility_config", value)

    @_builtins.property
    @pulumi.getter(name="associationConfig")
    def association_config(self) -> Optional[pulumi.Input['WebAclAssociationConfigArgs']]:
        """
        Specifies custom configurations for the associations between the web ACL and protected resources. See `association_config` below for details.
        """
        return pulumi.get(self, "association_config")

    @association_config.setter
    def association_config(self, value: Optional[pulumi.Input['WebAclAssociationConfigArgs']]):
        pulumi.set(self, "association_config", value)

    @_builtins.property
    @pulumi.getter(name="captchaConfig")
    def captcha_config(self) -> Optional[pulumi.Input['WebAclCaptchaConfigArgs']]:
        """
        Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captcha_config` below for details.
        """
        return pulumi.get(self, "captcha_config")

    @captcha_config.setter
    def captcha_config(self, value: Optional[pulumi.Input['WebAclCaptchaConfigArgs']]):
        pulumi.set(self, "captcha_config", value)

    @_builtins.property
    @pulumi.getter(name="challengeConfig")
    def challenge_config(self) -> Optional[pulumi.Input['WebAclChallengeConfigArgs']]:
        """
        Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challenge_config` below for details.
        """
        return pulumi.get(self, "challenge_config")

    @challenge_config.setter
    def challenge_config(self, value: Optional[pulumi.Input['WebAclChallengeConfigArgs']]):
        pulumi.set(self, "challenge_config", value)

    @_builtins.property
    @pulumi.getter(name="customResponseBodies")
    def custom_response_bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclCustomResponseBodyArgs']]]]:
        """
        Defines custom response bodies that can be referenced by `custom_response` actions. See `custom_response_body` below for details.
        """
        return pulumi.get(self, "custom_response_bodies")

    @custom_response_bodies.setter
    def custom_response_bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclCustomResponseBodyArgs']]]]):
        pulumi.set(self, "custom_response_bodies", value)

    @_builtins.property
    @pulumi.getter(name="dataProtectionConfig")
    def data_protection_config(self) -> Optional[pulumi.Input['WebAclDataProtectionConfigArgs']]:
        """
        Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option. See `data_protection_config` below for details.
        """
        return pulumi.get(self, "data_protection_config")

    @data_protection_config.setter
    def data_protection_config(self, value: Optional[pulumi.Input['WebAclDataProtectionConfigArgs']]):
        pulumi.set(self, "data_protection_config", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly description of the WebACL.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_prefix", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ruleJson")
    def rule_json(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `rule_json` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        """
        return pulumi.get(self, "rule_json")

    @rule_json.setter
    def rule_json(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_json", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleArgs']]]]:
        """
        Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of key-value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tokenDomains")
    def token_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        """
        return pulumi.get(self, "token_domains")

    @token_domains.setter
    def token_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "token_domains", value)


@pulumi.input_type
class _WebAclState:
    def __init__(__self__, *,
                 application_integration_url: Optional[pulumi.Input[_builtins.str]] = None,
                 arn: Optional[pulumi.Input[_builtins.str]] = None,
                 association_config: Optional[pulumi.Input['WebAclAssociationConfigArgs']] = None,
                 capacity: Optional[pulumi.Input[_builtins.int]] = None,
                 captcha_config: Optional[pulumi.Input['WebAclCaptchaConfigArgs']] = None,
                 challenge_config: Optional[pulumi.Input['WebAclChallengeConfigArgs']] = None,
                 custom_response_bodies: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclCustomResponseBodyArgs']]]] = None,
                 data_protection_config: Optional[pulumi.Input['WebAclDataProtectionConfigArgs']] = None,
                 default_action: Optional[pulumi.Input['WebAclDefaultActionArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 lock_token: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_json: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleArgs']]]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 token_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 visibility_config: Optional[pulumi.Input['WebAclVisibilityConfigArgs']] = None):
        """
        Input properties used for looking up and filtering WebAcl resources.
        :param pulumi.Input[_builtins.str] application_integration_url: The URL to use in SDK integrations with managed rule groups.
        :param pulumi.Input[_builtins.str] arn: The ARN of the WAF WebACL.
        :param pulumi.Input['WebAclAssociationConfigArgs'] association_config: Specifies custom configurations for the associations between the web ACL and protected resources. See `association_config` below for details.
        :param pulumi.Input[_builtins.int] capacity: Web ACL capacity units (WCUs) currently being used by this web ACL.
        :param pulumi.Input['WebAclCaptchaConfigArgs'] captcha_config: Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captcha_config` below for details.
        :param pulumi.Input['WebAclChallengeConfigArgs'] challenge_config: Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challenge_config` below for details.
        :param pulumi.Input[Sequence[pulumi.Input['WebAclCustomResponseBodyArgs']]] custom_response_bodies: Defines custom response bodies that can be referenced by `custom_response` actions. See `custom_response_body` below for details.
        :param pulumi.Input['WebAclDataProtectionConfigArgs'] data_protection_config: Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option. See `data_protection_config` below for details.
        :param pulumi.Input['WebAclDefaultActionArgs'] default_action: Action to perform if none of the `rules` contained in the WebACL match. See `default_action` below for details.
        :param pulumi.Input[_builtins.str] description: Friendly description of the WebACL.
        :param pulumi.Input[_builtins.str] name: Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        :param pulumi.Input[_builtins.str] name_prefix: Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        :param pulumi.Input[_builtins.str] region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        :param pulumi.Input[_builtins.str] rule_json: Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `rule_json` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        :param pulumi.Input[Sequence[pulumi.Input['WebAclRuleArgs']]] rules: Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        :param pulumi.Input[_builtins.str] scope: Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Map of key-value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags_all: Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] token_domains: Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        :param pulumi.Input['WebAclVisibilityConfigArgs'] visibility_config: Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibility_config` below for details.
        """
        if application_integration_url is not None:
            pulumi.set(__self__, "application_integration_url", application_integration_url)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if association_config is not None:
            pulumi.set(__self__, "association_config", association_config)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if captcha_config is not None:
            pulumi.set(__self__, "captcha_config", captcha_config)
        if challenge_config is not None:
            pulumi.set(__self__, "challenge_config", challenge_config)
        if custom_response_bodies is not None:
            pulumi.set(__self__, "custom_response_bodies", custom_response_bodies)
        if data_protection_config is not None:
            pulumi.set(__self__, "data_protection_config", data_protection_config)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if lock_token is not None:
            pulumi.set(__self__, "lock_token", lock_token)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rule_json is not None:
            pulumi.set(__self__, "rule_json", rule_json)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if token_domains is not None:
            pulumi.set(__self__, "token_domains", token_domains)
        if visibility_config is not None:
            pulumi.set(__self__, "visibility_config", visibility_config)

    @_builtins.property
    @pulumi.getter(name="applicationIntegrationUrl")
    def application_integration_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL to use in SDK integrations with managed rule groups.
        """
        return pulumi.get(self, "application_integration_url")

    @application_integration_url.setter
    def application_integration_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_integration_url", value)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ARN of the WAF WebACL.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arn", value)

    @_builtins.property
    @pulumi.getter(name="associationConfig")
    def association_config(self) -> Optional[pulumi.Input['WebAclAssociationConfigArgs']]:
        """
        Specifies custom configurations for the associations between the web ACL and protected resources. See `association_config` below for details.
        """
        return pulumi.get(self, "association_config")

    @association_config.setter
    def association_config(self, value: Optional[pulumi.Input['WebAclAssociationConfigArgs']]):
        pulumi.set(self, "association_config", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Web ACL capacity units (WCUs) currently being used by this web ACL.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="captchaConfig")
    def captcha_config(self) -> Optional[pulumi.Input['WebAclCaptchaConfigArgs']]:
        """
        Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captcha_config` below for details.
        """
        return pulumi.get(self, "captcha_config")

    @captcha_config.setter
    def captcha_config(self, value: Optional[pulumi.Input['WebAclCaptchaConfigArgs']]):
        pulumi.set(self, "captcha_config", value)

    @_builtins.property
    @pulumi.getter(name="challengeConfig")
    def challenge_config(self) -> Optional[pulumi.Input['WebAclChallengeConfigArgs']]:
        """
        Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challenge_config` below for details.
        """
        return pulumi.get(self, "challenge_config")

    @challenge_config.setter
    def challenge_config(self, value: Optional[pulumi.Input['WebAclChallengeConfigArgs']]):
        pulumi.set(self, "challenge_config", value)

    @_builtins.property
    @pulumi.getter(name="customResponseBodies")
    def custom_response_bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclCustomResponseBodyArgs']]]]:
        """
        Defines custom response bodies that can be referenced by `custom_response` actions. See `custom_response_body` below for details.
        """
        return pulumi.get(self, "custom_response_bodies")

    @custom_response_bodies.setter
    def custom_response_bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclCustomResponseBodyArgs']]]]):
        pulumi.set(self, "custom_response_bodies", value)

    @_builtins.property
    @pulumi.getter(name="dataProtectionConfig")
    def data_protection_config(self) -> Optional[pulumi.Input['WebAclDataProtectionConfigArgs']]:
        """
        Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option. See `data_protection_config` below for details.
        """
        return pulumi.get(self, "data_protection_config")

    @data_protection_config.setter
    def data_protection_config(self, value: Optional[pulumi.Input['WebAclDataProtectionConfigArgs']]):
        pulumi.set(self, "data_protection_config", value)

    @_builtins.property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input['WebAclDefaultActionArgs']]:
        """
        Action to perform if none of the `rules` contained in the WebACL match. See `default_action` below for details.
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input['WebAclDefaultActionArgs']]):
        pulumi.set(self, "default_action", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly description of the WebACL.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="lockToken")
    def lock_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lock_token")

    @lock_token.setter
    def lock_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lock_token", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_prefix", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ruleJson")
    def rule_json(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `rule_json` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        """
        return pulumi.get(self, "rule_json")

    @rule_json.setter
    def rule_json(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_json", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleArgs']]]]:
        """
        Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of key-value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags_all", value)

    @_builtins.property
    @pulumi.getter(name="tokenDomains")
    def token_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        """
        return pulumi.get(self, "token_domains")

    @token_domains.setter
    def token_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "token_domains", value)

    @_builtins.property
    @pulumi.getter(name="visibilityConfig")
    def visibility_config(self) -> Optional[pulumi.Input['WebAclVisibilityConfigArgs']]:
        """
        Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibility_config` below for details.
        """
        return pulumi.get(self, "visibility_config")

    @visibility_config.setter
    def visibility_config(self, value: Optional[pulumi.Input['WebAclVisibilityConfigArgs']]):
        pulumi.set(self, "visibility_config", value)


@pulumi.type_token("aws:wafv2/webAcl:WebAcl")
class WebAcl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 association_config: Optional[pulumi.Input[Union['WebAclAssociationConfigArgs', 'WebAclAssociationConfigArgsDict']]] = None,
                 captcha_config: Optional[pulumi.Input[Union['WebAclCaptchaConfigArgs', 'WebAclCaptchaConfigArgsDict']]] = None,
                 challenge_config: Optional[pulumi.Input[Union['WebAclChallengeConfigArgs', 'WebAclChallengeConfigArgsDict']]] = None,
                 custom_response_bodies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebAclCustomResponseBodyArgs', 'WebAclCustomResponseBodyArgsDict']]]]] = None,
                 data_protection_config: Optional[pulumi.Input[Union['WebAclDataProtectionConfigArgs', 'WebAclDataProtectionConfigArgsDict']]] = None,
                 default_action: Optional[pulumi.Input[Union['WebAclDefaultActionArgs', 'WebAclDefaultActionArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_json: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebAclRuleArgs', 'WebAclRuleArgsDict']]]]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 token_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 visibility_config: Optional[pulumi.Input[Union['WebAclVisibilityConfigArgs', 'WebAclVisibilityConfigArgsDict']]] = None,
                 __props__=None):
        """
        Creates a WAFv2 Web ACL resource.

        > **Note** In `field_to_match` blocks, _e.g._, in `byte_match_statement`, the `body` block includes an optional argument `oversize_handling`. AWS indicates this argument will be required starting February 2023. To avoid configurations breaking when that change happens, treat the `oversize_handling` argument as **required** as soon as possible.

        !> **Warning:** If you use the `wafv2.WebAclRuleGroupAssociation` resource to associate rule groups with this Web ACL, you must add `lifecycle { ignore_changes = [rule] }` to this resource to prevent configuration drift. The association resource modifies the Web ACL's rules outside of this resource's direct management.

        ## Example Usage

        This resource is based on `wafv2.RuleGroup`, check the documentation of the `wafv2.RuleGroup` resource to see examples of the various available statements.

        ### Managed Rule

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.wafv2.WebAcl("example",
            name="managed-rule-example",
            description="Example of a managed rule.",
            scope="REGIONAL",
            default_action={
                "allow": {},
            },
            rules=[{
                "name": "rule-1",
                "priority": 1,
                "override_action": {
                    "count": {},
                },
                "statement": {
                    "managed_rule_group_statement": {
                        "name": "AWSManagedRulesCommonRuleSet",
                        "vendor_name": "AWS",
                        "rule_action_overrides": [
                            {
                                "action_to_use": {
                                    "count": {},
                                },
                                "name": "SizeRestrictions_QUERYSTRING",
                            },
                            {
                                "action_to_use": {
                                    "count": {},
                                },
                                "name": "NoUserAgent_HEADER",
                            },
                        ],
                        "scope_down_statement": {
                            "geo_match_statement": {
                                "country_codes": [
                                    "US",
                                    "NL",
                                ],
                            },
                        },
                    },
                },
                "visibility_config": {
                    "cloudwatch_metrics_enabled": False,
                    "metric_name": "friendly-rule-metric-name",
                    "sampled_requests_enabled": False,
                },
            }],
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2",
            },
            token_domains=[
                "mywebsite.com",
                "myotherwebsite.com",
            ],
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ### Account Creation Fraud Prevention

        ```python
        import pulumi
        import pulumi_aws as aws

        acfp_example = aws.wafv2.WebAcl("acfp-example",
            name="managed-acfp-example",
            description="Example of a managed ACFP rule.",
            scope="CLOUDFRONT",
            default_action={
                "allow": {},
            },
            rules=[{
                "name": "acfp-rule-1",
                "priority": 1,
                "override_action": {
                    "count": {},
                },
                "statement": {
                    "managed_rule_group_statement": {
                        "name": "AWSManagedRulesACFPRuleSet",
                        "vendor_name": "AWS",
                        "managed_rule_group_configs": [{
                            "aws_managed_rules_acfp_rule_set": {
                                "creation_path": "/signin",
                                "registration_page_path": "/register",
                                "request_inspection": {
                                    "email_field": {
                                        "identifier": "/email",
                                    },
                                    "password_field": {
                                        "identifier": "/password",
                                    },
                                    "payload_type": "JSON",
                                    "username_field": {
                                        "identifier": "/username",
                                    },
                                },
                                "response_inspection": {
                                    "status_code": {
                                        "failure_codes": [403],
                                        "success_codes": [200],
                                    },
                                },
                            },
                        }],
                    },
                },
                "visibility_config": {
                    "cloudwatch_metrics_enabled": False,
                    "metric_name": "friendly-rule-metric-name",
                    "sampled_requests_enabled": False,
                },
            }],
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ### Account Takeover Protection

        ```python
        import pulumi
        import pulumi_aws as aws

        atp_example = aws.wafv2.WebAcl("atp-example",
            name="managed-atp-example",
            description="Example of a managed ATP rule.",
            scope="CLOUDFRONT",
            default_action={
                "allow": {},
            },
            rules=[{
                "name": "atp-rule-1",
                "priority": 1,
                "override_action": {
                    "count": {},
                },
                "statement": {
                    "managed_rule_group_statement": {
                        "name": "AWSManagedRulesATPRuleSet",
                        "vendor_name": "AWS",
                        "managed_rule_group_configs": [{
                            "aws_managed_rules_atp_rule_set": {
                                "login_path": "/api/1/signin",
                                "request_inspection": {
                                    "password_field": {
                                        "identifier": "/password",
                                    },
                                    "payload_type": "JSON",
                                    "username_field": {
                                        "identifier": "/email",
                                    },
                                },
                                "response_inspection": {
                                    "status_code": {
                                        "failure_codes": [403],
                                        "success_codes": [200],
                                    },
                                },
                            },
                        }],
                    },
                },
                "visibility_config": {
                    "cloudwatch_metrics_enabled": False,
                    "metric_name": "friendly-rule-metric-name",
                    "sampled_requests_enabled": False,
                },
            }],
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ### Rate Based

        Rate-limit US and NL-based clients to 10,000 requests for every 5 minutes.

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.wafv2.WebAcl("example",
            name="rate-based-example",
            description="Example of a Cloudfront rate based statement.",
            scope="CLOUDFRONT",
            default_action={
                "allow": {},
            },
            rules=[{
                "name": "rule-1",
                "priority": 1,
                "action": {
                    "block": {},
                },
                "statement": {
                    "rate_based_statement": {
                        "limit": 10000,
                        "aggregate_key_type": "IP",
                        "scope_down_statement": {
                            "geo_match_statement": {
                                "country_codes": [
                                    "US",
                                    "NL",
                                ],
                            },
                        },
                    },
                },
                "visibility_config": {
                    "cloudwatch_metrics_enabled": False,
                    "metric_name": "friendly-rule-metric-name",
                    "sampled_requests_enabled": False,
                },
            }],
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2",
            },
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ### Rule Group Reference

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.wafv2.RuleGroup("example",
            capacity=10,
            name="example-rule-group",
            scope="REGIONAL",
            rules=[
                {
                    "name": "rule-1",
                    "priority": 1,
                    "action": {
                        "count": {},
                    },
                    "statement": {
                        "geo_match_statement": {
                            "country_codes": ["NL"],
                        },
                    },
                    "visibility_config": {
                        "cloudwatch_metrics_enabled": False,
                        "metric_name": "friendly-rule-metric-name",
                        "sampled_requests_enabled": False,
                    },
                },
                {
                    "name": "rule-to-exclude-a",
                    "priority": 10,
                    "action": {
                        "allow": {},
                    },
                    "statement": {
                        "geo_match_statement": {
                            "country_codes": ["US"],
                        },
                    },
                    "visibility_config": {
                        "cloudwatch_metrics_enabled": False,
                        "metric_name": "friendly-rule-metric-name",
                        "sampled_requests_enabled": False,
                    },
                },
                {
                    "name": "rule-to-exclude-b",
                    "priority": 15,
                    "action": {
                        "allow": {},
                    },
                    "statement": {
                        "geo_match_statement": {
                            "country_codes": ["GB"],
                        },
                    },
                    "visibility_config": {
                        "cloudwatch_metrics_enabled": False,
                        "metric_name": "friendly-rule-metric-name",
                        "sampled_requests_enabled": False,
                    },
                },
            ],
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        test = aws.wafv2.WebAcl("test",
            name="rule-group-example",
            scope="REGIONAL",
            default_action={
                "block": {},
            },
            rules=[{
                "name": "rule-1",
                "priority": 1,
                "override_action": {
                    "count": {},
                },
                "statement": {
                    "rule_group_reference_statement": {
                        "arn": example.arn,
                        "rule_action_overrides": [
                            {
                                "action_to_use": {
                                    "count": {},
                                },
                                "name": "rule-to-exclude-b",
                            },
                            {
                                "action_to_use": {
                                    "count": {},
                                },
                                "name": "rule-to-exclude-a",
                            },
                        ],
                    },
                },
                "visibility_config": {
                    "cloudwatch_metrics_enabled": False,
                    "metric_name": "friendly-rule-metric-name",
                    "sampled_requests_enabled": False,
                },
            }],
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2",
            },
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ### Large Request Body Inspections for Regional Resources

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.wafv2.WebAcl("example",
            name="large-request-body-example",
            scope="REGIONAL",
            default_action={
                "allow": {},
            },
            association_config={
                "request_bodies": [{
                    "api_gateway": {
                        "default_size_inspection_limit": "KB_64",
                    },
                    "app_runner_service": {
                        "default_size_inspection_limit": "KB_64",
                    },
                    "cognito_user_pool": {
                        "default_size_inspection_limit": "KB_64",
                    },
                    "verified_access_instance": {
                        "default_size_inspection_limit": "KB_64",
                    },
                }],
            },
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ## Import

        Using `pulumi import`, import WAFv2 Web ACLs using `ID/Name/Scope`. For example:

        ```sh
        $ pulumi import aws:wafv2/webAcl:WebAcl example a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc/example/REGIONAL
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WebAclAssociationConfigArgs', 'WebAclAssociationConfigArgsDict']] association_config: Specifies custom configurations for the associations between the web ACL and protected resources. See `association_config` below for details.
        :param pulumi.Input[Union['WebAclCaptchaConfigArgs', 'WebAclCaptchaConfigArgsDict']] captcha_config: Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captcha_config` below for details.
        :param pulumi.Input[Union['WebAclChallengeConfigArgs', 'WebAclChallengeConfigArgsDict']] challenge_config: Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challenge_config` below for details.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WebAclCustomResponseBodyArgs', 'WebAclCustomResponseBodyArgsDict']]]] custom_response_bodies: Defines custom response bodies that can be referenced by `custom_response` actions. See `custom_response_body` below for details.
        :param pulumi.Input[Union['WebAclDataProtectionConfigArgs', 'WebAclDataProtectionConfigArgsDict']] data_protection_config: Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option. See `data_protection_config` below for details.
        :param pulumi.Input[Union['WebAclDefaultActionArgs', 'WebAclDefaultActionArgsDict']] default_action: Action to perform if none of the `rules` contained in the WebACL match. See `default_action` below for details.
        :param pulumi.Input[_builtins.str] description: Friendly description of the WebACL.
        :param pulumi.Input[_builtins.str] name: Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        :param pulumi.Input[_builtins.str] name_prefix: Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        :param pulumi.Input[_builtins.str] region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        :param pulumi.Input[_builtins.str] rule_json: Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `rule_json` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WebAclRuleArgs', 'WebAclRuleArgsDict']]]] rules: Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        :param pulumi.Input[_builtins.str] scope: Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Map of key-value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] token_domains: Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        :param pulumi.Input[Union['WebAclVisibilityConfigArgs', 'WebAclVisibilityConfigArgsDict']] visibility_config: Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibility_config` below for details.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebAclArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a WAFv2 Web ACL resource.

        > **Note** In `field_to_match` blocks, _e.g._, in `byte_match_statement`, the `body` block includes an optional argument `oversize_handling`. AWS indicates this argument will be required starting February 2023. To avoid configurations breaking when that change happens, treat the `oversize_handling` argument as **required** as soon as possible.

        !> **Warning:** If you use the `wafv2.WebAclRuleGroupAssociation` resource to associate rule groups with this Web ACL, you must add `lifecycle { ignore_changes = [rule] }` to this resource to prevent configuration drift. The association resource modifies the Web ACL's rules outside of this resource's direct management.

        ## Example Usage

        This resource is based on `wafv2.RuleGroup`, check the documentation of the `wafv2.RuleGroup` resource to see examples of the various available statements.

        ### Managed Rule

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.wafv2.WebAcl("example",
            name="managed-rule-example",
            description="Example of a managed rule.",
            scope="REGIONAL",
            default_action={
                "allow": {},
            },
            rules=[{
                "name": "rule-1",
                "priority": 1,
                "override_action": {
                    "count": {},
                },
                "statement": {
                    "managed_rule_group_statement": {
                        "name": "AWSManagedRulesCommonRuleSet",
                        "vendor_name": "AWS",
                        "rule_action_overrides": [
                            {
                                "action_to_use": {
                                    "count": {},
                                },
                                "name": "SizeRestrictions_QUERYSTRING",
                            },
                            {
                                "action_to_use": {
                                    "count": {},
                                },
                                "name": "NoUserAgent_HEADER",
                            },
                        ],
                        "scope_down_statement": {
                            "geo_match_statement": {
                                "country_codes": [
                                    "US",
                                    "NL",
                                ],
                            },
                        },
                    },
                },
                "visibility_config": {
                    "cloudwatch_metrics_enabled": False,
                    "metric_name": "friendly-rule-metric-name",
                    "sampled_requests_enabled": False,
                },
            }],
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2",
            },
            token_domains=[
                "mywebsite.com",
                "myotherwebsite.com",
            ],
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ### Account Creation Fraud Prevention

        ```python
        import pulumi
        import pulumi_aws as aws

        acfp_example = aws.wafv2.WebAcl("acfp-example",
            name="managed-acfp-example",
            description="Example of a managed ACFP rule.",
            scope="CLOUDFRONT",
            default_action={
                "allow": {},
            },
            rules=[{
                "name": "acfp-rule-1",
                "priority": 1,
                "override_action": {
                    "count": {},
                },
                "statement": {
                    "managed_rule_group_statement": {
                        "name": "AWSManagedRulesACFPRuleSet",
                        "vendor_name": "AWS",
                        "managed_rule_group_configs": [{
                            "aws_managed_rules_acfp_rule_set": {
                                "creation_path": "/signin",
                                "registration_page_path": "/register",
                                "request_inspection": {
                                    "email_field": {
                                        "identifier": "/email",
                                    },
                                    "password_field": {
                                        "identifier": "/password",
                                    },
                                    "payload_type": "JSON",
                                    "username_field": {
                                        "identifier": "/username",
                                    },
                                },
                                "response_inspection": {
                                    "status_code": {
                                        "failure_codes": [403],
                                        "success_codes": [200],
                                    },
                                },
                            },
                        }],
                    },
                },
                "visibility_config": {
                    "cloudwatch_metrics_enabled": False,
                    "metric_name": "friendly-rule-metric-name",
                    "sampled_requests_enabled": False,
                },
            }],
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ### Account Takeover Protection

        ```python
        import pulumi
        import pulumi_aws as aws

        atp_example = aws.wafv2.WebAcl("atp-example",
            name="managed-atp-example",
            description="Example of a managed ATP rule.",
            scope="CLOUDFRONT",
            default_action={
                "allow": {},
            },
            rules=[{
                "name": "atp-rule-1",
                "priority": 1,
                "override_action": {
                    "count": {},
                },
                "statement": {
                    "managed_rule_group_statement": {
                        "name": "AWSManagedRulesATPRuleSet",
                        "vendor_name": "AWS",
                        "managed_rule_group_configs": [{
                            "aws_managed_rules_atp_rule_set": {
                                "login_path": "/api/1/signin",
                                "request_inspection": {
                                    "password_field": {
                                        "identifier": "/password",
                                    },
                                    "payload_type": "JSON",
                                    "username_field": {
                                        "identifier": "/email",
                                    },
                                },
                                "response_inspection": {
                                    "status_code": {
                                        "failure_codes": [403],
                                        "success_codes": [200],
                                    },
                                },
                            },
                        }],
                    },
                },
                "visibility_config": {
                    "cloudwatch_metrics_enabled": False,
                    "metric_name": "friendly-rule-metric-name",
                    "sampled_requests_enabled": False,
                },
            }],
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ### Rate Based

        Rate-limit US and NL-based clients to 10,000 requests for every 5 minutes.

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.wafv2.WebAcl("example",
            name="rate-based-example",
            description="Example of a Cloudfront rate based statement.",
            scope="CLOUDFRONT",
            default_action={
                "allow": {},
            },
            rules=[{
                "name": "rule-1",
                "priority": 1,
                "action": {
                    "block": {},
                },
                "statement": {
                    "rate_based_statement": {
                        "limit": 10000,
                        "aggregate_key_type": "IP",
                        "scope_down_statement": {
                            "geo_match_statement": {
                                "country_codes": [
                                    "US",
                                    "NL",
                                ],
                            },
                        },
                    },
                },
                "visibility_config": {
                    "cloudwatch_metrics_enabled": False,
                    "metric_name": "friendly-rule-metric-name",
                    "sampled_requests_enabled": False,
                },
            }],
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2",
            },
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ### Rule Group Reference

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.wafv2.RuleGroup("example",
            capacity=10,
            name="example-rule-group",
            scope="REGIONAL",
            rules=[
                {
                    "name": "rule-1",
                    "priority": 1,
                    "action": {
                        "count": {},
                    },
                    "statement": {
                        "geo_match_statement": {
                            "country_codes": ["NL"],
                        },
                    },
                    "visibility_config": {
                        "cloudwatch_metrics_enabled": False,
                        "metric_name": "friendly-rule-metric-name",
                        "sampled_requests_enabled": False,
                    },
                },
                {
                    "name": "rule-to-exclude-a",
                    "priority": 10,
                    "action": {
                        "allow": {},
                    },
                    "statement": {
                        "geo_match_statement": {
                            "country_codes": ["US"],
                        },
                    },
                    "visibility_config": {
                        "cloudwatch_metrics_enabled": False,
                        "metric_name": "friendly-rule-metric-name",
                        "sampled_requests_enabled": False,
                    },
                },
                {
                    "name": "rule-to-exclude-b",
                    "priority": 15,
                    "action": {
                        "allow": {},
                    },
                    "statement": {
                        "geo_match_statement": {
                            "country_codes": ["GB"],
                        },
                    },
                    "visibility_config": {
                        "cloudwatch_metrics_enabled": False,
                        "metric_name": "friendly-rule-metric-name",
                        "sampled_requests_enabled": False,
                    },
                },
            ],
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        test = aws.wafv2.WebAcl("test",
            name="rule-group-example",
            scope="REGIONAL",
            default_action={
                "block": {},
            },
            rules=[{
                "name": "rule-1",
                "priority": 1,
                "override_action": {
                    "count": {},
                },
                "statement": {
                    "rule_group_reference_statement": {
                        "arn": example.arn,
                        "rule_action_overrides": [
                            {
                                "action_to_use": {
                                    "count": {},
                                },
                                "name": "rule-to-exclude-b",
                            },
                            {
                                "action_to_use": {
                                    "count": {},
                                },
                                "name": "rule-to-exclude-a",
                            },
                        ],
                    },
                },
                "visibility_config": {
                    "cloudwatch_metrics_enabled": False,
                    "metric_name": "friendly-rule-metric-name",
                    "sampled_requests_enabled": False,
                },
            }],
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2",
            },
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ### Large Request Body Inspections for Regional Resources

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.wafv2.WebAcl("example",
            name="large-request-body-example",
            scope="REGIONAL",
            default_action={
                "allow": {},
            },
            association_config={
                "request_bodies": [{
                    "api_gateway": {
                        "default_size_inspection_limit": "KB_64",
                    },
                    "app_runner_service": {
                        "default_size_inspection_limit": "KB_64",
                    },
                    "cognito_user_pool": {
                        "default_size_inspection_limit": "KB_64",
                    },
                    "verified_access_instance": {
                        "default_size_inspection_limit": "KB_64",
                    },
                }],
            },
            visibility_config={
                "cloudwatch_metrics_enabled": False,
                "metric_name": "friendly-metric-name",
                "sampled_requests_enabled": False,
            })
        ```

        ## Import

        Using `pulumi import`, import WAFv2 Web ACLs using `ID/Name/Scope`. For example:

        ```sh
        $ pulumi import aws:wafv2/webAcl:WebAcl example a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc/example/REGIONAL
        ```

        :param str resource_name: The name of the resource.
        :param WebAclArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebAclArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 association_config: Optional[pulumi.Input[Union['WebAclAssociationConfigArgs', 'WebAclAssociationConfigArgsDict']]] = None,
                 captcha_config: Optional[pulumi.Input[Union['WebAclCaptchaConfigArgs', 'WebAclCaptchaConfigArgsDict']]] = None,
                 challenge_config: Optional[pulumi.Input[Union['WebAclChallengeConfigArgs', 'WebAclChallengeConfigArgsDict']]] = None,
                 custom_response_bodies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebAclCustomResponseBodyArgs', 'WebAclCustomResponseBodyArgsDict']]]]] = None,
                 data_protection_config: Optional[pulumi.Input[Union['WebAclDataProtectionConfigArgs', 'WebAclDataProtectionConfigArgsDict']]] = None,
                 default_action: Optional[pulumi.Input[Union['WebAclDefaultActionArgs', 'WebAclDefaultActionArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_json: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebAclRuleArgs', 'WebAclRuleArgsDict']]]]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 token_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 visibility_config: Optional[pulumi.Input[Union['WebAclVisibilityConfigArgs', 'WebAclVisibilityConfigArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebAclArgs.__new__(WebAclArgs)

            __props__.__dict__["association_config"] = association_config
            __props__.__dict__["captcha_config"] = captcha_config
            __props__.__dict__["challenge_config"] = challenge_config
            __props__.__dict__["custom_response_bodies"] = custom_response_bodies
            __props__.__dict__["data_protection_config"] = data_protection_config
            if default_action is None and not opts.urn:
                raise TypeError("Missing required property 'default_action'")
            __props__.__dict__["default_action"] = default_action
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["name_prefix"] = name_prefix
            __props__.__dict__["region"] = region
            __props__.__dict__["rule_json"] = rule_json
            __props__.__dict__["rules"] = rules
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
            __props__.__dict__["tags"] = tags
            __props__.__dict__["token_domains"] = token_domains
            if visibility_config is None and not opts.urn:
                raise TypeError("Missing required property 'visibility_config'")
            __props__.__dict__["visibility_config"] = visibility_config
            __props__.__dict__["application_integration_url"] = None
            __props__.__dict__["arn"] = None
            __props__.__dict__["capacity"] = None
            __props__.__dict__["lock_token"] = None
            __props__.__dict__["tags_all"] = None
        super(WebAcl, __self__).__init__(
            'aws:wafv2/webAcl:WebAcl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_integration_url: Optional[pulumi.Input[_builtins.str]] = None,
            arn: Optional[pulumi.Input[_builtins.str]] = None,
            association_config: Optional[pulumi.Input[Union['WebAclAssociationConfigArgs', 'WebAclAssociationConfigArgsDict']]] = None,
            capacity: Optional[pulumi.Input[_builtins.int]] = None,
            captcha_config: Optional[pulumi.Input[Union['WebAclCaptchaConfigArgs', 'WebAclCaptchaConfigArgsDict']]] = None,
            challenge_config: Optional[pulumi.Input[Union['WebAclChallengeConfigArgs', 'WebAclChallengeConfigArgsDict']]] = None,
            custom_response_bodies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebAclCustomResponseBodyArgs', 'WebAclCustomResponseBodyArgsDict']]]]] = None,
            data_protection_config: Optional[pulumi.Input[Union['WebAclDataProtectionConfigArgs', 'WebAclDataProtectionConfigArgsDict']]] = None,
            default_action: Optional[pulumi.Input[Union['WebAclDefaultActionArgs', 'WebAclDefaultActionArgsDict']]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            lock_token: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            name_prefix: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rule_json: Optional[pulumi.Input[_builtins.str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebAclRuleArgs', 'WebAclRuleArgsDict']]]]] = None,
            scope: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            token_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            visibility_config: Optional[pulumi.Input[Union['WebAclVisibilityConfigArgs', 'WebAclVisibilityConfigArgsDict']]] = None) -> 'WebAcl':
        """
        Get an existing WebAcl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] application_integration_url: The URL to use in SDK integrations with managed rule groups.
        :param pulumi.Input[_builtins.str] arn: The ARN of the WAF WebACL.
        :param pulumi.Input[Union['WebAclAssociationConfigArgs', 'WebAclAssociationConfigArgsDict']] association_config: Specifies custom configurations for the associations between the web ACL and protected resources. See `association_config` below for details.
        :param pulumi.Input[_builtins.int] capacity: Web ACL capacity units (WCUs) currently being used by this web ACL.
        :param pulumi.Input[Union['WebAclCaptchaConfigArgs', 'WebAclCaptchaConfigArgsDict']] captcha_config: Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captcha_config` below for details.
        :param pulumi.Input[Union['WebAclChallengeConfigArgs', 'WebAclChallengeConfigArgsDict']] challenge_config: Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challenge_config` below for details.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WebAclCustomResponseBodyArgs', 'WebAclCustomResponseBodyArgsDict']]]] custom_response_bodies: Defines custom response bodies that can be referenced by `custom_response` actions. See `custom_response_body` below for details.
        :param pulumi.Input[Union['WebAclDataProtectionConfigArgs', 'WebAclDataProtectionConfigArgsDict']] data_protection_config: Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option. See `data_protection_config` below for details.
        :param pulumi.Input[Union['WebAclDefaultActionArgs', 'WebAclDefaultActionArgsDict']] default_action: Action to perform if none of the `rules` contained in the WebACL match. See `default_action` below for details.
        :param pulumi.Input[_builtins.str] description: Friendly description of the WebACL.
        :param pulumi.Input[_builtins.str] name: Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        :param pulumi.Input[_builtins.str] name_prefix: Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        :param pulumi.Input[_builtins.str] region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        :param pulumi.Input[_builtins.str] rule_json: Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `rule_json` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        :param pulumi.Input[Sequence[pulumi.Input[Union['WebAclRuleArgs', 'WebAclRuleArgsDict']]]] rules: Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        :param pulumi.Input[_builtins.str] scope: Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Map of key-value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags_all: Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] token_domains: Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        :param pulumi.Input[Union['WebAclVisibilityConfigArgs', 'WebAclVisibilityConfigArgsDict']] visibility_config: Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibility_config` below for details.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebAclState.__new__(_WebAclState)

        __props__.__dict__["application_integration_url"] = application_integration_url
        __props__.__dict__["arn"] = arn
        __props__.__dict__["association_config"] = association_config
        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["captcha_config"] = captcha_config
        __props__.__dict__["challenge_config"] = challenge_config
        __props__.__dict__["custom_response_bodies"] = custom_response_bodies
        __props__.__dict__["data_protection_config"] = data_protection_config
        __props__.__dict__["default_action"] = default_action
        __props__.__dict__["description"] = description
        __props__.__dict__["lock_token"] = lock_token
        __props__.__dict__["name"] = name
        __props__.__dict__["name_prefix"] = name_prefix
        __props__.__dict__["region"] = region
        __props__.__dict__["rule_json"] = rule_json
        __props__.__dict__["rules"] = rules
        __props__.__dict__["scope"] = scope
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["token_domains"] = token_domains
        __props__.__dict__["visibility_config"] = visibility_config
        return WebAcl(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationIntegrationUrl")
    def application_integration_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL to use in SDK integrations with managed rule groups.
        """
        return pulumi.get(self, "application_integration_url")

    @_builtins.property
    @pulumi.getter
    def arn(self) -> pulumi.Output[_builtins.str]:
        """
        The ARN of the WAF WebACL.
        """
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter(name="associationConfig")
    def association_config(self) -> pulumi.Output[Optional['outputs.WebAclAssociationConfig']]:
        """
        Specifies custom configurations for the associations between the web ACL and protected resources. See `association_config` below for details.
        """
        return pulumi.get(self, "association_config")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[_builtins.int]:
        """
        Web ACL capacity units (WCUs) currently being used by this web ACL.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="captchaConfig")
    def captcha_config(self) -> pulumi.Output[Optional['outputs.WebAclCaptchaConfig']]:
        """
        Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captcha_config` below for details.
        """
        return pulumi.get(self, "captcha_config")

    @_builtins.property
    @pulumi.getter(name="challengeConfig")
    def challenge_config(self) -> pulumi.Output[Optional['outputs.WebAclChallengeConfig']]:
        """
        Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challenge_config` below for details.
        """
        return pulumi.get(self, "challenge_config")

    @_builtins.property
    @pulumi.getter(name="customResponseBodies")
    def custom_response_bodies(self) -> pulumi.Output[Optional[Sequence['outputs.WebAclCustomResponseBody']]]:
        """
        Defines custom response bodies that can be referenced by `custom_response` actions. See `custom_response_body` below for details.
        """
        return pulumi.get(self, "custom_response_bodies")

    @_builtins.property
    @pulumi.getter(name="dataProtectionConfig")
    def data_protection_config(self) -> pulumi.Output[Optional['outputs.WebAclDataProtectionConfig']]:
        """
        Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option. See `data_protection_config` below for details.
        """
        return pulumi.get(self, "data_protection_config")

    @_builtins.property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> pulumi.Output['outputs.WebAclDefaultAction']:
        """
        Action to perform if none of the `rules` contained in the WebACL match. See `default_action` below for details.
        """
        return pulumi.get(self, "default_action")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Friendly description of the WebACL.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="lockToken")
    def lock_token(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "lock_token")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> pulumi.Output[_builtins.str]:
        """
        Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        """
        return pulumi.get(self, "name_prefix")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleJson")
    def rule_json(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `rule_json` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        """
        return pulumi.get(self, "rule_json")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.WebAclRule']]]:
        """
        Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Map of key-value pairs to associate with the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        return pulumi.get(self, "tags_all")

    @_builtins.property
    @pulumi.getter(name="tokenDomains")
    def token_domains(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        """
        return pulumi.get(self, "token_domains")

    @_builtins.property
    @pulumi.getter(name="visibilityConfig")
    def visibility_config(self) -> pulumi.Output['outputs.WebAclVisibilityConfig']:
        """
        Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibility_config` below for details.
        """
        return pulumi.get(self, "visibility_config")

