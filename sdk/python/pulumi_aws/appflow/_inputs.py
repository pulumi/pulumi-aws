# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ConnectorProfileConnectorProfileConfigArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs',
    'ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs',
    'FlowDestinationFlowConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs',
    'FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs',
    'FlowSourceFlowConfigArgs',
    'FlowSourceFlowConfigIncrementalPullConfigArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesS3Args',
    'FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs',
    'FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs',
    'FlowTaskArgs',
    'FlowTaskConnectorOperatorArgs',
    'FlowTriggerConfigArgs',
    'FlowTriggerConfigTriggerPropertiesArgs',
    'FlowTriggerConfigTriggerPropertiesScheduledArgs',
]

@pulumi.input_type
class ConnectorProfileConnectorProfileConfigArgs:
    def __init__(__self__, *,
                 connector_profile_credentials: pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs'],
                 connector_profile_properties: pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs']):
        """
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs'] connector_profile_credentials: The connector-specific credentials required by each connector. See Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs'] connector_profile_properties: The connector-specific properties of the profile configuration. See Connector Profile Properties for more details.
        """
        pulumi.set(__self__, "connector_profile_credentials", connector_profile_credentials)
        pulumi.set(__self__, "connector_profile_properties", connector_profile_properties)

    @property
    @pulumi.getter(name="connectorProfileCredentials")
    def connector_profile_credentials(self) -> pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs']:
        """
        The connector-specific credentials required by each connector. See Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "connector_profile_credentials")

    @connector_profile_credentials.setter
    def connector_profile_credentials(self, value: pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs']):
        pulumi.set(self, "connector_profile_credentials", value)

    @property
    @pulumi.getter(name="connectorProfileProperties")
    def connector_profile_properties(self) -> pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs']:
        """
        The connector-specific properties of the profile configuration. See Connector Profile Properties for more details.
        """
        return pulumi.get(self, "connector_profile_properties")

    @connector_profile_properties.setter
    def connector_profile_properties(self, value: pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs']):
        pulumi.set(self, "connector_profile_properties", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 amplitude: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs']] = None,
                 custom_connector: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs']] = None,
                 datadog: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs']] = None,
                 dynatrace: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs']] = None,
                 google_analytics: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs']] = None,
                 honeycode: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs']] = None,
                 infor_nexus: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs']] = None,
                 marketo: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs']] = None,
                 redshift: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs']] = None,
                 salesforce: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs']] = None,
                 sapo_data: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs']] = None,
                 service_now: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs']] = None,
                 singular: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs']] = None,
                 slack: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs']] = None,
                 snowflake: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs']] = None,
                 trendmicro: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs']] = None,
                 veeva: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs']] = None,
                 zendesk: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs']] = None):
        """
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs'] amplitude: The connector-specific credentials required when using Amplitude. See Amplitude Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs'] custom_connector: The connector-specific profile credentials required when using the custom connector. See Custom Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs'] datadog: Connector-specific credentials required when using Datadog. See Datadog Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs'] dynatrace: The connector-specific credentials required when using Dynatrace. See Dynatrace Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs'] google_analytics: The connector-specific credentials required when using Google Analytics. See Google Analytics Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs'] honeycode: The connector-specific credentials required when using Amazon Honeycode. See Honeycode Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs'] infor_nexus: The connector-specific credentials required when using Infor Nexus. See Infor Nexus Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs'] marketo: Connector-specific credentials required when using Marketo. See Marketo Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs'] redshift: Connector-specific credentials required when using Amazon Redshift. See Redshift Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs'] salesforce: The connector-specific credentials required when using Salesforce. See Salesforce Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs'] sapo_data: The connector-specific credentials required when using SAPOData. See SAPOData Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs'] service_now: The connector-specific credentials required when using ServiceNow. See ServiceNow Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs'] singular: Connector-specific credentials required when using Singular. See Singular Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs'] slack: Connector-specific credentials required when using Slack. See Slack Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs'] snowflake: The connector-specific credentials required when using Snowflake. See Snowflake Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs'] trendmicro: The connector-specific credentials required when using Trend Micro. See Trend Micro Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs'] veeva: Connector-specific credentials required when using Veeva. See Veeva Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs'] zendesk: Connector-specific credentials required when using Zendesk. See Zendesk Connector Profile Credentials for more details.
        """
        if amplitude is not None:
            pulumi.set(__self__, "amplitude", amplitude)
        if custom_connector is not None:
            pulumi.set(__self__, "custom_connector", custom_connector)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if dynatrace is not None:
            pulumi.set(__self__, "dynatrace", dynatrace)
        if google_analytics is not None:
            pulumi.set(__self__, "google_analytics", google_analytics)
        if honeycode is not None:
            pulumi.set(__self__, "honeycode", honeycode)
        if infor_nexus is not None:
            pulumi.set(__self__, "infor_nexus", infor_nexus)
        if marketo is not None:
            pulumi.set(__self__, "marketo", marketo)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if sapo_data is not None:
            pulumi.set(__self__, "sapo_data", sapo_data)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if singular is not None:
            pulumi.set(__self__, "singular", singular)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if trendmicro is not None:
            pulumi.set(__self__, "trendmicro", trendmicro)
        if veeva is not None:
            pulumi.set(__self__, "veeva", veeva)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)

    @property
    @pulumi.getter
    def amplitude(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs']]:
        """
        The connector-specific credentials required when using Amplitude. See Amplitude Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "amplitude")

    @amplitude.setter
    def amplitude(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs']]):
        pulumi.set(self, "amplitude", value)

    @property
    @pulumi.getter(name="customConnector")
    def custom_connector(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs']]:
        """
        The connector-specific profile credentials required when using the custom connector. See Custom Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "custom_connector")

    @custom_connector.setter
    def custom_connector(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs']]):
        pulumi.set(self, "custom_connector", value)

    @property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs']]:
        """
        Connector-specific credentials required when using Datadog. See Datadog Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs']]):
        pulumi.set(self, "datadog", value)

    @property
    @pulumi.getter
    def dynatrace(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs']]:
        """
        The connector-specific credentials required when using Dynatrace. See Dynatrace Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "dynatrace")

    @dynatrace.setter
    def dynatrace(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs']]):
        pulumi.set(self, "dynatrace", value)

    @property
    @pulumi.getter(name="googleAnalytics")
    def google_analytics(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs']]:
        """
        The connector-specific credentials required when using Google Analytics. See Google Analytics Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "google_analytics")

    @google_analytics.setter
    def google_analytics(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs']]):
        pulumi.set(self, "google_analytics", value)

    @property
    @pulumi.getter
    def honeycode(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs']]:
        """
        The connector-specific credentials required when using Amazon Honeycode. See Honeycode Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "honeycode")

    @honeycode.setter
    def honeycode(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs']]):
        pulumi.set(self, "honeycode", value)

    @property
    @pulumi.getter(name="inforNexus")
    def infor_nexus(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs']]:
        """
        The connector-specific credentials required when using Infor Nexus. See Infor Nexus Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "infor_nexus")

    @infor_nexus.setter
    def infor_nexus(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs']]):
        pulumi.set(self, "infor_nexus", value)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs']]:
        """
        Connector-specific credentials required when using Marketo. See Marketo Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs']]:
        """
        Connector-specific credentials required when using Amazon Redshift. See Redshift Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs']]:
        """
        The connector-specific credentials required when using Salesforce. See Salesforce Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="sapoData")
    def sapo_data(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs']]:
        """
        The connector-specific credentials required when using SAPOData. See SAPOData Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "sapo_data")

    @sapo_data.setter
    def sapo_data(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs']]):
        pulumi.set(self, "sapo_data", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs']]:
        """
        The connector-specific credentials required when using ServiceNow. See ServiceNow Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def singular(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs']]:
        """
        Connector-specific credentials required when using Singular. See Singular Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "singular")

    @singular.setter
    def singular(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs']]):
        pulumi.set(self, "singular", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs']]:
        """
        Connector-specific credentials required when using Slack. See Slack Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs']]:
        """
        The connector-specific credentials required when using Snowflake. See Snowflake Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs']]):
        pulumi.set(self, "snowflake", value)

    @property
    @pulumi.getter
    def trendmicro(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs']]:
        """
        The connector-specific credentials required when using Trend Micro. See Trend Micro Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "trendmicro")

    @trendmicro.setter
    def trendmicro(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs']]):
        pulumi.set(self, "trendmicro", value)

    @property
    @pulumi.getter
    def veeva(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs']]:
        """
        Connector-specific credentials required when using Veeva. See Veeva Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "veeva")

    @veeva.setter
    def veeva(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs']]):
        pulumi.set(self, "veeva", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs']]:
        """
        Connector-specific credentials required when using Zendesk. See Zendesk Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsAmplitudeArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 secret_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_key: Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
        :param pulumi.Input[str] secret_key: The Secret Access Key portion of the credentials.
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        The Secret Access Key portion of the credentials.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorArgs:
    def __init__(__self__, *,
                 authentication_type: pulumi.Input[str],
                 api_key: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs']] = None,
                 basic: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs']] = None,
                 custom: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs']] = None,
                 oauth2: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args']] = None):
        """
        :param pulumi.Input[str] authentication_type: The authentication type that the custom connector uses for authenticating while creating a connector profile. One of: `APIKEY`, `BASIC`, `CUSTOM`, `OAUTH2`.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs'] api_key: Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs'] basic: Basic credentials that are required for the authentication of the user.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs'] custom: If the connector uses the custom authentication mechanism, this holds the required credentials.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args'] oauth2: OAuth 2.0 credentials required for the authentication of the user.
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if basic is not None:
            pulumi.set(__self__, "basic", basic)
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if oauth2 is not None:
            pulumi.set(__self__, "oauth2", oauth2)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Input[str]:
        """
        The authentication type that the custom connector uses for authenticating while creating a connector profile. One of: `APIKEY`, `BASIC`, `CUSTOM`, `OAUTH2`.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs']]:
        """
        Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs']]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def basic(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs']]:
        """
        Basic credentials that are required for the authentication of the user.
        """
        return pulumi.get(self, "basic")

    @basic.setter
    def basic(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs']]):
        pulumi.set(self, "basic", value)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs']]:
        """
        If the connector uses the custom authentication mechanism, this holds the required credentials.
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs']]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def oauth2(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args']]:
        """
        OAuth 2.0 credentials required for the authentication of the user.
        """
        return pulumi.get(self, "oauth2")

    @oauth2.setter
    def oauth2(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args']]):
        pulumi.set(self, "oauth2", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorApiKeyArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 api_secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_key: Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
        :param pulumi.Input[str] api_secret_key: The API secret key required for API key authentication.
        """
        pulumi.set(__self__, "api_key", api_key)
        if api_secret_key is not None:
            pulumi.set(__self__, "api_secret_key", api_secret_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="apiSecretKey")
    def api_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The API secret key required for API key authentication.
        """
        return pulumi.get(self, "api_secret_key")

    @api_secret_key.setter
    def api_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_secret_key", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorBasicArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password to use to connect to a resource.
        :param pulumi.Input[str] username: The username to use to connect to a resource.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password to use to connect to a resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to use to connect to a resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorCustomArgs:
    def __init__(__self__, *,
                 custom_authentication_type: pulumi.Input[str],
                 credentials_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] custom_authentication_type: The custom authentication type that the connector uses.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] credentials_map: A map that holds custom authentication credentials.
        """
        pulumi.set(__self__, "custom_authentication_type", custom_authentication_type)
        if credentials_map is not None:
            pulumi.set(__self__, "credentials_map", credentials_map)

    @property
    @pulumi.getter(name="customAuthenticationType")
    def custom_authentication_type(self) -> pulumi.Input[str]:
        """
        The custom authentication type that the connector uses.
        """
        return pulumi.get(self, "custom_authentication_type")

    @custom_authentication_type.setter
    def custom_authentication_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_authentication_type", value)

    @property
    @pulumi.getter(name="credentialsMap")
    def credentials_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map that holds custom authentication credentials.
        """
        return pulumi.get(self, "credentials_map")

    @credentials_map.setter
    def credentials_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "credentials_map", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2Args:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_request: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs']] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_token: The access token used to access the connector on your behalf.
        :param pulumi.Input[str] client_id: The identifier for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the OAuth client to authenticate to the authorization server.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs'] oauth_request: Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        :param pulumi.Input[str] refresh_token: The refresh token used to refresh an expired access token.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if oauth_request is not None:
            pulumi.set(__self__, "oauth_request", oauth_request)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The access token used to access the connector on your behalf.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The client secret used by the OAuth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="oauthRequest")
    def oauth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs']]:
        """
        Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        return pulumi.get(self, "oauth_request")

    @oauth_request.setter
    def oauth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs']]):
        pulumi.set(self, "oauth_request", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        The refresh token used to refresh an expired access token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsCustomConnectorOauth2OauthRequestArgs:
    def __init__(__self__, *,
                 auth_code: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_code: The code provided by the connector when it has been authenticated via the connected app.
        :param pulumi.Input[str] redirect_uri: The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        if auth_code is not None:
            pulumi.set(__self__, "auth_code", auth_code)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> Optional[pulumi.Input[str]]:
        """
        The code provided by the connector when it has been authenticated via the connected app.
        """
        return pulumi.get(self, "auth_code")

    @auth_code.setter
    def auth_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDatadogArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 application_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_key: Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
        :param pulumi.Input[str] application_key: Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "application_key", application_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> pulumi.Input[str]:
        """
        Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.
        """
        return pulumi.get(self, "application_key")

    @application_key.setter
    def application_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_key", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsDynatraceArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_token: The API tokens used by Dynatrace API to authenticate various API calls.
        """
        pulumi.set(__self__, "api_token", api_token)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        """
        The API tokens used by Dynatrace API to authenticate various API calls.
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 oauth_request: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs']] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_id: The identifier for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the OAuth client to authenticate to the authorization server.
        :param pulumi.Input[str] access_token: The access token used to access the connector on your behalf.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs'] oauth_request: Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        :param pulumi.Input[str] refresh_token: The refresh token used to refresh an expired access token.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if oauth_request is not None:
            pulumi.set(__self__, "oauth_request", oauth_request)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The identifier for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The client secret used by the OAuth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The access token used to access the connector on your behalf.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="oauthRequest")
    def oauth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs']]:
        """
        Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        return pulumi.get(self, "oauth_request")

    @oauth_request.setter
    def oauth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs']]):
        pulumi.set(self, "oauth_request", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        The refresh token used to refresh an expired access token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsGoogleAnalyticsOauthRequestArgs:
    def __init__(__self__, *,
                 auth_code: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_code: The code provided by the connector when it has been authenticated via the connected app.
        :param pulumi.Input[str] redirect_uri: The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        if auth_code is not None:
            pulumi.set(__self__, "auth_code", auth_code)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> Optional[pulumi.Input[str]]:
        """
        The code provided by the connector when it has been authenticated via the connected app.
        """
        return pulumi.get(self, "auth_code")

    @auth_code.setter
    def auth_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 oauth_request: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs']] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_token: The access token used to access the connector on your behalf.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs'] oauth_request: Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        :param pulumi.Input[str] refresh_token: The refresh token used to refresh an expired access token.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if oauth_request is not None:
            pulumi.set(__self__, "oauth_request", oauth_request)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The access token used to access the connector on your behalf.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="oauthRequest")
    def oauth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs']]:
        """
        Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        return pulumi.get(self, "oauth_request")

    @oauth_request.setter
    def oauth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs']]):
        pulumi.set(self, "oauth_request", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        The refresh token used to refresh an expired access token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsHoneycodeOauthRequestArgs:
    def __init__(__self__, *,
                 auth_code: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_code: The code provided by the connector when it has been authenticated via the connected app.
        :param pulumi.Input[str] redirect_uri: The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        if auth_code is not None:
            pulumi.set(__self__, "auth_code", auth_code)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> Optional[pulumi.Input[str]]:
        """
        The code provided by the connector when it has been authenticated via the connected app.
        """
        return pulumi.get(self, "auth_code")

    @auth_code.setter
    def auth_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsInforNexusArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 datakey: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 user_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] access_key_id: The Access Key portion of the credentials.
        :param pulumi.Input[str] datakey: Encryption keys used to encrypt data.
        :param pulumi.Input[str] secret_access_key: The secret key used to sign requests.
        :param pulumi.Input[str] user_id: Identifier for the user.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "datakey", datakey)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        """
        The Access Key portion of the credentials.
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter
    def datakey(self) -> pulumi.Input[str]:
        """
        Encryption keys used to encrypt data.
        """
        return pulumi.get(self, "datakey")

    @datakey.setter
    def datakey(self, value: pulumi.Input[str]):
        pulumi.set(self, "datakey", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        """
        The secret key used to sign requests.
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        Identifier for the user.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 oauth_request: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs']] = None):
        """
        :param pulumi.Input[str] client_id: The identifier for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the OAuth client to authenticate to the authorization server.
        :param pulumi.Input[str] access_token: The access token used to access the connector on your behalf.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs'] oauth_request: Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if oauth_request is not None:
            pulumi.set(__self__, "oauth_request", oauth_request)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The identifier for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The client secret used by the OAuth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The access token used to access the connector on your behalf.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="oauthRequest")
    def oauth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs']]:
        """
        Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        return pulumi.get(self, "oauth_request")

    @oauth_request.setter
    def oauth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs']]):
        pulumi.set(self, "oauth_request", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsMarketoOauthRequestArgs:
    def __init__(__self__, *,
                 auth_code: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_code: The code provided by the connector when it has been authenticated via the connected app.
        :param pulumi.Input[str] redirect_uri: The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        if auth_code is not None:
            pulumi.set(__self__, "auth_code", auth_code)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> Optional[pulumi.Input[str]]:
        """
        The code provided by the connector when it has been authenticated via the connected app.
        """
        return pulumi.get(self, "auth_code")

    @auth_code.setter
    def auth_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsRedshiftArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password to use to connect to a resource.
        :param pulumi.Input[str] username: The username to use to connect to a resource.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password to use to connect to a resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to use to connect to a resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_credentials_arn: Optional[pulumi.Input[str]] = None,
                 oauth_request: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs']] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_token: The access token used to access the connector on your behalf.
        :param pulumi.Input[str] client_credentials_arn: The secret manager ARN, which contains the client ID and client secret of the connected app.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs'] oauth_request: Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        :param pulumi.Input[str] refresh_token: The refresh token used to refresh an expired access token.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_credentials_arn is not None:
            pulumi.set(__self__, "client_credentials_arn", client_credentials_arn)
        if oauth_request is not None:
            pulumi.set(__self__, "oauth_request", oauth_request)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The access token used to access the connector on your behalf.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientCredentialsArn")
    def client_credentials_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The secret manager ARN, which contains the client ID and client secret of the connected app.
        """
        return pulumi.get(self, "client_credentials_arn")

    @client_credentials_arn.setter
    def client_credentials_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_credentials_arn", value)

    @property
    @pulumi.getter(name="oauthRequest")
    def oauth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs']]:
        """
        Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        return pulumi.get(self, "oauth_request")

    @oauth_request.setter
    def oauth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs']]):
        pulumi.set(self, "oauth_request", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        The refresh token used to refresh an expired access token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSalesforceOauthRequestArgs:
    def __init__(__self__, *,
                 auth_code: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_code: The code provided by the connector when it has been authenticated via the connected app.
        :param pulumi.Input[str] redirect_uri: The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        if auth_code is not None:
            pulumi.set(__self__, "auth_code", auth_code)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> Optional[pulumi.Input[str]]:
        """
        The code provided by the connector when it has been authenticated via the connected app.
        """
        return pulumi.get(self, "auth_code")

    @auth_code.setter
    def auth_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataArgs:
    def __init__(__self__, *,
                 basic_auth_credentials: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs']] = None,
                 oauth_credentials: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs']] = None):
        """
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs'] basic_auth_credentials: The SAPOData basic authentication credentials.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs'] oauth_credentials: The SAPOData OAuth type authentication credentials.
        """
        if basic_auth_credentials is not None:
            pulumi.set(__self__, "basic_auth_credentials", basic_auth_credentials)
        if oauth_credentials is not None:
            pulumi.set(__self__, "oauth_credentials", oauth_credentials)

    @property
    @pulumi.getter(name="basicAuthCredentials")
    def basic_auth_credentials(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs']]:
        """
        The SAPOData basic authentication credentials.
        """
        return pulumi.get(self, "basic_auth_credentials")

    @basic_auth_credentials.setter
    def basic_auth_credentials(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs']]):
        pulumi.set(self, "basic_auth_credentials", value)

    @property
    @pulumi.getter(name="oauthCredentials")
    def oauth_credentials(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs']]:
        """
        The SAPOData OAuth type authentication credentials.
        """
        return pulumi.get(self, "oauth_credentials")

    @oauth_credentials.setter
    def oauth_credentials(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs']]):
        pulumi.set(self, "oauth_credentials", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataBasicAuthCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password to use to connect to a resource.
        :param pulumi.Input[str] username: The username to use to connect to a resource.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password to use to connect to a resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to use to connect to a resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 oauth_request: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs']] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_id: The identifier for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the OAuth client to authenticate to the authorization server.
        :param pulumi.Input[str] access_token: The access token used to access the connector on your behalf.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs'] oauth_request: Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        :param pulumi.Input[str] refresh_token: The refresh token used to refresh an expired access token.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if oauth_request is not None:
            pulumi.set(__self__, "oauth_request", oauth_request)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The identifier for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The client secret used by the OAuth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The access token used to access the connector on your behalf.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="oauthRequest")
    def oauth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs']]:
        """
        Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        return pulumi.get(self, "oauth_request")

    @oauth_request.setter
    def oauth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs']]):
        pulumi.set(self, "oauth_request", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        The refresh token used to refresh an expired access token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSapoDataOauthCredentialsOauthRequestArgs:
    def __init__(__self__, *,
                 auth_code: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_code: The code provided by the connector when it has been authenticated via the connected app.
        :param pulumi.Input[str] redirect_uri: The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        if auth_code is not None:
            pulumi.set(__self__, "auth_code", auth_code)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> Optional[pulumi.Input[str]]:
        """
        The code provided by the connector when it has been authenticated via the connected app.
        """
        return pulumi.get(self, "auth_code")

    @auth_code.setter
    def auth_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsServiceNowArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password to use to connect to a resource.
        :param pulumi.Input[str] username: The username to use to connect to a resource.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password to use to connect to a resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to use to connect to a resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSingularArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_key: Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
        """
        pulumi.set(__self__, "api_key", api_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        Unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 oauth_request: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs']] = None):
        """
        :param pulumi.Input[str] client_id: The identifier for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the OAuth client to authenticate to the authorization server.
        :param pulumi.Input[str] access_token: The access token used to access the connector on your behalf.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs'] oauth_request: Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if oauth_request is not None:
            pulumi.set(__self__, "oauth_request", oauth_request)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The identifier for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The client secret used by the OAuth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The access token used to access the connector on your behalf.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="oauthRequest")
    def oauth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs']]:
        """
        Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        return pulumi.get(self, "oauth_request")

    @oauth_request.setter
    def oauth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs']]):
        pulumi.set(self, "oauth_request", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSlackOauthRequestArgs:
    def __init__(__self__, *,
                 auth_code: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_code: The code provided by the connector when it has been authenticated via the connected app.
        :param pulumi.Input[str] redirect_uri: The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        if auth_code is not None:
            pulumi.set(__self__, "auth_code", auth_code)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> Optional[pulumi.Input[str]]:
        """
        The code provided by the connector when it has been authenticated via the connected app.
        """
        return pulumi.get(self, "auth_code")

    @auth_code.setter
    def auth_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsSnowflakeArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password to use to connect to a resource.
        :param pulumi.Input[str] username: The username to use to connect to a resource.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password to use to connect to a resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to use to connect to a resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsTrendmicroArgs:
    def __init__(__self__, *,
                 api_secret_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_secret_key: The API secret key required for API key authentication.
        """
        pulumi.set(__self__, "api_secret_key", api_secret_key)

    @property
    @pulumi.getter(name="apiSecretKey")
    def api_secret_key(self) -> pulumi.Input[str]:
        """
        The API secret key required for API key authentication.
        """
        return pulumi.get(self, "api_secret_key")

    @api_secret_key.setter
    def api_secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_secret_key", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsVeevaArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password to use to connect to a resource.
        :param pulumi.Input[str] username: The username to use to connect to a resource.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password to use to connect to a resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to use to connect to a resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 oauth_request: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs']] = None):
        """
        :param pulumi.Input[str] client_id: The identifier for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the OAuth client to authenticate to the authorization server.
        :param pulumi.Input[str] access_token: The access token used to access the connector on your behalf.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs'] oauth_request: Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if oauth_request is not None:
            pulumi.set(__self__, "oauth_request", oauth_request)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The identifier for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The client secret used by the OAuth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The access token used to access the connector on your behalf.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="oauthRequest")
    def oauth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs']]:
        """
        Used by select connectors for which the OAuth workflow is supported. See OAuth Request for more details.
        """
        return pulumi.get(self, "oauth_request")

    @oauth_request.setter
    def oauth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs']]):
        pulumi.set(self, "oauth_request", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfileCredentialsZendeskOauthRequestArgs:
    def __init__(__self__, *,
                 auth_code: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_code: The code provided by the connector when it has been authenticated via the connected app.
        :param pulumi.Input[str] redirect_uri: The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        if auth_code is not None:
            pulumi.set(__self__, "auth_code", auth_code)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> Optional[pulumi.Input[str]]:
        """
        The code provided by the connector when it has been authenticated via the connected app.
        """
        return pulumi.get(self, "auth_code")

    @auth_code.setter
    def auth_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which the authentication server redirects the browser after authorization has been granted.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 amplitude: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs']] = None,
                 custom_connector: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs']] = None,
                 datadog: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs']] = None,
                 dynatrace: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs']] = None,
                 google_analytics: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs']] = None,
                 honeycode: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs']] = None,
                 infor_nexus: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs']] = None,
                 marketo: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs']] = None,
                 redshift: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs']] = None,
                 salesforce: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs']] = None,
                 sapo_data: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs']] = None,
                 service_now: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs']] = None,
                 singular: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs']] = None,
                 slack: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs']] = None,
                 snowflake: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs']] = None,
                 trendmicro: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs']] = None,
                 veeva: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs']] = None,
                 zendesk: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs']] = None):
        """
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs'] amplitude: The connector-specific credentials required when using Amplitude. See Amplitude Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs'] custom_connector: The connector-specific profile properties required when using the custom connector. See Custom Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs'] datadog: Connector-specific properties required when using Datadog. See Generic Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs'] dynatrace: The connector-specific properties required when using Dynatrace. See Generic Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs'] google_analytics: The connector-specific credentials required when using Google Analytics. See Google Analytics Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs'] honeycode: The connector-specific credentials required when using Amazon Honeycode. See Honeycode Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs'] infor_nexus: The connector-specific properties required when using Infor Nexus. See Generic Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs'] marketo: Connector-specific properties required when using Marketo. See Generic Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs'] redshift: Connector-specific properties required when using Amazon Redshift. See Redshift Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs'] salesforce: The connector-specific properties required when using Salesforce. See Salesforce Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs'] sapo_data: The connector-specific properties required when using SAPOData. See SAPOData Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs'] service_now: The connector-specific properties required when using ServiceNow. See Generic Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs'] singular: Connector-specific credentials required when using Singular. See Singular Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs'] slack: Connector-specific properties required when using Slack. See Generic Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs'] snowflake: The connector-specific properties required when using Snowflake. See Snowflake Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs'] trendmicro: The connector-specific credentials required when using Trend Micro. See Trend Micro Connector Profile Credentials for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs'] veeva: Connector-specific properties required when using Veeva. See Generic Connector Profile Properties for more details.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs'] zendesk: Connector-specific properties required when using Zendesk. See Generic Connector Profile Properties for more details.
        """
        if amplitude is not None:
            pulumi.set(__self__, "amplitude", amplitude)
        if custom_connector is not None:
            pulumi.set(__self__, "custom_connector", custom_connector)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if dynatrace is not None:
            pulumi.set(__self__, "dynatrace", dynatrace)
        if google_analytics is not None:
            pulumi.set(__self__, "google_analytics", google_analytics)
        if honeycode is not None:
            pulumi.set(__self__, "honeycode", honeycode)
        if infor_nexus is not None:
            pulumi.set(__self__, "infor_nexus", infor_nexus)
        if marketo is not None:
            pulumi.set(__self__, "marketo", marketo)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if sapo_data is not None:
            pulumi.set(__self__, "sapo_data", sapo_data)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if singular is not None:
            pulumi.set(__self__, "singular", singular)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if trendmicro is not None:
            pulumi.set(__self__, "trendmicro", trendmicro)
        if veeva is not None:
            pulumi.set(__self__, "veeva", veeva)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)

    @property
    @pulumi.getter
    def amplitude(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs']]:
        """
        The connector-specific credentials required when using Amplitude. See Amplitude Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "amplitude")

    @amplitude.setter
    def amplitude(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs']]):
        pulumi.set(self, "amplitude", value)

    @property
    @pulumi.getter(name="customConnector")
    def custom_connector(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs']]:
        """
        The connector-specific profile properties required when using the custom connector. See Custom Connector Profile Properties for more details.
        """
        return pulumi.get(self, "custom_connector")

    @custom_connector.setter
    def custom_connector(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs']]):
        pulumi.set(self, "custom_connector", value)

    @property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs']]:
        """
        Connector-specific properties required when using Datadog. See Generic Connector Profile Properties for more details.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs']]):
        pulumi.set(self, "datadog", value)

    @property
    @pulumi.getter
    def dynatrace(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs']]:
        """
        The connector-specific properties required when using Dynatrace. See Generic Connector Profile Properties for more details.
        """
        return pulumi.get(self, "dynatrace")

    @dynatrace.setter
    def dynatrace(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs']]):
        pulumi.set(self, "dynatrace", value)

    @property
    @pulumi.getter(name="googleAnalytics")
    def google_analytics(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs']]:
        """
        The connector-specific credentials required when using Google Analytics. See Google Analytics Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "google_analytics")

    @google_analytics.setter
    def google_analytics(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs']]):
        pulumi.set(self, "google_analytics", value)

    @property
    @pulumi.getter
    def honeycode(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs']]:
        """
        The connector-specific credentials required when using Amazon Honeycode. See Honeycode Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "honeycode")

    @honeycode.setter
    def honeycode(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs']]):
        pulumi.set(self, "honeycode", value)

    @property
    @pulumi.getter(name="inforNexus")
    def infor_nexus(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs']]:
        """
        The connector-specific properties required when using Infor Nexus. See Generic Connector Profile Properties for more details.
        """
        return pulumi.get(self, "infor_nexus")

    @infor_nexus.setter
    def infor_nexus(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs']]):
        pulumi.set(self, "infor_nexus", value)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs']]:
        """
        Connector-specific properties required when using Marketo. See Generic Connector Profile Properties for more details.
        """
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs']]:
        """
        Connector-specific properties required when using Amazon Redshift. See Redshift Connector Profile Properties for more details.
        """
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs']]:
        """
        The connector-specific properties required when using Salesforce. See Salesforce Connector Profile Properties for more details.
        """
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="sapoData")
    def sapo_data(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs']]:
        """
        The connector-specific properties required when using SAPOData. See SAPOData Connector Profile Properties for more details.
        """
        return pulumi.get(self, "sapo_data")

    @sapo_data.setter
    def sapo_data(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs']]):
        pulumi.set(self, "sapo_data", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs']]:
        """
        The connector-specific properties required when using ServiceNow. See Generic Connector Profile Properties for more details.
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def singular(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs']]:
        """
        Connector-specific credentials required when using Singular. See Singular Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "singular")

    @singular.setter
    def singular(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs']]):
        pulumi.set(self, "singular", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs']]:
        """
        Connector-specific properties required when using Slack. See Generic Connector Profile Properties for more details.
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs']]:
        """
        The connector-specific properties required when using Snowflake. See Snowflake Connector Profile Properties for more details.
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs']]):
        pulumi.set(self, "snowflake", value)

    @property
    @pulumi.getter
    def trendmicro(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs']]:
        """
        The connector-specific credentials required when using Trend Micro. See Trend Micro Connector Profile Credentials for more details.
        """
        return pulumi.get(self, "trendmicro")

    @trendmicro.setter
    def trendmicro(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs']]):
        pulumi.set(self, "trendmicro", value)

    @property
    @pulumi.getter
    def veeva(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs']]:
        """
        Connector-specific properties required when using Veeva. See Generic Connector Profile Properties for more details.
        """
        return pulumi.get(self, "veeva")

    @veeva.setter
    def veeva(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs']]):
        pulumi.set(self, "veeva", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs']]:
        """
        Connector-specific properties required when using Zendesk. See Generic Connector Profile Properties for more details.
        """
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesAmplitudeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorArgs:
    def __init__(__self__, *,
                 oauth2_properties: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs']] = None,
                 profile_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs'] oauth2_properties: The OAuth 2.0 properties required for OAuth 2.0 authentication.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] profile_properties: A map of properties that are required to create a profile for the custom connector.
        """
        if oauth2_properties is not None:
            pulumi.set(__self__, "oauth2_properties", oauth2_properties)
        if profile_properties is not None:
            pulumi.set(__self__, "profile_properties", profile_properties)

    @property
    @pulumi.getter(name="oauth2Properties")
    def oauth2_properties(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs']]:
        """
        The OAuth 2.0 properties required for OAuth 2.0 authentication.
        """
        return pulumi.get(self, "oauth2_properties")

    @oauth2_properties.setter
    def oauth2_properties(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs']]):
        pulumi.set(self, "oauth2_properties", value)

    @property
    @pulumi.getter(name="profileProperties")
    def profile_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of properties that are required to create a profile for the custom connector.
        """
        return pulumi.get(self, "profile_properties")

    @profile_properties.setter
    def profile_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "profile_properties", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesCustomConnectorOauth2PropertiesArgs:
    def __init__(__self__, *,
                 oauth2_grant_type: pulumi.Input[str],
                 token_url: pulumi.Input[str],
                 token_url_custom_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] oauth2_grant_type: The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication. One of: `AUTHORIZATION_CODE`, `CLIENT_CREDENTIALS`.
        :param pulumi.Input[str] token_url: The token URL required for OAuth 2.0 authentication.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] token_url_custom_properties: Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.
        """
        pulumi.set(__self__, "oauth2_grant_type", oauth2_grant_type)
        pulumi.set(__self__, "token_url", token_url)
        if token_url_custom_properties is not None:
            pulumi.set(__self__, "token_url_custom_properties", token_url_custom_properties)

    @property
    @pulumi.getter(name="oauth2GrantType")
    def oauth2_grant_type(self) -> pulumi.Input[str]:
        """
        The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication. One of: `AUTHORIZATION_CODE`, `CLIENT_CREDENTIALS`.
        """
        return pulumi.get(self, "oauth2_grant_type")

    @oauth2_grant_type.setter
    def oauth2_grant_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "oauth2_grant_type", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> pulumi.Input[str]:
        """
        The token URL required for OAuth 2.0 authentication.
        """
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_url", value)

    @property
    @pulumi.getter(name="tokenUrlCustomProperties")
    def token_url_custom_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.
        """
        return pulumi.get(self, "token_url_custom_properties")

    @token_url_custom_properties.setter
    def token_url_custom_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "token_url_custom_properties", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDatadogArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Datadog resource.
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Datadog resource.
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesDynatraceArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Datadog resource.
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Datadog resource.
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesGoogleAnalyticsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesHoneycodeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesInforNexusArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Datadog resource.
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Datadog resource.
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesMarketoArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Datadog resource.
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Datadog resource.
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesRedshiftArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 cluster_identifier: Optional[pulumi.Input[str]] = None,
                 data_api_role_arn: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: A name for the associated Amazon S3 bucket.
        :param pulumi.Input[str] role_arn: ARN of the IAM role.
        :param pulumi.Input[str] bucket_prefix: The object key for the destination bucket in which Amazon AppFlow places the files.
        :param pulumi.Input[str] cluster_identifier: The unique ID that's assigned to an Amazon Redshift cluster.
        :param pulumi.Input[str] data_api_role_arn: ARN of the IAM role that permits AppFlow to access the database through Data API.
        :param pulumi.Input[str] database_name: The name of an Amazon Redshift database.
        :param pulumi.Input[str] database_url: The JDBC URL of the Amazon Redshift cluster.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "role_arn", role_arn)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if cluster_identifier is not None:
            pulumi.set(__self__, "cluster_identifier", cluster_identifier)
        if data_api_role_arn is not None:
            pulumi.set(__self__, "data_api_role_arn", data_api_role_arn)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_url is not None:
            pulumi.set(__self__, "database_url", database_url)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        A name for the associated Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        ARN of the IAM role.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The object key for the destination bucket in which Amazon AppFlow places the files.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="clusterIdentifier")
    def cluster_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID that's assigned to an Amazon Redshift cluster.
        """
        return pulumi.get(self, "cluster_identifier")

    @cluster_identifier.setter
    def cluster_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_identifier", value)

    @property
    @pulumi.getter(name="dataApiRoleArn")
    def data_api_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of the IAM role that permits AppFlow to access the database through Data API.
        """
        return pulumi.get(self, "data_api_role_arn")

    @data_api_role_arn.setter
    def data_api_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_api_role_arn", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an Amazon Redshift database.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="databaseUrl")
    def database_url(self) -> Optional[pulumi.Input[str]]:
        """
        The JDBC URL of the Amazon Redshift cluster.
        """
        return pulumi.get(self, "database_url")

    @database_url.setter
    def database_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_url", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSalesforceArgs:
    def __init__(__self__, *,
                 instance_url: Optional[pulumi.Input[str]] = None,
                 is_sandbox_environment: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] instance_url: The location of the Datadog resource.
        :param pulumi.Input[bool] is_sandbox_environment: Indicates whether the connector profile applies to a sandbox or production environment.
        """
        if instance_url is not None:
            pulumi.set(__self__, "instance_url", instance_url)
        if is_sandbox_environment is not None:
            pulumi.set(__self__, "is_sandbox_environment", is_sandbox_environment)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the Datadog resource.
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_url", value)

    @property
    @pulumi.getter(name="isSandboxEnvironment")
    def is_sandbox_environment(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the connector profile applies to a sandbox or production environment.
        """
        return pulumi.get(self, "is_sandbox_environment")

    @is_sandbox_environment.setter
    def is_sandbox_environment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_sandbox_environment", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataArgs:
    def __init__(__self__, *,
                 application_host_url: pulumi.Input[str],
                 application_service_path: pulumi.Input[str],
                 client_number: pulumi.Input[str],
                 port_number: pulumi.Input[int],
                 logon_language: Optional[pulumi.Input[str]] = None,
                 oauth_properties: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs']] = None,
                 private_link_service_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] application_host_url: The location of the SAPOData resource.
        :param pulumi.Input[str] application_service_path: The application path to catalog service.
        :param pulumi.Input[str] client_number: The client number for the client creating the connection.
        :param pulumi.Input[int] port_number: The port number of the SAPOData instance.
        :param pulumi.Input[str] logon_language: The logon language of SAPOData instance.
        :param pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs'] oauth_properties: The SAPOData OAuth properties required for OAuth type authentication.
        :param pulumi.Input[str] private_link_service_name: The SAPOData Private Link service name to be used for private data transfers.
        """
        pulumi.set(__self__, "application_host_url", application_host_url)
        pulumi.set(__self__, "application_service_path", application_service_path)
        pulumi.set(__self__, "client_number", client_number)
        pulumi.set(__self__, "port_number", port_number)
        if logon_language is not None:
            pulumi.set(__self__, "logon_language", logon_language)
        if oauth_properties is not None:
            pulumi.set(__self__, "oauth_properties", oauth_properties)
        if private_link_service_name is not None:
            pulumi.set(__self__, "private_link_service_name", private_link_service_name)

    @property
    @pulumi.getter(name="applicationHostUrl")
    def application_host_url(self) -> pulumi.Input[str]:
        """
        The location of the SAPOData resource.
        """
        return pulumi.get(self, "application_host_url")

    @application_host_url.setter
    def application_host_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_host_url", value)

    @property
    @pulumi.getter(name="applicationServicePath")
    def application_service_path(self) -> pulumi.Input[str]:
        """
        The application path to catalog service.
        """
        return pulumi.get(self, "application_service_path")

    @application_service_path.setter
    def application_service_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_service_path", value)

    @property
    @pulumi.getter(name="clientNumber")
    def client_number(self) -> pulumi.Input[str]:
        """
        The client number for the client creating the connection.
        """
        return pulumi.get(self, "client_number")

    @client_number.setter
    def client_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_number", value)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        """
        The port number of the SAPOData instance.
        """
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)

    @property
    @pulumi.getter(name="logonLanguage")
    def logon_language(self) -> Optional[pulumi.Input[str]]:
        """
        The logon language of SAPOData instance.
        """
        return pulumi.get(self, "logon_language")

    @logon_language.setter
    def logon_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_language", value)

    @property
    @pulumi.getter(name="oauthProperties")
    def oauth_properties(self) -> Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs']]:
        """
        The SAPOData OAuth properties required for OAuth type authentication.
        """
        return pulumi.get(self, "oauth_properties")

    @oauth_properties.setter
    def oauth_properties(self, value: Optional[pulumi.Input['ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs']]):
        pulumi.set(self, "oauth_properties", value)

    @property
    @pulumi.getter(name="privateLinkServiceName")
    def private_link_service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The SAPOData Private Link service name to be used for private data transfers.
        """
        return pulumi.get(self, "private_link_service_name")

    @private_link_service_name.setter
    def private_link_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_service_name", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSapoDataOauthPropertiesArgs:
    def __init__(__self__, *,
                 auth_code_url: pulumi.Input[str],
                 oauth_scopes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 token_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] auth_code_url: The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] oauth_scopes: The OAuth scopes required for OAuth type authentication.
        :param pulumi.Input[str] token_url: The token URL required for OAuth 2.0 authentication.
        """
        pulumi.set(__self__, "auth_code_url", auth_code_url)
        pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="authCodeUrl")
    def auth_code_url(self) -> pulumi.Input[str]:
        """
        The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
        """
        return pulumi.get(self, "auth_code_url")

    @auth_code_url.setter
    def auth_code_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_code_url", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The OAuth scopes required for OAuth type authentication.
        """
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> pulumi.Input[str]:
        """
        The token URL required for OAuth 2.0 authentication.
        """
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesServiceNowArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Datadog resource.
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Datadog resource.
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSingularArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSlackArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Datadog resource.
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Datadog resource.
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesSnowflakeArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 stage: pulumi.Input[str],
                 warehouse: pulumi.Input[str],
                 account_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 private_link_service_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: A name for the associated Amazon S3 bucket.
        :param pulumi.Input[str] stage: Name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the Snowflake account. This is written in the following format: `<Database>.<Schema>.<Stage Name>`.
        :param pulumi.Input[str] warehouse: The name of the Snowflake warehouse.
        :param pulumi.Input[str] account_name: The name of the account.
        :param pulumi.Input[str] bucket_prefix: The object key for the destination bucket in which Amazon AppFlow places the files.
        :param pulumi.Input[str] private_link_service_name: The SAPOData Private Link service name to be used for private data transfers.
        :param pulumi.Input[str] region: AWS Region of the Snowflake account.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "warehouse", warehouse)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if private_link_service_name is not None:
            pulumi.set(__self__, "private_link_service_name", private_link_service_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        A name for the associated Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Input[str]:
        """
        Name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the Snowflake account. This is written in the following format: `<Database>.<Schema>.<Stage Name>`.
        """
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: pulumi.Input[str]):
        pulumi.set(self, "stage", value)

    @property
    @pulumi.getter
    def warehouse(self) -> pulumi.Input[str]:
        """
        The name of the Snowflake warehouse.
        """
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: pulumi.Input[str]):
        pulumi.set(self, "warehouse", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The object key for the destination bucket in which Amazon AppFlow places the files.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="privateLinkServiceName")
    def private_link_service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The SAPOData Private Link service name to be used for private data transfers.
        """
        return pulumi.get(self, "private_link_service_name")

    @private_link_service_name.setter
    def private_link_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_service_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS Region of the Snowflake account.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesTrendmicroArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesVeevaArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Datadog resource.
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Datadog resource.
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileConnectorProfileConfigConnectorProfilePropertiesZendeskArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Datadog resource.
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Datadog resource.
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class FlowDestinationFlowConfigArgs:
    def __init__(__self__, *,
                 connector_type: pulumi.Input[str],
                 destination_connector_properties: pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesArgs'],
                 api_version: Optional[pulumi.Input[str]] = None,
                 connector_profile_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] connector_type: Type of connector, such as Salesforce, Amplitude, and so on. Valid values are `Salesforce`, `Singular`, `Slack`, `Redshift`, `S3`, `Marketo`, `Googleanalytics`, `Zendesk`, `Servicenow`, `Datadog`, `Trendmicro`, `Snowflake`, `Dynatrace`, `Infornexus`, `Amplitude`, `Veeva`, `EventBridge`, `LookoutMetrics`, `Upsolver`, `Honeycode`, `CustomerProfiles`, `SAPOData`, and `CustomConnector`.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesArgs'] destination_connector_properties: This stores the information that is required to query a particular connector. See Destination Connector Properties for more information.
        :param pulumi.Input[str] api_version: API version that the destination connector uses.
        :param pulumi.Input[str] connector_profile_name: Name of the connector profile. This name must be unique for each connector profile in the AWS account.
        """
        pulumi.set(__self__, "connector_type", connector_type)
        pulumi.set(__self__, "destination_connector_properties", destination_connector_properties)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if connector_profile_name is not None:
            pulumi.set(__self__, "connector_profile_name", connector_profile_name)

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> pulumi.Input[str]:
        """
        Type of connector, such as Salesforce, Amplitude, and so on. Valid values are `Salesforce`, `Singular`, `Slack`, `Redshift`, `S3`, `Marketo`, `Googleanalytics`, `Zendesk`, `Servicenow`, `Datadog`, `Trendmicro`, `Snowflake`, `Dynatrace`, `Infornexus`, `Amplitude`, `Veeva`, `EventBridge`, `LookoutMetrics`, `Upsolver`, `Honeycode`, `CustomerProfiles`, `SAPOData`, and `CustomConnector`.
        """
        return pulumi.get(self, "connector_type")

    @connector_type.setter
    def connector_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "connector_type", value)

    @property
    @pulumi.getter(name="destinationConnectorProperties")
    def destination_connector_properties(self) -> pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesArgs']:
        """
        This stores the information that is required to query a particular connector. See Destination Connector Properties for more information.
        """
        return pulumi.get(self, "destination_connector_properties")

    @destination_connector_properties.setter
    def destination_connector_properties(self, value: pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesArgs']):
        pulumi.set(self, "destination_connector_properties", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        API version that the destination connector uses.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="connectorProfileName")
    def connector_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the connector profile. This name must be unique for each connector profile in the AWS account.
        """
        return pulumi.get(self, "connector_profile_name")

    @connector_profile_name.setter
    def connector_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_profile_name", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesArgs:
    def __init__(__self__, *,
                 custom_connector: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs']] = None,
                 customer_profiles: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs']] = None,
                 event_bridge: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs']] = None,
                 honeycode: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs']] = None,
                 lookout_metrics: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs']] = None,
                 marketo: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs']] = None,
                 redshift: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs']] = None,
                 s3: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args']] = None,
                 salesforce: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs']] = None,
                 sapo_data: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs']] = None,
                 snowflake: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs']] = None,
                 upsolver: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs']] = None,
                 zendesk: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs']] = None):
        """
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs'] custom_connector: Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs'] customer_profiles: Properties that are required to query Amazon Connect Customer Profiles. See Customer Profiles Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs'] event_bridge: Properties that are required to query Amazon EventBridge. See Generic Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs'] honeycode: Properties that are required to query Amazon Honeycode. See Generic Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs'] marketo: Properties that are required to query Marketo. See Generic Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs'] redshift: Properties that are required to query Amazon Redshift. See Redshift Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args'] s3: Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs'] salesforce: Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs'] sapo_data: Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs'] snowflake: Properties that are required to query Snowflake. See Snowflake Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs'] upsolver: Properties that are required to query Upsolver. See Upsolver Destination Properties for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs'] zendesk: Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
        """
        if custom_connector is not None:
            pulumi.set(__self__, "custom_connector", custom_connector)
        if customer_profiles is not None:
            pulumi.set(__self__, "customer_profiles", customer_profiles)
        if event_bridge is not None:
            pulumi.set(__self__, "event_bridge", event_bridge)
        if honeycode is not None:
            pulumi.set(__self__, "honeycode", honeycode)
        if lookout_metrics is not None:
            pulumi.set(__self__, "lookout_metrics", lookout_metrics)
        if marketo is not None:
            pulumi.set(__self__, "marketo", marketo)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if sapo_data is not None:
            pulumi.set(__self__, "sapo_data", sapo_data)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if upsolver is not None:
            pulumi.set(__self__, "upsolver", upsolver)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)

    @property
    @pulumi.getter(name="customConnector")
    def custom_connector(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs']]:
        """
        Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
        """
        return pulumi.get(self, "custom_connector")

    @custom_connector.setter
    def custom_connector(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs']]):
        pulumi.set(self, "custom_connector", value)

    @property
    @pulumi.getter(name="customerProfiles")
    def customer_profiles(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs']]:
        """
        Properties that are required to query Amazon Connect Customer Profiles. See Customer Profiles Destination Properties for more details.
        """
        return pulumi.get(self, "customer_profiles")

    @customer_profiles.setter
    def customer_profiles(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs']]):
        pulumi.set(self, "customer_profiles", value)

    @property
    @pulumi.getter(name="eventBridge")
    def event_bridge(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs']]:
        """
        Properties that are required to query Amazon EventBridge. See Generic Destination Properties for more details.
        """
        return pulumi.get(self, "event_bridge")

    @event_bridge.setter
    def event_bridge(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs']]):
        pulumi.set(self, "event_bridge", value)

    @property
    @pulumi.getter
    def honeycode(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs']]:
        """
        Properties that are required to query Amazon Honeycode. See Generic Destination Properties for more details.
        """
        return pulumi.get(self, "honeycode")

    @honeycode.setter
    def honeycode(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs']]):
        pulumi.set(self, "honeycode", value)

    @property
    @pulumi.getter(name="lookoutMetrics")
    def lookout_metrics(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs']]:
        return pulumi.get(self, "lookout_metrics")

    @lookout_metrics.setter
    def lookout_metrics(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs']]):
        pulumi.set(self, "lookout_metrics", value)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs']]:
        """
        Properties that are required to query Marketo. See Generic Destination Properties for more details.
        """
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs']]:
        """
        Properties that are required to query Amazon Redshift. See Redshift Destination Properties for more details.
        """
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args']]:
        """
        Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs']]:
        """
        Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
        """
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="sapoData")
    def sapo_data(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs']]:
        """
        Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
        """
        return pulumi.get(self, "sapo_data")

    @sapo_data.setter
    def sapo_data(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs']]):
        pulumi.set(self, "sapo_data", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs']]:
        """
        Properties that are required to query Snowflake. See Snowflake Destination Properties for more details.
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs']]):
        pulumi.set(self, "snowflake", value)

    @property
    @pulumi.getter
    def upsolver(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs']]:
        """
        Properties that are required to query Upsolver. See Upsolver Destination Properties for more details.
        """
        return pulumi.get(self, "upsolver")

    @upsolver.setter
    def upsolver(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs']]):
        pulumi.set(self, "upsolver", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs']]:
        """
        Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
        """
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorArgs:
    def __init__(__self__, *,
                 entity_name: pulumi.Input[str],
                 custom_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 error_handling_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs']] = None,
                 id_field_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 write_operation_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] entity_name: Entity specified in the custom connector as a destination in the flow.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] custom_properties: Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs'] error_handling_config: Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id_field_names: Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
        :param pulumi.Input[str] write_operation_type: Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
        """
        pulumi.set(__self__, "entity_name", entity_name)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)
        if id_field_names is not None:
            pulumi.set(__self__, "id_field_names", id_field_names)
        if write_operation_type is not None:
            pulumi.set(__self__, "write_operation_type", write_operation_type)

    @property
    @pulumi.getter(name="entityName")
    def entity_name(self) -> pulumi.Input[str]:
        """
        Entity specified in the custom connector as a destination in the flow.
        """
        return pulumi.get(self, "entity_name")

    @entity_name.setter
    def entity_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_name", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs']]:
        """
        Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)

    @property
    @pulumi.getter(name="idFieldNames")
    def id_field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
        """
        return pulumi.get(self, "id_field_names")

    @id_field_names.setter
    def id_field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id_field_names", value)

    @property
    @pulumi.getter(name="writeOperationType")
    def write_operation_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
        """
        return pulumi.get(self, "write_operation_type")

    @write_operation_type.setter
    def write_operation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_operation_type", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesCustomConnectorErrorHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 fail_on_first_destination_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input[bool] fail_on_first_destination_error: If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if fail_on_first_destination_error is not None:
            pulumi.set(__self__, "fail_on_first_destination_error", fail_on_first_destination_error)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="failOnFirstDestinationError")
    def fail_on_first_destination_error(self) -> Optional[pulumi.Input[bool]]:
        """
        If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        return pulumi.get(self, "fail_on_first_destination_error")

    @fail_on_first_destination_error.setter
    def fail_on_first_destination_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_first_destination_error", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesCustomerProfilesArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[str],
                 object_type_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain_name: Unique name of the Amazon Connect Customer Profiles domain.
        :param pulumi.Input[str] object_type_name: Object specified in the Amazon Connect Customer Profiles flow destination.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        if object_type_name is not None:
            pulumi.set(__self__, "object_type_name", object_type_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        """
        Unique name of the Amazon Connect Customer Profiles domain.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="objectTypeName")
    def object_type_name(self) -> Optional[pulumi.Input[str]]:
        """
        Object specified in the Amazon Connect Customer Profiles flow destination.
        """
        return pulumi.get(self, "object_type_name")

    @object_type_name.setter
    def object_type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type_name", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 error_handling_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs']] = None):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs'] error_handling_config: Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        pulumi.set(__self__, "object", object)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs']]:
        """
        Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesEventBridgeErrorHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 fail_on_first_destination_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input[bool] fail_on_first_destination_error: If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if fail_on_first_destination_error is not None:
            pulumi.set(__self__, "fail_on_first_destination_error", fail_on_first_destination_error)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="failOnFirstDestinationError")
    def fail_on_first_destination_error(self) -> Optional[pulumi.Input[bool]]:
        """
        If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        return pulumi.get(self, "fail_on_first_destination_error")

    @fail_on_first_destination_error.setter
    def fail_on_first_destination_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_first_destination_error", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 error_handling_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs']] = None):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs'] error_handling_config: Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        pulumi.set(__self__, "object", object)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs']]:
        """
        Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesHoneycodeErrorHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 fail_on_first_destination_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input[bool] fail_on_first_destination_error: If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if fail_on_first_destination_error is not None:
            pulumi.set(__self__, "fail_on_first_destination_error", fail_on_first_destination_error)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="failOnFirstDestinationError")
    def fail_on_first_destination_error(self) -> Optional[pulumi.Input[bool]]:
        """
        If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        return pulumi.get(self, "fail_on_first_destination_error")

    @fail_on_first_destination_error.setter
    def fail_on_first_destination_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_first_destination_error", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesLookoutMetricsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 error_handling_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs']] = None):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs'] error_handling_config: Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        pulumi.set(__self__, "object", object)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs']]:
        """
        Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesMarketoErrorHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 fail_on_first_destination_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input[bool] fail_on_first_destination_error: If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if fail_on_first_destination_error is not None:
            pulumi.set(__self__, "fail_on_first_destination_error", fail_on_first_destination_error)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="failOnFirstDestinationError")
    def fail_on_first_destination_error(self) -> Optional[pulumi.Input[bool]]:
        """
        If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        return pulumi.get(self, "fail_on_first_destination_error")

    @fail_on_first_destination_error.setter
    def fail_on_first_destination_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_first_destination_error", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftArgs:
    def __init__(__self__, *,
                 intermediate_bucket_name: pulumi.Input[str],
                 object: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 error_handling_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs']] = None):
        """
        :param pulumi.Input[str] intermediate_bucket_name: Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
        :param pulumi.Input[str] object: Object specified in the flow destination.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs'] error_handling_config: Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        pulumi.set(__self__, "intermediate_bucket_name", intermediate_bucket_name)
        pulumi.set(__self__, "object", object)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)

    @property
    @pulumi.getter(name="intermediateBucketName")
    def intermediate_bucket_name(self) -> pulumi.Input[str]:
        """
        Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
        """
        return pulumi.get(self, "intermediate_bucket_name")

    @intermediate_bucket_name.setter
    def intermediate_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "intermediate_bucket_name", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs']]:
        """
        Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesRedshiftErrorHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 fail_on_first_destination_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input[bool] fail_on_first_destination_error: If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if fail_on_first_destination_error is not None:
            pulumi.set(__self__, "fail_on_first_destination_error", fail_on_first_destination_error)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="failOnFirstDestinationError")
    def fail_on_first_destination_error(self) -> Optional[pulumi.Input[bool]]:
        """
        If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        return pulumi.get(self, "fail_on_first_destination_error")

    @fail_on_first_destination_error.setter
    def fail_on_first_destination_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_first_destination_error", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesS3Args:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 s3_output_format_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs']] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs'] s3_output_format_config: Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if s3_output_format_config is not None:
            pulumi.set(__self__, "s3_output_format_config", s3_output_format_config)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="s3OutputFormatConfig")
    def s3_output_format_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs']]:
        """
        Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
        """
        return pulumi.get(self, "s3_output_format_config")

    @s3_output_format_config.setter
    def s3_output_format_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs']]):
        pulumi.set(self, "s3_output_format_config", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigArgs:
    def __init__(__self__, *,
                 aggregation_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs']] = None,
                 file_type: Optional[pulumi.Input[str]] = None,
                 prefix_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs']] = None,
                 preserve_source_data_typing: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs'] aggregation_config: Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
        :param pulumi.Input[str] file_type: File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are `CSV`, `JSON`, and `PARQUET`.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs'] prefix_config: Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
        :param pulumi.Input[bool] preserve_source_data_typing: Whether the data types from the source system need to be preserved (Only valid for `Parquet` file type)
        """
        if aggregation_config is not None:
            pulumi.set(__self__, "aggregation_config", aggregation_config)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if prefix_config is not None:
            pulumi.set(__self__, "prefix_config", prefix_config)
        if preserve_source_data_typing is not None:
            pulumi.set(__self__, "preserve_source_data_typing", preserve_source_data_typing)

    @property
    @pulumi.getter(name="aggregationConfig")
    def aggregation_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs']]:
        """
        Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
        """
        return pulumi.get(self, "aggregation_config")

    @aggregation_config.setter
    def aggregation_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs']]):
        pulumi.set(self, "aggregation_config", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[str]]:
        """
        File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are `CSV`, `JSON`, and `PARQUET`.
        """
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter(name="prefixConfig")
    def prefix_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs']]:
        """
        Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
        """
        return pulumi.get(self, "prefix_config")

    @prefix_config.setter
    def prefix_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs']]):
        pulumi.set(self, "prefix_config", value)

    @property
    @pulumi.getter(name="preserveSourceDataTyping")
    def preserve_source_data_typing(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the data types from the source system need to be preserved (Only valid for `Parquet` file type)
        """
        return pulumi.get(self, "preserve_source_data_typing")

    @preserve_source_data_typing.setter
    def preserve_source_data_typing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_source_data_typing", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigAggregationConfigArgs:
    def __init__(__self__, *,
                 aggregation_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation_type: Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are `None` and `SingleFile`.
        """
        if aggregation_type is not None:
            pulumi.set(__self__, "aggregation_type", aggregation_type)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> Optional[pulumi.Input[str]]:
        """
        Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are `None` and `SingleFile`.
        """
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_type", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesS3S3OutputFormatConfigPrefixConfigArgs:
    def __init__(__self__, *,
                 prefix_format: Optional[pulumi.Input[str]] = None,
                 prefix_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] prefix_format: Determines the level of granularity that's included in the prefix. Valid values are `YEAR`, `MONTH`, `DAY`, `HOUR`, and `MINUTE`.
        :param pulumi.Input[str] prefix_type: Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are `FILENAME`, `PATH`, and `PATH_AND_FILENAME`.
        """
        if prefix_format is not None:
            pulumi.set(__self__, "prefix_format", prefix_format)
        if prefix_type is not None:
            pulumi.set(__self__, "prefix_type", prefix_type)

    @property
    @pulumi.getter(name="prefixFormat")
    def prefix_format(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the level of granularity that's included in the prefix. Valid values are `YEAR`, `MONTH`, `DAY`, `HOUR`, and `MINUTE`.
        """
        return pulumi.get(self, "prefix_format")

    @prefix_format.setter
    def prefix_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_format", value)

    @property
    @pulumi.getter(name="prefixType")
    def prefix_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are `FILENAME`, `PATH`, and `PATH_AND_FILENAME`.
        """
        return pulumi.get(self, "prefix_type")

    @prefix_type.setter
    def prefix_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_type", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 error_handling_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs']] = None,
                 id_field_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 write_operation_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs'] error_handling_config: Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id_field_names: Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
        :param pulumi.Input[str] write_operation_type: Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
        """
        pulumi.set(__self__, "object", object)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)
        if id_field_names is not None:
            pulumi.set(__self__, "id_field_names", id_field_names)
        if write_operation_type is not None:
            pulumi.set(__self__, "write_operation_type", write_operation_type)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs']]:
        """
        Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)

    @property
    @pulumi.getter(name="idFieldNames")
    def id_field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
        """
        return pulumi.get(self, "id_field_names")

    @id_field_names.setter
    def id_field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id_field_names", value)

    @property
    @pulumi.getter(name="writeOperationType")
    def write_operation_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
        """
        return pulumi.get(self, "write_operation_type")

    @write_operation_type.setter
    def write_operation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_operation_type", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesSalesforceErrorHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 fail_on_first_destination_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input[bool] fail_on_first_destination_error: If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if fail_on_first_destination_error is not None:
            pulumi.set(__self__, "fail_on_first_destination_error", fail_on_first_destination_error)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="failOnFirstDestinationError")
    def fail_on_first_destination_error(self) -> Optional[pulumi.Input[bool]]:
        """
        If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        return pulumi.get(self, "fail_on_first_destination_error")

    @fail_on_first_destination_error.setter
    def fail_on_first_destination_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_first_destination_error", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataArgs:
    def __init__(__self__, *,
                 object_path: pulumi.Input[str],
                 error_handling_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs']] = None,
                 id_field_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 success_response_handling_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs']] = None,
                 write_operation_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_path: Object path specified in the SAPOData flow destination.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs'] error_handling_config: Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id_field_names: Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs'] success_response_handling_config: Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
        :param pulumi.Input[str] write_operation_type: Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
        """
        pulumi.set(__self__, "object_path", object_path)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)
        if id_field_names is not None:
            pulumi.set(__self__, "id_field_names", id_field_names)
        if success_response_handling_config is not None:
            pulumi.set(__self__, "success_response_handling_config", success_response_handling_config)
        if write_operation_type is not None:
            pulumi.set(__self__, "write_operation_type", write_operation_type)

    @property
    @pulumi.getter(name="objectPath")
    def object_path(self) -> pulumi.Input[str]:
        """
        Object path specified in the SAPOData flow destination.
        """
        return pulumi.get(self, "object_path")

    @object_path.setter
    def object_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_path", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs']]:
        """
        Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)

    @property
    @pulumi.getter(name="idFieldNames")
    def id_field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
        """
        return pulumi.get(self, "id_field_names")

    @id_field_names.setter
    def id_field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id_field_names", value)

    @property
    @pulumi.getter(name="successResponseHandlingConfig")
    def success_response_handling_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs']]:
        """
        Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
        """
        return pulumi.get(self, "success_response_handling_config")

    @success_response_handling_config.setter
    def success_response_handling_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs']]):
        pulumi.set(self, "success_response_handling_config", value)

    @property
    @pulumi.getter(name="writeOperationType")
    def write_operation_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
        """
        return pulumi.get(self, "write_operation_type")

    @write_operation_type.setter
    def write_operation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_operation_type", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataErrorHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 fail_on_first_destination_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input[bool] fail_on_first_destination_error: If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if fail_on_first_destination_error is not None:
            pulumi.set(__self__, "fail_on_first_destination_error", fail_on_first_destination_error)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="failOnFirstDestinationError")
    def fail_on_first_destination_error(self) -> Optional[pulumi.Input[bool]]:
        """
        If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        return pulumi.get(self, "fail_on_first_destination_error")

    @fail_on_first_destination_error.setter
    def fail_on_first_destination_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_first_destination_error", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesSapoDataSuccessResponseHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeArgs:
    def __init__(__self__, *,
                 intermediate_bucket_name: pulumi.Input[str],
                 object: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 error_handling_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs']] = None):
        """
        :param pulumi.Input[str] intermediate_bucket_name: Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
        :param pulumi.Input[str] object: Object specified in the flow destination.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs'] error_handling_config: Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        pulumi.set(__self__, "intermediate_bucket_name", intermediate_bucket_name)
        pulumi.set(__self__, "object", object)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)

    @property
    @pulumi.getter(name="intermediateBucketName")
    def intermediate_bucket_name(self) -> pulumi.Input[str]:
        """
        Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
        """
        return pulumi.get(self, "intermediate_bucket_name")

    @intermediate_bucket_name.setter
    def intermediate_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "intermediate_bucket_name", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs']]:
        """
        Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesSnowflakeErrorHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 fail_on_first_destination_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input[bool] fail_on_first_destination_error: If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if fail_on_first_destination_error is not None:
            pulumi.set(__self__, "fail_on_first_destination_error", fail_on_first_destination_error)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="failOnFirstDestinationError")
    def fail_on_first_destination_error(self) -> Optional[pulumi.Input[bool]]:
        """
        If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        return pulumi.get(self, "fail_on_first_destination_error")

    @fail_on_first_destination_error.setter
    def fail_on_first_destination_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_first_destination_error", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 s3_output_format_config: pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs'],
                 bucket_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs'] s3_output_format_config: Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "s3_output_format_config", s3_output_format_config)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="s3OutputFormatConfig")
    def s3_output_format_config(self) -> pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs']:
        """
        Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
        """
        return pulumi.get(self, "s3_output_format_config")

    @s3_output_format_config.setter
    def s3_output_format_config(self, value: pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs']):
        pulumi.set(self, "s3_output_format_config", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigArgs:
    def __init__(__self__, *,
                 prefix_config: pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs'],
                 aggregation_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs']] = None,
                 file_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs'] prefix_config: Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs'] aggregation_config: Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
        :param pulumi.Input[str] file_type: File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are `CSV`, `JSON`, and `PARQUET`.
        """
        pulumi.set(__self__, "prefix_config", prefix_config)
        if aggregation_config is not None:
            pulumi.set(__self__, "aggregation_config", aggregation_config)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)

    @property
    @pulumi.getter(name="prefixConfig")
    def prefix_config(self) -> pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs']:
        """
        Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
        """
        return pulumi.get(self, "prefix_config")

    @prefix_config.setter
    def prefix_config(self, value: pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs']):
        pulumi.set(self, "prefix_config", value)

    @property
    @pulumi.getter(name="aggregationConfig")
    def aggregation_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs']]:
        """
        Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
        """
        return pulumi.get(self, "aggregation_config")

    @aggregation_config.setter
    def aggregation_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs']]):
        pulumi.set(self, "aggregation_config", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[str]]:
        """
        File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are `CSV`, `JSON`, and `PARQUET`.
        """
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_type", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigAggregationConfigArgs:
    def __init__(__self__, *,
                 aggregation_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation_type: Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are `None` and `SingleFile`.
        """
        if aggregation_type is not None:
            pulumi.set(__self__, "aggregation_type", aggregation_type)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> Optional[pulumi.Input[str]]:
        """
        Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are `None` and `SingleFile`.
        """
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_type", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesUpsolverS3OutputFormatConfigPrefixConfigArgs:
    def __init__(__self__, *,
                 prefix_type: pulumi.Input[str],
                 prefix_format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] prefix_type: Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are `FILENAME`, `PATH`, and `PATH_AND_FILENAME`.
        :param pulumi.Input[str] prefix_format: Determines the level of granularity that's included in the prefix. Valid values are `YEAR`, `MONTH`, `DAY`, `HOUR`, and `MINUTE`.
        """
        pulumi.set(__self__, "prefix_type", prefix_type)
        if prefix_format is not None:
            pulumi.set(__self__, "prefix_format", prefix_format)

    @property
    @pulumi.getter(name="prefixType")
    def prefix_type(self) -> pulumi.Input[str]:
        """
        Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are `FILENAME`, `PATH`, and `PATH_AND_FILENAME`.
        """
        return pulumi.get(self, "prefix_type")

    @prefix_type.setter
    def prefix_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix_type", value)

    @property
    @pulumi.getter(name="prefixFormat")
    def prefix_format(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the level of granularity that's included in the prefix. Valid values are `YEAR`, `MONTH`, `DAY`, `HOUR`, and `MINUTE`.
        """
        return pulumi.get(self, "prefix_format")

    @prefix_format.setter
    def prefix_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_format", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 error_handling_config: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs']] = None,
                 id_field_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 write_operation_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        :param pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs'] error_handling_config: Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id_field_names: Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
        :param pulumi.Input[str] write_operation_type: Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
        """
        pulumi.set(__self__, "object", object)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)
        if id_field_names is not None:
            pulumi.set(__self__, "id_field_names", id_field_names)
        if write_operation_type is not None:
            pulumi.set(__self__, "write_operation_type", write_operation_type)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs']]:
        """
        Settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination. See Error Handling Config for more details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)

    @property
    @pulumi.getter(name="idFieldNames")
    def id_field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
        """
        return pulumi.get(self, "id_field_names")

    @id_field_names.setter
    def id_field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id_field_names", value)

    @property
    @pulumi.getter(name="writeOperationType")
    def write_operation_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of write operation to be performed in the custom connector when it's used as destination. Valid values are `INSERT`, `UPSERT`, `UPDATE`, and `DELETE`.
        """
        return pulumi.get(self, "write_operation_type")

    @write_operation_type.setter
    def write_operation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_operation_type", value)


@pulumi.input_type
class FlowDestinationFlowConfigDestinationConnectorPropertiesZendeskErrorHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 fail_on_first_destination_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input[bool] fail_on_first_destination_error: If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if fail_on_first_destination_error is not None:
            pulumi.set(__self__, "fail_on_first_destination_error", fail_on_first_destination_error)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="failOnFirstDestinationError")
    def fail_on_first_destination_error(self) -> Optional[pulumi.Input[bool]]:
        """
        If the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        return pulumi.get(self, "fail_on_first_destination_error")

    @fail_on_first_destination_error.setter
    def fail_on_first_destination_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_first_destination_error", value)


@pulumi.input_type
class FlowSourceFlowConfigArgs:
    def __init__(__self__, *,
                 connector_type: pulumi.Input[str],
                 source_connector_properties: pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesArgs'],
                 api_version: Optional[pulumi.Input[str]] = None,
                 connector_profile_name: Optional[pulumi.Input[str]] = None,
                 incremental_pull_config: Optional[pulumi.Input['FlowSourceFlowConfigIncrementalPullConfigArgs']] = None):
        """
        :param pulumi.Input[str] connector_type: Type of connector, such as Salesforce, Amplitude, and so on. Valid values are `Salesforce`, `Singular`, `Slack`, `Redshift`, `S3`, `Marketo`, `Googleanalytics`, `Zendesk`, `Servicenow`, `Datadog`, `Trendmicro`, `Snowflake`, `Dynatrace`, `Infornexus`, `Amplitude`, `Veeva`, `EventBridge`, `LookoutMetrics`, `Upsolver`, `Honeycode`, `CustomerProfiles`, `SAPOData`, and `CustomConnector`.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesArgs'] source_connector_properties: Information that is required to query a particular source connector. See Source Connector Properties for details.
        :param pulumi.Input[str] api_version: API version that the destination connector uses.
        :param pulumi.Input[str] connector_profile_name: Name of the connector profile. This name must be unique for each connector profile in the AWS account.
        :param pulumi.Input['FlowSourceFlowConfigIncrementalPullConfigArgs'] incremental_pull_config: Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull. See Incremental Pull Config for more details.
        """
        pulumi.set(__self__, "connector_type", connector_type)
        pulumi.set(__self__, "source_connector_properties", source_connector_properties)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if connector_profile_name is not None:
            pulumi.set(__self__, "connector_profile_name", connector_profile_name)
        if incremental_pull_config is not None:
            pulumi.set(__self__, "incremental_pull_config", incremental_pull_config)

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> pulumi.Input[str]:
        """
        Type of connector, such as Salesforce, Amplitude, and so on. Valid values are `Salesforce`, `Singular`, `Slack`, `Redshift`, `S3`, `Marketo`, `Googleanalytics`, `Zendesk`, `Servicenow`, `Datadog`, `Trendmicro`, `Snowflake`, `Dynatrace`, `Infornexus`, `Amplitude`, `Veeva`, `EventBridge`, `LookoutMetrics`, `Upsolver`, `Honeycode`, `CustomerProfiles`, `SAPOData`, and `CustomConnector`.
        """
        return pulumi.get(self, "connector_type")

    @connector_type.setter
    def connector_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "connector_type", value)

    @property
    @pulumi.getter(name="sourceConnectorProperties")
    def source_connector_properties(self) -> pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesArgs']:
        """
        Information that is required to query a particular source connector. See Source Connector Properties for details.
        """
        return pulumi.get(self, "source_connector_properties")

    @source_connector_properties.setter
    def source_connector_properties(self, value: pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesArgs']):
        pulumi.set(self, "source_connector_properties", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        API version that the destination connector uses.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="connectorProfileName")
    def connector_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the connector profile. This name must be unique for each connector profile in the AWS account.
        """
        return pulumi.get(self, "connector_profile_name")

    @connector_profile_name.setter
    def connector_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_profile_name", value)

    @property
    @pulumi.getter(name="incrementalPullConfig")
    def incremental_pull_config(self) -> Optional[pulumi.Input['FlowSourceFlowConfigIncrementalPullConfigArgs']]:
        """
        Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull. See Incremental Pull Config for more details.
        """
        return pulumi.get(self, "incremental_pull_config")

    @incremental_pull_config.setter
    def incremental_pull_config(self, value: Optional[pulumi.Input['FlowSourceFlowConfigIncrementalPullConfigArgs']]):
        pulumi.set(self, "incremental_pull_config", value)


@pulumi.input_type
class FlowSourceFlowConfigIncrementalPullConfigArgs:
    def __init__(__self__, *,
                 datetime_type_field_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] datetime_type_field_name: Field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
        """
        if datetime_type_field_name is not None:
            pulumi.set(__self__, "datetime_type_field_name", datetime_type_field_name)

    @property
    @pulumi.getter(name="datetimeTypeFieldName")
    def datetime_type_field_name(self) -> Optional[pulumi.Input[str]]:
        """
        Field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
        """
        return pulumi.get(self, "datetime_type_field_name")

    @datetime_type_field_name.setter
    def datetime_type_field_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datetime_type_field_name", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesArgs:
    def __init__(__self__, *,
                 amplitude: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs']] = None,
                 custom_connector: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs']] = None,
                 datadog: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs']] = None,
                 dynatrace: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs']] = None,
                 google_analytics: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs']] = None,
                 infor_nexus: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs']] = None,
                 marketo: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs']] = None,
                 s3: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesS3Args']] = None,
                 salesforce: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs']] = None,
                 sapo_data: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs']] = None,
                 service_now: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs']] = None,
                 singular: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs']] = None,
                 slack: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs']] = None,
                 trendmicro: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs']] = None,
                 veeva: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs']] = None,
                 zendesk: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs']] = None):
        """
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs'] amplitude: Information that is required for querying Amplitude. See Generic Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs'] custom_connector: Properties that are applied when the custom connector is being used as a source. See Custom Connector Source Properties.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs'] datadog: Information that is required for querying Datadog. See Generic Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs'] dynatrace: Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs'] google_analytics: Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs'] infor_nexus: Information that is required for querying Infor Nexus. See Generic Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs'] marketo: Information that is required for querying Marketo. See Generic Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesS3Args'] s3: Information that is required for querying Amazon S3. See S3 Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs'] salesforce: Information that is required for querying Salesforce. See Salesforce Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs'] sapo_data: Information that is required for querying SAPOData as a flow source. See SAPO Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs'] service_now: Information that is required for querying ServiceNow. See Generic Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs'] singular: Information that is required for querying Singular. See Generic Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs'] slack: Information that is required for querying Slack. See Generic Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs'] trendmicro: Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs'] veeva: Information that is required for querying Veeva. See Veeva Source Properties for more details.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs'] zendesk: Information that is required for querying Zendesk. See Generic Source Properties for more details.
        """
        if amplitude is not None:
            pulumi.set(__self__, "amplitude", amplitude)
        if custom_connector is not None:
            pulumi.set(__self__, "custom_connector", custom_connector)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if dynatrace is not None:
            pulumi.set(__self__, "dynatrace", dynatrace)
        if google_analytics is not None:
            pulumi.set(__self__, "google_analytics", google_analytics)
        if infor_nexus is not None:
            pulumi.set(__self__, "infor_nexus", infor_nexus)
        if marketo is not None:
            pulumi.set(__self__, "marketo", marketo)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if sapo_data is not None:
            pulumi.set(__self__, "sapo_data", sapo_data)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if singular is not None:
            pulumi.set(__self__, "singular", singular)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if trendmicro is not None:
            pulumi.set(__self__, "trendmicro", trendmicro)
        if veeva is not None:
            pulumi.set(__self__, "veeva", veeva)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)

    @property
    @pulumi.getter
    def amplitude(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs']]:
        """
        Information that is required for querying Amplitude. See Generic Source Properties for more details.
        """
        return pulumi.get(self, "amplitude")

    @amplitude.setter
    def amplitude(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs']]):
        pulumi.set(self, "amplitude", value)

    @property
    @pulumi.getter(name="customConnector")
    def custom_connector(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs']]:
        """
        Properties that are applied when the custom connector is being used as a source. See Custom Connector Source Properties.
        """
        return pulumi.get(self, "custom_connector")

    @custom_connector.setter
    def custom_connector(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs']]):
        pulumi.set(self, "custom_connector", value)

    @property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs']]:
        """
        Information that is required for querying Datadog. See Generic Source Properties for more details.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs']]):
        pulumi.set(self, "datadog", value)

    @property
    @pulumi.getter
    def dynatrace(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs']]:
        """
        Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "dynatrace")

    @dynatrace.setter
    def dynatrace(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs']]):
        pulumi.set(self, "dynatrace", value)

    @property
    @pulumi.getter(name="googleAnalytics")
    def google_analytics(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs']]:
        """
        Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
        """
        return pulumi.get(self, "google_analytics")

    @google_analytics.setter
    def google_analytics(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs']]):
        pulumi.set(self, "google_analytics", value)

    @property
    @pulumi.getter(name="inforNexus")
    def infor_nexus(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs']]:
        """
        Information that is required for querying Infor Nexus. See Generic Source Properties for more details.
        """
        return pulumi.get(self, "infor_nexus")

    @infor_nexus.setter
    def infor_nexus(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs']]):
        pulumi.set(self, "infor_nexus", value)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs']]:
        """
        Information that is required for querying Marketo. See Generic Source Properties for more details.
        """
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesS3Args']]:
        """
        Information that is required for querying Amazon S3. See S3 Source Properties for more details.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesS3Args']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs']]:
        """
        Information that is required for querying Salesforce. See Salesforce Source Properties for more details.
        """
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="sapoData")
    def sapo_data(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs']]:
        """
        Information that is required for querying SAPOData as a flow source. See SAPO Source Properties for more details.
        """
        return pulumi.get(self, "sapo_data")

    @sapo_data.setter
    def sapo_data(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs']]):
        pulumi.set(self, "sapo_data", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs']]:
        """
        Information that is required for querying ServiceNow. See Generic Source Properties for more details.
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def singular(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs']]:
        """
        Information that is required for querying Singular. See Generic Source Properties for more details.
        """
        return pulumi.get(self, "singular")

    @singular.setter
    def singular(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs']]):
        pulumi.set(self, "singular", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs']]:
        """
        Information that is required for querying Slack. See Generic Source Properties for more details.
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def trendmicro(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs']]:
        """
        Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "trendmicro")

    @trendmicro.setter
    def trendmicro(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs']]):
        pulumi.set(self, "trendmicro", value)

    @property
    @pulumi.getter
    def veeva(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs']]:
        """
        Information that is required for querying Veeva. See Veeva Source Properties for more details.
        """
        return pulumi.get(self, "veeva")

    @veeva.setter
    def veeva(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs']]):
        pulumi.set(self, "veeva", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs']]:
        """
        Information that is required for querying Zendesk. See Generic Source Properties for more details.
        """
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesAmplitudeArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesCustomConnectorArgs:
    def __init__(__self__, *,
                 entity_name: pulumi.Input[str],
                 custom_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] entity_name: Entity specified in the custom connector as a destination in the flow.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] custom_properties: Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
        """
        pulumi.set(__self__, "entity_name", entity_name)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)

    @property
    @pulumi.getter(name="entityName")
    def entity_name(self) -> pulumi.Input[str]:
        """
        Entity specified in the custom connector as a destination in the flow.
        """
        return pulumi.get(self, "entity_name")

    @entity_name.setter
    def entity_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_name", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_properties", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesDatadogArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesDynatraceArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesGoogleAnalyticsArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesInforNexusArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesMarketoArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesS3Args:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 s3_input_format_config: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs']] = None):
        """
        :param pulumi.Input[str] bucket_name: Name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Amazon S3 bucket prefix.
        :param pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs'] s3_input_format_config: When you use Amazon S3 as the source, the configuration format that you provide the flow input data. See S3 Input Format Config for details.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if s3_input_format_config is not None:
            pulumi.set(__self__, "s3_input_format_config", s3_input_format_config)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        Name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="s3InputFormatConfig")
    def s3_input_format_config(self) -> Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs']]:
        """
        When you use Amazon S3 as the source, the configuration format that you provide the flow input data. See S3 Input Format Config for details.
        """
        return pulumi.get(self, "s3_input_format_config")

    @s3_input_format_config.setter
    def s3_input_format_config(self, value: Optional[pulumi.Input['FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs']]):
        pulumi.set(self, "s3_input_format_config", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesS3S3InputFormatConfigArgs:
    def __init__(__self__, *,
                 s3_input_file_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_input_file_type: File type that Amazon AppFlow gets from your Amazon S3 bucket. Valid values are `CSV` and `JSON`.
        """
        if s3_input_file_type is not None:
            pulumi.set(__self__, "s3_input_file_type", s3_input_file_type)

    @property
    @pulumi.getter(name="s3InputFileType")
    def s3_input_file_type(self) -> Optional[pulumi.Input[str]]:
        """
        File type that Amazon AppFlow gets from your Amazon S3 bucket. Valid values are `CSV` and `JSON`.
        """
        return pulumi.get(self, "s3_input_file_type")

    @s3_input_file_type.setter
    def s3_input_file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_input_file_type", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesSalesforceArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 enable_dynamic_field_update: Optional[pulumi.Input[bool]] = None,
                 include_deleted_records: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        :param pulumi.Input[bool] enable_dynamic_field_update: Flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
        :param pulumi.Input[bool] include_deleted_records: Whether Amazon AppFlow includes deleted files in the flow run.
        """
        pulumi.set(__self__, "object", object)
        if enable_dynamic_field_update is not None:
            pulumi.set(__self__, "enable_dynamic_field_update", enable_dynamic_field_update)
        if include_deleted_records is not None:
            pulumi.set(__self__, "include_deleted_records", include_deleted_records)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="enableDynamicFieldUpdate")
    def enable_dynamic_field_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
        """
        return pulumi.get(self, "enable_dynamic_field_update")

    @enable_dynamic_field_update.setter
    def enable_dynamic_field_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_dynamic_field_update", value)

    @property
    @pulumi.getter(name="includeDeletedRecords")
    def include_deleted_records(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Amazon AppFlow includes deleted files in the flow run.
        """
        return pulumi.get(self, "include_deleted_records")

    @include_deleted_records.setter
    def include_deleted_records(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_deleted_records", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesSapoDataArgs:
    def __init__(__self__, *,
                 object_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object_path: Object path specified in the SAPOData flow destination.
        """
        pulumi.set(__self__, "object_path", object_path)

    @property
    @pulumi.getter(name="objectPath")
    def object_path(self) -> pulumi.Input[str]:
        """
        Object path specified in the SAPOData flow destination.
        """
        return pulumi.get(self, "object_path")

    @object_path.setter
    def object_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_path", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesServiceNowArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesSingularArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesSlackArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesTrendmicroArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesVeevaArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 document_type: Optional[pulumi.Input[str]] = None,
                 include_all_versions: Optional[pulumi.Input[bool]] = None,
                 include_renditions: Optional[pulumi.Input[bool]] = None,
                 include_source_files: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        :param pulumi.Input[str] document_type: Document type specified in the Veeva document extract flow.
        :param pulumi.Input[bool] include_all_versions: Boolean value to include All Versions of files in Veeva document extract flow.
        :param pulumi.Input[bool] include_renditions: Boolean value to include file renditions in Veeva document extract flow.
        :param pulumi.Input[bool] include_source_files: Boolean value to include source files in Veeva document extract flow.
        """
        pulumi.set(__self__, "object", object)
        if document_type is not None:
            pulumi.set(__self__, "document_type", document_type)
        if include_all_versions is not None:
            pulumi.set(__self__, "include_all_versions", include_all_versions)
        if include_renditions is not None:
            pulumi.set(__self__, "include_renditions", include_renditions)
        if include_source_files is not None:
            pulumi.set(__self__, "include_source_files", include_source_files)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="documentType")
    def document_type(self) -> Optional[pulumi.Input[str]]:
        """
        Document type specified in the Veeva document extract flow.
        """
        return pulumi.get(self, "document_type")

    @document_type.setter
    def document_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "document_type", value)

    @property
    @pulumi.getter(name="includeAllVersions")
    def include_all_versions(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to include All Versions of files in Veeva document extract flow.
        """
        return pulumi.get(self, "include_all_versions")

    @include_all_versions.setter
    def include_all_versions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_all_versions", value)

    @property
    @pulumi.getter(name="includeRenditions")
    def include_renditions(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to include file renditions in Veeva document extract flow.
        """
        return pulumi.get(self, "include_renditions")

    @include_renditions.setter
    def include_renditions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_renditions", value)

    @property
    @pulumi.getter(name="includeSourceFiles")
    def include_source_files(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to include source files in Veeva document extract flow.
        """
        return pulumi.get(self, "include_source_files")

    @include_source_files.setter
    def include_source_files(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_source_files", value)


@pulumi.input_type
class FlowSourceFlowConfigSourceConnectorPropertiesZendeskArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: Object specified in the flow destination.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        Object specified in the flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowTaskArgs:
    def __init__(__self__, *,
                 source_fields: pulumi.Input[Sequence[pulumi.Input[str]]],
                 task_type: pulumi.Input[str],
                 connector_operators: Optional[pulumi.Input[Sequence[pulumi.Input['FlowTaskConnectorOperatorArgs']]]] = None,
                 destination_field: Optional[pulumi.Input[str]] = None,
                 task_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_fields: Source fields to which a particular task is applied.
        :param pulumi.Input[str] task_type: Particular task implementation that Amazon AppFlow performs. Valid values are `Arithmetic`, `Filter`, `Map`, `Map_all`, `Mask`, `Merge`, `Passthrough`, `Truncate`, and `Validate`.
        :param pulumi.Input[Sequence[pulumi.Input['FlowTaskConnectorOperatorArgs']]] connector_operators: Operation to be performed on the provided source fields. See Connector Operator for details.
        :param pulumi.Input[str] destination_field: Field in a destination connector, or a field value against which Amazon AppFlow validates a source field.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] task_properties: Map used to store task-related information. The execution service looks for particular information based on the `TaskType`. Valid keys are `VALUE`, `VALUES`, `DATA_TYPE`, `UPPER_BOUND`, `LOWER_BOUND`, `SOURCE_DATA_TYPE`, `DESTINATION_DATA_TYPE`, `VALIDATION_ACTION`, `MASK_VALUE`, `MASK_LENGTH`, `TRUNCATE_LENGTH`, `MATH_OPERATION_FIELDS_ORDER`, `CONCAT_FORMAT`, `SUBFIELD_CATEGORY_MAP`, and `EXCLUDE_SOURCE_FIELDS_LIST`.
        """
        pulumi.set(__self__, "source_fields", source_fields)
        pulumi.set(__self__, "task_type", task_type)
        if connector_operators is not None:
            pulumi.set(__self__, "connector_operators", connector_operators)
        if destination_field is not None:
            pulumi.set(__self__, "destination_field", destination_field)
        if task_properties is not None:
            pulumi.set(__self__, "task_properties", task_properties)

    @property
    @pulumi.getter(name="sourceFields")
    def source_fields(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Source fields to which a particular task is applied.
        """
        return pulumi.get(self, "source_fields")

    @source_fields.setter
    def source_fields(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source_fields", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        Particular task implementation that Amazon AppFlow performs. Valid values are `Arithmetic`, `Filter`, `Map`, `Map_all`, `Mask`, `Merge`, `Passthrough`, `Truncate`, and `Validate`.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="connectorOperators")
    def connector_operators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowTaskConnectorOperatorArgs']]]]:
        """
        Operation to be performed on the provided source fields. See Connector Operator for details.
        """
        return pulumi.get(self, "connector_operators")

    @connector_operators.setter
    def connector_operators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowTaskConnectorOperatorArgs']]]]):
        pulumi.set(self, "connector_operators", value)

    @property
    @pulumi.getter(name="destinationField")
    def destination_field(self) -> Optional[pulumi.Input[str]]:
        """
        Field in a destination connector, or a field value against which Amazon AppFlow validates a source field.
        """
        return pulumi.get(self, "destination_field")

    @destination_field.setter
    def destination_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_field", value)

    @property
    @pulumi.getter(name="taskProperties")
    def task_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map used to store task-related information. The execution service looks for particular information based on the `TaskType`. Valid keys are `VALUE`, `VALUES`, `DATA_TYPE`, `UPPER_BOUND`, `LOWER_BOUND`, `SOURCE_DATA_TYPE`, `DESTINATION_DATA_TYPE`, `VALIDATION_ACTION`, `MASK_VALUE`, `MASK_LENGTH`, `TRUNCATE_LENGTH`, `MATH_OPERATION_FIELDS_ORDER`, `CONCAT_FORMAT`, `SUBFIELD_CATEGORY_MAP`, and `EXCLUDE_SOURCE_FIELDS_LIST`.
        """
        return pulumi.get(self, "task_properties")

    @task_properties.setter
    def task_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "task_properties", value)


@pulumi.input_type
class FlowTaskConnectorOperatorArgs:
    def __init__(__self__, *,
                 amplitude: Optional[pulumi.Input[str]] = None,
                 custom_connector: Optional[pulumi.Input[str]] = None,
                 datadog: Optional[pulumi.Input[str]] = None,
                 dynatrace: Optional[pulumi.Input[str]] = None,
                 google_analytics: Optional[pulumi.Input[str]] = None,
                 infor_nexus: Optional[pulumi.Input[str]] = None,
                 marketo: Optional[pulumi.Input[str]] = None,
                 s3: Optional[pulumi.Input[str]] = None,
                 salesforce: Optional[pulumi.Input[str]] = None,
                 sapo_data: Optional[pulumi.Input[str]] = None,
                 service_now: Optional[pulumi.Input[str]] = None,
                 singular: Optional[pulumi.Input[str]] = None,
                 slack: Optional[pulumi.Input[str]] = None,
                 trendmicro: Optional[pulumi.Input[str]] = None,
                 veeva: Optional[pulumi.Input[str]] = None,
                 zendesk: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] amplitude: Operation to be performed on the provided Amplitude source fields. The only valid value is `BETWEEN`.
        :param pulumi.Input[str] custom_connector: Operators supported by the custom connector. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] datadog: Operation to be performed on the provided Datadog source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] dynatrace: Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] google_analytics: Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
        :param pulumi.Input[str] infor_nexus: Operation to be performed on the provided Infor Nexus source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] marketo: Operation to be performed on the provided Marketo source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] s3: Operation to be performed on the provided Amazon S3 source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] salesforce: Operation to be performed on the provided Salesforce source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] sapo_data: Operation to be performed on the provided SAPOData source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] service_now: Operation to be performed on the provided ServiceNow source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] singular: Operation to be performed on the provided Singular source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] slack: Operation to be performed on the provided Slack source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] trendmicro: Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] veeva: Operation to be performed on the provided Veeva source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        :param pulumi.Input[str] zendesk: Operation to be performed on the provided Zendesk source fields. Valid values are `PROJECTION`, `GREATER_THAN`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        if amplitude is not None:
            pulumi.set(__self__, "amplitude", amplitude)
        if custom_connector is not None:
            pulumi.set(__self__, "custom_connector", custom_connector)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if dynatrace is not None:
            pulumi.set(__self__, "dynatrace", dynatrace)
        if google_analytics is not None:
            pulumi.set(__self__, "google_analytics", google_analytics)
        if infor_nexus is not None:
            pulumi.set(__self__, "infor_nexus", infor_nexus)
        if marketo is not None:
            pulumi.set(__self__, "marketo", marketo)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if sapo_data is not None:
            pulumi.set(__self__, "sapo_data", sapo_data)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if singular is not None:
            pulumi.set(__self__, "singular", singular)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if trendmicro is not None:
            pulumi.set(__self__, "trendmicro", trendmicro)
        if veeva is not None:
            pulumi.set(__self__, "veeva", veeva)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)

    @property
    @pulumi.getter
    def amplitude(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Amplitude source fields. The only valid value is `BETWEEN`.
        """
        return pulumi.get(self, "amplitude")

    @amplitude.setter
    def amplitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amplitude", value)

    @property
    @pulumi.getter(name="customConnector")
    def custom_connector(self) -> Optional[pulumi.Input[str]]:
        """
        Operators supported by the custom connector. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "custom_connector")

    @custom_connector.setter
    def custom_connector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_connector", value)

    @property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Datadog source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datadog", value)

    @property
    @pulumi.getter
    def dynatrace(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Dynatrace source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "dynatrace")

    @dynatrace.setter
    def dynatrace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynatrace", value)

    @property
    @pulumi.getter(name="googleAnalytics")
    def google_analytics(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Google Analytics source fields. Valid values are `PROJECTION` and `BETWEEN`.
        """
        return pulumi.get(self, "google_analytics")

    @google_analytics.setter
    def google_analytics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "google_analytics", value)

    @property
    @pulumi.getter(name="inforNexus")
    def infor_nexus(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Infor Nexus source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "infor_nexus")

    @infor_nexus.setter
    def infor_nexus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "infor_nexus", value)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Marketo source fields. Valid values are `PROJECTION`, `BETWEEN`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Amazon S3 source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Salesforce source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="sapoData")
    def sapo_data(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided SAPOData source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "sapo_data")

    @sapo_data.setter
    def sapo_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sapo_data", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided ServiceNow source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def singular(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Singular source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "singular")

    @singular.setter
    def singular(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "singular", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Slack source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def trendmicro(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Trend Micro source fields. Valid values are `PROJECTION`, `EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "trendmicro")

    @trendmicro.setter
    def trendmicro(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trendmicro", value)

    @property
    @pulumi.getter
    def veeva(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Veeva source fields. Valid values are `PROJECTION`, `LESS_THAN`, `GREATER_THAN`, `CONTAINS`, `BETWEEN`, `LESS_THAN_OR_EQUAL_TO`, `GREATER_THAN_OR_EQUAL_TO`, `EQUAL_TO`, `NOT_EQUAL_TO`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "veeva")

    @veeva.setter
    def veeva(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "veeva", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input[str]]:
        """
        Operation to be performed on the provided Zendesk source fields. Valid values are `PROJECTION`, `GREATER_THAN`, `ADDITION`, `MULTIPLICATION`, `DIVISION`, `SUBTRACTION`, `MASK_ALL`, `MASK_FIRST_N`, `MASK_LAST_N`, `VALIDATE_NON_NULL`, `VALIDATE_NON_ZERO`, `VALIDATE_NON_NEGATIVE`, `VALIDATE_NUMERIC`, and `NO_OP`.
        """
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class FlowTriggerConfigArgs:
    def __init__(__self__, *,
                 trigger_type: pulumi.Input[str],
                 trigger_properties: Optional[pulumi.Input['FlowTriggerConfigTriggerPropertiesArgs']] = None):
        """
        :param pulumi.Input[str] trigger_type: Type of flow trigger. Valid values are `Scheduled`, `Event`, and `OnDemand`.
        :param pulumi.Input['FlowTriggerConfigTriggerPropertiesArgs'] trigger_properties: Configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the `Scheduled` trigger type. See Scheduled Trigger Properties for details.
        """
        pulumi.set(__self__, "trigger_type", trigger_type)
        if trigger_properties is not None:
            pulumi.set(__self__, "trigger_properties", trigger_properties)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Input[str]:
        """
        Type of flow trigger. Valid values are `Scheduled`, `Event`, and `OnDemand`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter(name="triggerProperties")
    def trigger_properties(self) -> Optional[pulumi.Input['FlowTriggerConfigTriggerPropertiesArgs']]:
        """
        Configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the `Scheduled` trigger type. See Scheduled Trigger Properties for details.
        """
        return pulumi.get(self, "trigger_properties")

    @trigger_properties.setter
    def trigger_properties(self, value: Optional[pulumi.Input['FlowTriggerConfigTriggerPropertiesArgs']]):
        pulumi.set(self, "trigger_properties", value)


@pulumi.input_type
class FlowTriggerConfigTriggerPropertiesArgs:
    def __init__(__self__, *,
                 scheduled: Optional[pulumi.Input['FlowTriggerConfigTriggerPropertiesScheduledArgs']] = None):
        if scheduled is not None:
            pulumi.set(__self__, "scheduled", scheduled)

    @property
    @pulumi.getter
    def scheduled(self) -> Optional[pulumi.Input['FlowTriggerConfigTriggerPropertiesScheduledArgs']]:
        return pulumi.get(self, "scheduled")

    @scheduled.setter
    def scheduled(self, value: Optional[pulumi.Input['FlowTriggerConfigTriggerPropertiesScheduledArgs']]):
        pulumi.set(self, "scheduled", value)


@pulumi.input_type
class FlowTriggerConfigTriggerPropertiesScheduledArgs:
    def __init__(__self__, *,
                 schedule_expression: pulumi.Input[str],
                 data_pull_mode: Optional[pulumi.Input[str]] = None,
                 first_execution_from: Optional[pulumi.Input[str]] = None,
                 schedule_end_time: Optional[pulumi.Input[str]] = None,
                 schedule_offset: Optional[pulumi.Input[int]] = None,
                 schedule_start_time: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] schedule_expression: Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
        :param pulumi.Input[str] data_pull_mode: Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
        :param pulumi.Input[str] first_execution_from: Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
        :param pulumi.Input[str] schedule_end_time: Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
        :param pulumi.Input[int] schedule_offset: Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
        :param pulumi.Input[str] schedule_start_time: Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
        :param pulumi.Input[str] timezone: Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
        """
        pulumi.set(__self__, "schedule_expression", schedule_expression)
        if data_pull_mode is not None:
            pulumi.set(__self__, "data_pull_mode", data_pull_mode)
        if first_execution_from is not None:
            pulumi.set(__self__, "first_execution_from", first_execution_from)
        if schedule_end_time is not None:
            pulumi.set(__self__, "schedule_end_time", schedule_end_time)
        if schedule_offset is not None:
            pulumi.set(__self__, "schedule_offset", schedule_offset)
        if schedule_start_time is not None:
            pulumi.set(__self__, "schedule_start_time", schedule_start_time)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> pulumi.Input[str]:
        """
        Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
        """
        return pulumi.get(self, "schedule_expression")

    @schedule_expression.setter
    def schedule_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_expression", value)

    @property
    @pulumi.getter(name="dataPullMode")
    def data_pull_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
        """
        return pulumi.get(self, "data_pull_mode")

    @data_pull_mode.setter
    def data_pull_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_pull_mode", value)

    @property
    @pulumi.getter(name="firstExecutionFrom")
    def first_execution_from(self) -> Optional[pulumi.Input[str]]:
        """
        Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
        """
        return pulumi.get(self, "first_execution_from")

    @first_execution_from.setter
    def first_execution_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_execution_from", value)

    @property
    @pulumi.getter(name="scheduleEndTime")
    def schedule_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
        """
        return pulumi.get(self, "schedule_end_time")

    @schedule_end_time.setter
    def schedule_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_end_time", value)

    @property
    @pulumi.getter(name="scheduleOffset")
    def schedule_offset(self) -> Optional[pulumi.Input[int]]:
        """
        Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
        """
        return pulumi.get(self, "schedule_offset")

    @schedule_offset.setter
    def schedule_offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule_offset", value)

    @property
    @pulumi.getter(name="scheduleStartTime")
    def schedule_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
        """
        return pulumi.get(self, "schedule_start_time")

    @schedule_start_time.setter
    def schedule_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_start_time", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


