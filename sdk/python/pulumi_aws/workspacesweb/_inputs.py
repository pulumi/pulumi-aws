# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DataProtectionSettingsInlineRedactionConfigurationArgs',
    'DataProtectionSettingsInlineRedactionConfigurationArgsDict',
    'DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternArgs',
    'DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternArgsDict',
    'DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternCustomPatternArgs',
    'DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternCustomPatternArgsDict',
    'DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternRedactionPlaceHolderArgs',
    'DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternRedactionPlaceHolderArgsDict',
    'IpAccessSettingsIpRuleArgs',
    'IpAccessSettingsIpRuleArgsDict',
    'UserSettingsCookieSynchronizationConfigurationArgs',
    'UserSettingsCookieSynchronizationConfigurationArgsDict',
    'UserSettingsCookieSynchronizationConfigurationAllowlistArgs',
    'UserSettingsCookieSynchronizationConfigurationAllowlistArgsDict',
    'UserSettingsCookieSynchronizationConfigurationBlocklistArgs',
    'UserSettingsCookieSynchronizationConfigurationBlocklistArgsDict',
    'UserSettingsToolbarConfigurationArgs',
    'UserSettingsToolbarConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class DataProtectionSettingsInlineRedactionConfigurationArgsDict(TypedDict):
        global_confidence_level: NotRequired[pulumi.Input[_builtins.int]]
        """
        The global confidence level for the inline redaction configuration. This indicates the certainty of data type matches in the redaction process. Values range from 1 (low confidence) to 3 (high confidence).
        """
        global_enforced_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The global enforced URL configuration for the inline redaction configuration.
        """
        global_exempt_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The global exempt URL configuration for the inline redaction configuration.
        """
        inline_redaction_patterns: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternArgsDict']]]]
        """
        The inline redaction patterns to be enabled for the inline redaction configuration. Detailed below.
        """
elif False:
    DataProtectionSettingsInlineRedactionConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataProtectionSettingsInlineRedactionConfigurationArgs:
    def __init__(__self__, *,
                 global_confidence_level: Optional[pulumi.Input[_builtins.int]] = None,
                 global_enforced_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 global_exempt_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 inline_redaction_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] global_confidence_level: The global confidence level for the inline redaction configuration. This indicates the certainty of data type matches in the redaction process. Values range from 1 (low confidence) to 3 (high confidence).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] global_enforced_urls: The global enforced URL configuration for the inline redaction configuration.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] global_exempt_urls: The global exempt URL configuration for the inline redaction configuration.
        :param pulumi.Input[Sequence[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternArgs']]] inline_redaction_patterns: The inline redaction patterns to be enabled for the inline redaction configuration. Detailed below.
        """
        if global_confidence_level is not None:
            pulumi.set(__self__, "global_confidence_level", global_confidence_level)
        if global_enforced_urls is not None:
            pulumi.set(__self__, "global_enforced_urls", global_enforced_urls)
        if global_exempt_urls is not None:
            pulumi.set(__self__, "global_exempt_urls", global_exempt_urls)
        if inline_redaction_patterns is not None:
            pulumi.set(__self__, "inline_redaction_patterns", inline_redaction_patterns)

    @_builtins.property
    @pulumi.getter(name="globalConfidenceLevel")
    def global_confidence_level(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The global confidence level for the inline redaction configuration. This indicates the certainty of data type matches in the redaction process. Values range from 1 (low confidence) to 3 (high confidence).
        """
        return pulumi.get(self, "global_confidence_level")

    @global_confidence_level.setter
    def global_confidence_level(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "global_confidence_level", value)

    @_builtins.property
    @pulumi.getter(name="globalEnforcedUrls")
    def global_enforced_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The global enforced URL configuration for the inline redaction configuration.
        """
        return pulumi.get(self, "global_enforced_urls")

    @global_enforced_urls.setter
    def global_enforced_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "global_enforced_urls", value)

    @_builtins.property
    @pulumi.getter(name="globalExemptUrls")
    def global_exempt_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The global exempt URL configuration for the inline redaction configuration.
        """
        return pulumi.get(self, "global_exempt_urls")

    @global_exempt_urls.setter
    def global_exempt_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "global_exempt_urls", value)

    @_builtins.property
    @pulumi.getter(name="inlineRedactionPatterns")
    def inline_redaction_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternArgs']]]]:
        """
        The inline redaction patterns to be enabled for the inline redaction configuration. Detailed below.
        """
        return pulumi.get(self, "inline_redaction_patterns")

    @inline_redaction_patterns.setter
    def inline_redaction_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternArgs']]]]):
        pulumi.set(self, "inline_redaction_patterns", value)


if not MYPY:
    class DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternArgsDict(TypedDict):
        built_in_pattern_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The built-in pattern from the list of preconfigured patterns. Either a `custom_pattern` or `built_in_pattern_id` is required.
        """
        confidence_level: NotRequired[pulumi.Input[_builtins.int]]
        """
        The confidence level for inline redaction pattern. This indicates the certainty of data type matches in the redaction process. Values range from 1 (low confidence) to 3 (high confidence).
        """
        custom_pattern: NotRequired[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternCustomPatternArgsDict']]
        """
        The configuration for a custom pattern. Either a `custom_pattern` or `built_in_pattern_id` is required. Detailed below.
        """
        enforced_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The enforced URL configuration for the inline redaction pattern.
        """
        exempt_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The exempt URL configuration for the inline redaction pattern.
        """
        redaction_place_holders: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternRedactionPlaceHolderArgsDict']]]]
        """
        The redaction placeholder that will replace the redacted text in session. Detailed below.
        """
elif False:
    DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternArgs:
    def __init__(__self__, *,
                 built_in_pattern_id: Optional[pulumi.Input[_builtins.str]] = None,
                 confidence_level: Optional[pulumi.Input[_builtins.int]] = None,
                 custom_pattern: Optional[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternCustomPatternArgs']] = None,
                 enforced_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 exempt_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 redaction_place_holders: Optional[pulumi.Input[Sequence[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternRedactionPlaceHolderArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] built_in_pattern_id: The built-in pattern from the list of preconfigured patterns. Either a `custom_pattern` or `built_in_pattern_id` is required.
        :param pulumi.Input[_builtins.int] confidence_level: The confidence level for inline redaction pattern. This indicates the certainty of data type matches in the redaction process. Values range from 1 (low confidence) to 3 (high confidence).
        :param pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternCustomPatternArgs'] custom_pattern: The configuration for a custom pattern. Either a `custom_pattern` or `built_in_pattern_id` is required. Detailed below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] enforced_urls: The enforced URL configuration for the inline redaction pattern.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] exempt_urls: The exempt URL configuration for the inline redaction pattern.
        :param pulumi.Input[Sequence[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternRedactionPlaceHolderArgs']]] redaction_place_holders: The redaction placeholder that will replace the redacted text in session. Detailed below.
        """
        if built_in_pattern_id is not None:
            pulumi.set(__self__, "built_in_pattern_id", built_in_pattern_id)
        if confidence_level is not None:
            pulumi.set(__self__, "confidence_level", confidence_level)
        if custom_pattern is not None:
            pulumi.set(__self__, "custom_pattern", custom_pattern)
        if enforced_urls is not None:
            pulumi.set(__self__, "enforced_urls", enforced_urls)
        if exempt_urls is not None:
            pulumi.set(__self__, "exempt_urls", exempt_urls)
        if redaction_place_holders is not None:
            pulumi.set(__self__, "redaction_place_holders", redaction_place_holders)

    @_builtins.property
    @pulumi.getter(name="builtInPatternId")
    def built_in_pattern_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The built-in pattern from the list of preconfigured patterns. Either a `custom_pattern` or `built_in_pattern_id` is required.
        """
        return pulumi.get(self, "built_in_pattern_id")

    @built_in_pattern_id.setter
    def built_in_pattern_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "built_in_pattern_id", value)

    @_builtins.property
    @pulumi.getter(name="confidenceLevel")
    def confidence_level(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The confidence level for inline redaction pattern. This indicates the certainty of data type matches in the redaction process. Values range from 1 (low confidence) to 3 (high confidence).
        """
        return pulumi.get(self, "confidence_level")

    @confidence_level.setter
    def confidence_level(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "confidence_level", value)

    @_builtins.property
    @pulumi.getter(name="customPattern")
    def custom_pattern(self) -> Optional[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternCustomPatternArgs']]:
        """
        The configuration for a custom pattern. Either a `custom_pattern` or `built_in_pattern_id` is required. Detailed below.
        """
        return pulumi.get(self, "custom_pattern")

    @custom_pattern.setter
    def custom_pattern(self, value: Optional[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternCustomPatternArgs']]):
        pulumi.set(self, "custom_pattern", value)

    @_builtins.property
    @pulumi.getter(name="enforcedUrls")
    def enforced_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The enforced URL configuration for the inline redaction pattern.
        """
        return pulumi.get(self, "enforced_urls")

    @enforced_urls.setter
    def enforced_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "enforced_urls", value)

    @_builtins.property
    @pulumi.getter(name="exemptUrls")
    def exempt_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The exempt URL configuration for the inline redaction pattern.
        """
        return pulumi.get(self, "exempt_urls")

    @exempt_urls.setter
    def exempt_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "exempt_urls", value)

    @_builtins.property
    @pulumi.getter(name="redactionPlaceHolders")
    def redaction_place_holders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternRedactionPlaceHolderArgs']]]]:
        """
        The redaction placeholder that will replace the redacted text in session. Detailed below.
        """
        return pulumi.get(self, "redaction_place_holders")

    @redaction_place_holders.setter
    def redaction_place_holders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternRedactionPlaceHolderArgs']]]]):
        pulumi.set(self, "redaction_place_holders", value)


if not MYPY:
    class DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternCustomPatternArgsDict(TypedDict):
        pattern_name: pulumi.Input[_builtins.str]
        """
        The pattern name for the custom pattern.
        """
        pattern_regex: pulumi.Input[_builtins.str]
        """
        The pattern regex for the customer pattern. The format must follow JavaScript regex format.
        """
        keyword_regex: NotRequired[pulumi.Input[_builtins.str]]
        """
        The keyword regex for the customer pattern.
        """
        pattern_description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The pattern description for the customer pattern.
        """
elif False:
    DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternCustomPatternArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternCustomPatternArgs:
    def __init__(__self__, *,
                 pattern_name: pulumi.Input[_builtins.str],
                 pattern_regex: pulumi.Input[_builtins.str],
                 keyword_regex: Optional[pulumi.Input[_builtins.str]] = None,
                 pattern_description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] pattern_name: The pattern name for the custom pattern.
        :param pulumi.Input[_builtins.str] pattern_regex: The pattern regex for the customer pattern. The format must follow JavaScript regex format.
        :param pulumi.Input[_builtins.str] keyword_regex: The keyword regex for the customer pattern.
        :param pulumi.Input[_builtins.str] pattern_description: The pattern description for the customer pattern.
        """
        pulumi.set(__self__, "pattern_name", pattern_name)
        pulumi.set(__self__, "pattern_regex", pattern_regex)
        if keyword_regex is not None:
            pulumi.set(__self__, "keyword_regex", keyword_regex)
        if pattern_description is not None:
            pulumi.set(__self__, "pattern_description", pattern_description)

    @_builtins.property
    @pulumi.getter(name="patternName")
    def pattern_name(self) -> pulumi.Input[_builtins.str]:
        """
        The pattern name for the custom pattern.
        """
        return pulumi.get(self, "pattern_name")

    @pattern_name.setter
    def pattern_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pattern_name", value)

    @_builtins.property
    @pulumi.getter(name="patternRegex")
    def pattern_regex(self) -> pulumi.Input[_builtins.str]:
        """
        The pattern regex for the customer pattern. The format must follow JavaScript regex format.
        """
        return pulumi.get(self, "pattern_regex")

    @pattern_regex.setter
    def pattern_regex(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pattern_regex", value)

    @_builtins.property
    @pulumi.getter(name="keywordRegex")
    def keyword_regex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The keyword regex for the customer pattern.
        """
        return pulumi.get(self, "keyword_regex")

    @keyword_regex.setter
    def keyword_regex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keyword_regex", value)

    @_builtins.property
    @pulumi.getter(name="patternDescription")
    def pattern_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The pattern description for the customer pattern.
        """
        return pulumi.get(self, "pattern_description")

    @pattern_description.setter
    def pattern_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pattern_description", value)


if not MYPY:
    class DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternRedactionPlaceHolderArgsDict(TypedDict):
        redaction_place_holder_type: pulumi.Input[_builtins.str]
        """
        The redaction placeholder type that will replace the redacted text in session. Currently, only `CustomText` is supported.
        """
        redaction_place_holder_text: NotRequired[pulumi.Input[_builtins.str]]
        """
        The redaction placeholder text that will replace the redacted text in session for the custom text redaction placeholder type.
        """
elif False:
    DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternRedactionPlaceHolderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataProtectionSettingsInlineRedactionConfigurationInlineRedactionPatternRedactionPlaceHolderArgs:
    def __init__(__self__, *,
                 redaction_place_holder_type: pulumi.Input[_builtins.str],
                 redaction_place_holder_text: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] redaction_place_holder_type: The redaction placeholder type that will replace the redacted text in session. Currently, only `CustomText` is supported.
        :param pulumi.Input[_builtins.str] redaction_place_holder_text: The redaction placeholder text that will replace the redacted text in session for the custom text redaction placeholder type.
        """
        pulumi.set(__self__, "redaction_place_holder_type", redaction_place_holder_type)
        if redaction_place_holder_text is not None:
            pulumi.set(__self__, "redaction_place_holder_text", redaction_place_holder_text)

    @_builtins.property
    @pulumi.getter(name="redactionPlaceHolderType")
    def redaction_place_holder_type(self) -> pulumi.Input[_builtins.str]:
        """
        The redaction placeholder type that will replace the redacted text in session. Currently, only `CustomText` is supported.
        """
        return pulumi.get(self, "redaction_place_holder_type")

    @redaction_place_holder_type.setter
    def redaction_place_holder_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "redaction_place_holder_type", value)

    @_builtins.property
    @pulumi.getter(name="redactionPlaceHolderText")
    def redaction_place_holder_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The redaction placeholder text that will replace the redacted text in session for the custom text redaction placeholder type.
        """
        return pulumi.get(self, "redaction_place_holder_text")

    @redaction_place_holder_text.setter
    def redaction_place_holder_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redaction_place_holder_text", value)


if not MYPY:
    class IpAccessSettingsIpRuleArgsDict(TypedDict):
        ip_range: pulumi.Input[_builtins.str]
        """
        The IP range of the IP rule.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        The description of the IP access settings.
        """
elif False:
    IpAccessSettingsIpRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpAccessSettingsIpRuleArgs:
    def __init__(__self__, *,
                 ip_range: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_range: The IP range of the IP rule.
        :param pulumi.Input[_builtins.str] description: The description of the IP access settings.
        """
        pulumi.set(__self__, "ip_range", ip_range)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> pulumi.Input[_builtins.str]:
        """
        The IP range of the IP rule.
        """
        return pulumi.get(self, "ip_range")

    @ip_range.setter
    def ip_range(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ip_range", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the IP access settings.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class UserSettingsCookieSynchronizationConfigurationArgsDict(TypedDict):
        allowlists: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationAllowlistArgsDict']]]]
        """
        List of cookie specifications that are allowed to be synchronized to the remote browser.
        """
        blocklists: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationBlocklistArgsDict']]]]
        """
        List of cookie specifications that are blocked from being synchronized to the remote browser.
        """
elif False:
    UserSettingsCookieSynchronizationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSettingsCookieSynchronizationConfigurationArgs:
    def __init__(__self__, *,
                 allowlists: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationAllowlistArgs']]]] = None,
                 blocklists: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationBlocklistArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationAllowlistArgs']]] allowlists: List of cookie specifications that are allowed to be synchronized to the remote browser.
        :param pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationBlocklistArgs']]] blocklists: List of cookie specifications that are blocked from being synchronized to the remote browser.
        """
        if allowlists is not None:
            pulumi.set(__self__, "allowlists", allowlists)
        if blocklists is not None:
            pulumi.set(__self__, "blocklists", blocklists)

    @_builtins.property
    @pulumi.getter
    def allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationAllowlistArgs']]]]:
        """
        List of cookie specifications that are allowed to be synchronized to the remote browser.
        """
        return pulumi.get(self, "allowlists")

    @allowlists.setter
    def allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationAllowlistArgs']]]]):
        pulumi.set(self, "allowlists", value)

    @_builtins.property
    @pulumi.getter
    def blocklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationBlocklistArgs']]]]:
        """
        List of cookie specifications that are blocked from being synchronized to the remote browser.
        """
        return pulumi.get(self, "blocklists")

    @blocklists.setter
    def blocklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationBlocklistArgs']]]]):
        pulumi.set(self, "blocklists", value)


if not MYPY:
    class UserSettingsCookieSynchronizationConfigurationAllowlistArgsDict(TypedDict):
        domain: pulumi.Input[_builtins.str]
        """
        Domain of the cookie.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the cookie.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Path of the cookie.
        """
elif False:
    UserSettingsCookieSynchronizationConfigurationAllowlistArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSettingsCookieSynchronizationConfigurationAllowlistArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] domain: Domain of the cookie.
        :param pulumi.Input[_builtins.str] name: Name of the cookie.
        :param pulumi.Input[_builtins.str] path: Path of the cookie.
        """
        pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        """
        Domain of the cookie.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cookie.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of the cookie.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class UserSettingsCookieSynchronizationConfigurationBlocklistArgsDict(TypedDict):
        domain: pulumi.Input[_builtins.str]
        """
        Domain of the cookie.
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the cookie.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Path of the cookie.
        """
elif False:
    UserSettingsCookieSynchronizationConfigurationBlocklistArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSettingsCookieSynchronizationConfigurationBlocklistArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] domain: Domain of the cookie.
        :param pulumi.Input[_builtins.str] name: Name of the cookie.
        :param pulumi.Input[_builtins.str] path: Path of the cookie.
        """
        pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        """
        Domain of the cookie.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cookie.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of the cookie.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class UserSettingsToolbarConfigurationArgsDict(TypedDict):
        hidden_toolbar_items: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of toolbar items to be hidden.
        """
        max_display_resolution: NotRequired[pulumi.Input[_builtins.str]]
        """
        Maximum display resolution that is allowed for the session.
        """
        toolbar_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Type of toolbar displayed during the session.
        """
        visual_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Visual mode of the toolbar.
        """
elif False:
    UserSettingsToolbarConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSettingsToolbarConfigurationArgs:
    def __init__(__self__, *,
                 hidden_toolbar_items: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_display_resolution: Optional[pulumi.Input[_builtins.str]] = None,
                 toolbar_type: Optional[pulumi.Input[_builtins.str]] = None,
                 visual_mode: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hidden_toolbar_items: List of toolbar items to be hidden.
        :param pulumi.Input[_builtins.str] max_display_resolution: Maximum display resolution that is allowed for the session.
        :param pulumi.Input[_builtins.str] toolbar_type: Type of toolbar displayed during the session.
        :param pulumi.Input[_builtins.str] visual_mode: Visual mode of the toolbar.
        """
        if hidden_toolbar_items is not None:
            pulumi.set(__self__, "hidden_toolbar_items", hidden_toolbar_items)
        if max_display_resolution is not None:
            pulumi.set(__self__, "max_display_resolution", max_display_resolution)
        if toolbar_type is not None:
            pulumi.set(__self__, "toolbar_type", toolbar_type)
        if visual_mode is not None:
            pulumi.set(__self__, "visual_mode", visual_mode)

    @_builtins.property
    @pulumi.getter(name="hiddenToolbarItems")
    def hidden_toolbar_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of toolbar items to be hidden.
        """
        return pulumi.get(self, "hidden_toolbar_items")

    @hidden_toolbar_items.setter
    def hidden_toolbar_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "hidden_toolbar_items", value)

    @_builtins.property
    @pulumi.getter(name="maxDisplayResolution")
    def max_display_resolution(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Maximum display resolution that is allowed for the session.
        """
        return pulumi.get(self, "max_display_resolution")

    @max_display_resolution.setter
    def max_display_resolution(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max_display_resolution", value)

    @_builtins.property
    @pulumi.getter(name="toolbarType")
    def toolbar_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of toolbar displayed during the session.
        """
        return pulumi.get(self, "toolbar_type")

    @toolbar_type.setter
    def toolbar_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "toolbar_type", value)

    @_builtins.property
    @pulumi.getter(name="visualMode")
    def visual_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Visual mode of the toolbar.
        """
        return pulumi.get(self, "visual_mode")

    @visual_mode.setter
    def visual_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visual_mode", value)


