# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'UserSettingsCookieSynchronizationConfigurationArgs',
    'UserSettingsCookieSynchronizationConfigurationArgsDict',
    'UserSettingsCookieSynchronizationConfigurationAllowlistArgs',
    'UserSettingsCookieSynchronizationConfigurationAllowlistArgsDict',
    'UserSettingsCookieSynchronizationConfigurationBlocklistArgs',
    'UserSettingsCookieSynchronizationConfigurationBlocklistArgsDict',
    'UserSettingsToolbarConfigurationArgs',
    'UserSettingsToolbarConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class UserSettingsCookieSynchronizationConfigurationArgsDict(TypedDict):
        allowlists: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationAllowlistArgsDict']]]]
        """
        List of cookie specifications that are allowed to be synchronized to the remote browser.
        """
        blocklists: NotRequired[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationBlocklistArgsDict']]]]
        """
        List of cookie specifications that are blocked from being synchronized to the remote browser.
        """
elif False:
    UserSettingsCookieSynchronizationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSettingsCookieSynchronizationConfigurationArgs:
    def __init__(__self__, *,
                 allowlists: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationAllowlistArgs']]]] = None,
                 blocklists: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationBlocklistArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationAllowlistArgs']]] allowlists: List of cookie specifications that are allowed to be synchronized to the remote browser.
        :param pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationBlocklistArgs']]] blocklists: List of cookie specifications that are blocked from being synchronized to the remote browser.
        """
        if allowlists is not None:
            pulumi.set(__self__, "allowlists", allowlists)
        if blocklists is not None:
            pulumi.set(__self__, "blocklists", blocklists)

    @property
    @pulumi.getter
    def allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationAllowlistArgs']]]]:
        """
        List of cookie specifications that are allowed to be synchronized to the remote browser.
        """
        return pulumi.get(self, "allowlists")

    @allowlists.setter
    def allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationAllowlistArgs']]]]):
        pulumi.set(self, "allowlists", value)

    @property
    @pulumi.getter
    def blocklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationBlocklistArgs']]]]:
        """
        List of cookie specifications that are blocked from being synchronized to the remote browser.
        """
        return pulumi.get(self, "blocklists")

    @blocklists.setter
    def blocklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSettingsCookieSynchronizationConfigurationBlocklistArgs']]]]):
        pulumi.set(self, "blocklists", value)


if not MYPY:
    class UserSettingsCookieSynchronizationConfigurationAllowlistArgsDict(TypedDict):
        domain: pulumi.Input[builtins.str]
        """
        Domain of the cookie.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of the cookie.
        """
        path: NotRequired[pulumi.Input[builtins.str]]
        """
        Path of the cookie.
        """
elif False:
    UserSettingsCookieSynchronizationConfigurationAllowlistArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSettingsCookieSynchronizationConfigurationAllowlistArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[builtins.str],
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 path: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] domain: Domain of the cookie.
        :param pulumi.Input[builtins.str] name: Name of the cookie.
        :param pulumi.Input[builtins.str] path: Path of the cookie.
        """
        pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[builtins.str]:
        """
        Domain of the cookie.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the cookie.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Path of the cookie.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class UserSettingsCookieSynchronizationConfigurationBlocklistArgsDict(TypedDict):
        domain: pulumi.Input[builtins.str]
        """
        Domain of the cookie.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        Name of the cookie.
        """
        path: NotRequired[pulumi.Input[builtins.str]]
        """
        Path of the cookie.
        """
elif False:
    UserSettingsCookieSynchronizationConfigurationBlocklistArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSettingsCookieSynchronizationConfigurationBlocklistArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[builtins.str],
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 path: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] domain: Domain of the cookie.
        :param pulumi.Input[builtins.str] name: Name of the cookie.
        :param pulumi.Input[builtins.str] path: Path of the cookie.
        """
        pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[builtins.str]:
        """
        Domain of the cookie.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the cookie.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Path of the cookie.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "path", value)


if not MYPY:
    class UserSettingsToolbarConfigurationArgsDict(TypedDict):
        hidden_toolbar_items: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of toolbar items to be hidden.
        """
        max_display_resolution: NotRequired[pulumi.Input[builtins.str]]
        """
        Maximum display resolution that is allowed for the session.
        """
        toolbar_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Type of toolbar displayed during the session.
        """
        visual_mode: NotRequired[pulumi.Input[builtins.str]]
        """
        Visual mode of the toolbar.
        """
elif False:
    UserSettingsToolbarConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserSettingsToolbarConfigurationArgs:
    def __init__(__self__, *,
                 hidden_toolbar_items: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 max_display_resolution: Optional[pulumi.Input[builtins.str]] = None,
                 toolbar_type: Optional[pulumi.Input[builtins.str]] = None,
                 visual_mode: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] hidden_toolbar_items: List of toolbar items to be hidden.
        :param pulumi.Input[builtins.str] max_display_resolution: Maximum display resolution that is allowed for the session.
        :param pulumi.Input[builtins.str] toolbar_type: Type of toolbar displayed during the session.
        :param pulumi.Input[builtins.str] visual_mode: Visual mode of the toolbar.
        """
        if hidden_toolbar_items is not None:
            pulumi.set(__self__, "hidden_toolbar_items", hidden_toolbar_items)
        if max_display_resolution is not None:
            pulumi.set(__self__, "max_display_resolution", max_display_resolution)
        if toolbar_type is not None:
            pulumi.set(__self__, "toolbar_type", toolbar_type)
        if visual_mode is not None:
            pulumi.set(__self__, "visual_mode", visual_mode)

    @property
    @pulumi.getter(name="hiddenToolbarItems")
    def hidden_toolbar_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of toolbar items to be hidden.
        """
        return pulumi.get(self, "hidden_toolbar_items")

    @hidden_toolbar_items.setter
    def hidden_toolbar_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "hidden_toolbar_items", value)

    @property
    @pulumi.getter(name="maxDisplayResolution")
    def max_display_resolution(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Maximum display resolution that is allowed for the session.
        """
        return pulumi.get(self, "max_display_resolution")

    @max_display_resolution.setter
    def max_display_resolution(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_display_resolution", value)

    @property
    @pulumi.getter(name="toolbarType")
    def toolbar_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of toolbar displayed during the session.
        """
        return pulumi.get(self, "toolbar_type")

    @toolbar_type.setter
    def toolbar_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "toolbar_type", value)

    @property
    @pulumi.getter(name="visualMode")
    def visual_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Visual mode of the toolbar.
        """
        return pulumi.get(self, "visual_mode")

    @visual_mode.setter
    def visual_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "visual_mode", value)


