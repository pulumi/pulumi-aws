# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'UserSettingsCookieSynchronizationConfiguration',
    'UserSettingsCookieSynchronizationConfigurationAllowlist',
    'UserSettingsCookieSynchronizationConfigurationBlocklist',
    'UserSettingsToolbarConfiguration',
]

@pulumi.output_type
class UserSettingsCookieSynchronizationConfiguration(dict):
    def __init__(__self__, *,
                 allowlists: Optional[Sequence['outputs.UserSettingsCookieSynchronizationConfigurationAllowlist']] = None,
                 blocklists: Optional[Sequence['outputs.UserSettingsCookieSynchronizationConfigurationBlocklist']] = None):
        """
        :param Sequence['UserSettingsCookieSynchronizationConfigurationAllowlistArgs'] allowlists: List of cookie specifications that are allowed to be synchronized to the remote browser.
        :param Sequence['UserSettingsCookieSynchronizationConfigurationBlocklistArgs'] blocklists: List of cookie specifications that are blocked from being synchronized to the remote browser.
        """
        if allowlists is not None:
            pulumi.set(__self__, "allowlists", allowlists)
        if blocklists is not None:
            pulumi.set(__self__, "blocklists", blocklists)

    @property
    @pulumi.getter
    def allowlists(self) -> Optional[Sequence['outputs.UserSettingsCookieSynchronizationConfigurationAllowlist']]:
        """
        List of cookie specifications that are allowed to be synchronized to the remote browser.
        """
        return pulumi.get(self, "allowlists")

    @property
    @pulumi.getter
    def blocklists(self) -> Optional[Sequence['outputs.UserSettingsCookieSynchronizationConfigurationBlocklist']]:
        """
        List of cookie specifications that are blocked from being synchronized to the remote browser.
        """
        return pulumi.get(self, "blocklists")


@pulumi.output_type
class UserSettingsCookieSynchronizationConfigurationAllowlist(dict):
    def __init__(__self__, *,
                 domain: builtins.str,
                 name: Optional[builtins.str] = None,
                 path: Optional[builtins.str] = None):
        """
        :param builtins.str domain: Domain of the cookie.
        :param builtins.str name: Name of the cookie.
        :param builtins.str path: Path of the cookie.
        """
        pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def domain(self) -> builtins.str:
        """
        Domain of the cookie.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Name of the cookie.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        """
        Path of the cookie.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class UserSettingsCookieSynchronizationConfigurationBlocklist(dict):
    def __init__(__self__, *,
                 domain: builtins.str,
                 name: Optional[builtins.str] = None,
                 path: Optional[builtins.str] = None):
        """
        :param builtins.str domain: Domain of the cookie.
        :param builtins.str name: Name of the cookie.
        :param builtins.str path: Path of the cookie.
        """
        pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def domain(self) -> builtins.str:
        """
        Domain of the cookie.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Name of the cookie.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        """
        Path of the cookie.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class UserSettingsToolbarConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hiddenToolbarItems":
            suggest = "hidden_toolbar_items"
        elif key == "maxDisplayResolution":
            suggest = "max_display_resolution"
        elif key == "toolbarType":
            suggest = "toolbar_type"
        elif key == "visualMode":
            suggest = "visual_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserSettingsToolbarConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserSettingsToolbarConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserSettingsToolbarConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hidden_toolbar_items: Optional[Sequence[builtins.str]] = None,
                 max_display_resolution: Optional[builtins.str] = None,
                 toolbar_type: Optional[builtins.str] = None,
                 visual_mode: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] hidden_toolbar_items: List of toolbar items to be hidden.
        :param builtins.str max_display_resolution: Maximum display resolution that is allowed for the session.
        :param builtins.str toolbar_type: Type of toolbar displayed during the session.
        :param builtins.str visual_mode: Visual mode of the toolbar.
        """
        if hidden_toolbar_items is not None:
            pulumi.set(__self__, "hidden_toolbar_items", hidden_toolbar_items)
        if max_display_resolution is not None:
            pulumi.set(__self__, "max_display_resolution", max_display_resolution)
        if toolbar_type is not None:
            pulumi.set(__self__, "toolbar_type", toolbar_type)
        if visual_mode is not None:
            pulumi.set(__self__, "visual_mode", visual_mode)

    @property
    @pulumi.getter(name="hiddenToolbarItems")
    def hidden_toolbar_items(self) -> Optional[Sequence[builtins.str]]:
        """
        List of toolbar items to be hidden.
        """
        return pulumi.get(self, "hidden_toolbar_items")

    @property
    @pulumi.getter(name="maxDisplayResolution")
    def max_display_resolution(self) -> Optional[builtins.str]:
        """
        Maximum display resolution that is allowed for the session.
        """
        return pulumi.get(self, "max_display_resolution")

    @property
    @pulumi.getter(name="toolbarType")
    def toolbar_type(self) -> Optional[builtins.str]:
        """
        Type of toolbar displayed during the session.
        """
        return pulumi.get(self, "toolbar_type")

    @property
    @pulumi.getter(name="visualMode")
    def visual_mode(self) -> Optional[builtins.str]:
        """
        Visual mode of the toolbar.
        """
        return pulumi.get(self, "visual_mode")


