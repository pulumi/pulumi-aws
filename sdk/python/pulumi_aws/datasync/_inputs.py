# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'EfsLocationEc2ConfigArgs',
    'FsxOpenZfsFileSystemProtocolArgs',
    'FsxOpenZfsFileSystemProtocolNfsArgs',
    'FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs',
    'LocationAzureBlobSasConfigurationArgs',
    'LocationFsxOntapFileSystemProtocolArgs',
    'LocationFsxOntapFileSystemProtocolNfsArgs',
    'LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs',
    'LocationFsxOntapFileSystemProtocolSmbArgs',
    'LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs',
    'LocationHdfsNameNodeArgs',
    'LocationHdfsQopConfigurationArgs',
    'LocationSmbMountOptionsArgs',
    'NfsLocationMountOptionsArgs',
    'NfsLocationOnPremConfigArgs',
    'S3LocationS3ConfigArgs',
    'TaskExcludesArgs',
    'TaskIncludesArgs',
    'TaskOptionsArgs',
    'TaskScheduleArgs',
]

@pulumi.input_type
class EfsLocationEc2ConfigArgs:
    def __init__(__self__, *,
                 security_group_arns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnet_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_arns: List of Amazon Resource Names (ARNs) of the EC2 Security Groups that are associated with the EFS Mount Target.
        :param pulumi.Input[str] subnet_arn: Amazon Resource Name (ARN) of the EC2 Subnet that is associated with the EFS Mount Target.
        """
        EfsLocationEc2ConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            security_group_arns=security_group_arns,
            subnet_arn=subnet_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             security_group_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             subnet_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if security_group_arns is None and 'securityGroupArns' in kwargs:
            security_group_arns = kwargs['securityGroupArns']
        if security_group_arns is None:
            raise TypeError("Missing 'security_group_arns' argument")
        if subnet_arn is None and 'subnetArn' in kwargs:
            subnet_arn = kwargs['subnetArn']
        if subnet_arn is None:
            raise TypeError("Missing 'subnet_arn' argument")

        _setter("security_group_arns", security_group_arns)
        _setter("subnet_arn", subnet_arn)

    @property
    @pulumi.getter(name="securityGroupArns")
    def security_group_arns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of Amazon Resource Names (ARNs) of the EC2 Security Groups that are associated with the EFS Mount Target.
        """
        return pulumi.get(self, "security_group_arns")

    @security_group_arns.setter
    def security_group_arns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_arns", value)

    @property
    @pulumi.getter(name="subnetArn")
    def subnet_arn(self) -> pulumi.Input[str]:
        """
        Amazon Resource Name (ARN) of the EC2 Subnet that is associated with the EFS Mount Target.
        """
        return pulumi.get(self, "subnet_arn")

    @subnet_arn.setter
    def subnet_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_arn", value)


@pulumi.input_type
class FsxOpenZfsFileSystemProtocolArgs:
    def __init__(__self__, *,
                 nfs: pulumi.Input['FsxOpenZfsFileSystemProtocolNfsArgs']):
        """
        :param pulumi.Input['FsxOpenZfsFileSystemProtocolNfsArgs'] nfs: Represents the Network File System (NFS) protocol that DataSync uses to access your FSx for OpenZFS file system. See below.
        """
        FsxOpenZfsFileSystemProtocolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            nfs=nfs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             nfs: Optional[pulumi.Input['FsxOpenZfsFileSystemProtocolNfsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if nfs is None:
            raise TypeError("Missing 'nfs' argument")

        _setter("nfs", nfs)

    @property
    @pulumi.getter
    def nfs(self) -> pulumi.Input['FsxOpenZfsFileSystemProtocolNfsArgs']:
        """
        Represents the Network File System (NFS) protocol that DataSync uses to access your FSx for OpenZFS file system. See below.
        """
        return pulumi.get(self, "nfs")

    @nfs.setter
    def nfs(self, value: pulumi.Input['FsxOpenZfsFileSystemProtocolNfsArgs']):
        pulumi.set(self, "nfs", value)


@pulumi.input_type
class FsxOpenZfsFileSystemProtocolNfsArgs:
    def __init__(__self__, *,
                 mount_options: pulumi.Input['FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs']):
        """
        :param pulumi.Input['FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs'] mount_options: Represents the mount options that are available for DataSync to access an NFS location. See below.
        """
        FsxOpenZfsFileSystemProtocolNfsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_options: Optional[pulumi.Input['FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if mount_options is None and 'mountOptions' in kwargs:
            mount_options = kwargs['mountOptions']
        if mount_options is None:
            raise TypeError("Missing 'mount_options' argument")

        _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> pulumi.Input['FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs']:
        """
        Represents the mount options that are available for DataSync to access an NFS location. See below.
        """
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: pulumi.Input['FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs']):
        pulumi.set(self, "mount_options", value)


@pulumi.input_type
class FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs:
    def __init__(__self__, *,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] version: The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
        """
        FsxOpenZfsFileSystemProtocolNfsMountOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class LocationAzureBlobSasConfigurationArgs:
    def __init__(__self__, *,
                 token: pulumi.Input[str]):
        """
        :param pulumi.Input[str] token: A SAS token that provides permissions to access your Azure Blob Storage.
        """
        LocationAzureBlobSasConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            token=token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             token: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if token is None:
            raise TypeError("Missing 'token' argument")

        _setter("token", token)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        A SAS token that provides permissions to access your Azure Blob Storage.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class LocationFsxOntapFileSystemProtocolArgs:
    def __init__(__self__, *,
                 nfs: Optional[pulumi.Input['LocationFsxOntapFileSystemProtocolNfsArgs']] = None,
                 smb: Optional[pulumi.Input['LocationFsxOntapFileSystemProtocolSmbArgs']] = None):
        """
        :param pulumi.Input['LocationFsxOntapFileSystemProtocolNfsArgs'] nfs: Network File System (NFS) protocol that DataSync uses to access your FSx ONTAP file system. See NFS below.
        :param pulumi.Input['LocationFsxOntapFileSystemProtocolSmbArgs'] smb: Server Message Block (SMB) protocol that DataSync uses to access your FSx ONTAP file system. See [SMB] (#smb) below.
        """
        LocationFsxOntapFileSystemProtocolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            nfs=nfs,
            smb=smb,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             nfs: Optional[pulumi.Input['LocationFsxOntapFileSystemProtocolNfsArgs']] = None,
             smb: Optional[pulumi.Input['LocationFsxOntapFileSystemProtocolSmbArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if nfs is not None:
            _setter("nfs", nfs)
        if smb is not None:
            _setter("smb", smb)

    @property
    @pulumi.getter
    def nfs(self) -> Optional[pulumi.Input['LocationFsxOntapFileSystemProtocolNfsArgs']]:
        """
        Network File System (NFS) protocol that DataSync uses to access your FSx ONTAP file system. See NFS below.
        """
        return pulumi.get(self, "nfs")

    @nfs.setter
    def nfs(self, value: Optional[pulumi.Input['LocationFsxOntapFileSystemProtocolNfsArgs']]):
        pulumi.set(self, "nfs", value)

    @property
    @pulumi.getter
    def smb(self) -> Optional[pulumi.Input['LocationFsxOntapFileSystemProtocolSmbArgs']]:
        """
        Server Message Block (SMB) protocol that DataSync uses to access your FSx ONTAP file system. See [SMB] (#smb) below.
        """
        return pulumi.get(self, "smb")

    @smb.setter
    def smb(self, value: Optional[pulumi.Input['LocationFsxOntapFileSystemProtocolSmbArgs']]):
        pulumi.set(self, "smb", value)


@pulumi.input_type
class LocationFsxOntapFileSystemProtocolNfsArgs:
    def __init__(__self__, *,
                 mount_options: pulumi.Input['LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs']):
        """
        :param pulumi.Input['LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs'] mount_options: Mount options that are available for DataSync to access an NFS location. See NFS Mount Options below.
        """
        LocationFsxOntapFileSystemProtocolNfsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_options: Optional[pulumi.Input['LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if mount_options is None and 'mountOptions' in kwargs:
            mount_options = kwargs['mountOptions']
        if mount_options is None:
            raise TypeError("Missing 'mount_options' argument")

        _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> pulumi.Input['LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs']:
        """
        Mount options that are available for DataSync to access an NFS location. See NFS Mount Options below.
        """
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: pulumi.Input['LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs']):
        pulumi.set(self, "mount_options", value)


@pulumi.input_type
class LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs:
    def __init__(__self__, *,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] version: The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `NFS3`. Default: `NFS3`
        """
        LocationFsxOntapFileSystemProtocolNfsMountOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `NFS3`. Default: `NFS3`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class LocationFsxOntapFileSystemProtocolSmbArgs:
    def __init__(__self__, *,
                 mount_options: pulumi.Input['LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs'],
                 password: pulumi.Input[str],
                 user: pulumi.Input[str],
                 domain: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs'] mount_options: Mount options that are available for DataSync to access an SMB location. See SMB Mount Options below.
        :param pulumi.Input[str] password: Password of a user who has permission to access your SVM.
        :param pulumi.Input[str] user: Username that can mount the location and access the files, folders, and metadata that you need in the SVM.
        :param pulumi.Input[str] domain: Fully qualified domain name of the Microsoft Active Directory (AD) that your storage virtual machine belongs to.
        """
        LocationFsxOntapFileSystemProtocolSmbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_options=mount_options,
            password=password,
            user=user,
            domain=domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_options: Optional[pulumi.Input['LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs']] = None,
             password: Optional[pulumi.Input[str]] = None,
             user: Optional[pulumi.Input[str]] = None,
             domain: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if mount_options is None and 'mountOptions' in kwargs:
            mount_options = kwargs['mountOptions']
        if mount_options is None:
            raise TypeError("Missing 'mount_options' argument")
        if password is None:
            raise TypeError("Missing 'password' argument")
        if user is None:
            raise TypeError("Missing 'user' argument")

        _setter("mount_options", mount_options)
        _setter("password", password)
        _setter("user", user)
        if domain is not None:
            _setter("domain", domain)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> pulumi.Input['LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs']:
        """
        Mount options that are available for DataSync to access an SMB location. See SMB Mount Options below.
        """
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: pulumi.Input['LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs']):
        pulumi.set(self, "mount_options", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password of a user who has permission to access your SVM.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        Username that can mount the location and access the files, folders, and metadata that you need in the SVM.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified domain name of the Microsoft Active Directory (AD) that your storage virtual machine belongs to.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs:
    def __init__(__self__, *,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] version: The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `NFS3`. Default: `NFS3`
        """
        LocationFsxOntapFileSystemProtocolSmbMountOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `NFS3`. Default: `NFS3`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class LocationHdfsNameNodeArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] hostname: The hostname of the NameNode in the HDFS cluster. This value is the IP address or Domain Name Service (DNS) name of the NameNode. An agent that's installed on-premises uses this hostname to communicate with the NameNode in the network.
        :param pulumi.Input[int] port: The port that the NameNode uses to listen to client requests.
        """
        LocationHdfsNameNodeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if hostname is None:
            raise TypeError("Missing 'hostname' argument")
        if port is None:
            raise TypeError("Missing 'port' argument")

        _setter("hostname", hostname)
        _setter("port", port)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        The hostname of the NameNode in the HDFS cluster. This value is the IP address or Domain Name Service (DNS) name of the NameNode. An agent that's installed on-premises uses this hostname to communicate with the NameNode in the network.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port that the NameNode uses to listen to client requests.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class LocationHdfsQopConfigurationArgs:
    def __init__(__self__, *,
                 data_transfer_protection: Optional[pulumi.Input[str]] = None,
                 rpc_protection: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_transfer_protection: The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
        :param pulumi.Input[str] rpc_protection: The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
        """
        LocationHdfsQopConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_transfer_protection=data_transfer_protection,
            rpc_protection=rpc_protection,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_transfer_protection: Optional[pulumi.Input[str]] = None,
             rpc_protection: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if data_transfer_protection is None and 'dataTransferProtection' in kwargs:
            data_transfer_protection = kwargs['dataTransferProtection']
        if rpc_protection is None and 'rpcProtection' in kwargs:
            rpc_protection = kwargs['rpcProtection']

        if data_transfer_protection is not None:
            _setter("data_transfer_protection", data_transfer_protection)
        if rpc_protection is not None:
            _setter("rpc_protection", rpc_protection)

    @property
    @pulumi.getter(name="dataTransferProtection")
    def data_transfer_protection(self) -> Optional[pulumi.Input[str]]:
        """
        The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
        """
        return pulumi.get(self, "data_transfer_protection")

    @data_transfer_protection.setter
    def data_transfer_protection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_transfer_protection", value)

    @property
    @pulumi.getter(name="rpcProtection")
    def rpc_protection(self) -> Optional[pulumi.Input[str]]:
        """
        The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster. Valid values are `DISABLED`, `AUTHENTICATION`, `INTEGRITY` and `PRIVACY`.
        """
        return pulumi.get(self, "rpc_protection")

    @rpc_protection.setter
    def rpc_protection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpc_protection", value)


@pulumi.input_type
class LocationSmbMountOptionsArgs:
    def __init__(__self__, *,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] version: The specific SMB version that you want DataSync to use for mounting your SMB share. Valid values: `AUTOMATIC`, `SMB2`, and `SMB3`. Default: `AUTOMATIC`
        """
        LocationSmbMountOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The specific SMB version that you want DataSync to use for mounting your SMB share. Valid values: `AUTOMATIC`, `SMB2`, and `SMB3`. Default: `AUTOMATIC`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class NfsLocationMountOptionsArgs:
    def __init__(__self__, *,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] version: The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
        """
        NfsLocationMountOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The specific NFS version that you want DataSync to use for mounting your NFS share. Valid values: `AUTOMATIC`, `NFS3`, `NFS4_0` and `NFS4_1`. Default: `AUTOMATIC`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class NfsLocationOnPremConfigArgs:
    def __init__(__self__, *,
                 agent_arns: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] agent_arns: List of Amazon Resource Names (ARNs) of the DataSync Agents used to connect to the NFS server.
        """
        NfsLocationOnPremConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            agent_arns=agent_arns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             agent_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if agent_arns is None and 'agentArns' in kwargs:
            agent_arns = kwargs['agentArns']
        if agent_arns is None:
            raise TypeError("Missing 'agent_arns' argument")

        _setter("agent_arns", agent_arns)

    @property
    @pulumi.getter(name="agentArns")
    def agent_arns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of Amazon Resource Names (ARNs) of the DataSync Agents used to connect to the NFS server.
        """
        return pulumi.get(self, "agent_arns")

    @agent_arns.setter
    def agent_arns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "agent_arns", value)


@pulumi.input_type
class S3LocationS3ConfigArgs:
    def __init__(__self__, *,
                 bucket_access_role_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] bucket_access_role_arn: ARN of the IAM Role used to connect to the S3 Bucket.
        """
        S3LocationS3ConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_access_role_arn=bucket_access_role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_access_role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket_access_role_arn is None and 'bucketAccessRoleArn' in kwargs:
            bucket_access_role_arn = kwargs['bucketAccessRoleArn']
        if bucket_access_role_arn is None:
            raise TypeError("Missing 'bucket_access_role_arn' argument")

        _setter("bucket_access_role_arn", bucket_access_role_arn)

    @property
    @pulumi.getter(name="bucketAccessRoleArn")
    def bucket_access_role_arn(self) -> pulumi.Input[str]:
        """
        ARN of the IAM Role used to connect to the S3 Bucket.
        """
        return pulumi.get(self, "bucket_access_role_arn")

    @bucket_access_role_arn.setter
    def bucket_access_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_access_role_arn", value)


@pulumi.input_type
class TaskExcludesArgs:
    def __init__(__self__, *,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] filter_type: The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
        :param pulumi.Input[str] value: A single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
        """
        TaskExcludesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_type=filter_type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_type: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if filter_type is None and 'filterType' in kwargs:
            filter_type = kwargs['filterType']

        if filter_type is not None:
            _setter("filter_type", filter_type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        A single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TaskIncludesArgs:
    def __init__(__self__, *,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] filter_type: The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
        :param pulumi.Input[str] value: A single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
        """
        TaskIncludesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_type=filter_type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_type: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if filter_type is None and 'filterType' in kwargs:
            filter_type = kwargs['filterType']

        if filter_type is not None:
            _setter("filter_type", filter_type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of filter rule to apply. Valid values: `SIMPLE_PATTERN`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        A single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example: `/folder1|/folder2`
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TaskOptionsArgs:
    def __init__(__self__, *,
                 atime: Optional[pulumi.Input[str]] = None,
                 bytes_per_second: Optional[pulumi.Input[int]] = None,
                 gid: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 mtime: Optional[pulumi.Input[str]] = None,
                 object_tags: Optional[pulumi.Input[str]] = None,
                 overwrite_mode: Optional[pulumi.Input[str]] = None,
                 posix_permissions: Optional[pulumi.Input[str]] = None,
                 preserve_deleted_files: Optional[pulumi.Input[str]] = None,
                 preserve_devices: Optional[pulumi.Input[str]] = None,
                 security_descriptor_copy_flags: Optional[pulumi.Input[str]] = None,
                 task_queueing: Optional[pulumi.Input[str]] = None,
                 transfer_mode: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 verify_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] atime: A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
        :param pulumi.Input[int] bytes_per_second: Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
        :param pulumi.Input[str] gid: Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
        :param pulumi.Input[str] log_level: Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
        :param pulumi.Input[str] mtime: A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
        :param pulumi.Input[str] object_tags: Specifies whether object tags are maintained when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the NONE value. Valid values: `PRESERVE`, `NONE`. Default value: `PRESERVE`.
        :param pulumi.Input[str] overwrite_mode: Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
        :param pulumi.Input[str] posix_permissions: Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
        :param pulumi.Input[str] preserve_deleted_files: Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
        :param pulumi.Input[str] preserve_devices: Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
        :param pulumi.Input[str] security_descriptor_copy_flags: Determines which components of the SMB security descriptor are copied from source to destination objects. This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations, or between two Amazon FSx for Windows File Server locations. Valid values: `NONE`, `OWNER_DACL`, `OWNER_DACL_SACL`. Default: `OWNER_DACL`.
        :param pulumi.Input[str] task_queueing: Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
        :param pulumi.Input[str] transfer_mode: Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
        :param pulumi.Input[str] uid: User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
        :param pulumi.Input[str] verify_mode: Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
        """
        TaskOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            atime=atime,
            bytes_per_second=bytes_per_second,
            gid=gid,
            log_level=log_level,
            mtime=mtime,
            object_tags=object_tags,
            overwrite_mode=overwrite_mode,
            posix_permissions=posix_permissions,
            preserve_deleted_files=preserve_deleted_files,
            preserve_devices=preserve_devices,
            security_descriptor_copy_flags=security_descriptor_copy_flags,
            task_queueing=task_queueing,
            transfer_mode=transfer_mode,
            uid=uid,
            verify_mode=verify_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             atime: Optional[pulumi.Input[str]] = None,
             bytes_per_second: Optional[pulumi.Input[int]] = None,
             gid: Optional[pulumi.Input[str]] = None,
             log_level: Optional[pulumi.Input[str]] = None,
             mtime: Optional[pulumi.Input[str]] = None,
             object_tags: Optional[pulumi.Input[str]] = None,
             overwrite_mode: Optional[pulumi.Input[str]] = None,
             posix_permissions: Optional[pulumi.Input[str]] = None,
             preserve_deleted_files: Optional[pulumi.Input[str]] = None,
             preserve_devices: Optional[pulumi.Input[str]] = None,
             security_descriptor_copy_flags: Optional[pulumi.Input[str]] = None,
             task_queueing: Optional[pulumi.Input[str]] = None,
             transfer_mode: Optional[pulumi.Input[str]] = None,
             uid: Optional[pulumi.Input[str]] = None,
             verify_mode: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bytes_per_second is None and 'bytesPerSecond' in kwargs:
            bytes_per_second = kwargs['bytesPerSecond']
        if log_level is None and 'logLevel' in kwargs:
            log_level = kwargs['logLevel']
        if object_tags is None and 'objectTags' in kwargs:
            object_tags = kwargs['objectTags']
        if overwrite_mode is None and 'overwriteMode' in kwargs:
            overwrite_mode = kwargs['overwriteMode']
        if posix_permissions is None and 'posixPermissions' in kwargs:
            posix_permissions = kwargs['posixPermissions']
        if preserve_deleted_files is None and 'preserveDeletedFiles' in kwargs:
            preserve_deleted_files = kwargs['preserveDeletedFiles']
        if preserve_devices is None and 'preserveDevices' in kwargs:
            preserve_devices = kwargs['preserveDevices']
        if security_descriptor_copy_flags is None and 'securityDescriptorCopyFlags' in kwargs:
            security_descriptor_copy_flags = kwargs['securityDescriptorCopyFlags']
        if task_queueing is None and 'taskQueueing' in kwargs:
            task_queueing = kwargs['taskQueueing']
        if transfer_mode is None and 'transferMode' in kwargs:
            transfer_mode = kwargs['transferMode']
        if verify_mode is None and 'verifyMode' in kwargs:
            verify_mode = kwargs['verifyMode']

        if atime is not None:
            _setter("atime", atime)
        if bytes_per_second is not None:
            _setter("bytes_per_second", bytes_per_second)
        if gid is not None:
            _setter("gid", gid)
        if log_level is not None:
            _setter("log_level", log_level)
        if mtime is not None:
            _setter("mtime", mtime)
        if object_tags is not None:
            _setter("object_tags", object_tags)
        if overwrite_mode is not None:
            _setter("overwrite_mode", overwrite_mode)
        if posix_permissions is not None:
            _setter("posix_permissions", posix_permissions)
        if preserve_deleted_files is not None:
            _setter("preserve_deleted_files", preserve_deleted_files)
        if preserve_devices is not None:
            _setter("preserve_devices", preserve_devices)
        if security_descriptor_copy_flags is not None:
            _setter("security_descriptor_copy_flags", security_descriptor_copy_flags)
        if task_queueing is not None:
            _setter("task_queueing", task_queueing)
        if transfer_mode is not None:
            _setter("transfer_mode", transfer_mode)
        if uid is not None:
            _setter("uid", uid)
        if verify_mode is not None:
            _setter("verify_mode", verify_mode)

    @property
    @pulumi.getter
    def atime(self) -> Optional[pulumi.Input[str]]:
        """
        A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
        """
        return pulumi.get(self, "atime")

    @atime.setter
    def atime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "atime", value)

    @property
    @pulumi.getter(name="bytesPerSecond")
    def bytes_per_second(self) -> Optional[pulumi.Input[int]]:
        """
        Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
        """
        return pulumi.get(self, "bytes_per_second")

    @bytes_per_second.setter
    def bytes_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bytes_per_second", value)

    @property
    @pulumi.getter
    def gid(self) -> Optional[pulumi.Input[str]]:
        """
        Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
        """
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gid", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the type of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide. Valid values: `OFF`, `BASIC`, `TRANSFER`. Default: `OFF`.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def mtime(self) -> Optional[pulumi.Input[str]]:
        """
        A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
        """
        return pulumi.get(self, "mtime")

    @mtime.setter
    def mtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtime", value)

    @property
    @pulumi.getter(name="objectTags")
    def object_tags(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether object tags are maintained when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the NONE value. Valid values: `PRESERVE`, `NONE`. Default value: `PRESERVE`.
        """
        return pulumi.get(self, "object_tags")

    @object_tags.setter
    def object_tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_tags", value)

    @property
    @pulumi.getter(name="overwriteMode")
    def overwrite_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Determines whether files at the destination should be overwritten or preserved when copying files. Valid values: `ALWAYS`, `NEVER`. Default: `ALWAYS`.
        """
        return pulumi.get(self, "overwrite_mode")

    @overwrite_mode.setter
    def overwrite_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overwrite_mode", value)

    @property
    @pulumi.getter(name="posixPermissions")
    def posix_permissions(self) -> Optional[pulumi.Input[str]]:
        """
        Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
        """
        return pulumi.get(self, "posix_permissions")

    @posix_permissions.setter
    def posix_permissions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "posix_permissions", value)

    @property
    @pulumi.getter(name="preserveDeletedFiles")
    def preserve_deleted_files(self) -> Optional[pulumi.Input[str]]:
        """
        Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
        """
        return pulumi.get(self, "preserve_deleted_files")

    @preserve_deleted_files.setter
    def preserve_deleted_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preserve_deleted_files", value)

    @property
    @pulumi.getter(name="preserveDevices")
    def preserve_devices(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
        """
        return pulumi.get(self, "preserve_devices")

    @preserve_devices.setter
    def preserve_devices(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preserve_devices", value)

    @property
    @pulumi.getter(name="securityDescriptorCopyFlags")
    def security_descriptor_copy_flags(self) -> Optional[pulumi.Input[str]]:
        """
        Determines which components of the SMB security descriptor are copied from source to destination objects. This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations, or between two Amazon FSx for Windows File Server locations. Valid values: `NONE`, `OWNER_DACL`, `OWNER_DACL_SACL`. Default: `OWNER_DACL`.
        """
        return pulumi.get(self, "security_descriptor_copy_flags")

    @security_descriptor_copy_flags.setter
    def security_descriptor_copy_flags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_descriptor_copy_flags", value)

    @property
    @pulumi.getter(name="taskQueueing")
    def task_queueing(self) -> Optional[pulumi.Input[str]]:
        """
        Determines whether tasks should be queued before executing the tasks. Valid values: `ENABLED`, `DISABLED`. Default `ENABLED`.
        """
        return pulumi.get(self, "task_queueing")

    @task_queueing.setter
    def task_queueing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_queueing", value)

    @property
    @pulumi.getter(name="transferMode")
    def transfer_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location. Valid values: `CHANGED`, `ALL`. Default: `CHANGED`
        """
        return pulumi.get(self, "transfer_mode")

    @transfer_mode.setter
    def transfer_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transfer_mode", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="verifyMode")
    def verify_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
        """
        return pulumi.get(self, "verify_mode")

    @verify_mode.setter
    def verify_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_mode", value)


@pulumi.input_type
class TaskScheduleArgs:
    def __init__(__self__, *,
                 schedule_expression: pulumi.Input[str]):
        """
        :param pulumi.Input[str] schedule_expression: Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
        """
        TaskScheduleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            schedule_expression=schedule_expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             schedule_expression: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if schedule_expression is None and 'scheduleExpression' in kwargs:
            schedule_expression = kwargs['scheduleExpression']
        if schedule_expression is None:
            raise TypeError("Missing 'schedule_expression' argument")

        _setter("schedule_expression", schedule_expression)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> pulumi.Input[str]:
        """
        Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
        """
        return pulumi.get(self, "schedule_expression")

    @schedule_expression.setter
    def schedule_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_expression", value)


