# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CachePolicyParametersInCacheKeyAndForwardedToOrigin',
    'CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfig',
    'CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies',
    'CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfig',
    'CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders',
    'CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfig',
    'CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings',
    'ContinuousDeploymentPolicyStagingDistributionDnsNames',
    'ContinuousDeploymentPolicyTrafficConfig',
    'ContinuousDeploymentPolicyTrafficConfigSingleHeaderConfig',
    'ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig',
    'ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig',
    'DistributionCustomErrorResponse',
    'DistributionDefaultCacheBehavior',
    'DistributionDefaultCacheBehaviorForwardedValues',
    'DistributionDefaultCacheBehaviorForwardedValuesCookies',
    'DistributionDefaultCacheBehaviorFunctionAssociation',
    'DistributionDefaultCacheBehaviorLambdaFunctionAssociation',
    'DistributionLoggingConfig',
    'DistributionOrderedCacheBehavior',
    'DistributionOrderedCacheBehaviorForwardedValues',
    'DistributionOrderedCacheBehaviorForwardedValuesCookies',
    'DistributionOrderedCacheBehaviorFunctionAssociation',
    'DistributionOrderedCacheBehaviorLambdaFunctionAssociation',
    'DistributionOrigin',
    'DistributionOriginCustomHeader',
    'DistributionOriginCustomOriginConfig',
    'DistributionOriginGroup',
    'DistributionOriginGroupFailoverCriteria',
    'DistributionOriginGroupMember',
    'DistributionOriginOriginShield',
    'DistributionOriginS3OriginConfig',
    'DistributionRestrictions',
    'DistributionRestrictionsGeoRestriction',
    'DistributionTrustedKeyGroup',
    'DistributionTrustedKeyGroupItem',
    'DistributionTrustedSigner',
    'DistributionTrustedSignerItem',
    'DistributionViewerCertificate',
    'FieldLevelEncryptionConfigContentTypeProfileConfig',
    'FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles',
    'FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfilesItem',
    'FieldLevelEncryptionConfigQueryArgProfileConfig',
    'FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles',
    'FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfilesItem',
    'FieldLevelEncryptionProfileEncryptionEntities',
    'FieldLevelEncryptionProfileEncryptionEntitiesItem',
    'FieldLevelEncryptionProfileEncryptionEntitiesItemFieldPatterns',
    'MonitoringSubscriptionMonitoringSubscription',
    'MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig',
    'OriginRequestPolicyCookiesConfig',
    'OriginRequestPolicyCookiesConfigCookies',
    'OriginRequestPolicyHeadersConfig',
    'OriginRequestPolicyHeadersConfigHeaders',
    'OriginRequestPolicyQueryStringsConfig',
    'OriginRequestPolicyQueryStringsConfigQueryStrings',
    'RealtimeLogConfigEndpoint',
    'RealtimeLogConfigEndpointKinesisStreamConfig',
    'ResponseHeadersPolicyCorsConfig',
    'ResponseHeadersPolicyCorsConfigAccessControlAllowHeaders',
    'ResponseHeadersPolicyCorsConfigAccessControlAllowMethods',
    'ResponseHeadersPolicyCorsConfigAccessControlAllowOrigins',
    'ResponseHeadersPolicyCorsConfigAccessControlExposeHeaders',
    'ResponseHeadersPolicyCustomHeadersConfig',
    'ResponseHeadersPolicyCustomHeadersConfigItem',
    'ResponseHeadersPolicyRemoveHeadersConfig',
    'ResponseHeadersPolicyRemoveHeadersConfigItem',
    'ResponseHeadersPolicySecurityHeadersConfig',
    'ResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicy',
    'ResponseHeadersPolicySecurityHeadersConfigContentTypeOptions',
    'ResponseHeadersPolicySecurityHeadersConfigFrameOptions',
    'ResponseHeadersPolicySecurityHeadersConfigReferrerPolicy',
    'ResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurity',
    'ResponseHeadersPolicySecurityHeadersConfigXssProtection',
    'ResponseHeadersPolicyServerTimingHeadersConfig',
    'GetCachePolicyParametersInCacheKeyAndForwardedToOriginResult',
    'GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigResult',
    'GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookieResult',
    'GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigResult',
    'GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaderResult',
    'GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigResult',
    'GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStringResult',
    'GetOriginRequestPolicyCookiesConfigResult',
    'GetOriginRequestPolicyCookiesConfigCookieResult',
    'GetOriginRequestPolicyHeadersConfigResult',
    'GetOriginRequestPolicyHeadersConfigHeaderResult',
    'GetOriginRequestPolicyQueryStringsConfigResult',
    'GetOriginRequestPolicyQueryStringsConfigQueryStringResult',
    'GetRealtimeLogConfigEndpointResult',
    'GetRealtimeLogConfigEndpointKinesisStreamConfigResult',
    'GetResponseHeadersPolicyCorsConfigResult',
    'GetResponseHeadersPolicyCorsConfigAccessControlAllowHeaderResult',
    'GetResponseHeadersPolicyCorsConfigAccessControlAllowMethodResult',
    'GetResponseHeadersPolicyCorsConfigAccessControlAllowOriginResult',
    'GetResponseHeadersPolicyCorsConfigAccessControlExposeHeaderResult',
    'GetResponseHeadersPolicyCustomHeadersConfigResult',
    'GetResponseHeadersPolicyCustomHeadersConfigItemResult',
    'GetResponseHeadersPolicyRemoveHeadersConfigResult',
    'GetResponseHeadersPolicyRemoveHeadersConfigItemResult',
    'GetResponseHeadersPolicySecurityHeadersConfigResult',
    'GetResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyResult',
    'GetResponseHeadersPolicySecurityHeadersConfigContentTypeOptionResult',
    'GetResponseHeadersPolicySecurityHeadersConfigFrameOptionResult',
    'GetResponseHeadersPolicySecurityHeadersConfigReferrerPolicyResult',
    'GetResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityResult',
    'GetResponseHeadersPolicySecurityHeadersConfigXssProtectionResult',
    'GetResponseHeadersPolicyServerTimingHeadersConfigResult',
]

@pulumi.output_type
class CachePolicyParametersInCacheKeyAndForwardedToOrigin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookiesConfig":
            suggest = "cookies_config"
        elif key == "headersConfig":
            suggest = "headers_config"
        elif key == "queryStringsConfig":
            suggest = "query_strings_config"
        elif key == "enableAcceptEncodingBrotli":
            suggest = "enable_accept_encoding_brotli"
        elif key == "enableAcceptEncodingGzip":
            suggest = "enable_accept_encoding_gzip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CachePolicyParametersInCacheKeyAndForwardedToOrigin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CachePolicyParametersInCacheKeyAndForwardedToOrigin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CachePolicyParametersInCacheKeyAndForwardedToOrigin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookies_config: 'outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfig',
                 headers_config: 'outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfig',
                 query_strings_config: 'outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfig',
                 enable_accept_encoding_brotli: Optional[bool] = None,
                 enable_accept_encoding_gzip: Optional[bool] = None):
        """
        :param 'CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigArgs' cookies_config: Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
        :param 'CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigArgs' headers_config: Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
        :param 'CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigArgs' query_strings_config: Whether any URL query strings in viewer requests are included in the cache key. It also automatically includes these query strings in requests that CloudFront sends to the origin. Please refer to the Query String Config for more information.
        :param bool enable_accept_encoding_brotli: Flag determines whether the Accept-Encoding HTTP header is included in the cache key and in requests that CloudFront sends to the origin.
        :param bool enable_accept_encoding_gzip: Whether the Accept-Encoding HTTP header is included in the cache key and in requests sent to the origin by CloudFront.
        """
        CachePolicyParametersInCacheKeyAndForwardedToOrigin._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookies_config=cookies_config,
            headers_config=headers_config,
            query_strings_config=query_strings_config,
            enable_accept_encoding_brotli=enable_accept_encoding_brotli,
            enable_accept_encoding_gzip=enable_accept_encoding_gzip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookies_config: Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfig'] = None,
             headers_config: Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfig'] = None,
             query_strings_config: Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfig'] = None,
             enable_accept_encoding_brotli: Optional[bool] = None,
             enable_accept_encoding_gzip: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookies_config is None and 'cookiesConfig' in kwargs:
            cookies_config = kwargs['cookiesConfig']
        if cookies_config is None:
            raise TypeError("Missing 'cookies_config' argument")
        if headers_config is None and 'headersConfig' in kwargs:
            headers_config = kwargs['headersConfig']
        if headers_config is None:
            raise TypeError("Missing 'headers_config' argument")
        if query_strings_config is None and 'queryStringsConfig' in kwargs:
            query_strings_config = kwargs['queryStringsConfig']
        if query_strings_config is None:
            raise TypeError("Missing 'query_strings_config' argument")
        if enable_accept_encoding_brotli is None and 'enableAcceptEncodingBrotli' in kwargs:
            enable_accept_encoding_brotli = kwargs['enableAcceptEncodingBrotli']
        if enable_accept_encoding_gzip is None and 'enableAcceptEncodingGzip' in kwargs:
            enable_accept_encoding_gzip = kwargs['enableAcceptEncodingGzip']

        _setter("cookies_config", cookies_config)
        _setter("headers_config", headers_config)
        _setter("query_strings_config", query_strings_config)
        if enable_accept_encoding_brotli is not None:
            _setter("enable_accept_encoding_brotli", enable_accept_encoding_brotli)
        if enable_accept_encoding_gzip is not None:
            _setter("enable_accept_encoding_gzip", enable_accept_encoding_gzip)

    @property
    @pulumi.getter(name="cookiesConfig")
    def cookies_config(self) -> 'outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfig':
        """
        Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
        """
        return pulumi.get(self, "cookies_config")

    @property
    @pulumi.getter(name="headersConfig")
    def headers_config(self) -> 'outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfig':
        """
        Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
        """
        return pulumi.get(self, "headers_config")

    @property
    @pulumi.getter(name="queryStringsConfig")
    def query_strings_config(self) -> 'outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfig':
        """
        Whether any URL query strings in viewer requests are included in the cache key. It also automatically includes these query strings in requests that CloudFront sends to the origin. Please refer to the Query String Config for more information.
        """
        return pulumi.get(self, "query_strings_config")

    @property
    @pulumi.getter(name="enableAcceptEncodingBrotli")
    def enable_accept_encoding_brotli(self) -> Optional[bool]:
        """
        Flag determines whether the Accept-Encoding HTTP header is included in the cache key and in requests that CloudFront sends to the origin.
        """
        return pulumi.get(self, "enable_accept_encoding_brotli")

    @property
    @pulumi.getter(name="enableAcceptEncodingGzip")
    def enable_accept_encoding_gzip(self) -> Optional[bool]:
        """
        Whether the Accept-Encoding HTTP header is included in the cache key and in requests sent to the origin by CloudFront.
        """
        return pulumi.get(self, "enable_accept_encoding_gzip")


@pulumi.output_type
class CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieBehavior":
            suggest = "cookie_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookie_behavior: str,
                 cookies: Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies'] = None):
        """
        :param str cookie_behavior: Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for `cookie_behavior` are `none`, `whitelist`, `allExcept`, and `all`.
        :param 'CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookiesArgs' cookies: Object that contains a list of cookie names. See Items for more information.
        """
        CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_behavior=cookie_behavior,
            cookies=cookies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_behavior: Optional[str] = None,
             cookies: Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookie_behavior is None and 'cookieBehavior' in kwargs:
            cookie_behavior = kwargs['cookieBehavior']
        if cookie_behavior is None:
            raise TypeError("Missing 'cookie_behavior' argument")

        _setter("cookie_behavior", cookie_behavior)
        if cookies is not None:
            _setter("cookies", cookies)

    @property
    @pulumi.getter(name="cookieBehavior")
    def cookie_behavior(self) -> str:
        """
        Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for `cookie_behavior` are `none`, `whitelist`, `allExcept`, and `all`.
        """
        return pulumi.get(self, "cookie_behavior")

    @property
    @pulumi.getter
    def cookies(self) -> Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies']:
        """
        Object that contains a list of cookie names. See Items for more information.
        """
        return pulumi.get(self, "cookies")


@pulumi.output_type
class CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] items: List of item names, such as cookies, headers, or query strings.
        """
        CachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        """
        List of item names, such as cookies, headers, or query strings.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerBehavior":
            suggest = "header_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_behavior: Optional[str] = None,
                 headers: Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders'] = None):
        """
        :param str header_behavior: Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for `header_behavior` are `none` and `whitelist`.
        :param 'CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeadersArgs' headers: Object contains a list of header names. See Items for more information.
        """
        CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_behavior=header_behavior,
            headers=headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_behavior: Optional[str] = None,
             headers: Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if header_behavior is None and 'headerBehavior' in kwargs:
            header_behavior = kwargs['headerBehavior']

        if header_behavior is not None:
            _setter("header_behavior", header_behavior)
        if headers is not None:
            _setter("headers", headers)

    @property
    @pulumi.getter(name="headerBehavior")
    def header_behavior(self) -> Optional[str]:
        """
        Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for `header_behavior` are `none` and `whitelist`.
        """
        return pulumi.get(self, "header_behavior")

    @property
    @pulumi.getter
    def headers(self) -> Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders']:
        """
        Object contains a list of header names. See Items for more information.
        """
        return pulumi.get(self, "headers")


@pulumi.output_type
class CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] items: List of item names, such as cookies, headers, or query strings.
        """
        CachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        """
        List of item names, such as cookies, headers, or query strings.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryStringBehavior":
            suggest = "query_string_behavior"
        elif key == "queryStrings":
            suggest = "query_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_string_behavior: str,
                 query_strings: Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings'] = None):
        """
        :param str query_string_behavior: Whether URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for `query_string_behavior` are `none`, `whitelist`, `allExcept`, and `all`.
        :param 'CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStringsArgs' query_strings: Configuration parameter that contains a list of query string names. See Items for more information.
        """
        CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            query_string_behavior=query_string_behavior,
            query_strings=query_strings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             query_string_behavior: Optional[str] = None,
             query_strings: Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if query_string_behavior is None and 'queryStringBehavior' in kwargs:
            query_string_behavior = kwargs['queryStringBehavior']
        if query_string_behavior is None:
            raise TypeError("Missing 'query_string_behavior' argument")
        if query_strings is None and 'queryStrings' in kwargs:
            query_strings = kwargs['queryStrings']

        _setter("query_string_behavior", query_string_behavior)
        if query_strings is not None:
            _setter("query_strings", query_strings)

    @property
    @pulumi.getter(name="queryStringBehavior")
    def query_string_behavior(self) -> str:
        """
        Whether URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for `query_string_behavior` are `none`, `whitelist`, `allExcept`, and `all`.
        """
        return pulumi.get(self, "query_string_behavior")

    @property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Optional['outputs.CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings']:
        """
        Configuration parameter that contains a list of query string names. See Items for more information.
        """
        return pulumi.get(self, "query_strings")


@pulumi.output_type
class CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] items: List of item names, such as cookies, headers, or query strings.
        """
        CachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        """
        List of item names, such as cookies, headers, or query strings.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class ContinuousDeploymentPolicyStagingDistributionDnsNames(dict):
    def __init__(__self__, *,
                 quantity: int,
                 items: Optional[Sequence[str]] = None):
        """
        :param int quantity: Number of CloudFront domain names in the staging distribution.
        :param Sequence[str] items: A list of CloudFront domain names for the staging distribution.
        """
        ContinuousDeploymentPolicyStagingDistributionDnsNames._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            quantity=quantity,
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             quantity: Optional[int] = None,
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if quantity is None:
            raise TypeError("Missing 'quantity' argument")

        _setter("quantity", quantity)
        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def quantity(self) -> int:
        """
        Number of CloudFront domain names in the staging distribution.
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        """
        A list of CloudFront domain names for the staging distribution.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class ContinuousDeploymentPolicyTrafficConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "singleHeaderConfig":
            suggest = "single_header_config"
        elif key == "singleWeightConfig":
            suggest = "single_weight_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContinuousDeploymentPolicyTrafficConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContinuousDeploymentPolicyTrafficConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContinuousDeploymentPolicyTrafficConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 single_header_config: Optional['outputs.ContinuousDeploymentPolicyTrafficConfigSingleHeaderConfig'] = None,
                 single_weight_config: Optional['outputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig'] = None):
        """
        :param str type: Type of traffic configuration. Valid values are `SingleWeight` and `SingleHeader`.
        :param 'ContinuousDeploymentPolicyTrafficConfigSingleHeaderConfigArgs' single_header_config: Determines which HTTP requests are sent to the staging distribution. See `single_header_config`.
        :param 'ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs' single_weight_config: Contains the percentage of traffic to send to the staging distribution. See `single_weight_config`.
        """
        ContinuousDeploymentPolicyTrafficConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            single_header_config=single_header_config,
            single_weight_config=single_weight_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             single_header_config: Optional['outputs.ContinuousDeploymentPolicyTrafficConfigSingleHeaderConfig'] = None,
             single_weight_config: Optional['outputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if single_header_config is None and 'singleHeaderConfig' in kwargs:
            single_header_config = kwargs['singleHeaderConfig']
        if single_weight_config is None and 'singleWeightConfig' in kwargs:
            single_weight_config = kwargs['singleWeightConfig']

        _setter("type", type)
        if single_header_config is not None:
            _setter("single_header_config", single_header_config)
        if single_weight_config is not None:
            _setter("single_weight_config", single_weight_config)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of traffic configuration. Valid values are `SingleWeight` and `SingleHeader`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="singleHeaderConfig")
    def single_header_config(self) -> Optional['outputs.ContinuousDeploymentPolicyTrafficConfigSingleHeaderConfig']:
        """
        Determines which HTTP requests are sent to the staging distribution. See `single_header_config`.
        """
        return pulumi.get(self, "single_header_config")

    @property
    @pulumi.getter(name="singleWeightConfig")
    def single_weight_config(self) -> Optional['outputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig']:
        """
        Contains the percentage of traffic to send to the staging distribution. See `single_weight_config`.
        """
        return pulumi.get(self, "single_weight_config")


@pulumi.output_type
class ContinuousDeploymentPolicyTrafficConfigSingleHeaderConfig(dict):
    def __init__(__self__, *,
                 header: str,
                 value: str):
        """
        :param str header: Request header name to send to the staging distribution. The header must contain the prefix `aws-cf-cd-`.
        :param str value: Request header value.
        """
        ContinuousDeploymentPolicyTrafficConfigSingleHeaderConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header=header,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if header is None:
            raise TypeError("Missing 'header' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("header", header)
        _setter("value", value)

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Request header name to send to the staging distribution. The header must contain the prefix `aws-cf-cd-`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Request header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sessionStickinessConfig":
            suggest = "session_stickiness_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 weight: float,
                 session_stickiness_config: Optional['outputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig'] = None):
        """
        :param float weight: The percentage of traffic to send to a staging distribution, expressed as a decimal number between `0` and `.15`.
        :param 'ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfigArgs' session_stickiness_config: Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to the staging distribution, while others are sent to the primary distribution. Define the session duration using TTL values. See `session_stickiness_config`.
        """
        ContinuousDeploymentPolicyTrafficConfigSingleWeightConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            weight=weight,
            session_stickiness_config=session_stickiness_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             weight: Optional[float] = None,
             session_stickiness_config: Optional['outputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if weight is None:
            raise TypeError("Missing 'weight' argument")
        if session_stickiness_config is None and 'sessionStickinessConfig' in kwargs:
            session_stickiness_config = kwargs['sessionStickinessConfig']

        _setter("weight", weight)
        if session_stickiness_config is not None:
            _setter("session_stickiness_config", session_stickiness_config)

    @property
    @pulumi.getter
    def weight(self) -> float:
        """
        The percentage of traffic to send to a staging distribution, expressed as a decimal number between `0` and `.15`.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="sessionStickinessConfig")
    def session_stickiness_config(self) -> Optional['outputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig']:
        """
        Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to the staging distribution, while others are sent to the primary distribution. Define the session duration using TTL values. See `session_stickiness_config`.
        """
        return pulumi.get(self, "session_stickiness_config")


@pulumi.output_type
class ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTtl":
            suggest = "idle_ttl"
        elif key == "maximumTtl":
            suggest = "maximum_ttl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idle_ttl: int,
                 maximum_ttl: int):
        """
        :param int idle_ttl: The amount of time in seconds after which sessions will cease if no requests are received. Valid values are `300` – `3600` (5–60 minutes). The value must be less than or equal to `maximum_ttl`.
        :param int maximum_ttl: The maximum amount of time in seconds to consider requests from the viewer as being part of the same session. Valid values are `300` – `3600` (5–60 minutes). The value must be greater than or equal to `idle_ttl`.
        """
        ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            idle_ttl=idle_ttl,
            maximum_ttl=maximum_ttl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             idle_ttl: Optional[int] = None,
             maximum_ttl: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if idle_ttl is None and 'idleTtl' in kwargs:
            idle_ttl = kwargs['idleTtl']
        if idle_ttl is None:
            raise TypeError("Missing 'idle_ttl' argument")
        if maximum_ttl is None and 'maximumTtl' in kwargs:
            maximum_ttl = kwargs['maximumTtl']
        if maximum_ttl is None:
            raise TypeError("Missing 'maximum_ttl' argument")

        _setter("idle_ttl", idle_ttl)
        _setter("maximum_ttl", maximum_ttl)

    @property
    @pulumi.getter(name="idleTtl")
    def idle_ttl(self) -> int:
        """
        The amount of time in seconds after which sessions will cease if no requests are received. Valid values are `300` – `3600` (5–60 minutes). The value must be less than or equal to `maximum_ttl`.
        """
        return pulumi.get(self, "idle_ttl")

    @property
    @pulumi.getter(name="maximumTtl")
    def maximum_ttl(self) -> int:
        """
        The maximum amount of time in seconds to consider requests from the viewer as being part of the same session. Valid values are `300` – `3600` (5–60 minutes). The value must be greater than or equal to `idle_ttl`.
        """
        return pulumi.get(self, "maximum_ttl")


@pulumi.output_type
class DistributionCustomErrorResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorCachingMinTtl":
            suggest = "error_caching_min_ttl"
        elif key == "responseCode":
            suggest = "response_code"
        elif key == "responsePagePath":
            suggest = "response_page_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionCustomErrorResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionCustomErrorResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionCustomErrorResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: int,
                 error_caching_min_ttl: Optional[int] = None,
                 response_code: Optional[int] = None,
                 response_page_path: Optional[str] = None):
        """
        :param int error_code: 4xx or 5xx HTTP status code that you want to customize.
        :param int error_caching_min_ttl: Minimum amount of time you want HTTP error codes to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated.
        :param int response_code: HTTP status code that you want CloudFront to return with the custom error page to the viewer.
        :param str response_page_path: Path of the custom error page (for example, `/custom_404.html`).
        """
        DistributionCustomErrorResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_code=error_code,
            error_caching_min_ttl=error_caching_min_ttl,
            response_code=response_code,
            response_page_path=response_page_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_code: Optional[int] = None,
             error_caching_min_ttl: Optional[int] = None,
             response_code: Optional[int] = None,
             response_page_path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if error_code is None and 'errorCode' in kwargs:
            error_code = kwargs['errorCode']
        if error_code is None:
            raise TypeError("Missing 'error_code' argument")
        if error_caching_min_ttl is None and 'errorCachingMinTtl' in kwargs:
            error_caching_min_ttl = kwargs['errorCachingMinTtl']
        if response_code is None and 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if response_page_path is None and 'responsePagePath' in kwargs:
            response_page_path = kwargs['responsePagePath']

        _setter("error_code", error_code)
        if error_caching_min_ttl is not None:
            _setter("error_caching_min_ttl", error_caching_min_ttl)
        if response_code is not None:
            _setter("response_code", response_code)
        if response_page_path is not None:
            _setter("response_page_path", response_page_path)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> int:
        """
        4xx or 5xx HTTP status code that you want to customize.
        """
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorCachingMinTtl")
    def error_caching_min_ttl(self) -> Optional[int]:
        """
        Minimum amount of time you want HTTP error codes to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated.
        """
        return pulumi.get(self, "error_caching_min_ttl")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        """
        HTTP status code that you want CloudFront to return with the custom error page to the viewer.
        """
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responsePagePath")
    def response_page_path(self) -> Optional[str]:
        """
        Path of the custom error page (for example, `/custom_404.html`).
        """
        return pulumi.get(self, "response_page_path")


@pulumi.output_type
class DistributionDefaultCacheBehavior(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "cachedMethods":
            suggest = "cached_methods"
        elif key == "targetOriginId":
            suggest = "target_origin_id"
        elif key == "viewerProtocolPolicy":
            suggest = "viewer_protocol_policy"
        elif key == "cachePolicyId":
            suggest = "cache_policy_id"
        elif key == "defaultTtl":
            suggest = "default_ttl"
        elif key == "fieldLevelEncryptionId":
            suggest = "field_level_encryption_id"
        elif key == "forwardedValues":
            suggest = "forwarded_values"
        elif key == "functionAssociations":
            suggest = "function_associations"
        elif key == "lambdaFunctionAssociations":
            suggest = "lambda_function_associations"
        elif key == "maxTtl":
            suggest = "max_ttl"
        elif key == "minTtl":
            suggest = "min_ttl"
        elif key == "originRequestPolicyId":
            suggest = "origin_request_policy_id"
        elif key == "realtimeLogConfigArn":
            suggest = "realtime_log_config_arn"
        elif key == "responseHeadersPolicyId":
            suggest = "response_headers_policy_id"
        elif key == "smoothStreaming":
            suggest = "smooth_streaming"
        elif key == "trustedKeyGroups":
            suggest = "trusted_key_groups"
        elif key == "trustedSigners":
            suggest = "trusted_signers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionDefaultCacheBehavior. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionDefaultCacheBehavior.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionDefaultCacheBehavior.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_methods: Sequence[str],
                 cached_methods: Sequence[str],
                 target_origin_id: str,
                 viewer_protocol_policy: str,
                 cache_policy_id: Optional[str] = None,
                 compress: Optional[bool] = None,
                 default_ttl: Optional[int] = None,
                 field_level_encryption_id: Optional[str] = None,
                 forwarded_values: Optional['outputs.DistributionDefaultCacheBehaviorForwardedValues'] = None,
                 function_associations: Optional[Sequence['outputs.DistributionDefaultCacheBehaviorFunctionAssociation']] = None,
                 lambda_function_associations: Optional[Sequence['outputs.DistributionDefaultCacheBehaviorLambdaFunctionAssociation']] = None,
                 max_ttl: Optional[int] = None,
                 min_ttl: Optional[int] = None,
                 origin_request_policy_id: Optional[str] = None,
                 realtime_log_config_arn: Optional[str] = None,
                 response_headers_policy_id: Optional[str] = None,
                 smooth_streaming: Optional[bool] = None,
                 trusted_key_groups: Optional[Sequence[str]] = None,
                 trusted_signers: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] allowed_methods: Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.
        :param Sequence[str] cached_methods: Controls whether CloudFront caches the response to requests using the specified HTTP methods.
        :param str target_origin_id: Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
        :param str viewer_protocol_policy: Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of `allow-all`, `https-only`, or `redirect-to-https`.
        :param str cache_policy_id: Unique identifier of the cache policy that is attached to the cache behavior. If configuring the `default_cache_behavior` either `cache_policy_id` or `forwarded_values` must be set.
        :param bool compress: Whether you want CloudFront to automatically compress content for web requests that include `Accept-Encoding: gzip` in the request header (default: `false`).
        :param int default_ttl: Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an `Cache-Control max-age` or `Expires` header.
        :param str field_level_encryption_id: Field level encryption configuration ID.
        :param 'DistributionDefaultCacheBehaviorForwardedValuesArgs' forwarded_values: The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).
        :param Sequence['DistributionDefaultCacheBehaviorFunctionAssociationArgs'] function_associations: A config block that triggers a cloudfront function with specific actions (maximum 2).
        :param Sequence['DistributionDefaultCacheBehaviorLambdaFunctionAssociationArgs'] lambda_function_associations: A config block that triggers a lambda function with specific actions (maximum 4).
        :param int max_ttl: Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of `Cache-Control max-age`, `Cache-Control s-maxage`, and `Expires` headers.
        :param int min_ttl: Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.
        :param str origin_request_policy_id: Unique identifier of the origin request policy that is attached to the behavior.
        :param str realtime_log_config_arn: ARN of the real-time log configuration that is attached to this cache behavior.
        :param str response_headers_policy_id: Identifier for a response headers policy.
        :param bool smooth_streaming: Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.
        :param Sequence[str] trusted_key_groups: List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
        :param Sequence[str] trusted_signers: List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
        """
        DistributionDefaultCacheBehavior._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_methods=allowed_methods,
            cached_methods=cached_methods,
            target_origin_id=target_origin_id,
            viewer_protocol_policy=viewer_protocol_policy,
            cache_policy_id=cache_policy_id,
            compress=compress,
            default_ttl=default_ttl,
            field_level_encryption_id=field_level_encryption_id,
            forwarded_values=forwarded_values,
            function_associations=function_associations,
            lambda_function_associations=lambda_function_associations,
            max_ttl=max_ttl,
            min_ttl=min_ttl,
            origin_request_policy_id=origin_request_policy_id,
            realtime_log_config_arn=realtime_log_config_arn,
            response_headers_policy_id=response_headers_policy_id,
            smooth_streaming=smooth_streaming,
            trusted_key_groups=trusted_key_groups,
            trusted_signers=trusted_signers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_methods: Optional[Sequence[str]] = None,
             cached_methods: Optional[Sequence[str]] = None,
             target_origin_id: Optional[str] = None,
             viewer_protocol_policy: Optional[str] = None,
             cache_policy_id: Optional[str] = None,
             compress: Optional[bool] = None,
             default_ttl: Optional[int] = None,
             field_level_encryption_id: Optional[str] = None,
             forwarded_values: Optional['outputs.DistributionDefaultCacheBehaviorForwardedValues'] = None,
             function_associations: Optional[Sequence['outputs.DistributionDefaultCacheBehaviorFunctionAssociation']] = None,
             lambda_function_associations: Optional[Sequence['outputs.DistributionDefaultCacheBehaviorLambdaFunctionAssociation']] = None,
             max_ttl: Optional[int] = None,
             min_ttl: Optional[int] = None,
             origin_request_policy_id: Optional[str] = None,
             realtime_log_config_arn: Optional[str] = None,
             response_headers_policy_id: Optional[str] = None,
             smooth_streaming: Optional[bool] = None,
             trusted_key_groups: Optional[Sequence[str]] = None,
             trusted_signers: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if allowed_methods is None and 'allowedMethods' in kwargs:
            allowed_methods = kwargs['allowedMethods']
        if allowed_methods is None:
            raise TypeError("Missing 'allowed_methods' argument")
        if cached_methods is None and 'cachedMethods' in kwargs:
            cached_methods = kwargs['cachedMethods']
        if cached_methods is None:
            raise TypeError("Missing 'cached_methods' argument")
        if target_origin_id is None and 'targetOriginId' in kwargs:
            target_origin_id = kwargs['targetOriginId']
        if target_origin_id is None:
            raise TypeError("Missing 'target_origin_id' argument")
        if viewer_protocol_policy is None and 'viewerProtocolPolicy' in kwargs:
            viewer_protocol_policy = kwargs['viewerProtocolPolicy']
        if viewer_protocol_policy is None:
            raise TypeError("Missing 'viewer_protocol_policy' argument")
        if cache_policy_id is None and 'cachePolicyId' in kwargs:
            cache_policy_id = kwargs['cachePolicyId']
        if default_ttl is None and 'defaultTtl' in kwargs:
            default_ttl = kwargs['defaultTtl']
        if field_level_encryption_id is None and 'fieldLevelEncryptionId' in kwargs:
            field_level_encryption_id = kwargs['fieldLevelEncryptionId']
        if forwarded_values is None and 'forwardedValues' in kwargs:
            forwarded_values = kwargs['forwardedValues']
        if function_associations is None and 'functionAssociations' in kwargs:
            function_associations = kwargs['functionAssociations']
        if lambda_function_associations is None and 'lambdaFunctionAssociations' in kwargs:
            lambda_function_associations = kwargs['lambdaFunctionAssociations']
        if max_ttl is None and 'maxTtl' in kwargs:
            max_ttl = kwargs['maxTtl']
        if min_ttl is None and 'minTtl' in kwargs:
            min_ttl = kwargs['minTtl']
        if origin_request_policy_id is None and 'originRequestPolicyId' in kwargs:
            origin_request_policy_id = kwargs['originRequestPolicyId']
        if realtime_log_config_arn is None and 'realtimeLogConfigArn' in kwargs:
            realtime_log_config_arn = kwargs['realtimeLogConfigArn']
        if response_headers_policy_id is None and 'responseHeadersPolicyId' in kwargs:
            response_headers_policy_id = kwargs['responseHeadersPolicyId']
        if smooth_streaming is None and 'smoothStreaming' in kwargs:
            smooth_streaming = kwargs['smoothStreaming']
        if trusted_key_groups is None and 'trustedKeyGroups' in kwargs:
            trusted_key_groups = kwargs['trustedKeyGroups']
        if trusted_signers is None and 'trustedSigners' in kwargs:
            trusted_signers = kwargs['trustedSigners']

        _setter("allowed_methods", allowed_methods)
        _setter("cached_methods", cached_methods)
        _setter("target_origin_id", target_origin_id)
        _setter("viewer_protocol_policy", viewer_protocol_policy)
        if cache_policy_id is not None:
            _setter("cache_policy_id", cache_policy_id)
        if compress is not None:
            _setter("compress", compress)
        if default_ttl is not None:
            _setter("default_ttl", default_ttl)
        if field_level_encryption_id is not None:
            _setter("field_level_encryption_id", field_level_encryption_id)
        if forwarded_values is not None:
            _setter("forwarded_values", forwarded_values)
        if function_associations is not None:
            _setter("function_associations", function_associations)
        if lambda_function_associations is not None:
            _setter("lambda_function_associations", lambda_function_associations)
        if max_ttl is not None:
            _setter("max_ttl", max_ttl)
        if min_ttl is not None:
            _setter("min_ttl", min_ttl)
        if origin_request_policy_id is not None:
            _setter("origin_request_policy_id", origin_request_policy_id)
        if realtime_log_config_arn is not None:
            _setter("realtime_log_config_arn", realtime_log_config_arn)
        if response_headers_policy_id is not None:
            _setter("response_headers_policy_id", response_headers_policy_id)
        if smooth_streaming is not None:
            _setter("smooth_streaming", smooth_streaming)
        if trusted_key_groups is not None:
            _setter("trusted_key_groups", trusted_key_groups)
        if trusted_signers is not None:
            _setter("trusted_signers", trusted_signers)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="cachedMethods")
    def cached_methods(self) -> Sequence[str]:
        """
        Controls whether CloudFront caches the response to requests using the specified HTTP methods.
        """
        return pulumi.get(self, "cached_methods")

    @property
    @pulumi.getter(name="targetOriginId")
    def target_origin_id(self) -> str:
        """
        Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
        """
        return pulumi.get(self, "target_origin_id")

    @property
    @pulumi.getter(name="viewerProtocolPolicy")
    def viewer_protocol_policy(self) -> str:
        """
        Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of `allow-all`, `https-only`, or `redirect-to-https`.
        """
        return pulumi.get(self, "viewer_protocol_policy")

    @property
    @pulumi.getter(name="cachePolicyId")
    def cache_policy_id(self) -> Optional[str]:
        """
        Unique identifier of the cache policy that is attached to the cache behavior. If configuring the `default_cache_behavior` either `cache_policy_id` or `forwarded_values` must be set.
        """
        return pulumi.get(self, "cache_policy_id")

    @property
    @pulumi.getter
    def compress(self) -> Optional[bool]:
        """
        Whether you want CloudFront to automatically compress content for web requests that include `Accept-Encoding: gzip` in the request header (default: `false`).
        """
        return pulumi.get(self, "compress")

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[int]:
        """
        Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an `Cache-Control max-age` or `Expires` header.
        """
        return pulumi.get(self, "default_ttl")

    @property
    @pulumi.getter(name="fieldLevelEncryptionId")
    def field_level_encryption_id(self) -> Optional[str]:
        """
        Field level encryption configuration ID.
        """
        return pulumi.get(self, "field_level_encryption_id")

    @property
    @pulumi.getter(name="forwardedValues")
    def forwarded_values(self) -> Optional['outputs.DistributionDefaultCacheBehaviorForwardedValues']:
        """
        The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).
        """
        return pulumi.get(self, "forwarded_values")

    @property
    @pulumi.getter(name="functionAssociations")
    def function_associations(self) -> Optional[Sequence['outputs.DistributionDefaultCacheBehaviorFunctionAssociation']]:
        """
        A config block that triggers a cloudfront function with specific actions (maximum 2).
        """
        return pulumi.get(self, "function_associations")

    @property
    @pulumi.getter(name="lambdaFunctionAssociations")
    def lambda_function_associations(self) -> Optional[Sequence['outputs.DistributionDefaultCacheBehaviorLambdaFunctionAssociation']]:
        """
        A config block that triggers a lambda function with specific actions (maximum 4).
        """
        return pulumi.get(self, "lambda_function_associations")

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[int]:
        """
        Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of `Cache-Control max-age`, `Cache-Control s-maxage`, and `Expires` headers.
        """
        return pulumi.get(self, "max_ttl")

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> Optional[int]:
        """
        Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.
        """
        return pulumi.get(self, "min_ttl")

    @property
    @pulumi.getter(name="originRequestPolicyId")
    def origin_request_policy_id(self) -> Optional[str]:
        """
        Unique identifier of the origin request policy that is attached to the behavior.
        """
        return pulumi.get(self, "origin_request_policy_id")

    @property
    @pulumi.getter(name="realtimeLogConfigArn")
    def realtime_log_config_arn(self) -> Optional[str]:
        """
        ARN of the real-time log configuration that is attached to this cache behavior.
        """
        return pulumi.get(self, "realtime_log_config_arn")

    @property
    @pulumi.getter(name="responseHeadersPolicyId")
    def response_headers_policy_id(self) -> Optional[str]:
        """
        Identifier for a response headers policy.
        """
        return pulumi.get(self, "response_headers_policy_id")

    @property
    @pulumi.getter(name="smoothStreaming")
    def smooth_streaming(self) -> Optional[bool]:
        """
        Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.
        """
        return pulumi.get(self, "smooth_streaming")

    @property
    @pulumi.getter(name="trustedKeyGroups")
    def trusted_key_groups(self) -> Optional[Sequence[str]]:
        """
        List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
        """
        return pulumi.get(self, "trusted_key_groups")

    @property
    @pulumi.getter(name="trustedSigners")
    def trusted_signers(self) -> Optional[Sequence[str]]:
        """
        List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
        """
        return pulumi.get(self, "trusted_signers")


@pulumi.output_type
class DistributionDefaultCacheBehaviorForwardedValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryString":
            suggest = "query_string"
        elif key == "queryStringCacheKeys":
            suggest = "query_string_cache_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionDefaultCacheBehaviorForwardedValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionDefaultCacheBehaviorForwardedValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionDefaultCacheBehaviorForwardedValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookies: 'outputs.DistributionDefaultCacheBehaviorForwardedValuesCookies',
                 query_string: bool,
                 headers: Optional[Sequence[str]] = None,
                 query_string_cache_keys: Optional[Sequence[str]] = None):
        """
        :param 'DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs' cookies: The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).
        :param bool query_string: Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.
        :param Sequence[str] headers: Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify `*` to include all headers.
        :param Sequence[str] query_string_cache_keys: When specified, along with a value of `true` for `query_string`, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of `true` for `query_string`, all query string keys are cached.
        """
        DistributionDefaultCacheBehaviorForwardedValues._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookies=cookies,
            query_string=query_string,
            headers=headers,
            query_string_cache_keys=query_string_cache_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookies: Optional['outputs.DistributionDefaultCacheBehaviorForwardedValuesCookies'] = None,
             query_string: Optional[bool] = None,
             headers: Optional[Sequence[str]] = None,
             query_string_cache_keys: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookies is None:
            raise TypeError("Missing 'cookies' argument")
        if query_string is None and 'queryString' in kwargs:
            query_string = kwargs['queryString']
        if query_string is None:
            raise TypeError("Missing 'query_string' argument")
        if query_string_cache_keys is None and 'queryStringCacheKeys' in kwargs:
            query_string_cache_keys = kwargs['queryStringCacheKeys']

        _setter("cookies", cookies)
        _setter("query_string", query_string)
        if headers is not None:
            _setter("headers", headers)
        if query_string_cache_keys is not None:
            _setter("query_string_cache_keys", query_string_cache_keys)

    @property
    @pulumi.getter
    def cookies(self) -> 'outputs.DistributionDefaultCacheBehaviorForwardedValuesCookies':
        """
        The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).
        """
        return pulumi.get(self, "cookies")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> bool:
        """
        Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.
        """
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        """
        Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify `*` to include all headers.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="queryStringCacheKeys")
    def query_string_cache_keys(self) -> Optional[Sequence[str]]:
        """
        When specified, along with a value of `true` for `query_string`, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of `true` for `query_string`, all query string keys are cached.
        """
        return pulumi.get(self, "query_string_cache_keys")


@pulumi.output_type
class DistributionDefaultCacheBehaviorForwardedValuesCookies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "whitelistedNames":
            suggest = "whitelisted_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionDefaultCacheBehaviorForwardedValuesCookies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionDefaultCacheBehaviorForwardedValuesCookies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionDefaultCacheBehaviorForwardedValuesCookies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forward: str,
                 whitelisted_names: Optional[Sequence[str]] = None):
        """
        :param str forward: Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify `all`, `none` or `whitelist`. If `whitelist`, you must include the subsequent `whitelisted_names`.
        :param Sequence[str] whitelisted_names: If you have specified `whitelist` to `forward`, the whitelisted cookies that you want CloudFront to forward to your origin.
        """
        DistributionDefaultCacheBehaviorForwardedValuesCookies._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forward=forward,
            whitelisted_names=whitelisted_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forward: Optional[str] = None,
             whitelisted_names: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if forward is None:
            raise TypeError("Missing 'forward' argument")
        if whitelisted_names is None and 'whitelistedNames' in kwargs:
            whitelisted_names = kwargs['whitelistedNames']

        _setter("forward", forward)
        if whitelisted_names is not None:
            _setter("whitelisted_names", whitelisted_names)

    @property
    @pulumi.getter
    def forward(self) -> str:
        """
        Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify `all`, `none` or `whitelist`. If `whitelist`, you must include the subsequent `whitelisted_names`.
        """
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter(name="whitelistedNames")
    def whitelisted_names(self) -> Optional[Sequence[str]]:
        """
        If you have specified `whitelist` to `forward`, the whitelisted cookies that you want CloudFront to forward to your origin.
        """
        return pulumi.get(self, "whitelisted_names")


@pulumi.output_type
class DistributionDefaultCacheBehaviorFunctionAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventType":
            suggest = "event_type"
        elif key == "functionArn":
            suggest = "function_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionDefaultCacheBehaviorFunctionAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionDefaultCacheBehaviorFunctionAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionDefaultCacheBehaviorFunctionAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_type: str,
                 function_arn: str):
        """
        :param str event_type: Specific event to trigger this function. Valid values: `viewer-request` or `viewer-response`.
        :param str function_arn: ARN of the CloudFront function.
        """
        DistributionDefaultCacheBehaviorFunctionAssociation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_type=event_type,
            function_arn=function_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_type: Optional[str] = None,
             function_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if event_type is None and 'eventType' in kwargs:
            event_type = kwargs['eventType']
        if event_type is None:
            raise TypeError("Missing 'event_type' argument")
        if function_arn is None and 'functionArn' in kwargs:
            function_arn = kwargs['functionArn']
        if function_arn is None:
            raise TypeError("Missing 'function_arn' argument")

        _setter("event_type", event_type)
        _setter("function_arn", function_arn)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        """
        Specific event to trigger this function. Valid values: `viewer-request` or `viewer-response`.
        """
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> str:
        """
        ARN of the CloudFront function.
        """
        return pulumi.get(self, "function_arn")


@pulumi.output_type
class DistributionDefaultCacheBehaviorLambdaFunctionAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventType":
            suggest = "event_type"
        elif key == "lambdaArn":
            suggest = "lambda_arn"
        elif key == "includeBody":
            suggest = "include_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionDefaultCacheBehaviorLambdaFunctionAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionDefaultCacheBehaviorLambdaFunctionAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionDefaultCacheBehaviorLambdaFunctionAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_type: str,
                 lambda_arn: str,
                 include_body: Optional[bool] = None):
        """
        :param str event_type: Specific event to trigger this function. Valid values: `viewer-request`, `origin-request`, `viewer-response`, `origin-response`.
        :param str lambda_arn: ARN of the Lambda function.
        :param bool include_body: When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
        """
        DistributionDefaultCacheBehaviorLambdaFunctionAssociation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_type=event_type,
            lambda_arn=lambda_arn,
            include_body=include_body,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_type: Optional[str] = None,
             lambda_arn: Optional[str] = None,
             include_body: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if event_type is None and 'eventType' in kwargs:
            event_type = kwargs['eventType']
        if event_type is None:
            raise TypeError("Missing 'event_type' argument")
        if lambda_arn is None and 'lambdaArn' in kwargs:
            lambda_arn = kwargs['lambdaArn']
        if lambda_arn is None:
            raise TypeError("Missing 'lambda_arn' argument")
        if include_body is None and 'includeBody' in kwargs:
            include_body = kwargs['includeBody']

        _setter("event_type", event_type)
        _setter("lambda_arn", lambda_arn)
        if include_body is not None:
            _setter("include_body", include_body)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        """
        Specific event to trigger this function. Valid values: `viewer-request`, `origin-request`, `viewer-response`, `origin-response`.
        """
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> str:
        """
        ARN of the Lambda function.
        """
        return pulumi.get(self, "lambda_arn")

    @property
    @pulumi.getter(name="includeBody")
    def include_body(self) -> Optional[bool]:
        """
        When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "include_body")


@pulumi.output_type
class DistributionLoggingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeCookies":
            suggest = "include_cookies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionLoggingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionLoggingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionLoggingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 include_cookies: Optional[bool] = None,
                 prefix: Optional[str] = None):
        """
        :param str bucket: Amazon S3 bucket to store the access logs in, for example, `myawslogbucket.s3.amazonaws.com`.
        :param bool include_cookies: Whether to include cookies in access logs (default: `false`).
        :param str prefix: Prefix to the access log filenames for this distribution, for example, `myprefix/`.
        """
        DistributionLoggingConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            include_cookies=include_cookies,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             include_cookies: Optional[bool] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if include_cookies is None and 'includeCookies' in kwargs:
            include_cookies = kwargs['includeCookies']

        _setter("bucket", bucket)
        if include_cookies is not None:
            _setter("include_cookies", include_cookies)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Amazon S3 bucket to store the access logs in, for example, `myawslogbucket.s3.amazonaws.com`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="includeCookies")
    def include_cookies(self) -> Optional[bool]:
        """
        Whether to include cookies in access logs (default: `false`).
        """
        return pulumi.get(self, "include_cookies")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix to the access log filenames for this distribution, for example, `myprefix/`.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class DistributionOrderedCacheBehavior(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "cachedMethods":
            suggest = "cached_methods"
        elif key == "pathPattern":
            suggest = "path_pattern"
        elif key == "targetOriginId":
            suggest = "target_origin_id"
        elif key == "viewerProtocolPolicy":
            suggest = "viewer_protocol_policy"
        elif key == "cachePolicyId":
            suggest = "cache_policy_id"
        elif key == "defaultTtl":
            suggest = "default_ttl"
        elif key == "fieldLevelEncryptionId":
            suggest = "field_level_encryption_id"
        elif key == "forwardedValues":
            suggest = "forwarded_values"
        elif key == "functionAssociations":
            suggest = "function_associations"
        elif key == "lambdaFunctionAssociations":
            suggest = "lambda_function_associations"
        elif key == "maxTtl":
            suggest = "max_ttl"
        elif key == "minTtl":
            suggest = "min_ttl"
        elif key == "originRequestPolicyId":
            suggest = "origin_request_policy_id"
        elif key == "realtimeLogConfigArn":
            suggest = "realtime_log_config_arn"
        elif key == "responseHeadersPolicyId":
            suggest = "response_headers_policy_id"
        elif key == "smoothStreaming":
            suggest = "smooth_streaming"
        elif key == "trustedKeyGroups":
            suggest = "trusted_key_groups"
        elif key == "trustedSigners":
            suggest = "trusted_signers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOrderedCacheBehavior. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOrderedCacheBehavior.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOrderedCacheBehavior.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_methods: Sequence[str],
                 cached_methods: Sequence[str],
                 path_pattern: str,
                 target_origin_id: str,
                 viewer_protocol_policy: str,
                 cache_policy_id: Optional[str] = None,
                 compress: Optional[bool] = None,
                 default_ttl: Optional[int] = None,
                 field_level_encryption_id: Optional[str] = None,
                 forwarded_values: Optional['outputs.DistributionOrderedCacheBehaviorForwardedValues'] = None,
                 function_associations: Optional[Sequence['outputs.DistributionOrderedCacheBehaviorFunctionAssociation']] = None,
                 lambda_function_associations: Optional[Sequence['outputs.DistributionOrderedCacheBehaviorLambdaFunctionAssociation']] = None,
                 max_ttl: Optional[int] = None,
                 min_ttl: Optional[int] = None,
                 origin_request_policy_id: Optional[str] = None,
                 realtime_log_config_arn: Optional[str] = None,
                 response_headers_policy_id: Optional[str] = None,
                 smooth_streaming: Optional[bool] = None,
                 trusted_key_groups: Optional[Sequence[str]] = None,
                 trusted_signers: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] allowed_methods: Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.
        :param Sequence[str] cached_methods: Controls whether CloudFront caches the response to requests using the specified HTTP methods.
        :param str path_pattern: Pattern (for example, `images/*.jpg`) that specifies which requests you want this cache behavior to apply to.
        :param str target_origin_id: Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
        :param str viewer_protocol_policy: Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of `allow-all`, `https-only`, or `redirect-to-https`.
        :param str cache_policy_id: Unique identifier of the cache policy that is attached to the cache behavior. If configuring the `default_cache_behavior` either `cache_policy_id` or `forwarded_values` must be set.
        :param bool compress: Whether you want CloudFront to automatically compress content for web requests that include `Accept-Encoding: gzip` in the request header (default: `false`).
        :param int default_ttl: Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an `Cache-Control max-age` or `Expires` header.
        :param str field_level_encryption_id: Field level encryption configuration ID.
        :param 'DistributionOrderedCacheBehaviorForwardedValuesArgs' forwarded_values: The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).
        :param Sequence['DistributionOrderedCacheBehaviorFunctionAssociationArgs'] function_associations: A config block that triggers a cloudfront function with specific actions (maximum 2).
        :param Sequence['DistributionOrderedCacheBehaviorLambdaFunctionAssociationArgs'] lambda_function_associations: A config block that triggers a lambda function with specific actions (maximum 4).
        :param int max_ttl: Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of `Cache-Control max-age`, `Cache-Control s-maxage`, and `Expires` headers.
        :param int min_ttl: Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.
        :param str origin_request_policy_id: Unique identifier of the origin request policy that is attached to the behavior.
        :param str realtime_log_config_arn: ARN of the real-time log configuration that is attached to this cache behavior.
        :param str response_headers_policy_id: Identifier for a response headers policy.
        :param bool smooth_streaming: Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.
        :param Sequence[str] trusted_key_groups: List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
        :param Sequence[str] trusted_signers: List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
        """
        DistributionOrderedCacheBehavior._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_methods=allowed_methods,
            cached_methods=cached_methods,
            path_pattern=path_pattern,
            target_origin_id=target_origin_id,
            viewer_protocol_policy=viewer_protocol_policy,
            cache_policy_id=cache_policy_id,
            compress=compress,
            default_ttl=default_ttl,
            field_level_encryption_id=field_level_encryption_id,
            forwarded_values=forwarded_values,
            function_associations=function_associations,
            lambda_function_associations=lambda_function_associations,
            max_ttl=max_ttl,
            min_ttl=min_ttl,
            origin_request_policy_id=origin_request_policy_id,
            realtime_log_config_arn=realtime_log_config_arn,
            response_headers_policy_id=response_headers_policy_id,
            smooth_streaming=smooth_streaming,
            trusted_key_groups=trusted_key_groups,
            trusted_signers=trusted_signers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_methods: Optional[Sequence[str]] = None,
             cached_methods: Optional[Sequence[str]] = None,
             path_pattern: Optional[str] = None,
             target_origin_id: Optional[str] = None,
             viewer_protocol_policy: Optional[str] = None,
             cache_policy_id: Optional[str] = None,
             compress: Optional[bool] = None,
             default_ttl: Optional[int] = None,
             field_level_encryption_id: Optional[str] = None,
             forwarded_values: Optional['outputs.DistributionOrderedCacheBehaviorForwardedValues'] = None,
             function_associations: Optional[Sequence['outputs.DistributionOrderedCacheBehaviorFunctionAssociation']] = None,
             lambda_function_associations: Optional[Sequence['outputs.DistributionOrderedCacheBehaviorLambdaFunctionAssociation']] = None,
             max_ttl: Optional[int] = None,
             min_ttl: Optional[int] = None,
             origin_request_policy_id: Optional[str] = None,
             realtime_log_config_arn: Optional[str] = None,
             response_headers_policy_id: Optional[str] = None,
             smooth_streaming: Optional[bool] = None,
             trusted_key_groups: Optional[Sequence[str]] = None,
             trusted_signers: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if allowed_methods is None and 'allowedMethods' in kwargs:
            allowed_methods = kwargs['allowedMethods']
        if allowed_methods is None:
            raise TypeError("Missing 'allowed_methods' argument")
        if cached_methods is None and 'cachedMethods' in kwargs:
            cached_methods = kwargs['cachedMethods']
        if cached_methods is None:
            raise TypeError("Missing 'cached_methods' argument")
        if path_pattern is None and 'pathPattern' in kwargs:
            path_pattern = kwargs['pathPattern']
        if path_pattern is None:
            raise TypeError("Missing 'path_pattern' argument")
        if target_origin_id is None and 'targetOriginId' in kwargs:
            target_origin_id = kwargs['targetOriginId']
        if target_origin_id is None:
            raise TypeError("Missing 'target_origin_id' argument")
        if viewer_protocol_policy is None and 'viewerProtocolPolicy' in kwargs:
            viewer_protocol_policy = kwargs['viewerProtocolPolicy']
        if viewer_protocol_policy is None:
            raise TypeError("Missing 'viewer_protocol_policy' argument")
        if cache_policy_id is None and 'cachePolicyId' in kwargs:
            cache_policy_id = kwargs['cachePolicyId']
        if default_ttl is None and 'defaultTtl' in kwargs:
            default_ttl = kwargs['defaultTtl']
        if field_level_encryption_id is None and 'fieldLevelEncryptionId' in kwargs:
            field_level_encryption_id = kwargs['fieldLevelEncryptionId']
        if forwarded_values is None and 'forwardedValues' in kwargs:
            forwarded_values = kwargs['forwardedValues']
        if function_associations is None and 'functionAssociations' in kwargs:
            function_associations = kwargs['functionAssociations']
        if lambda_function_associations is None and 'lambdaFunctionAssociations' in kwargs:
            lambda_function_associations = kwargs['lambdaFunctionAssociations']
        if max_ttl is None and 'maxTtl' in kwargs:
            max_ttl = kwargs['maxTtl']
        if min_ttl is None and 'minTtl' in kwargs:
            min_ttl = kwargs['minTtl']
        if origin_request_policy_id is None and 'originRequestPolicyId' in kwargs:
            origin_request_policy_id = kwargs['originRequestPolicyId']
        if realtime_log_config_arn is None and 'realtimeLogConfigArn' in kwargs:
            realtime_log_config_arn = kwargs['realtimeLogConfigArn']
        if response_headers_policy_id is None and 'responseHeadersPolicyId' in kwargs:
            response_headers_policy_id = kwargs['responseHeadersPolicyId']
        if smooth_streaming is None and 'smoothStreaming' in kwargs:
            smooth_streaming = kwargs['smoothStreaming']
        if trusted_key_groups is None and 'trustedKeyGroups' in kwargs:
            trusted_key_groups = kwargs['trustedKeyGroups']
        if trusted_signers is None and 'trustedSigners' in kwargs:
            trusted_signers = kwargs['trustedSigners']

        _setter("allowed_methods", allowed_methods)
        _setter("cached_methods", cached_methods)
        _setter("path_pattern", path_pattern)
        _setter("target_origin_id", target_origin_id)
        _setter("viewer_protocol_policy", viewer_protocol_policy)
        if cache_policy_id is not None:
            _setter("cache_policy_id", cache_policy_id)
        if compress is not None:
            _setter("compress", compress)
        if default_ttl is not None:
            _setter("default_ttl", default_ttl)
        if field_level_encryption_id is not None:
            _setter("field_level_encryption_id", field_level_encryption_id)
        if forwarded_values is not None:
            _setter("forwarded_values", forwarded_values)
        if function_associations is not None:
            _setter("function_associations", function_associations)
        if lambda_function_associations is not None:
            _setter("lambda_function_associations", lambda_function_associations)
        if max_ttl is not None:
            _setter("max_ttl", max_ttl)
        if min_ttl is not None:
            _setter("min_ttl", min_ttl)
        if origin_request_policy_id is not None:
            _setter("origin_request_policy_id", origin_request_policy_id)
        if realtime_log_config_arn is not None:
            _setter("realtime_log_config_arn", realtime_log_config_arn)
        if response_headers_policy_id is not None:
            _setter("response_headers_policy_id", response_headers_policy_id)
        if smooth_streaming is not None:
            _setter("smooth_streaming", smooth_streaming)
        if trusted_key_groups is not None:
            _setter("trusted_key_groups", trusted_key_groups)
        if trusted_signers is not None:
            _setter("trusted_signers", trusted_signers)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="cachedMethods")
    def cached_methods(self) -> Sequence[str]:
        """
        Controls whether CloudFront caches the response to requests using the specified HTTP methods.
        """
        return pulumi.get(self, "cached_methods")

    @property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> str:
        """
        Pattern (for example, `images/*.jpg`) that specifies which requests you want this cache behavior to apply to.
        """
        return pulumi.get(self, "path_pattern")

    @property
    @pulumi.getter(name="targetOriginId")
    def target_origin_id(self) -> str:
        """
        Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
        """
        return pulumi.get(self, "target_origin_id")

    @property
    @pulumi.getter(name="viewerProtocolPolicy")
    def viewer_protocol_policy(self) -> str:
        """
        Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of `allow-all`, `https-only`, or `redirect-to-https`.
        """
        return pulumi.get(self, "viewer_protocol_policy")

    @property
    @pulumi.getter(name="cachePolicyId")
    def cache_policy_id(self) -> Optional[str]:
        """
        Unique identifier of the cache policy that is attached to the cache behavior. If configuring the `default_cache_behavior` either `cache_policy_id` or `forwarded_values` must be set.
        """
        return pulumi.get(self, "cache_policy_id")

    @property
    @pulumi.getter
    def compress(self) -> Optional[bool]:
        """
        Whether you want CloudFront to automatically compress content for web requests that include `Accept-Encoding: gzip` in the request header (default: `false`).
        """
        return pulumi.get(self, "compress")

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[int]:
        """
        Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an `Cache-Control max-age` or `Expires` header.
        """
        return pulumi.get(self, "default_ttl")

    @property
    @pulumi.getter(name="fieldLevelEncryptionId")
    def field_level_encryption_id(self) -> Optional[str]:
        """
        Field level encryption configuration ID.
        """
        return pulumi.get(self, "field_level_encryption_id")

    @property
    @pulumi.getter(name="forwardedValues")
    def forwarded_values(self) -> Optional['outputs.DistributionOrderedCacheBehaviorForwardedValues']:
        """
        The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).
        """
        return pulumi.get(self, "forwarded_values")

    @property
    @pulumi.getter(name="functionAssociations")
    def function_associations(self) -> Optional[Sequence['outputs.DistributionOrderedCacheBehaviorFunctionAssociation']]:
        """
        A config block that triggers a cloudfront function with specific actions (maximum 2).
        """
        return pulumi.get(self, "function_associations")

    @property
    @pulumi.getter(name="lambdaFunctionAssociations")
    def lambda_function_associations(self) -> Optional[Sequence['outputs.DistributionOrderedCacheBehaviorLambdaFunctionAssociation']]:
        """
        A config block that triggers a lambda function with specific actions (maximum 4).
        """
        return pulumi.get(self, "lambda_function_associations")

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[int]:
        """
        Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of `Cache-Control max-age`, `Cache-Control s-maxage`, and `Expires` headers.
        """
        return pulumi.get(self, "max_ttl")

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> Optional[int]:
        """
        Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.
        """
        return pulumi.get(self, "min_ttl")

    @property
    @pulumi.getter(name="originRequestPolicyId")
    def origin_request_policy_id(self) -> Optional[str]:
        """
        Unique identifier of the origin request policy that is attached to the behavior.
        """
        return pulumi.get(self, "origin_request_policy_id")

    @property
    @pulumi.getter(name="realtimeLogConfigArn")
    def realtime_log_config_arn(self) -> Optional[str]:
        """
        ARN of the real-time log configuration that is attached to this cache behavior.
        """
        return pulumi.get(self, "realtime_log_config_arn")

    @property
    @pulumi.getter(name="responseHeadersPolicyId")
    def response_headers_policy_id(self) -> Optional[str]:
        """
        Identifier for a response headers policy.
        """
        return pulumi.get(self, "response_headers_policy_id")

    @property
    @pulumi.getter(name="smoothStreaming")
    def smooth_streaming(self) -> Optional[bool]:
        """
        Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.
        """
        return pulumi.get(self, "smooth_streaming")

    @property
    @pulumi.getter(name="trustedKeyGroups")
    def trusted_key_groups(self) -> Optional[Sequence[str]]:
        """
        List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
        """
        return pulumi.get(self, "trusted_key_groups")

    @property
    @pulumi.getter(name="trustedSigners")
    def trusted_signers(self) -> Optional[Sequence[str]]:
        """
        List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
        """
        return pulumi.get(self, "trusted_signers")


@pulumi.output_type
class DistributionOrderedCacheBehaviorForwardedValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryString":
            suggest = "query_string"
        elif key == "queryStringCacheKeys":
            suggest = "query_string_cache_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOrderedCacheBehaviorForwardedValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOrderedCacheBehaviorForwardedValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOrderedCacheBehaviorForwardedValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookies: 'outputs.DistributionOrderedCacheBehaviorForwardedValuesCookies',
                 query_string: bool,
                 headers: Optional[Sequence[str]] = None,
                 query_string_cache_keys: Optional[Sequence[str]] = None):
        """
        :param 'DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs' cookies: The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).
        :param bool query_string: Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.
        :param Sequence[str] headers: Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify `*` to include all headers.
        :param Sequence[str] query_string_cache_keys: When specified, along with a value of `true` for `query_string`, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of `true` for `query_string`, all query string keys are cached.
        """
        DistributionOrderedCacheBehaviorForwardedValues._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookies=cookies,
            query_string=query_string,
            headers=headers,
            query_string_cache_keys=query_string_cache_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookies: Optional['outputs.DistributionOrderedCacheBehaviorForwardedValuesCookies'] = None,
             query_string: Optional[bool] = None,
             headers: Optional[Sequence[str]] = None,
             query_string_cache_keys: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookies is None:
            raise TypeError("Missing 'cookies' argument")
        if query_string is None and 'queryString' in kwargs:
            query_string = kwargs['queryString']
        if query_string is None:
            raise TypeError("Missing 'query_string' argument")
        if query_string_cache_keys is None and 'queryStringCacheKeys' in kwargs:
            query_string_cache_keys = kwargs['queryStringCacheKeys']

        _setter("cookies", cookies)
        _setter("query_string", query_string)
        if headers is not None:
            _setter("headers", headers)
        if query_string_cache_keys is not None:
            _setter("query_string_cache_keys", query_string_cache_keys)

    @property
    @pulumi.getter
    def cookies(self) -> 'outputs.DistributionOrderedCacheBehaviorForwardedValuesCookies':
        """
        The forwarded values cookies that specifies how CloudFront handles cookies (maximum one).
        """
        return pulumi.get(self, "cookies")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> bool:
        """
        Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.
        """
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        """
        Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify `*` to include all headers.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="queryStringCacheKeys")
    def query_string_cache_keys(self) -> Optional[Sequence[str]]:
        """
        When specified, along with a value of `true` for `query_string`, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of `true` for `query_string`, all query string keys are cached.
        """
        return pulumi.get(self, "query_string_cache_keys")


@pulumi.output_type
class DistributionOrderedCacheBehaviorForwardedValuesCookies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "whitelistedNames":
            suggest = "whitelisted_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOrderedCacheBehaviorForwardedValuesCookies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOrderedCacheBehaviorForwardedValuesCookies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOrderedCacheBehaviorForwardedValuesCookies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forward: str,
                 whitelisted_names: Optional[Sequence[str]] = None):
        """
        :param str forward: Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify `all`, `none` or `whitelist`. If `whitelist`, you must include the subsequent `whitelisted_names`.
        :param Sequence[str] whitelisted_names: If you have specified `whitelist` to `forward`, the whitelisted cookies that you want CloudFront to forward to your origin.
        """
        DistributionOrderedCacheBehaviorForwardedValuesCookies._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forward=forward,
            whitelisted_names=whitelisted_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forward: Optional[str] = None,
             whitelisted_names: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if forward is None:
            raise TypeError("Missing 'forward' argument")
        if whitelisted_names is None and 'whitelistedNames' in kwargs:
            whitelisted_names = kwargs['whitelistedNames']

        _setter("forward", forward)
        if whitelisted_names is not None:
            _setter("whitelisted_names", whitelisted_names)

    @property
    @pulumi.getter
    def forward(self) -> str:
        """
        Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify `all`, `none` or `whitelist`. If `whitelist`, you must include the subsequent `whitelisted_names`.
        """
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter(name="whitelistedNames")
    def whitelisted_names(self) -> Optional[Sequence[str]]:
        """
        If you have specified `whitelist` to `forward`, the whitelisted cookies that you want CloudFront to forward to your origin.
        """
        return pulumi.get(self, "whitelisted_names")


@pulumi.output_type
class DistributionOrderedCacheBehaviorFunctionAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventType":
            suggest = "event_type"
        elif key == "functionArn":
            suggest = "function_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOrderedCacheBehaviorFunctionAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOrderedCacheBehaviorFunctionAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOrderedCacheBehaviorFunctionAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_type: str,
                 function_arn: str):
        """
        :param str event_type: Specific event to trigger this function. Valid values: `viewer-request` or `viewer-response`.
        :param str function_arn: ARN of the CloudFront function.
        """
        DistributionOrderedCacheBehaviorFunctionAssociation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_type=event_type,
            function_arn=function_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_type: Optional[str] = None,
             function_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if event_type is None and 'eventType' in kwargs:
            event_type = kwargs['eventType']
        if event_type is None:
            raise TypeError("Missing 'event_type' argument")
        if function_arn is None and 'functionArn' in kwargs:
            function_arn = kwargs['functionArn']
        if function_arn is None:
            raise TypeError("Missing 'function_arn' argument")

        _setter("event_type", event_type)
        _setter("function_arn", function_arn)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        """
        Specific event to trigger this function. Valid values: `viewer-request` or `viewer-response`.
        """
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> str:
        """
        ARN of the CloudFront function.
        """
        return pulumi.get(self, "function_arn")


@pulumi.output_type
class DistributionOrderedCacheBehaviorLambdaFunctionAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventType":
            suggest = "event_type"
        elif key == "lambdaArn":
            suggest = "lambda_arn"
        elif key == "includeBody":
            suggest = "include_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOrderedCacheBehaviorLambdaFunctionAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOrderedCacheBehaviorLambdaFunctionAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOrderedCacheBehaviorLambdaFunctionAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_type: str,
                 lambda_arn: str,
                 include_body: Optional[bool] = None):
        """
        :param str event_type: Specific event to trigger this function. Valid values: `viewer-request`, `origin-request`, `viewer-response`, `origin-response`.
        :param str lambda_arn: ARN of the Lambda function.
        :param bool include_body: When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
        """
        DistributionOrderedCacheBehaviorLambdaFunctionAssociation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_type=event_type,
            lambda_arn=lambda_arn,
            include_body=include_body,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_type: Optional[str] = None,
             lambda_arn: Optional[str] = None,
             include_body: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if event_type is None and 'eventType' in kwargs:
            event_type = kwargs['eventType']
        if event_type is None:
            raise TypeError("Missing 'event_type' argument")
        if lambda_arn is None and 'lambdaArn' in kwargs:
            lambda_arn = kwargs['lambdaArn']
        if lambda_arn is None:
            raise TypeError("Missing 'lambda_arn' argument")
        if include_body is None and 'includeBody' in kwargs:
            include_body = kwargs['includeBody']

        _setter("event_type", event_type)
        _setter("lambda_arn", lambda_arn)
        if include_body is not None:
            _setter("include_body", include_body)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        """
        Specific event to trigger this function. Valid values: `viewer-request`, `origin-request`, `viewer-response`, `origin-response`.
        """
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> str:
        """
        ARN of the Lambda function.
        """
        return pulumi.get(self, "lambda_arn")

    @property
    @pulumi.getter(name="includeBody")
    def include_body(self) -> Optional[bool]:
        """
        When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
        """
        return pulumi.get(self, "include_body")


@pulumi.output_type
class DistributionOrigin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "originId":
            suggest = "origin_id"
        elif key == "connectionAttempts":
            suggest = "connection_attempts"
        elif key == "connectionTimeout":
            suggest = "connection_timeout"
        elif key == "customHeaders":
            suggest = "custom_headers"
        elif key == "customOriginConfig":
            suggest = "custom_origin_config"
        elif key == "originAccessControlId":
            suggest = "origin_access_control_id"
        elif key == "originPath":
            suggest = "origin_path"
        elif key == "originShield":
            suggest = "origin_shield"
        elif key == "s3OriginConfig":
            suggest = "s3_origin_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOrigin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOrigin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOrigin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: str,
                 origin_id: str,
                 connection_attempts: Optional[int] = None,
                 connection_timeout: Optional[int] = None,
                 custom_headers: Optional[Sequence['outputs.DistributionOriginCustomHeader']] = None,
                 custom_origin_config: Optional['outputs.DistributionOriginCustomOriginConfig'] = None,
                 origin_access_control_id: Optional[str] = None,
                 origin_path: Optional[str] = None,
                 origin_shield: Optional['outputs.DistributionOriginOriginShield'] = None,
                 s3_origin_config: Optional['outputs.DistributionOriginS3OriginConfig'] = None):
        """
        :param str domain_name: DNS domain name of either the S3 bucket, or web site of your custom origin.
        :param str origin_id: Unique identifier of the member origin.
        :param int connection_attempts: Number of times that CloudFront attempts to connect to the origin. Must be between 1-3. Defaults to 3.
        :param int connection_timeout: Number of seconds that CloudFront waits when trying to establish a connection to the origin. Must be between 1-10. Defaults to 10.
        :param Sequence['DistributionOriginCustomHeaderArgs'] custom_headers: One or more sub-resources with `name` and `value` parameters that specify header data that will be sent to the origin (multiples allowed).
        :param 'DistributionOriginCustomOriginConfigArgs' custom_origin_config: The CloudFront custom origin configuration information. If an S3 origin is required, use `origin_access_control_id` or `s3_origin_config` instead.
        :param str origin_access_control_id: Unique identifier of a [CloudFront origin access control][8] for this origin.
        :param str origin_path: Optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.
        :param 'DistributionOriginOriginShieldArgs' origin_shield: CloudFront Origin Shield configuration information. Using Origin Shield can help reduce the load on your origin. For more information, see [Using Origin Shield](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html) in the Amazon CloudFront Developer Guide.
        :param 'DistributionOriginS3OriginConfigArgs' s3_origin_config: CloudFront S3 origin configuration information. If a custom origin is required, use `custom_origin_config` instead.
        """
        DistributionOrigin._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain_name=domain_name,
            origin_id=origin_id,
            connection_attempts=connection_attempts,
            connection_timeout=connection_timeout,
            custom_headers=custom_headers,
            custom_origin_config=custom_origin_config,
            origin_access_control_id=origin_access_control_id,
            origin_path=origin_path,
            origin_shield=origin_shield,
            s3_origin_config=s3_origin_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain_name: Optional[str] = None,
             origin_id: Optional[str] = None,
             connection_attempts: Optional[int] = None,
             connection_timeout: Optional[int] = None,
             custom_headers: Optional[Sequence['outputs.DistributionOriginCustomHeader']] = None,
             custom_origin_config: Optional['outputs.DistributionOriginCustomOriginConfig'] = None,
             origin_access_control_id: Optional[str] = None,
             origin_path: Optional[str] = None,
             origin_shield: Optional['outputs.DistributionOriginOriginShield'] = None,
             s3_origin_config: Optional['outputs.DistributionOriginS3OriginConfig'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if domain_name is None and 'domainName' in kwargs:
            domain_name = kwargs['domainName']
        if domain_name is None:
            raise TypeError("Missing 'domain_name' argument")
        if origin_id is None and 'originId' in kwargs:
            origin_id = kwargs['originId']
        if origin_id is None:
            raise TypeError("Missing 'origin_id' argument")
        if connection_attempts is None and 'connectionAttempts' in kwargs:
            connection_attempts = kwargs['connectionAttempts']
        if connection_timeout is None and 'connectionTimeout' in kwargs:
            connection_timeout = kwargs['connectionTimeout']
        if custom_headers is None and 'customHeaders' in kwargs:
            custom_headers = kwargs['customHeaders']
        if custom_origin_config is None and 'customOriginConfig' in kwargs:
            custom_origin_config = kwargs['customOriginConfig']
        if origin_access_control_id is None and 'originAccessControlId' in kwargs:
            origin_access_control_id = kwargs['originAccessControlId']
        if origin_path is None and 'originPath' in kwargs:
            origin_path = kwargs['originPath']
        if origin_shield is None and 'originShield' in kwargs:
            origin_shield = kwargs['originShield']
        if s3_origin_config is None and 's3OriginConfig' in kwargs:
            s3_origin_config = kwargs['s3OriginConfig']

        _setter("domain_name", domain_name)
        _setter("origin_id", origin_id)
        if connection_attempts is not None:
            _setter("connection_attempts", connection_attempts)
        if connection_timeout is not None:
            _setter("connection_timeout", connection_timeout)
        if custom_headers is not None:
            _setter("custom_headers", custom_headers)
        if custom_origin_config is not None:
            _setter("custom_origin_config", custom_origin_config)
        if origin_access_control_id is not None:
            _setter("origin_access_control_id", origin_access_control_id)
        if origin_path is not None:
            _setter("origin_path", origin_path)
        if origin_shield is not None:
            _setter("origin_shield", origin_shield)
        if s3_origin_config is not None:
            _setter("s3_origin_config", s3_origin_config)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        DNS domain name of either the S3 bucket, or web site of your custom origin.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        """
        Unique identifier of the member origin.
        """
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="connectionAttempts")
    def connection_attempts(self) -> Optional[int]:
        """
        Number of times that CloudFront attempts to connect to the origin. Must be between 1-3. Defaults to 3.
        """
        return pulumi.get(self, "connection_attempts")

    @property
    @pulumi.getter(name="connectionTimeout")
    def connection_timeout(self) -> Optional[int]:
        """
        Number of seconds that CloudFront waits when trying to establish a connection to the origin. Must be between 1-10. Defaults to 10.
        """
        return pulumi.get(self, "connection_timeout")

    @property
    @pulumi.getter(name="customHeaders")
    def custom_headers(self) -> Optional[Sequence['outputs.DistributionOriginCustomHeader']]:
        """
        One or more sub-resources with `name` and `value` parameters that specify header data that will be sent to the origin (multiples allowed).
        """
        return pulumi.get(self, "custom_headers")

    @property
    @pulumi.getter(name="customOriginConfig")
    def custom_origin_config(self) -> Optional['outputs.DistributionOriginCustomOriginConfig']:
        """
        The CloudFront custom origin configuration information. If an S3 origin is required, use `origin_access_control_id` or `s3_origin_config` instead.
        """
        return pulumi.get(self, "custom_origin_config")

    @property
    @pulumi.getter(name="originAccessControlId")
    def origin_access_control_id(self) -> Optional[str]:
        """
        Unique identifier of a [CloudFront origin access control][8] for this origin.
        """
        return pulumi.get(self, "origin_access_control_id")

    @property
    @pulumi.getter(name="originPath")
    def origin_path(self) -> Optional[str]:
        """
        Optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.
        """
        return pulumi.get(self, "origin_path")

    @property
    @pulumi.getter(name="originShield")
    def origin_shield(self) -> Optional['outputs.DistributionOriginOriginShield']:
        """
        CloudFront Origin Shield configuration information. Using Origin Shield can help reduce the load on your origin. For more information, see [Using Origin Shield](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html) in the Amazon CloudFront Developer Guide.
        """
        return pulumi.get(self, "origin_shield")

    @property
    @pulumi.getter(name="s3OriginConfig")
    def s3_origin_config(self) -> Optional['outputs.DistributionOriginS3OriginConfig']:
        """
        CloudFront S3 origin configuration information. If a custom origin is required, use `custom_origin_config` instead.
        """
        return pulumi.get(self, "s3_origin_config")


@pulumi.output_type
class DistributionOriginCustomHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        DistributionOriginCustomHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DistributionOriginCustomOriginConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpPort":
            suggest = "http_port"
        elif key == "httpsPort":
            suggest = "https_port"
        elif key == "originProtocolPolicy":
            suggest = "origin_protocol_policy"
        elif key == "originSslProtocols":
            suggest = "origin_ssl_protocols"
        elif key == "originKeepaliveTimeout":
            suggest = "origin_keepalive_timeout"
        elif key == "originReadTimeout":
            suggest = "origin_read_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOriginCustomOriginConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOriginCustomOriginConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOriginCustomOriginConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_port: int,
                 https_port: int,
                 origin_protocol_policy: str,
                 origin_ssl_protocols: Sequence[str],
                 origin_keepalive_timeout: Optional[int] = None,
                 origin_read_timeout: Optional[int] = None):
        """
        :param int http_port: HTTP port the custom origin listens on.
        :param int https_port: HTTPS port the custom origin listens on.
        :param str origin_protocol_policy: Origin protocol policy to apply to your origin. One of `http-only`, `https-only`, or `match-viewer`.
        :param Sequence[str] origin_ssl_protocols: SSL/TLS protocols that you want CloudFront to use when communicating with your origin over HTTPS. A list of one or more of `SSLv3`, `TLSv1`, `TLSv1.1`, and `TLSv1.2`.
        :param int origin_keepalive_timeout: The Custom KeepAlive timeout, in seconds. By default, AWS enforces an upper limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout). Defaults to `5`.
        :param int origin_read_timeout: The Custom Read timeout, in seconds. By default, AWS enforces an upper limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout). Defaults to `30`.
        """
        DistributionOriginCustomOriginConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_port=http_port,
            https_port=https_port,
            origin_protocol_policy=origin_protocol_policy,
            origin_ssl_protocols=origin_ssl_protocols,
            origin_keepalive_timeout=origin_keepalive_timeout,
            origin_read_timeout=origin_read_timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_port: Optional[int] = None,
             https_port: Optional[int] = None,
             origin_protocol_policy: Optional[str] = None,
             origin_ssl_protocols: Optional[Sequence[str]] = None,
             origin_keepalive_timeout: Optional[int] = None,
             origin_read_timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if http_port is None and 'httpPort' in kwargs:
            http_port = kwargs['httpPort']
        if http_port is None:
            raise TypeError("Missing 'http_port' argument")
        if https_port is None and 'httpsPort' in kwargs:
            https_port = kwargs['httpsPort']
        if https_port is None:
            raise TypeError("Missing 'https_port' argument")
        if origin_protocol_policy is None and 'originProtocolPolicy' in kwargs:
            origin_protocol_policy = kwargs['originProtocolPolicy']
        if origin_protocol_policy is None:
            raise TypeError("Missing 'origin_protocol_policy' argument")
        if origin_ssl_protocols is None and 'originSslProtocols' in kwargs:
            origin_ssl_protocols = kwargs['originSslProtocols']
        if origin_ssl_protocols is None:
            raise TypeError("Missing 'origin_ssl_protocols' argument")
        if origin_keepalive_timeout is None and 'originKeepaliveTimeout' in kwargs:
            origin_keepalive_timeout = kwargs['originKeepaliveTimeout']
        if origin_read_timeout is None and 'originReadTimeout' in kwargs:
            origin_read_timeout = kwargs['originReadTimeout']

        _setter("http_port", http_port)
        _setter("https_port", https_port)
        _setter("origin_protocol_policy", origin_protocol_policy)
        _setter("origin_ssl_protocols", origin_ssl_protocols)
        if origin_keepalive_timeout is not None:
            _setter("origin_keepalive_timeout", origin_keepalive_timeout)
        if origin_read_timeout is not None:
            _setter("origin_read_timeout", origin_read_timeout)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> int:
        """
        HTTP port the custom origin listens on.
        """
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> int:
        """
        HTTPS port the custom origin listens on.
        """
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter(name="originProtocolPolicy")
    def origin_protocol_policy(self) -> str:
        """
        Origin protocol policy to apply to your origin. One of `http-only`, `https-only`, or `match-viewer`.
        """
        return pulumi.get(self, "origin_protocol_policy")

    @property
    @pulumi.getter(name="originSslProtocols")
    def origin_ssl_protocols(self) -> Sequence[str]:
        """
        SSL/TLS protocols that you want CloudFront to use when communicating with your origin over HTTPS. A list of one or more of `SSLv3`, `TLSv1`, `TLSv1.1`, and `TLSv1.2`.
        """
        return pulumi.get(self, "origin_ssl_protocols")

    @property
    @pulumi.getter(name="originKeepaliveTimeout")
    def origin_keepalive_timeout(self) -> Optional[int]:
        """
        The Custom KeepAlive timeout, in seconds. By default, AWS enforces an upper limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout). Defaults to `5`.
        """
        return pulumi.get(self, "origin_keepalive_timeout")

    @property
    @pulumi.getter(name="originReadTimeout")
    def origin_read_timeout(self) -> Optional[int]:
        """
        The Custom Read timeout, in seconds. By default, AWS enforces an upper limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout). Defaults to `30`.
        """
        return pulumi.get(self, "origin_read_timeout")


@pulumi.output_type
class DistributionOriginGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failoverCriteria":
            suggest = "failover_criteria"
        elif key == "originId":
            suggest = "origin_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOriginGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOriginGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOriginGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failover_criteria: 'outputs.DistributionOriginGroupFailoverCriteria',
                 members: Sequence['outputs.DistributionOriginGroupMember'],
                 origin_id: str):
        """
        :param 'DistributionOriginGroupFailoverCriteriaArgs' failover_criteria: The failover criteria for when to failover to the secondary origin.
        :param Sequence['DistributionOriginGroupMemberArgs'] members: Ordered member configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.
        :param str origin_id: Unique identifier of the member origin.
        """
        DistributionOriginGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failover_criteria=failover_criteria,
            members=members,
            origin_id=origin_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failover_criteria: Optional['outputs.DistributionOriginGroupFailoverCriteria'] = None,
             members: Optional[Sequence['outputs.DistributionOriginGroupMember']] = None,
             origin_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if failover_criteria is None and 'failoverCriteria' in kwargs:
            failover_criteria = kwargs['failoverCriteria']
        if failover_criteria is None:
            raise TypeError("Missing 'failover_criteria' argument")
        if members is None:
            raise TypeError("Missing 'members' argument")
        if origin_id is None and 'originId' in kwargs:
            origin_id = kwargs['originId']
        if origin_id is None:
            raise TypeError("Missing 'origin_id' argument")

        _setter("failover_criteria", failover_criteria)
        _setter("members", members)
        _setter("origin_id", origin_id)

    @property
    @pulumi.getter(name="failoverCriteria")
    def failover_criteria(self) -> 'outputs.DistributionOriginGroupFailoverCriteria':
        """
        The failover criteria for when to failover to the secondary origin.
        """
        return pulumi.get(self, "failover_criteria")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.DistributionOriginGroupMember']:
        """
        Ordered member configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        """
        Unique identifier of the member origin.
        """
        return pulumi.get(self, "origin_id")


@pulumi.output_type
class DistributionOriginGroupFailoverCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCodes":
            suggest = "status_codes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOriginGroupFailoverCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOriginGroupFailoverCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOriginGroupFailoverCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_codes: Sequence[int]):
        """
        :param Sequence[int] status_codes: List of HTTP status codes for the origin group.
        """
        DistributionOriginGroupFailoverCriteria._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            status_codes=status_codes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             status_codes: Optional[Sequence[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if status_codes is None and 'statusCodes' in kwargs:
            status_codes = kwargs['statusCodes']
        if status_codes is None:
            raise TypeError("Missing 'status_codes' argument")

        _setter("status_codes", status_codes)

    @property
    @pulumi.getter(name="statusCodes")
    def status_codes(self) -> Sequence[int]:
        """
        List of HTTP status codes for the origin group.
        """
        return pulumi.get(self, "status_codes")


@pulumi.output_type
class DistributionOriginGroupMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originId":
            suggest = "origin_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOriginGroupMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOriginGroupMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOriginGroupMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 origin_id: str):
        """
        :param str origin_id: Unique identifier of the member origin.
        """
        DistributionOriginGroupMember._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            origin_id=origin_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             origin_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if origin_id is None and 'originId' in kwargs:
            origin_id = kwargs['originId']
        if origin_id is None:
            raise TypeError("Missing 'origin_id' argument")

        _setter("origin_id", origin_id)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        """
        Unique identifier of the member origin.
        """
        return pulumi.get(self, "origin_id")


@pulumi.output_type
class DistributionOriginOriginShield(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originShieldRegion":
            suggest = "origin_shield_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOriginOriginShield. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOriginOriginShield.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOriginOriginShield.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 origin_shield_region: Optional[str] = None):
        """
        :param bool enabled: Whether Origin Shield is enabled.
        :param str origin_shield_region: AWS Region for Origin Shield. To specify a region, use the region code, not the region name. For example, specify the US East (Ohio) region as `us-east-2`.
        """
        DistributionOriginOriginShield._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            origin_shield_region=origin_shield_region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             origin_shield_region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if origin_shield_region is None and 'originShieldRegion' in kwargs:
            origin_shield_region = kwargs['originShieldRegion']

        _setter("enabled", enabled)
        if origin_shield_region is not None:
            _setter("origin_shield_region", origin_shield_region)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether Origin Shield is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="originShieldRegion")
    def origin_shield_region(self) -> Optional[str]:
        """
        AWS Region for Origin Shield. To specify a region, use the region code, not the region name. For example, specify the US East (Ohio) region as `us-east-2`.
        """
        return pulumi.get(self, "origin_shield_region")


@pulumi.output_type
class DistributionOriginS3OriginConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originAccessIdentity":
            suggest = "origin_access_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionOriginS3OriginConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionOriginS3OriginConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionOriginS3OriginConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 origin_access_identity: str):
        """
        :param str origin_access_identity: The CloudFront origin access identity to associate with the origin.
        """
        DistributionOriginS3OriginConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            origin_access_identity=origin_access_identity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             origin_access_identity: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if origin_access_identity is None and 'originAccessIdentity' in kwargs:
            origin_access_identity = kwargs['originAccessIdentity']
        if origin_access_identity is None:
            raise TypeError("Missing 'origin_access_identity' argument")

        _setter("origin_access_identity", origin_access_identity)

    @property
    @pulumi.getter(name="originAccessIdentity")
    def origin_access_identity(self) -> str:
        """
        The CloudFront origin access identity to associate with the origin.
        """
        return pulumi.get(self, "origin_access_identity")


@pulumi.output_type
class DistributionRestrictions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "geoRestriction":
            suggest = "geo_restriction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionRestrictions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionRestrictions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionRestrictions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geo_restriction: 'outputs.DistributionRestrictionsGeoRestriction'):
        DistributionRestrictions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            geo_restriction=geo_restriction,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             geo_restriction: Optional['outputs.DistributionRestrictionsGeoRestriction'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if geo_restriction is None and 'geoRestriction' in kwargs:
            geo_restriction = kwargs['geoRestriction']
        if geo_restriction is None:
            raise TypeError("Missing 'geo_restriction' argument")

        _setter("geo_restriction", geo_restriction)

    @property
    @pulumi.getter(name="geoRestriction")
    def geo_restriction(self) -> 'outputs.DistributionRestrictionsGeoRestriction':
        return pulumi.get(self, "geo_restriction")


@pulumi.output_type
class DistributionRestrictionsGeoRestriction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restrictionType":
            suggest = "restriction_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionRestrictionsGeoRestriction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionRestrictionsGeoRestriction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionRestrictionsGeoRestriction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 restriction_type: str,
                 locations: Optional[Sequence[str]] = None):
        """
        :param str restriction_type: Method that you want to use to restrict distribution of your content by country: `none`, `whitelist`, or `blacklist`.
        :param Sequence[str] locations: [ISO 3166-1-alpha-2 codes][4] for which you want CloudFront either to distribute your content (`whitelist`) or not distribute your content (`blacklist`). If the type is specified as `none` an empty array can be used.
        """
        DistributionRestrictionsGeoRestriction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            restriction_type=restriction_type,
            locations=locations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             restriction_type: Optional[str] = None,
             locations: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if restriction_type is None and 'restrictionType' in kwargs:
            restriction_type = kwargs['restrictionType']
        if restriction_type is None:
            raise TypeError("Missing 'restriction_type' argument")

        _setter("restriction_type", restriction_type)
        if locations is not None:
            _setter("locations", locations)

    @property
    @pulumi.getter(name="restrictionType")
    def restriction_type(self) -> str:
        """
        Method that you want to use to restrict distribution of your content by country: `none`, `whitelist`, or `blacklist`.
        """
        return pulumi.get(self, "restriction_type")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[str]]:
        """
        [ISO 3166-1-alpha-2 codes][4] for which you want CloudFront either to distribute your content (`whitelist`) or not distribute your content (`blacklist`). If the type is specified as `none` an empty array can be used.
        """
        return pulumi.get(self, "locations")


@pulumi.output_type
class DistributionTrustedKeyGroup(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 items: Optional[Sequence['outputs.DistributionTrustedKeyGroupItem']] = None):
        """
        :param bool enabled: Whether Origin Shield is enabled.
        :param Sequence['DistributionTrustedKeyGroupItemArgs'] items: List of nested attributes for each trusted signer
        """
        DistributionTrustedKeyGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             items: Optional[Sequence['outputs.DistributionTrustedKeyGroupItem']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)
        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether Origin Shield is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DistributionTrustedKeyGroupItem']]:
        """
        List of nested attributes for each trusted signer
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DistributionTrustedKeyGroupItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyGroupId":
            suggest = "key_group_id"
        elif key == "keyPairIds":
            suggest = "key_pair_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionTrustedKeyGroupItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionTrustedKeyGroupItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionTrustedKeyGroupItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_group_id: Optional[str] = None,
                 key_pair_ids: Optional[Sequence[str]] = None):
        """
        :param str key_group_id: ID of the key group that contains the public keys.
        :param Sequence[str] key_pair_ids: Set of active CloudFront key pairs associated with the signer account
        """
        DistributionTrustedKeyGroupItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_group_id=key_group_id,
            key_pair_ids=key_pair_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_group_id: Optional[str] = None,
             key_pair_ids: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key_group_id is None and 'keyGroupId' in kwargs:
            key_group_id = kwargs['keyGroupId']
        if key_pair_ids is None and 'keyPairIds' in kwargs:
            key_pair_ids = kwargs['keyPairIds']

        if key_group_id is not None:
            _setter("key_group_id", key_group_id)
        if key_pair_ids is not None:
            _setter("key_pair_ids", key_pair_ids)

    @property
    @pulumi.getter(name="keyGroupId")
    def key_group_id(self) -> Optional[str]:
        """
        ID of the key group that contains the public keys.
        """
        return pulumi.get(self, "key_group_id")

    @property
    @pulumi.getter(name="keyPairIds")
    def key_pair_ids(self) -> Optional[Sequence[str]]:
        """
        Set of active CloudFront key pairs associated with the signer account
        """
        return pulumi.get(self, "key_pair_ids")


@pulumi.output_type
class DistributionTrustedSigner(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 items: Optional[Sequence['outputs.DistributionTrustedSignerItem']] = None):
        """
        :param bool enabled: Whether Origin Shield is enabled.
        :param Sequence['DistributionTrustedSignerItemArgs'] items: List of nested attributes for each trusted signer
        """
        DistributionTrustedSigner._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             items: Optional[Sequence['outputs.DistributionTrustedSignerItem']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)
        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether Origin Shield is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DistributionTrustedSignerItem']]:
        """
        List of nested attributes for each trusted signer
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DistributionTrustedSignerItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccountNumber":
            suggest = "aws_account_number"
        elif key == "keyPairIds":
            suggest = "key_pair_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionTrustedSignerItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionTrustedSignerItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionTrustedSignerItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_account_number: Optional[str] = None,
                 key_pair_ids: Optional[Sequence[str]] = None):
        """
        :param str aws_account_number: AWS account ID or `self`
        :param Sequence[str] key_pair_ids: Set of active CloudFront key pairs associated with the signer account
        """
        DistributionTrustedSignerItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_account_number=aws_account_number,
            key_pair_ids=key_pair_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_account_number: Optional[str] = None,
             key_pair_ids: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if aws_account_number is None and 'awsAccountNumber' in kwargs:
            aws_account_number = kwargs['awsAccountNumber']
        if key_pair_ids is None and 'keyPairIds' in kwargs:
            key_pair_ids = kwargs['keyPairIds']

        if aws_account_number is not None:
            _setter("aws_account_number", aws_account_number)
        if key_pair_ids is not None:
            _setter("key_pair_ids", key_pair_ids)

    @property
    @pulumi.getter(name="awsAccountNumber")
    def aws_account_number(self) -> Optional[str]:
        """
        AWS account ID or `self`
        """
        return pulumi.get(self, "aws_account_number")

    @property
    @pulumi.getter(name="keyPairIds")
    def key_pair_ids(self) -> Optional[Sequence[str]]:
        """
        Set of active CloudFront key pairs associated with the signer account
        """
        return pulumi.get(self, "key_pair_ids")


@pulumi.output_type
class DistributionViewerCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acmCertificateArn":
            suggest = "acm_certificate_arn"
        elif key == "cloudfrontDefaultCertificate":
            suggest = "cloudfront_default_certificate"
        elif key == "iamCertificateId":
            suggest = "iam_certificate_id"
        elif key == "minimumProtocolVersion":
            suggest = "minimum_protocol_version"
        elif key == "sslSupportMethod":
            suggest = "ssl_support_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DistributionViewerCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DistributionViewerCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DistributionViewerCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acm_certificate_arn: Optional[str] = None,
                 cloudfront_default_certificate: Optional[bool] = None,
                 iam_certificate_id: Optional[str] = None,
                 minimum_protocol_version: Optional[str] = None,
                 ssl_support_method: Optional[str] = None):
        """
        :param str acm_certificate_arn: ARN of the [AWS Certificate Manager](https://aws.amazon.com/certificate-manager/) certificate that you wish to use with this distribution. Specify this, `cloudfront_default_certificate`, or `iam_certificate_id`.  The ACM certificate must be in  US-EAST-1.
        :param bool cloudfront_default_certificate: `true` if you want viewers to use HTTPS to request your objects and you're using the CloudFront domain name for your distribution. Specify this, `acm_certificate_arn`, or `iam_certificate_id`.
        :param str iam_certificate_id: IAM certificate identifier of the custom viewer certificate for this distribution if you are using a custom domain. Specify this, `acm_certificate_arn`, or `cloudfront_default_certificate`.
        :param str minimum_protocol_version: Minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. Can only be set if `cloudfront_default_certificate = false`. See all possible values in [this](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html) table under "Security policy." Some examples include: `TLSv1.2_2019` and `TLSv1.2_2021`. Default: `TLSv1`. **NOTE**: If you are using a custom certificate (specified with `acm_certificate_arn` or `iam_certificate_id`), and have specified `sni-only` in `ssl_support_method`, `TLSv1` or later must be specified. If you have specified `vip` in `ssl_support_method`, only `SSLv3` or `TLSv1` can be specified. If you have specified `cloudfront_default_certificate`, `TLSv1` must be specified.
        :param str ssl_support_method: How you want CloudFront to serve HTTPS requests. One of `vip` or `sni-only`. Required if you specify `acm_certificate_arn` or `iam_certificate_id`. **NOTE:** `vip` causes CloudFront to use a dedicated IP address and may incur extra charges.
        """
        DistributionViewerCertificate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acm_certificate_arn=acm_certificate_arn,
            cloudfront_default_certificate=cloudfront_default_certificate,
            iam_certificate_id=iam_certificate_id,
            minimum_protocol_version=minimum_protocol_version,
            ssl_support_method=ssl_support_method,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acm_certificate_arn: Optional[str] = None,
             cloudfront_default_certificate: Optional[bool] = None,
             iam_certificate_id: Optional[str] = None,
             minimum_protocol_version: Optional[str] = None,
             ssl_support_method: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if acm_certificate_arn is None and 'acmCertificateArn' in kwargs:
            acm_certificate_arn = kwargs['acmCertificateArn']
        if cloudfront_default_certificate is None and 'cloudfrontDefaultCertificate' in kwargs:
            cloudfront_default_certificate = kwargs['cloudfrontDefaultCertificate']
        if iam_certificate_id is None and 'iamCertificateId' in kwargs:
            iam_certificate_id = kwargs['iamCertificateId']
        if minimum_protocol_version is None and 'minimumProtocolVersion' in kwargs:
            minimum_protocol_version = kwargs['minimumProtocolVersion']
        if ssl_support_method is None and 'sslSupportMethod' in kwargs:
            ssl_support_method = kwargs['sslSupportMethod']

        if acm_certificate_arn is not None:
            _setter("acm_certificate_arn", acm_certificate_arn)
        if cloudfront_default_certificate is not None:
            _setter("cloudfront_default_certificate", cloudfront_default_certificate)
        if iam_certificate_id is not None:
            _setter("iam_certificate_id", iam_certificate_id)
        if minimum_protocol_version is not None:
            _setter("minimum_protocol_version", minimum_protocol_version)
        if ssl_support_method is not None:
            _setter("ssl_support_method", ssl_support_method)

    @property
    @pulumi.getter(name="acmCertificateArn")
    def acm_certificate_arn(self) -> Optional[str]:
        """
        ARN of the [AWS Certificate Manager](https://aws.amazon.com/certificate-manager/) certificate that you wish to use with this distribution. Specify this, `cloudfront_default_certificate`, or `iam_certificate_id`.  The ACM certificate must be in  US-EAST-1.
        """
        return pulumi.get(self, "acm_certificate_arn")

    @property
    @pulumi.getter(name="cloudfrontDefaultCertificate")
    def cloudfront_default_certificate(self) -> Optional[bool]:
        """
        `true` if you want viewers to use HTTPS to request your objects and you're using the CloudFront domain name for your distribution. Specify this, `acm_certificate_arn`, or `iam_certificate_id`.
        """
        return pulumi.get(self, "cloudfront_default_certificate")

    @property
    @pulumi.getter(name="iamCertificateId")
    def iam_certificate_id(self) -> Optional[str]:
        """
        IAM certificate identifier of the custom viewer certificate for this distribution if you are using a custom domain. Specify this, `acm_certificate_arn`, or `cloudfront_default_certificate`.
        """
        return pulumi.get(self, "iam_certificate_id")

    @property
    @pulumi.getter(name="minimumProtocolVersion")
    def minimum_protocol_version(self) -> Optional[str]:
        """
        Minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. Can only be set if `cloudfront_default_certificate = false`. See all possible values in [this](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html) table under "Security policy." Some examples include: `TLSv1.2_2019` and `TLSv1.2_2021`. Default: `TLSv1`. **NOTE**: If you are using a custom certificate (specified with `acm_certificate_arn` or `iam_certificate_id`), and have specified `sni-only` in `ssl_support_method`, `TLSv1` or later must be specified. If you have specified `vip` in `ssl_support_method`, only `SSLv3` or `TLSv1` can be specified. If you have specified `cloudfront_default_certificate`, `TLSv1` must be specified.
        """
        return pulumi.get(self, "minimum_protocol_version")

    @property
    @pulumi.getter(name="sslSupportMethod")
    def ssl_support_method(self) -> Optional[str]:
        """
        How you want CloudFront to serve HTTPS requests. One of `vip` or `sni-only`. Required if you specify `acm_certificate_arn` or `iam_certificate_id`. **NOTE:** `vip` causes CloudFront to use a dedicated IP address and may incur extra charges.
        """
        return pulumi.get(self, "ssl_support_method")


@pulumi.output_type
class FieldLevelEncryptionConfigContentTypeProfileConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentTypeProfiles":
            suggest = "content_type_profiles"
        elif key == "forwardWhenContentTypeIsUnknown":
            suggest = "forward_when_content_type_is_unknown"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FieldLevelEncryptionConfigContentTypeProfileConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FieldLevelEncryptionConfigContentTypeProfileConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FieldLevelEncryptionConfigContentTypeProfileConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_type_profiles: 'outputs.FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles',
                 forward_when_content_type_is_unknown: bool):
        """
        :param 'FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfilesArgs' content_type_profiles: Object that contains an attribute `items` that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.
        :param bool forward_when_content_type_is_unknown: specifies what to do when an unknown content type is provided for the profile. If true, content is forwarded without being encrypted when the content type is unknown. If false (the default), an error is returned when the content type is unknown.
        """
        FieldLevelEncryptionConfigContentTypeProfileConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_type_profiles=content_type_profiles,
            forward_when_content_type_is_unknown=forward_when_content_type_is_unknown,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_type_profiles: Optional['outputs.FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles'] = None,
             forward_when_content_type_is_unknown: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content_type_profiles is None and 'contentTypeProfiles' in kwargs:
            content_type_profiles = kwargs['contentTypeProfiles']
        if content_type_profiles is None:
            raise TypeError("Missing 'content_type_profiles' argument")
        if forward_when_content_type_is_unknown is None and 'forwardWhenContentTypeIsUnknown' in kwargs:
            forward_when_content_type_is_unknown = kwargs['forwardWhenContentTypeIsUnknown']
        if forward_when_content_type_is_unknown is None:
            raise TypeError("Missing 'forward_when_content_type_is_unknown' argument")

        _setter("content_type_profiles", content_type_profiles)
        _setter("forward_when_content_type_is_unknown", forward_when_content_type_is_unknown)

    @property
    @pulumi.getter(name="contentTypeProfiles")
    def content_type_profiles(self) -> 'outputs.FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles':
        """
        Object that contains an attribute `items` that contains the list of configurations for a field-level encryption content type-profile. See Content Type Profile.
        """
        return pulumi.get(self, "content_type_profiles")

    @property
    @pulumi.getter(name="forwardWhenContentTypeIsUnknown")
    def forward_when_content_type_is_unknown(self) -> bool:
        """
        specifies what to do when an unknown content type is provided for the profile. If true, content is forwarded without being encrypted when the content type is unknown. If false (the default), an error is returned when the content type is unknown.
        """
        return pulumi.get(self, "forward_when_content_type_is_unknown")


@pulumi.output_type
class FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfilesItem']):
        FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfiles._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfilesItem']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfilesItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfilesItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "profileId":
            suggest = "profile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfilesItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfilesItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfilesItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_type: str,
                 format: str,
                 profile_id: Optional[str] = None):
        """
        :param str content_type: he content type for a field-level encryption content type-profile mapping. Valid value is `application/x-www-form-urlencoded`.
        :param str format: The format for a field-level encryption content type-profile mapping. Valid value is `URLEncoded`.
        :param str profile_id: The profile ID for a field-level encryption content type-profile mapping.
        """
        FieldLevelEncryptionConfigContentTypeProfileConfigContentTypeProfilesItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_type=content_type,
            format=format,
            profile_id=profile_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_type: Optional[str] = None,
             format: Optional[str] = None,
             profile_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content_type is None and 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if content_type is None:
            raise TypeError("Missing 'content_type' argument")
        if format is None:
            raise TypeError("Missing 'format' argument")
        if profile_id is None and 'profileId' in kwargs:
            profile_id = kwargs['profileId']

        _setter("content_type", content_type)
        _setter("format", format)
        if profile_id is not None:
            _setter("profile_id", profile_id)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        he content type for a field-level encryption content type-profile mapping. Valid value is `application/x-www-form-urlencoded`.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        The format for a field-level encryption content type-profile mapping. Valid value is `URLEncoded`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[str]:
        """
        The profile ID for a field-level encryption content type-profile mapping.
        """
        return pulumi.get(self, "profile_id")


@pulumi.output_type
class FieldLevelEncryptionConfigQueryArgProfileConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forwardWhenQueryArgProfileIsUnknown":
            suggest = "forward_when_query_arg_profile_is_unknown"
        elif key == "queryArgProfiles":
            suggest = "query_arg_profiles"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FieldLevelEncryptionConfigQueryArgProfileConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FieldLevelEncryptionConfigQueryArgProfileConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FieldLevelEncryptionConfigQueryArgProfileConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forward_when_query_arg_profile_is_unknown: bool,
                 query_arg_profiles: Optional['outputs.FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles'] = None):
        """
        :param bool forward_when_query_arg_profile_is_unknown: Flag to set if you want a request to be forwarded to the origin even if the profile specified by the field-level encryption query argument, fle-profile, is unknown.
        :param 'FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfilesArgs' query_arg_profiles: Object that contains an attribute `items` that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.
        """
        FieldLevelEncryptionConfigQueryArgProfileConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forward_when_query_arg_profile_is_unknown=forward_when_query_arg_profile_is_unknown,
            query_arg_profiles=query_arg_profiles,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forward_when_query_arg_profile_is_unknown: Optional[bool] = None,
             query_arg_profiles: Optional['outputs.FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if forward_when_query_arg_profile_is_unknown is None and 'forwardWhenQueryArgProfileIsUnknown' in kwargs:
            forward_when_query_arg_profile_is_unknown = kwargs['forwardWhenQueryArgProfileIsUnknown']
        if forward_when_query_arg_profile_is_unknown is None:
            raise TypeError("Missing 'forward_when_query_arg_profile_is_unknown' argument")
        if query_arg_profiles is None and 'queryArgProfiles' in kwargs:
            query_arg_profiles = kwargs['queryArgProfiles']

        _setter("forward_when_query_arg_profile_is_unknown", forward_when_query_arg_profile_is_unknown)
        if query_arg_profiles is not None:
            _setter("query_arg_profiles", query_arg_profiles)

    @property
    @pulumi.getter(name="forwardWhenQueryArgProfileIsUnknown")
    def forward_when_query_arg_profile_is_unknown(self) -> bool:
        """
        Flag to set if you want a request to be forwarded to the origin even if the profile specified by the field-level encryption query argument, fle-profile, is unknown.
        """
        return pulumi.get(self, "forward_when_query_arg_profile_is_unknown")

    @property
    @pulumi.getter(name="queryArgProfiles")
    def query_arg_profiles(self) -> Optional['outputs.FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles']:
        """
        Object that contains an attribute `items` that contains the list ofrofiles specified for query argument-profile mapping for field-level encryption. see Query Arg Profile.
        """
        return pulumi.get(self, "query_arg_profiles")


@pulumi.output_type
class FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfilesItem']] = None):
        FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfiles._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfilesItem']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfilesItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfilesItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "profileId":
            suggest = "profile_id"
        elif key == "queryArg":
            suggest = "query_arg"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfilesItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfilesItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfilesItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 profile_id: str,
                 query_arg: str):
        """
        :param str profile_id: The profile ID for a field-level encryption content type-profile mapping.
        :param str query_arg: Query argument for field-level encryption query argument-profile mapping.
        """
        FieldLevelEncryptionConfigQueryArgProfileConfigQueryArgProfilesItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            profile_id=profile_id,
            query_arg=query_arg,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             profile_id: Optional[str] = None,
             query_arg: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if profile_id is None and 'profileId' in kwargs:
            profile_id = kwargs['profileId']
        if profile_id is None:
            raise TypeError("Missing 'profile_id' argument")
        if query_arg is None and 'queryArg' in kwargs:
            query_arg = kwargs['queryArg']
        if query_arg is None:
            raise TypeError("Missing 'query_arg' argument")

        _setter("profile_id", profile_id)
        _setter("query_arg", query_arg)

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> str:
        """
        The profile ID for a field-level encryption content type-profile mapping.
        """
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter(name="queryArg")
    def query_arg(self) -> str:
        """
        Query argument for field-level encryption query argument-profile mapping.
        """
        return pulumi.get(self, "query_arg")


@pulumi.output_type
class FieldLevelEncryptionProfileEncryptionEntities(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.FieldLevelEncryptionProfileEncryptionEntitiesItem']] = None):
        FieldLevelEncryptionProfileEncryptionEntities._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.FieldLevelEncryptionProfileEncryptionEntitiesItem']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.FieldLevelEncryptionProfileEncryptionEntitiesItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class FieldLevelEncryptionProfileEncryptionEntitiesItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldPatterns":
            suggest = "field_patterns"
        elif key == "providerId":
            suggest = "provider_id"
        elif key == "publicKeyId":
            suggest = "public_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FieldLevelEncryptionProfileEncryptionEntitiesItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FieldLevelEncryptionProfileEncryptionEntitiesItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FieldLevelEncryptionProfileEncryptionEntitiesItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_patterns: 'outputs.FieldLevelEncryptionProfileEncryptionEntitiesItemFieldPatterns',
                 provider_id: str,
                 public_key_id: str):
        """
        :param 'FieldLevelEncryptionProfileEncryptionEntitiesItemFieldPatternsArgs' field_patterns: Object that contains an attribute `items` that contains the list of field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted.
        :param str provider_id: The provider associated with the public key being used for encryption.
        :param str public_key_id: The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns.
        """
        FieldLevelEncryptionProfileEncryptionEntitiesItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_patterns=field_patterns,
            provider_id=provider_id,
            public_key_id=public_key_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_patterns: Optional['outputs.FieldLevelEncryptionProfileEncryptionEntitiesItemFieldPatterns'] = None,
             provider_id: Optional[str] = None,
             public_key_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if field_patterns is None and 'fieldPatterns' in kwargs:
            field_patterns = kwargs['fieldPatterns']
        if field_patterns is None:
            raise TypeError("Missing 'field_patterns' argument")
        if provider_id is None and 'providerId' in kwargs:
            provider_id = kwargs['providerId']
        if provider_id is None:
            raise TypeError("Missing 'provider_id' argument")
        if public_key_id is None and 'publicKeyId' in kwargs:
            public_key_id = kwargs['publicKeyId']
        if public_key_id is None:
            raise TypeError("Missing 'public_key_id' argument")

        _setter("field_patterns", field_patterns)
        _setter("provider_id", provider_id)
        _setter("public_key_id", public_key_id)

    @property
    @pulumi.getter(name="fieldPatterns")
    def field_patterns(self) -> 'outputs.FieldLevelEncryptionProfileEncryptionEntitiesItemFieldPatterns':
        """
        Object that contains an attribute `items` that contains the list of field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted.
        """
        return pulumi.get(self, "field_patterns")

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> str:
        """
        The provider associated with the public key being used for encryption.
        """
        return pulumi.get(self, "provider_id")

    @property
    @pulumi.getter(name="publicKeyId")
    def public_key_id(self) -> str:
        """
        The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns.
        """
        return pulumi.get(self, "public_key_id")


@pulumi.output_type
class FieldLevelEncryptionProfileEncryptionEntitiesItemFieldPatterns(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        FieldLevelEncryptionProfileEncryptionEntitiesItemFieldPatterns._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class MonitoringSubscriptionMonitoringSubscription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "realtimeMetricsSubscriptionConfig":
            suggest = "realtime_metrics_subscription_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringSubscriptionMonitoringSubscription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringSubscriptionMonitoringSubscription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringSubscriptionMonitoringSubscription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 realtime_metrics_subscription_config: 'outputs.MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig'):
        """
        :param 'MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigArgs' realtime_metrics_subscription_config: A subscription configuration for additional CloudWatch metrics. See below.
        """
        MonitoringSubscriptionMonitoringSubscription._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            realtime_metrics_subscription_config=realtime_metrics_subscription_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             realtime_metrics_subscription_config: Optional['outputs.MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if realtime_metrics_subscription_config is None and 'realtimeMetricsSubscriptionConfig' in kwargs:
            realtime_metrics_subscription_config = kwargs['realtimeMetricsSubscriptionConfig']
        if realtime_metrics_subscription_config is None:
            raise TypeError("Missing 'realtime_metrics_subscription_config' argument")

        _setter("realtime_metrics_subscription_config", realtime_metrics_subscription_config)

    @property
    @pulumi.getter(name="realtimeMetricsSubscriptionConfig")
    def realtime_metrics_subscription_config(self) -> 'outputs.MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig':
        """
        A subscription configuration for additional CloudWatch metrics. See below.
        """
        return pulumi.get(self, "realtime_metrics_subscription_config")


@pulumi.output_type
class MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "realtimeMetricsSubscriptionStatus":
            suggest = "realtime_metrics_subscription_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 realtime_metrics_subscription_status: str):
        """
        :param str realtime_metrics_subscription_status: A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution. Valid values are `Enabled` and `Disabled`. See below.
        """
        MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            realtime_metrics_subscription_status=realtime_metrics_subscription_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             realtime_metrics_subscription_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if realtime_metrics_subscription_status is None and 'realtimeMetricsSubscriptionStatus' in kwargs:
            realtime_metrics_subscription_status = kwargs['realtimeMetricsSubscriptionStatus']
        if realtime_metrics_subscription_status is None:
            raise TypeError("Missing 'realtime_metrics_subscription_status' argument")

        _setter("realtime_metrics_subscription_status", realtime_metrics_subscription_status)

    @property
    @pulumi.getter(name="realtimeMetricsSubscriptionStatus")
    def realtime_metrics_subscription_status(self) -> str:
        """
        A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution. Valid values are `Enabled` and `Disabled`. See below.
        """
        return pulumi.get(self, "realtime_metrics_subscription_status")


@pulumi.output_type
class OriginRequestPolicyCookiesConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieBehavior":
            suggest = "cookie_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OriginRequestPolicyCookiesConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OriginRequestPolicyCookiesConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OriginRequestPolicyCookiesConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookie_behavior: str,
                 cookies: Optional['outputs.OriginRequestPolicyCookiesConfigCookies'] = None):
        OriginRequestPolicyCookiesConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_behavior=cookie_behavior,
            cookies=cookies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_behavior: Optional[str] = None,
             cookies: Optional['outputs.OriginRequestPolicyCookiesConfigCookies'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookie_behavior is None and 'cookieBehavior' in kwargs:
            cookie_behavior = kwargs['cookieBehavior']
        if cookie_behavior is None:
            raise TypeError("Missing 'cookie_behavior' argument")

        _setter("cookie_behavior", cookie_behavior)
        if cookies is not None:
            _setter("cookies", cookies)

    @property
    @pulumi.getter(name="cookieBehavior")
    def cookie_behavior(self) -> str:
        return pulumi.get(self, "cookie_behavior")

    @property
    @pulumi.getter
    def cookies(self) -> Optional['outputs.OriginRequestPolicyCookiesConfigCookies']:
        return pulumi.get(self, "cookies")


@pulumi.output_type
class OriginRequestPolicyCookiesConfigCookies(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        OriginRequestPolicyCookiesConfigCookies._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class OriginRequestPolicyHeadersConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerBehavior":
            suggest = "header_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OriginRequestPolicyHeadersConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OriginRequestPolicyHeadersConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OriginRequestPolicyHeadersConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_behavior: Optional[str] = None,
                 headers: Optional['outputs.OriginRequestPolicyHeadersConfigHeaders'] = None):
        OriginRequestPolicyHeadersConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_behavior=header_behavior,
            headers=headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_behavior: Optional[str] = None,
             headers: Optional['outputs.OriginRequestPolicyHeadersConfigHeaders'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if header_behavior is None and 'headerBehavior' in kwargs:
            header_behavior = kwargs['headerBehavior']

        if header_behavior is not None:
            _setter("header_behavior", header_behavior)
        if headers is not None:
            _setter("headers", headers)

    @property
    @pulumi.getter(name="headerBehavior")
    def header_behavior(self) -> Optional[str]:
        return pulumi.get(self, "header_behavior")

    @property
    @pulumi.getter
    def headers(self) -> Optional['outputs.OriginRequestPolicyHeadersConfigHeaders']:
        return pulumi.get(self, "headers")


@pulumi.output_type
class OriginRequestPolicyHeadersConfigHeaders(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        OriginRequestPolicyHeadersConfigHeaders._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class OriginRequestPolicyQueryStringsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryStringBehavior":
            suggest = "query_string_behavior"
        elif key == "queryStrings":
            suggest = "query_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OriginRequestPolicyQueryStringsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OriginRequestPolicyQueryStringsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OriginRequestPolicyQueryStringsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_string_behavior: str,
                 query_strings: Optional['outputs.OriginRequestPolicyQueryStringsConfigQueryStrings'] = None):
        OriginRequestPolicyQueryStringsConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            query_string_behavior=query_string_behavior,
            query_strings=query_strings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             query_string_behavior: Optional[str] = None,
             query_strings: Optional['outputs.OriginRequestPolicyQueryStringsConfigQueryStrings'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if query_string_behavior is None and 'queryStringBehavior' in kwargs:
            query_string_behavior = kwargs['queryStringBehavior']
        if query_string_behavior is None:
            raise TypeError("Missing 'query_string_behavior' argument")
        if query_strings is None and 'queryStrings' in kwargs:
            query_strings = kwargs['queryStrings']

        _setter("query_string_behavior", query_string_behavior)
        if query_strings is not None:
            _setter("query_strings", query_strings)

    @property
    @pulumi.getter(name="queryStringBehavior")
    def query_string_behavior(self) -> str:
        return pulumi.get(self, "query_string_behavior")

    @property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Optional['outputs.OriginRequestPolicyQueryStringsConfigQueryStrings']:
        return pulumi.get(self, "query_strings")


@pulumi.output_type
class OriginRequestPolicyQueryStringsConfigQueryStrings(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        OriginRequestPolicyQueryStringsConfigQueryStrings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class RealtimeLogConfigEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kinesisStreamConfig":
            suggest = "kinesis_stream_config"
        elif key == "streamType":
            suggest = "stream_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RealtimeLogConfigEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RealtimeLogConfigEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RealtimeLogConfigEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kinesis_stream_config: 'outputs.RealtimeLogConfigEndpointKinesisStreamConfig',
                 stream_type: str):
        """
        :param 'RealtimeLogConfigEndpointKinesisStreamConfigArgs' kinesis_stream_config: The Amazon Kinesis data stream configuration.
        :param str stream_type: The type of data stream where real-time log data is sent. The only valid value is `Kinesis`.
        """
        RealtimeLogConfigEndpoint._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kinesis_stream_config=kinesis_stream_config,
            stream_type=stream_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kinesis_stream_config: Optional['outputs.RealtimeLogConfigEndpointKinesisStreamConfig'] = None,
             stream_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if kinesis_stream_config is None and 'kinesisStreamConfig' in kwargs:
            kinesis_stream_config = kwargs['kinesisStreamConfig']
        if kinesis_stream_config is None:
            raise TypeError("Missing 'kinesis_stream_config' argument")
        if stream_type is None and 'streamType' in kwargs:
            stream_type = kwargs['streamType']
        if stream_type is None:
            raise TypeError("Missing 'stream_type' argument")

        _setter("kinesis_stream_config", kinesis_stream_config)
        _setter("stream_type", stream_type)

    @property
    @pulumi.getter(name="kinesisStreamConfig")
    def kinesis_stream_config(self) -> 'outputs.RealtimeLogConfigEndpointKinesisStreamConfig':
        """
        The Amazon Kinesis data stream configuration.
        """
        return pulumi.get(self, "kinesis_stream_config")

    @property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> str:
        """
        The type of data stream where real-time log data is sent. The only valid value is `Kinesis`.
        """
        return pulumi.get(self, "stream_type")


@pulumi.output_type
class RealtimeLogConfigEndpointKinesisStreamConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"
        elif key == "streamArn":
            suggest = "stream_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RealtimeLogConfigEndpointKinesisStreamConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RealtimeLogConfigEndpointKinesisStreamConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RealtimeLogConfigEndpointKinesisStreamConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: str,
                 stream_arn: str):
        """
        :param str role_arn: The ARN of an IAM role that CloudFront can use to send real-time log data to the Kinesis data stream.
               See the [AWS documentation](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-iam-role) for more information.
        :param str stream_arn: The ARN of the Kinesis data stream.
        """
        RealtimeLogConfigEndpointKinesisStreamConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
            stream_arn=stream_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: Optional[str] = None,
             stream_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")
        if stream_arn is None and 'streamArn' in kwargs:
            stream_arn = kwargs['streamArn']
        if stream_arn is None:
            raise TypeError("Missing 'stream_arn' argument")

        _setter("role_arn", role_arn)
        _setter("stream_arn", stream_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The ARN of an IAM role that CloudFront can use to send real-time log data to the Kinesis data stream.
        See the [AWS documentation](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-iam-role) for more information.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        """
        The ARN of the Kinesis data stream.
        """
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class ResponseHeadersPolicyCorsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessControlAllowCredentials":
            suggest = "access_control_allow_credentials"
        elif key == "accessControlAllowHeaders":
            suggest = "access_control_allow_headers"
        elif key == "accessControlAllowMethods":
            suggest = "access_control_allow_methods"
        elif key == "accessControlAllowOrigins":
            suggest = "access_control_allow_origins"
        elif key == "originOverride":
            suggest = "origin_override"
        elif key == "accessControlExposeHeaders":
            suggest = "access_control_expose_headers"
        elif key == "accessControlMaxAgeSec":
            suggest = "access_control_max_age_sec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseHeadersPolicyCorsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseHeadersPolicyCorsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseHeadersPolicyCorsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_control_allow_credentials: bool,
                 access_control_allow_headers: 'outputs.ResponseHeadersPolicyCorsConfigAccessControlAllowHeaders',
                 access_control_allow_methods: 'outputs.ResponseHeadersPolicyCorsConfigAccessControlAllowMethods',
                 access_control_allow_origins: 'outputs.ResponseHeadersPolicyCorsConfigAccessControlAllowOrigins',
                 origin_override: bool,
                 access_control_expose_headers: Optional['outputs.ResponseHeadersPolicyCorsConfigAccessControlExposeHeaders'] = None,
                 access_control_max_age_sec: Optional[int] = None):
        """
        :param bool access_control_allow_credentials: A Boolean value that CloudFront uses as the value for the `Access-Control-Allow-Credentials` HTTP response header.
        :param 'ResponseHeadersPolicyCorsConfigAccessControlAllowHeadersArgs' access_control_allow_headers: Object that contains an attribute `items` that contains a list of HTTP header names that CloudFront includes as values for the `Access-Control-Allow-Headers` HTTP response header.
        :param 'ResponseHeadersPolicyCorsConfigAccessControlAllowMethodsArgs' access_control_allow_methods: Object that contains an attribute `items` that contains a list of HTTP methods that CloudFront includes as values for the `Access-Control-Allow-Methods` HTTP response header. Valid values: `GET` | `POST` | `OPTIONS` | `PUT` | `DELETE` | `HEAD` | `ALL`
        :param 'ResponseHeadersPolicyCorsConfigAccessControlAllowOriginsArgs' access_control_allow_origins: Object that contains an attribute `items` that contains a list of origins that CloudFront can use as the value for the `Access-Control-Allow-Origin` HTTP response header.
        :param bool origin_override: A Boolean value that determines how CloudFront behaves for the HTTP response header.
        :param 'ResponseHeadersPolicyCorsConfigAccessControlExposeHeadersArgs' access_control_expose_headers: Object that contains an attribute `items` that contains a list of HTTP headers that CloudFront includes as values for the `Access-Control-Expose-Headers` HTTP response header.
        :param int access_control_max_age_sec: A number that CloudFront uses as the value for the `Access-Control-Max-Age` HTTP response header.
        """
        ResponseHeadersPolicyCorsConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_control_allow_credentials=access_control_allow_credentials,
            access_control_allow_headers=access_control_allow_headers,
            access_control_allow_methods=access_control_allow_methods,
            access_control_allow_origins=access_control_allow_origins,
            origin_override=origin_override,
            access_control_expose_headers=access_control_expose_headers,
            access_control_max_age_sec=access_control_max_age_sec,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_control_allow_credentials: Optional[bool] = None,
             access_control_allow_headers: Optional['outputs.ResponseHeadersPolicyCorsConfigAccessControlAllowHeaders'] = None,
             access_control_allow_methods: Optional['outputs.ResponseHeadersPolicyCorsConfigAccessControlAllowMethods'] = None,
             access_control_allow_origins: Optional['outputs.ResponseHeadersPolicyCorsConfigAccessControlAllowOrigins'] = None,
             origin_override: Optional[bool] = None,
             access_control_expose_headers: Optional['outputs.ResponseHeadersPolicyCorsConfigAccessControlExposeHeaders'] = None,
             access_control_max_age_sec: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if access_control_allow_credentials is None and 'accessControlAllowCredentials' in kwargs:
            access_control_allow_credentials = kwargs['accessControlAllowCredentials']
        if access_control_allow_credentials is None:
            raise TypeError("Missing 'access_control_allow_credentials' argument")
        if access_control_allow_headers is None and 'accessControlAllowHeaders' in kwargs:
            access_control_allow_headers = kwargs['accessControlAllowHeaders']
        if access_control_allow_headers is None:
            raise TypeError("Missing 'access_control_allow_headers' argument")
        if access_control_allow_methods is None and 'accessControlAllowMethods' in kwargs:
            access_control_allow_methods = kwargs['accessControlAllowMethods']
        if access_control_allow_methods is None:
            raise TypeError("Missing 'access_control_allow_methods' argument")
        if access_control_allow_origins is None and 'accessControlAllowOrigins' in kwargs:
            access_control_allow_origins = kwargs['accessControlAllowOrigins']
        if access_control_allow_origins is None:
            raise TypeError("Missing 'access_control_allow_origins' argument")
        if origin_override is None and 'originOverride' in kwargs:
            origin_override = kwargs['originOverride']
        if origin_override is None:
            raise TypeError("Missing 'origin_override' argument")
        if access_control_expose_headers is None and 'accessControlExposeHeaders' in kwargs:
            access_control_expose_headers = kwargs['accessControlExposeHeaders']
        if access_control_max_age_sec is None and 'accessControlMaxAgeSec' in kwargs:
            access_control_max_age_sec = kwargs['accessControlMaxAgeSec']

        _setter("access_control_allow_credentials", access_control_allow_credentials)
        _setter("access_control_allow_headers", access_control_allow_headers)
        _setter("access_control_allow_methods", access_control_allow_methods)
        _setter("access_control_allow_origins", access_control_allow_origins)
        _setter("origin_override", origin_override)
        if access_control_expose_headers is not None:
            _setter("access_control_expose_headers", access_control_expose_headers)
        if access_control_max_age_sec is not None:
            _setter("access_control_max_age_sec", access_control_max_age_sec)

    @property
    @pulumi.getter(name="accessControlAllowCredentials")
    def access_control_allow_credentials(self) -> bool:
        """
        A Boolean value that CloudFront uses as the value for the `Access-Control-Allow-Credentials` HTTP response header.
        """
        return pulumi.get(self, "access_control_allow_credentials")

    @property
    @pulumi.getter(name="accessControlAllowHeaders")
    def access_control_allow_headers(self) -> 'outputs.ResponseHeadersPolicyCorsConfigAccessControlAllowHeaders':
        """
        Object that contains an attribute `items` that contains a list of HTTP header names that CloudFront includes as values for the `Access-Control-Allow-Headers` HTTP response header.
        """
        return pulumi.get(self, "access_control_allow_headers")

    @property
    @pulumi.getter(name="accessControlAllowMethods")
    def access_control_allow_methods(self) -> 'outputs.ResponseHeadersPolicyCorsConfigAccessControlAllowMethods':
        """
        Object that contains an attribute `items` that contains a list of HTTP methods that CloudFront includes as values for the `Access-Control-Allow-Methods` HTTP response header. Valid values: `GET` | `POST` | `OPTIONS` | `PUT` | `DELETE` | `HEAD` | `ALL`
        """
        return pulumi.get(self, "access_control_allow_methods")

    @property
    @pulumi.getter(name="accessControlAllowOrigins")
    def access_control_allow_origins(self) -> 'outputs.ResponseHeadersPolicyCorsConfigAccessControlAllowOrigins':
        """
        Object that contains an attribute `items` that contains a list of origins that CloudFront can use as the value for the `Access-Control-Allow-Origin` HTTP response header.
        """
        return pulumi.get(self, "access_control_allow_origins")

    @property
    @pulumi.getter(name="originOverride")
    def origin_override(self) -> bool:
        """
        A Boolean value that determines how CloudFront behaves for the HTTP response header.
        """
        return pulumi.get(self, "origin_override")

    @property
    @pulumi.getter(name="accessControlExposeHeaders")
    def access_control_expose_headers(self) -> Optional['outputs.ResponseHeadersPolicyCorsConfigAccessControlExposeHeaders']:
        """
        Object that contains an attribute `items` that contains a list of HTTP headers that CloudFront includes as values for the `Access-Control-Expose-Headers` HTTP response header.
        """
        return pulumi.get(self, "access_control_expose_headers")

    @property
    @pulumi.getter(name="accessControlMaxAgeSec")
    def access_control_max_age_sec(self) -> Optional[int]:
        """
        A number that CloudFront uses as the value for the `Access-Control-Max-Age` HTTP response header.
        """
        return pulumi.get(self, "access_control_max_age_sec")


@pulumi.output_type
class ResponseHeadersPolicyCorsConfigAccessControlAllowHeaders(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        ResponseHeadersPolicyCorsConfigAccessControlAllowHeaders._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class ResponseHeadersPolicyCorsConfigAccessControlAllowMethods(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        ResponseHeadersPolicyCorsConfigAccessControlAllowMethods._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class ResponseHeadersPolicyCorsConfigAccessControlAllowOrigins(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        ResponseHeadersPolicyCorsConfigAccessControlAllowOrigins._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class ResponseHeadersPolicyCorsConfigAccessControlExposeHeaders(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        ResponseHeadersPolicyCorsConfigAccessControlExposeHeaders._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class ResponseHeadersPolicyCustomHeadersConfig(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.ResponseHeadersPolicyCustomHeadersConfigItem']] = None):
        ResponseHeadersPolicyCustomHeadersConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.ResponseHeadersPolicyCustomHeadersConfigItem']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ResponseHeadersPolicyCustomHeadersConfigItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class ResponseHeadersPolicyCustomHeadersConfigItem(dict):
    def __init__(__self__, *,
                 header: str,
                 override: bool,
                 value: str):
        """
        :param str header: The HTTP response header name.
        :param bool override: Whether CloudFront overrides the `Content-Security-Policy` HTTP response header received from the origin with the one specified in this response headers policy.
        :param str value: The value for the HTTP response header.
        """
        ResponseHeadersPolicyCustomHeadersConfigItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header=header,
            override=override,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header: Optional[str] = None,
             override: Optional[bool] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if header is None:
            raise TypeError("Missing 'header' argument")
        if override is None:
            raise TypeError("Missing 'override' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("header", header)
        _setter("override", override)
        _setter("value", value)

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        The HTTP response header name.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the `Content-Security-Policy` HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the HTTP response header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ResponseHeadersPolicyRemoveHeadersConfig(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.ResponseHeadersPolicyRemoveHeadersConfigItem']] = None):
        ResponseHeadersPolicyRemoveHeadersConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.ResponseHeadersPolicyRemoveHeadersConfigItem']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ResponseHeadersPolicyRemoveHeadersConfigItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class ResponseHeadersPolicyRemoveHeadersConfigItem(dict):
    def __init__(__self__, *,
                 header: str):
        """
        :param str header: The HTTP response header name.
        """
        ResponseHeadersPolicyRemoveHeadersConfigItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header=header,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if header is None:
            raise TypeError("Missing 'header' argument")

        _setter("header", header)

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        The HTTP response header name.
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class ResponseHeadersPolicySecurityHeadersConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentSecurityPolicy":
            suggest = "content_security_policy"
        elif key == "contentTypeOptions":
            suggest = "content_type_options"
        elif key == "frameOptions":
            suggest = "frame_options"
        elif key == "referrerPolicy":
            suggest = "referrer_policy"
        elif key == "strictTransportSecurity":
            suggest = "strict_transport_security"
        elif key == "xssProtection":
            suggest = "xss_protection"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseHeadersPolicySecurityHeadersConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseHeadersPolicySecurityHeadersConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseHeadersPolicySecurityHeadersConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_security_policy: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicy'] = None,
                 content_type_options: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigContentTypeOptions'] = None,
                 frame_options: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigFrameOptions'] = None,
                 referrer_policy: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigReferrerPolicy'] = None,
                 strict_transport_security: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurity'] = None,
                 xss_protection: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigXssProtection'] = None):
        """
        :param 'ResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyArgs' content_security_policy: The policy directives and their values that CloudFront includes as values for the `Content-Security-Policy` HTTP response header. See Content Security Policy for more information.
        :param 'ResponseHeadersPolicySecurityHeadersConfigContentTypeOptionsArgs' content_type_options: Determines whether CloudFront includes the `X-Content-Type-Options` HTTP response header with its value set to `nosniff`. See Content Type Options for more information.
        :param 'ResponseHeadersPolicySecurityHeadersConfigFrameOptionsArgs' frame_options: Determines whether CloudFront includes the `X-Frame-Options` HTTP response header and the header’s value. See Frame Options for more information.
        :param 'ResponseHeadersPolicySecurityHeadersConfigReferrerPolicyArgs' referrer_policy: Determines whether CloudFront includes the `Referrer-Policy` HTTP response header and the header’s value. See Referrer Policy for more information.
        :param 'ResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityArgs' strict_transport_security: Determines whether CloudFront includes the `Strict-Transport-Security` HTTP response header and the header’s value. See Strict Transport Security for more information.
        :param 'ResponseHeadersPolicySecurityHeadersConfigXssProtectionArgs' xss_protection: Determine whether CloudFront includes the `X-XSS-Protection` HTTP response header and the header’s value. See XSS Protection for more information.
        """
        ResponseHeadersPolicySecurityHeadersConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_security_policy=content_security_policy,
            content_type_options=content_type_options,
            frame_options=frame_options,
            referrer_policy=referrer_policy,
            strict_transport_security=strict_transport_security,
            xss_protection=xss_protection,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_security_policy: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicy'] = None,
             content_type_options: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigContentTypeOptions'] = None,
             frame_options: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigFrameOptions'] = None,
             referrer_policy: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigReferrerPolicy'] = None,
             strict_transport_security: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurity'] = None,
             xss_protection: Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigXssProtection'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content_security_policy is None and 'contentSecurityPolicy' in kwargs:
            content_security_policy = kwargs['contentSecurityPolicy']
        if content_type_options is None and 'contentTypeOptions' in kwargs:
            content_type_options = kwargs['contentTypeOptions']
        if frame_options is None and 'frameOptions' in kwargs:
            frame_options = kwargs['frameOptions']
        if referrer_policy is None and 'referrerPolicy' in kwargs:
            referrer_policy = kwargs['referrerPolicy']
        if strict_transport_security is None and 'strictTransportSecurity' in kwargs:
            strict_transport_security = kwargs['strictTransportSecurity']
        if xss_protection is None and 'xssProtection' in kwargs:
            xss_protection = kwargs['xssProtection']

        if content_security_policy is not None:
            _setter("content_security_policy", content_security_policy)
        if content_type_options is not None:
            _setter("content_type_options", content_type_options)
        if frame_options is not None:
            _setter("frame_options", frame_options)
        if referrer_policy is not None:
            _setter("referrer_policy", referrer_policy)
        if strict_transport_security is not None:
            _setter("strict_transport_security", strict_transport_security)
        if xss_protection is not None:
            _setter("xss_protection", xss_protection)

    @property
    @pulumi.getter(name="contentSecurityPolicy")
    def content_security_policy(self) -> Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicy']:
        """
        The policy directives and their values that CloudFront includes as values for the `Content-Security-Policy` HTTP response header. See Content Security Policy for more information.
        """
        return pulumi.get(self, "content_security_policy")

    @property
    @pulumi.getter(name="contentTypeOptions")
    def content_type_options(self) -> Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigContentTypeOptions']:
        """
        Determines whether CloudFront includes the `X-Content-Type-Options` HTTP response header with its value set to `nosniff`. See Content Type Options for more information.
        """
        return pulumi.get(self, "content_type_options")

    @property
    @pulumi.getter(name="frameOptions")
    def frame_options(self) -> Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigFrameOptions']:
        """
        Determines whether CloudFront includes the `X-Frame-Options` HTTP response header and the header’s value. See Frame Options for more information.
        """
        return pulumi.get(self, "frame_options")

    @property
    @pulumi.getter(name="referrerPolicy")
    def referrer_policy(self) -> Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigReferrerPolicy']:
        """
        Determines whether CloudFront includes the `Referrer-Policy` HTTP response header and the header’s value. See Referrer Policy for more information.
        """
        return pulumi.get(self, "referrer_policy")

    @property
    @pulumi.getter(name="strictTransportSecurity")
    def strict_transport_security(self) -> Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurity']:
        """
        Determines whether CloudFront includes the `Strict-Transport-Security` HTTP response header and the header’s value. See Strict Transport Security for more information.
        """
        return pulumi.get(self, "strict_transport_security")

    @property
    @pulumi.getter(name="xssProtection")
    def xss_protection(self) -> Optional['outputs.ResponseHeadersPolicySecurityHeadersConfigXssProtection']:
        """
        Determine whether CloudFront includes the `X-XSS-Protection` HTTP response header and the header’s value. See XSS Protection for more information.
        """
        return pulumi.get(self, "xss_protection")


@pulumi.output_type
class ResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentSecurityPolicy":
            suggest = "content_security_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_security_policy: str,
                 override: bool):
        """
        :param str content_security_policy: The policy directives and their values that CloudFront includes as values for the `Content-Security-Policy` HTTP response header.
        :param bool override: Whether CloudFront overrides the `Content-Security-Policy` HTTP response header received from the origin with the one specified in this response headers policy.
        """
        ResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_security_policy=content_security_policy,
            override=override,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_security_policy: Optional[str] = None,
             override: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content_security_policy is None and 'contentSecurityPolicy' in kwargs:
            content_security_policy = kwargs['contentSecurityPolicy']
        if content_security_policy is None:
            raise TypeError("Missing 'content_security_policy' argument")
        if override is None:
            raise TypeError("Missing 'override' argument")

        _setter("content_security_policy", content_security_policy)
        _setter("override", override)

    @property
    @pulumi.getter(name="contentSecurityPolicy")
    def content_security_policy(self) -> str:
        """
        The policy directives and their values that CloudFront includes as values for the `Content-Security-Policy` HTTP response header.
        """
        return pulumi.get(self, "content_security_policy")

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the `Content-Security-Policy` HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")


@pulumi.output_type
class ResponseHeadersPolicySecurityHeadersConfigContentTypeOptions(dict):
    def __init__(__self__, *,
                 override: bool):
        """
        :param bool override: Whether CloudFront overrides the `X-Content-Type-Options` HTTP response header received from the origin with the one specified in this response headers policy.
        """
        ResponseHeadersPolicySecurityHeadersConfigContentTypeOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            override=override,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             override: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if override is None:
            raise TypeError("Missing 'override' argument")

        _setter("override", override)

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the `X-Content-Type-Options` HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")


@pulumi.output_type
class ResponseHeadersPolicySecurityHeadersConfigFrameOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "frameOption":
            suggest = "frame_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseHeadersPolicySecurityHeadersConfigFrameOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseHeadersPolicySecurityHeadersConfigFrameOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseHeadersPolicySecurityHeadersConfigFrameOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frame_option: str,
                 override: bool):
        """
        :param str frame_option: The value of the `X-Frame-Options` HTTP response header. Valid values: `DENY` | `SAMEORIGIN`
        :param bool override: Whether CloudFront overrides the `X-Frame-Options` HTTP response header received from the origin with the one specified in this response headers policy.
        """
        ResponseHeadersPolicySecurityHeadersConfigFrameOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            frame_option=frame_option,
            override=override,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             frame_option: Optional[str] = None,
             override: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if frame_option is None and 'frameOption' in kwargs:
            frame_option = kwargs['frameOption']
        if frame_option is None:
            raise TypeError("Missing 'frame_option' argument")
        if override is None:
            raise TypeError("Missing 'override' argument")

        _setter("frame_option", frame_option)
        _setter("override", override)

    @property
    @pulumi.getter(name="frameOption")
    def frame_option(self) -> str:
        """
        The value of the `X-Frame-Options` HTTP response header. Valid values: `DENY` | `SAMEORIGIN`
        """
        return pulumi.get(self, "frame_option")

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the `X-Frame-Options` HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")


@pulumi.output_type
class ResponseHeadersPolicySecurityHeadersConfigReferrerPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "referrerPolicy":
            suggest = "referrer_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseHeadersPolicySecurityHeadersConfigReferrerPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseHeadersPolicySecurityHeadersConfigReferrerPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseHeadersPolicySecurityHeadersConfigReferrerPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 override: bool,
                 referrer_policy: str):
        """
        :param bool override: Whether CloudFront overrides the `Referrer-Policy` HTTP response header received from the origin with the one specified in this response headers policy.
        :param str referrer_policy: The value of the `Referrer-Policy` HTTP response header. Valid Values: `no-referrer` | `no-referrer-when-downgrade` | `origin` | `origin-when-cross-origin` | `same-origin` | `strict-origin` | `strict-origin-when-cross-origin` | `unsafe-url`
        """
        ResponseHeadersPolicySecurityHeadersConfigReferrerPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            override=override,
            referrer_policy=referrer_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             override: Optional[bool] = None,
             referrer_policy: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if override is None:
            raise TypeError("Missing 'override' argument")
        if referrer_policy is None and 'referrerPolicy' in kwargs:
            referrer_policy = kwargs['referrerPolicy']
        if referrer_policy is None:
            raise TypeError("Missing 'referrer_policy' argument")

        _setter("override", override)
        _setter("referrer_policy", referrer_policy)

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the `Referrer-Policy` HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="referrerPolicy")
    def referrer_policy(self) -> str:
        """
        The value of the `Referrer-Policy` HTTP response header. Valid Values: `no-referrer` | `no-referrer-when-downgrade` | `origin` | `origin-when-cross-origin` | `same-origin` | `strict-origin` | `strict-origin-when-cross-origin` | `unsafe-url`
        """
        return pulumi.get(self, "referrer_policy")


@pulumi.output_type
class ResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessControlMaxAgeSec":
            suggest = "access_control_max_age_sec"
        elif key == "includeSubdomains":
            suggest = "include_subdomains"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_control_max_age_sec: int,
                 override: bool,
                 include_subdomains: Optional[bool] = None,
                 preload: Optional[bool] = None):
        """
        :param int access_control_max_age_sec: A number that CloudFront uses as the value for the `max-age` directive in the `Strict-Transport-Security` HTTP response header.
        :param bool override: Whether CloudFront overrides the `Strict-Transport-Security` HTTP response header received from the origin with the one specified in this response headers policy.
        :param bool include_subdomains: Whether CloudFront includes the `includeSubDomains` directive in the `Strict-Transport-Security` HTTP response header.
        :param bool preload: Whether CloudFront includes the `preload` directive in the `Strict-Transport-Security` HTTP response header.
        """
        ResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_control_max_age_sec=access_control_max_age_sec,
            override=override,
            include_subdomains=include_subdomains,
            preload=preload,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_control_max_age_sec: Optional[int] = None,
             override: Optional[bool] = None,
             include_subdomains: Optional[bool] = None,
             preload: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if access_control_max_age_sec is None and 'accessControlMaxAgeSec' in kwargs:
            access_control_max_age_sec = kwargs['accessControlMaxAgeSec']
        if access_control_max_age_sec is None:
            raise TypeError("Missing 'access_control_max_age_sec' argument")
        if override is None:
            raise TypeError("Missing 'override' argument")
        if include_subdomains is None and 'includeSubdomains' in kwargs:
            include_subdomains = kwargs['includeSubdomains']

        _setter("access_control_max_age_sec", access_control_max_age_sec)
        _setter("override", override)
        if include_subdomains is not None:
            _setter("include_subdomains", include_subdomains)
        if preload is not None:
            _setter("preload", preload)

    @property
    @pulumi.getter(name="accessControlMaxAgeSec")
    def access_control_max_age_sec(self) -> int:
        """
        A number that CloudFront uses as the value for the `max-age` directive in the `Strict-Transport-Security` HTTP response header.
        """
        return pulumi.get(self, "access_control_max_age_sec")

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the `Strict-Transport-Security` HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="includeSubdomains")
    def include_subdomains(self) -> Optional[bool]:
        """
        Whether CloudFront includes the `includeSubDomains` directive in the `Strict-Transport-Security` HTTP response header.
        """
        return pulumi.get(self, "include_subdomains")

    @property
    @pulumi.getter
    def preload(self) -> Optional[bool]:
        """
        Whether CloudFront includes the `preload` directive in the `Strict-Transport-Security` HTTP response header.
        """
        return pulumi.get(self, "preload")


@pulumi.output_type
class ResponseHeadersPolicySecurityHeadersConfigXssProtection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modeBlock":
            suggest = "mode_block"
        elif key == "reportUri":
            suggest = "report_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseHeadersPolicySecurityHeadersConfigXssProtection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseHeadersPolicySecurityHeadersConfigXssProtection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseHeadersPolicySecurityHeadersConfigXssProtection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 override: bool,
                 protection: bool,
                 mode_block: Optional[bool] = None,
                 report_uri: Optional[str] = None):
        """
        :param bool override: Whether CloudFront overrides the `X-XSS-Protection` HTTP response header received from the origin with the one specified in this response headers policy.
        :param bool protection: A Boolean value that determines the value of the `X-XSS-Protection` HTTP response header. When this setting is `true`, the value of the `X-XSS-Protection` header is `1`. When this setting is `false`, the value of the `X-XSS-Protection` header is `0`.
        :param bool mode_block: Whether CloudFront includes the `mode=block` directive in the `X-XSS-Protection` header.
        :param str report_uri: A reporting URI, which CloudFront uses as the value of the report directive in the `X-XSS-Protection` header. You cannot specify a `report_uri` when `mode_block` is `true`.
        """
        ResponseHeadersPolicySecurityHeadersConfigXssProtection._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            override=override,
            protection=protection,
            mode_block=mode_block,
            report_uri=report_uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             override: Optional[bool] = None,
             protection: Optional[bool] = None,
             mode_block: Optional[bool] = None,
             report_uri: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if override is None:
            raise TypeError("Missing 'override' argument")
        if protection is None:
            raise TypeError("Missing 'protection' argument")
        if mode_block is None and 'modeBlock' in kwargs:
            mode_block = kwargs['modeBlock']
        if report_uri is None and 'reportUri' in kwargs:
            report_uri = kwargs['reportUri']

        _setter("override", override)
        _setter("protection", protection)
        if mode_block is not None:
            _setter("mode_block", mode_block)
        if report_uri is not None:
            _setter("report_uri", report_uri)

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the `X-XSS-Protection` HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def protection(self) -> bool:
        """
        A Boolean value that determines the value of the `X-XSS-Protection` HTTP response header. When this setting is `true`, the value of the `X-XSS-Protection` header is `1`. When this setting is `false`, the value of the `X-XSS-Protection` header is `0`.
        """
        return pulumi.get(self, "protection")

    @property
    @pulumi.getter(name="modeBlock")
    def mode_block(self) -> Optional[bool]:
        """
        Whether CloudFront includes the `mode=block` directive in the `X-XSS-Protection` header.
        """
        return pulumi.get(self, "mode_block")

    @property
    @pulumi.getter(name="reportUri")
    def report_uri(self) -> Optional[str]:
        """
        A reporting URI, which CloudFront uses as the value of the report directive in the `X-XSS-Protection` header. You cannot specify a `report_uri` when `mode_block` is `true`.
        """
        return pulumi.get(self, "report_uri")


@pulumi.output_type
class ResponseHeadersPolicyServerTimingHeadersConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "samplingRate":
            suggest = "sampling_rate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseHeadersPolicyServerTimingHeadersConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseHeadersPolicyServerTimingHeadersConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseHeadersPolicyServerTimingHeadersConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 sampling_rate: float):
        """
        :param bool enabled: A Whether CloudFront adds the `Server-Timing` header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
        :param float sampling_rate: A number 0–100 (inclusive) that specifies the percentage of responses that you want CloudFront to add the Server-Timing header to. Valid range: Minimum value of 0.0. Maximum value of 100.0.
        """
        ResponseHeadersPolicyServerTimingHeadersConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            sampling_rate=sampling_rate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             sampling_rate: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if sampling_rate is None and 'samplingRate' in kwargs:
            sampling_rate = kwargs['samplingRate']
        if sampling_rate is None:
            raise TypeError("Missing 'sampling_rate' argument")

        _setter("enabled", enabled)
        _setter("sampling_rate", sampling_rate)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        A Whether CloudFront adds the `Server-Timing` header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> float:
        """
        A number 0–100 (inclusive) that specifies the percentage of responses that you want CloudFront to add the Server-Timing header to. Valid range: Minimum value of 0.0. Maximum value of 100.0.
        """
        return pulumi.get(self, "sampling_rate")


@pulumi.output_type
class GetCachePolicyParametersInCacheKeyAndForwardedToOriginResult(dict):
    def __init__(__self__, *,
                 cookies_configs: Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigResult'],
                 enable_accept_encoding_brotli: bool,
                 enable_accept_encoding_gzip: bool,
                 headers_configs: Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigResult'],
                 query_strings_configs: Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigResult']):
        """
        :param Sequence['GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigArgs'] cookies_configs: Object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
        :param bool enable_accept_encoding_brotli: A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
        :param bool enable_accept_encoding_gzip: A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
        :param Sequence['GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigArgs'] headers_configs: Object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
        :param Sequence['GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigArgs'] query_strings_configs: Object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Query String Config for more information.
        """
        GetCachePolicyParametersInCacheKeyAndForwardedToOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookies_configs=cookies_configs,
            enable_accept_encoding_brotli=enable_accept_encoding_brotli,
            enable_accept_encoding_gzip=enable_accept_encoding_gzip,
            headers_configs=headers_configs,
            query_strings_configs=query_strings_configs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookies_configs: Optional[Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigResult']] = None,
             enable_accept_encoding_brotli: Optional[bool] = None,
             enable_accept_encoding_gzip: Optional[bool] = None,
             headers_configs: Optional[Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigResult']] = None,
             query_strings_configs: Optional[Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookies_configs is None and 'cookiesConfigs' in kwargs:
            cookies_configs = kwargs['cookiesConfigs']
        if cookies_configs is None:
            raise TypeError("Missing 'cookies_configs' argument")
        if enable_accept_encoding_brotli is None and 'enableAcceptEncodingBrotli' in kwargs:
            enable_accept_encoding_brotli = kwargs['enableAcceptEncodingBrotli']
        if enable_accept_encoding_brotli is None:
            raise TypeError("Missing 'enable_accept_encoding_brotli' argument")
        if enable_accept_encoding_gzip is None and 'enableAcceptEncodingGzip' in kwargs:
            enable_accept_encoding_gzip = kwargs['enableAcceptEncodingGzip']
        if enable_accept_encoding_gzip is None:
            raise TypeError("Missing 'enable_accept_encoding_gzip' argument")
        if headers_configs is None and 'headersConfigs' in kwargs:
            headers_configs = kwargs['headersConfigs']
        if headers_configs is None:
            raise TypeError("Missing 'headers_configs' argument")
        if query_strings_configs is None and 'queryStringsConfigs' in kwargs:
            query_strings_configs = kwargs['queryStringsConfigs']
        if query_strings_configs is None:
            raise TypeError("Missing 'query_strings_configs' argument")

        _setter("cookies_configs", cookies_configs)
        _setter("enable_accept_encoding_brotli", enable_accept_encoding_brotli)
        _setter("enable_accept_encoding_gzip", enable_accept_encoding_gzip)
        _setter("headers_configs", headers_configs)
        _setter("query_strings_configs", query_strings_configs)

    @property
    @pulumi.getter(name="cookiesConfigs")
    def cookies_configs(self) -> Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigResult']:
        """
        Object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
        """
        return pulumi.get(self, "cookies_configs")

    @property
    @pulumi.getter(name="enableAcceptEncodingBrotli")
    def enable_accept_encoding_brotli(self) -> bool:
        """
        A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
        """
        return pulumi.get(self, "enable_accept_encoding_brotli")

    @property
    @pulumi.getter(name="enableAcceptEncodingGzip")
    def enable_accept_encoding_gzip(self) -> bool:
        """
        A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
        """
        return pulumi.get(self, "enable_accept_encoding_gzip")

    @property
    @pulumi.getter(name="headersConfigs")
    def headers_configs(self) -> Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigResult']:
        """
        Object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
        """
        return pulumi.get(self, "headers_configs")

    @property
    @pulumi.getter(name="queryStringsConfigs")
    def query_strings_configs(self) -> Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigResult']:
        """
        Object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Query String Config for more information.
        """
        return pulumi.get(self, "query_strings_configs")


@pulumi.output_type
class GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigResult(dict):
    def __init__(__self__, *,
                 cookie_behavior: str,
                 cookies: Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookieResult']):
        """
        :param str cookie_behavior: Determines whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are `none`, `whitelist`, `allExcept`, `all`.
        :param Sequence['GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookieArgs'] cookies: Object that contains a list of cookie names. See Items for more information.
        """
        GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_behavior=cookie_behavior,
            cookies=cookies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_behavior: Optional[str] = None,
             cookies: Optional[Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookieResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookie_behavior is None and 'cookieBehavior' in kwargs:
            cookie_behavior = kwargs['cookieBehavior']
        if cookie_behavior is None:
            raise TypeError("Missing 'cookie_behavior' argument")
        if cookies is None:
            raise TypeError("Missing 'cookies' argument")

        _setter("cookie_behavior", cookie_behavior)
        _setter("cookies", cookies)

    @property
    @pulumi.getter(name="cookieBehavior")
    def cookie_behavior(self) -> str:
        """
        Determines whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are `none`, `whitelist`, `allExcept`, `all`.
        """
        return pulumi.get(self, "cookie_behavior")

    @property
    @pulumi.getter
    def cookies(self) -> Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookieResult']:
        """
        Object that contains a list of cookie names. See Items for more information.
        """
        return pulumi.get(self, "cookies")


@pulumi.output_type
class GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookieResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        """
        :param Sequence[str] items: List of item names (`cookies`, `headers`, or `query_strings`).
        """
        GetCachePolicyParametersInCacheKeyAndForwardedToOriginCookiesConfigCookieResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        List of item names (`cookies`, `headers`, or `query_strings`).
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigResult(dict):
    def __init__(__self__, *,
                 header_behavior: str,
                 headers: Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaderResult']):
        """
        :param str header_behavior: Determines whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are `none`, `whitelist`.
        :param Sequence['GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaderArgs'] headers: Object that contains a list of header names. See Items for more information.
        """
        GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_behavior=header_behavior,
            headers=headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_behavior: Optional[str] = None,
             headers: Optional[Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaderResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if header_behavior is None and 'headerBehavior' in kwargs:
            header_behavior = kwargs['headerBehavior']
        if header_behavior is None:
            raise TypeError("Missing 'header_behavior' argument")
        if headers is None:
            raise TypeError("Missing 'headers' argument")

        _setter("header_behavior", header_behavior)
        _setter("headers", headers)

    @property
    @pulumi.getter(name="headerBehavior")
    def header_behavior(self) -> str:
        """
        Determines whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are `none`, `whitelist`.
        """
        return pulumi.get(self, "header_behavior")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaderResult']:
        """
        Object that contains a list of header names. See Items for more information.
        """
        return pulumi.get(self, "headers")


@pulumi.output_type
class GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaderResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        """
        :param Sequence[str] items: List of item names (`cookies`, `headers`, or `query_strings`).
        """
        GetCachePolicyParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        List of item names (`cookies`, `headers`, or `query_strings`).
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigResult(dict):
    def __init__(__self__, *,
                 query_string_behavior: str,
                 query_strings: Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStringResult']):
        """
        :param str query_string_behavior: Determines whether any URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are `none`, `whitelist`, `allExcept`, `all`.
        :param Sequence['GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStringArgs'] query_strings: Object that contains a list of query string names. See Items for more information.
        """
        GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            query_string_behavior=query_string_behavior,
            query_strings=query_strings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             query_string_behavior: Optional[str] = None,
             query_strings: Optional[Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStringResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if query_string_behavior is None and 'queryStringBehavior' in kwargs:
            query_string_behavior = kwargs['queryStringBehavior']
        if query_string_behavior is None:
            raise TypeError("Missing 'query_string_behavior' argument")
        if query_strings is None and 'queryStrings' in kwargs:
            query_strings = kwargs['queryStrings']
        if query_strings is None:
            raise TypeError("Missing 'query_strings' argument")

        _setter("query_string_behavior", query_string_behavior)
        _setter("query_strings", query_strings)

    @property
    @pulumi.getter(name="queryStringBehavior")
    def query_string_behavior(self) -> str:
        """
        Determines whether any URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are `none`, `whitelist`, `allExcept`, `all`.
        """
        return pulumi.get(self, "query_string_behavior")

    @property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Sequence['outputs.GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStringResult']:
        """
        Object that contains a list of query string names. See Items for more information.
        """
        return pulumi.get(self, "query_strings")


@pulumi.output_type
class GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStringResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        """
        :param Sequence[str] items: List of item names (`cookies`, `headers`, or `query_strings`).
        """
        GetCachePolicyParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStringResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        List of item names (`cookies`, `headers`, or `query_strings`).
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOriginRequestPolicyCookiesConfigResult(dict):
    def __init__(__self__, *,
                 cookie_behavior: str,
                 cookies: Sequence['outputs.GetOriginRequestPolicyCookiesConfigCookieResult']):
        GetOriginRequestPolicyCookiesConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_behavior=cookie_behavior,
            cookies=cookies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_behavior: Optional[str] = None,
             cookies: Optional[Sequence['outputs.GetOriginRequestPolicyCookiesConfigCookieResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookie_behavior is None and 'cookieBehavior' in kwargs:
            cookie_behavior = kwargs['cookieBehavior']
        if cookie_behavior is None:
            raise TypeError("Missing 'cookie_behavior' argument")
        if cookies is None:
            raise TypeError("Missing 'cookies' argument")

        _setter("cookie_behavior", cookie_behavior)
        _setter("cookies", cookies)

    @property
    @pulumi.getter(name="cookieBehavior")
    def cookie_behavior(self) -> str:
        return pulumi.get(self, "cookie_behavior")

    @property
    @pulumi.getter
    def cookies(self) -> Sequence['outputs.GetOriginRequestPolicyCookiesConfigCookieResult']:
        return pulumi.get(self, "cookies")


@pulumi.output_type
class GetOriginRequestPolicyCookiesConfigCookieResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        GetOriginRequestPolicyCookiesConfigCookieResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOriginRequestPolicyHeadersConfigResult(dict):
    def __init__(__self__, *,
                 header_behavior: str,
                 headers: Sequence['outputs.GetOriginRequestPolicyHeadersConfigHeaderResult']):
        GetOriginRequestPolicyHeadersConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_behavior=header_behavior,
            headers=headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_behavior: Optional[str] = None,
             headers: Optional[Sequence['outputs.GetOriginRequestPolicyHeadersConfigHeaderResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if header_behavior is None and 'headerBehavior' in kwargs:
            header_behavior = kwargs['headerBehavior']
        if header_behavior is None:
            raise TypeError("Missing 'header_behavior' argument")
        if headers is None:
            raise TypeError("Missing 'headers' argument")

        _setter("header_behavior", header_behavior)
        _setter("headers", headers)

    @property
    @pulumi.getter(name="headerBehavior")
    def header_behavior(self) -> str:
        return pulumi.get(self, "header_behavior")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetOriginRequestPolicyHeadersConfigHeaderResult']:
        return pulumi.get(self, "headers")


@pulumi.output_type
class GetOriginRequestPolicyHeadersConfigHeaderResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        GetOriginRequestPolicyHeadersConfigHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOriginRequestPolicyQueryStringsConfigResult(dict):
    def __init__(__self__, *,
                 query_string_behavior: str,
                 query_strings: Sequence['outputs.GetOriginRequestPolicyQueryStringsConfigQueryStringResult']):
        GetOriginRequestPolicyQueryStringsConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            query_string_behavior=query_string_behavior,
            query_strings=query_strings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             query_string_behavior: Optional[str] = None,
             query_strings: Optional[Sequence['outputs.GetOriginRequestPolicyQueryStringsConfigQueryStringResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if query_string_behavior is None and 'queryStringBehavior' in kwargs:
            query_string_behavior = kwargs['queryStringBehavior']
        if query_string_behavior is None:
            raise TypeError("Missing 'query_string_behavior' argument")
        if query_strings is None and 'queryStrings' in kwargs:
            query_strings = kwargs['queryStrings']
        if query_strings is None:
            raise TypeError("Missing 'query_strings' argument")

        _setter("query_string_behavior", query_string_behavior)
        _setter("query_strings", query_strings)

    @property
    @pulumi.getter(name="queryStringBehavior")
    def query_string_behavior(self) -> str:
        return pulumi.get(self, "query_string_behavior")

    @property
    @pulumi.getter(name="queryStrings")
    def query_strings(self) -> Sequence['outputs.GetOriginRequestPolicyQueryStringsConfigQueryStringResult']:
        return pulumi.get(self, "query_strings")


@pulumi.output_type
class GetOriginRequestPolicyQueryStringsConfigQueryStringResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        GetOriginRequestPolicyQueryStringsConfigQueryStringResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRealtimeLogConfigEndpointResult(dict):
    def __init__(__self__, *,
                 kinesis_stream_configs: Sequence['outputs.GetRealtimeLogConfigEndpointKinesisStreamConfigResult'],
                 stream_type: str):
        """
        :param Sequence['GetRealtimeLogConfigEndpointKinesisStreamConfigArgs'] kinesis_stream_configs: (Required) Amazon Kinesis data stream configuration.
        :param str stream_type: (Required) Type of data stream where real-time log data is sent. The only valid value is `Kinesis`.
        """
        GetRealtimeLogConfigEndpointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kinesis_stream_configs=kinesis_stream_configs,
            stream_type=stream_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kinesis_stream_configs: Optional[Sequence['outputs.GetRealtimeLogConfigEndpointKinesisStreamConfigResult']] = None,
             stream_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if kinesis_stream_configs is None and 'kinesisStreamConfigs' in kwargs:
            kinesis_stream_configs = kwargs['kinesisStreamConfigs']
        if kinesis_stream_configs is None:
            raise TypeError("Missing 'kinesis_stream_configs' argument")
        if stream_type is None and 'streamType' in kwargs:
            stream_type = kwargs['streamType']
        if stream_type is None:
            raise TypeError("Missing 'stream_type' argument")

        _setter("kinesis_stream_configs", kinesis_stream_configs)
        _setter("stream_type", stream_type)

    @property
    @pulumi.getter(name="kinesisStreamConfigs")
    def kinesis_stream_configs(self) -> Sequence['outputs.GetRealtimeLogConfigEndpointKinesisStreamConfigResult']:
        """
        (Required) Amazon Kinesis data stream configuration.
        """
        return pulumi.get(self, "kinesis_stream_configs")

    @property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> str:
        """
        (Required) Type of data stream where real-time log data is sent. The only valid value is `Kinesis`.
        """
        return pulumi.get(self, "stream_type")


@pulumi.output_type
class GetRealtimeLogConfigEndpointKinesisStreamConfigResult(dict):
    def __init__(__self__, *,
                 role_arn: str,
                 stream_arn: str):
        """
        :param str role_arn: (Required) ARN of an IAM role that CloudFront can use to send real-time log data to the Kinesis data stream.
               See the [AWS documentation](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-iam-role) for more information.
        :param str stream_arn: (Required) ARN of the Kinesis data stream.
        """
        GetRealtimeLogConfigEndpointKinesisStreamConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
            stream_arn=stream_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: Optional[str] = None,
             stream_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")
        if stream_arn is None and 'streamArn' in kwargs:
            stream_arn = kwargs['streamArn']
        if stream_arn is None:
            raise TypeError("Missing 'stream_arn' argument")

        _setter("role_arn", role_arn)
        _setter("stream_arn", stream_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        (Required) ARN of an IAM role that CloudFront can use to send real-time log data to the Kinesis data stream.
        See the [AWS documentation](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-iam-role) for more information.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        """
        (Required) ARN of the Kinesis data stream.
        """
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class GetResponseHeadersPolicyCorsConfigResult(dict):
    def __init__(__self__, *,
                 access_control_allow_credentials: bool,
                 access_control_allow_headers: Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlAllowHeaderResult'],
                 access_control_allow_methods: Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlAllowMethodResult'],
                 access_control_allow_origins: Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlAllowOriginResult'],
                 access_control_expose_headers: Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlExposeHeaderResult'],
                 access_control_max_age_sec: int,
                 origin_override: bool):
        """
        :param bool access_control_allow_credentials: A Boolean value that CloudFront uses as the value for the Access-Control-Allow-Credentials HTTP response header.
        :param Sequence['GetResponseHeadersPolicyCorsConfigAccessControlAllowHeaderArgs'] access_control_allow_headers: Object that contains an attribute `items` that contains a list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header.
        :param Sequence['GetResponseHeadersPolicyCorsConfigAccessControlAllowMethodArgs'] access_control_allow_methods: Object that contains an attribute `items` that contains a list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header. Valid values: `GET` | `POST` | `OPTIONS` | `PUT` | `DELETE` | `HEAD` | `ALL`
        :param Sequence['GetResponseHeadersPolicyCorsConfigAccessControlAllowOriginArgs'] access_control_allow_origins: Object that contains an attribute `items` that contains a list of origins that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header.
        :param Sequence['GetResponseHeadersPolicyCorsConfigAccessControlExposeHeaderArgs'] access_control_expose_headers: Object that contains an attribute `items` that contains a list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header.
        :param int access_control_max_age_sec: A number that CloudFront uses as the value for the max-age directive in the Strict-Transport-Security HTTP response header.
        """
        GetResponseHeadersPolicyCorsConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_control_allow_credentials=access_control_allow_credentials,
            access_control_allow_headers=access_control_allow_headers,
            access_control_allow_methods=access_control_allow_methods,
            access_control_allow_origins=access_control_allow_origins,
            access_control_expose_headers=access_control_expose_headers,
            access_control_max_age_sec=access_control_max_age_sec,
            origin_override=origin_override,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_control_allow_credentials: Optional[bool] = None,
             access_control_allow_headers: Optional[Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlAllowHeaderResult']] = None,
             access_control_allow_methods: Optional[Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlAllowMethodResult']] = None,
             access_control_allow_origins: Optional[Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlAllowOriginResult']] = None,
             access_control_expose_headers: Optional[Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlExposeHeaderResult']] = None,
             access_control_max_age_sec: Optional[int] = None,
             origin_override: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if access_control_allow_credentials is None and 'accessControlAllowCredentials' in kwargs:
            access_control_allow_credentials = kwargs['accessControlAllowCredentials']
        if access_control_allow_credentials is None:
            raise TypeError("Missing 'access_control_allow_credentials' argument")
        if access_control_allow_headers is None and 'accessControlAllowHeaders' in kwargs:
            access_control_allow_headers = kwargs['accessControlAllowHeaders']
        if access_control_allow_headers is None:
            raise TypeError("Missing 'access_control_allow_headers' argument")
        if access_control_allow_methods is None and 'accessControlAllowMethods' in kwargs:
            access_control_allow_methods = kwargs['accessControlAllowMethods']
        if access_control_allow_methods is None:
            raise TypeError("Missing 'access_control_allow_methods' argument")
        if access_control_allow_origins is None and 'accessControlAllowOrigins' in kwargs:
            access_control_allow_origins = kwargs['accessControlAllowOrigins']
        if access_control_allow_origins is None:
            raise TypeError("Missing 'access_control_allow_origins' argument")
        if access_control_expose_headers is None and 'accessControlExposeHeaders' in kwargs:
            access_control_expose_headers = kwargs['accessControlExposeHeaders']
        if access_control_expose_headers is None:
            raise TypeError("Missing 'access_control_expose_headers' argument")
        if access_control_max_age_sec is None and 'accessControlMaxAgeSec' in kwargs:
            access_control_max_age_sec = kwargs['accessControlMaxAgeSec']
        if access_control_max_age_sec is None:
            raise TypeError("Missing 'access_control_max_age_sec' argument")
        if origin_override is None and 'originOverride' in kwargs:
            origin_override = kwargs['originOverride']
        if origin_override is None:
            raise TypeError("Missing 'origin_override' argument")

        _setter("access_control_allow_credentials", access_control_allow_credentials)
        _setter("access_control_allow_headers", access_control_allow_headers)
        _setter("access_control_allow_methods", access_control_allow_methods)
        _setter("access_control_allow_origins", access_control_allow_origins)
        _setter("access_control_expose_headers", access_control_expose_headers)
        _setter("access_control_max_age_sec", access_control_max_age_sec)
        _setter("origin_override", origin_override)

    @property
    @pulumi.getter(name="accessControlAllowCredentials")
    def access_control_allow_credentials(self) -> bool:
        """
        A Boolean value that CloudFront uses as the value for the Access-Control-Allow-Credentials HTTP response header.
        """
        return pulumi.get(self, "access_control_allow_credentials")

    @property
    @pulumi.getter(name="accessControlAllowHeaders")
    def access_control_allow_headers(self) -> Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlAllowHeaderResult']:
        """
        Object that contains an attribute `items` that contains a list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header.
        """
        return pulumi.get(self, "access_control_allow_headers")

    @property
    @pulumi.getter(name="accessControlAllowMethods")
    def access_control_allow_methods(self) -> Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlAllowMethodResult']:
        """
        Object that contains an attribute `items` that contains a list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header. Valid values: `GET` | `POST` | `OPTIONS` | `PUT` | `DELETE` | `HEAD` | `ALL`
        """
        return pulumi.get(self, "access_control_allow_methods")

    @property
    @pulumi.getter(name="accessControlAllowOrigins")
    def access_control_allow_origins(self) -> Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlAllowOriginResult']:
        """
        Object that contains an attribute `items` that contains a list of origins that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header.
        """
        return pulumi.get(self, "access_control_allow_origins")

    @property
    @pulumi.getter(name="accessControlExposeHeaders")
    def access_control_expose_headers(self) -> Sequence['outputs.GetResponseHeadersPolicyCorsConfigAccessControlExposeHeaderResult']:
        """
        Object that contains an attribute `items` that contains a list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header.
        """
        return pulumi.get(self, "access_control_expose_headers")

    @property
    @pulumi.getter(name="accessControlMaxAgeSec")
    def access_control_max_age_sec(self) -> int:
        """
        A number that CloudFront uses as the value for the max-age directive in the Strict-Transport-Security HTTP response header.
        """
        return pulumi.get(self, "access_control_max_age_sec")

    @property
    @pulumi.getter(name="originOverride")
    def origin_override(self) -> bool:
        return pulumi.get(self, "origin_override")


@pulumi.output_type
class GetResponseHeadersPolicyCorsConfigAccessControlAllowHeaderResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        GetResponseHeadersPolicyCorsConfigAccessControlAllowHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResponseHeadersPolicyCorsConfigAccessControlAllowMethodResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        GetResponseHeadersPolicyCorsConfigAccessControlAllowMethodResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResponseHeadersPolicyCorsConfigAccessControlAllowOriginResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        GetResponseHeadersPolicyCorsConfigAccessControlAllowOriginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResponseHeadersPolicyCorsConfigAccessControlExposeHeaderResult(dict):
    def __init__(__self__, *,
                 items: Sequence[str]):
        GetResponseHeadersPolicyCorsConfigAccessControlExposeHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResponseHeadersPolicyCustomHeadersConfigResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetResponseHeadersPolicyCustomHeadersConfigItemResult']):
        GetResponseHeadersPolicyCustomHeadersConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetResponseHeadersPolicyCustomHeadersConfigItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetResponseHeadersPolicyCustomHeadersConfigItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResponseHeadersPolicyCustomHeadersConfigItemResult(dict):
    def __init__(__self__, *,
                 header: str,
                 override: bool,
                 value: str):
        """
        :param str header: The HTTP header name.
        :param bool override: Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        :param str value: Value for the HTTP response header.
        """
        GetResponseHeadersPolicyCustomHeadersConfigItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header=header,
            override=override,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header: Optional[str] = None,
             override: Optional[bool] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if header is None:
            raise TypeError("Missing 'header' argument")
        if override is None:
            raise TypeError("Missing 'override' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("header", header)
        _setter("override", override)
        _setter("value", value)

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        The HTTP header name.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value for the HTTP response header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResponseHeadersPolicyRemoveHeadersConfigResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetResponseHeadersPolicyRemoveHeadersConfigItemResult']):
        GetResponseHeadersPolicyRemoveHeadersConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetResponseHeadersPolicyRemoveHeadersConfigItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetResponseHeadersPolicyRemoveHeadersConfigItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResponseHeadersPolicyRemoveHeadersConfigItemResult(dict):
    def __init__(__self__, *,
                 header: str):
        """
        :param str header: The HTTP header name.
        """
        GetResponseHeadersPolicyRemoveHeadersConfigItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header=header,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if header is None:
            raise TypeError("Missing 'header' argument")

        _setter("header", header)

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        The HTTP header name.
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class GetResponseHeadersPolicySecurityHeadersConfigResult(dict):
    def __init__(__self__, *,
                 content_security_policies: Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyResult'],
                 content_type_options: Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigContentTypeOptionResult'],
                 frame_options: Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigFrameOptionResult'],
                 referrer_policies: Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigReferrerPolicyResult'],
                 strict_transport_securities: Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityResult'],
                 xss_protections: Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigXssProtectionResult']):
        """
        :param Sequence['GetResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyArgs'] content_security_policies: The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header.
        :param Sequence['GetResponseHeadersPolicySecurityHeadersConfigContentTypeOptionArgs'] content_type_options: A setting that determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. See Content Type Options for more information.
        :param Sequence['GetResponseHeadersPolicySecurityHeadersConfigFrameOptionArgs'] frame_options: Setting that determines whether CloudFront includes the X-Frame-Options HTTP response header and the header’s value. See Frame Options for more information.
        :param Sequence['GetResponseHeadersPolicySecurityHeadersConfigReferrerPolicyArgs'] referrer_policies: Value of the Referrer-Policy HTTP response header. Valid Values: `no-referrer` | `no-referrer-when-downgrade` | `origin` | `origin-when-cross-origin` | `same-origin` | `strict-origin` | `strict-origin-when-cross-origin` | `unsafe-url`
        :param Sequence['GetResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityArgs'] strict_transport_securities: Settings that determine whether CloudFront includes the Strict-Transport-Security HTTP response header and the header’s value. See Strict Transport Security for more information.
        :param Sequence['GetResponseHeadersPolicySecurityHeadersConfigXssProtectionArgs'] xss_protections: Settings that determine whether CloudFront includes the X-XSS-Protection HTTP response header and the header’s value. See XSS Protection for more information.
        """
        GetResponseHeadersPolicySecurityHeadersConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_security_policies=content_security_policies,
            content_type_options=content_type_options,
            frame_options=frame_options,
            referrer_policies=referrer_policies,
            strict_transport_securities=strict_transport_securities,
            xss_protections=xss_protections,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_security_policies: Optional[Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyResult']] = None,
             content_type_options: Optional[Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigContentTypeOptionResult']] = None,
             frame_options: Optional[Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigFrameOptionResult']] = None,
             referrer_policies: Optional[Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigReferrerPolicyResult']] = None,
             strict_transport_securities: Optional[Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityResult']] = None,
             xss_protections: Optional[Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigXssProtectionResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content_security_policies is None and 'contentSecurityPolicies' in kwargs:
            content_security_policies = kwargs['contentSecurityPolicies']
        if content_security_policies is None:
            raise TypeError("Missing 'content_security_policies' argument")
        if content_type_options is None and 'contentTypeOptions' in kwargs:
            content_type_options = kwargs['contentTypeOptions']
        if content_type_options is None:
            raise TypeError("Missing 'content_type_options' argument")
        if frame_options is None and 'frameOptions' in kwargs:
            frame_options = kwargs['frameOptions']
        if frame_options is None:
            raise TypeError("Missing 'frame_options' argument")
        if referrer_policies is None and 'referrerPolicies' in kwargs:
            referrer_policies = kwargs['referrerPolicies']
        if referrer_policies is None:
            raise TypeError("Missing 'referrer_policies' argument")
        if strict_transport_securities is None and 'strictTransportSecurities' in kwargs:
            strict_transport_securities = kwargs['strictTransportSecurities']
        if strict_transport_securities is None:
            raise TypeError("Missing 'strict_transport_securities' argument")
        if xss_protections is None and 'xssProtections' in kwargs:
            xss_protections = kwargs['xssProtections']
        if xss_protections is None:
            raise TypeError("Missing 'xss_protections' argument")

        _setter("content_security_policies", content_security_policies)
        _setter("content_type_options", content_type_options)
        _setter("frame_options", frame_options)
        _setter("referrer_policies", referrer_policies)
        _setter("strict_transport_securities", strict_transport_securities)
        _setter("xss_protections", xss_protections)

    @property
    @pulumi.getter(name="contentSecurityPolicies")
    def content_security_policies(self) -> Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyResult']:
        """
        The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header.
        """
        return pulumi.get(self, "content_security_policies")

    @property
    @pulumi.getter(name="contentTypeOptions")
    def content_type_options(self) -> Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigContentTypeOptionResult']:
        """
        A setting that determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. See Content Type Options for more information.
        """
        return pulumi.get(self, "content_type_options")

    @property
    @pulumi.getter(name="frameOptions")
    def frame_options(self) -> Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigFrameOptionResult']:
        """
        Setting that determines whether CloudFront includes the X-Frame-Options HTTP response header and the header’s value. See Frame Options for more information.
        """
        return pulumi.get(self, "frame_options")

    @property
    @pulumi.getter(name="referrerPolicies")
    def referrer_policies(self) -> Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigReferrerPolicyResult']:
        """
        Value of the Referrer-Policy HTTP response header. Valid Values: `no-referrer` | `no-referrer-when-downgrade` | `origin` | `origin-when-cross-origin` | `same-origin` | `strict-origin` | `strict-origin-when-cross-origin` | `unsafe-url`
        """
        return pulumi.get(self, "referrer_policies")

    @property
    @pulumi.getter(name="strictTransportSecurities")
    def strict_transport_securities(self) -> Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityResult']:
        """
        Settings that determine whether CloudFront includes the Strict-Transport-Security HTTP response header and the header’s value. See Strict Transport Security for more information.
        """
        return pulumi.get(self, "strict_transport_securities")

    @property
    @pulumi.getter(name="xssProtections")
    def xss_protections(self) -> Sequence['outputs.GetResponseHeadersPolicySecurityHeadersConfigXssProtectionResult']:
        """
        Settings that determine whether CloudFront includes the X-XSS-Protection HTTP response header and the header’s value. See XSS Protection for more information.
        """
        return pulumi.get(self, "xss_protections")


@pulumi.output_type
class GetResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyResult(dict):
    def __init__(__self__, *,
                 content_security_policy: str,
                 override: bool):
        """
        :param str content_security_policy: The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header.
        :param bool override: Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        """
        GetResponseHeadersPolicySecurityHeadersConfigContentSecurityPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_security_policy=content_security_policy,
            override=override,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_security_policy: Optional[str] = None,
             override: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content_security_policy is None and 'contentSecurityPolicy' in kwargs:
            content_security_policy = kwargs['contentSecurityPolicy']
        if content_security_policy is None:
            raise TypeError("Missing 'content_security_policy' argument")
        if override is None:
            raise TypeError("Missing 'override' argument")

        _setter("content_security_policy", content_security_policy)
        _setter("override", override)

    @property
    @pulumi.getter(name="contentSecurityPolicy")
    def content_security_policy(self) -> str:
        """
        The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header.
        """
        return pulumi.get(self, "content_security_policy")

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")


@pulumi.output_type
class GetResponseHeadersPolicySecurityHeadersConfigContentTypeOptionResult(dict):
    def __init__(__self__, *,
                 override: bool):
        """
        :param bool override: Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        """
        GetResponseHeadersPolicySecurityHeadersConfigContentTypeOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            override=override,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             override: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if override is None:
            raise TypeError("Missing 'override' argument")

        _setter("override", override)

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")


@pulumi.output_type
class GetResponseHeadersPolicySecurityHeadersConfigFrameOptionResult(dict):
    def __init__(__self__, *,
                 frame_option: str,
                 override: bool):
        """
        :param str frame_option: Value of the X-Frame-Options HTTP response header. Valid values: `DENY` | `SAMEORIGIN`
        :param bool override: Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        """
        GetResponseHeadersPolicySecurityHeadersConfigFrameOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            frame_option=frame_option,
            override=override,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             frame_option: Optional[str] = None,
             override: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if frame_option is None and 'frameOption' in kwargs:
            frame_option = kwargs['frameOption']
        if frame_option is None:
            raise TypeError("Missing 'frame_option' argument")
        if override is None:
            raise TypeError("Missing 'override' argument")

        _setter("frame_option", frame_option)
        _setter("override", override)

    @property
    @pulumi.getter(name="frameOption")
    def frame_option(self) -> str:
        """
        Value of the X-Frame-Options HTTP response header. Valid values: `DENY` | `SAMEORIGIN`
        """
        return pulumi.get(self, "frame_option")

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")


@pulumi.output_type
class GetResponseHeadersPolicySecurityHeadersConfigReferrerPolicyResult(dict):
    def __init__(__self__, *,
                 override: bool,
                 referrer_policy: str):
        """
        :param bool override: Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        :param str referrer_policy: Value of the Referrer-Policy HTTP response header. Valid Values: `no-referrer` | `no-referrer-when-downgrade` | `origin` | `origin-when-cross-origin` | `same-origin` | `strict-origin` | `strict-origin-when-cross-origin` | `unsafe-url`
        """
        GetResponseHeadersPolicySecurityHeadersConfigReferrerPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            override=override,
            referrer_policy=referrer_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             override: Optional[bool] = None,
             referrer_policy: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if override is None:
            raise TypeError("Missing 'override' argument")
        if referrer_policy is None and 'referrerPolicy' in kwargs:
            referrer_policy = kwargs['referrerPolicy']
        if referrer_policy is None:
            raise TypeError("Missing 'referrer_policy' argument")

        _setter("override", override)
        _setter("referrer_policy", referrer_policy)

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="referrerPolicy")
    def referrer_policy(self) -> str:
        """
        Value of the Referrer-Policy HTTP response header. Valid Values: `no-referrer` | `no-referrer-when-downgrade` | `origin` | `origin-when-cross-origin` | `same-origin` | `strict-origin` | `strict-origin-when-cross-origin` | `unsafe-url`
        """
        return pulumi.get(self, "referrer_policy")


@pulumi.output_type
class GetResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityResult(dict):
    def __init__(__self__, *,
                 access_control_max_age_sec: int,
                 include_subdomains: bool,
                 override: bool,
                 preload: bool):
        """
        :param int access_control_max_age_sec: A number that CloudFront uses as the value for the max-age directive in the Strict-Transport-Security HTTP response header.
        :param bool include_subdomains: Whether CloudFront includes the includeSubDomains directive in the Strict-Transport-Security HTTP response header.
        :param bool override: Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        :param bool preload: Whether CloudFront includes the preload directive in the Strict-Transport-Security HTTP response header.
        """
        GetResponseHeadersPolicySecurityHeadersConfigStrictTransportSecurityResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_control_max_age_sec=access_control_max_age_sec,
            include_subdomains=include_subdomains,
            override=override,
            preload=preload,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_control_max_age_sec: Optional[int] = None,
             include_subdomains: Optional[bool] = None,
             override: Optional[bool] = None,
             preload: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if access_control_max_age_sec is None and 'accessControlMaxAgeSec' in kwargs:
            access_control_max_age_sec = kwargs['accessControlMaxAgeSec']
        if access_control_max_age_sec is None:
            raise TypeError("Missing 'access_control_max_age_sec' argument")
        if include_subdomains is None and 'includeSubdomains' in kwargs:
            include_subdomains = kwargs['includeSubdomains']
        if include_subdomains is None:
            raise TypeError("Missing 'include_subdomains' argument")
        if override is None:
            raise TypeError("Missing 'override' argument")
        if preload is None:
            raise TypeError("Missing 'preload' argument")

        _setter("access_control_max_age_sec", access_control_max_age_sec)
        _setter("include_subdomains", include_subdomains)
        _setter("override", override)
        _setter("preload", preload)

    @property
    @pulumi.getter(name="accessControlMaxAgeSec")
    def access_control_max_age_sec(self) -> int:
        """
        A number that CloudFront uses as the value for the max-age directive in the Strict-Transport-Security HTTP response header.
        """
        return pulumi.get(self, "access_control_max_age_sec")

    @property
    @pulumi.getter(name="includeSubdomains")
    def include_subdomains(self) -> bool:
        """
        Whether CloudFront includes the includeSubDomains directive in the Strict-Transport-Security HTTP response header.
        """
        return pulumi.get(self, "include_subdomains")

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def preload(self) -> bool:
        """
        Whether CloudFront includes the preload directive in the Strict-Transport-Security HTTP response header.
        """
        return pulumi.get(self, "preload")


@pulumi.output_type
class GetResponseHeadersPolicySecurityHeadersConfigXssProtectionResult(dict):
    def __init__(__self__, *,
                 mode_block: bool,
                 override: bool,
                 protection: bool,
                 report_uri: str):
        """
        :param bool mode_block: Whether CloudFront includes the mode=block directive in the X-XSS-Protection header.
        :param bool override: Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        :param bool protection: Boolean value that determines the value of the X-XSS-Protection HTTP response header. When this setting is true, the value of the X-XSS-Protection header is 1. When this setting is false, the value of the X-XSS-Protection header is 0.
        :param str report_uri: Whether CloudFront sets a reporting URI in the X-XSS-Protection header.
        """
        GetResponseHeadersPolicySecurityHeadersConfigXssProtectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode_block=mode_block,
            override=override,
            protection=protection,
            report_uri=report_uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode_block: Optional[bool] = None,
             override: Optional[bool] = None,
             protection: Optional[bool] = None,
             report_uri: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if mode_block is None and 'modeBlock' in kwargs:
            mode_block = kwargs['modeBlock']
        if mode_block is None:
            raise TypeError("Missing 'mode_block' argument")
        if override is None:
            raise TypeError("Missing 'override' argument")
        if protection is None:
            raise TypeError("Missing 'protection' argument")
        if report_uri is None and 'reportUri' in kwargs:
            report_uri = kwargs['reportUri']
        if report_uri is None:
            raise TypeError("Missing 'report_uri' argument")

        _setter("mode_block", mode_block)
        _setter("override", override)
        _setter("protection", protection)
        _setter("report_uri", report_uri)

    @property
    @pulumi.getter(name="modeBlock")
    def mode_block(self) -> bool:
        """
        Whether CloudFront includes the mode=block directive in the X-XSS-Protection header.
        """
        return pulumi.get(self, "mode_block")

    @property
    @pulumi.getter
    def override(self) -> bool:
        """
        Whether CloudFront overrides the X-XSS-Protection HTTP response header received from the origin with the one specified in this response headers policy.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def protection(self) -> bool:
        """
        Boolean value that determines the value of the X-XSS-Protection HTTP response header. When this setting is true, the value of the X-XSS-Protection header is 1. When this setting is false, the value of the X-XSS-Protection header is 0.
        """
        return pulumi.get(self, "protection")

    @property
    @pulumi.getter(name="reportUri")
    def report_uri(self) -> str:
        """
        Whether CloudFront sets a reporting URI in the X-XSS-Protection header.
        """
        return pulumi.get(self, "report_uri")


@pulumi.output_type
class GetResponseHeadersPolicyServerTimingHeadersConfigResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 sampling_rate: float):
        """
        :param bool enabled: Whether CloudFront adds the `Server-Timing` header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
        :param float sampling_rate: Number 0–100 (inclusive) that specifies the percentage of responses that you want CloudFront to add the Server-Timing header to.
        """
        GetResponseHeadersPolicyServerTimingHeadersConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            sampling_rate=sampling_rate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             sampling_rate: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if sampling_rate is None and 'samplingRate' in kwargs:
            sampling_rate = kwargs['samplingRate']
        if sampling_rate is None:
            raise TypeError("Missing 'sampling_rate' argument")

        _setter("enabled", enabled)
        _setter("sampling_rate", sampling_rate)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether CloudFront adds the `Server-Timing` header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> float:
        """
        Number 0–100 (inclusive) that specifies the percentage of responses that you want CloudFront to add the Server-Timing header to.
        """
        return pulumi.get(self, "sampling_rate")


