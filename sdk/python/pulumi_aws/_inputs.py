# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *

__all__ = [
    'ProviderAssumeRoleArgs',
    'ProviderAssumeRoleWithWebIdentityArgs',
    'ProviderDefaultTagsArgs',
    'ProviderEndpointArgs',
    'ProviderIgnoreTagsArgs',
    'GetAvailabilityZoneFilterArgs',
    'GetAvailabilityZonesFilterArgs',
    'GetRegionsFilterArgs',
]

@pulumi.input_type
class ProviderAssumeRoleArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 policy_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 session_name: Optional[pulumi.Input[str]] = None,
                 source_identity: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transitive_tag_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        ProviderAssumeRoleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            external_id=external_id,
            policy=policy,
            policy_arns=policy_arns,
            role_arn=role_arn,
            session_name=session_name,
            source_identity=source_identity,
            tags=tags,
            transitive_tag_keys=transitive_tag_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: Optional[pulumi.Input[str]] = None,
             external_id: Optional[pulumi.Input[str]] = None,
             policy: Optional[pulumi.Input[str]] = None,
             policy_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             session_name: Optional[pulumi.Input[str]] = None,
             source_identity: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             transitive_tag_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if external_id is None and 'externalId' in kwargs:
            external_id = kwargs['externalId']
        if policy_arns is None and 'policyArns' in kwargs:
            policy_arns = kwargs['policyArns']
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if session_name is None and 'sessionName' in kwargs:
            session_name = kwargs['sessionName']
        if source_identity is None and 'sourceIdentity' in kwargs:
            source_identity = kwargs['sourceIdentity']
        if transitive_tag_keys is None and 'transitiveTagKeys' in kwargs:
            transitive_tag_keys = kwargs['transitiveTagKeys']

        if duration is not None:
            _setter("duration", duration)
        if external_id is not None:
            _setter("external_id", external_id)
        if policy is not None:
            _setter("policy", policy)
        if policy_arns is not None:
            _setter("policy_arns", policy_arns)
        if role_arn is not None:
            _setter("role_arn", role_arn)
        if session_name is not None:
            _setter("session_name", session_name)
        if source_identity is not None:
            _setter("source_identity", source_identity)
        if tags is not None:
            _setter("tags", tags)
        if transitive_tag_keys is not None:
            _setter("transitive_tag_keys", transitive_tag_keys)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="policyArns")
    def policy_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_arns")

    @policy_arns.setter
    def policy_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_arns", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="sessionName")
    def session_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_name")

    @session_name.setter
    def session_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_name", value)

    @property
    @pulumi.getter(name="sourceIdentity")
    def source_identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_identity")

    @source_identity.setter
    def source_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_identity", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="transitiveTagKeys")
    def transitive_tag_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "transitive_tag_keys")

    @transitive_tag_keys.setter
    def transitive_tag_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "transitive_tag_keys", value)


@pulumi.input_type
class ProviderAssumeRoleWithWebIdentityArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 policy_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 session_name: Optional[pulumi.Input[str]] = None,
                 web_identity_token: Optional[pulumi.Input[str]] = None,
                 web_identity_token_file: Optional[pulumi.Input[str]] = None):
        ProviderAssumeRoleWithWebIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            policy=policy,
            policy_arns=policy_arns,
            role_arn=role_arn,
            session_name=session_name,
            web_identity_token=web_identity_token,
            web_identity_token_file=web_identity_token_file,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: Optional[pulumi.Input[str]] = None,
             policy: Optional[pulumi.Input[str]] = None,
             policy_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             session_name: Optional[pulumi.Input[str]] = None,
             web_identity_token: Optional[pulumi.Input[str]] = None,
             web_identity_token_file: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if policy_arns is None and 'policyArns' in kwargs:
            policy_arns = kwargs['policyArns']
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if session_name is None and 'sessionName' in kwargs:
            session_name = kwargs['sessionName']
        if web_identity_token is None and 'webIdentityToken' in kwargs:
            web_identity_token = kwargs['webIdentityToken']
        if web_identity_token_file is None and 'webIdentityTokenFile' in kwargs:
            web_identity_token_file = kwargs['webIdentityTokenFile']

        if duration is not None:
            _setter("duration", duration)
        if policy is not None:
            _setter("policy", policy)
        if policy_arns is not None:
            _setter("policy_arns", policy_arns)
        if role_arn is not None:
            _setter("role_arn", role_arn)
        if session_name is not None:
            _setter("session_name", session_name)
        if web_identity_token is not None:
            _setter("web_identity_token", web_identity_token)
        if web_identity_token_file is not None:
            _setter("web_identity_token_file", web_identity_token_file)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="policyArns")
    def policy_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_arns")

    @policy_arns.setter
    def policy_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_arns", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="sessionName")
    def session_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_name")

    @session_name.setter
    def session_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_name", value)

    @property
    @pulumi.getter(name="webIdentityToken")
    def web_identity_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_identity_token")

    @web_identity_token.setter
    def web_identity_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_identity_token", value)

    @property
    @pulumi.getter(name="webIdentityTokenFile")
    def web_identity_token_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_identity_token_file")

    @web_identity_token_file.setter
    def web_identity_token_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_identity_token_file", value)


@pulumi.input_type
class ProviderDefaultTagsArgs:
    def __init__(__self__, *,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        ProviderDefaultTagsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ProviderEndpointArgs:
    def __init__(__self__, *,
                 accessanalyzer: Optional[pulumi.Input[str]] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 acm: Optional[pulumi.Input[str]] = None,
                 acmpca: Optional[pulumi.Input[str]] = None,
                 amg: Optional[pulumi.Input[str]] = None,
                 amp: Optional[pulumi.Input[str]] = None,
                 amplify: Optional[pulumi.Input[str]] = None,
                 apigateway: Optional[pulumi.Input[str]] = None,
                 apigatewayv2: Optional[pulumi.Input[str]] = None,
                 appautoscaling: Optional[pulumi.Input[str]] = None,
                 appconfig: Optional[pulumi.Input[str]] = None,
                 appflow: Optional[pulumi.Input[str]] = None,
                 appintegrations: Optional[pulumi.Input[str]] = None,
                 appintegrationsservice: Optional[pulumi.Input[str]] = None,
                 applicationautoscaling: Optional[pulumi.Input[str]] = None,
                 applicationinsights: Optional[pulumi.Input[str]] = None,
                 appmesh: Optional[pulumi.Input[str]] = None,
                 apprunner: Optional[pulumi.Input[str]] = None,
                 appstream: Optional[pulumi.Input[str]] = None,
                 appsync: Optional[pulumi.Input[str]] = None,
                 athena: Optional[pulumi.Input[str]] = None,
                 auditmanager: Optional[pulumi.Input[str]] = None,
                 autoscaling: Optional[pulumi.Input[str]] = None,
                 autoscalingplans: Optional[pulumi.Input[str]] = None,
                 backup: Optional[pulumi.Input[str]] = None,
                 batch: Optional[pulumi.Input[str]] = None,
                 beanstalk: Optional[pulumi.Input[str]] = None,
                 bedrock: Optional[pulumi.Input[str]] = None,
                 budgets: Optional[pulumi.Input[str]] = None,
                 ce: Optional[pulumi.Input[str]] = None,
                 chime: Optional[pulumi.Input[str]] = None,
                 chimesdkmediapipelines: Optional[pulumi.Input[str]] = None,
                 chimesdkvoice: Optional[pulumi.Input[str]] = None,
                 cleanrooms: Optional[pulumi.Input[str]] = None,
                 cloud9: Optional[pulumi.Input[str]] = None,
                 cloudcontrol: Optional[pulumi.Input[str]] = None,
                 cloudcontrolapi: Optional[pulumi.Input[str]] = None,
                 cloudformation: Optional[pulumi.Input[str]] = None,
                 cloudfront: Optional[pulumi.Input[str]] = None,
                 cloudhsm: Optional[pulumi.Input[str]] = None,
                 cloudhsmv2: Optional[pulumi.Input[str]] = None,
                 cloudsearch: Optional[pulumi.Input[str]] = None,
                 cloudtrail: Optional[pulumi.Input[str]] = None,
                 cloudwatch: Optional[pulumi.Input[str]] = None,
                 cloudwatchevents: Optional[pulumi.Input[str]] = None,
                 cloudwatchevidently: Optional[pulumi.Input[str]] = None,
                 cloudwatchlog: Optional[pulumi.Input[str]] = None,
                 cloudwatchlogs: Optional[pulumi.Input[str]] = None,
                 cloudwatchobservabilityaccessmanager: Optional[pulumi.Input[str]] = None,
                 cloudwatchrum: Optional[pulumi.Input[str]] = None,
                 codeartifact: Optional[pulumi.Input[str]] = None,
                 codebuild: Optional[pulumi.Input[str]] = None,
                 codecatalyst: Optional[pulumi.Input[str]] = None,
                 codecommit: Optional[pulumi.Input[str]] = None,
                 codedeploy: Optional[pulumi.Input[str]] = None,
                 codegurureviewer: Optional[pulumi.Input[str]] = None,
                 codepipeline: Optional[pulumi.Input[str]] = None,
                 codestarconnections: Optional[pulumi.Input[str]] = None,
                 codestarnotifications: Optional[pulumi.Input[str]] = None,
                 cognitoidentity: Optional[pulumi.Input[str]] = None,
                 cognitoidentityprovider: Optional[pulumi.Input[str]] = None,
                 cognitoidp: Optional[pulumi.Input[str]] = None,
                 comprehend: Optional[pulumi.Input[str]] = None,
                 computeoptimizer: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 configservice: Optional[pulumi.Input[str]] = None,
                 connect: Optional[pulumi.Input[str]] = None,
                 controltower: Optional[pulumi.Input[str]] = None,
                 costandusagereportservice: Optional[pulumi.Input[str]] = None,
                 costexplorer: Optional[pulumi.Input[str]] = None,
                 cur: Optional[pulumi.Input[str]] = None,
                 databasemigration: Optional[pulumi.Input[str]] = None,
                 databasemigrationservice: Optional[pulumi.Input[str]] = None,
                 dataexchange: Optional[pulumi.Input[str]] = None,
                 datapipeline: Optional[pulumi.Input[str]] = None,
                 datasync: Optional[pulumi.Input[str]] = None,
                 dax: Optional[pulumi.Input[str]] = None,
                 deploy: Optional[pulumi.Input[str]] = None,
                 detective: Optional[pulumi.Input[str]] = None,
                 devicefarm: Optional[pulumi.Input[str]] = None,
                 directconnect: Optional[pulumi.Input[str]] = None,
                 directoryservice: Optional[pulumi.Input[str]] = None,
                 dlm: Optional[pulumi.Input[str]] = None,
                 dms: Optional[pulumi.Input[str]] = None,
                 docdb: Optional[pulumi.Input[str]] = None,
                 docdbelastic: Optional[pulumi.Input[str]] = None,
                 ds: Optional[pulumi.Input[str]] = None,
                 dynamodb: Optional[pulumi.Input[str]] = None,
                 ec2: Optional[pulumi.Input[str]] = None,
                 ecr: Optional[pulumi.Input[str]] = None,
                 ecrpublic: Optional[pulumi.Input[str]] = None,
                 ecs: Optional[pulumi.Input[str]] = None,
                 efs: Optional[pulumi.Input[str]] = None,
                 eks: Optional[pulumi.Input[str]] = None,
                 elasticache: Optional[pulumi.Input[str]] = None,
                 elasticbeanstalk: Optional[pulumi.Input[str]] = None,
                 elasticloadbalancing: Optional[pulumi.Input[str]] = None,
                 elasticloadbalancingv2: Optional[pulumi.Input[str]] = None,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 elasticsearchservice: Optional[pulumi.Input[str]] = None,
                 elastictranscoder: Optional[pulumi.Input[str]] = None,
                 elb: Optional[pulumi.Input[str]] = None,
                 elbv2: Optional[pulumi.Input[str]] = None,
                 emr: Optional[pulumi.Input[str]] = None,
                 emrcontainers: Optional[pulumi.Input[str]] = None,
                 emrserverless: Optional[pulumi.Input[str]] = None,
                 es: Optional[pulumi.Input[str]] = None,
                 eventbridge: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 evidently: Optional[pulumi.Input[str]] = None,
                 finspace: Optional[pulumi.Input[str]] = None,
                 firehose: Optional[pulumi.Input[str]] = None,
                 fis: Optional[pulumi.Input[str]] = None,
                 fms: Optional[pulumi.Input[str]] = None,
                 fsx: Optional[pulumi.Input[str]] = None,
                 gamelift: Optional[pulumi.Input[str]] = None,
                 glacier: Optional[pulumi.Input[str]] = None,
                 globalaccelerator: Optional[pulumi.Input[str]] = None,
                 glue: Optional[pulumi.Input[str]] = None,
                 grafana: Optional[pulumi.Input[str]] = None,
                 greengrass: Optional[pulumi.Input[str]] = None,
                 guardduty: Optional[pulumi.Input[str]] = None,
                 healthlake: Optional[pulumi.Input[str]] = None,
                 iam: Optional[pulumi.Input[str]] = None,
                 identitystore: Optional[pulumi.Input[str]] = None,
                 imagebuilder: Optional[pulumi.Input[str]] = None,
                 inspector: Optional[pulumi.Input[str]] = None,
                 inspector2: Optional[pulumi.Input[str]] = None,
                 inspectorv2: Optional[pulumi.Input[str]] = None,
                 internetmonitor: Optional[pulumi.Input[str]] = None,
                 iot: Optional[pulumi.Input[str]] = None,
                 iotanalytics: Optional[pulumi.Input[str]] = None,
                 iotevents: Optional[pulumi.Input[str]] = None,
                 ivs: Optional[pulumi.Input[str]] = None,
                 ivschat: Optional[pulumi.Input[str]] = None,
                 kafka: Optional[pulumi.Input[str]] = None,
                 kafkaconnect: Optional[pulumi.Input[str]] = None,
                 kendra: Optional[pulumi.Input[str]] = None,
                 keyspaces: Optional[pulumi.Input[str]] = None,
                 kinesis: Optional[pulumi.Input[str]] = None,
                 kinesisanalytics: Optional[pulumi.Input[str]] = None,
                 kinesisanalyticsv2: Optional[pulumi.Input[str]] = None,
                 kinesisvideo: Optional[pulumi.Input[str]] = None,
                 kms: Optional[pulumi.Input[str]] = None,
                 lakeformation: Optional[pulumi.Input[str]] = None,
                 lambda_: Optional[pulumi.Input[str]] = None,
                 lex: Optional[pulumi.Input[str]] = None,
                 lexmodelbuilding: Optional[pulumi.Input[str]] = None,
                 lexmodelbuildingservice: Optional[pulumi.Input[str]] = None,
                 lexmodels: Optional[pulumi.Input[str]] = None,
                 lexmodelsv2: Optional[pulumi.Input[str]] = None,
                 lexv2models: Optional[pulumi.Input[str]] = None,
                 licensemanager: Optional[pulumi.Input[str]] = None,
                 lightsail: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 locationservice: Optional[pulumi.Input[str]] = None,
                 logs: Optional[pulumi.Input[str]] = None,
                 macie2: Optional[pulumi.Input[str]] = None,
                 managedgrafana: Optional[pulumi.Input[str]] = None,
                 mediaconnect: Optional[pulumi.Input[str]] = None,
                 mediaconvert: Optional[pulumi.Input[str]] = None,
                 medialive: Optional[pulumi.Input[str]] = None,
                 mediapackage: Optional[pulumi.Input[str]] = None,
                 mediastore: Optional[pulumi.Input[str]] = None,
                 memorydb: Optional[pulumi.Input[str]] = None,
                 mq: Optional[pulumi.Input[str]] = None,
                 msk: Optional[pulumi.Input[str]] = None,
                 mwaa: Optional[pulumi.Input[str]] = None,
                 neptune: Optional[pulumi.Input[str]] = None,
                 networkfirewall: Optional[pulumi.Input[str]] = None,
                 networkmanager: Optional[pulumi.Input[str]] = None,
                 oam: Optional[pulumi.Input[str]] = None,
                 opensearch: Optional[pulumi.Input[str]] = None,
                 opensearchserverless: Optional[pulumi.Input[str]] = None,
                 opensearchservice: Optional[pulumi.Input[str]] = None,
                 opsworks: Optional[pulumi.Input[str]] = None,
                 organizations: Optional[pulumi.Input[str]] = None,
                 outposts: Optional[pulumi.Input[str]] = None,
                 pinpoint: Optional[pulumi.Input[str]] = None,
                 pipes: Optional[pulumi.Input[str]] = None,
                 pricing: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[str]] = None,
                 prometheusservice: Optional[pulumi.Input[str]] = None,
                 qldb: Optional[pulumi.Input[str]] = None,
                 quicksight: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[str]] = None,
                 rbin: Optional[pulumi.Input[str]] = None,
                 rds: Optional[pulumi.Input[str]] = None,
                 recyclebin: Optional[pulumi.Input[str]] = None,
                 redshift: Optional[pulumi.Input[str]] = None,
                 redshiftdata: Optional[pulumi.Input[str]] = None,
                 redshiftdataapiservice: Optional[pulumi.Input[str]] = None,
                 redshiftserverless: Optional[pulumi.Input[str]] = None,
                 resourceexplorer2: Optional[pulumi.Input[str]] = None,
                 resourcegroups: Optional[pulumi.Input[str]] = None,
                 resourcegroupstagging: Optional[pulumi.Input[str]] = None,
                 resourcegroupstaggingapi: Optional[pulumi.Input[str]] = None,
                 rolesanywhere: Optional[pulumi.Input[str]] = None,
                 route53: Optional[pulumi.Input[str]] = None,
                 route53domains: Optional[pulumi.Input[str]] = None,
                 route53recoverycontrolconfig: Optional[pulumi.Input[str]] = None,
                 route53recoveryreadiness: Optional[pulumi.Input[str]] = None,
                 route53resolver: Optional[pulumi.Input[str]] = None,
                 rum: Optional[pulumi.Input[str]] = None,
                 s3: Optional[pulumi.Input[str]] = None,
                 s3api: Optional[pulumi.Input[str]] = None,
                 s3control: Optional[pulumi.Input[str]] = None,
                 s3outposts: Optional[pulumi.Input[str]] = None,
                 sagemaker: Optional[pulumi.Input[str]] = None,
                 scheduler: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[str]] = None,
                 sdb: Optional[pulumi.Input[str]] = None,
                 secretsmanager: Optional[pulumi.Input[str]] = None,
                 securityhub: Optional[pulumi.Input[str]] = None,
                 securitylake: Optional[pulumi.Input[str]] = None,
                 serverlessapplicationrepository: Optional[pulumi.Input[str]] = None,
                 serverlessapprepo: Optional[pulumi.Input[str]] = None,
                 serverlessrepo: Optional[pulumi.Input[str]] = None,
                 servicecatalog: Optional[pulumi.Input[str]] = None,
                 servicediscovery: Optional[pulumi.Input[str]] = None,
                 servicequotas: Optional[pulumi.Input[str]] = None,
                 ses: Optional[pulumi.Input[str]] = None,
                 sesv2: Optional[pulumi.Input[str]] = None,
                 sfn: Optional[pulumi.Input[str]] = None,
                 shield: Optional[pulumi.Input[str]] = None,
                 signer: Optional[pulumi.Input[str]] = None,
                 simpledb: Optional[pulumi.Input[str]] = None,
                 sns: Optional[pulumi.Input[str]] = None,
                 sqs: Optional[pulumi.Input[str]] = None,
                 ssm: Optional[pulumi.Input[str]] = None,
                 ssmcontacts: Optional[pulumi.Input[str]] = None,
                 ssmincidents: Optional[pulumi.Input[str]] = None,
                 ssoadmin: Optional[pulumi.Input[str]] = None,
                 stepfunctions: Optional[pulumi.Input[str]] = None,
                 storagegateway: Optional[pulumi.Input[str]] = None,
                 sts: Optional[pulumi.Input[str]] = None,
                 swf: Optional[pulumi.Input[str]] = None,
                 synthetics: Optional[pulumi.Input[str]] = None,
                 timestreamwrite: Optional[pulumi.Input[str]] = None,
                 transcribe: Optional[pulumi.Input[str]] = None,
                 transcribeservice: Optional[pulumi.Input[str]] = None,
                 transfer: Optional[pulumi.Input[str]] = None,
                 verifiedpermissions: Optional[pulumi.Input[str]] = None,
                 vpclattice: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[str]] = None,
                 wafregional: Optional[pulumi.Input[str]] = None,
                 wafv2: Optional[pulumi.Input[str]] = None,
                 worklink: Optional[pulumi.Input[str]] = None,
                 workspaces: Optional[pulumi.Input[str]] = None,
                 xray: Optional[pulumi.Input[str]] = None):
        ProviderEndpointArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accessanalyzer=accessanalyzer,
            account=account,
            acm=acm,
            acmpca=acmpca,
            amg=amg,
            amp=amp,
            amplify=amplify,
            apigateway=apigateway,
            apigatewayv2=apigatewayv2,
            appautoscaling=appautoscaling,
            appconfig=appconfig,
            appflow=appflow,
            appintegrations=appintegrations,
            appintegrationsservice=appintegrationsservice,
            applicationautoscaling=applicationautoscaling,
            applicationinsights=applicationinsights,
            appmesh=appmesh,
            apprunner=apprunner,
            appstream=appstream,
            appsync=appsync,
            athena=athena,
            auditmanager=auditmanager,
            autoscaling=autoscaling,
            autoscalingplans=autoscalingplans,
            backup=backup,
            batch=batch,
            beanstalk=beanstalk,
            bedrock=bedrock,
            budgets=budgets,
            ce=ce,
            chime=chime,
            chimesdkmediapipelines=chimesdkmediapipelines,
            chimesdkvoice=chimesdkvoice,
            cleanrooms=cleanrooms,
            cloud9=cloud9,
            cloudcontrol=cloudcontrol,
            cloudcontrolapi=cloudcontrolapi,
            cloudformation=cloudformation,
            cloudfront=cloudfront,
            cloudhsm=cloudhsm,
            cloudhsmv2=cloudhsmv2,
            cloudsearch=cloudsearch,
            cloudtrail=cloudtrail,
            cloudwatch=cloudwatch,
            cloudwatchevents=cloudwatchevents,
            cloudwatchevidently=cloudwatchevidently,
            cloudwatchlog=cloudwatchlog,
            cloudwatchlogs=cloudwatchlogs,
            cloudwatchobservabilityaccessmanager=cloudwatchobservabilityaccessmanager,
            cloudwatchrum=cloudwatchrum,
            codeartifact=codeartifact,
            codebuild=codebuild,
            codecatalyst=codecatalyst,
            codecommit=codecommit,
            codedeploy=codedeploy,
            codegurureviewer=codegurureviewer,
            codepipeline=codepipeline,
            codestarconnections=codestarconnections,
            codestarnotifications=codestarnotifications,
            cognitoidentity=cognitoidentity,
            cognitoidentityprovider=cognitoidentityprovider,
            cognitoidp=cognitoidp,
            comprehend=comprehend,
            computeoptimizer=computeoptimizer,
            config=config,
            configservice=configservice,
            connect=connect,
            controltower=controltower,
            costandusagereportservice=costandusagereportservice,
            costexplorer=costexplorer,
            cur=cur,
            databasemigration=databasemigration,
            databasemigrationservice=databasemigrationservice,
            dataexchange=dataexchange,
            datapipeline=datapipeline,
            datasync=datasync,
            dax=dax,
            deploy=deploy,
            detective=detective,
            devicefarm=devicefarm,
            directconnect=directconnect,
            directoryservice=directoryservice,
            dlm=dlm,
            dms=dms,
            docdb=docdb,
            docdbelastic=docdbelastic,
            ds=ds,
            dynamodb=dynamodb,
            ec2=ec2,
            ecr=ecr,
            ecrpublic=ecrpublic,
            ecs=ecs,
            efs=efs,
            eks=eks,
            elasticache=elasticache,
            elasticbeanstalk=elasticbeanstalk,
            elasticloadbalancing=elasticloadbalancing,
            elasticloadbalancingv2=elasticloadbalancingv2,
            elasticsearch=elasticsearch,
            elasticsearchservice=elasticsearchservice,
            elastictranscoder=elastictranscoder,
            elb=elb,
            elbv2=elbv2,
            emr=emr,
            emrcontainers=emrcontainers,
            emrserverless=emrserverless,
            es=es,
            eventbridge=eventbridge,
            events=events,
            evidently=evidently,
            finspace=finspace,
            firehose=firehose,
            fis=fis,
            fms=fms,
            fsx=fsx,
            gamelift=gamelift,
            glacier=glacier,
            globalaccelerator=globalaccelerator,
            glue=glue,
            grafana=grafana,
            greengrass=greengrass,
            guardduty=guardduty,
            healthlake=healthlake,
            iam=iam,
            identitystore=identitystore,
            imagebuilder=imagebuilder,
            inspector=inspector,
            inspector2=inspector2,
            inspectorv2=inspectorv2,
            internetmonitor=internetmonitor,
            iot=iot,
            iotanalytics=iotanalytics,
            iotevents=iotevents,
            ivs=ivs,
            ivschat=ivschat,
            kafka=kafka,
            kafkaconnect=kafkaconnect,
            kendra=kendra,
            keyspaces=keyspaces,
            kinesis=kinesis,
            kinesisanalytics=kinesisanalytics,
            kinesisanalyticsv2=kinesisanalyticsv2,
            kinesisvideo=kinesisvideo,
            kms=kms,
            lakeformation=lakeformation,
            lambda_=lambda_,
            lex=lex,
            lexmodelbuilding=lexmodelbuilding,
            lexmodelbuildingservice=lexmodelbuildingservice,
            lexmodels=lexmodels,
            lexmodelsv2=lexmodelsv2,
            lexv2models=lexv2models,
            licensemanager=licensemanager,
            lightsail=lightsail,
            location=location,
            locationservice=locationservice,
            logs=logs,
            macie2=macie2,
            managedgrafana=managedgrafana,
            mediaconnect=mediaconnect,
            mediaconvert=mediaconvert,
            medialive=medialive,
            mediapackage=mediapackage,
            mediastore=mediastore,
            memorydb=memorydb,
            mq=mq,
            msk=msk,
            mwaa=mwaa,
            neptune=neptune,
            networkfirewall=networkfirewall,
            networkmanager=networkmanager,
            oam=oam,
            opensearch=opensearch,
            opensearchserverless=opensearchserverless,
            opensearchservice=opensearchservice,
            opsworks=opsworks,
            organizations=organizations,
            outposts=outposts,
            pinpoint=pinpoint,
            pipes=pipes,
            pricing=pricing,
            prometheus=prometheus,
            prometheusservice=prometheusservice,
            qldb=qldb,
            quicksight=quicksight,
            ram=ram,
            rbin=rbin,
            rds=rds,
            recyclebin=recyclebin,
            redshift=redshift,
            redshiftdata=redshiftdata,
            redshiftdataapiservice=redshiftdataapiservice,
            redshiftserverless=redshiftserverless,
            resourceexplorer2=resourceexplorer2,
            resourcegroups=resourcegroups,
            resourcegroupstagging=resourcegroupstagging,
            resourcegroupstaggingapi=resourcegroupstaggingapi,
            rolesanywhere=rolesanywhere,
            route53=route53,
            route53domains=route53domains,
            route53recoverycontrolconfig=route53recoverycontrolconfig,
            route53recoveryreadiness=route53recoveryreadiness,
            route53resolver=route53resolver,
            rum=rum,
            s3=s3,
            s3api=s3api,
            s3control=s3control,
            s3outposts=s3outposts,
            sagemaker=sagemaker,
            scheduler=scheduler,
            schemas=schemas,
            sdb=sdb,
            secretsmanager=secretsmanager,
            securityhub=securityhub,
            securitylake=securitylake,
            serverlessapplicationrepository=serverlessapplicationrepository,
            serverlessapprepo=serverlessapprepo,
            serverlessrepo=serverlessrepo,
            servicecatalog=servicecatalog,
            servicediscovery=servicediscovery,
            servicequotas=servicequotas,
            ses=ses,
            sesv2=sesv2,
            sfn=sfn,
            shield=shield,
            signer=signer,
            simpledb=simpledb,
            sns=sns,
            sqs=sqs,
            ssm=ssm,
            ssmcontacts=ssmcontacts,
            ssmincidents=ssmincidents,
            ssoadmin=ssoadmin,
            stepfunctions=stepfunctions,
            storagegateway=storagegateway,
            sts=sts,
            swf=swf,
            synthetics=synthetics,
            timestreamwrite=timestreamwrite,
            transcribe=transcribe,
            transcribeservice=transcribeservice,
            transfer=transfer,
            verifiedpermissions=verifiedpermissions,
            vpclattice=vpclattice,
            waf=waf,
            wafregional=wafregional,
            wafv2=wafv2,
            worklink=worklink,
            workspaces=workspaces,
            xray=xray,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accessanalyzer: Optional[pulumi.Input[str]] = None,
             account: Optional[pulumi.Input[str]] = None,
             acm: Optional[pulumi.Input[str]] = None,
             acmpca: Optional[pulumi.Input[str]] = None,
             amg: Optional[pulumi.Input[str]] = None,
             amp: Optional[pulumi.Input[str]] = None,
             amplify: Optional[pulumi.Input[str]] = None,
             apigateway: Optional[pulumi.Input[str]] = None,
             apigatewayv2: Optional[pulumi.Input[str]] = None,
             appautoscaling: Optional[pulumi.Input[str]] = None,
             appconfig: Optional[pulumi.Input[str]] = None,
             appflow: Optional[pulumi.Input[str]] = None,
             appintegrations: Optional[pulumi.Input[str]] = None,
             appintegrationsservice: Optional[pulumi.Input[str]] = None,
             applicationautoscaling: Optional[pulumi.Input[str]] = None,
             applicationinsights: Optional[pulumi.Input[str]] = None,
             appmesh: Optional[pulumi.Input[str]] = None,
             apprunner: Optional[pulumi.Input[str]] = None,
             appstream: Optional[pulumi.Input[str]] = None,
             appsync: Optional[pulumi.Input[str]] = None,
             athena: Optional[pulumi.Input[str]] = None,
             auditmanager: Optional[pulumi.Input[str]] = None,
             autoscaling: Optional[pulumi.Input[str]] = None,
             autoscalingplans: Optional[pulumi.Input[str]] = None,
             backup: Optional[pulumi.Input[str]] = None,
             batch: Optional[pulumi.Input[str]] = None,
             beanstalk: Optional[pulumi.Input[str]] = None,
             bedrock: Optional[pulumi.Input[str]] = None,
             budgets: Optional[pulumi.Input[str]] = None,
             ce: Optional[pulumi.Input[str]] = None,
             chime: Optional[pulumi.Input[str]] = None,
             chimesdkmediapipelines: Optional[pulumi.Input[str]] = None,
             chimesdkvoice: Optional[pulumi.Input[str]] = None,
             cleanrooms: Optional[pulumi.Input[str]] = None,
             cloud9: Optional[pulumi.Input[str]] = None,
             cloudcontrol: Optional[pulumi.Input[str]] = None,
             cloudcontrolapi: Optional[pulumi.Input[str]] = None,
             cloudformation: Optional[pulumi.Input[str]] = None,
             cloudfront: Optional[pulumi.Input[str]] = None,
             cloudhsm: Optional[pulumi.Input[str]] = None,
             cloudhsmv2: Optional[pulumi.Input[str]] = None,
             cloudsearch: Optional[pulumi.Input[str]] = None,
             cloudtrail: Optional[pulumi.Input[str]] = None,
             cloudwatch: Optional[pulumi.Input[str]] = None,
             cloudwatchevents: Optional[pulumi.Input[str]] = None,
             cloudwatchevidently: Optional[pulumi.Input[str]] = None,
             cloudwatchlog: Optional[pulumi.Input[str]] = None,
             cloudwatchlogs: Optional[pulumi.Input[str]] = None,
             cloudwatchobservabilityaccessmanager: Optional[pulumi.Input[str]] = None,
             cloudwatchrum: Optional[pulumi.Input[str]] = None,
             codeartifact: Optional[pulumi.Input[str]] = None,
             codebuild: Optional[pulumi.Input[str]] = None,
             codecatalyst: Optional[pulumi.Input[str]] = None,
             codecommit: Optional[pulumi.Input[str]] = None,
             codedeploy: Optional[pulumi.Input[str]] = None,
             codegurureviewer: Optional[pulumi.Input[str]] = None,
             codepipeline: Optional[pulumi.Input[str]] = None,
             codestarconnections: Optional[pulumi.Input[str]] = None,
             codestarnotifications: Optional[pulumi.Input[str]] = None,
             cognitoidentity: Optional[pulumi.Input[str]] = None,
             cognitoidentityprovider: Optional[pulumi.Input[str]] = None,
             cognitoidp: Optional[pulumi.Input[str]] = None,
             comprehend: Optional[pulumi.Input[str]] = None,
             computeoptimizer: Optional[pulumi.Input[str]] = None,
             config: Optional[pulumi.Input[str]] = None,
             configservice: Optional[pulumi.Input[str]] = None,
             connect: Optional[pulumi.Input[str]] = None,
             controltower: Optional[pulumi.Input[str]] = None,
             costandusagereportservice: Optional[pulumi.Input[str]] = None,
             costexplorer: Optional[pulumi.Input[str]] = None,
             cur: Optional[pulumi.Input[str]] = None,
             databasemigration: Optional[pulumi.Input[str]] = None,
             databasemigrationservice: Optional[pulumi.Input[str]] = None,
             dataexchange: Optional[pulumi.Input[str]] = None,
             datapipeline: Optional[pulumi.Input[str]] = None,
             datasync: Optional[pulumi.Input[str]] = None,
             dax: Optional[pulumi.Input[str]] = None,
             deploy: Optional[pulumi.Input[str]] = None,
             detective: Optional[pulumi.Input[str]] = None,
             devicefarm: Optional[pulumi.Input[str]] = None,
             directconnect: Optional[pulumi.Input[str]] = None,
             directoryservice: Optional[pulumi.Input[str]] = None,
             dlm: Optional[pulumi.Input[str]] = None,
             dms: Optional[pulumi.Input[str]] = None,
             docdb: Optional[pulumi.Input[str]] = None,
             docdbelastic: Optional[pulumi.Input[str]] = None,
             ds: Optional[pulumi.Input[str]] = None,
             dynamodb: Optional[pulumi.Input[str]] = None,
             ec2: Optional[pulumi.Input[str]] = None,
             ecr: Optional[pulumi.Input[str]] = None,
             ecrpublic: Optional[pulumi.Input[str]] = None,
             ecs: Optional[pulumi.Input[str]] = None,
             efs: Optional[pulumi.Input[str]] = None,
             eks: Optional[pulumi.Input[str]] = None,
             elasticache: Optional[pulumi.Input[str]] = None,
             elasticbeanstalk: Optional[pulumi.Input[str]] = None,
             elasticloadbalancing: Optional[pulumi.Input[str]] = None,
             elasticloadbalancingv2: Optional[pulumi.Input[str]] = None,
             elasticsearch: Optional[pulumi.Input[str]] = None,
             elasticsearchservice: Optional[pulumi.Input[str]] = None,
             elastictranscoder: Optional[pulumi.Input[str]] = None,
             elb: Optional[pulumi.Input[str]] = None,
             elbv2: Optional[pulumi.Input[str]] = None,
             emr: Optional[pulumi.Input[str]] = None,
             emrcontainers: Optional[pulumi.Input[str]] = None,
             emrserverless: Optional[pulumi.Input[str]] = None,
             es: Optional[pulumi.Input[str]] = None,
             eventbridge: Optional[pulumi.Input[str]] = None,
             events: Optional[pulumi.Input[str]] = None,
             evidently: Optional[pulumi.Input[str]] = None,
             finspace: Optional[pulumi.Input[str]] = None,
             firehose: Optional[pulumi.Input[str]] = None,
             fis: Optional[pulumi.Input[str]] = None,
             fms: Optional[pulumi.Input[str]] = None,
             fsx: Optional[pulumi.Input[str]] = None,
             gamelift: Optional[pulumi.Input[str]] = None,
             glacier: Optional[pulumi.Input[str]] = None,
             globalaccelerator: Optional[pulumi.Input[str]] = None,
             glue: Optional[pulumi.Input[str]] = None,
             grafana: Optional[pulumi.Input[str]] = None,
             greengrass: Optional[pulumi.Input[str]] = None,
             guardduty: Optional[pulumi.Input[str]] = None,
             healthlake: Optional[pulumi.Input[str]] = None,
             iam: Optional[pulumi.Input[str]] = None,
             identitystore: Optional[pulumi.Input[str]] = None,
             imagebuilder: Optional[pulumi.Input[str]] = None,
             inspector: Optional[pulumi.Input[str]] = None,
             inspector2: Optional[pulumi.Input[str]] = None,
             inspectorv2: Optional[pulumi.Input[str]] = None,
             internetmonitor: Optional[pulumi.Input[str]] = None,
             iot: Optional[pulumi.Input[str]] = None,
             iotanalytics: Optional[pulumi.Input[str]] = None,
             iotevents: Optional[pulumi.Input[str]] = None,
             ivs: Optional[pulumi.Input[str]] = None,
             ivschat: Optional[pulumi.Input[str]] = None,
             kafka: Optional[pulumi.Input[str]] = None,
             kafkaconnect: Optional[pulumi.Input[str]] = None,
             kendra: Optional[pulumi.Input[str]] = None,
             keyspaces: Optional[pulumi.Input[str]] = None,
             kinesis: Optional[pulumi.Input[str]] = None,
             kinesisanalytics: Optional[pulumi.Input[str]] = None,
             kinesisanalyticsv2: Optional[pulumi.Input[str]] = None,
             kinesisvideo: Optional[pulumi.Input[str]] = None,
             kms: Optional[pulumi.Input[str]] = None,
             lakeformation: Optional[pulumi.Input[str]] = None,
             lambda_: Optional[pulumi.Input[str]] = None,
             lex: Optional[pulumi.Input[str]] = None,
             lexmodelbuilding: Optional[pulumi.Input[str]] = None,
             lexmodelbuildingservice: Optional[pulumi.Input[str]] = None,
             lexmodels: Optional[pulumi.Input[str]] = None,
             lexmodelsv2: Optional[pulumi.Input[str]] = None,
             lexv2models: Optional[pulumi.Input[str]] = None,
             licensemanager: Optional[pulumi.Input[str]] = None,
             lightsail: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             locationservice: Optional[pulumi.Input[str]] = None,
             logs: Optional[pulumi.Input[str]] = None,
             macie2: Optional[pulumi.Input[str]] = None,
             managedgrafana: Optional[pulumi.Input[str]] = None,
             mediaconnect: Optional[pulumi.Input[str]] = None,
             mediaconvert: Optional[pulumi.Input[str]] = None,
             medialive: Optional[pulumi.Input[str]] = None,
             mediapackage: Optional[pulumi.Input[str]] = None,
             mediastore: Optional[pulumi.Input[str]] = None,
             memorydb: Optional[pulumi.Input[str]] = None,
             mq: Optional[pulumi.Input[str]] = None,
             msk: Optional[pulumi.Input[str]] = None,
             mwaa: Optional[pulumi.Input[str]] = None,
             neptune: Optional[pulumi.Input[str]] = None,
             networkfirewall: Optional[pulumi.Input[str]] = None,
             networkmanager: Optional[pulumi.Input[str]] = None,
             oam: Optional[pulumi.Input[str]] = None,
             opensearch: Optional[pulumi.Input[str]] = None,
             opensearchserverless: Optional[pulumi.Input[str]] = None,
             opensearchservice: Optional[pulumi.Input[str]] = None,
             opsworks: Optional[pulumi.Input[str]] = None,
             organizations: Optional[pulumi.Input[str]] = None,
             outposts: Optional[pulumi.Input[str]] = None,
             pinpoint: Optional[pulumi.Input[str]] = None,
             pipes: Optional[pulumi.Input[str]] = None,
             pricing: Optional[pulumi.Input[str]] = None,
             prometheus: Optional[pulumi.Input[str]] = None,
             prometheusservice: Optional[pulumi.Input[str]] = None,
             qldb: Optional[pulumi.Input[str]] = None,
             quicksight: Optional[pulumi.Input[str]] = None,
             ram: Optional[pulumi.Input[str]] = None,
             rbin: Optional[pulumi.Input[str]] = None,
             rds: Optional[pulumi.Input[str]] = None,
             recyclebin: Optional[pulumi.Input[str]] = None,
             redshift: Optional[pulumi.Input[str]] = None,
             redshiftdata: Optional[pulumi.Input[str]] = None,
             redshiftdataapiservice: Optional[pulumi.Input[str]] = None,
             redshiftserverless: Optional[pulumi.Input[str]] = None,
             resourceexplorer2: Optional[pulumi.Input[str]] = None,
             resourcegroups: Optional[pulumi.Input[str]] = None,
             resourcegroupstagging: Optional[pulumi.Input[str]] = None,
             resourcegroupstaggingapi: Optional[pulumi.Input[str]] = None,
             rolesanywhere: Optional[pulumi.Input[str]] = None,
             route53: Optional[pulumi.Input[str]] = None,
             route53domains: Optional[pulumi.Input[str]] = None,
             route53recoverycontrolconfig: Optional[pulumi.Input[str]] = None,
             route53recoveryreadiness: Optional[pulumi.Input[str]] = None,
             route53resolver: Optional[pulumi.Input[str]] = None,
             rum: Optional[pulumi.Input[str]] = None,
             s3: Optional[pulumi.Input[str]] = None,
             s3api: Optional[pulumi.Input[str]] = None,
             s3control: Optional[pulumi.Input[str]] = None,
             s3outposts: Optional[pulumi.Input[str]] = None,
             sagemaker: Optional[pulumi.Input[str]] = None,
             scheduler: Optional[pulumi.Input[str]] = None,
             schemas: Optional[pulumi.Input[str]] = None,
             sdb: Optional[pulumi.Input[str]] = None,
             secretsmanager: Optional[pulumi.Input[str]] = None,
             securityhub: Optional[pulumi.Input[str]] = None,
             securitylake: Optional[pulumi.Input[str]] = None,
             serverlessapplicationrepository: Optional[pulumi.Input[str]] = None,
             serverlessapprepo: Optional[pulumi.Input[str]] = None,
             serverlessrepo: Optional[pulumi.Input[str]] = None,
             servicecatalog: Optional[pulumi.Input[str]] = None,
             servicediscovery: Optional[pulumi.Input[str]] = None,
             servicequotas: Optional[pulumi.Input[str]] = None,
             ses: Optional[pulumi.Input[str]] = None,
             sesv2: Optional[pulumi.Input[str]] = None,
             sfn: Optional[pulumi.Input[str]] = None,
             shield: Optional[pulumi.Input[str]] = None,
             signer: Optional[pulumi.Input[str]] = None,
             simpledb: Optional[pulumi.Input[str]] = None,
             sns: Optional[pulumi.Input[str]] = None,
             sqs: Optional[pulumi.Input[str]] = None,
             ssm: Optional[pulumi.Input[str]] = None,
             ssmcontacts: Optional[pulumi.Input[str]] = None,
             ssmincidents: Optional[pulumi.Input[str]] = None,
             ssoadmin: Optional[pulumi.Input[str]] = None,
             stepfunctions: Optional[pulumi.Input[str]] = None,
             storagegateway: Optional[pulumi.Input[str]] = None,
             sts: Optional[pulumi.Input[str]] = None,
             swf: Optional[pulumi.Input[str]] = None,
             synthetics: Optional[pulumi.Input[str]] = None,
             timestreamwrite: Optional[pulumi.Input[str]] = None,
             transcribe: Optional[pulumi.Input[str]] = None,
             transcribeservice: Optional[pulumi.Input[str]] = None,
             transfer: Optional[pulumi.Input[str]] = None,
             verifiedpermissions: Optional[pulumi.Input[str]] = None,
             vpclattice: Optional[pulumi.Input[str]] = None,
             waf: Optional[pulumi.Input[str]] = None,
             wafregional: Optional[pulumi.Input[str]] = None,
             wafv2: Optional[pulumi.Input[str]] = None,
             worklink: Optional[pulumi.Input[str]] = None,
             workspaces: Optional[pulumi.Input[str]] = None,
             xray: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if lambda_ is None and 'lambda' in kwargs:
            lambda_ = kwargs['lambda']

        if accessanalyzer is not None:
            _setter("accessanalyzer", accessanalyzer)
        if account is not None:
            _setter("account", account)
        if acm is not None:
            _setter("acm", acm)
        if acmpca is not None:
            _setter("acmpca", acmpca)
        if amg is not None:
            _setter("amg", amg)
        if amp is not None:
            _setter("amp", amp)
        if amplify is not None:
            _setter("amplify", amplify)
        if apigateway is not None:
            _setter("apigateway", apigateway)
        if apigatewayv2 is not None:
            _setter("apigatewayv2", apigatewayv2)
        if appautoscaling is not None:
            _setter("appautoscaling", appautoscaling)
        if appconfig is not None:
            _setter("appconfig", appconfig)
        if appflow is not None:
            _setter("appflow", appflow)
        if appintegrations is not None:
            _setter("appintegrations", appintegrations)
        if appintegrationsservice is not None:
            _setter("appintegrationsservice", appintegrationsservice)
        if applicationautoscaling is not None:
            _setter("applicationautoscaling", applicationautoscaling)
        if applicationinsights is not None:
            _setter("applicationinsights", applicationinsights)
        if appmesh is not None:
            _setter("appmesh", appmesh)
        if apprunner is not None:
            _setter("apprunner", apprunner)
        if appstream is not None:
            _setter("appstream", appstream)
        if appsync is not None:
            _setter("appsync", appsync)
        if athena is not None:
            _setter("athena", athena)
        if auditmanager is not None:
            _setter("auditmanager", auditmanager)
        if autoscaling is not None:
            _setter("autoscaling", autoscaling)
        if autoscalingplans is not None:
            _setter("autoscalingplans", autoscalingplans)
        if backup is not None:
            _setter("backup", backup)
        if batch is not None:
            _setter("batch", batch)
        if beanstalk is not None:
            _setter("beanstalk", beanstalk)
        if bedrock is not None:
            _setter("bedrock", bedrock)
        if budgets is not None:
            _setter("budgets", budgets)
        if ce is not None:
            _setter("ce", ce)
        if chime is not None:
            _setter("chime", chime)
        if chimesdkmediapipelines is not None:
            _setter("chimesdkmediapipelines", chimesdkmediapipelines)
        if chimesdkvoice is not None:
            _setter("chimesdkvoice", chimesdkvoice)
        if cleanrooms is not None:
            _setter("cleanrooms", cleanrooms)
        if cloud9 is not None:
            _setter("cloud9", cloud9)
        if cloudcontrol is not None:
            _setter("cloudcontrol", cloudcontrol)
        if cloudcontrolapi is not None:
            _setter("cloudcontrolapi", cloudcontrolapi)
        if cloudformation is not None:
            _setter("cloudformation", cloudformation)
        if cloudfront is not None:
            _setter("cloudfront", cloudfront)
        if cloudhsm is not None:
            _setter("cloudhsm", cloudhsm)
        if cloudhsmv2 is not None:
            _setter("cloudhsmv2", cloudhsmv2)
        if cloudsearch is not None:
            _setter("cloudsearch", cloudsearch)
        if cloudtrail is not None:
            _setter("cloudtrail", cloudtrail)
        if cloudwatch is not None:
            _setter("cloudwatch", cloudwatch)
        if cloudwatchevents is not None:
            _setter("cloudwatchevents", cloudwatchevents)
        if cloudwatchevidently is not None:
            _setter("cloudwatchevidently", cloudwatchevidently)
        if cloudwatchlog is not None:
            _setter("cloudwatchlog", cloudwatchlog)
        if cloudwatchlogs is not None:
            _setter("cloudwatchlogs", cloudwatchlogs)
        if cloudwatchobservabilityaccessmanager is not None:
            _setter("cloudwatchobservabilityaccessmanager", cloudwatchobservabilityaccessmanager)
        if cloudwatchrum is not None:
            _setter("cloudwatchrum", cloudwatchrum)
        if codeartifact is not None:
            _setter("codeartifact", codeartifact)
        if codebuild is not None:
            _setter("codebuild", codebuild)
        if codecatalyst is not None:
            _setter("codecatalyst", codecatalyst)
        if codecommit is not None:
            _setter("codecommit", codecommit)
        if codedeploy is not None:
            _setter("codedeploy", codedeploy)
        if codegurureviewer is not None:
            _setter("codegurureviewer", codegurureviewer)
        if codepipeline is not None:
            _setter("codepipeline", codepipeline)
        if codestarconnections is not None:
            _setter("codestarconnections", codestarconnections)
        if codestarnotifications is not None:
            _setter("codestarnotifications", codestarnotifications)
        if cognitoidentity is not None:
            _setter("cognitoidentity", cognitoidentity)
        if cognitoidentityprovider is not None:
            _setter("cognitoidentityprovider", cognitoidentityprovider)
        if cognitoidp is not None:
            _setter("cognitoidp", cognitoidp)
        if comprehend is not None:
            _setter("comprehend", comprehend)
        if computeoptimizer is not None:
            _setter("computeoptimizer", computeoptimizer)
        if config is not None:
            _setter("config", config)
        if configservice is not None:
            _setter("configservice", configservice)
        if connect is not None:
            _setter("connect", connect)
        if controltower is not None:
            _setter("controltower", controltower)
        if costandusagereportservice is not None:
            _setter("costandusagereportservice", costandusagereportservice)
        if costexplorer is not None:
            _setter("costexplorer", costexplorer)
        if cur is not None:
            _setter("cur", cur)
        if databasemigration is not None:
            _setter("databasemigration", databasemigration)
        if databasemigrationservice is not None:
            _setter("databasemigrationservice", databasemigrationservice)
        if dataexchange is not None:
            _setter("dataexchange", dataexchange)
        if datapipeline is not None:
            _setter("datapipeline", datapipeline)
        if datasync is not None:
            _setter("datasync", datasync)
        if dax is not None:
            _setter("dax", dax)
        if deploy is not None:
            _setter("deploy", deploy)
        if detective is not None:
            _setter("detective", detective)
        if devicefarm is not None:
            _setter("devicefarm", devicefarm)
        if directconnect is not None:
            _setter("directconnect", directconnect)
        if directoryservice is not None:
            _setter("directoryservice", directoryservice)
        if dlm is not None:
            _setter("dlm", dlm)
        if dms is not None:
            _setter("dms", dms)
        if docdb is not None:
            _setter("docdb", docdb)
        if docdbelastic is not None:
            _setter("docdbelastic", docdbelastic)
        if ds is not None:
            _setter("ds", ds)
        if dynamodb is not None:
            _setter("dynamodb", dynamodb)
        if ec2 is not None:
            _setter("ec2", ec2)
        if ecr is not None:
            _setter("ecr", ecr)
        if ecrpublic is not None:
            _setter("ecrpublic", ecrpublic)
        if ecs is not None:
            _setter("ecs", ecs)
        if efs is not None:
            _setter("efs", efs)
        if eks is not None:
            _setter("eks", eks)
        if elasticache is not None:
            _setter("elasticache", elasticache)
        if elasticbeanstalk is not None:
            _setter("elasticbeanstalk", elasticbeanstalk)
        if elasticloadbalancing is not None:
            _setter("elasticloadbalancing", elasticloadbalancing)
        if elasticloadbalancingv2 is not None:
            _setter("elasticloadbalancingv2", elasticloadbalancingv2)
        if elasticsearch is not None:
            _setter("elasticsearch", elasticsearch)
        if elasticsearchservice is not None:
            _setter("elasticsearchservice", elasticsearchservice)
        if elastictranscoder is not None:
            _setter("elastictranscoder", elastictranscoder)
        if elb is not None:
            _setter("elb", elb)
        if elbv2 is not None:
            _setter("elbv2", elbv2)
        if emr is not None:
            _setter("emr", emr)
        if emrcontainers is not None:
            _setter("emrcontainers", emrcontainers)
        if emrserverless is not None:
            _setter("emrserverless", emrserverless)
        if es is not None:
            _setter("es", es)
        if eventbridge is not None:
            _setter("eventbridge", eventbridge)
        if events is not None:
            _setter("events", events)
        if evidently is not None:
            _setter("evidently", evidently)
        if finspace is not None:
            _setter("finspace", finspace)
        if firehose is not None:
            _setter("firehose", firehose)
        if fis is not None:
            _setter("fis", fis)
        if fms is not None:
            _setter("fms", fms)
        if fsx is not None:
            _setter("fsx", fsx)
        if gamelift is not None:
            _setter("gamelift", gamelift)
        if glacier is not None:
            _setter("glacier", glacier)
        if globalaccelerator is not None:
            _setter("globalaccelerator", globalaccelerator)
        if glue is not None:
            _setter("glue", glue)
        if grafana is not None:
            _setter("grafana", grafana)
        if greengrass is not None:
            _setter("greengrass", greengrass)
        if guardduty is not None:
            _setter("guardduty", guardduty)
        if healthlake is not None:
            _setter("healthlake", healthlake)
        if iam is not None:
            _setter("iam", iam)
        if identitystore is not None:
            _setter("identitystore", identitystore)
        if imagebuilder is not None:
            _setter("imagebuilder", imagebuilder)
        if inspector is not None:
            _setter("inspector", inspector)
        if inspector2 is not None:
            _setter("inspector2", inspector2)
        if inspectorv2 is not None:
            _setter("inspectorv2", inspectorv2)
        if internetmonitor is not None:
            _setter("internetmonitor", internetmonitor)
        if iot is not None:
            _setter("iot", iot)
        if iotanalytics is not None:
            _setter("iotanalytics", iotanalytics)
        if iotevents is not None:
            _setter("iotevents", iotevents)
        if ivs is not None:
            _setter("ivs", ivs)
        if ivschat is not None:
            _setter("ivschat", ivschat)
        if kafka is not None:
            _setter("kafka", kafka)
        if kafkaconnect is not None:
            _setter("kafkaconnect", kafkaconnect)
        if kendra is not None:
            _setter("kendra", kendra)
        if keyspaces is not None:
            _setter("keyspaces", keyspaces)
        if kinesis is not None:
            _setter("kinesis", kinesis)
        if kinesisanalytics is not None:
            _setter("kinesisanalytics", kinesisanalytics)
        if kinesisanalyticsv2 is not None:
            _setter("kinesisanalyticsv2", kinesisanalyticsv2)
        if kinesisvideo is not None:
            _setter("kinesisvideo", kinesisvideo)
        if kms is not None:
            _setter("kms", kms)
        if lakeformation is not None:
            _setter("lakeformation", lakeformation)
        if lambda_ is not None:
            _setter("lambda_", lambda_)
        if lex is not None:
            _setter("lex", lex)
        if lexmodelbuilding is not None:
            _setter("lexmodelbuilding", lexmodelbuilding)
        if lexmodelbuildingservice is not None:
            _setter("lexmodelbuildingservice", lexmodelbuildingservice)
        if lexmodels is not None:
            _setter("lexmodels", lexmodels)
        if lexmodelsv2 is not None:
            _setter("lexmodelsv2", lexmodelsv2)
        if lexv2models is not None:
            _setter("lexv2models", lexv2models)
        if licensemanager is not None:
            _setter("licensemanager", licensemanager)
        if lightsail is not None:
            _setter("lightsail", lightsail)
        if location is not None:
            _setter("location", location)
        if locationservice is not None:
            _setter("locationservice", locationservice)
        if logs is not None:
            _setter("logs", logs)
        if macie2 is not None:
            _setter("macie2", macie2)
        if managedgrafana is not None:
            _setter("managedgrafana", managedgrafana)
        if mediaconnect is not None:
            _setter("mediaconnect", mediaconnect)
        if mediaconvert is not None:
            _setter("mediaconvert", mediaconvert)
        if medialive is not None:
            _setter("medialive", medialive)
        if mediapackage is not None:
            _setter("mediapackage", mediapackage)
        if mediastore is not None:
            _setter("mediastore", mediastore)
        if memorydb is not None:
            _setter("memorydb", memorydb)
        if mq is not None:
            _setter("mq", mq)
        if msk is not None:
            _setter("msk", msk)
        if mwaa is not None:
            _setter("mwaa", mwaa)
        if neptune is not None:
            _setter("neptune", neptune)
        if networkfirewall is not None:
            _setter("networkfirewall", networkfirewall)
        if networkmanager is not None:
            _setter("networkmanager", networkmanager)
        if oam is not None:
            _setter("oam", oam)
        if opensearch is not None:
            _setter("opensearch", opensearch)
        if opensearchserverless is not None:
            _setter("opensearchserverless", opensearchserverless)
        if opensearchservice is not None:
            _setter("opensearchservice", opensearchservice)
        if opsworks is not None:
            _setter("opsworks", opsworks)
        if organizations is not None:
            _setter("organizations", organizations)
        if outposts is not None:
            _setter("outposts", outposts)
        if pinpoint is not None:
            _setter("pinpoint", pinpoint)
        if pipes is not None:
            _setter("pipes", pipes)
        if pricing is not None:
            _setter("pricing", pricing)
        if prometheus is not None:
            _setter("prometheus", prometheus)
        if prometheusservice is not None:
            _setter("prometheusservice", prometheusservice)
        if qldb is not None:
            _setter("qldb", qldb)
        if quicksight is not None:
            _setter("quicksight", quicksight)
        if ram is not None:
            _setter("ram", ram)
        if rbin is not None:
            _setter("rbin", rbin)
        if rds is not None:
            _setter("rds", rds)
        if recyclebin is not None:
            _setter("recyclebin", recyclebin)
        if redshift is not None:
            _setter("redshift", redshift)
        if redshiftdata is not None:
            _setter("redshiftdata", redshiftdata)
        if redshiftdataapiservice is not None:
            _setter("redshiftdataapiservice", redshiftdataapiservice)
        if redshiftserverless is not None:
            _setter("redshiftserverless", redshiftserverless)
        if resourceexplorer2 is not None:
            _setter("resourceexplorer2", resourceexplorer2)
        if resourcegroups is not None:
            _setter("resourcegroups", resourcegroups)
        if resourcegroupstagging is not None:
            _setter("resourcegroupstagging", resourcegroupstagging)
        if resourcegroupstaggingapi is not None:
            _setter("resourcegroupstaggingapi", resourcegroupstaggingapi)
        if rolesanywhere is not None:
            _setter("rolesanywhere", rolesanywhere)
        if route53 is not None:
            _setter("route53", route53)
        if route53domains is not None:
            _setter("route53domains", route53domains)
        if route53recoverycontrolconfig is not None:
            _setter("route53recoverycontrolconfig", route53recoverycontrolconfig)
        if route53recoveryreadiness is not None:
            _setter("route53recoveryreadiness", route53recoveryreadiness)
        if route53resolver is not None:
            _setter("route53resolver", route53resolver)
        if rum is not None:
            _setter("rum", rum)
        if s3 is not None:
            _setter("s3", s3)
        if s3api is not None:
            _setter("s3api", s3api)
        if s3control is not None:
            _setter("s3control", s3control)
        if s3outposts is not None:
            _setter("s3outposts", s3outposts)
        if sagemaker is not None:
            _setter("sagemaker", sagemaker)
        if scheduler is not None:
            _setter("scheduler", scheduler)
        if schemas is not None:
            _setter("schemas", schemas)
        if sdb is not None:
            _setter("sdb", sdb)
        if secretsmanager is not None:
            _setter("secretsmanager", secretsmanager)
        if securityhub is not None:
            _setter("securityhub", securityhub)
        if securitylake is not None:
            _setter("securitylake", securitylake)
        if serverlessapplicationrepository is not None:
            _setter("serverlessapplicationrepository", serverlessapplicationrepository)
        if serverlessapprepo is not None:
            _setter("serverlessapprepo", serverlessapprepo)
        if serverlessrepo is not None:
            _setter("serverlessrepo", serverlessrepo)
        if servicecatalog is not None:
            _setter("servicecatalog", servicecatalog)
        if servicediscovery is not None:
            _setter("servicediscovery", servicediscovery)
        if servicequotas is not None:
            _setter("servicequotas", servicequotas)
        if ses is not None:
            _setter("ses", ses)
        if sesv2 is not None:
            _setter("sesv2", sesv2)
        if sfn is not None:
            _setter("sfn", sfn)
        if shield is not None:
            _setter("shield", shield)
        if signer is not None:
            _setter("signer", signer)
        if simpledb is not None:
            _setter("simpledb", simpledb)
        if sns is not None:
            _setter("sns", sns)
        if sqs is not None:
            _setter("sqs", sqs)
        if ssm is not None:
            _setter("ssm", ssm)
        if ssmcontacts is not None:
            _setter("ssmcontacts", ssmcontacts)
        if ssmincidents is not None:
            _setter("ssmincidents", ssmincidents)
        if ssoadmin is not None:
            _setter("ssoadmin", ssoadmin)
        if stepfunctions is not None:
            _setter("stepfunctions", stepfunctions)
        if storagegateway is not None:
            _setter("storagegateway", storagegateway)
        if sts is not None:
            _setter("sts", sts)
        if swf is not None:
            _setter("swf", swf)
        if synthetics is not None:
            _setter("synthetics", synthetics)
        if timestreamwrite is not None:
            _setter("timestreamwrite", timestreamwrite)
        if transcribe is not None:
            _setter("transcribe", transcribe)
        if transcribeservice is not None:
            _setter("transcribeservice", transcribeservice)
        if transfer is not None:
            _setter("transfer", transfer)
        if verifiedpermissions is not None:
            _setter("verifiedpermissions", verifiedpermissions)
        if vpclattice is not None:
            _setter("vpclattice", vpclattice)
        if waf is not None:
            _setter("waf", waf)
        if wafregional is not None:
            _setter("wafregional", wafregional)
        if wafv2 is not None:
            _setter("wafv2", wafv2)
        if worklink is not None:
            _setter("worklink", worklink)
        if workspaces is not None:
            _setter("workspaces", workspaces)
        if xray is not None:
            _setter("xray", xray)

    @property
    @pulumi.getter
    def accessanalyzer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accessanalyzer")

    @accessanalyzer.setter
    def accessanalyzer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accessanalyzer", value)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def acm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acm")

    @acm.setter
    def acm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acm", value)

    @property
    @pulumi.getter
    def acmpca(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acmpca")

    @acmpca.setter
    def acmpca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acmpca", value)

    @property
    @pulumi.getter
    def amg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "amg")

    @amg.setter
    def amg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amg", value)

    @property
    @pulumi.getter
    def amp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "amp")

    @amp.setter
    def amp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amp", value)

    @property
    @pulumi.getter
    def amplify(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "amplify")

    @amplify.setter
    def amplify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amplify", value)

    @property
    @pulumi.getter
    def apigateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apigateway")

    @apigateway.setter
    def apigateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apigateway", value)

    @property
    @pulumi.getter
    def apigatewayv2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apigatewayv2")

    @apigatewayv2.setter
    def apigatewayv2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apigatewayv2", value)

    @property
    @pulumi.getter
    def appautoscaling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "appautoscaling")

    @appautoscaling.setter
    def appautoscaling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "appautoscaling", value)

    @property
    @pulumi.getter
    def appconfig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "appconfig")

    @appconfig.setter
    def appconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "appconfig", value)

    @property
    @pulumi.getter
    def appflow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "appflow")

    @appflow.setter
    def appflow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "appflow", value)

    @property
    @pulumi.getter
    def appintegrations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "appintegrations")

    @appintegrations.setter
    def appintegrations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "appintegrations", value)

    @property
    @pulumi.getter
    def appintegrationsservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "appintegrationsservice")

    @appintegrationsservice.setter
    def appintegrationsservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "appintegrationsservice", value)

    @property
    @pulumi.getter
    def applicationautoscaling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applicationautoscaling")

    @applicationautoscaling.setter
    def applicationautoscaling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applicationautoscaling", value)

    @property
    @pulumi.getter
    def applicationinsights(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applicationinsights")

    @applicationinsights.setter
    def applicationinsights(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applicationinsights", value)

    @property
    @pulumi.getter
    def appmesh(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "appmesh")

    @appmesh.setter
    def appmesh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "appmesh", value)

    @property
    @pulumi.getter
    def apprunner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apprunner")

    @apprunner.setter
    def apprunner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apprunner", value)

    @property
    @pulumi.getter
    def appstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "appstream")

    @appstream.setter
    def appstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "appstream", value)

    @property
    @pulumi.getter
    def appsync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "appsync")

    @appsync.setter
    def appsync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "appsync", value)

    @property
    @pulumi.getter
    def athena(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "athena")

    @athena.setter
    def athena(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "athena", value)

    @property
    @pulumi.getter
    def auditmanager(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auditmanager")

    @auditmanager.setter
    def auditmanager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auditmanager", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter
    def autoscalingplans(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "autoscalingplans")

    @autoscalingplans.setter
    def autoscalingplans(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autoscalingplans", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter
    def batch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "batch")

    @batch.setter
    def batch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "batch", value)

    @property
    @pulumi.getter
    def beanstalk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "beanstalk")

    @beanstalk.setter
    def beanstalk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "beanstalk", value)

    @property
    @pulumi.getter
    def bedrock(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bedrock")

    @bedrock.setter
    def bedrock(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bedrock", value)

    @property
    @pulumi.getter
    def budgets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "budgets")

    @budgets.setter
    def budgets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "budgets", value)

    @property
    @pulumi.getter
    def ce(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ce")

    @ce.setter
    def ce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ce", value)

    @property
    @pulumi.getter
    def chime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chime")

    @chime.setter
    def chime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chime", value)

    @property
    @pulumi.getter
    def chimesdkmediapipelines(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chimesdkmediapipelines")

    @chimesdkmediapipelines.setter
    def chimesdkmediapipelines(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chimesdkmediapipelines", value)

    @property
    @pulumi.getter
    def chimesdkvoice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chimesdkvoice")

    @chimesdkvoice.setter
    def chimesdkvoice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chimesdkvoice", value)

    @property
    @pulumi.getter
    def cleanrooms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cleanrooms")

    @cleanrooms.setter
    def cleanrooms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cleanrooms", value)

    @property
    @pulumi.getter
    def cloud9(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud9")

    @cloud9.setter
    def cloud9(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud9", value)

    @property
    @pulumi.getter
    def cloudcontrol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudcontrol")

    @cloudcontrol.setter
    def cloudcontrol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudcontrol", value)

    @property
    @pulumi.getter
    def cloudcontrolapi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudcontrolapi")

    @cloudcontrolapi.setter
    def cloudcontrolapi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudcontrolapi", value)

    @property
    @pulumi.getter
    def cloudformation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudformation")

    @cloudformation.setter
    def cloudformation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudformation", value)

    @property
    @pulumi.getter
    def cloudfront(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudfront")

    @cloudfront.setter
    def cloudfront(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudfront", value)

    @property
    @pulumi.getter
    def cloudhsm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudhsm")

    @cloudhsm.setter
    def cloudhsm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudhsm", value)

    @property
    @pulumi.getter
    def cloudhsmv2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudhsmv2")

    @cloudhsmv2.setter
    def cloudhsmv2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudhsmv2", value)

    @property
    @pulumi.getter
    def cloudsearch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudsearch")

    @cloudsearch.setter
    def cloudsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudsearch", value)

    @property
    @pulumi.getter
    def cloudtrail(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudtrail")

    @cloudtrail.setter
    def cloudtrail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudtrail", value)

    @property
    @pulumi.getter
    def cloudwatch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatch")

    @cloudwatch.setter
    def cloudwatch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatch", value)

    @property
    @pulumi.getter
    def cloudwatchevents(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatchevents")

    @cloudwatchevents.setter
    def cloudwatchevents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatchevents", value)

    @property
    @pulumi.getter
    def cloudwatchevidently(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatchevidently")

    @cloudwatchevidently.setter
    def cloudwatchevidently(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatchevidently", value)

    @property
    @pulumi.getter
    def cloudwatchlog(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatchlog")

    @cloudwatchlog.setter
    def cloudwatchlog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatchlog", value)

    @property
    @pulumi.getter
    def cloudwatchlogs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatchlogs")

    @cloudwatchlogs.setter
    def cloudwatchlogs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatchlogs", value)

    @property
    @pulumi.getter
    def cloudwatchobservabilityaccessmanager(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatchobservabilityaccessmanager")

    @cloudwatchobservabilityaccessmanager.setter
    def cloudwatchobservabilityaccessmanager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatchobservabilityaccessmanager", value)

    @property
    @pulumi.getter
    def cloudwatchrum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloudwatchrum")

    @cloudwatchrum.setter
    def cloudwatchrum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudwatchrum", value)

    @property
    @pulumi.getter
    def codeartifact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codeartifact")

    @codeartifact.setter
    def codeartifact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codeartifact", value)

    @property
    @pulumi.getter
    def codebuild(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codebuild")

    @codebuild.setter
    def codebuild(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codebuild", value)

    @property
    @pulumi.getter
    def codecatalyst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codecatalyst")

    @codecatalyst.setter
    def codecatalyst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codecatalyst", value)

    @property
    @pulumi.getter
    def codecommit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codecommit")

    @codecommit.setter
    def codecommit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codecommit", value)

    @property
    @pulumi.getter
    def codedeploy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codedeploy")

    @codedeploy.setter
    def codedeploy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codedeploy", value)

    @property
    @pulumi.getter
    def codegurureviewer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codegurureviewer")

    @codegurureviewer.setter
    def codegurureviewer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codegurureviewer", value)

    @property
    @pulumi.getter
    def codepipeline(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codepipeline")

    @codepipeline.setter
    def codepipeline(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codepipeline", value)

    @property
    @pulumi.getter
    def codestarconnections(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codestarconnections")

    @codestarconnections.setter
    def codestarconnections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codestarconnections", value)

    @property
    @pulumi.getter
    def codestarnotifications(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codestarnotifications")

    @codestarnotifications.setter
    def codestarnotifications(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codestarnotifications", value)

    @property
    @pulumi.getter
    def cognitoidentity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cognitoidentity")

    @cognitoidentity.setter
    def cognitoidentity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cognitoidentity", value)

    @property
    @pulumi.getter
    def cognitoidentityprovider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cognitoidentityprovider")

    @cognitoidentityprovider.setter
    def cognitoidentityprovider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cognitoidentityprovider", value)

    @property
    @pulumi.getter
    def cognitoidp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cognitoidp")

    @cognitoidp.setter
    def cognitoidp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cognitoidp", value)

    @property
    @pulumi.getter
    def comprehend(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comprehend")

    @comprehend.setter
    def comprehend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comprehend", value)

    @property
    @pulumi.getter
    def computeoptimizer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "computeoptimizer")

    @computeoptimizer.setter
    def computeoptimizer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "computeoptimizer", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def configservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configservice")

    @configservice.setter
    def configservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configservice", value)

    @property
    @pulumi.getter
    def connect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect")

    @connect.setter
    def connect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect", value)

    @property
    @pulumi.getter
    def controltower(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "controltower")

    @controltower.setter
    def controltower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controltower", value)

    @property
    @pulumi.getter
    def costandusagereportservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "costandusagereportservice")

    @costandusagereportservice.setter
    def costandusagereportservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "costandusagereportservice", value)

    @property
    @pulumi.getter
    def costexplorer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "costexplorer")

    @costexplorer.setter
    def costexplorer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "costexplorer", value)

    @property
    @pulumi.getter
    def cur(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cur")

    @cur.setter
    def cur(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cur", value)

    @property
    @pulumi.getter
    def databasemigration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "databasemigration")

    @databasemigration.setter
    def databasemigration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databasemigration", value)

    @property
    @pulumi.getter
    def databasemigrationservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "databasemigrationservice")

    @databasemigrationservice.setter
    def databasemigrationservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databasemigrationservice", value)

    @property
    @pulumi.getter
    def dataexchange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataexchange")

    @dataexchange.setter
    def dataexchange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataexchange", value)

    @property
    @pulumi.getter
    def datapipeline(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datapipeline")

    @datapipeline.setter
    def datapipeline(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datapipeline", value)

    @property
    @pulumi.getter
    def datasync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datasync")

    @datasync.setter
    def datasync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datasync", value)

    @property
    @pulumi.getter
    def dax(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dax")

    @dax.setter
    def dax(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dax", value)

    @property
    @pulumi.getter
    def deploy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deploy")

    @deploy.setter
    def deploy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy", value)

    @property
    @pulumi.getter
    def detective(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detective")

    @detective.setter
    def detective(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detective", value)

    @property
    @pulumi.getter
    def devicefarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "devicefarm")

    @devicefarm.setter
    def devicefarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "devicefarm", value)

    @property
    @pulumi.getter
    def directconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directconnect")

    @directconnect.setter
    def directconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directconnect", value)

    @property
    @pulumi.getter
    def directoryservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directoryservice")

    @directoryservice.setter
    def directoryservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directoryservice", value)

    @property
    @pulumi.getter
    def dlm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlm")

    @dlm.setter
    def dlm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlm", value)

    @property
    @pulumi.getter
    def dms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dms")

    @dms.setter
    def dms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dms", value)

    @property
    @pulumi.getter
    def docdb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docdb")

    @docdb.setter
    def docdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docdb", value)

    @property
    @pulumi.getter
    def docdbelastic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docdbelastic")

    @docdbelastic.setter
    def docdbelastic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docdbelastic", value)

    @property
    @pulumi.getter
    def ds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ds")

    @ds.setter
    def ds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ds", value)

    @property
    @pulumi.getter
    def dynamodb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamodb")

    @dynamodb.setter
    def dynamodb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamodb", value)

    @property
    @pulumi.getter
    def ec2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ec2")

    @ec2.setter
    def ec2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ec2", value)

    @property
    @pulumi.getter
    def ecr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ecr")

    @ecr.setter
    def ecr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ecr", value)

    @property
    @pulumi.getter
    def ecrpublic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ecrpublic")

    @ecrpublic.setter
    def ecrpublic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ecrpublic", value)

    @property
    @pulumi.getter
    def ecs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ecs")

    @ecs.setter
    def ecs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ecs", value)

    @property
    @pulumi.getter
    def efs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "efs")

    @efs.setter
    def efs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "efs", value)

    @property
    @pulumi.getter
    def eks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eks")

    @eks.setter
    def eks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eks", value)

    @property
    @pulumi.getter
    def elasticache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticache")

    @elasticache.setter
    def elasticache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticache", value)

    @property
    @pulumi.getter
    def elasticbeanstalk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticbeanstalk")

    @elasticbeanstalk.setter
    def elasticbeanstalk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticbeanstalk", value)

    @property
    @pulumi.getter
    def elasticloadbalancing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticloadbalancing")

    @elasticloadbalancing.setter
    def elasticloadbalancing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticloadbalancing", value)

    @property
    @pulumi.getter
    def elasticloadbalancingv2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticloadbalancingv2")

    @elasticloadbalancingv2.setter
    def elasticloadbalancingv2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticloadbalancingv2", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def elasticsearchservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearchservice")

    @elasticsearchservice.setter
    def elasticsearchservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearchservice", value)

    @property
    @pulumi.getter
    def elastictranscoder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elastictranscoder")

    @elastictranscoder.setter
    def elastictranscoder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elastictranscoder", value)

    @property
    @pulumi.getter
    def elb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elb")

    @elb.setter
    def elb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elb", value)

    @property
    @pulumi.getter
    def elbv2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elbv2")

    @elbv2.setter
    def elbv2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elbv2", value)

    @property
    @pulumi.getter
    def emr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emr")

    @emr.setter
    def emr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emr", value)

    @property
    @pulumi.getter
    def emrcontainers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emrcontainers")

    @emrcontainers.setter
    def emrcontainers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emrcontainers", value)

    @property
    @pulumi.getter
    def emrserverless(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "emrserverless")

    @emrserverless.setter
    def emrserverless(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emrserverless", value)

    @property
    @pulumi.getter
    def es(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "es")

    @es.setter
    def es(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "es", value)

    @property
    @pulumi.getter
    def eventbridge(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eventbridge")

    @eventbridge.setter
    def eventbridge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eventbridge", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def evidently(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "evidently")

    @evidently.setter
    def evidently(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "evidently", value)

    @property
    @pulumi.getter
    def finspace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "finspace")

    @finspace.setter
    def finspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finspace", value)

    @property
    @pulumi.getter
    def firehose(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firehose")

    @firehose.setter
    def firehose(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firehose", value)

    @property
    @pulumi.getter
    def fis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fis")

    @fis.setter
    def fis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fis", value)

    @property
    @pulumi.getter
    def fms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fms")

    @fms.setter
    def fms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fms", value)

    @property
    @pulumi.getter
    def fsx(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fsx")

    @fsx.setter
    def fsx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsx", value)

    @property
    @pulumi.getter
    def gamelift(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gamelift")

    @gamelift.setter
    def gamelift(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gamelift", value)

    @property
    @pulumi.getter
    def glacier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "glacier")

    @glacier.setter
    def glacier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "glacier", value)

    @property
    @pulumi.getter
    def globalaccelerator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "globalaccelerator")

    @globalaccelerator.setter
    def globalaccelerator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "globalaccelerator", value)

    @property
    @pulumi.getter
    def glue(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "glue")

    @glue.setter
    def glue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "glue", value)

    @property
    @pulumi.getter
    def grafana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grafana")

    @grafana.setter
    def grafana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana", value)

    @property
    @pulumi.getter
    def greengrass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "greengrass")

    @greengrass.setter
    def greengrass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "greengrass", value)

    @property
    @pulumi.getter
    def guardduty(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "guardduty")

    @guardduty.setter
    def guardduty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guardduty", value)

    @property
    @pulumi.getter
    def healthlake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "healthlake")

    @healthlake.setter
    def healthlake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthlake", value)

    @property
    @pulumi.getter
    def iam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iam")

    @iam.setter
    def iam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam", value)

    @property
    @pulumi.getter
    def identitystore(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identitystore")

    @identitystore.setter
    def identitystore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identitystore", value)

    @property
    @pulumi.getter
    def imagebuilder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imagebuilder")

    @imagebuilder.setter
    def imagebuilder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imagebuilder", value)

    @property
    @pulumi.getter
    def inspector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspector")

    @inspector.setter
    def inspector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspector", value)

    @property
    @pulumi.getter
    def inspector2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspector2")

    @inspector2.setter
    def inspector2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspector2", value)

    @property
    @pulumi.getter
    def inspectorv2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inspectorv2")

    @inspectorv2.setter
    def inspectorv2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspectorv2", value)

    @property
    @pulumi.getter
    def internetmonitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internetmonitor")

    @internetmonitor.setter
    def internetmonitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internetmonitor", value)

    @property
    @pulumi.getter
    def iot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iot")

    @iot.setter
    def iot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iot", value)

    @property
    @pulumi.getter
    def iotanalytics(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iotanalytics")

    @iotanalytics.setter
    def iotanalytics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iotanalytics", value)

    @property
    @pulumi.getter
    def iotevents(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iotevents")

    @iotevents.setter
    def iotevents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iotevents", value)

    @property
    @pulumi.getter
    def ivs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ivs")

    @ivs.setter
    def ivs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ivs", value)

    @property
    @pulumi.getter
    def ivschat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ivschat")

    @ivschat.setter
    def ivschat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ivschat", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter
    def kafkaconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafkaconnect")

    @kafkaconnect.setter
    def kafkaconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafkaconnect", value)

    @property
    @pulumi.getter
    def kendra(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kendra")

    @kendra.setter
    def kendra(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kendra", value)

    @property
    @pulumi.getter
    def keyspaces(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keyspaces")

    @keyspaces.setter
    def keyspaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyspaces", value)

    @property
    @pulumi.getter
    def kinesis(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kinesis")

    @kinesis.setter
    def kinesis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kinesis", value)

    @property
    @pulumi.getter
    def kinesisanalytics(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kinesisanalytics")

    @kinesisanalytics.setter
    def kinesisanalytics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kinesisanalytics", value)

    @property
    @pulumi.getter
    def kinesisanalyticsv2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kinesisanalyticsv2")

    @kinesisanalyticsv2.setter
    def kinesisanalyticsv2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kinesisanalyticsv2", value)

    @property
    @pulumi.getter
    def kinesisvideo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kinesisvideo")

    @kinesisvideo.setter
    def kinesisvideo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kinesisvideo", value)

    @property
    @pulumi.getter
    def kms(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms")

    @kms.setter
    def kms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms", value)

    @property
    @pulumi.getter
    def lakeformation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lakeformation")

    @lakeformation.setter
    def lakeformation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lakeformation", value)

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lambda_")

    @lambda_.setter
    def lambda_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lambda_", value)

    @property
    @pulumi.getter
    def lex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lex")

    @lex.setter
    def lex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lex", value)

    @property
    @pulumi.getter
    def lexmodelbuilding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lexmodelbuilding")

    @lexmodelbuilding.setter
    def lexmodelbuilding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lexmodelbuilding", value)

    @property
    @pulumi.getter
    def lexmodelbuildingservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lexmodelbuildingservice")

    @lexmodelbuildingservice.setter
    def lexmodelbuildingservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lexmodelbuildingservice", value)

    @property
    @pulumi.getter
    def lexmodels(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lexmodels")

    @lexmodels.setter
    def lexmodels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lexmodels", value)

    @property
    @pulumi.getter
    def lexmodelsv2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lexmodelsv2")

    @lexmodelsv2.setter
    def lexmodelsv2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lexmodelsv2", value)

    @property
    @pulumi.getter
    def lexv2models(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lexv2models")

    @lexv2models.setter
    def lexv2models(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lexv2models", value)

    @property
    @pulumi.getter
    def licensemanager(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "licensemanager")

    @licensemanager.setter
    def licensemanager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "licensemanager", value)

    @property
    @pulumi.getter
    def lightsail(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lightsail")

    @lightsail.setter
    def lightsail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lightsail", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def locationservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locationservice")

    @locationservice.setter
    def locationservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locationservice", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def macie2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "macie2")

    @macie2.setter
    def macie2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macie2", value)

    @property
    @pulumi.getter
    def managedgrafana(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "managedgrafana")

    @managedgrafana.setter
    def managedgrafana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managedgrafana", value)

    @property
    @pulumi.getter
    def mediaconnect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mediaconnect")

    @mediaconnect.setter
    def mediaconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mediaconnect", value)

    @property
    @pulumi.getter
    def mediaconvert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mediaconvert")

    @mediaconvert.setter
    def mediaconvert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mediaconvert", value)

    @property
    @pulumi.getter
    def medialive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "medialive")

    @medialive.setter
    def medialive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medialive", value)

    @property
    @pulumi.getter
    def mediapackage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mediapackage")

    @mediapackage.setter
    def mediapackage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mediapackage", value)

    @property
    @pulumi.getter
    def mediastore(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mediastore")

    @mediastore.setter
    def mediastore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mediastore", value)

    @property
    @pulumi.getter
    def memorydb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memorydb")

    @memorydb.setter
    def memorydb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memorydb", value)

    @property
    @pulumi.getter
    def mq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mq")

    @mq.setter
    def mq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mq", value)

    @property
    @pulumi.getter
    def msk(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msk")

    @msk.setter
    def msk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msk", value)

    @property
    @pulumi.getter
    def mwaa(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mwaa")

    @mwaa.setter
    def mwaa(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mwaa", value)

    @property
    @pulumi.getter
    def neptune(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "neptune")

    @neptune.setter
    def neptune(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neptune", value)

    @property
    @pulumi.getter
    def networkfirewall(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "networkfirewall")

    @networkfirewall.setter
    def networkfirewall(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "networkfirewall", value)

    @property
    @pulumi.getter
    def networkmanager(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "networkmanager")

    @networkmanager.setter
    def networkmanager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "networkmanager", value)

    @property
    @pulumi.getter
    def oam(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oam")

    @oam.setter
    def oam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oam", value)

    @property
    @pulumi.getter
    def opensearch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opensearch")

    @opensearch.setter
    def opensearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opensearch", value)

    @property
    @pulumi.getter
    def opensearchserverless(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opensearchserverless")

    @opensearchserverless.setter
    def opensearchserverless(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opensearchserverless", value)

    @property
    @pulumi.getter
    def opensearchservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opensearchservice")

    @opensearchservice.setter
    def opensearchservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opensearchservice", value)

    @property
    @pulumi.getter
    def opsworks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opsworks")

    @opsworks.setter
    def opsworks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opsworks", value)

    @property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organizations", value)

    @property
    @pulumi.getter
    def outposts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outposts")

    @outposts.setter
    def outposts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outposts", value)

    @property
    @pulumi.getter
    def pinpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pinpoint")

    @pinpoint.setter
    def pinpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pinpoint", value)

    @property
    @pulumi.getter
    def pipes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pipes")

    @pipes.setter
    def pipes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipes", value)

    @property
    @pulumi.getter
    def pricing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pricing")

    @pricing.setter
    def pricing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pricing", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus", value)

    @property
    @pulumi.getter
    def prometheusservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheusservice")

    @prometheusservice.setter
    def prometheusservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheusservice", value)

    @property
    @pulumi.getter
    def qldb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qldb")

    @qldb.setter
    def qldb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qldb", value)

    @property
    @pulumi.getter
    def quicksight(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quicksight")

    @quicksight.setter
    def quicksight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quicksight", value)

    @property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter
    def rbin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rbin")

    @rbin.setter
    def rbin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rbin", value)

    @property
    @pulumi.getter
    def rds(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rds")

    @rds.setter
    def rds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rds", value)

    @property
    @pulumi.getter
    def recyclebin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recyclebin")

    @recyclebin.setter
    def recyclebin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recyclebin", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter
    def redshiftdata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redshiftdata")

    @redshiftdata.setter
    def redshiftdata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redshiftdata", value)

    @property
    @pulumi.getter
    def redshiftdataapiservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redshiftdataapiservice")

    @redshiftdataapiservice.setter
    def redshiftdataapiservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redshiftdataapiservice", value)

    @property
    @pulumi.getter
    def redshiftserverless(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redshiftserverless")

    @redshiftserverless.setter
    def redshiftserverless(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redshiftserverless", value)

    @property
    @pulumi.getter
    def resourceexplorer2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourceexplorer2")

    @resourceexplorer2.setter
    def resourceexplorer2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourceexplorer2", value)

    @property
    @pulumi.getter
    def resourcegroups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourcegroups")

    @resourcegroups.setter
    def resourcegroups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcegroups", value)

    @property
    @pulumi.getter
    def resourcegroupstagging(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourcegroupstagging")

    @resourcegroupstagging.setter
    def resourcegroupstagging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcegroupstagging", value)

    @property
    @pulumi.getter
    def resourcegroupstaggingapi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourcegroupstaggingapi")

    @resourcegroupstaggingapi.setter
    def resourcegroupstaggingapi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcegroupstaggingapi", value)

    @property
    @pulumi.getter
    def rolesanywhere(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rolesanywhere")

    @rolesanywhere.setter
    def rolesanywhere(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rolesanywhere", value)

    @property
    @pulumi.getter
    def route53(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route53")

    @route53.setter
    def route53(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route53", value)

    @property
    @pulumi.getter
    def route53domains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route53domains")

    @route53domains.setter
    def route53domains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route53domains", value)

    @property
    @pulumi.getter
    def route53recoverycontrolconfig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route53recoverycontrolconfig")

    @route53recoverycontrolconfig.setter
    def route53recoverycontrolconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route53recoverycontrolconfig", value)

    @property
    @pulumi.getter
    def route53recoveryreadiness(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route53recoveryreadiness")

    @route53recoveryreadiness.setter
    def route53recoveryreadiness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route53recoveryreadiness", value)

    @property
    @pulumi.getter
    def route53resolver(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route53resolver")

    @route53resolver.setter
    def route53resolver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route53resolver", value)

    @property
    @pulumi.getter
    def rum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rum")

    @rum.setter
    def rum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rum", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def s3api(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3api")

    @s3api.setter
    def s3api(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3api", value)

    @property
    @pulumi.getter
    def s3control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3control")

    @s3control.setter
    def s3control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3control", value)

    @property
    @pulumi.getter
    def s3outposts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3outposts")

    @s3outposts.setter
    def s3outposts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3outposts", value)

    @property
    @pulumi.getter
    def sagemaker(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sagemaker")

    @sagemaker.setter
    def sagemaker(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sagemaker", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter
    def sdb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sdb")

    @sdb.setter
    def sdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdb", value)

    @property
    @pulumi.getter
    def secretsmanager(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secretsmanager")

    @secretsmanager.setter
    def secretsmanager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretsmanager", value)

    @property
    @pulumi.getter
    def securityhub(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "securityhub")

    @securityhub.setter
    def securityhub(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "securityhub", value)

    @property
    @pulumi.getter
    def securitylake(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "securitylake")

    @securitylake.setter
    def securitylake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "securitylake", value)

    @property
    @pulumi.getter
    def serverlessapplicationrepository(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serverlessapplicationrepository")

    @serverlessapplicationrepository.setter
    def serverlessapplicationrepository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serverlessapplicationrepository", value)

    @property
    @pulumi.getter
    def serverlessapprepo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serverlessapprepo")

    @serverlessapprepo.setter
    def serverlessapprepo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serverlessapprepo", value)

    @property
    @pulumi.getter
    def serverlessrepo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serverlessrepo")

    @serverlessrepo.setter
    def serverlessrepo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serverlessrepo", value)

    @property
    @pulumi.getter
    def servicecatalog(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "servicecatalog")

    @servicecatalog.setter
    def servicecatalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servicecatalog", value)

    @property
    @pulumi.getter
    def servicediscovery(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "servicediscovery")

    @servicediscovery.setter
    def servicediscovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servicediscovery", value)

    @property
    @pulumi.getter
    def servicequotas(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "servicequotas")

    @servicequotas.setter
    def servicequotas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servicequotas", value)

    @property
    @pulumi.getter
    def ses(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ses")

    @ses.setter
    def ses(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ses", value)

    @property
    @pulumi.getter
    def sesv2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sesv2")

    @sesv2.setter
    def sesv2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sesv2", value)

    @property
    @pulumi.getter
    def sfn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sfn")

    @sfn.setter
    def sfn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sfn", value)

    @property
    @pulumi.getter
    def shield(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shield")

    @shield.setter
    def shield(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shield", value)

    @property
    @pulumi.getter
    def signer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signer")

    @signer.setter
    def signer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signer", value)

    @property
    @pulumi.getter
    def simpledb(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "simpledb")

    @simpledb.setter
    def simpledb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simpledb", value)

    @property
    @pulumi.getter
    def sns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sns")

    @sns.setter
    def sns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sns", value)

    @property
    @pulumi.getter
    def sqs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sqs")

    @sqs.setter
    def sqs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sqs", value)

    @property
    @pulumi.getter
    def ssm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssm")

    @ssm.setter
    def ssm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssm", value)

    @property
    @pulumi.getter
    def ssmcontacts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssmcontacts")

    @ssmcontacts.setter
    def ssmcontacts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssmcontacts", value)

    @property
    @pulumi.getter
    def ssmincidents(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssmincidents")

    @ssmincidents.setter
    def ssmincidents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssmincidents", value)

    @property
    @pulumi.getter
    def ssoadmin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssoadmin")

    @ssoadmin.setter
    def ssoadmin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssoadmin", value)

    @property
    @pulumi.getter
    def stepfunctions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stepfunctions")

    @stepfunctions.setter
    def stepfunctions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stepfunctions", value)

    @property
    @pulumi.getter
    def storagegateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storagegateway")

    @storagegateway.setter
    def storagegateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storagegateway", value)

    @property
    @pulumi.getter
    def sts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sts")

    @sts.setter
    def sts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sts", value)

    @property
    @pulumi.getter
    def swf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "swf")

    @swf.setter
    def swf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "swf", value)

    @property
    @pulumi.getter
    def synthetics(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "synthetics")

    @synthetics.setter
    def synthetics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synthetics", value)

    @property
    @pulumi.getter
    def timestreamwrite(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timestreamwrite")

    @timestreamwrite.setter
    def timestreamwrite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestreamwrite", value)

    @property
    @pulumi.getter
    def transcribe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transcribe")

    @transcribe.setter
    def transcribe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transcribe", value)

    @property
    @pulumi.getter
    def transcribeservice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transcribeservice")

    @transcribeservice.setter
    def transcribeservice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transcribeservice", value)

    @property
    @pulumi.getter
    def transfer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transfer")

    @transfer.setter
    def transfer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transfer", value)

    @property
    @pulumi.getter
    def verifiedpermissions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verifiedpermissions")

    @verifiedpermissions.setter
    def verifiedpermissions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verifiedpermissions", value)

    @property
    @pulumi.getter
    def vpclattice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpclattice")

    @vpclattice.setter
    def vpclattice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpclattice", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf", value)

    @property
    @pulumi.getter
    def wafregional(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wafregional")

    @wafregional.setter
    def wafregional(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wafregional", value)

    @property
    @pulumi.getter
    def wafv2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wafv2")

    @wafv2.setter
    def wafv2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wafv2", value)

    @property
    @pulumi.getter
    def worklink(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worklink")

    @worklink.setter
    def worklink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worklink", value)

    @property
    @pulumi.getter
    def workspaces(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workspaces")

    @workspaces.setter
    def workspaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspaces", value)

    @property
    @pulumi.getter
    def xray(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "xray")

    @xray.setter
    def xray(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "xray", value)


@pulumi.input_type
class ProviderIgnoreTagsArgs:
    def __init__(__self__, *,
                 key_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        ProviderIgnoreTagsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_prefixes=key_prefixes,
            keys=keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key_prefixes is None and 'keyPrefixes' in kwargs:
            key_prefixes = kwargs['keyPrefixes']

        if key_prefixes is not None:
            _setter("key_prefixes", key_prefixes)
        if keys is not None:
            _setter("keys", keys)

    @property
    @pulumi.getter(name="keyPrefixes")
    def key_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "key_prefixes")

    @key_prefixes.setter
    def key_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_prefixes", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)


@pulumi.input_type
class GetAvailabilityZoneFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Name of the filter field. Valid values can be found in the [EC2 DescribeAvailabilityZones API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html).
        :param Sequence[str] values: Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        GetAvailabilityZoneFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the filter field. Valid values can be found in the [EC2 DescribeAvailabilityZones API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetAvailabilityZonesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Name of the filter field. Valid values can be found in the [EC2 DescribeAvailabilityZones API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html).
        :param Sequence[str] values: Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        GetAvailabilityZonesFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the filter field. Valid values can be found in the [EC2 DescribeAvailabilityZones API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetRegionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Name of the filter field. Valid values can be found in the [describe-regions AWS CLI Reference][1].
        :param Sequence[str] values: Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        GetRegionsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the filter field. Valid values can be found in the [describe-regions AWS CLI Reference][1].
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


