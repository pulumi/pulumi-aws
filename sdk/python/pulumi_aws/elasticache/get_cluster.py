# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetClusterResult(object):
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, arn=None, availability_zone=None, cache_nodes=None, cluster_address=None, configuration_endpoint=None, engine=None, engine_version=None, maintenance_window=None, node_type=None, notification_topic_arn=None, num_cache_nodes=None, parameter_group_name=None, port=None, replication_group_id=None, security_group_ids=None, security_group_names=None, snapshot_retention_limit=None, snapshot_window=None, subnet_group_name=None, tags=None):
        if not arn:
            raise TypeError('Missing required argument arn')
        elif not isinstance(arn, basestring):
            raise TypeError('Expected argument arn to be a basestring')
        __self__.arn = arn
        if not availability_zone:
            raise TypeError('Missing required argument availability_zone')
        elif not isinstance(availability_zone, basestring):
            raise TypeError('Expected argument availability_zone to be a basestring')
        __self__.availability_zone = availability_zone
        """
        The Availability Zone for the cache cluster.
        """
        if not cache_nodes:
            raise TypeError('Missing required argument cache_nodes')
        elif not isinstance(cache_nodes, list):
            raise TypeError('Expected argument cache_nodes to be a list')
        __self__.cache_nodes = cache_nodes
        """
        List of node objects including `id`, `address`, `port` and `availability_zone`.
        Referenceable e.g. as `${data.aws_elasticache_cluster.bar.cache_nodes.0.address}`
        """
        if not cluster_address:
            raise TypeError('Missing required argument cluster_address')
        elif not isinstance(cluster_address, basestring):
            raise TypeError('Expected argument cluster_address to be a basestring')
        __self__.cluster_address = cluster_address
        """
        The DNS name of the cache cluster without the port appended.
        """
        if not configuration_endpoint:
            raise TypeError('Missing required argument configuration_endpoint')
        elif not isinstance(configuration_endpoint, basestring):
            raise TypeError('Expected argument configuration_endpoint to be a basestring')
        __self__.configuration_endpoint = configuration_endpoint
        """
        The configuration endpoint to allow host discovery.
        """
        if not engine:
            raise TypeError('Missing required argument engine')
        elif not isinstance(engine, basestring):
            raise TypeError('Expected argument engine to be a basestring')
        __self__.engine = engine
        """
        Name of the cache engine.
        """
        if not engine_version:
            raise TypeError('Missing required argument engine_version')
        elif not isinstance(engine_version, basestring):
            raise TypeError('Expected argument engine_version to be a basestring')
        __self__.engine_version = engine_version
        """
        Version number of the cache engine.
        """
        if not maintenance_window:
            raise TypeError('Missing required argument maintenance_window')
        elif not isinstance(maintenance_window, basestring):
            raise TypeError('Expected argument maintenance_window to be a basestring')
        __self__.maintenance_window = maintenance_window
        """
        Specifies the weekly time range for when maintenance
        on the cache cluster is performed.
        """
        if not node_type:
            raise TypeError('Missing required argument node_type')
        elif not isinstance(node_type, basestring):
            raise TypeError('Expected argument node_type to be a basestring')
        __self__.node_type = node_type
        """
        The cluster node type.
        """
        if not notification_topic_arn:
            raise TypeError('Missing required argument notification_topic_arn')
        elif not isinstance(notification_topic_arn, basestring):
            raise TypeError('Expected argument notification_topic_arn to be a basestring')
        __self__.notification_topic_arn = notification_topic_arn
        """
        An Amazon Resource Name (ARN) of an
        SNS topic that ElastiCache notifications get sent to.
        """
        if not num_cache_nodes:
            raise TypeError('Missing required argument num_cache_nodes')
        elif not isinstance(num_cache_nodes, int):
            raise TypeError('Expected argument num_cache_nodes to be a int')
        __self__.num_cache_nodes = num_cache_nodes
        """
        The number of cache nodes that the cache cluster has.
        """
        if not parameter_group_name:
            raise TypeError('Missing required argument parameter_group_name')
        elif not isinstance(parameter_group_name, basestring):
            raise TypeError('Expected argument parameter_group_name to be a basestring')
        __self__.parameter_group_name = parameter_group_name
        """
        Name of the parameter group associated with this cache cluster.
        """
        if not port:
            raise TypeError('Missing required argument port')
        elif not isinstance(port, int):
            raise TypeError('Expected argument port to be a int')
        __self__.port = port
        """
        The port number on which each of the cache nodes will
        accept connections.
        """
        if not replication_group_id:
            raise TypeError('Missing required argument replication_group_id')
        elif not isinstance(replication_group_id, basestring):
            raise TypeError('Expected argument replication_group_id to be a basestring')
        __self__.replication_group_id = replication_group_id
        """
        The replication group to which this cache cluster belongs.
        """
        if not security_group_ids:
            raise TypeError('Missing required argument security_group_ids')
        elif not isinstance(security_group_ids, list):
            raise TypeError('Expected argument security_group_ids to be a list')
        __self__.security_group_ids = security_group_ids
        """
        List VPC security groups associated with the cache cluster.
        """
        if not security_group_names:
            raise TypeError('Missing required argument security_group_names')
        elif not isinstance(security_group_names, list):
            raise TypeError('Expected argument security_group_names to be a list')
        __self__.security_group_names = security_group_names
        """
        List of security group names associated with this cache cluster.
        """
        if not snapshot_retention_limit:
            raise TypeError('Missing required argument snapshot_retention_limit')
        elif not isinstance(snapshot_retention_limit, int):
            raise TypeError('Expected argument snapshot_retention_limit to be a int')
        __self__.snapshot_retention_limit = snapshot_retention_limit
        """
        The number of days for which ElastiCache will
        retain automatic cache cluster snapshots before deleting them.
        """
        if not snapshot_window:
            raise TypeError('Missing required argument snapshot_window')
        elif not isinstance(snapshot_window, basestring):
            raise TypeError('Expected argument snapshot_window to be a basestring')
        __self__.snapshot_window = snapshot_window
        """
        The daily time range (in UTC) during which ElastiCache will
        begin taking a daily snapshot of the cache cluster.
        """
        if not subnet_group_name:
            raise TypeError('Missing required argument subnet_group_name')
        elif not isinstance(subnet_group_name, basestring):
            raise TypeError('Expected argument subnet_group_name to be a basestring')
        __self__.subnet_group_name = subnet_group_name
        """
        Name of the subnet group associated to the cache cluster.
        """
        if not tags:
            raise TypeError('Missing required argument tags')
        elif not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags
        """
        The tags assigned to the resource
        """

def get_cluster(cluster_id=None, tags=None):
    """
    Use this data source to get information about an Elasticache Cluster
    """
    __args__ = dict()

    __args__['clusterId'] = cluster_id
    __args__['tags'] = tags
    __ret__ = pulumi.runtime.invoke('aws:elasticache/getCluster:getCluster', __args__)

    return GetClusterResult(
        arn=__ret__['arn'],
        availability_zone=__ret__['availabilityZone'],
        cache_nodes=__ret__['cacheNodes'],
        cluster_address=__ret__['clusterAddress'],
        configuration_endpoint=__ret__['configurationEndpoint'],
        engine=__ret__['engine'],
        engine_version=__ret__['engineVersion'],
        maintenance_window=__ret__['maintenanceWindow'],
        node_type=__ret__['nodeType'],
        notification_topic_arn=__ret__['notificationTopicArn'],
        num_cache_nodes=__ret__['numCacheNodes'],
        parameter_group_name=__ret__['parameterGroupName'],
        port=__ret__['port'],
        replication_group_id=__ret__['replicationGroupId'],
        security_group_ids=__ret__['securityGroupIds'],
        security_group_names=__ret__['securityGroupNames'],
        snapshot_retention_limit=__ret__['snapshotRetentionLimit'],
        snapshot_window=__ret__['snapshotWindow'],
        subnet_group_name=__ret__['subnetGroupName'],
        tags=__ret__['tags'])
