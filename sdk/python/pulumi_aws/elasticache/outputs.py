# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ClusterCacheNode',
    'ClusterLogDeliveryConfiguration',
    'GlobalReplicationGroupGlobalNodeGroup',
    'ParameterGroupParameter',
    'ReplicationGroupLogDeliveryConfiguration',
    'UserAuthenticationMode',
    'GetClusterCacheNodeResult',
    'GetClusterLogDeliveryConfigurationResult',
    'GetReplicationGroupLogDeliveryConfigurationResult',
    'GetUserAuthenticationModeResult',
]

@pulumi.output_type
class ClusterCacheNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "outpostArn":
            suggest = "outpost_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterCacheNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterCacheNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterCacheNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 availability_zone: Optional[str] = None,
                 id: Optional[str] = None,
                 outpost_arn: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str availability_zone: Availability Zone for the cache cluster. If you want to create cache nodes in multi-az, use `preferred_availability_zones` instead. Default: System chosen Availability Zone. Changing this value will re-create the resource.
        :param int port: The port number on which each of the cache nodes will accept connections. For Memcached the default is 11211, and for Redis the default port is 6379. Cannot be provided with `replication_group_id`. Changing this value will re-create the resource.
        """
        ClusterCacheNode._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            availability_zone=availability_zone,
            id=id,
            outpost_arn=outpost_arn,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: Optional[str] = None,
             availability_zone: Optional[str] = None,
             id: Optional[str] = None,
             outpost_arn: Optional[str] = None,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if availability_zone is None and 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if outpost_arn is None and 'outpostArn' in kwargs:
            outpost_arn = kwargs['outpostArn']

        if address is not None:
            _setter("address", address)
        if availability_zone is not None:
            _setter("availability_zone", availability_zone)
        if id is not None:
            _setter("id", id)
        if outpost_arn is not None:
            _setter("outpost_arn", outpost_arn)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        Availability Zone for the cache cluster. If you want to create cache nodes in multi-az, use `preferred_availability_zones` instead. Default: System chosen Availability Zone. Changing this value will re-create the resource.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outpostArn")
    def outpost_arn(self) -> Optional[str]:
        return pulumi.get(self, "outpost_arn")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port number on which each of the cache nodes will accept connections. For Memcached the default is 11211, and for Redis the default port is 6379. Cannot be provided with `replication_group_id`. Changing this value will re-create the resource.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ClusterLogDeliveryConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "logFormat":
            suggest = "log_format"
        elif key == "logType":
            suggest = "log_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterLogDeliveryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterLogDeliveryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterLogDeliveryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 destination_type: str,
                 log_format: str,
                 log_type: str):
        """
        :param str destination: Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource.
        :param str destination_type: For CloudWatch Logs use `cloudwatch-logs` or for Kinesis Data Firehose use `kinesis-firehose`.
        :param str log_format: Valid values are `json` or `text`
        :param str log_type: Valid values are  `slow-log` or `engine-log`. Max 1 of each.
        """
        ClusterLogDeliveryConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            destination_type=destination_type,
            log_format=log_format,
            log_type=log_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             destination_type: Optional[str] = None,
             log_format: Optional[str] = None,
             log_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination is None:
            raise TypeError("Missing 'destination' argument")
        if destination_type is None and 'destinationType' in kwargs:
            destination_type = kwargs['destinationType']
        if destination_type is None:
            raise TypeError("Missing 'destination_type' argument")
        if log_format is None and 'logFormat' in kwargs:
            log_format = kwargs['logFormat']
        if log_format is None:
            raise TypeError("Missing 'log_format' argument")
        if log_type is None and 'logType' in kwargs:
            log_type = kwargs['logType']
        if log_type is None:
            raise TypeError("Missing 'log_type' argument")

        _setter("destination", destination)
        _setter("destination_type", destination_type)
        _setter("log_format", log_format)
        _setter("log_type", log_type)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        """
        For CloudWatch Logs use `cloudwatch-logs` or for Kinesis Data Firehose use `kinesis-firehose`.
        """
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> str:
        """
        Valid values are `json` or `text`
        """
        return pulumi.get(self, "log_format")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        """
        Valid values are  `slow-log` or `engine-log`. Max 1 of each.
        """
        return pulumi.get(self, "log_type")


@pulumi.output_type
class GlobalReplicationGroupGlobalNodeGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "globalNodeGroupId":
            suggest = "global_node_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalReplicationGroupGlobalNodeGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalReplicationGroupGlobalNodeGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalReplicationGroupGlobalNodeGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 global_node_group_id: Optional[str] = None,
                 slots: Optional[str] = None):
        """
        :param str global_node_group_id: The ID of the global node group.
        :param str slots: The keyspace for this node group.
        """
        GlobalReplicationGroupGlobalNodeGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            global_node_group_id=global_node_group_id,
            slots=slots,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             global_node_group_id: Optional[str] = None,
             slots: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if global_node_group_id is None and 'globalNodeGroupId' in kwargs:
            global_node_group_id = kwargs['globalNodeGroupId']

        if global_node_group_id is not None:
            _setter("global_node_group_id", global_node_group_id)
        if slots is not None:
            _setter("slots", slots)

    @property
    @pulumi.getter(name="globalNodeGroupId")
    def global_node_group_id(self) -> Optional[str]:
        """
        The ID of the global node group.
        """
        return pulumi.get(self, "global_node_group_id")

    @property
    @pulumi.getter
    def slots(self) -> Optional[str]:
        """
        The keyspace for this node group.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class ParameterGroupParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the ElastiCache parameter.
        :param str value: The value of the ElastiCache parameter.
        """
        ParameterGroupParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ElastiCache parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the ElastiCache parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ReplicationGroupLogDeliveryConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "logFormat":
            suggest = "log_format"
        elif key == "logType":
            suggest = "log_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationGroupLogDeliveryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationGroupLogDeliveryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationGroupLogDeliveryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 destination_type: str,
                 log_format: str,
                 log_type: str):
        """
        :param str destination: Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource.
        :param str destination_type: For CloudWatch Logs use `cloudwatch-logs` or for Kinesis Data Firehose use `kinesis-firehose`.
        :param str log_format: Valid values are `json` or `text`
        :param str log_type: Valid values are  `slow-log` or `engine-log`. Max 1 of each.
        """
        ReplicationGroupLogDeliveryConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            destination_type=destination_type,
            log_format=log_format,
            log_type=log_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             destination_type: Optional[str] = None,
             log_format: Optional[str] = None,
             log_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination is None:
            raise TypeError("Missing 'destination' argument")
        if destination_type is None and 'destinationType' in kwargs:
            destination_type = kwargs['destinationType']
        if destination_type is None:
            raise TypeError("Missing 'destination_type' argument")
        if log_format is None and 'logFormat' in kwargs:
            log_format = kwargs['logFormat']
        if log_format is None:
            raise TypeError("Missing 'log_format' argument")
        if log_type is None and 'logType' in kwargs:
            log_type = kwargs['logType']
        if log_type is None:
            raise TypeError("Missing 'log_type' argument")

        _setter("destination", destination)
        _setter("destination_type", destination_type)
        _setter("log_format", log_format)
        _setter("log_type", log_type)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        """
        For CloudWatch Logs use `cloudwatch-logs` or for Kinesis Data Firehose use `kinesis-firehose`.
        """
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> str:
        """
        Valid values are `json` or `text`
        """
        return pulumi.get(self, "log_format")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        """
        Valid values are  `slow-log` or `engine-log`. Max 1 of each.
        """
        return pulumi.get(self, "log_type")


@pulumi.output_type
class UserAuthenticationMode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordCount":
            suggest = "password_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAuthenticationMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAuthenticationMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAuthenticationMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 password_count: Optional[int] = None,
                 passwords: Optional[Sequence[str]] = None):
        """
        :param str type: Specifies the authentication type. Possible options are: `password`, `no-password-required` or `iam`.
        :param Sequence[str] passwords: Specifies the passwords to use for authentication if `type` is set to `password`.
        """
        UserAuthenticationMode._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            password_count=password_count,
            passwords=passwords,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             password_count: Optional[int] = None,
             passwords: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if password_count is None and 'passwordCount' in kwargs:
            password_count = kwargs['passwordCount']

        _setter("type", type)
        if password_count is not None:
            _setter("password_count", password_count)
        if passwords is not None:
            _setter("passwords", passwords)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the authentication type. Possible options are: `password`, `no-password-required` or `iam`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="passwordCount")
    def password_count(self) -> Optional[int]:
        return pulumi.get(self, "password_count")

    @property
    @pulumi.getter
    def passwords(self) -> Optional[Sequence[str]]:
        """
        Specifies the passwords to use for authentication if `type` is set to `password`.
        """
        return pulumi.get(self, "passwords")


@pulumi.output_type
class GetClusterCacheNodeResult(dict):
    def __init__(__self__, *,
                 address: str,
                 availability_zone: str,
                 id: str,
                 outpost_arn: str,
                 port: int):
        """
        :param str availability_zone: Availability Zone for the cache cluster.
        :param int port: The port number on which each of the cache nodes will
               accept connections.
        """
        GetClusterCacheNodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            availability_zone=availability_zone,
            id=id,
            outpost_arn=outpost_arn,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: Optional[str] = None,
             availability_zone: Optional[str] = None,
             id: Optional[str] = None,
             outpost_arn: Optional[str] = None,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if address is None:
            raise TypeError("Missing 'address' argument")
        if availability_zone is None and 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if availability_zone is None:
            raise TypeError("Missing 'availability_zone' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if outpost_arn is None and 'outpostArn' in kwargs:
            outpost_arn = kwargs['outpostArn']
        if outpost_arn is None:
            raise TypeError("Missing 'outpost_arn' argument")
        if port is None:
            raise TypeError("Missing 'port' argument")

        _setter("address", address)
        _setter("availability_zone", availability_zone)
        _setter("id", id)
        _setter("outpost_arn", outpost_arn)
        _setter("port", port)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        Availability Zone for the cache cluster.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outpostArn")
    def outpost_arn(self) -> str:
        return pulumi.get(self, "outpost_arn")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number on which each of the cache nodes will
        accept connections.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetClusterLogDeliveryConfigurationResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 destination_type: str,
                 log_format: str,
                 log_type: str):
        GetClusterLogDeliveryConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            destination_type=destination_type,
            log_format=log_format,
            log_type=log_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             destination_type: Optional[str] = None,
             log_format: Optional[str] = None,
             log_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination is None:
            raise TypeError("Missing 'destination' argument")
        if destination_type is None and 'destinationType' in kwargs:
            destination_type = kwargs['destinationType']
        if destination_type is None:
            raise TypeError("Missing 'destination_type' argument")
        if log_format is None and 'logFormat' in kwargs:
            log_format = kwargs['logFormat']
        if log_format is None:
            raise TypeError("Missing 'log_format' argument")
        if log_type is None and 'logType' in kwargs:
            log_type = kwargs['logType']
        if log_type is None:
            raise TypeError("Missing 'log_type' argument")

        _setter("destination", destination)
        _setter("destination_type", destination_type)
        _setter("log_format", log_format)
        _setter("log_type", log_type)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> str:
        return pulumi.get(self, "log_format")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        return pulumi.get(self, "log_type")


@pulumi.output_type
class GetReplicationGroupLogDeliveryConfigurationResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 destination_type: str,
                 log_format: str,
                 log_type: str):
        GetReplicationGroupLogDeliveryConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            destination_type=destination_type,
            log_format=log_format,
            log_type=log_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[str] = None,
             destination_type: Optional[str] = None,
             log_format: Optional[str] = None,
             log_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination is None:
            raise TypeError("Missing 'destination' argument")
        if destination_type is None and 'destinationType' in kwargs:
            destination_type = kwargs['destinationType']
        if destination_type is None:
            raise TypeError("Missing 'destination_type' argument")
        if log_format is None and 'logFormat' in kwargs:
            log_format = kwargs['logFormat']
        if log_format is None:
            raise TypeError("Missing 'log_format' argument")
        if log_type is None and 'logType' in kwargs:
            log_type = kwargs['logType']
        if log_type is None:
            raise TypeError("Missing 'log_type' argument")

        _setter("destination", destination)
        _setter("destination_type", destination_type)
        _setter("log_format", log_format)
        _setter("log_type", log_type)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> str:
        return pulumi.get(self, "log_format")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        return pulumi.get(self, "log_type")


@pulumi.output_type
class GetUserAuthenticationModeResult(dict):
    def __init__(__self__, *,
                 password_count: Optional[int] = None,
                 type: Optional[str] = None):
        GetUserAuthenticationModeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password_count=password_count,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password_count: Optional[int] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if password_count is None and 'passwordCount' in kwargs:
            password_count = kwargs['passwordCount']

        if password_count is not None:
            _setter("password_count", password_count)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="passwordCount")
    def password_count(self) -> Optional[int]:
        return pulumi.get(self, "password_count")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


