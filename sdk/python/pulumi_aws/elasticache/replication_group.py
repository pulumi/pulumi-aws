# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class ReplicationGroup(pulumi.CustomResource):
    """
    Provides an ElastiCache Replication Group resource.
    For working with Memcached or single primary Redis instances (Cluster Mode Disabled), see the
    [`aws_elasticache_cluster` resource](https://www.terraform.io/docs/providers/aws/r/elasticache_cluster.html).
    """
    def __init__(__self__, __name__, __opts__=None, apply_immediately=None, at_rest_encryption_enabled=None, auth_token=None, auto_minor_version_upgrade=None, automatic_failover_enabled=None, availability_zones=None, cluster_mode=None, engine=None, engine_version=None, maintenance_window=None, node_type=None, notification_topic_arn=None, number_cache_clusters=None, parameter_group_name=None, port=None, replication_group_description=None, replication_group_id=None, security_group_ids=None, security_group_names=None, snapshot_arns=None, snapshot_name=None, snapshot_retention_limit=None, snapshot_window=None, subnet_group_name=None, tags=None, transit_encryption_enabled=None):
        """Create a ReplicationGroup resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['applyImmediately'] = apply_immediately

        __props__['atRestEncryptionEnabled'] = at_rest_encryption_enabled

        __props__['authToken'] = auth_token

        __props__['autoMinorVersionUpgrade'] = auto_minor_version_upgrade

        __props__['automaticFailoverEnabled'] = automatic_failover_enabled

        __props__['availabilityZones'] = availability_zones

        __props__['clusterMode'] = cluster_mode

        __props__['engine'] = engine

        __props__['engineVersion'] = engine_version

        __props__['maintenanceWindow'] = maintenance_window

        __props__['nodeType'] = node_type

        __props__['notificationTopicArn'] = notification_topic_arn

        __props__['numberCacheClusters'] = number_cache_clusters

        __props__['parameterGroupName'] = parameter_group_name

        __props__['port'] = port

        if not replication_group_description:
            raise TypeError('Missing required property replication_group_description')
        __props__['replicationGroupDescription'] = replication_group_description

        if not replication_group_id:
            raise TypeError('Missing required property replication_group_id')
        __props__['replicationGroupId'] = replication_group_id

        __props__['securityGroupIds'] = security_group_ids

        __props__['securityGroupNames'] = security_group_names

        __props__['snapshotArns'] = snapshot_arns

        __props__['snapshotName'] = snapshot_name

        __props__['snapshotRetentionLimit'] = snapshot_retention_limit

        __props__['snapshotWindow'] = snapshot_window

        __props__['subnetGroupName'] = subnet_group_name

        __props__['tags'] = tags

        __props__['transitEncryptionEnabled'] = transit_encryption_enabled

        __props__['configuration_endpoint_address'] = None
        __props__['member_clusters'] = None
        __props__['primary_endpoint_address'] = None

        super(ReplicationGroup, __self__).__init__(
            'aws:elasticache/replicationGroup:ReplicationGroup',
            __name__,
            __props__,
            __opts__)

