# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GlobalReplicationGroupArgs', 'GlobalReplicationGroup']

@pulumi.input_type
class GlobalReplicationGroupArgs:
    def __init__(__self__, *,
                 global_replication_group_id_suffix: pulumi.Input[str],
                 primary_replication_group_id: pulumi.Input[str],
                 automatic_failover_enabled: Optional[pulumi.Input[bool]] = None,
                 cache_node_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 global_replication_group_description: Optional[pulumi.Input[str]] = None,
                 num_node_groups: Optional[pulumi.Input[int]] = None,
                 parameter_group_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GlobalReplicationGroup resource.
        """
        pulumi.set(__self__, "global_replication_group_id_suffix", global_replication_group_id_suffix)
        pulumi.set(__self__, "primary_replication_group_id", primary_replication_group_id)
        if automatic_failover_enabled is not None:
            pulumi.set(__self__, "automatic_failover_enabled", automatic_failover_enabled)
        if cache_node_type is not None:
            pulumi.set(__self__, "cache_node_type", cache_node_type)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if global_replication_group_description is not None:
            pulumi.set(__self__, "global_replication_group_description", global_replication_group_description)
        if num_node_groups is not None:
            pulumi.set(__self__, "num_node_groups", num_node_groups)
        if parameter_group_name is not None:
            pulumi.set(__self__, "parameter_group_name", parameter_group_name)

    @property
    @pulumi.getter(name="globalReplicationGroupIdSuffix")
    def global_replication_group_id_suffix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "global_replication_group_id_suffix")

    @global_replication_group_id_suffix.setter
    def global_replication_group_id_suffix(self, value: pulumi.Input[str]):
        pulumi.set(self, "global_replication_group_id_suffix", value)

    @property
    @pulumi.getter(name="primaryReplicationGroupId")
    def primary_replication_group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "primary_replication_group_id")

    @primary_replication_group_id.setter
    def primary_replication_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_replication_group_id", value)

    @property
    @pulumi.getter(name="automaticFailoverEnabled")
    def automatic_failover_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "automatic_failover_enabled")

    @automatic_failover_enabled.setter
    def automatic_failover_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_failover_enabled", value)

    @property
    @pulumi.getter(name="cacheNodeType")
    def cache_node_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_node_type")

    @cache_node_type.setter
    def cache_node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_node_type", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="globalReplicationGroupDescription")
    def global_replication_group_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_replication_group_description")

    @global_replication_group_description.setter
    def global_replication_group_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_replication_group_description", value)

    @property
    @pulumi.getter(name="numNodeGroups")
    def num_node_groups(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "num_node_groups")

    @num_node_groups.setter
    def num_node_groups(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_node_groups", value)

    @property
    @pulumi.getter(name="parameterGroupName")
    def parameter_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_group_name")

    @parameter_group_name.setter
    def parameter_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_group_name", value)


@pulumi.input_type
class _GlobalReplicationGroupState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 at_rest_encryption_enabled: Optional[pulumi.Input[bool]] = None,
                 auth_token_enabled: Optional[pulumi.Input[bool]] = None,
                 automatic_failover_enabled: Optional[pulumi.Input[bool]] = None,
                 cache_node_type: Optional[pulumi.Input[str]] = None,
                 cluster_enabled: Optional[pulumi.Input[bool]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 engine_version_actual: Optional[pulumi.Input[str]] = None,
                 global_node_groups: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalReplicationGroupGlobalNodeGroupArgs']]]] = None,
                 global_replication_group_description: Optional[pulumi.Input[str]] = None,
                 global_replication_group_id: Optional[pulumi.Input[str]] = None,
                 global_replication_group_id_suffix: Optional[pulumi.Input[str]] = None,
                 num_node_groups: Optional[pulumi.Input[int]] = None,
                 parameter_group_name: Optional[pulumi.Input[str]] = None,
                 primary_replication_group_id: Optional[pulumi.Input[str]] = None,
                 transit_encryption_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering GlobalReplicationGroup resources.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if at_rest_encryption_enabled is not None:
            pulumi.set(__self__, "at_rest_encryption_enabled", at_rest_encryption_enabled)
        if auth_token_enabled is not None:
            pulumi.set(__self__, "auth_token_enabled", auth_token_enabled)
        if automatic_failover_enabled is not None:
            pulumi.set(__self__, "automatic_failover_enabled", automatic_failover_enabled)
        if cache_node_type is not None:
            pulumi.set(__self__, "cache_node_type", cache_node_type)
        if cluster_enabled is not None:
            pulumi.set(__self__, "cluster_enabled", cluster_enabled)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if engine_version_actual is not None:
            pulumi.set(__self__, "engine_version_actual", engine_version_actual)
        if global_node_groups is not None:
            pulumi.set(__self__, "global_node_groups", global_node_groups)
        if global_replication_group_description is not None:
            pulumi.set(__self__, "global_replication_group_description", global_replication_group_description)
        if global_replication_group_id is not None:
            pulumi.set(__self__, "global_replication_group_id", global_replication_group_id)
        if global_replication_group_id_suffix is not None:
            pulumi.set(__self__, "global_replication_group_id_suffix", global_replication_group_id_suffix)
        if num_node_groups is not None:
            pulumi.set(__self__, "num_node_groups", num_node_groups)
        if parameter_group_name is not None:
            pulumi.set(__self__, "parameter_group_name", parameter_group_name)
        if primary_replication_group_id is not None:
            pulumi.set(__self__, "primary_replication_group_id", primary_replication_group_id)
        if transit_encryption_enabled is not None:
            pulumi.set(__self__, "transit_encryption_enabled", transit_encryption_enabled)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="atRestEncryptionEnabled")
    def at_rest_encryption_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "at_rest_encryption_enabled")

    @at_rest_encryption_enabled.setter
    def at_rest_encryption_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "at_rest_encryption_enabled", value)

    @property
    @pulumi.getter(name="authTokenEnabled")
    def auth_token_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auth_token_enabled")

    @auth_token_enabled.setter
    def auth_token_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auth_token_enabled", value)

    @property
    @pulumi.getter(name="automaticFailoverEnabled")
    def automatic_failover_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "automatic_failover_enabled")

    @automatic_failover_enabled.setter
    def automatic_failover_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_failover_enabled", value)

    @property
    @pulumi.getter(name="cacheNodeType")
    def cache_node_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_node_type")

    @cache_node_type.setter
    def cache_node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_node_type", value)

    @property
    @pulumi.getter(name="clusterEnabled")
    def cluster_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cluster_enabled")

    @cluster_enabled.setter
    def cluster_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_enabled", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="engineVersionActual")
    def engine_version_actual(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine_version_actual")

    @engine_version_actual.setter
    def engine_version_actual(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version_actual", value)

    @property
    @pulumi.getter(name="globalNodeGroups")
    def global_node_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalReplicationGroupGlobalNodeGroupArgs']]]]:
        return pulumi.get(self, "global_node_groups")

    @global_node_groups.setter
    def global_node_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalReplicationGroupGlobalNodeGroupArgs']]]]):
        pulumi.set(self, "global_node_groups", value)

    @property
    @pulumi.getter(name="globalReplicationGroupDescription")
    def global_replication_group_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_replication_group_description")

    @global_replication_group_description.setter
    def global_replication_group_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_replication_group_description", value)

    @property
    @pulumi.getter(name="globalReplicationGroupId")
    def global_replication_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_replication_group_id")

    @global_replication_group_id.setter
    def global_replication_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_replication_group_id", value)

    @property
    @pulumi.getter(name="globalReplicationGroupIdSuffix")
    def global_replication_group_id_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_replication_group_id_suffix")

    @global_replication_group_id_suffix.setter
    def global_replication_group_id_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_replication_group_id_suffix", value)

    @property
    @pulumi.getter(name="numNodeGroups")
    def num_node_groups(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "num_node_groups")

    @num_node_groups.setter
    def num_node_groups(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_node_groups", value)

    @property
    @pulumi.getter(name="parameterGroupName")
    def parameter_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_group_name")

    @parameter_group_name.setter
    def parameter_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_group_name", value)

    @property
    @pulumi.getter(name="primaryReplicationGroupId")
    def primary_replication_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_replication_group_id")

    @primary_replication_group_id.setter
    def primary_replication_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_replication_group_id", value)

    @property
    @pulumi.getter(name="transitEncryptionEnabled")
    def transit_encryption_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "transit_encryption_enabled")

    @transit_encryption_enabled.setter
    def transit_encryption_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "transit_encryption_enabled", value)


class GlobalReplicationGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automatic_failover_enabled: Optional[pulumi.Input[bool]] = None,
                 cache_node_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 global_replication_group_description: Optional[pulumi.Input[str]] = None,
                 global_replication_group_id_suffix: Optional[pulumi.Input[str]] = None,
                 num_node_groups: Optional[pulumi.Input[int]] = None,
                 parameter_group_name: Optional[pulumi.Input[str]] = None,
                 primary_replication_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a GlobalReplicationGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GlobalReplicationGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a GlobalReplicationGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GlobalReplicationGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalReplicationGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automatic_failover_enabled: Optional[pulumi.Input[bool]] = None,
                 cache_node_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 global_replication_group_description: Optional[pulumi.Input[str]] = None,
                 global_replication_group_id_suffix: Optional[pulumi.Input[str]] = None,
                 num_node_groups: Optional[pulumi.Input[int]] = None,
                 parameter_group_name: Optional[pulumi.Input[str]] = None,
                 primary_replication_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalReplicationGroupArgs.__new__(GlobalReplicationGroupArgs)

            __props__.__dict__["automatic_failover_enabled"] = automatic_failover_enabled
            __props__.__dict__["cache_node_type"] = cache_node_type
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["global_replication_group_description"] = global_replication_group_description
            if global_replication_group_id_suffix is None and not opts.urn:
                raise TypeError("Missing required property 'global_replication_group_id_suffix'")
            __props__.__dict__["global_replication_group_id_suffix"] = global_replication_group_id_suffix
            __props__.__dict__["num_node_groups"] = num_node_groups
            __props__.__dict__["parameter_group_name"] = parameter_group_name
            if primary_replication_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'primary_replication_group_id'")
            __props__.__dict__["primary_replication_group_id"] = primary_replication_group_id
            __props__.__dict__["arn"] = None
            __props__.__dict__["at_rest_encryption_enabled"] = None
            __props__.__dict__["auth_token_enabled"] = None
            __props__.__dict__["cluster_enabled"] = None
            __props__.__dict__["engine"] = None
            __props__.__dict__["engine_version_actual"] = None
            __props__.__dict__["global_node_groups"] = None
            __props__.__dict__["global_replication_group_id"] = None
            __props__.__dict__["transit_encryption_enabled"] = None
        super(GlobalReplicationGroup, __self__).__init__(
            'aws:elasticache/globalReplicationGroup:GlobalReplicationGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            at_rest_encryption_enabled: Optional[pulumi.Input[bool]] = None,
            auth_token_enabled: Optional[pulumi.Input[bool]] = None,
            automatic_failover_enabled: Optional[pulumi.Input[bool]] = None,
            cache_node_type: Optional[pulumi.Input[str]] = None,
            cluster_enabled: Optional[pulumi.Input[bool]] = None,
            engine: Optional[pulumi.Input[str]] = None,
            engine_version: Optional[pulumi.Input[str]] = None,
            engine_version_actual: Optional[pulumi.Input[str]] = None,
            global_node_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalReplicationGroupGlobalNodeGroupArgs']]]]] = None,
            global_replication_group_description: Optional[pulumi.Input[str]] = None,
            global_replication_group_id: Optional[pulumi.Input[str]] = None,
            global_replication_group_id_suffix: Optional[pulumi.Input[str]] = None,
            num_node_groups: Optional[pulumi.Input[int]] = None,
            parameter_group_name: Optional[pulumi.Input[str]] = None,
            primary_replication_group_id: Optional[pulumi.Input[str]] = None,
            transit_encryption_enabled: Optional[pulumi.Input[bool]] = None) -> 'GlobalReplicationGroup':
        """
        Get an existing GlobalReplicationGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalReplicationGroupState.__new__(_GlobalReplicationGroupState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["at_rest_encryption_enabled"] = at_rest_encryption_enabled
        __props__.__dict__["auth_token_enabled"] = auth_token_enabled
        __props__.__dict__["automatic_failover_enabled"] = automatic_failover_enabled
        __props__.__dict__["cache_node_type"] = cache_node_type
        __props__.__dict__["cluster_enabled"] = cluster_enabled
        __props__.__dict__["engine"] = engine
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["engine_version_actual"] = engine_version_actual
        __props__.__dict__["global_node_groups"] = global_node_groups
        __props__.__dict__["global_replication_group_description"] = global_replication_group_description
        __props__.__dict__["global_replication_group_id"] = global_replication_group_id
        __props__.__dict__["global_replication_group_id_suffix"] = global_replication_group_id_suffix
        __props__.__dict__["num_node_groups"] = num_node_groups
        __props__.__dict__["parameter_group_name"] = parameter_group_name
        __props__.__dict__["primary_replication_group_id"] = primary_replication_group_id
        __props__.__dict__["transit_encryption_enabled"] = transit_encryption_enabled
        return GlobalReplicationGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="atRestEncryptionEnabled")
    def at_rest_encryption_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "at_rest_encryption_enabled")

    @property
    @pulumi.getter(name="authTokenEnabled")
    def auth_token_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "auth_token_enabled")

    @property
    @pulumi.getter(name="automaticFailoverEnabled")
    def automatic_failover_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "automatic_failover_enabled")

    @property
    @pulumi.getter(name="cacheNodeType")
    def cache_node_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cache_node_type")

    @property
    @pulumi.getter(name="clusterEnabled")
    def cluster_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "cluster_enabled")

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Output[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="engineVersionActual")
    def engine_version_actual(self) -> pulumi.Output[str]:
        return pulumi.get(self, "engine_version_actual")

    @property
    @pulumi.getter(name="globalNodeGroups")
    def global_node_groups(self) -> pulumi.Output[Sequence['outputs.GlobalReplicationGroupGlobalNodeGroup']]:
        return pulumi.get(self, "global_node_groups")

    @property
    @pulumi.getter(name="globalReplicationGroupDescription")
    def global_replication_group_description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "global_replication_group_description")

    @property
    @pulumi.getter(name="globalReplicationGroupId")
    def global_replication_group_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "global_replication_group_id")

    @property
    @pulumi.getter(name="globalReplicationGroupIdSuffix")
    def global_replication_group_id_suffix(self) -> pulumi.Output[str]:
        return pulumi.get(self, "global_replication_group_id_suffix")

    @property
    @pulumi.getter(name="numNodeGroups")
    def num_node_groups(self) -> pulumi.Output[int]:
        return pulumi.get(self, "num_node_groups")

    @property
    @pulumi.getter(name="parameterGroupName")
    def parameter_group_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "parameter_group_name")

    @property
    @pulumi.getter(name="primaryReplicationGroupId")
    def primary_replication_group_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "primary_replication_group_id")

    @property
    @pulumi.getter(name="transitEncryptionEnabled")
    def transit_encryption_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "transit_encryption_enabled")

