# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class SecurityGroup(pulumi.CustomResource):
    """
    Provides an ElastiCache Security Group to control access to one or more cache
    clusters.
    
    ~> **NOTE:** ElastiCache Security Groups are for use only when working with an
    ElastiCache cluster **outside** of a VPC. If you are using a VPC, see the
    [ElastiCache Subnet Group resource](elasticache_subnet_group.html).
    """
    def __init__(__self__, __name__, __opts__=None, description=None, name=None, security_group_names=None):
        """Create a SecurityGroup resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        description for the cache security group. Defaults to "Managed by Terraform".
        """
        __props__['description'] = description

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Name for the cache security group. This value is stored as a lowercase string.
        """
        __props__['name'] = name

        if not security_group_names:
            raise TypeError('Missing required property security_group_names')
        elif not isinstance(security_group_names, list):
            raise TypeError('Expected property security_group_names to be a list')
        __self__.security_group_names = security_group_names
        """
        List of EC2 security group names to be
        authorized for ingress to the cache security group
        """
        __props__['securityGroupNames'] = security_group_names

        super(SecurityGroup, __self__).__init__(
            'aws:elasticache/securityGroup:SecurityGroup',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'description' in outs:
            self.description = outs['description']
        if 'name' in outs:
            self.name = outs['name']
        if 'securityGroupNames' in outs:
            self.security_group_names = outs['securityGroupNames']
