# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'WorkspaceNetworkAccessControl',
    'WorkspaceVpcConfiguration',
]

@pulumi.output_type
class WorkspaceNetworkAccessControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixListIds":
            suggest = "prefix_list_ids"
        elif key == "vpceIds":
            suggest = "vpce_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceNetworkAccessControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceNetworkAccessControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceNetworkAccessControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefix_list_ids: Sequence[str],
                 vpce_ids: Sequence[str]):
        """
        :param Sequence[str] prefix_list_ids: An array of prefix list IDs.
        :param Sequence[str] vpce_ids: An array of Amazon VPC endpoint IDs for the workspace. The only VPC endpoints that can be specified here are interface VPC endpoints for Grafana workspaces (using the com.amazonaws.[region].grafana-workspace service endpoint). Other VPC endpoints will be ignored.
        """
        WorkspaceNetworkAccessControl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prefix_list_ids=prefix_list_ids,
            vpce_ids=vpce_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prefix_list_ids: Optional[Sequence[str]] = None,
             vpce_ids: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if prefix_list_ids is None and 'prefixListIds' in kwargs:
            prefix_list_ids = kwargs['prefixListIds']
        if prefix_list_ids is None:
            raise TypeError("Missing 'prefix_list_ids' argument")
        if vpce_ids is None and 'vpceIds' in kwargs:
            vpce_ids = kwargs['vpceIds']
        if vpce_ids is None:
            raise TypeError("Missing 'vpce_ids' argument")

        _setter("prefix_list_ids", prefix_list_ids)
        _setter("vpce_ids", vpce_ids)

    @property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Sequence[str]:
        """
        An array of prefix list IDs.
        """
        return pulumi.get(self, "prefix_list_ids")

    @property
    @pulumi.getter(name="vpceIds")
    def vpce_ids(self) -> Sequence[str]:
        """
        An array of Amazon VPC endpoint IDs for the workspace. The only VPC endpoints that can be specified here are interface VPC endpoints for Grafana workspaces (using the com.amazonaws.[region].grafana-workspace service endpoint). Other VPC endpoints will be ignored.
        """
        return pulumi.get(self, "vpce_ids")


@pulumi.output_type
class WorkspaceVpcConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "subnetIds":
            suggest = "subnet_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceVpcConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceVpcConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceVpcConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnet_ids: Sequence[str]):
        """
        :param Sequence[str] security_group_ids: The list of Amazon EC2 security group IDs attached to the Amazon VPC for your Grafana workspace to connect.
        :param Sequence[str] subnet_ids: The list of Amazon EC2 subnet IDs created in the Amazon VPC for your Grafana workspace to connect.
        """
        WorkspaceVpcConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            security_group_ids=security_group_ids,
            subnet_ids=subnet_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             security_group_ids: Optional[Sequence[str]] = None,
             subnet_ids: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if security_group_ids is None and 'securityGroupIds' in kwargs:
            security_group_ids = kwargs['securityGroupIds']
        if security_group_ids is None:
            raise TypeError("Missing 'security_group_ids' argument")
        if subnet_ids is None and 'subnetIds' in kwargs:
            subnet_ids = kwargs['subnetIds']
        if subnet_ids is None:
            raise TypeError("Missing 'subnet_ids' argument")

        _setter("security_group_ids", security_group_ids)
        _setter("subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The list of Amazon EC2 security group IDs attached to the Amazon VPC for your Grafana workspace to connect.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The list of Amazon EC2 subnet IDs created in the Amazon VPC for your Grafana workspace to connect.
        """
        return pulumi.get(self, "subnet_ids")


