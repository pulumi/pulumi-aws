# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['MacsecKeyAssociationArgs', 'MacsecKeyAssociation']

@pulumi.input_type
class MacsecKeyAssociationArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[str],
                 cak: Optional[pulumi.Input[str]] = None,
                 ckn: Optional[pulumi.Input[str]] = None,
                 secret_arn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MacsecKeyAssociation resource.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        if cak is not None:
            pulumi.set(__self__, "cak", cak)
        if ckn is not None:
            pulumi.set(__self__, "ckn", ckn)
        if secret_arn is not None:
            pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter
    def cak(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cak")

    @cak.setter
    def cak(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cak", value)

    @property
    @pulumi.getter
    def ckn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ckn")

    @ckn.setter
    def ckn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ckn", value)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_arn")

    @secret_arn.setter
    def secret_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_arn", value)


@pulumi.input_type
class _MacsecKeyAssociationState:
    def __init__(__self__, *,
                 cak: Optional[pulumi.Input[str]] = None,
                 ckn: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 secret_arn: Optional[pulumi.Input[str]] = None,
                 start_on: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MacsecKeyAssociation resources.
        """
        if cak is not None:
            pulumi.set(__self__, "cak", cak)
        if ckn is not None:
            pulumi.set(__self__, "ckn", ckn)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if secret_arn is not None:
            pulumi.set(__self__, "secret_arn", secret_arn)
        if start_on is not None:
            pulumi.set(__self__, "start_on", start_on)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def cak(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cak")

    @cak.setter
    def cak(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cak", value)

    @property
    @pulumi.getter
    def ckn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ckn")

    @ckn.setter
    def ckn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ckn", value)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_arn")

    @secret_arn.setter
    def secret_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_arn", value)

    @property
    @pulumi.getter(name="startOn")
    def start_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_on")

    @start_on.setter
    def start_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_on", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


class MacsecKeyAssociation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cak: Optional[pulumi.Input[str]] = None,
                 ckn: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 secret_arn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MacsecKeyAssociation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MacsecKeyAssociationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MacsecKeyAssociation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MacsecKeyAssociationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MacsecKeyAssociationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cak: Optional[pulumi.Input[str]] = None,
                 ckn: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 secret_arn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MacsecKeyAssociationArgs.__new__(MacsecKeyAssociationArgs)

            __props__.__dict__["cak"] = cak
            __props__.__dict__["ckn"] = ckn
            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            __props__.__dict__["secret_arn"] = secret_arn
            __props__.__dict__["start_on"] = None
            __props__.__dict__["state"] = None
        super(MacsecKeyAssociation, __self__).__init__(
            'aws:directconnect/macsecKeyAssociation:MacsecKeyAssociation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cak: Optional[pulumi.Input[str]] = None,
            ckn: Optional[pulumi.Input[str]] = None,
            connection_id: Optional[pulumi.Input[str]] = None,
            secret_arn: Optional[pulumi.Input[str]] = None,
            start_on: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None) -> 'MacsecKeyAssociation':
        """
        Get an existing MacsecKeyAssociation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MacsecKeyAssociationState.__new__(_MacsecKeyAssociationState)

        __props__.__dict__["cak"] = cak
        __props__.__dict__["ckn"] = ckn
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["secret_arn"] = secret_arn
        __props__.__dict__["start_on"] = start_on
        __props__.__dict__["state"] = state
        return MacsecKeyAssociation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cak(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cak")

    @property
    @pulumi.getter
    def ckn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ckn")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "secret_arn")

    @property
    @pulumi.getter(name="startOn")
    def start_on(self) -> pulumi.Output[str]:
        return pulumi.get(self, "start_on")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

