# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Cluster(pulumi.CustomResource):
    """
    Provides a DAX Cluster resource.
    """
    def __init__(__self__, __name__, __opts__=None, availability_zones=None, cluster_name=None, description=None, iam_role_arn=None, maintenance_window=None, node_type=None, notification_topic_arn=None, parameter_group_name=None, replication_factor=None, security_group_ids=None, server_side_encryption=None, subnet_group_name=None, tags=None):
        """Create a Cluster resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['availabilityZones'] = availability_zones

        if not cluster_name:
            raise TypeError('Missing required property cluster_name')
        __props__['clusterName'] = cluster_name

        __props__['description'] = description

        if not iam_role_arn:
            raise TypeError('Missing required property iam_role_arn')
        __props__['iamRoleArn'] = iam_role_arn

        __props__['maintenanceWindow'] = maintenance_window

        if not node_type:
            raise TypeError('Missing required property node_type')
        __props__['nodeType'] = node_type

        __props__['notificationTopicArn'] = notification_topic_arn

        __props__['parameterGroupName'] = parameter_group_name

        if not replication_factor:
            raise TypeError('Missing required property replication_factor')
        __props__['replicationFactor'] = replication_factor

        __props__['securityGroupIds'] = security_group_ids

        __props__['serverSideEncryption'] = server_side_encryption

        __props__['subnetGroupName'] = subnet_group_name

        __props__['tags'] = tags

        __props__['arn'] = None
        __props__['cluster_address'] = None
        __props__['configuration_endpoint'] = None
        __props__['nodes'] = None
        __props__['port'] = None

        super(Cluster, __self__).__init__(
            'aws:dax/cluster:Cluster',
            __name__,
            __props__,
            __opts__)

