# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetResourcesTagFilterArgs',
    'GetResourcesTagFilterArgsDict',
]

MYPY = False

if not MYPY:
    class GetResourcesTagFilterArgsDict(TypedDict):
        key: _builtins.str
        """
        One part of a key-value pair that makes up a tag.
        """
        values: NotRequired[Sequence[_builtins.str]]
        """
        Optional part of a key-value pair that make up a tag.
        """
elif False:
    GetResourcesTagFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetResourcesTagFilterArgs:
    def __init__(__self__, *,
                 key: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str key: One part of a key-value pair that makes up a tag.
        :param Sequence[_builtins.str] values: Optional part of a key-value pair that make up a tag.
        """
        pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        One part of a key-value pair that makes up a tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: _builtins.str):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Optional part of a key-value pair that make up a tag.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[_builtins.str]]):
        pulumi.set(self, "values", value)


