# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourcesResourceTagMappingListResult',
    'GetResourcesResourceTagMappingListComplianceDetailResult',
    'GetResourcesTagFilterResult',
]

@pulumi.output_type
class GetResourcesResourceTagMappingListResult(dict):
    def __init__(__self__, *,
                 compliance_details: Sequence['outputs.GetResourcesResourceTagMappingListComplianceDetailResult'],
                 resource_arn: str,
                 tags: Mapping[str, str]):
        """
        :param Sequence['GetResourcesResourceTagMappingListComplianceDetailArgs'] compliance_details: List of objects with information that shows whether a resource is compliant with the effective tag policy, including details on any noncompliant tag keys.
        :param str resource_arn: ARN of the resource.
        :param Mapping[str, str] tags: Map of tags assigned to the resource.
        """
        GetResourcesResourceTagMappingListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compliance_details=compliance_details,
            resource_arn=resource_arn,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compliance_details: Optional[Sequence['outputs.GetResourcesResourceTagMappingListComplianceDetailResult']] = None,
             resource_arn: Optional[str] = None,
             tags: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if compliance_details is None and 'complianceDetails' in kwargs:
            compliance_details = kwargs['complianceDetails']
        if compliance_details is None:
            raise TypeError("Missing 'compliance_details' argument")
        if resource_arn is None and 'resourceArn' in kwargs:
            resource_arn = kwargs['resourceArn']
        if resource_arn is None:
            raise TypeError("Missing 'resource_arn' argument")
        if tags is None:
            raise TypeError("Missing 'tags' argument")

        _setter("compliance_details", compliance_details)
        _setter("resource_arn", resource_arn)
        _setter("tags", tags)

    @property
    @pulumi.getter(name="complianceDetails")
    def compliance_details(self) -> Sequence['outputs.GetResourcesResourceTagMappingListComplianceDetailResult']:
        """
        List of objects with information that shows whether a resource is compliant with the effective tag policy, including details on any noncompliant tag keys.
        """
        return pulumi.get(self, "compliance_details")

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> str:
        """
        ARN of the resource.
        """
        return pulumi.get(self, "resource_arn")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        Map of tags assigned to the resource.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetResourcesResourceTagMappingListComplianceDetailResult(dict):
    def __init__(__self__, *,
                 compliance_status: bool,
                 keys_with_noncompliant_values: Sequence[str],
                 non_compliant_keys: Sequence[str]):
        """
        :param bool compliance_status: Whether the resource is compliant.
               * `keys_with_noncompliant_values ` - Set of tag keys with non-compliant tag values.
               * `non_compliant_keys ` - Set of non-compliant tag keys.
        """
        GetResourcesResourceTagMappingListComplianceDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compliance_status=compliance_status,
            keys_with_noncompliant_values=keys_with_noncompliant_values,
            non_compliant_keys=non_compliant_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compliance_status: Optional[bool] = None,
             keys_with_noncompliant_values: Optional[Sequence[str]] = None,
             non_compliant_keys: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if compliance_status is None and 'complianceStatus' in kwargs:
            compliance_status = kwargs['complianceStatus']
        if compliance_status is None:
            raise TypeError("Missing 'compliance_status' argument")
        if keys_with_noncompliant_values is None and 'keysWithNoncompliantValues' in kwargs:
            keys_with_noncompliant_values = kwargs['keysWithNoncompliantValues']
        if keys_with_noncompliant_values is None:
            raise TypeError("Missing 'keys_with_noncompliant_values' argument")
        if non_compliant_keys is None and 'nonCompliantKeys' in kwargs:
            non_compliant_keys = kwargs['nonCompliantKeys']
        if non_compliant_keys is None:
            raise TypeError("Missing 'non_compliant_keys' argument")

        _setter("compliance_status", compliance_status)
        _setter("keys_with_noncompliant_values", keys_with_noncompliant_values)
        _setter("non_compliant_keys", non_compliant_keys)

    @property
    @pulumi.getter(name="complianceStatus")
    def compliance_status(self) -> bool:
        """
        Whether the resource is compliant.
        * `keys_with_noncompliant_values ` - Set of tag keys with non-compliant tag values.
        * `non_compliant_keys ` - Set of non-compliant tag keys.
        """
        return pulumi.get(self, "compliance_status")

    @property
    @pulumi.getter(name="keysWithNoncompliantValues")
    def keys_with_noncompliant_values(self) -> Sequence[str]:
        return pulumi.get(self, "keys_with_noncompliant_values")

    @property
    @pulumi.getter(name="nonCompliantKeys")
    def non_compliant_keys(self) -> Sequence[str]:
        return pulumi.get(self, "non_compliant_keys")


@pulumi.output_type
class GetResourcesTagFilterResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: One part of a key-value pair that makes up a tag.
        :param Sequence[str] values: Optional part of a key-value pair that make up a tag.
        """
        GetResourcesTagFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")

        _setter("key", key)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        One part of a key-value pair that makes up a tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Optional part of a key-value pair that make up a tag.
        """
        return pulumi.get(self, "values")


