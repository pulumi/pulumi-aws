# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'RuleLockConfigurationArgs',
    'RuleLockConfigurationUnlockDelayArgs',
    'RuleResourceTagArgs',
    'RuleRetentionPeriodArgs',
]

@pulumi.input_type
class RuleLockConfigurationArgs:
    def __init__(__self__, *,
                 unlock_delay: pulumi.Input['RuleLockConfigurationUnlockDelayArgs']):
        """
        :param pulumi.Input['RuleLockConfigurationUnlockDelayArgs'] unlock_delay: Information about the retention rule unlock delay. See `unlock_delay` below.
        """
        RuleLockConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unlock_delay=unlock_delay,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unlock_delay: Optional[pulumi.Input['RuleLockConfigurationUnlockDelayArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if unlock_delay is None and 'unlockDelay' in kwargs:
            unlock_delay = kwargs['unlockDelay']
        if unlock_delay is None:
            raise TypeError("Missing 'unlock_delay' argument")

        _setter("unlock_delay", unlock_delay)

    @property
    @pulumi.getter(name="unlockDelay")
    def unlock_delay(self) -> pulumi.Input['RuleLockConfigurationUnlockDelayArgs']:
        """
        Information about the retention rule unlock delay. See `unlock_delay` below.
        """
        return pulumi.get(self, "unlock_delay")

    @unlock_delay.setter
    def unlock_delay(self, value: pulumi.Input['RuleLockConfigurationUnlockDelayArgs']):
        pulumi.set(self, "unlock_delay", value)


@pulumi.input_type
class RuleLockConfigurationUnlockDelayArgs:
    def __init__(__self__, *,
                 unlock_delay_unit: pulumi.Input[str],
                 unlock_delay_value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unlock_delay_unit: The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
        :param pulumi.Input[int] unlock_delay_value: The unlock delay period, measured in the unit specified for UnlockDelayUnit.
        """
        RuleLockConfigurationUnlockDelayArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unlock_delay_unit=unlock_delay_unit,
            unlock_delay_value=unlock_delay_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unlock_delay_unit: Optional[pulumi.Input[str]] = None,
             unlock_delay_value: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if unlock_delay_unit is None and 'unlockDelayUnit' in kwargs:
            unlock_delay_unit = kwargs['unlockDelayUnit']
        if unlock_delay_unit is None:
            raise TypeError("Missing 'unlock_delay_unit' argument")
        if unlock_delay_value is None and 'unlockDelayValue' in kwargs:
            unlock_delay_value = kwargs['unlockDelayValue']
        if unlock_delay_value is None:
            raise TypeError("Missing 'unlock_delay_value' argument")

        _setter("unlock_delay_unit", unlock_delay_unit)
        _setter("unlock_delay_value", unlock_delay_value)

    @property
    @pulumi.getter(name="unlockDelayUnit")
    def unlock_delay_unit(self) -> pulumi.Input[str]:
        """
        The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
        """
        return pulumi.get(self, "unlock_delay_unit")

    @unlock_delay_unit.setter
    def unlock_delay_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unlock_delay_unit", value)

    @property
    @pulumi.getter(name="unlockDelayValue")
    def unlock_delay_value(self) -> pulumi.Input[int]:
        """
        The unlock delay period, measured in the unit specified for UnlockDelayUnit.
        """
        return pulumi.get(self, "unlock_delay_value")

    @unlock_delay_value.setter
    def unlock_delay_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "unlock_delay_value", value)


@pulumi.input_type
class RuleResourceTagArgs:
    def __init__(__self__, *,
                 resource_tag_key: pulumi.Input[str],
                 resource_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource_tag_key: The tag key.
               
               The following argument is optional:
        :param pulumi.Input[str] resource_tag_value: The tag value.
        """
        RuleResourceTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_tag_key=resource_tag_key,
            resource_tag_value=resource_tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_tag_key: Optional[pulumi.Input[str]] = None,
             resource_tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_tag_key is None and 'resourceTagKey' in kwargs:
            resource_tag_key = kwargs['resourceTagKey']
        if resource_tag_key is None:
            raise TypeError("Missing 'resource_tag_key' argument")
        if resource_tag_value is None and 'resourceTagValue' in kwargs:
            resource_tag_value = kwargs['resourceTagValue']

        _setter("resource_tag_key", resource_tag_key)
        if resource_tag_value is not None:
            _setter("resource_tag_value", resource_tag_value)

    @property
    @pulumi.getter(name="resourceTagKey")
    def resource_tag_key(self) -> pulumi.Input[str]:
        """
        The tag key.

        The following argument is optional:
        """
        return pulumi.get(self, "resource_tag_key")

    @resource_tag_key.setter
    def resource_tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_tag_key", value)

    @property
    @pulumi.getter(name="resourceTagValue")
    def resource_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        The tag value.
        """
        return pulumi.get(self, "resource_tag_value")

    @resource_tag_value.setter
    def resource_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_tag_value", value)


@pulumi.input_type
class RuleRetentionPeriodArgs:
    def __init__(__self__, *,
                 retention_period_unit: pulumi.Input[str],
                 retention_period_value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] retention_period_unit: The unit of time in which the retention period is measured. Currently, only DAYS is supported.
        :param pulumi.Input[int] retention_period_value: The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
        """
        RuleRetentionPeriodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            retention_period_unit=retention_period_unit,
            retention_period_value=retention_period_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             retention_period_unit: Optional[pulumi.Input[str]] = None,
             retention_period_value: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if retention_period_unit is None and 'retentionPeriodUnit' in kwargs:
            retention_period_unit = kwargs['retentionPeriodUnit']
        if retention_period_unit is None:
            raise TypeError("Missing 'retention_period_unit' argument")
        if retention_period_value is None and 'retentionPeriodValue' in kwargs:
            retention_period_value = kwargs['retentionPeriodValue']
        if retention_period_value is None:
            raise TypeError("Missing 'retention_period_value' argument")

        _setter("retention_period_unit", retention_period_unit)
        _setter("retention_period_value", retention_period_value)

    @property
    @pulumi.getter(name="retentionPeriodUnit")
    def retention_period_unit(self) -> pulumi.Input[str]:
        """
        The unit of time in which the retention period is measured. Currently, only DAYS is supported.
        """
        return pulumi.get(self, "retention_period_unit")

    @retention_period_unit.setter
    def retention_period_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "retention_period_unit", value)

    @property
    @pulumi.getter(name="retentionPeriodValue")
    def retention_period_value(self) -> pulumi.Input[int]:
        """
        The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
        """
        return pulumi.get(self, "retention_period_value")

    @retention_period_value.setter
    def retention_period_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "retention_period_value", value)


