# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RuleLockConfiguration',
    'RuleLockConfigurationUnlockDelay',
    'RuleResourceTag',
    'RuleRetentionPeriod',
]

@pulumi.output_type
class RuleLockConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unlockDelay":
            suggest = "unlock_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleLockConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleLockConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleLockConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 unlock_delay: 'outputs.RuleLockConfigurationUnlockDelay'):
        """
        :param 'RuleLockConfigurationUnlockDelayArgs' unlock_delay: Information about the retention rule unlock delay. See `unlock_delay` below.
        """
        RuleLockConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unlock_delay=unlock_delay,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unlock_delay: Optional['outputs.RuleLockConfigurationUnlockDelay'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if unlock_delay is None and 'unlockDelay' in kwargs:
            unlock_delay = kwargs['unlockDelay']
        if unlock_delay is None:
            raise TypeError("Missing 'unlock_delay' argument")

        _setter("unlock_delay", unlock_delay)

    @property
    @pulumi.getter(name="unlockDelay")
    def unlock_delay(self) -> 'outputs.RuleLockConfigurationUnlockDelay':
        """
        Information about the retention rule unlock delay. See `unlock_delay` below.
        """
        return pulumi.get(self, "unlock_delay")


@pulumi.output_type
class RuleLockConfigurationUnlockDelay(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unlockDelayUnit":
            suggest = "unlock_delay_unit"
        elif key == "unlockDelayValue":
            suggest = "unlock_delay_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleLockConfigurationUnlockDelay. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleLockConfigurationUnlockDelay.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleLockConfigurationUnlockDelay.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 unlock_delay_unit: str,
                 unlock_delay_value: int):
        """
        :param str unlock_delay_unit: The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
        :param int unlock_delay_value: The unlock delay period, measured in the unit specified for UnlockDelayUnit.
        """
        RuleLockConfigurationUnlockDelay._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unlock_delay_unit=unlock_delay_unit,
            unlock_delay_value=unlock_delay_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unlock_delay_unit: Optional[str] = None,
             unlock_delay_value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if unlock_delay_unit is None and 'unlockDelayUnit' in kwargs:
            unlock_delay_unit = kwargs['unlockDelayUnit']
        if unlock_delay_unit is None:
            raise TypeError("Missing 'unlock_delay_unit' argument")
        if unlock_delay_value is None and 'unlockDelayValue' in kwargs:
            unlock_delay_value = kwargs['unlockDelayValue']
        if unlock_delay_value is None:
            raise TypeError("Missing 'unlock_delay_value' argument")

        _setter("unlock_delay_unit", unlock_delay_unit)
        _setter("unlock_delay_value", unlock_delay_value)

    @property
    @pulumi.getter(name="unlockDelayUnit")
    def unlock_delay_unit(self) -> str:
        """
        The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
        """
        return pulumi.get(self, "unlock_delay_unit")

    @property
    @pulumi.getter(name="unlockDelayValue")
    def unlock_delay_value(self) -> int:
        """
        The unlock delay period, measured in the unit specified for UnlockDelayUnit.
        """
        return pulumi.get(self, "unlock_delay_value")


@pulumi.output_type
class RuleResourceTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceTagKey":
            suggest = "resource_tag_key"
        elif key == "resourceTagValue":
            suggest = "resource_tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleResourceTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleResourceTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleResourceTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_tag_key: str,
                 resource_tag_value: Optional[str] = None):
        """
        :param str resource_tag_key: The tag key.
               
               The following argument is optional:
        :param str resource_tag_value: The tag value.
        """
        RuleResourceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_tag_key=resource_tag_key,
            resource_tag_value=resource_tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_tag_key: Optional[str] = None,
             resource_tag_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_tag_key is None and 'resourceTagKey' in kwargs:
            resource_tag_key = kwargs['resourceTagKey']
        if resource_tag_key is None:
            raise TypeError("Missing 'resource_tag_key' argument")
        if resource_tag_value is None and 'resourceTagValue' in kwargs:
            resource_tag_value = kwargs['resourceTagValue']

        _setter("resource_tag_key", resource_tag_key)
        if resource_tag_value is not None:
            _setter("resource_tag_value", resource_tag_value)

    @property
    @pulumi.getter(name="resourceTagKey")
    def resource_tag_key(self) -> str:
        """
        The tag key.

        The following argument is optional:
        """
        return pulumi.get(self, "resource_tag_key")

    @property
    @pulumi.getter(name="resourceTagValue")
    def resource_tag_value(self) -> Optional[str]:
        """
        The tag value.
        """
        return pulumi.get(self, "resource_tag_value")


@pulumi.output_type
class RuleRetentionPeriod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionPeriodUnit":
            suggest = "retention_period_unit"
        elif key == "retentionPeriodValue":
            suggest = "retention_period_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleRetentionPeriod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleRetentionPeriod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleRetentionPeriod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retention_period_unit: str,
                 retention_period_value: int):
        """
        :param str retention_period_unit: The unit of time in which the retention period is measured. Currently, only DAYS is supported.
        :param int retention_period_value: The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
        """
        RuleRetentionPeriod._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            retention_period_unit=retention_period_unit,
            retention_period_value=retention_period_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             retention_period_unit: Optional[str] = None,
             retention_period_value: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if retention_period_unit is None and 'retentionPeriodUnit' in kwargs:
            retention_period_unit = kwargs['retentionPeriodUnit']
        if retention_period_unit is None:
            raise TypeError("Missing 'retention_period_unit' argument")
        if retention_period_value is None and 'retentionPeriodValue' in kwargs:
            retention_period_value = kwargs['retentionPeriodValue']
        if retention_period_value is None:
            raise TypeError("Missing 'retention_period_value' argument")

        _setter("retention_period_unit", retention_period_unit)
        _setter("retention_period_value", retention_period_value)

    @property
    @pulumi.getter(name="retentionPeriodUnit")
    def retention_period_unit(self) -> str:
        """
        The unit of time in which the retention period is measured. Currently, only DAYS is supported.
        """
        return pulumi.get(self, "retention_period_unit")

    @property
    @pulumi.getter(name="retentionPeriodValue")
    def retention_period_value(self) -> int:
        """
        The period value for which the retention rule is to retain resources. The period is measured using the unit specified for RetentionPeriodUnit.
        """
        return pulumi.get(self, "retention_period_value")


