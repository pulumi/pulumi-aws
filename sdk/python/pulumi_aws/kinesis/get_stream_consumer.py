# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetStreamConsumerResult',
    'AwaitableGetStreamConsumerResult',
    'get_stream_consumer',
    'get_stream_consumer_output',
]

@pulumi.output_type
class GetStreamConsumerResult:
    """
    A collection of values returned by getStreamConsumer.
    """
    def __init__(__self__, arn=None, creation_timestamp=None, id=None, name=None, region=None, status=None, stream_arn=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if creation_timestamp and not isinstance(creation_timestamp, str):
            raise TypeError("Expected argument 'creation_timestamp' to be a str")
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if stream_arn and not isinstance(stream_arn, str):
            raise TypeError("Expected argument 'stream_arn' to be a str")
        pulumi.set(__self__, "stream_arn", stream_arn)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        """
        Approximate timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of when the stream consumer was created.
        """
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Current status of the stream consumer.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> _builtins.str:
        return pulumi.get(self, "stream_arn")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "tags")


class AwaitableGetStreamConsumerResult(GetStreamConsumerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStreamConsumerResult(
            arn=self.arn,
            creation_timestamp=self.creation_timestamp,
            id=self.id,
            name=self.name,
            region=self.region,
            status=self.status,
            stream_arn=self.stream_arn,
            tags=self.tags)


def get_stream_consumer(arn: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        region: Optional[_builtins.str] = None,
                        stream_arn: Optional[_builtins.str] = None,
                        tags: Optional[Mapping[str, _builtins.str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStreamConsumerResult:
    """
    Provides details about a Kinesis Stream Consumer.

    For more details, see the [Amazon Kinesis Stream Consumer Documentation](https://docs.aws.amazon.com/streams/latest/dev/amazon-kinesis-consumers.html).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.kinesis.get_stream_consumer(name="example-consumer",
        stream_arn=example_aws_kinesis_stream["arn"])
    ```


    :param _builtins.str arn: ARN of the stream consumer.
    :param _builtins.str name: Name of the stream consumer.
    :param _builtins.str region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
    :param _builtins.str stream_arn: ARN of the data stream the consumer is registered with.
    """
    __args__ = dict()
    __args__['arn'] = arn
    __args__['name'] = name
    __args__['region'] = region
    __args__['streamArn'] = stream_arn
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:kinesis/getStreamConsumer:getStreamConsumer', __args__, opts=opts, typ=GetStreamConsumerResult).value

    return AwaitableGetStreamConsumerResult(
        arn=pulumi.get(__ret__, 'arn'),
        creation_timestamp=pulumi.get(__ret__, 'creation_timestamp'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        stream_arn=pulumi.get(__ret__, 'stream_arn'),
        tags=pulumi.get(__ret__, 'tags'))
def get_stream_consumer_output(arn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               stream_arn: Optional[pulumi.Input[_builtins.str]] = None,
                               tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStreamConsumerResult]:
    """
    Provides details about a Kinesis Stream Consumer.

    For more details, see the [Amazon Kinesis Stream Consumer Documentation](https://docs.aws.amazon.com/streams/latest/dev/amazon-kinesis-consumers.html).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.kinesis.get_stream_consumer(name="example-consumer",
        stream_arn=example_aws_kinesis_stream["arn"])
    ```


    :param _builtins.str arn: ARN of the stream consumer.
    :param _builtins.str name: Name of the stream consumer.
    :param _builtins.str region: Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
    :param _builtins.str stream_arn: ARN of the data stream the consumer is registered with.
    """
    __args__ = dict()
    __args__['arn'] = arn
    __args__['name'] = name
    __args__['region'] = region
    __args__['streamArn'] = stream_arn
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws:kinesis/getStreamConsumer:getStreamConsumer', __args__, opts=opts, typ=GetStreamConsumerResult)
    return __ret__.apply(lambda __response__: GetStreamConsumerResult(
        arn=pulumi.get(__response__, 'arn'),
        creation_timestamp=pulumi.get(__response__, 'creation_timestamp'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        stream_arn=pulumi.get(__response__, 'stream_arn'),
        tags=pulumi.get(__response__, 'tags')))
