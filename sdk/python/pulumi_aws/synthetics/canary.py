# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Canary']


class Canary(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 artifact_s3_location: Optional[pulumi.Input[str]] = None,
                 execution_role_arn: Optional[pulumi.Input[str]] = None,
                 failure_retention_period: Optional[pulumi.Input[int]] = None,
                 handler: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 run_config: Optional[pulumi.Input[pulumi.InputType['CanaryRunConfigArgs']]] = None,
                 runtime_version: Optional[pulumi.Input[str]] = None,
                 s3_bucket: Optional[pulumi.Input[str]] = None,
                 s3_key: Optional[pulumi.Input[str]] = None,
                 s3_version: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[pulumi.InputType['CanaryScheduleArgs']]] = None,
                 start_canary: Optional[pulumi.Input[bool]] = None,
                 success_retention_period: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vpc_config: Optional[pulumi.Input[pulumi.InputType['CanaryVpcConfigArgs']]] = None,
                 zip_file: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Synthetics Canary resource.

        > **NOTE:** When you create a canary, AWS creates supporting implicit resources. See the Amazon CloudWatch Synthetics documentation on [DeleteCanary](https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DeleteCanary.html) for a full list. Neither AWS nor this provider deletes these implicit resources automatically when the canary is deleted. Before deleting a canary, ensure you have all the information about the canary that you need to delete the implicit resources using the AWS Console, or AWS CLI.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        some = aws.synthetics.Canary("some",
            artifact_s3_location="s3://some-bucket/",
            execution_role_arn="some-role",
            handler="exports.handler",
            runtime_version="syn-1.0",
            schedule=aws.synthetics.CanaryScheduleArgs(
                expression="rate(0 minute)",
            ),
            zip_file="test-fixtures/lambdatest.zip")
        ```

        ## Import

        Synthetics Canaries can be imported using the `name`, e.g.

        ```sh
         $ pulumi import aws:synthetics/canary:Canary some some-canary
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] artifact_s3_location: Location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary.
        :param pulumi.Input[str] execution_role_arn: ARN of the IAM role to be used to run the canary. see [AWS Docs](https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CreateCanary.html#API_CreateCanary_RequestSyntax) for permissions needs for IAM Role.
        :param pulumi.Input[int] failure_retention_period: Number of days to retain data about failed runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.
        :param pulumi.Input[str] handler: Entry point to use for the source code when running the canary. This value must end with the string `.handler` .
        :param pulumi.Input[str] name: Name for this canary.
        :param pulumi.Input[pulumi.InputType['CanaryRunConfigArgs']] run_config: Configuration block for individual canary runs. Detailed below.
        :param pulumi.Input[str] runtime_version: Runtime version to use for the canary. Versions change often so consult the [Amazon CloudWatch documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html) for the latest valid versions. Values include `syn-python-selenium-1.0`, `syn-nodejs-puppeteer-3.0`, `syn-nodejs-2.2`, `syn-nodejs-2.1`, `syn-nodejs-2.0`, and `syn-1.0`.
        :param pulumi.Input[str] s3_bucket: Full bucket name which is used if your canary script is located in S3. The bucket must already exist. Specify the full bucket name including s3:// as the start of the bucket name. **Conflicts with `zip_file`.**
        :param pulumi.Input[str] s3_key: S3 key of your script. **Conflicts with `zip_file`.**
        :param pulumi.Input[str] s3_version: S3 version ID of your script. **Conflicts with `zip_file`.**
        :param pulumi.Input[pulumi.InputType['CanaryScheduleArgs']] schedule: Configuration block providing how often the canary is to run and when these test runs are to stop. Detailed below.
        :param pulumi.Input[bool] start_canary: Whether to run or stop the canary.
        :param pulumi.Input[int] success_retention_period: Number of days to retain data about successful runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags
        :param pulumi.Input[pulumi.InputType['CanaryVpcConfigArgs']] vpc_config: Configuration block. Detailed below.
        :param pulumi.Input[str] zip_file: ZIP file that contains the script, if you input your canary script directly into the canary instead of referring to an S3 location. It can be up to 5 MB. **Conflicts with `s3_bucket`, `s3_key`, and `s3_version`.**
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if artifact_s3_location is None and not opts.urn:
                raise TypeError("Missing required property 'artifact_s3_location'")
            __props__['artifact_s3_location'] = artifact_s3_location
            if execution_role_arn is None and not opts.urn:
                raise TypeError("Missing required property 'execution_role_arn'")
            __props__['execution_role_arn'] = execution_role_arn
            __props__['failure_retention_period'] = failure_retention_period
            if handler is None and not opts.urn:
                raise TypeError("Missing required property 'handler'")
            __props__['handler'] = handler
            __props__['name'] = name
            __props__['run_config'] = run_config
            if runtime_version is None and not opts.urn:
                raise TypeError("Missing required property 'runtime_version'")
            __props__['runtime_version'] = runtime_version
            __props__['s3_bucket'] = s3_bucket
            __props__['s3_key'] = s3_key
            __props__['s3_version'] = s3_version
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__['schedule'] = schedule
            __props__['start_canary'] = start_canary
            __props__['success_retention_period'] = success_retention_period
            __props__['tags'] = tags
            __props__['vpc_config'] = vpc_config
            __props__['zip_file'] = zip_file
            __props__['arn'] = None
            __props__['engine_arn'] = None
            __props__['source_location_arn'] = None
            __props__['status'] = None
            __props__['timelines'] = None
        super(Canary, __self__).__init__(
            'aws:synthetics/canary:Canary',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            artifact_s3_location: Optional[pulumi.Input[str]] = None,
            engine_arn: Optional[pulumi.Input[str]] = None,
            execution_role_arn: Optional[pulumi.Input[str]] = None,
            failure_retention_period: Optional[pulumi.Input[int]] = None,
            handler: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            run_config: Optional[pulumi.Input[pulumi.InputType['CanaryRunConfigArgs']]] = None,
            runtime_version: Optional[pulumi.Input[str]] = None,
            s3_bucket: Optional[pulumi.Input[str]] = None,
            s3_key: Optional[pulumi.Input[str]] = None,
            s3_version: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[pulumi.InputType['CanaryScheduleArgs']]] = None,
            source_location_arn: Optional[pulumi.Input[str]] = None,
            start_canary: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            success_retention_period: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            timelines: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CanaryTimelineArgs']]]]] = None,
            vpc_config: Optional[pulumi.Input[pulumi.InputType['CanaryVpcConfigArgs']]] = None,
            zip_file: Optional[pulumi.Input[str]] = None) -> 'Canary':
        """
        Get an existing Canary resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: Amazon Resource Name (ARN) of the Canary.
        :param pulumi.Input[str] artifact_s3_location: Location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary.
        :param pulumi.Input[str] engine_arn: ARN of the Lambda function that is used as your canary's engine.
        :param pulumi.Input[str] execution_role_arn: ARN of the IAM role to be used to run the canary. see [AWS Docs](https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CreateCanary.html#API_CreateCanary_RequestSyntax) for permissions needs for IAM Role.
        :param pulumi.Input[int] failure_retention_period: Number of days to retain data about failed runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.
        :param pulumi.Input[str] handler: Entry point to use for the source code when running the canary. This value must end with the string `.handler` .
        :param pulumi.Input[str] name: Name for this canary.
        :param pulumi.Input[pulumi.InputType['CanaryRunConfigArgs']] run_config: Configuration block for individual canary runs. Detailed below.
        :param pulumi.Input[str] runtime_version: Runtime version to use for the canary. Versions change often so consult the [Amazon CloudWatch documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html) for the latest valid versions. Values include `syn-python-selenium-1.0`, `syn-nodejs-puppeteer-3.0`, `syn-nodejs-2.2`, `syn-nodejs-2.1`, `syn-nodejs-2.0`, and `syn-1.0`.
        :param pulumi.Input[str] s3_bucket: Full bucket name which is used if your canary script is located in S3. The bucket must already exist. Specify the full bucket name including s3:// as the start of the bucket name. **Conflicts with `zip_file`.**
        :param pulumi.Input[str] s3_key: S3 key of your script. **Conflicts with `zip_file`.**
        :param pulumi.Input[str] s3_version: S3 version ID of your script. **Conflicts with `zip_file`.**
        :param pulumi.Input[pulumi.InputType['CanaryScheduleArgs']] schedule: Configuration block providing how often the canary is to run and when these test runs are to stop. Detailed below.
        :param pulumi.Input[str] source_location_arn: ARN of the Lambda layer where Synthetics stores the canary script code.
        :param pulumi.Input[bool] start_canary: Whether to run or stop the canary.
        :param pulumi.Input[str] status: Canary status.
        :param pulumi.Input[int] success_retention_period: Number of days to retain data about successful runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CanaryTimelineArgs']]]] timelines: Structure that contains information about when the canary was created, modified, and most recently run. see Timeline.
        :param pulumi.Input[pulumi.InputType['CanaryVpcConfigArgs']] vpc_config: Configuration block. Detailed below.
        :param pulumi.Input[str] zip_file: ZIP file that contains the script, if you input your canary script directly into the canary instead of referring to an S3 location. It can be up to 5 MB. **Conflicts with `s3_bucket`, `s3_key`, and `s3_version`.**
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["arn"] = arn
        __props__["artifact_s3_location"] = artifact_s3_location
        __props__["engine_arn"] = engine_arn
        __props__["execution_role_arn"] = execution_role_arn
        __props__["failure_retention_period"] = failure_retention_period
        __props__["handler"] = handler
        __props__["name"] = name
        __props__["run_config"] = run_config
        __props__["runtime_version"] = runtime_version
        __props__["s3_bucket"] = s3_bucket
        __props__["s3_key"] = s3_key
        __props__["s3_version"] = s3_version
        __props__["schedule"] = schedule
        __props__["source_location_arn"] = source_location_arn
        __props__["start_canary"] = start_canary
        __props__["status"] = status
        __props__["success_retention_period"] = success_retention_period
        __props__["tags"] = tags
        __props__["timelines"] = timelines
        __props__["vpc_config"] = vpc_config
        __props__["zip_file"] = zip_file
        return Canary(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        Amazon Resource Name (ARN) of the Canary.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="artifactS3Location")
    def artifact_s3_location(self) -> pulumi.Output[str]:
        """
        Location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary.
        """
        return pulumi.get(self, "artifact_s3_location")

    @property
    @pulumi.getter(name="engineArn")
    def engine_arn(self) -> pulumi.Output[str]:
        """
        ARN of the Lambda function that is used as your canary's engine.
        """
        return pulumi.get(self, "engine_arn")

    @property
    @pulumi.getter(name="executionRoleArn")
    def execution_role_arn(self) -> pulumi.Output[str]:
        """
        ARN of the IAM role to be used to run the canary. see [AWS Docs](https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CreateCanary.html#API_CreateCanary_RequestSyntax) for permissions needs for IAM Role.
        """
        return pulumi.get(self, "execution_role_arn")

    @property
    @pulumi.getter(name="failureRetentionPeriod")
    def failure_retention_period(self) -> pulumi.Output[Optional[int]]:
        """
        Number of days to retain data about failed runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.
        """
        return pulumi.get(self, "failure_retention_period")

    @property
    @pulumi.getter
    def handler(self) -> pulumi.Output[str]:
        """
        Entry point to use for the source code when running the canary. This value must end with the string `.handler` .
        """
        return pulumi.get(self, "handler")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name for this canary.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runConfig")
    def run_config(self) -> pulumi.Output['outputs.CanaryRunConfig']:
        """
        Configuration block for individual canary runs. Detailed below.
        """
        return pulumi.get(self, "run_config")

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> pulumi.Output[str]:
        """
        Runtime version to use for the canary. Versions change often so consult the [Amazon CloudWatch documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html) for the latest valid versions. Values include `syn-python-selenium-1.0`, `syn-nodejs-puppeteer-3.0`, `syn-nodejs-2.2`, `syn-nodejs-2.1`, `syn-nodejs-2.0`, and `syn-1.0`.
        """
        return pulumi.get(self, "runtime_version")

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Output[Optional[str]]:
        """
        Full bucket name which is used if your canary script is located in S3. The bucket must already exist. Specify the full bucket name including s3:// as the start of the bucket name. **Conflicts with `zip_file`.**
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Key")
    def s3_key(self) -> pulumi.Output[Optional[str]]:
        """
        S3 key of your script. **Conflicts with `zip_file`.**
        """
        return pulumi.get(self, "s3_key")

    @property
    @pulumi.getter(name="s3Version")
    def s3_version(self) -> pulumi.Output[Optional[str]]:
        """
        S3 version ID of your script. **Conflicts with `zip_file`.**
        """
        return pulumi.get(self, "s3_version")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output['outputs.CanarySchedule']:
        """
        Configuration block providing how often the canary is to run and when these test runs are to stop. Detailed below.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="sourceLocationArn")
    def source_location_arn(self) -> pulumi.Output[str]:
        """
        ARN of the Lambda layer where Synthetics stores the canary script code.
        """
        return pulumi.get(self, "source_location_arn")

    @property
    @pulumi.getter(name="startCanary")
    def start_canary(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to run or stop the canary.
        """
        return pulumi.get(self, "start_canary")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Canary status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="successRetentionPeriod")
    def success_retention_period(self) -> pulumi.Output[Optional[int]]:
        """
        Number of days to retain data about successful runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.
        """
        return pulumi.get(self, "success_retention_period")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Key-value map of resource tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timelines(self) -> pulumi.Output[Sequence['outputs.CanaryTimeline']]:
        """
        Structure that contains information about when the canary was created, modified, and most recently run. see Timeline.
        """
        return pulumi.get(self, "timelines")

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> pulumi.Output[Optional['outputs.CanaryVpcConfig']]:
        """
        Configuration block. Detailed below.
        """
        return pulumi.get(self, "vpc_config")

    @property
    @pulumi.getter(name="zipFile")
    def zip_file(self) -> pulumi.Output[Optional[str]]:
        """
        ZIP file that contains the script, if you input your canary script directly into the canary instead of referring to an S3 location. It can be up to 5 MB. **Conflicts with `s3_bucket`, `s3_key`, and `s3_version`.**
        """
        return pulumi.get(self, "zip_file")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

