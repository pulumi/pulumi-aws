# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class ResourceServer(pulumi.CustomResource):
    identifier: pulumi.Output[str]
    """
    An identifier for the resource server.
    """
    name: pulumi.Output[str]
    """
    A name for the resource server.
    """
    scope_identifiers: pulumi.Output[list]
    """
    A list of all scopes configured for this resource server in the format identifier/scope_name.
    """
    scopes: pulumi.Output[list]
    """
    A list of Authorization Scope.

      * `scopeDescription` (`str`) - The scope description.
      * `scopeName` (`str`) - The scope name.
    """
    user_pool_id: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, identifier=None, name=None, scopes=None, user_pool_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Cognito Resource Server.



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] identifier: An identifier for the resource server.
        :param pulumi.Input[str] name: A name for the resource server.
        :param pulumi.Input[list] scopes: A list of Authorization Scope.

        The **scopes** object supports the following:

          * `scopeDescription` (`pulumi.Input[str]`) - The scope description.
          * `scopeName` (`pulumi.Input[str]`) - The scope name.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if identifier is None:
                raise TypeError("Missing required property 'identifier'")
            __props__['identifier'] = identifier
            __props__['name'] = name
            __props__['scopes'] = scopes
            if user_pool_id is None:
                raise TypeError("Missing required property 'user_pool_id'")
            __props__['user_pool_id'] = user_pool_id
            __props__['scope_identifiers'] = None
        super(ResourceServer, __self__).__init__(
            'aws:cognito/resourceServer:ResourceServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, identifier=None, name=None, scope_identifiers=None, scopes=None, user_pool_id=None):
        """
        Get an existing ResourceServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] identifier: An identifier for the resource server.
        :param pulumi.Input[str] name: A name for the resource server.
        :param pulumi.Input[list] scope_identifiers: A list of all scopes configured for this resource server in the format identifier/scope_name.
        :param pulumi.Input[list] scopes: A list of Authorization Scope.

        The **scopes** object supports the following:

          * `scopeDescription` (`pulumi.Input[str]`) - The scope description.
          * `scopeName` (`pulumi.Input[str]`) - The scope name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["identifier"] = identifier
        __props__["name"] = name
        __props__["scope_identifiers"] = scope_identifiers
        __props__["scopes"] = scopes
        __props__["user_pool_id"] = user_pool_id
        return ResourceServer(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

