# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class UserPoolDomain(pulumi.CustomResource):
    aws_account_id: pulumi.Output[str]
    """
    The AWS account ID for the user pool owner.
    """
    certificate_arn: pulumi.Output[str]
    """
    The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
    """
    cloudfront_distribution_arn: pulumi.Output[str]
    """
    The ARN of the CloudFront distribution.
    """
    domain: pulumi.Output[str]
    """
    The domain string.
    """
    s3_bucket: pulumi.Output[str]
    """
    The S3 bucket where the static files for this domain are stored.
    """
    user_pool_id: pulumi.Output[str]
    """
    The user pool ID.
    """
    version: pulumi.Output[str]
    """
    The app version.
    """
    def __init__(__self__, resource_name, opts=None, certificate_arn=None, domain=None, user_pool_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Cognito User Pool Domain resource.



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_arn: The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
        :param pulumi.Input[str] domain: The domain string.
        :param pulumi.Input[str] user_pool_id: The user pool ID.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['certificate_arn'] = certificate_arn
            if domain is None:
                raise TypeError("Missing required property 'domain'")
            __props__['domain'] = domain
            if user_pool_id is None:
                raise TypeError("Missing required property 'user_pool_id'")
            __props__['user_pool_id'] = user_pool_id
            __props__['aws_account_id'] = None
            __props__['cloudfront_distribution_arn'] = None
            __props__['s3_bucket'] = None
            __props__['version'] = None
        super(UserPoolDomain, __self__).__init__(
            'aws:cognito/userPoolDomain:UserPoolDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, aws_account_id=None, certificate_arn=None, cloudfront_distribution_arn=None, domain=None, s3_bucket=None, user_pool_id=None, version=None):
        """
        Get an existing UserPoolDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aws_account_id: The AWS account ID for the user pool owner.
        :param pulumi.Input[str] certificate_arn: The ARN of an ISSUED ACM certificate in us-east-1 for a custom domain.
        :param pulumi.Input[str] cloudfront_distribution_arn: The ARN of the CloudFront distribution.
        :param pulumi.Input[str] domain: The domain string.
        :param pulumi.Input[str] s3_bucket: The S3 bucket where the static files for this domain are stored.
        :param pulumi.Input[str] user_pool_id: The user pool ID.
        :param pulumi.Input[str] version: The app version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["aws_account_id"] = aws_account_id
        __props__["certificate_arn"] = certificate_arn
        __props__["cloudfront_distribution_arn"] = cloudfront_distribution_arn
        __props__["domain"] = domain
        __props__["s3_bucket"] = s3_bucket
        __props__["user_pool_id"] = user_pool_id
        __props__["version"] = version
        return UserPoolDomain(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

