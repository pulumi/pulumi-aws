# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVpcIamPoolCidrsResult',
    'AwaitableGetVpcIamPoolCidrsResult',
    'get_vpc_iam_pool_cidrs',
    'get_vpc_iam_pool_cidrs_output',
]

@pulumi.output_type
class GetVpcIamPoolCidrsResult:
    """
    A collection of values returned by getVpcIamPoolCidrs.
    """
    def __init__(__self__, filters=None, id=None, ipam_pool_cidrs=None, ipam_pool_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipam_pool_cidrs and not isinstance(ipam_pool_cidrs, list):
            raise TypeError("Expected argument 'ipam_pool_cidrs' to be a list")
        pulumi.set(__self__, "ipam_pool_cidrs", ipam_pool_cidrs)
        if ipam_pool_id and not isinstance(ipam_pool_id, str):
            raise TypeError("Expected argument 'ipam_pool_id' to be a str")
        pulumi.set(__self__, "ipam_pool_id", ipam_pool_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetVpcIamPoolCidrsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipamPoolCidrs")
    def ipam_pool_cidrs(self) -> Sequence['outputs.GetVpcIamPoolCidrsIpamPoolCidrResult']:
        """
        The CIDRs provisioned into the IPAM pool, described below.
        """
        return pulumi.get(self, "ipam_pool_cidrs")

    @property
    @pulumi.getter(name="ipamPoolId")
    def ipam_pool_id(self) -> str:
        return pulumi.get(self, "ipam_pool_id")


class AwaitableGetVpcIamPoolCidrsResult(GetVpcIamPoolCidrsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpcIamPoolCidrsResult(
            filters=self.filters,
            id=self.id,
            ipam_pool_cidrs=self.ipam_pool_cidrs,
            ipam_pool_id=self.ipam_pool_id)


def get_vpc_iam_pool_cidrs(filters: Optional[Sequence[pulumi.InputType['GetVpcIamPoolCidrsFilterArgs']]] = None,
                           ipam_pool_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpcIamPoolCidrsResult:
    """
    `ec2.get_vpc_iam_pool_cidrs` provides details about an IPAM pool.

    This resource can prove useful when an ipam pool was shared to your account and you want to know all (or a filtered list) of the CIDRs that are provisioned into the pool.


    :param Sequence[pulumi.InputType['GetVpcIamPoolCidrsFilterArgs']] filters: Custom filter block as described below.
    :param str ipam_pool_id: ID of the IPAM pool you would like the list of provisioned CIDRs.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['ipamPoolId'] = ipam_pool_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:ec2/getVpcIamPoolCidrs:getVpcIamPoolCidrs', __args__, opts=opts, typ=GetVpcIamPoolCidrsResult).value

    return AwaitableGetVpcIamPoolCidrsResult(
        filters=__ret__.filters,
        id=__ret__.id,
        ipam_pool_cidrs=__ret__.ipam_pool_cidrs,
        ipam_pool_id=__ret__.ipam_pool_id)


@_utilities.lift_output_func(get_vpc_iam_pool_cidrs)
def get_vpc_iam_pool_cidrs_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetVpcIamPoolCidrsFilterArgs']]]]] = None,
                                  ipam_pool_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVpcIamPoolCidrsResult]:
    """
    `ec2.get_vpc_iam_pool_cidrs` provides details about an IPAM pool.

    This resource can prove useful when an ipam pool was shared to your account and you want to know all (or a filtered list) of the CIDRs that are provisioned into the pool.


    :param Sequence[pulumi.InputType['GetVpcIamPoolCidrsFilterArgs']] filters: Custom filter block as described below.
    :param str ipam_pool_id: ID of the IPAM pool you would like the list of provisioned CIDRs.
    """
    ...
