# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class GetVpnGatewayResult(object):
    """
    A collection of values returned by getVpnGateway.
    """
    def __init__(__self__, amazon_side_asn=None, attached_vpc_id=None, availability_zone=None, id=None, state=None, tags=None):
        if amazon_side_asn and not isinstance(amazon_side_asn, str):
            raise TypeError('Expected argument amazon_side_asn to be a str')
        __self__.amazon_side_asn = amazon_side_asn
        if attached_vpc_id and not isinstance(attached_vpc_id, str):
            raise TypeError('Expected argument attached_vpc_id to be a str')
        __self__.attached_vpc_id = attached_vpc_id
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError('Expected argument availability_zone to be a str')
        __self__.availability_zone = availability_zone
        if id and not isinstance(id, str):
            raise TypeError('Expected argument id to be a str')
        __self__.id = id
        if state and not isinstance(state, str):
            raise TypeError('Expected argument state to be a str')
        __self__.state = state
        if tags and not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags

async def get_vpn_gateway(amazon_side_asn=None, attached_vpc_id=None, availability_zone=None, filters=None, id=None, state=None, tags=None):
    """
    The VPN Gateway data source provides details about
    a specific VPN gateway.
    """
    __args__ = dict()

    __args__['amazonSideAsn'] = amazon_side_asn
    __args__['attachedVpcId'] = attached_vpc_id
    __args__['availabilityZone'] = availability_zone
    __args__['filters'] = filters
    __args__['id'] = id
    __args__['state'] = state
    __args__['tags'] = tags
    __ret__ = await pulumi.runtime.invoke('aws:ec2/getVpnGateway:getVpnGateway', __args__)

    return GetVpnGatewayResult(
        amazon_side_asn=__ret__.get('amazonSideAsn'),
        attached_vpc_id=__ret__.get('attachedVpcId'),
        availability_zone=__ret__.get('availabilityZone'),
        id=__ret__.get('id'),
        state=__ret__.get('state'),
        tags=__ret__.get('tags'))
