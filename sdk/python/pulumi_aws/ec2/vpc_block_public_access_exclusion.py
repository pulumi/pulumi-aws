# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VpcBlockPublicAccessExclusionArgs', 'VpcBlockPublicAccessExclusion']

@pulumi.input_type
class VpcBlockPublicAccessExclusionArgs:
    def __init__(__self__, *,
                 internet_gateway_exclusion_mode: pulumi.Input[str],
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input['VpcBlockPublicAccessExclusionTimeoutsArgs']] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpcBlockPublicAccessExclusion resource.
        :param pulumi.Input[str] internet_gateway_exclusion_mode: Mode of exclusion from Block Public Access. The allowed values are `allow-egress` and `allow-bidirectional`.
               
               The following arguments are optional:
        :param pulumi.Input[str] subnet_id: Id of the subnet to which this exclusion applies. Either this or the vpc_id needs to be provided.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the exclusion. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[str] vpc_id: Id of the VPC to which this exclusion applies. Either this or the subnet_id needs to be provided.
        """
        pulumi.set(__self__, "internet_gateway_exclusion_mode", internet_gateway_exclusion_mode)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="internetGatewayExclusionMode")
    def internet_gateway_exclusion_mode(self) -> pulumi.Input[str]:
        """
        Mode of exclusion from Block Public Access. The allowed values are `allow-egress` and `allow-bidirectional`.

        The following arguments are optional:
        """
        return pulumi.get(self, "internet_gateway_exclusion_mode")

    @internet_gateway_exclusion_mode.setter
    def internet_gateway_exclusion_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "internet_gateway_exclusion_mode", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the subnet to which this exclusion applies. Either this or the vpc_id needs to be provided.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags to assign to the exclusion. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['VpcBlockPublicAccessExclusionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['VpcBlockPublicAccessExclusionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the VPC to which this exclusion applies. Either this or the subnet_id needs to be provided.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _VpcBlockPublicAccessExclusionState:
    def __init__(__self__, *,
                 internet_gateway_exclusion_mode: Optional[pulumi.Input[str]] = None,
                 resource_arn: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input['VpcBlockPublicAccessExclusionTimeoutsArgs']] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpcBlockPublicAccessExclusion resources.
        :param pulumi.Input[str] internet_gateway_exclusion_mode: Mode of exclusion from Block Public Access. The allowed values are `allow-egress` and `allow-bidirectional`.
               
               The following arguments are optional:
        :param pulumi.Input[str] resource_arn: The Amazon Resource Name (ARN) the excluded resource.
        :param pulumi.Input[str] subnet_id: Id of the subnet to which this exclusion applies. Either this or the vpc_id needs to be provided.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the exclusion. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        :param pulumi.Input[str] vpc_id: Id of the VPC to which this exclusion applies. Either this or the subnet_id needs to be provided.
        """
        if internet_gateway_exclusion_mode is not None:
            pulumi.set(__self__, "internet_gateway_exclusion_mode", internet_gateway_exclusion_mode)
        if resource_arn is not None:
            pulumi.set(__self__, "resource_arn", resource_arn)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
            pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="internetGatewayExclusionMode")
    def internet_gateway_exclusion_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of exclusion from Block Public Access. The allowed values are `allow-egress` and `allow-bidirectional`.

        The following arguments are optional:
        """
        return pulumi.get(self, "internet_gateway_exclusion_mode")

    @internet_gateway_exclusion_mode.setter
    def internet_gateway_exclusion_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_gateway_exclusion_mode", value)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) the excluded resource.
        """
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the subnet to which this exclusion applies. Either this or the vpc_id needs to be provided.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags to assign to the exclusion. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    @_utilities.deprecated("""Please use `tags` instead.""")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['VpcBlockPublicAccessExclusionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['VpcBlockPublicAccessExclusionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the VPC to which this exclusion applies. Either this or the subnet_id needs to be provided.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class VpcBlockPublicAccessExclusion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 internet_gateway_exclusion_mode: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['VpcBlockPublicAccessExclusionTimeoutsArgs', 'VpcBlockPublicAccessExclusionTimeoutsArgsDict']]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource for managing an AWS EC2 (Elastic Compute Cloud) VPC Block Public Access Exclusion.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test = aws.ec2.Vpc("test", cidr_block="10.1.0.0/16")
        test_vpc_block_public_access_exclusion = aws.ec2.VpcBlockPublicAccessExclusion("test",
            vpc_id=test.id,
            internet_gateway_exclusion_mode="allow-bidirectional")
        ```

        ### Usage with subnet id

        ```python
        import pulumi
        import pulumi_aws as aws

        test = aws.ec2.Vpc("test", cidr_block="10.1.0.0/16")
        test_subnet = aws.ec2.Subnet("test",
            cidr_block="10.1.1.0/24",
            vpc_id=test.id)
        test_vpc_block_public_access_exclusion = aws.ec2.VpcBlockPublicAccessExclusion("test",
            subnet_id=test_subnet.id,
            internet_gateway_exclusion_mode="allow-egress")
        ```

        ## Import

        Using `pulumi import`, import EC2 (Elastic Compute Cloud) VPC Block Public Access Exclusion using the `id`. For example:

        ```sh
        $ pulumi import aws:ec2/vpcBlockPublicAccessExclusion:VpcBlockPublicAccessExclusion example vpcbpa-exclude-1234abcd
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] internet_gateway_exclusion_mode: Mode of exclusion from Block Public Access. The allowed values are `allow-egress` and `allow-bidirectional`.
               
               The following arguments are optional:
        :param pulumi.Input[str] subnet_id: Id of the subnet to which this exclusion applies. Either this or the vpc_id needs to be provided.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the exclusion. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[str] vpc_id: Id of the VPC to which this exclusion applies. Either this or the subnet_id needs to be provided.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpcBlockPublicAccessExclusionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource for managing an AWS EC2 (Elastic Compute Cloud) VPC Block Public Access Exclusion.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        test = aws.ec2.Vpc("test", cidr_block="10.1.0.0/16")
        test_vpc_block_public_access_exclusion = aws.ec2.VpcBlockPublicAccessExclusion("test",
            vpc_id=test.id,
            internet_gateway_exclusion_mode="allow-bidirectional")
        ```

        ### Usage with subnet id

        ```python
        import pulumi
        import pulumi_aws as aws

        test = aws.ec2.Vpc("test", cidr_block="10.1.0.0/16")
        test_subnet = aws.ec2.Subnet("test",
            cidr_block="10.1.1.0/24",
            vpc_id=test.id)
        test_vpc_block_public_access_exclusion = aws.ec2.VpcBlockPublicAccessExclusion("test",
            subnet_id=test_subnet.id,
            internet_gateway_exclusion_mode="allow-egress")
        ```

        ## Import

        Using `pulumi import`, import EC2 (Elastic Compute Cloud) VPC Block Public Access Exclusion using the `id`. For example:

        ```sh
        $ pulumi import aws:ec2/vpcBlockPublicAccessExclusion:VpcBlockPublicAccessExclusion example vpcbpa-exclude-1234abcd
        ```

        :param str resource_name: The name of the resource.
        :param VpcBlockPublicAccessExclusionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcBlockPublicAccessExclusionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 internet_gateway_exclusion_mode: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['VpcBlockPublicAccessExclusionTimeoutsArgs', 'VpcBlockPublicAccessExclusionTimeoutsArgsDict']]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcBlockPublicAccessExclusionArgs.__new__(VpcBlockPublicAccessExclusionArgs)

            if internet_gateway_exclusion_mode is None and not opts.urn:
                raise TypeError("Missing required property 'internet_gateway_exclusion_mode'")
            __props__.__dict__["internet_gateway_exclusion_mode"] = internet_gateway_exclusion_mode
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["resource_arn"] = None
            __props__.__dict__["tags_all"] = None
        super(VpcBlockPublicAccessExclusion, __self__).__init__(
            'aws:ec2/vpcBlockPublicAccessExclusion:VpcBlockPublicAccessExclusion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            internet_gateway_exclusion_mode: Optional[pulumi.Input[str]] = None,
            resource_arn: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['VpcBlockPublicAccessExclusionTimeoutsArgs', 'VpcBlockPublicAccessExclusionTimeoutsArgsDict']]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'VpcBlockPublicAccessExclusion':
        """
        Get an existing VpcBlockPublicAccessExclusion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] internet_gateway_exclusion_mode: Mode of exclusion from Block Public Access. The allowed values are `allow-egress` and `allow-bidirectional`.
               
               The following arguments are optional:
        :param pulumi.Input[str] resource_arn: The Amazon Resource Name (ARN) the excluded resource.
        :param pulumi.Input[str] subnet_id: Id of the subnet to which this exclusion applies. Either this or the vpc_id needs to be provided.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the exclusion. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags_all: A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        :param pulumi.Input[str] vpc_id: Id of the VPC to which this exclusion applies. Either this or the subnet_id needs to be provided.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpcBlockPublicAccessExclusionState.__new__(_VpcBlockPublicAccessExclusionState)

        __props__.__dict__["internet_gateway_exclusion_mode"] = internet_gateway_exclusion_mode
        __props__.__dict__["resource_arn"] = resource_arn
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpc_id"] = vpc_id
        return VpcBlockPublicAccessExclusion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="internetGatewayExclusionMode")
    def internet_gateway_exclusion_mode(self) -> pulumi.Output[str]:
        """
        Mode of exclusion from Block Public Access. The allowed values are `allow-egress` and `allow-bidirectional`.

        The following arguments are optional:
        """
        return pulumi.get(self, "internet_gateway_exclusion_mode")

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Output[str]:
        """
        The Amazon Resource Name (ARN) the excluded resource.
        """
        return pulumi.get(self, "resource_arn")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        Id of the subnet to which this exclusion applies. Either this or the vpc_id needs to be provided.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of tags to assign to the exclusion. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    @_utilities.deprecated("""Please use `tags` instead.""")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        """
        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.VpcBlockPublicAccessExclusionTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        Id of the VPC to which this exclusion applies. Either this or the subnet_id needs to be provided.
        """
        return pulumi.get(self, "vpc_id")

