# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetCoipPoolResult:
    """
    A collection of values returned by getCoipPool.
    """
    def __init__(__self__, filters=None, id=None, local_gateway_route_table_id=None, pool_cidrs=None, pool_id=None, tags=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        __self__.filters = filters
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if local_gateway_route_table_id and not isinstance(local_gateway_route_table_id, str):
            raise TypeError("Expected argument 'local_gateway_route_table_id' to be a str")
        __self__.local_gateway_route_table_id = local_gateway_route_table_id
        if pool_cidrs and not isinstance(pool_cidrs, list):
            raise TypeError("Expected argument 'pool_cidrs' to be a list")
        __self__.pool_cidrs = pool_cidrs
        """
        Set of CIDR blocks in pool
        """
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        __self__.pool_id = pool_id
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
class AwaitableGetCoipPoolResult(GetCoipPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCoipPoolResult(
            filters=self.filters,
            id=self.id,
            local_gateway_route_table_id=self.local_gateway_route_table_id,
            pool_cidrs=self.pool_cidrs,
            pool_id=self.pool_id,
            tags=self.tags)

def get_coip_pool(filters=None,local_gateway_route_table_id=None,pool_id=None,tags=None,opts=None):
    """
    Provides details about a specific EC2 Customer-Owned IP Pool.

    This data source can prove useful when a module accepts a coip pool id as
    an input variable and needs to, for example, determine the CIDR block of that
    COIP Pool.

    ## Example Usage

    The following example returns a specific coip pool ID

    ```python
    import pulumi
    import pulumi_aws as aws

    config = pulumi.Config()
    coip_pool_id = config.require_object("coipPoolId")
    selected = aws.ec2.get_coip_pool(id=coip_pool_id)
    ```


    :param str local_gateway_route_table_id: Local Gateway Route Table Id assigned to desired COIP Pool
    :param str pool_id: The id of the specific COIP Pool to retrieve.
    :param dict tags: A mapping of tags, each pair of which must exactly match
           a pair on the desired COIP Pool.

    The **filters** object supports the following:

      * `name` (`str`) - The name of the field to filter by, as defined by
        [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCoipPools.html).
      * `values` (`list`) - Set of values that are accepted for the given field.
        A COIP Pool will be selected if any one of the given values matches.
    """
    __args__ = dict()


    __args__['filters'] = filters
    __args__['localGatewayRouteTableId'] = local_gateway_route_table_id
    __args__['poolId'] = pool_id
    __args__['tags'] = tags
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws:ec2/getCoipPool:getCoipPool', __args__, opts=opts).value

    return AwaitableGetCoipPoolResult(
        filters=__ret__.get('filters'),
        id=__ret__.get('id'),
        local_gateway_route_table_id=__ret__.get('localGatewayRouteTableId'),
        pool_cidrs=__ret__.get('poolCidrs'),
        pool_id=__ret__.get('poolId'),
        tags=__ret__.get('tags'))
