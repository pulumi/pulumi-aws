# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class VpcPeeringConnection(pulumi.CustomResource):
    """
    Provides a resource to manage a VPC peering connection.
    
    ~> **NOTE on VPC Peering Connections and VPC Peering Connection Options:** Terraform provides
    both a standalone VPC Peering Connection Options and a VPC Peering Connection
    resource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering
    connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.
    Doing so will cause a conflict of options and will overwrite the options.
    Using a VPC Peering Connection Options resource decouples management of the connection options from
    management of the VPC Peering Connection and allows options to be set correctly in cross-account scenarios.
    
    -> **Note:** For cross-account (requester's AWS account differs from the accepter's AWS account) or inter-region
    VPC Peering Connections use the `aws_vpc_peering_connection` resource to manage the requester's side of the
    connection and use the `aws_vpc_peering_connection_accepter` resource to manage the accepter's side of the connection.
    """
    def __init__(__self__, __name__, __opts__=None, accepter=None, auto_accept=None, peer_owner_id=None, peer_region=None, peer_vpc_id=None, requester=None, tags=None, vpc_id=None):
        """Create a VpcPeeringConnection resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['accepter'] = accepter

        __props__['autoAccept'] = auto_accept

        __props__['peerOwnerId'] = peer_owner_id

        __props__['peerRegion'] = peer_region

        if not peer_vpc_id:
            raise TypeError('Missing required property peer_vpc_id')
        __props__['peerVpcId'] = peer_vpc_id

        __props__['requester'] = requester

        __props__['tags'] = tags

        if not vpc_id:
            raise TypeError('Missing required property vpc_id')
        __props__['vpcId'] = vpc_id

        __props__['accept_status'] = None

        super(VpcPeeringConnection, __self__).__init__(
            'aws:ec2/vpcPeeringConnection:VpcPeeringConnection',
            __name__,
            __props__,
            __opts__)

