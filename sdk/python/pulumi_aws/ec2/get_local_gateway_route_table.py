# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetLocalGatewayRouteTableResult',
    'AwaitableGetLocalGatewayRouteTableResult',
    'get_local_gateway_route_table',
    'get_local_gateway_route_table_output',
]

@pulumi.output_type
class GetLocalGatewayRouteTableResult:
    """
    A collection of values returned by getLocalGatewayRouteTable.
    """
    def __init__(__self__, filters=None, id=None, local_gateway_id=None, local_gateway_route_table_id=None, outpost_arn=None, state=None, tags=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if local_gateway_id and not isinstance(local_gateway_id, str):
            raise TypeError("Expected argument 'local_gateway_id' to be a str")
        pulumi.set(__self__, "local_gateway_id", local_gateway_id)
        if local_gateway_route_table_id and not isinstance(local_gateway_route_table_id, str):
            raise TypeError("Expected argument 'local_gateway_route_table_id' to be a str")
        pulumi.set(__self__, "local_gateway_route_table_id", local_gateway_route_table_id)
        if outpost_arn and not isinstance(outpost_arn, str):
            raise TypeError("Expected argument 'outpost_arn' to be a str")
        pulumi.set(__self__, "outpost_arn", outpost_arn)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetLocalGatewayRouteTableFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localGatewayId")
    def local_gateway_id(self) -> str:
        return pulumi.get(self, "local_gateway_id")

    @property
    @pulumi.getter(name="localGatewayRouteTableId")
    def local_gateway_route_table_id(self) -> str:
        return pulumi.get(self, "local_gateway_route_table_id")

    @property
    @pulumi.getter(name="outpostArn")
    def outpost_arn(self) -> str:
        return pulumi.get(self, "outpost_arn")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "tags")


class AwaitableGetLocalGatewayRouteTableResult(GetLocalGatewayRouteTableResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLocalGatewayRouteTableResult(
            filters=self.filters,
            id=self.id,
            local_gateway_id=self.local_gateway_id,
            local_gateway_route_table_id=self.local_gateway_route_table_id,
            outpost_arn=self.outpost_arn,
            state=self.state,
            tags=self.tags)


def get_local_gateway_route_table(filters: Optional[Sequence[pulumi.InputType['GetLocalGatewayRouteTableFilterArgs']]] = None,
                                  local_gateway_id: Optional[str] = None,
                                  local_gateway_route_table_id: Optional[str] = None,
                                  outpost_arn: Optional[str] = None,
                                  state: Optional[str] = None,
                                  tags: Optional[Mapping[str, str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLocalGatewayRouteTableResult:
    """
    Provides details about an EC2 Local Gateway Route Table.

    This data source can prove useful when a module accepts a local gateway route table id as
    an input variable and needs to, for example, find the associated Outpost or Local Gateway.

    ## Example Usage

    The following example returns a specific local gateway route table ID

    ```python
    import pulumi
    import pulumi_aws as aws

    config = pulumi.Config()
    aws_ec2_local_gateway_route_table = config.require_object("awsEc2LocalGatewayRouteTable")
    selected = aws.ec2.get_local_gateway_route_table(local_gateway_route_table_id=aws_ec2_local_gateway_route_table)
    ```


    :param str local_gateway_id: ID of the specific local gateway route table to retrieve.
    :param str local_gateway_route_table_id: Local Gateway Route Table Id assigned to desired local gateway route table
    :param str outpost_arn: ARN of the Outpost the local gateway route table is associated with.
    :param str state: State of the local gateway route table.
    :param Mapping[str, str] tags: Mapping of tags, each pair of which must exactly match
           a pair on the desired local gateway route table.
           
           More complex filters can be expressed using one or more `filter` sub-blocks,
           which take the following arguments:
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['localGatewayId'] = local_gateway_id
    __args__['localGatewayRouteTableId'] = local_gateway_route_table_id
    __args__['outpostArn'] = outpost_arn
    __args__['state'] = state
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:ec2/getLocalGatewayRouteTable:getLocalGatewayRouteTable', __args__, opts=opts, typ=GetLocalGatewayRouteTableResult).value

    return AwaitableGetLocalGatewayRouteTableResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        local_gateway_id=pulumi.get(__ret__, 'local_gateway_id'),
        local_gateway_route_table_id=pulumi.get(__ret__, 'local_gateway_route_table_id'),
        outpost_arn=pulumi.get(__ret__, 'outpost_arn'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_local_gateway_route_table)
def get_local_gateway_route_table_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetLocalGatewayRouteTableFilterArgs']]]]] = None,
                                         local_gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                                         local_gateway_route_table_id: Optional[pulumi.Input[Optional[str]]] = None,
                                         outpost_arn: Optional[pulumi.Input[Optional[str]]] = None,
                                         state: Optional[pulumi.Input[Optional[str]]] = None,
                                         tags: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLocalGatewayRouteTableResult]:
    """
    Provides details about an EC2 Local Gateway Route Table.

    This data source can prove useful when a module accepts a local gateway route table id as
    an input variable and needs to, for example, find the associated Outpost or Local Gateway.

    ## Example Usage

    The following example returns a specific local gateway route table ID

    ```python
    import pulumi
    import pulumi_aws as aws

    config = pulumi.Config()
    aws_ec2_local_gateway_route_table = config.require_object("awsEc2LocalGatewayRouteTable")
    selected = aws.ec2.get_local_gateway_route_table(local_gateway_route_table_id=aws_ec2_local_gateway_route_table)
    ```


    :param str local_gateway_id: ID of the specific local gateway route table to retrieve.
    :param str local_gateway_route_table_id: Local Gateway Route Table Id assigned to desired local gateway route table
    :param str outpost_arn: ARN of the Outpost the local gateway route table is associated with.
    :param str state: State of the local gateway route table.
    :param Mapping[str, str] tags: Mapping of tags, each pair of which must exactly match
           a pair on the desired local gateway route table.
           
           More complex filters can be expressed using one or more `filter` sub-blocks,
           which take the following arguments:
    """
    ...
