# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class DefaultNetworkAcl(pulumi.CustomResource):
    """
    Provides a resource to manage the default AWS Network ACL. VPC Only.
    
    Each VPC created in AWS comes with a Default Network ACL that can be managed, but not
    destroyed. **This is an advanced resource**, and has special caveats to be aware
    of when using it. Please read this document in its entirety before using this
    resource.
    
    The `aws_default_network_acl` behaves differently from normal resources, in that
    Terraform does not _create_ this resource, but instead attempts to "adopt" it
    into management. We can do this because each VPC created has a Default Network
    ACL that cannot be destroyed, and is created with a known set of default rules.
    
    When Terraform first adopts the Default Network ACL, it **immediately removes all
    rules in the ACL**. It then proceeds to create any rules specified in the
    configuration. This step is required so that only the rules specified in the
    configuration are created.
    
    This resource treats its inline rules as absolute; only the rules defined
    inline are created, and any additions/removals external to this resource will
    result in diffs being shown. For these reasons, this resource is incompatible with the
    `aws_network_acl_rule` resource.
    
    For more information about Network ACLs, see the AWS Documentation on
    [Network ACLs][aws-network-acls].
    """
    def __init__(__self__, __name__, __opts__=None, default_network_acl_id=None, egress=None, ingress=None, subnet_ids=None, tags=None):
        """Create a DefaultNetworkAcl resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not default_network_acl_id:
            raise TypeError('Missing required property default_network_acl_id')
        elif not isinstance(default_network_acl_id, basestring):
            raise TypeError('Expected property default_network_acl_id to be a basestring')
        __self__.default_network_acl_id = default_network_acl_id
        """
        The Network ACL ID to manage. This
        attribute is exported from `aws_vpc`, or manually found via the AWS Console.
        """
        __props__['defaultNetworkAclId'] = default_network_acl_id

        if egress and not isinstance(egress, list):
            raise TypeError('Expected property egress to be a list')
        __self__.egress = egress
        """
        Specifies an egress rule. Parameters defined below.
        """
        __props__['egress'] = egress

        if ingress and not isinstance(ingress, list):
            raise TypeError('Expected property ingress to be a list')
        __self__.ingress = ingress
        """
        Specifies an ingress rule. Parameters defined below.
        """
        __props__['ingress'] = ingress

        if subnet_ids and not isinstance(subnet_ids, list):
            raise TypeError('Expected property subnet_ids to be a list')
        __self__.subnet_ids = subnet_ids
        """
        A list of Subnet IDs to apply the ACL to. See the
        notes below on managing Subnets in the Default Network ACL
        """
        __props__['subnetIds'] = subnet_ids

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        __self__.vpc_id = pulumi.runtime.UNKNOWN
        """
        The ID of the associated VPC
        """

        super(DefaultNetworkAcl, __self__).__init__(
            'aws:ec2/defaultNetworkAcl:DefaultNetworkAcl',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'defaultNetworkAclId' in outs:
            self.default_network_acl_id = outs['defaultNetworkAclId']
        if 'egress' in outs:
            self.egress = outs['egress']
        if 'ingress' in outs:
            self.ingress = outs['ingress']
        if 'subnetIds' in outs:
            self.subnet_ids = outs['subnetIds']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'vpcId' in outs:
            self.vpc_id = outs['vpcId']
