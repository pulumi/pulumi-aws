# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetVpcResult(object):
    """
    A collection of values returned by getVpc.
    """
    def __init__(__self__, cidr_block=None, default=None, dhcp_options_id=None, enable_dns_hostnames=None, enable_dns_support=None, id=None, instance_tenancy=None, ipv6_association_id=None, ipv6_cidr_block=None, state=None, tags=None):
        if not cidr_block:
            raise TypeError('Missing required argument cidr_block')
        elif not isinstance(cidr_block, basestring):
            raise TypeError('Expected argument cidr_block to be a basestring')
        __self__.cidr_block = cidr_block
        if not default:
            raise TypeError('Missing required argument default')
        elif not isinstance(default, bool):
            raise TypeError('Expected argument default to be a bool')
        __self__.default = default
        if not dhcp_options_id:
            raise TypeError('Missing required argument dhcp_options_id')
        elif not isinstance(dhcp_options_id, basestring):
            raise TypeError('Expected argument dhcp_options_id to be a basestring')
        __self__.dhcp_options_id = dhcp_options_id
        if not enable_dns_hostnames:
            raise TypeError('Missing required argument enable_dns_hostnames')
        elif not isinstance(enable_dns_hostnames, bool):
            raise TypeError('Expected argument enable_dns_hostnames to be a bool')
        __self__.enable_dns_hostnames = enable_dns_hostnames
        """
        Whether or not the VPC has DNS hostname support
        """
        if not enable_dns_support:
            raise TypeError('Missing required argument enable_dns_support')
        elif not isinstance(enable_dns_support, bool):
            raise TypeError('Expected argument enable_dns_support to be a bool')
        __self__.enable_dns_support = enable_dns_support
        """
        Whether or not the VPC has DNS support
        """
        if not id:
            raise TypeError('Missing required argument id')
        elif not isinstance(id, basestring):
            raise TypeError('Expected argument id to be a basestring')
        __self__.id = id
        if not instance_tenancy:
            raise TypeError('Missing required argument instance_tenancy')
        elif not isinstance(instance_tenancy, basestring):
            raise TypeError('Expected argument instance_tenancy to be a basestring')
        __self__.instance_tenancy = instance_tenancy
        """
        The allowed tenancy of instances launched into the
        selected VPC. May be any of `"default"`, `"dedicated"`, or `"host"`.
        """
        if not ipv6_association_id:
            raise TypeError('Missing required argument ipv6_association_id')
        elif not isinstance(ipv6_association_id, basestring):
            raise TypeError('Expected argument ipv6_association_id to be a basestring')
        __self__.ipv6_association_id = ipv6_association_id
        """
        The association ID for the IPv6 CIDR block.
        """
        if not ipv6_cidr_block:
            raise TypeError('Missing required argument ipv6_cidr_block')
        elif not isinstance(ipv6_cidr_block, basestring):
            raise TypeError('Expected argument ipv6_cidr_block to be a basestring')
        __self__.ipv6_cidr_block = ipv6_cidr_block
        """
        The IPv6 CIDR block.
        """
        if not state:
            raise TypeError('Missing required argument state')
        elif not isinstance(state, basestring):
            raise TypeError('Expected argument state to be a basestring')
        __self__.state = state
        if not tags:
            raise TypeError('Missing required argument tags')
        elif not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags

def get_vpc(cidr_block=None, default=None, dhcp_options_id=None, filters=None, id=None, state=None, tags=None):
    """
    `aws_vpc` provides details about a specific VPC.
    
    This resource can prove useful when a module accepts a vpc id as
    an input variable and needs to, for example, determine the CIDR block of that
    VPC.
    """
    __args__ = dict()

    __args__['cidrBlock'] = cidr_block
    __args__['default'] = default
    __args__['dhcpOptionsId'] = dhcp_options_id
    __args__['filters'] = filters
    __args__['id'] = id
    __args__['state'] = state
    __args__['tags'] = tags
    __ret__ = pulumi.runtime.invoke('aws:ec2/getVpc:getVpc', __args__)

    return GetVpcResult(
        cidr_block=__ret__['cidrBlock'],
        default=__ret__['default'],
        dhcp_options_id=__ret__['dhcpOptionsId'],
        enable_dns_hostnames=__ret__['enableDnsHostnames'],
        enable_dns_support=__ret__['enableDnsSupport'],
        id=__ret__['id'],
        instance_tenancy=__ret__['instanceTenancy'],
        ipv6_association_id=__ret__['ipv6AssociationId'],
        ipv6_cidr_block=__ret__['ipv6CidrBlock'],
        state=__ret__['state'],
        tags=__ret__['tags'])
