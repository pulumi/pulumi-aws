# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetVpcPeeringConnectionResult(object):
    """
    A collection of values returned by getVpcPeeringConnection.
    """
    def __init__(__self__, accepter=None, cidr_block=None, id=None, owner_id=None, peer_cidr_block=None, peer_owner_id=None, peer_region=None, peer_vpc_id=None, region=None, requester=None, status=None, tags=None, vpc_id=None):
        if not accepter:
            raise TypeError('Missing required argument accepter')
        elif not isinstance(accepter, dict):
            raise TypeError('Expected argument accepter to be a dict')
        __self__.accepter = accepter
        """
        A configuration block that describes [VPC Peering Connection]
        (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options set for the accepter VPC.
        """
        if not cidr_block:
            raise TypeError('Missing required argument cidr_block')
        elif not isinstance(cidr_block, basestring):
            raise TypeError('Expected argument cidr_block to be a basestring')
        __self__.cidr_block = cidr_block
        if not id:
            raise TypeError('Missing required argument id')
        elif not isinstance(id, basestring):
            raise TypeError('Expected argument id to be a basestring')
        __self__.id = id
        if not owner_id:
            raise TypeError('Missing required argument owner_id')
        elif not isinstance(owner_id, basestring):
            raise TypeError('Expected argument owner_id to be a basestring')
        __self__.owner_id = owner_id
        if not peer_cidr_block:
            raise TypeError('Missing required argument peer_cidr_block')
        elif not isinstance(peer_cidr_block, basestring):
            raise TypeError('Expected argument peer_cidr_block to be a basestring')
        __self__.peer_cidr_block = peer_cidr_block
        if not peer_owner_id:
            raise TypeError('Missing required argument peer_owner_id')
        elif not isinstance(peer_owner_id, basestring):
            raise TypeError('Expected argument peer_owner_id to be a basestring')
        __self__.peer_owner_id = peer_owner_id
        if not peer_region:
            raise TypeError('Missing required argument peer_region')
        elif not isinstance(peer_region, basestring):
            raise TypeError('Expected argument peer_region to be a basestring')
        __self__.peer_region = peer_region
        if not peer_vpc_id:
            raise TypeError('Missing required argument peer_vpc_id')
        elif not isinstance(peer_vpc_id, basestring):
            raise TypeError('Expected argument peer_vpc_id to be a basestring')
        __self__.peer_vpc_id = peer_vpc_id
        if not region:
            raise TypeError('Missing required argument region')
        elif not isinstance(region, basestring):
            raise TypeError('Expected argument region to be a basestring')
        __self__.region = region
        if not requester:
            raise TypeError('Missing required argument requester')
        elif not isinstance(requester, dict):
            raise TypeError('Expected argument requester to be a dict')
        __self__.requester = requester
        """
        A configuration block that describes [VPC Peering Connection]
        (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options set for the requester VPC.
        """
        if not status:
            raise TypeError('Missing required argument status')
        elif not isinstance(status, basestring):
            raise TypeError('Expected argument status to be a basestring')
        __self__.status = status
        if not tags:
            raise TypeError('Missing required argument tags')
        elif not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags
        if not vpc_id:
            raise TypeError('Missing required argument vpc_id')
        elif not isinstance(vpc_id, basestring):
            raise TypeError('Expected argument vpc_id to be a basestring')
        __self__.vpc_id = vpc_id

def get_vpc_peering_connection(cidr_block=None, filters=None, id=None, owner_id=None, peer_cidr_block=None, peer_owner_id=None, peer_region=None, peer_vpc_id=None, region=None, status=None, tags=None, vpc_id=None):
    """
    The VPC Peering Connection data source provides details about
    a specific VPC peering connection.
    """
    __args__ = dict()

    __args__['cidrBlock'] = cidr_block
    __args__['filters'] = filters
    __args__['id'] = id
    __args__['ownerId'] = owner_id
    __args__['peerCidrBlock'] = peer_cidr_block
    __args__['peerOwnerId'] = peer_owner_id
    __args__['peerRegion'] = peer_region
    __args__['peerVpcId'] = peer_vpc_id
    __args__['region'] = region
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['vpcId'] = vpc_id
    __ret__ = pulumi.runtime.invoke('aws:ec2/getVpcPeeringConnection:getVpcPeeringConnection', __args__)

    return GetVpcPeeringConnectionResult(
        accepter=__ret__['accepter'],
        cidr_block=__ret__['cidrBlock'],
        id=__ret__['id'],
        owner_id=__ret__['ownerId'],
        peer_cidr_block=__ret__['peerCidrBlock'],
        peer_owner_id=__ret__['peerOwnerId'],
        peer_region=__ret__['peerRegion'],
        peer_vpc_id=__ret__['peerVpcId'],
        region=__ret__['region'],
        requester=__ret__['requester'],
        status=__ret__['status'],
        tags=__ret__['tags'],
        vpc_id=__ret__['vpcId'])
