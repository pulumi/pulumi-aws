# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetVpcEndpointServiceResult(object):
    """
    A collection of values returned by getVpcEndpointService.
    """
    def __init__(__self__, acceptance_required=None, availability_zones=None, base_endpoint_dns_names=None, owner=None, private_dns_name=None, service_name=None, service_type=None, vpc_endpoint_policy_supported=None):
        if not acceptance_required:
            raise TypeError('Missing required argument acceptance_required')
        elif not isinstance(acceptance_required, bool):
            raise TypeError('Expected argument acceptance_required to be a bool')
        __self__.acceptance_required = acceptance_required
        """
        Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
        """
        if not availability_zones:
            raise TypeError('Missing required argument availability_zones')
        elif not isinstance(availability_zones, list):
            raise TypeError('Expected argument availability_zones to be a list')
        __self__.availability_zones = availability_zones
        """
        The Availability Zones in which the service is available.
        """
        if not base_endpoint_dns_names:
            raise TypeError('Missing required argument base_endpoint_dns_names')
        elif not isinstance(base_endpoint_dns_names, list):
            raise TypeError('Expected argument base_endpoint_dns_names to be a list')
        __self__.base_endpoint_dns_names = base_endpoint_dns_names
        """
        The DNS names for the service.
        """
        if not owner:
            raise TypeError('Missing required argument owner')
        elif not isinstance(owner, basestring):
            raise TypeError('Expected argument owner to be a basestring')
        __self__.owner = owner
        """
        The AWS account ID of the service owner or `amazon`.
        """
        if not private_dns_name:
            raise TypeError('Missing required argument private_dns_name')
        elif not isinstance(private_dns_name, basestring):
            raise TypeError('Expected argument private_dns_name to be a basestring')
        __self__.private_dns_name = private_dns_name
        """
        The private DNS name for the service.
        """
        if not service_name:
            raise TypeError('Missing required argument service_name')
        elif not isinstance(service_name, basestring):
            raise TypeError('Expected argument service_name to be a basestring')
        __self__.service_name = service_name
        if not service_type:
            raise TypeError('Missing required argument service_type')
        elif not isinstance(service_type, basestring):
            raise TypeError('Expected argument service_type to be a basestring')
        __self__.service_type = service_type
        """
        The service type, `Gateway` or `Interface`.
        """
        if not vpc_endpoint_policy_supported:
            raise TypeError('Missing required argument vpc_endpoint_policy_supported')
        elif not isinstance(vpc_endpoint_policy_supported, bool):
            raise TypeError('Expected argument vpc_endpoint_policy_supported to be a bool')
        __self__.vpc_endpoint_policy_supported = vpc_endpoint_policy_supported
        """
        Whether or not the service supports endpoint policies - `true` or `false`.
        """

def get_vpc_endpoint_service(service=None, service_name=None):
    """
    The VPC Endpoint Service data source details about a specific service that
    can be specified when creating a VPC endpoint within the region configured in the provider.
    """
    __args__ = dict()

    __args__['service'] = service
    __args__['serviceName'] = service_name
    __ret__ = pulumi.runtime.invoke('aws:ec2/getVpcEndpointService:getVpcEndpointService', __args__)

    return GetVpcEndpointServiceResult(
        acceptance_required=__ret__['acceptanceRequired'],
        availability_zones=__ret__['availabilityZones'],
        base_endpoint_dns_names=__ret__['baseEndpointDnsNames'],
        owner=__ret__['owner'],
        private_dns_name=__ret__['privateDnsName'],
        service_name=__ret__['serviceName'],
        service_type=__ret__['serviceType'],
        vpc_endpoint_policy_supported=__ret__['vpcEndpointPolicySupported'])
