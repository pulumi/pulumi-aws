# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class SpotDatafeedSubscription(pulumi.CustomResource):
    bucket: pulumi.Output[str]
    """
    The Amazon S3 bucket in which to store the Spot instance data feed.
    """
    prefix: pulumi.Output[str]
    """
    Path of folder inside bucket to place spot pricing data.
    """
    def __init__(__self__, __name__, __opts__=None, bucket=None, prefix=None):
        """
        -> **Note:** There is only a single subscription allowed per account.
        
        To help you understand the charges for your Spot instances, Amazon EC2 provides a data feed that describes your Spot instance usage and pricing.
        This data feed is sent to an Amazon S3 bucket that you specify when you subscribe to the data feed.
        
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] bucket: The Amazon S3 bucket in which to store the Spot instance data feed.
        :param pulumi.Input[str] prefix: Path of folder inside bucket to place spot pricing data.
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not bucket:
            raise TypeError('Missing required property bucket')
        __props__['bucket'] = bucket

        __props__['prefix'] = prefix

        super(SpotDatafeedSubscription, __self__).__init__(
            'aws:ec2/spotDatafeedSubscription:SpotDatafeedSubscription',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

