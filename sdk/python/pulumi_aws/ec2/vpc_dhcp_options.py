# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class VpcDhcpOptions(pulumi.CustomResource):
    """
    Provides a VPC DHCP Options resource.
    * `domain_name_servers`, `netbios_name_servers`, `ntp_servers` are limited by AWS to maximum four servers only.
    * To actually use the DHCP Options Set you need to associate it to a VPC using [`aws_vpc_dhcp_options_association`](/docs/providers/aws/r/vpc_dhcp_options_association.html).
    * If you delete a DHCP Options Set, all VPCs using it will be associated to AWS's `default` DHCP Option Set.
    * In most cases unless you're configuring your own DNS you'll want to set `domain_name_servers` to `AmazonProvidedDNS`. 
    """
    def __init__(__self__, __name__, __opts__=None, domain_name=None, domain_name_servers=None, netbios_name_servers=None, netbios_node_type=None, ntp_servers=None, tags=None):
        """Create a VpcDhcpOptions resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if domain_name and not isinstance(domain_name, basestring):
            raise TypeError('Expected property domain_name to be a basestring')
        __self__.domain_name = domain_name
        """
        the suffix domain name to use by default when resolving non Fully Qualified Domain Names. In other words, this is what ends up being the `search` value in the `/etc/resolv.conf` file.
        """
        __props__['domainName'] = domain_name

        if domain_name_servers and not isinstance(domain_name_servers, list):
            raise TypeError('Expected property domain_name_servers to be a list')
        __self__.domain_name_servers = domain_name_servers
        """
        List of name servers to configure in `/etc/resolv.conf`. If you want to use the default AWS nameservers you should set this to `AmazonProvidedDNS`.
        """
        __props__['domainNameServers'] = domain_name_servers

        if netbios_name_servers and not isinstance(netbios_name_servers, list):
            raise TypeError('Expected property netbios_name_servers to be a list')
        __self__.netbios_name_servers = netbios_name_servers
        """
        List of NETBIOS name servers.
        """
        __props__['netbiosNameServers'] = netbios_name_servers

        if netbios_node_type and not isinstance(netbios_node_type, basestring):
            raise TypeError('Expected property netbios_node_type to be a basestring')
        __self__.netbios_node_type = netbios_node_type
        """
        The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
        """
        __props__['netbiosNodeType'] = netbios_node_type

        if ntp_servers and not isinstance(ntp_servers, list):
            raise TypeError('Expected property ntp_servers to be a list')
        __self__.ntp_servers = ntp_servers
        """
        List of NTP servers to configure.
        """
        __props__['ntpServers'] = ntp_servers

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        super(VpcDhcpOptions, __self__).__init__(
            'aws:ec2/vpcDhcpOptions:VpcDhcpOptions',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'domainName' in outs:
            self.domain_name = outs['domainName']
        if 'domainNameServers' in outs:
            self.domain_name_servers = outs['domainNameServers']
        if 'netbiosNameServers' in outs:
            self.netbios_name_servers = outs['netbiosNameServers']
        if 'netbiosNodeType' in outs:
            self.netbios_node_type = outs['netbiosNodeType']
        if 'ntpServers' in outs:
            self.ntp_servers = outs['ntpServers']
        if 'tags' in outs:
            self.tags = outs['tags']
