# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class VpcEndpoint(pulumi.CustomResource):
    """
    Provides a VPC Endpoint resource.
    
    ~> **NOTE on VPC Endpoints and VPC Endpoint Associations:** Terraform provides both standalone VPC Endpoint Associations for
    Route Tables - (an association between a VPC endpoint and a single `route_table_id`) and
    Subnets - (an association between a VPC endpoint and a single `subnet_id`) and
    a VPC Endpoint resource with `route_table_ids` and `subnet_ids` attributes.
    Do not use the same resource ID in both a VPC Endpoint resource and a VPC Endpoint Association resource.
    Doing so will cause a conflict of associations and will overwrite the association.
    """
    def __init__(__self__, __name__, __opts__=None, auto_accept=None, policy=None, private_dns_enabled=None, route_table_ids=None, security_group_ids=None, service_name=None, subnet_ids=None, vpc_endpoint_type=None, vpc_id=None):
        """Create a VpcEndpoint resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['autoAccept'] = auto_accept

        __props__['policy'] = policy

        __props__['privateDnsEnabled'] = private_dns_enabled

        __props__['routeTableIds'] = route_table_ids

        __props__['securityGroupIds'] = security_group_ids

        if not service_name:
            raise TypeError('Missing required property service_name')
        __props__['serviceName'] = service_name

        __props__['subnetIds'] = subnet_ids

        __props__['vpcEndpointType'] = vpc_endpoint_type

        if not vpc_id:
            raise TypeError('Missing required property vpc_id')
        __props__['vpcId'] = vpc_id

        __props__['cidr_blocks'] = None
        __props__['dns_entries'] = None
        __props__['network_interface_ids'] = None
        __props__['prefix_list_id'] = None
        __props__['state'] = None

        super(VpcEndpoint, __self__).__init__(
            'aws:ec2/vpcEndpoint:VpcEndpoint',
            __name__,
            __props__,
            __opts__)

