# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPublicIpv4PoolsResult',
    'AwaitableGetPublicIpv4PoolsResult',
    'get_public_ipv4_pools',
    'get_public_ipv4_pools_output',
]

@pulumi.output_type
class GetPublicIpv4PoolsResult:
    """
    A collection of values returned by getPublicIpv4Pools.
    """
    def __init__(__self__, filters=None, id=None, pool_ids=None, tags=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pool_ids and not isinstance(pool_ids, list):
            raise TypeError("Expected argument 'pool_ids' to be a list")
        pulumi.set(__self__, "pool_ids", pool_ids)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetPublicIpv4PoolsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="poolIds")
    def pool_ids(self) -> Sequence[str]:
        """
        List of all the pool IDs found.
        """
        return pulumi.get(self, "pool_ids")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "tags")


class AwaitableGetPublicIpv4PoolsResult(GetPublicIpv4PoolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicIpv4PoolsResult(
            filters=self.filters,
            id=self.id,
            pool_ids=self.pool_ids,
            tags=self.tags)


def get_public_ipv4_pools(filters: Optional[Sequence[pulumi.InputType['GetPublicIpv4PoolsFilterArgs']]] = None,
                          tags: Optional[Mapping[str, str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicIpv4PoolsResult:
    """
    Data source for getting information about AWS EC2 Public IPv4 Pools.

    ## Example Usage
    ### Basic Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.ec2.get_public_ipv4_pools()
    ```
    ### Usage with Filter

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.ec2.get_public_ipv4_pools(filters=[aws.ec2.GetPublicIpv4PoolsFilterArgs(
        name="tag-key",
        values=["ExampleTagKey"],
    )])
    ```


    :param Sequence[pulumi.InputType['GetPublicIpv4PoolsFilterArgs']] filters: Custom filter block as described below.
    :param Mapping[str, str] tags: Map of tags, each pair of which must exactly match a pair on the desired pools.
           
           More complex filters can be expressed using one or more `filter` sub-blocks,
           which take the following arguments:
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:ec2/getPublicIpv4Pools:getPublicIpv4Pools', __args__, opts=opts, typ=GetPublicIpv4PoolsResult).value

    return AwaitableGetPublicIpv4PoolsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        pool_ids=pulumi.get(__ret__, 'pool_ids'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_public_ipv4_pools)
def get_public_ipv4_pools_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPublicIpv4PoolsFilterArgs']]]]] = None,
                                 tags: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPublicIpv4PoolsResult]:
    """
    Data source for getting information about AWS EC2 Public IPv4 Pools.

    ## Example Usage
    ### Basic Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.ec2.get_public_ipv4_pools()
    ```
    ### Usage with Filter

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.ec2.get_public_ipv4_pools(filters=[aws.ec2.GetPublicIpv4PoolsFilterArgs(
        name="tag-key",
        values=["ExampleTagKey"],
    )])
    ```


    :param Sequence[pulumi.InputType['GetPublicIpv4PoolsFilterArgs']] filters: Custom filter block as described below.
    :param Mapping[str, str] tags: Map of tags, each pair of which must exactly match a pair on the desired pools.
           
           More complex filters can be expressed using one or more `filter` sub-blocks,
           which take the following arguments:
    """
    ...
