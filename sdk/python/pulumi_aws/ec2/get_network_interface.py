# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetNetworkInterfaceResult(object):
    """
    A collection of values returned by getNetworkInterface.
    """
    def __init__(__self__, associations=None, attachments=None, availability_zone=None, description=None, id=None, interface_type=None, ipv6_addresses=None, mac_address=None, owner_id=None, private_dns_name=None, private_ip=None, private_ips=None, requester_id=None, security_groups=None, subnet_id=None, tags=None, vpc_id=None):
        if not associations:
            raise TypeError('Missing required argument associations')
        elif not isinstance(associations, list):
            raise TypeError('Expected argument associations to be a list')
        __self__.associations = associations
        """
        The association information for an Elastic IP address (IPv4) associated with the network interface. See supported fields below.
        """
        if not attachments:
            raise TypeError('Missing required argument attachments')
        elif not isinstance(attachments, list):
            raise TypeError('Expected argument attachments to be a list')
        __self__.attachments = attachments
        if not availability_zone:
            raise TypeError('Missing required argument availability_zone')
        elif not isinstance(availability_zone, basestring):
            raise TypeError('Expected argument availability_zone to be a basestring')
        __self__.availability_zone = availability_zone
        """
        The Availability Zone.
        """
        if not description:
            raise TypeError('Missing required argument description')
        elif not isinstance(description, basestring):
            raise TypeError('Expected argument description to be a basestring')
        __self__.description = description
        if not id:
            raise TypeError('Missing required argument id')
        elif not isinstance(id, basestring):
            raise TypeError('Expected argument id to be a basestring')
        __self__.id = id
        if not interface_type:
            raise TypeError('Missing required argument interface_type')
        elif not isinstance(interface_type, basestring):
            raise TypeError('Expected argument interface_type to be a basestring')
        __self__.interface_type = interface_type
        """
        The type of interface.
        """
        if not ipv6_addresses:
            raise TypeError('Missing required argument ipv6_addresses')
        elif not isinstance(ipv6_addresses, list):
            raise TypeError('Expected argument ipv6_addresses to be a list')
        __self__.ipv6_addresses = ipv6_addresses
        """
        List of IPv6 addresses to assign to the ENI.
        """
        if not mac_address:
            raise TypeError('Missing required argument mac_address')
        elif not isinstance(mac_address, basestring):
            raise TypeError('Expected argument mac_address to be a basestring')
        __self__.mac_address = mac_address
        """
        The MAC address.
        """
        if not owner_id:
            raise TypeError('Missing required argument owner_id')
        elif not isinstance(owner_id, basestring):
            raise TypeError('Expected argument owner_id to be a basestring')
        __self__.owner_id = owner_id
        """
        The AWS account ID of the owner of the network interface.
        """
        if not private_dns_name:
            raise TypeError('Missing required argument private_dns_name')
        elif not isinstance(private_dns_name, basestring):
            raise TypeError('Expected argument private_dns_name to be a basestring')
        __self__.private_dns_name = private_dns_name
        if not private_ip:
            raise TypeError('Missing required argument private_ip')
        elif not isinstance(private_ip, basestring):
            raise TypeError('Expected argument private_ip to be a basestring')
        __self__.private_ip = private_ip
        if not private_ips:
            raise TypeError('Missing required argument private_ips')
        elif not isinstance(private_ips, list):
            raise TypeError('Expected argument private_ips to be a list')
        __self__.private_ips = private_ips
        if not requester_id:
            raise TypeError('Missing required argument requester_id')
        elif not isinstance(requester_id, basestring):
            raise TypeError('Expected argument requester_id to be a basestring')
        __self__.requester_id = requester_id
        """
        The ID of the entity that launched the instance on your behalf.
        """
        if not security_groups:
            raise TypeError('Missing required argument security_groups')
        elif not isinstance(security_groups, list):
            raise TypeError('Expected argument security_groups to be a list')
        __self__.security_groups = security_groups
        if not subnet_id:
            raise TypeError('Missing required argument subnet_id')
        elif not isinstance(subnet_id, basestring):
            raise TypeError('Expected argument subnet_id to be a basestring')
        __self__.subnet_id = subnet_id
        if not tags:
            raise TypeError('Missing required argument tags')
        elif not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags
        if not vpc_id:
            raise TypeError('Missing required argument vpc_id')
        elif not isinstance(vpc_id, basestring):
            raise TypeError('Expected argument vpc_id to be a basestring')
        __self__.vpc_id = vpc_id

def get_network_interface(filters=None, id=None, tags=None):
    """
    Use this data source to get information about a Network Interface.
    """
    __args__ = dict()

    __args__['filters'] = filters
    __args__['id'] = id
    __args__['tags'] = tags
    __ret__ = pulumi.runtime.invoke('aws:ec2/getNetworkInterface:getNetworkInterface', __args__)

    return GetNetworkInterfaceResult(
        associations=__ret__['associations'],
        attachments=__ret__['attachments'],
        availability_zone=__ret__['availabilityZone'],
        description=__ret__['description'],
        id=__ret__['id'],
        interface_type=__ret__['interfaceType'],
        ipv6_addresses=__ret__['ipv6Addresses'],
        mac_address=__ret__['macAddress'],
        owner_id=__ret__['ownerId'],
        private_dns_name=__ret__['privateDnsName'],
        private_ip=__ret__['privateIp'],
        private_ips=__ret__['privateIps'],
        requester_id=__ret__['requesterId'],
        security_groups=__ret__['securityGroups'],
        subnet_id=__ret__['subnetId'],
        tags=__ret__['tags'],
        vpc_id=__ret__['vpcId'])
