# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VpnConnectionArgs', 'VpnConnection']

@pulumi.input_type
class VpnConnectionArgs:
    def __init__(__self__, *,
                 customer_gateway_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 enable_acceleration: Optional[pulumi.Input[bool]] = None,
                 local_ipv4_network_cidr: Optional[pulumi.Input[str]] = None,
                 local_ipv6_network_cidr: Optional[pulumi.Input[str]] = None,
                 outside_ip_address_type: Optional[pulumi.Input[str]] = None,
                 remote_ipv4_network_cidr: Optional[pulumi.Input[str]] = None,
                 remote_ipv6_network_cidr: Optional[pulumi.Input[str]] = None,
                 static_routes_only: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transit_gateway_id: Optional[pulumi.Input[str]] = None,
                 transport_transit_gateway_attachment_id: Optional[pulumi.Input[str]] = None,
                 tunnel1_dpd_timeout_action: Optional[pulumi.Input[str]] = None,
                 tunnel1_dpd_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_ike_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_inside_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel1_inside_ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel1_log_options: Optional[pulumi.Input['VpnConnectionTunnel1LogOptionsArgs']] = None,
                 tunnel1_phase1_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel1_phase1_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase1_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase1_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_phase2_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel1_phase2_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase2_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase2_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_preshared_key: Optional[pulumi.Input[str]] = None,
                 tunnel1_rekey_fuzz_percentage: Optional[pulumi.Input[int]] = None,
                 tunnel1_rekey_margin_time_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_replay_window_size: Optional[pulumi.Input[int]] = None,
                 tunnel1_startup_action: Optional[pulumi.Input[str]] = None,
                 tunnel2_dpd_timeout_action: Optional[pulumi.Input[str]] = None,
                 tunnel2_dpd_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_ike_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_inside_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel2_inside_ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel2_log_options: Optional[pulumi.Input['VpnConnectionTunnel2LogOptionsArgs']] = None,
                 tunnel2_phase1_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel2_phase1_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase1_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase1_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_phase2_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel2_phase2_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase2_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase2_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_preshared_key: Optional[pulumi.Input[str]] = None,
                 tunnel2_rekey_fuzz_percentage: Optional[pulumi.Input[int]] = None,
                 tunnel2_rekey_margin_time_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_replay_window_size: Optional[pulumi.Input[int]] = None,
                 tunnel2_startup_action: Optional[pulumi.Input[str]] = None,
                 tunnel_inside_ip_version: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpnConnection resource.
        """
        pulumi.set(__self__, "customer_gateway_id", customer_gateway_id)
        pulumi.set(__self__, "type", type)
        if enable_acceleration is not None:
            pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        if local_ipv4_network_cidr is not None:
            pulumi.set(__self__, "local_ipv4_network_cidr", local_ipv4_network_cidr)
        if local_ipv6_network_cidr is not None:
            pulumi.set(__self__, "local_ipv6_network_cidr", local_ipv6_network_cidr)
        if outside_ip_address_type is not None:
            pulumi.set(__self__, "outside_ip_address_type", outside_ip_address_type)
        if remote_ipv4_network_cidr is not None:
            pulumi.set(__self__, "remote_ipv4_network_cidr", remote_ipv4_network_cidr)
        if remote_ipv6_network_cidr is not None:
            pulumi.set(__self__, "remote_ipv6_network_cidr", remote_ipv6_network_cidr)
        if static_routes_only is not None:
            pulumi.set(__self__, "static_routes_only", static_routes_only)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if transit_gateway_id is not None:
            pulumi.set(__self__, "transit_gateway_id", transit_gateway_id)
        if transport_transit_gateway_attachment_id is not None:
            pulumi.set(__self__, "transport_transit_gateway_attachment_id", transport_transit_gateway_attachment_id)
        if tunnel1_dpd_timeout_action is not None:
            pulumi.set(__self__, "tunnel1_dpd_timeout_action", tunnel1_dpd_timeout_action)
        if tunnel1_dpd_timeout_seconds is not None:
            pulumi.set(__self__, "tunnel1_dpd_timeout_seconds", tunnel1_dpd_timeout_seconds)
        if tunnel1_ike_versions is not None:
            pulumi.set(__self__, "tunnel1_ike_versions", tunnel1_ike_versions)
        if tunnel1_inside_cidr is not None:
            pulumi.set(__self__, "tunnel1_inside_cidr", tunnel1_inside_cidr)
        if tunnel1_inside_ipv6_cidr is not None:
            pulumi.set(__self__, "tunnel1_inside_ipv6_cidr", tunnel1_inside_ipv6_cidr)
        if tunnel1_log_options is not None:
            pulumi.set(__self__, "tunnel1_log_options", tunnel1_log_options)
        if tunnel1_phase1_dh_group_numbers is not None:
            pulumi.set(__self__, "tunnel1_phase1_dh_group_numbers", tunnel1_phase1_dh_group_numbers)
        if tunnel1_phase1_encryption_algorithms is not None:
            pulumi.set(__self__, "tunnel1_phase1_encryption_algorithms", tunnel1_phase1_encryption_algorithms)
        if tunnel1_phase1_integrity_algorithms is not None:
            pulumi.set(__self__, "tunnel1_phase1_integrity_algorithms", tunnel1_phase1_integrity_algorithms)
        if tunnel1_phase1_lifetime_seconds is not None:
            pulumi.set(__self__, "tunnel1_phase1_lifetime_seconds", tunnel1_phase1_lifetime_seconds)
        if tunnel1_phase2_dh_group_numbers is not None:
            pulumi.set(__self__, "tunnel1_phase2_dh_group_numbers", tunnel1_phase2_dh_group_numbers)
        if tunnel1_phase2_encryption_algorithms is not None:
            pulumi.set(__self__, "tunnel1_phase2_encryption_algorithms", tunnel1_phase2_encryption_algorithms)
        if tunnel1_phase2_integrity_algorithms is not None:
            pulumi.set(__self__, "tunnel1_phase2_integrity_algorithms", tunnel1_phase2_integrity_algorithms)
        if tunnel1_phase2_lifetime_seconds is not None:
            pulumi.set(__self__, "tunnel1_phase2_lifetime_seconds", tunnel1_phase2_lifetime_seconds)
        if tunnel1_preshared_key is not None:
            pulumi.set(__self__, "tunnel1_preshared_key", tunnel1_preshared_key)
        if tunnel1_rekey_fuzz_percentage is not None:
            pulumi.set(__self__, "tunnel1_rekey_fuzz_percentage", tunnel1_rekey_fuzz_percentage)
        if tunnel1_rekey_margin_time_seconds is not None:
            pulumi.set(__self__, "tunnel1_rekey_margin_time_seconds", tunnel1_rekey_margin_time_seconds)
        if tunnel1_replay_window_size is not None:
            pulumi.set(__self__, "tunnel1_replay_window_size", tunnel1_replay_window_size)
        if tunnel1_startup_action is not None:
            pulumi.set(__self__, "tunnel1_startup_action", tunnel1_startup_action)
        if tunnel2_dpd_timeout_action is not None:
            pulumi.set(__self__, "tunnel2_dpd_timeout_action", tunnel2_dpd_timeout_action)
        if tunnel2_dpd_timeout_seconds is not None:
            pulumi.set(__self__, "tunnel2_dpd_timeout_seconds", tunnel2_dpd_timeout_seconds)
        if tunnel2_ike_versions is not None:
            pulumi.set(__self__, "tunnel2_ike_versions", tunnel2_ike_versions)
        if tunnel2_inside_cidr is not None:
            pulumi.set(__self__, "tunnel2_inside_cidr", tunnel2_inside_cidr)
        if tunnel2_inside_ipv6_cidr is not None:
            pulumi.set(__self__, "tunnel2_inside_ipv6_cidr", tunnel2_inside_ipv6_cidr)
        if tunnel2_log_options is not None:
            pulumi.set(__self__, "tunnel2_log_options", tunnel2_log_options)
        if tunnel2_phase1_dh_group_numbers is not None:
            pulumi.set(__self__, "tunnel2_phase1_dh_group_numbers", tunnel2_phase1_dh_group_numbers)
        if tunnel2_phase1_encryption_algorithms is not None:
            pulumi.set(__self__, "tunnel2_phase1_encryption_algorithms", tunnel2_phase1_encryption_algorithms)
        if tunnel2_phase1_integrity_algorithms is not None:
            pulumi.set(__self__, "tunnel2_phase1_integrity_algorithms", tunnel2_phase1_integrity_algorithms)
        if tunnel2_phase1_lifetime_seconds is not None:
            pulumi.set(__self__, "tunnel2_phase1_lifetime_seconds", tunnel2_phase1_lifetime_seconds)
        if tunnel2_phase2_dh_group_numbers is not None:
            pulumi.set(__self__, "tunnel2_phase2_dh_group_numbers", tunnel2_phase2_dh_group_numbers)
        if tunnel2_phase2_encryption_algorithms is not None:
            pulumi.set(__self__, "tunnel2_phase2_encryption_algorithms", tunnel2_phase2_encryption_algorithms)
        if tunnel2_phase2_integrity_algorithms is not None:
            pulumi.set(__self__, "tunnel2_phase2_integrity_algorithms", tunnel2_phase2_integrity_algorithms)
        if tunnel2_phase2_lifetime_seconds is not None:
            pulumi.set(__self__, "tunnel2_phase2_lifetime_seconds", tunnel2_phase2_lifetime_seconds)
        if tunnel2_preshared_key is not None:
            pulumi.set(__self__, "tunnel2_preshared_key", tunnel2_preshared_key)
        if tunnel2_rekey_fuzz_percentage is not None:
            pulumi.set(__self__, "tunnel2_rekey_fuzz_percentage", tunnel2_rekey_fuzz_percentage)
        if tunnel2_rekey_margin_time_seconds is not None:
            pulumi.set(__self__, "tunnel2_rekey_margin_time_seconds", tunnel2_rekey_margin_time_seconds)
        if tunnel2_replay_window_size is not None:
            pulumi.set(__self__, "tunnel2_replay_window_size", tunnel2_replay_window_size)
        if tunnel2_startup_action is not None:
            pulumi.set(__self__, "tunnel2_startup_action", tunnel2_startup_action)
        if tunnel_inside_ip_version is not None:
            pulumi.set(__self__, "tunnel_inside_ip_version", tunnel_inside_ip_version)
        if vpn_gateway_id is not None:
            pulumi.set(__self__, "vpn_gateway_id", vpn_gateway_id)

    @property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "customer_gateway_id")

    @customer_gateway_id.setter
    def customer_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "customer_gateway_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_acceleration")

    @enable_acceleration.setter
    def enable_acceleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_acceleration", value)

    @property
    @pulumi.getter(name="localIpv4NetworkCidr")
    def local_ipv4_network_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_ipv4_network_cidr")

    @local_ipv4_network_cidr.setter
    def local_ipv4_network_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_ipv4_network_cidr", value)

    @property
    @pulumi.getter(name="localIpv6NetworkCidr")
    def local_ipv6_network_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_ipv6_network_cidr")

    @local_ipv6_network_cidr.setter
    def local_ipv6_network_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_ipv6_network_cidr", value)

    @property
    @pulumi.getter(name="outsideIpAddressType")
    def outside_ip_address_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outside_ip_address_type")

    @outside_ip_address_type.setter
    def outside_ip_address_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outside_ip_address_type", value)

    @property
    @pulumi.getter(name="remoteIpv4NetworkCidr")
    def remote_ipv4_network_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_ipv4_network_cidr")

    @remote_ipv4_network_cidr.setter
    def remote_ipv4_network_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_ipv4_network_cidr", value)

    @property
    @pulumi.getter(name="remoteIpv6NetworkCidr")
    def remote_ipv6_network_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_ipv6_network_cidr")

    @remote_ipv6_network_cidr.setter
    def remote_ipv6_network_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_ipv6_network_cidr", value)

    @property
    @pulumi.getter(name="staticRoutesOnly")
    def static_routes_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "static_routes_only")

    @static_routes_only.setter
    def static_routes_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "static_routes_only", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="transitGatewayId")
    def transit_gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transit_gateway_id")

    @transit_gateway_id.setter
    def transit_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transit_gateway_id", value)

    @property
    @pulumi.getter(name="transportTransitGatewayAttachmentId")
    def transport_transit_gateway_attachment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport_transit_gateway_attachment_id")

    @transport_transit_gateway_attachment_id.setter
    def transport_transit_gateway_attachment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport_transit_gateway_attachment_id", value)

    @property
    @pulumi.getter(name="tunnel1DpdTimeoutAction")
    def tunnel1_dpd_timeout_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_dpd_timeout_action")

    @tunnel1_dpd_timeout_action.setter
    def tunnel1_dpd_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_dpd_timeout_action", value)

    @property
    @pulumi.getter(name="tunnel1DpdTimeoutSeconds")
    def tunnel1_dpd_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_dpd_timeout_seconds")

    @tunnel1_dpd_timeout_seconds.setter
    def tunnel1_dpd_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_dpd_timeout_seconds", value)

    @property
    @pulumi.getter(name="tunnel1IkeVersions")
    def tunnel1_ike_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel1_ike_versions")

    @tunnel1_ike_versions.setter
    def tunnel1_ike_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel1_ike_versions", value)

    @property
    @pulumi.getter(name="tunnel1InsideCidr")
    def tunnel1_inside_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_inside_cidr")

    @tunnel1_inside_cidr.setter
    def tunnel1_inside_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_inside_cidr", value)

    @property
    @pulumi.getter(name="tunnel1InsideIpv6Cidr")
    def tunnel1_inside_ipv6_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_inside_ipv6_cidr")

    @tunnel1_inside_ipv6_cidr.setter
    def tunnel1_inside_ipv6_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_inside_ipv6_cidr", value)

    @property
    @pulumi.getter(name="tunnel1LogOptions")
    def tunnel1_log_options(self) -> Optional[pulumi.Input['VpnConnectionTunnel1LogOptionsArgs']]:
        return pulumi.get(self, "tunnel1_log_options")

    @tunnel1_log_options.setter
    def tunnel1_log_options(self, value: Optional[pulumi.Input['VpnConnectionTunnel1LogOptionsArgs']]):
        pulumi.set(self, "tunnel1_log_options", value)

    @property
    @pulumi.getter(name="tunnel1Phase1DhGroupNumbers")
    def tunnel1_phase1_dh_group_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "tunnel1_phase1_dh_group_numbers")

    @tunnel1_phase1_dh_group_numbers.setter
    def tunnel1_phase1_dh_group_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tunnel1_phase1_dh_group_numbers", value)

    @property
    @pulumi.getter(name="tunnel1Phase1EncryptionAlgorithms")
    def tunnel1_phase1_encryption_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel1_phase1_encryption_algorithms")

    @tunnel1_phase1_encryption_algorithms.setter
    def tunnel1_phase1_encryption_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel1_phase1_encryption_algorithms", value)

    @property
    @pulumi.getter(name="tunnel1Phase1IntegrityAlgorithms")
    def tunnel1_phase1_integrity_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel1_phase1_integrity_algorithms")

    @tunnel1_phase1_integrity_algorithms.setter
    def tunnel1_phase1_integrity_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel1_phase1_integrity_algorithms", value)

    @property
    @pulumi.getter(name="tunnel1Phase1LifetimeSeconds")
    def tunnel1_phase1_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_phase1_lifetime_seconds")

    @tunnel1_phase1_lifetime_seconds.setter
    def tunnel1_phase1_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_phase1_lifetime_seconds", value)

    @property
    @pulumi.getter(name="tunnel1Phase2DhGroupNumbers")
    def tunnel1_phase2_dh_group_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "tunnel1_phase2_dh_group_numbers")

    @tunnel1_phase2_dh_group_numbers.setter
    def tunnel1_phase2_dh_group_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tunnel1_phase2_dh_group_numbers", value)

    @property
    @pulumi.getter(name="tunnel1Phase2EncryptionAlgorithms")
    def tunnel1_phase2_encryption_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel1_phase2_encryption_algorithms")

    @tunnel1_phase2_encryption_algorithms.setter
    def tunnel1_phase2_encryption_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel1_phase2_encryption_algorithms", value)

    @property
    @pulumi.getter(name="tunnel1Phase2IntegrityAlgorithms")
    def tunnel1_phase2_integrity_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel1_phase2_integrity_algorithms")

    @tunnel1_phase2_integrity_algorithms.setter
    def tunnel1_phase2_integrity_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel1_phase2_integrity_algorithms", value)

    @property
    @pulumi.getter(name="tunnel1Phase2LifetimeSeconds")
    def tunnel1_phase2_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_phase2_lifetime_seconds")

    @tunnel1_phase2_lifetime_seconds.setter
    def tunnel1_phase2_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_phase2_lifetime_seconds", value)

    @property
    @pulumi.getter(name="tunnel1PresharedKey")
    def tunnel1_preshared_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_preshared_key")

    @tunnel1_preshared_key.setter
    def tunnel1_preshared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_preshared_key", value)

    @property
    @pulumi.getter(name="tunnel1RekeyFuzzPercentage")
    def tunnel1_rekey_fuzz_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_rekey_fuzz_percentage")

    @tunnel1_rekey_fuzz_percentage.setter
    def tunnel1_rekey_fuzz_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_rekey_fuzz_percentage", value)

    @property
    @pulumi.getter(name="tunnel1RekeyMarginTimeSeconds")
    def tunnel1_rekey_margin_time_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_rekey_margin_time_seconds")

    @tunnel1_rekey_margin_time_seconds.setter
    def tunnel1_rekey_margin_time_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_rekey_margin_time_seconds", value)

    @property
    @pulumi.getter(name="tunnel1ReplayWindowSize")
    def tunnel1_replay_window_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_replay_window_size")

    @tunnel1_replay_window_size.setter
    def tunnel1_replay_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_replay_window_size", value)

    @property
    @pulumi.getter(name="tunnel1StartupAction")
    def tunnel1_startup_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_startup_action")

    @tunnel1_startup_action.setter
    def tunnel1_startup_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_startup_action", value)

    @property
    @pulumi.getter(name="tunnel2DpdTimeoutAction")
    def tunnel2_dpd_timeout_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_dpd_timeout_action")

    @tunnel2_dpd_timeout_action.setter
    def tunnel2_dpd_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_dpd_timeout_action", value)

    @property
    @pulumi.getter(name="tunnel2DpdTimeoutSeconds")
    def tunnel2_dpd_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_dpd_timeout_seconds")

    @tunnel2_dpd_timeout_seconds.setter
    def tunnel2_dpd_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_dpd_timeout_seconds", value)

    @property
    @pulumi.getter(name="tunnel2IkeVersions")
    def tunnel2_ike_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel2_ike_versions")

    @tunnel2_ike_versions.setter
    def tunnel2_ike_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel2_ike_versions", value)

    @property
    @pulumi.getter(name="tunnel2InsideCidr")
    def tunnel2_inside_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_inside_cidr")

    @tunnel2_inside_cidr.setter
    def tunnel2_inside_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_inside_cidr", value)

    @property
    @pulumi.getter(name="tunnel2InsideIpv6Cidr")
    def tunnel2_inside_ipv6_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_inside_ipv6_cidr")

    @tunnel2_inside_ipv6_cidr.setter
    def tunnel2_inside_ipv6_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_inside_ipv6_cidr", value)

    @property
    @pulumi.getter(name="tunnel2LogOptions")
    def tunnel2_log_options(self) -> Optional[pulumi.Input['VpnConnectionTunnel2LogOptionsArgs']]:
        return pulumi.get(self, "tunnel2_log_options")

    @tunnel2_log_options.setter
    def tunnel2_log_options(self, value: Optional[pulumi.Input['VpnConnectionTunnel2LogOptionsArgs']]):
        pulumi.set(self, "tunnel2_log_options", value)

    @property
    @pulumi.getter(name="tunnel2Phase1DhGroupNumbers")
    def tunnel2_phase1_dh_group_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "tunnel2_phase1_dh_group_numbers")

    @tunnel2_phase1_dh_group_numbers.setter
    def tunnel2_phase1_dh_group_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tunnel2_phase1_dh_group_numbers", value)

    @property
    @pulumi.getter(name="tunnel2Phase1EncryptionAlgorithms")
    def tunnel2_phase1_encryption_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel2_phase1_encryption_algorithms")

    @tunnel2_phase1_encryption_algorithms.setter
    def tunnel2_phase1_encryption_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel2_phase1_encryption_algorithms", value)

    @property
    @pulumi.getter(name="tunnel2Phase1IntegrityAlgorithms")
    def tunnel2_phase1_integrity_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel2_phase1_integrity_algorithms")

    @tunnel2_phase1_integrity_algorithms.setter
    def tunnel2_phase1_integrity_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel2_phase1_integrity_algorithms", value)

    @property
    @pulumi.getter(name="tunnel2Phase1LifetimeSeconds")
    def tunnel2_phase1_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_phase1_lifetime_seconds")

    @tunnel2_phase1_lifetime_seconds.setter
    def tunnel2_phase1_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_phase1_lifetime_seconds", value)

    @property
    @pulumi.getter(name="tunnel2Phase2DhGroupNumbers")
    def tunnel2_phase2_dh_group_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "tunnel2_phase2_dh_group_numbers")

    @tunnel2_phase2_dh_group_numbers.setter
    def tunnel2_phase2_dh_group_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tunnel2_phase2_dh_group_numbers", value)

    @property
    @pulumi.getter(name="tunnel2Phase2EncryptionAlgorithms")
    def tunnel2_phase2_encryption_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel2_phase2_encryption_algorithms")

    @tunnel2_phase2_encryption_algorithms.setter
    def tunnel2_phase2_encryption_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel2_phase2_encryption_algorithms", value)

    @property
    @pulumi.getter(name="tunnel2Phase2IntegrityAlgorithms")
    def tunnel2_phase2_integrity_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel2_phase2_integrity_algorithms")

    @tunnel2_phase2_integrity_algorithms.setter
    def tunnel2_phase2_integrity_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel2_phase2_integrity_algorithms", value)

    @property
    @pulumi.getter(name="tunnel2Phase2LifetimeSeconds")
    def tunnel2_phase2_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_phase2_lifetime_seconds")

    @tunnel2_phase2_lifetime_seconds.setter
    def tunnel2_phase2_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_phase2_lifetime_seconds", value)

    @property
    @pulumi.getter(name="tunnel2PresharedKey")
    def tunnel2_preshared_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_preshared_key")

    @tunnel2_preshared_key.setter
    def tunnel2_preshared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_preshared_key", value)

    @property
    @pulumi.getter(name="tunnel2RekeyFuzzPercentage")
    def tunnel2_rekey_fuzz_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_rekey_fuzz_percentage")

    @tunnel2_rekey_fuzz_percentage.setter
    def tunnel2_rekey_fuzz_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_rekey_fuzz_percentage", value)

    @property
    @pulumi.getter(name="tunnel2RekeyMarginTimeSeconds")
    def tunnel2_rekey_margin_time_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_rekey_margin_time_seconds")

    @tunnel2_rekey_margin_time_seconds.setter
    def tunnel2_rekey_margin_time_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_rekey_margin_time_seconds", value)

    @property
    @pulumi.getter(name="tunnel2ReplayWindowSize")
    def tunnel2_replay_window_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_replay_window_size")

    @tunnel2_replay_window_size.setter
    def tunnel2_replay_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_replay_window_size", value)

    @property
    @pulumi.getter(name="tunnel2StartupAction")
    def tunnel2_startup_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_startup_action")

    @tunnel2_startup_action.setter
    def tunnel2_startup_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_startup_action", value)

    @property
    @pulumi.getter(name="tunnelInsideIpVersion")
    def tunnel_inside_ip_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_inside_ip_version")

    @tunnel_inside_ip_version.setter
    def tunnel_inside_ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_inside_ip_version", value)

    @property
    @pulumi.getter(name="vpnGatewayId")
    def vpn_gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_gateway_id")

    @vpn_gateway_id.setter
    def vpn_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_gateway_id", value)


@pulumi.input_type
class _VpnConnectionState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 core_network_arn: Optional[pulumi.Input[str]] = None,
                 core_network_attachment_arn: Optional[pulumi.Input[str]] = None,
                 customer_gateway_configuration: Optional[pulumi.Input[str]] = None,
                 customer_gateway_id: Optional[pulumi.Input[str]] = None,
                 enable_acceleration: Optional[pulumi.Input[bool]] = None,
                 local_ipv4_network_cidr: Optional[pulumi.Input[str]] = None,
                 local_ipv6_network_cidr: Optional[pulumi.Input[str]] = None,
                 outside_ip_address_type: Optional[pulumi.Input[str]] = None,
                 remote_ipv4_network_cidr: Optional[pulumi.Input[str]] = None,
                 remote_ipv6_network_cidr: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['VpnConnectionRouteArgs']]]] = None,
                 static_routes_only: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transit_gateway_attachment_id: Optional[pulumi.Input[str]] = None,
                 transit_gateway_id: Optional[pulumi.Input[str]] = None,
                 transport_transit_gateway_attachment_id: Optional[pulumi.Input[str]] = None,
                 tunnel1_address: Optional[pulumi.Input[str]] = None,
                 tunnel1_bgp_asn: Optional[pulumi.Input[str]] = None,
                 tunnel1_bgp_holdtime: Optional[pulumi.Input[int]] = None,
                 tunnel1_cgw_inside_address: Optional[pulumi.Input[str]] = None,
                 tunnel1_dpd_timeout_action: Optional[pulumi.Input[str]] = None,
                 tunnel1_dpd_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_ike_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_inside_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel1_inside_ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel1_log_options: Optional[pulumi.Input['VpnConnectionTunnel1LogOptionsArgs']] = None,
                 tunnel1_phase1_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel1_phase1_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase1_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase1_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_phase2_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel1_phase2_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase2_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase2_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_preshared_key: Optional[pulumi.Input[str]] = None,
                 tunnel1_rekey_fuzz_percentage: Optional[pulumi.Input[int]] = None,
                 tunnel1_rekey_margin_time_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_replay_window_size: Optional[pulumi.Input[int]] = None,
                 tunnel1_startup_action: Optional[pulumi.Input[str]] = None,
                 tunnel1_vgw_inside_address: Optional[pulumi.Input[str]] = None,
                 tunnel2_address: Optional[pulumi.Input[str]] = None,
                 tunnel2_bgp_asn: Optional[pulumi.Input[str]] = None,
                 tunnel2_bgp_holdtime: Optional[pulumi.Input[int]] = None,
                 tunnel2_cgw_inside_address: Optional[pulumi.Input[str]] = None,
                 tunnel2_dpd_timeout_action: Optional[pulumi.Input[str]] = None,
                 tunnel2_dpd_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_ike_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_inside_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel2_inside_ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel2_log_options: Optional[pulumi.Input['VpnConnectionTunnel2LogOptionsArgs']] = None,
                 tunnel2_phase1_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel2_phase1_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase1_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase1_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_phase2_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel2_phase2_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase2_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase2_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_preshared_key: Optional[pulumi.Input[str]] = None,
                 tunnel2_rekey_fuzz_percentage: Optional[pulumi.Input[int]] = None,
                 tunnel2_rekey_margin_time_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_replay_window_size: Optional[pulumi.Input[int]] = None,
                 tunnel2_startup_action: Optional[pulumi.Input[str]] = None,
                 tunnel2_vgw_inside_address: Optional[pulumi.Input[str]] = None,
                 tunnel_inside_ip_version: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vgw_telemetries: Optional[pulumi.Input[Sequence[pulumi.Input['VpnConnectionVgwTelemetryArgs']]]] = None,
                 vpn_gateway_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpnConnection resources.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if core_network_arn is not None:
            pulumi.set(__self__, "core_network_arn", core_network_arn)
        if core_network_attachment_arn is not None:
            pulumi.set(__self__, "core_network_attachment_arn", core_network_attachment_arn)
        if customer_gateway_configuration is not None:
            pulumi.set(__self__, "customer_gateway_configuration", customer_gateway_configuration)
        if customer_gateway_id is not None:
            pulumi.set(__self__, "customer_gateway_id", customer_gateway_id)
        if enable_acceleration is not None:
            pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        if local_ipv4_network_cidr is not None:
            pulumi.set(__self__, "local_ipv4_network_cidr", local_ipv4_network_cidr)
        if local_ipv6_network_cidr is not None:
            pulumi.set(__self__, "local_ipv6_network_cidr", local_ipv6_network_cidr)
        if outside_ip_address_type is not None:
            pulumi.set(__self__, "outside_ip_address_type", outside_ip_address_type)
        if remote_ipv4_network_cidr is not None:
            pulumi.set(__self__, "remote_ipv4_network_cidr", remote_ipv4_network_cidr)
        if remote_ipv6_network_cidr is not None:
            pulumi.set(__self__, "remote_ipv6_network_cidr", remote_ipv6_network_cidr)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if static_routes_only is not None:
            pulumi.set(__self__, "static_routes_only", static_routes_only)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if transit_gateway_attachment_id is not None:
            pulumi.set(__self__, "transit_gateway_attachment_id", transit_gateway_attachment_id)
        if transit_gateway_id is not None:
            pulumi.set(__self__, "transit_gateway_id", transit_gateway_id)
        if transport_transit_gateway_attachment_id is not None:
            pulumi.set(__self__, "transport_transit_gateway_attachment_id", transport_transit_gateway_attachment_id)
        if tunnel1_address is not None:
            pulumi.set(__self__, "tunnel1_address", tunnel1_address)
        if tunnel1_bgp_asn is not None:
            pulumi.set(__self__, "tunnel1_bgp_asn", tunnel1_bgp_asn)
        if tunnel1_bgp_holdtime is not None:
            pulumi.set(__self__, "tunnel1_bgp_holdtime", tunnel1_bgp_holdtime)
        if tunnel1_cgw_inside_address is not None:
            pulumi.set(__self__, "tunnel1_cgw_inside_address", tunnel1_cgw_inside_address)
        if tunnel1_dpd_timeout_action is not None:
            pulumi.set(__self__, "tunnel1_dpd_timeout_action", tunnel1_dpd_timeout_action)
        if tunnel1_dpd_timeout_seconds is not None:
            pulumi.set(__self__, "tunnel1_dpd_timeout_seconds", tunnel1_dpd_timeout_seconds)
        if tunnel1_ike_versions is not None:
            pulumi.set(__self__, "tunnel1_ike_versions", tunnel1_ike_versions)
        if tunnel1_inside_cidr is not None:
            pulumi.set(__self__, "tunnel1_inside_cidr", tunnel1_inside_cidr)
        if tunnel1_inside_ipv6_cidr is not None:
            pulumi.set(__self__, "tunnel1_inside_ipv6_cidr", tunnel1_inside_ipv6_cidr)
        if tunnel1_log_options is not None:
            pulumi.set(__self__, "tunnel1_log_options", tunnel1_log_options)
        if tunnel1_phase1_dh_group_numbers is not None:
            pulumi.set(__self__, "tunnel1_phase1_dh_group_numbers", tunnel1_phase1_dh_group_numbers)
        if tunnel1_phase1_encryption_algorithms is not None:
            pulumi.set(__self__, "tunnel1_phase1_encryption_algorithms", tunnel1_phase1_encryption_algorithms)
        if tunnel1_phase1_integrity_algorithms is not None:
            pulumi.set(__self__, "tunnel1_phase1_integrity_algorithms", tunnel1_phase1_integrity_algorithms)
        if tunnel1_phase1_lifetime_seconds is not None:
            pulumi.set(__self__, "tunnel1_phase1_lifetime_seconds", tunnel1_phase1_lifetime_seconds)
        if tunnel1_phase2_dh_group_numbers is not None:
            pulumi.set(__self__, "tunnel1_phase2_dh_group_numbers", tunnel1_phase2_dh_group_numbers)
        if tunnel1_phase2_encryption_algorithms is not None:
            pulumi.set(__self__, "tunnel1_phase2_encryption_algorithms", tunnel1_phase2_encryption_algorithms)
        if tunnel1_phase2_integrity_algorithms is not None:
            pulumi.set(__self__, "tunnel1_phase2_integrity_algorithms", tunnel1_phase2_integrity_algorithms)
        if tunnel1_phase2_lifetime_seconds is not None:
            pulumi.set(__self__, "tunnel1_phase2_lifetime_seconds", tunnel1_phase2_lifetime_seconds)
        if tunnel1_preshared_key is not None:
            pulumi.set(__self__, "tunnel1_preshared_key", tunnel1_preshared_key)
        if tunnel1_rekey_fuzz_percentage is not None:
            pulumi.set(__self__, "tunnel1_rekey_fuzz_percentage", tunnel1_rekey_fuzz_percentage)
        if tunnel1_rekey_margin_time_seconds is not None:
            pulumi.set(__self__, "tunnel1_rekey_margin_time_seconds", tunnel1_rekey_margin_time_seconds)
        if tunnel1_replay_window_size is not None:
            pulumi.set(__self__, "tunnel1_replay_window_size", tunnel1_replay_window_size)
        if tunnel1_startup_action is not None:
            pulumi.set(__self__, "tunnel1_startup_action", tunnel1_startup_action)
        if tunnel1_vgw_inside_address is not None:
            pulumi.set(__self__, "tunnel1_vgw_inside_address", tunnel1_vgw_inside_address)
        if tunnel2_address is not None:
            pulumi.set(__self__, "tunnel2_address", tunnel2_address)
        if tunnel2_bgp_asn is not None:
            pulumi.set(__self__, "tunnel2_bgp_asn", tunnel2_bgp_asn)
        if tunnel2_bgp_holdtime is not None:
            pulumi.set(__self__, "tunnel2_bgp_holdtime", tunnel2_bgp_holdtime)
        if tunnel2_cgw_inside_address is not None:
            pulumi.set(__self__, "tunnel2_cgw_inside_address", tunnel2_cgw_inside_address)
        if tunnel2_dpd_timeout_action is not None:
            pulumi.set(__self__, "tunnel2_dpd_timeout_action", tunnel2_dpd_timeout_action)
        if tunnel2_dpd_timeout_seconds is not None:
            pulumi.set(__self__, "tunnel2_dpd_timeout_seconds", tunnel2_dpd_timeout_seconds)
        if tunnel2_ike_versions is not None:
            pulumi.set(__self__, "tunnel2_ike_versions", tunnel2_ike_versions)
        if tunnel2_inside_cidr is not None:
            pulumi.set(__self__, "tunnel2_inside_cidr", tunnel2_inside_cidr)
        if tunnel2_inside_ipv6_cidr is not None:
            pulumi.set(__self__, "tunnel2_inside_ipv6_cidr", tunnel2_inside_ipv6_cidr)
        if tunnel2_log_options is not None:
            pulumi.set(__self__, "tunnel2_log_options", tunnel2_log_options)
        if tunnel2_phase1_dh_group_numbers is not None:
            pulumi.set(__self__, "tunnel2_phase1_dh_group_numbers", tunnel2_phase1_dh_group_numbers)
        if tunnel2_phase1_encryption_algorithms is not None:
            pulumi.set(__self__, "tunnel2_phase1_encryption_algorithms", tunnel2_phase1_encryption_algorithms)
        if tunnel2_phase1_integrity_algorithms is not None:
            pulumi.set(__self__, "tunnel2_phase1_integrity_algorithms", tunnel2_phase1_integrity_algorithms)
        if tunnel2_phase1_lifetime_seconds is not None:
            pulumi.set(__self__, "tunnel2_phase1_lifetime_seconds", tunnel2_phase1_lifetime_seconds)
        if tunnel2_phase2_dh_group_numbers is not None:
            pulumi.set(__self__, "tunnel2_phase2_dh_group_numbers", tunnel2_phase2_dh_group_numbers)
        if tunnel2_phase2_encryption_algorithms is not None:
            pulumi.set(__self__, "tunnel2_phase2_encryption_algorithms", tunnel2_phase2_encryption_algorithms)
        if tunnel2_phase2_integrity_algorithms is not None:
            pulumi.set(__self__, "tunnel2_phase2_integrity_algorithms", tunnel2_phase2_integrity_algorithms)
        if tunnel2_phase2_lifetime_seconds is not None:
            pulumi.set(__self__, "tunnel2_phase2_lifetime_seconds", tunnel2_phase2_lifetime_seconds)
        if tunnel2_preshared_key is not None:
            pulumi.set(__self__, "tunnel2_preshared_key", tunnel2_preshared_key)
        if tunnel2_rekey_fuzz_percentage is not None:
            pulumi.set(__self__, "tunnel2_rekey_fuzz_percentage", tunnel2_rekey_fuzz_percentage)
        if tunnel2_rekey_margin_time_seconds is not None:
            pulumi.set(__self__, "tunnel2_rekey_margin_time_seconds", tunnel2_rekey_margin_time_seconds)
        if tunnel2_replay_window_size is not None:
            pulumi.set(__self__, "tunnel2_replay_window_size", tunnel2_replay_window_size)
        if tunnel2_startup_action is not None:
            pulumi.set(__self__, "tunnel2_startup_action", tunnel2_startup_action)
        if tunnel2_vgw_inside_address is not None:
            pulumi.set(__self__, "tunnel2_vgw_inside_address", tunnel2_vgw_inside_address)
        if tunnel_inside_ip_version is not None:
            pulumi.set(__self__, "tunnel_inside_ip_version", tunnel_inside_ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vgw_telemetries is not None:
            pulumi.set(__self__, "vgw_telemetries", vgw_telemetries)
        if vpn_gateway_id is not None:
            pulumi.set(__self__, "vpn_gateway_id", vpn_gateway_id)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="coreNetworkArn")
    def core_network_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "core_network_arn")

    @core_network_arn.setter
    def core_network_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "core_network_arn", value)

    @property
    @pulumi.getter(name="coreNetworkAttachmentArn")
    def core_network_attachment_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "core_network_attachment_arn")

    @core_network_attachment_arn.setter
    def core_network_attachment_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "core_network_attachment_arn", value)

    @property
    @pulumi.getter(name="customerGatewayConfiguration")
    def customer_gateway_configuration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customer_gateway_configuration")

    @customer_gateway_configuration.setter
    def customer_gateway_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_gateway_configuration", value)

    @property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customer_gateway_id")

    @customer_gateway_id.setter
    def customer_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_gateway_id", value)

    @property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_acceleration")

    @enable_acceleration.setter
    def enable_acceleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_acceleration", value)

    @property
    @pulumi.getter(name="localIpv4NetworkCidr")
    def local_ipv4_network_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_ipv4_network_cidr")

    @local_ipv4_network_cidr.setter
    def local_ipv4_network_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_ipv4_network_cidr", value)

    @property
    @pulumi.getter(name="localIpv6NetworkCidr")
    def local_ipv6_network_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_ipv6_network_cidr")

    @local_ipv6_network_cidr.setter
    def local_ipv6_network_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_ipv6_network_cidr", value)

    @property
    @pulumi.getter(name="outsideIpAddressType")
    def outside_ip_address_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outside_ip_address_type")

    @outside_ip_address_type.setter
    def outside_ip_address_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outside_ip_address_type", value)

    @property
    @pulumi.getter(name="remoteIpv4NetworkCidr")
    def remote_ipv4_network_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_ipv4_network_cidr")

    @remote_ipv4_network_cidr.setter
    def remote_ipv4_network_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_ipv4_network_cidr", value)

    @property
    @pulumi.getter(name="remoteIpv6NetworkCidr")
    def remote_ipv6_network_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_ipv6_network_cidr")

    @remote_ipv6_network_cidr.setter
    def remote_ipv6_network_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_ipv6_network_cidr", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnConnectionRouteArgs']]]]:
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnConnectionRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="staticRoutesOnly")
    def static_routes_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "static_routes_only")

    @static_routes_only.setter
    def static_routes_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "static_routes_only", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter(name="transitGatewayAttachmentId")
    def transit_gateway_attachment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transit_gateway_attachment_id")

    @transit_gateway_attachment_id.setter
    def transit_gateway_attachment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transit_gateway_attachment_id", value)

    @property
    @pulumi.getter(name="transitGatewayId")
    def transit_gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transit_gateway_id")

    @transit_gateway_id.setter
    def transit_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transit_gateway_id", value)

    @property
    @pulumi.getter(name="transportTransitGatewayAttachmentId")
    def transport_transit_gateway_attachment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport_transit_gateway_attachment_id")

    @transport_transit_gateway_attachment_id.setter
    def transport_transit_gateway_attachment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport_transit_gateway_attachment_id", value)

    @property
    @pulumi.getter(name="tunnel1Address")
    def tunnel1_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_address")

    @tunnel1_address.setter
    def tunnel1_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_address", value)

    @property
    @pulumi.getter(name="tunnel1BgpAsn")
    def tunnel1_bgp_asn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_bgp_asn")

    @tunnel1_bgp_asn.setter
    def tunnel1_bgp_asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_bgp_asn", value)

    @property
    @pulumi.getter(name="tunnel1BgpHoldtime")
    def tunnel1_bgp_holdtime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_bgp_holdtime")

    @tunnel1_bgp_holdtime.setter
    def tunnel1_bgp_holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_bgp_holdtime", value)

    @property
    @pulumi.getter(name="tunnel1CgwInsideAddress")
    def tunnel1_cgw_inside_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_cgw_inside_address")

    @tunnel1_cgw_inside_address.setter
    def tunnel1_cgw_inside_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_cgw_inside_address", value)

    @property
    @pulumi.getter(name="tunnel1DpdTimeoutAction")
    def tunnel1_dpd_timeout_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_dpd_timeout_action")

    @tunnel1_dpd_timeout_action.setter
    def tunnel1_dpd_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_dpd_timeout_action", value)

    @property
    @pulumi.getter(name="tunnel1DpdTimeoutSeconds")
    def tunnel1_dpd_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_dpd_timeout_seconds")

    @tunnel1_dpd_timeout_seconds.setter
    def tunnel1_dpd_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_dpd_timeout_seconds", value)

    @property
    @pulumi.getter(name="tunnel1IkeVersions")
    def tunnel1_ike_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel1_ike_versions")

    @tunnel1_ike_versions.setter
    def tunnel1_ike_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel1_ike_versions", value)

    @property
    @pulumi.getter(name="tunnel1InsideCidr")
    def tunnel1_inside_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_inside_cidr")

    @tunnel1_inside_cidr.setter
    def tunnel1_inside_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_inside_cidr", value)

    @property
    @pulumi.getter(name="tunnel1InsideIpv6Cidr")
    def tunnel1_inside_ipv6_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_inside_ipv6_cidr")

    @tunnel1_inside_ipv6_cidr.setter
    def tunnel1_inside_ipv6_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_inside_ipv6_cidr", value)

    @property
    @pulumi.getter(name="tunnel1LogOptions")
    def tunnel1_log_options(self) -> Optional[pulumi.Input['VpnConnectionTunnel1LogOptionsArgs']]:
        return pulumi.get(self, "tunnel1_log_options")

    @tunnel1_log_options.setter
    def tunnel1_log_options(self, value: Optional[pulumi.Input['VpnConnectionTunnel1LogOptionsArgs']]):
        pulumi.set(self, "tunnel1_log_options", value)

    @property
    @pulumi.getter(name="tunnel1Phase1DhGroupNumbers")
    def tunnel1_phase1_dh_group_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "tunnel1_phase1_dh_group_numbers")

    @tunnel1_phase1_dh_group_numbers.setter
    def tunnel1_phase1_dh_group_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tunnel1_phase1_dh_group_numbers", value)

    @property
    @pulumi.getter(name="tunnel1Phase1EncryptionAlgorithms")
    def tunnel1_phase1_encryption_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel1_phase1_encryption_algorithms")

    @tunnel1_phase1_encryption_algorithms.setter
    def tunnel1_phase1_encryption_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel1_phase1_encryption_algorithms", value)

    @property
    @pulumi.getter(name="tunnel1Phase1IntegrityAlgorithms")
    def tunnel1_phase1_integrity_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel1_phase1_integrity_algorithms")

    @tunnel1_phase1_integrity_algorithms.setter
    def tunnel1_phase1_integrity_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel1_phase1_integrity_algorithms", value)

    @property
    @pulumi.getter(name="tunnel1Phase1LifetimeSeconds")
    def tunnel1_phase1_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_phase1_lifetime_seconds")

    @tunnel1_phase1_lifetime_seconds.setter
    def tunnel1_phase1_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_phase1_lifetime_seconds", value)

    @property
    @pulumi.getter(name="tunnel1Phase2DhGroupNumbers")
    def tunnel1_phase2_dh_group_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "tunnel1_phase2_dh_group_numbers")

    @tunnel1_phase2_dh_group_numbers.setter
    def tunnel1_phase2_dh_group_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tunnel1_phase2_dh_group_numbers", value)

    @property
    @pulumi.getter(name="tunnel1Phase2EncryptionAlgorithms")
    def tunnel1_phase2_encryption_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel1_phase2_encryption_algorithms")

    @tunnel1_phase2_encryption_algorithms.setter
    def tunnel1_phase2_encryption_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel1_phase2_encryption_algorithms", value)

    @property
    @pulumi.getter(name="tunnel1Phase2IntegrityAlgorithms")
    def tunnel1_phase2_integrity_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel1_phase2_integrity_algorithms")

    @tunnel1_phase2_integrity_algorithms.setter
    def tunnel1_phase2_integrity_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel1_phase2_integrity_algorithms", value)

    @property
    @pulumi.getter(name="tunnel1Phase2LifetimeSeconds")
    def tunnel1_phase2_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_phase2_lifetime_seconds")

    @tunnel1_phase2_lifetime_seconds.setter
    def tunnel1_phase2_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_phase2_lifetime_seconds", value)

    @property
    @pulumi.getter(name="tunnel1PresharedKey")
    def tunnel1_preshared_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_preshared_key")

    @tunnel1_preshared_key.setter
    def tunnel1_preshared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_preshared_key", value)

    @property
    @pulumi.getter(name="tunnel1RekeyFuzzPercentage")
    def tunnel1_rekey_fuzz_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_rekey_fuzz_percentage")

    @tunnel1_rekey_fuzz_percentage.setter
    def tunnel1_rekey_fuzz_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_rekey_fuzz_percentage", value)

    @property
    @pulumi.getter(name="tunnel1RekeyMarginTimeSeconds")
    def tunnel1_rekey_margin_time_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_rekey_margin_time_seconds")

    @tunnel1_rekey_margin_time_seconds.setter
    def tunnel1_rekey_margin_time_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_rekey_margin_time_seconds", value)

    @property
    @pulumi.getter(name="tunnel1ReplayWindowSize")
    def tunnel1_replay_window_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel1_replay_window_size")

    @tunnel1_replay_window_size.setter
    def tunnel1_replay_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel1_replay_window_size", value)

    @property
    @pulumi.getter(name="tunnel1StartupAction")
    def tunnel1_startup_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_startup_action")

    @tunnel1_startup_action.setter
    def tunnel1_startup_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_startup_action", value)

    @property
    @pulumi.getter(name="tunnel1VgwInsideAddress")
    def tunnel1_vgw_inside_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel1_vgw_inside_address")

    @tunnel1_vgw_inside_address.setter
    def tunnel1_vgw_inside_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel1_vgw_inside_address", value)

    @property
    @pulumi.getter(name="tunnel2Address")
    def tunnel2_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_address")

    @tunnel2_address.setter
    def tunnel2_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_address", value)

    @property
    @pulumi.getter(name="tunnel2BgpAsn")
    def tunnel2_bgp_asn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_bgp_asn")

    @tunnel2_bgp_asn.setter
    def tunnel2_bgp_asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_bgp_asn", value)

    @property
    @pulumi.getter(name="tunnel2BgpHoldtime")
    def tunnel2_bgp_holdtime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_bgp_holdtime")

    @tunnel2_bgp_holdtime.setter
    def tunnel2_bgp_holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_bgp_holdtime", value)

    @property
    @pulumi.getter(name="tunnel2CgwInsideAddress")
    def tunnel2_cgw_inside_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_cgw_inside_address")

    @tunnel2_cgw_inside_address.setter
    def tunnel2_cgw_inside_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_cgw_inside_address", value)

    @property
    @pulumi.getter(name="tunnel2DpdTimeoutAction")
    def tunnel2_dpd_timeout_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_dpd_timeout_action")

    @tunnel2_dpd_timeout_action.setter
    def tunnel2_dpd_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_dpd_timeout_action", value)

    @property
    @pulumi.getter(name="tunnel2DpdTimeoutSeconds")
    def tunnel2_dpd_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_dpd_timeout_seconds")

    @tunnel2_dpd_timeout_seconds.setter
    def tunnel2_dpd_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_dpd_timeout_seconds", value)

    @property
    @pulumi.getter(name="tunnel2IkeVersions")
    def tunnel2_ike_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel2_ike_versions")

    @tunnel2_ike_versions.setter
    def tunnel2_ike_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel2_ike_versions", value)

    @property
    @pulumi.getter(name="tunnel2InsideCidr")
    def tunnel2_inside_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_inside_cidr")

    @tunnel2_inside_cidr.setter
    def tunnel2_inside_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_inside_cidr", value)

    @property
    @pulumi.getter(name="tunnel2InsideIpv6Cidr")
    def tunnel2_inside_ipv6_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_inside_ipv6_cidr")

    @tunnel2_inside_ipv6_cidr.setter
    def tunnel2_inside_ipv6_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_inside_ipv6_cidr", value)

    @property
    @pulumi.getter(name="tunnel2LogOptions")
    def tunnel2_log_options(self) -> Optional[pulumi.Input['VpnConnectionTunnel2LogOptionsArgs']]:
        return pulumi.get(self, "tunnel2_log_options")

    @tunnel2_log_options.setter
    def tunnel2_log_options(self, value: Optional[pulumi.Input['VpnConnectionTunnel2LogOptionsArgs']]):
        pulumi.set(self, "tunnel2_log_options", value)

    @property
    @pulumi.getter(name="tunnel2Phase1DhGroupNumbers")
    def tunnel2_phase1_dh_group_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "tunnel2_phase1_dh_group_numbers")

    @tunnel2_phase1_dh_group_numbers.setter
    def tunnel2_phase1_dh_group_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tunnel2_phase1_dh_group_numbers", value)

    @property
    @pulumi.getter(name="tunnel2Phase1EncryptionAlgorithms")
    def tunnel2_phase1_encryption_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel2_phase1_encryption_algorithms")

    @tunnel2_phase1_encryption_algorithms.setter
    def tunnel2_phase1_encryption_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel2_phase1_encryption_algorithms", value)

    @property
    @pulumi.getter(name="tunnel2Phase1IntegrityAlgorithms")
    def tunnel2_phase1_integrity_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel2_phase1_integrity_algorithms")

    @tunnel2_phase1_integrity_algorithms.setter
    def tunnel2_phase1_integrity_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel2_phase1_integrity_algorithms", value)

    @property
    @pulumi.getter(name="tunnel2Phase1LifetimeSeconds")
    def tunnel2_phase1_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_phase1_lifetime_seconds")

    @tunnel2_phase1_lifetime_seconds.setter
    def tunnel2_phase1_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_phase1_lifetime_seconds", value)

    @property
    @pulumi.getter(name="tunnel2Phase2DhGroupNumbers")
    def tunnel2_phase2_dh_group_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "tunnel2_phase2_dh_group_numbers")

    @tunnel2_phase2_dh_group_numbers.setter
    def tunnel2_phase2_dh_group_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tunnel2_phase2_dh_group_numbers", value)

    @property
    @pulumi.getter(name="tunnel2Phase2EncryptionAlgorithms")
    def tunnel2_phase2_encryption_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel2_phase2_encryption_algorithms")

    @tunnel2_phase2_encryption_algorithms.setter
    def tunnel2_phase2_encryption_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel2_phase2_encryption_algorithms", value)

    @property
    @pulumi.getter(name="tunnel2Phase2IntegrityAlgorithms")
    def tunnel2_phase2_integrity_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tunnel2_phase2_integrity_algorithms")

    @tunnel2_phase2_integrity_algorithms.setter
    def tunnel2_phase2_integrity_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tunnel2_phase2_integrity_algorithms", value)

    @property
    @pulumi.getter(name="tunnel2Phase2LifetimeSeconds")
    def tunnel2_phase2_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_phase2_lifetime_seconds")

    @tunnel2_phase2_lifetime_seconds.setter
    def tunnel2_phase2_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_phase2_lifetime_seconds", value)

    @property
    @pulumi.getter(name="tunnel2PresharedKey")
    def tunnel2_preshared_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_preshared_key")

    @tunnel2_preshared_key.setter
    def tunnel2_preshared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_preshared_key", value)

    @property
    @pulumi.getter(name="tunnel2RekeyFuzzPercentage")
    def tunnel2_rekey_fuzz_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_rekey_fuzz_percentage")

    @tunnel2_rekey_fuzz_percentage.setter
    def tunnel2_rekey_fuzz_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_rekey_fuzz_percentage", value)

    @property
    @pulumi.getter(name="tunnel2RekeyMarginTimeSeconds")
    def tunnel2_rekey_margin_time_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_rekey_margin_time_seconds")

    @tunnel2_rekey_margin_time_seconds.setter
    def tunnel2_rekey_margin_time_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_rekey_margin_time_seconds", value)

    @property
    @pulumi.getter(name="tunnel2ReplayWindowSize")
    def tunnel2_replay_window_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel2_replay_window_size")

    @tunnel2_replay_window_size.setter
    def tunnel2_replay_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel2_replay_window_size", value)

    @property
    @pulumi.getter(name="tunnel2StartupAction")
    def tunnel2_startup_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_startup_action")

    @tunnel2_startup_action.setter
    def tunnel2_startup_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_startup_action", value)

    @property
    @pulumi.getter(name="tunnel2VgwInsideAddress")
    def tunnel2_vgw_inside_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel2_vgw_inside_address")

    @tunnel2_vgw_inside_address.setter
    def tunnel2_vgw_inside_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel2_vgw_inside_address", value)

    @property
    @pulumi.getter(name="tunnelInsideIpVersion")
    def tunnel_inside_ip_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_inside_ip_version")

    @tunnel_inside_ip_version.setter
    def tunnel_inside_ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_inside_ip_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vgwTelemetries")
    def vgw_telemetries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnConnectionVgwTelemetryArgs']]]]:
        return pulumi.get(self, "vgw_telemetries")

    @vgw_telemetries.setter
    def vgw_telemetries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnConnectionVgwTelemetryArgs']]]]):
        pulumi.set(self, "vgw_telemetries", value)

    @property
    @pulumi.getter(name="vpnGatewayId")
    def vpn_gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_gateway_id")

    @vpn_gateway_id.setter
    def vpn_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_gateway_id", value)


class VpnConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 customer_gateway_id: Optional[pulumi.Input[str]] = None,
                 enable_acceleration: Optional[pulumi.Input[bool]] = None,
                 local_ipv4_network_cidr: Optional[pulumi.Input[str]] = None,
                 local_ipv6_network_cidr: Optional[pulumi.Input[str]] = None,
                 outside_ip_address_type: Optional[pulumi.Input[str]] = None,
                 remote_ipv4_network_cidr: Optional[pulumi.Input[str]] = None,
                 remote_ipv6_network_cidr: Optional[pulumi.Input[str]] = None,
                 static_routes_only: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transit_gateway_id: Optional[pulumi.Input[str]] = None,
                 transport_transit_gateway_attachment_id: Optional[pulumi.Input[str]] = None,
                 tunnel1_dpd_timeout_action: Optional[pulumi.Input[str]] = None,
                 tunnel1_dpd_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_ike_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_inside_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel1_inside_ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel1_log_options: Optional[pulumi.Input[pulumi.InputType['VpnConnectionTunnel1LogOptionsArgs']]] = None,
                 tunnel1_phase1_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel1_phase1_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase1_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase1_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_phase2_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel1_phase2_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase2_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase2_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_preshared_key: Optional[pulumi.Input[str]] = None,
                 tunnel1_rekey_fuzz_percentage: Optional[pulumi.Input[int]] = None,
                 tunnel1_rekey_margin_time_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_replay_window_size: Optional[pulumi.Input[int]] = None,
                 tunnel1_startup_action: Optional[pulumi.Input[str]] = None,
                 tunnel2_dpd_timeout_action: Optional[pulumi.Input[str]] = None,
                 tunnel2_dpd_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_ike_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_inside_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel2_inside_ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel2_log_options: Optional[pulumi.Input[pulumi.InputType['VpnConnectionTunnel2LogOptionsArgs']]] = None,
                 tunnel2_phase1_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel2_phase1_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase1_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase1_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_phase2_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel2_phase2_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase2_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase2_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_preshared_key: Optional[pulumi.Input[str]] = None,
                 tunnel2_rekey_fuzz_percentage: Optional[pulumi.Input[int]] = None,
                 tunnel2_rekey_margin_time_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_replay_window_size: Optional[pulumi.Input[int]] = None,
                 tunnel2_startup_action: Optional[pulumi.Input[str]] = None,
                 tunnel_inside_ip_version: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VpnConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpnConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VpnConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpnConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 customer_gateway_id: Optional[pulumi.Input[str]] = None,
                 enable_acceleration: Optional[pulumi.Input[bool]] = None,
                 local_ipv4_network_cidr: Optional[pulumi.Input[str]] = None,
                 local_ipv6_network_cidr: Optional[pulumi.Input[str]] = None,
                 outside_ip_address_type: Optional[pulumi.Input[str]] = None,
                 remote_ipv4_network_cidr: Optional[pulumi.Input[str]] = None,
                 remote_ipv6_network_cidr: Optional[pulumi.Input[str]] = None,
                 static_routes_only: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transit_gateway_id: Optional[pulumi.Input[str]] = None,
                 transport_transit_gateway_attachment_id: Optional[pulumi.Input[str]] = None,
                 tunnel1_dpd_timeout_action: Optional[pulumi.Input[str]] = None,
                 tunnel1_dpd_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_ike_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_inside_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel1_inside_ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel1_log_options: Optional[pulumi.Input[pulumi.InputType['VpnConnectionTunnel1LogOptionsArgs']]] = None,
                 tunnel1_phase1_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel1_phase1_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase1_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase1_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_phase2_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel1_phase2_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase2_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel1_phase2_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_preshared_key: Optional[pulumi.Input[str]] = None,
                 tunnel1_rekey_fuzz_percentage: Optional[pulumi.Input[int]] = None,
                 tunnel1_rekey_margin_time_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel1_replay_window_size: Optional[pulumi.Input[int]] = None,
                 tunnel1_startup_action: Optional[pulumi.Input[str]] = None,
                 tunnel2_dpd_timeout_action: Optional[pulumi.Input[str]] = None,
                 tunnel2_dpd_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_ike_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_inside_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel2_inside_ipv6_cidr: Optional[pulumi.Input[str]] = None,
                 tunnel2_log_options: Optional[pulumi.Input[pulumi.InputType['VpnConnectionTunnel2LogOptionsArgs']]] = None,
                 tunnel2_phase1_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel2_phase1_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase1_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase1_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_phase2_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tunnel2_phase2_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase2_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel2_phase2_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_preshared_key: Optional[pulumi.Input[str]] = None,
                 tunnel2_rekey_fuzz_percentage: Optional[pulumi.Input[int]] = None,
                 tunnel2_rekey_margin_time_seconds: Optional[pulumi.Input[int]] = None,
                 tunnel2_replay_window_size: Optional[pulumi.Input[int]] = None,
                 tunnel2_startup_action: Optional[pulumi.Input[str]] = None,
                 tunnel_inside_ip_version: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnConnectionArgs.__new__(VpnConnectionArgs)

            if customer_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'customer_gateway_id'")
            __props__.__dict__["customer_gateway_id"] = customer_gateway_id
            __props__.__dict__["enable_acceleration"] = enable_acceleration
            __props__.__dict__["local_ipv4_network_cidr"] = local_ipv4_network_cidr
            __props__.__dict__["local_ipv6_network_cidr"] = local_ipv6_network_cidr
            __props__.__dict__["outside_ip_address_type"] = outside_ip_address_type
            __props__.__dict__["remote_ipv4_network_cidr"] = remote_ipv4_network_cidr
            __props__.__dict__["remote_ipv6_network_cidr"] = remote_ipv6_network_cidr
            __props__.__dict__["static_routes_only"] = static_routes_only
            __props__.__dict__["tags"] = tags
            __props__.__dict__["transit_gateway_id"] = transit_gateway_id
            __props__.__dict__["transport_transit_gateway_attachment_id"] = transport_transit_gateway_attachment_id
            __props__.__dict__["tunnel1_dpd_timeout_action"] = tunnel1_dpd_timeout_action
            __props__.__dict__["tunnel1_dpd_timeout_seconds"] = tunnel1_dpd_timeout_seconds
            __props__.__dict__["tunnel1_ike_versions"] = tunnel1_ike_versions
            __props__.__dict__["tunnel1_inside_cidr"] = tunnel1_inside_cidr
            __props__.__dict__["tunnel1_inside_ipv6_cidr"] = tunnel1_inside_ipv6_cidr
            __props__.__dict__["tunnel1_log_options"] = tunnel1_log_options
            __props__.__dict__["tunnel1_phase1_dh_group_numbers"] = tunnel1_phase1_dh_group_numbers
            __props__.__dict__["tunnel1_phase1_encryption_algorithms"] = tunnel1_phase1_encryption_algorithms
            __props__.__dict__["tunnel1_phase1_integrity_algorithms"] = tunnel1_phase1_integrity_algorithms
            __props__.__dict__["tunnel1_phase1_lifetime_seconds"] = tunnel1_phase1_lifetime_seconds
            __props__.__dict__["tunnel1_phase2_dh_group_numbers"] = tunnel1_phase2_dh_group_numbers
            __props__.__dict__["tunnel1_phase2_encryption_algorithms"] = tunnel1_phase2_encryption_algorithms
            __props__.__dict__["tunnel1_phase2_integrity_algorithms"] = tunnel1_phase2_integrity_algorithms
            __props__.__dict__["tunnel1_phase2_lifetime_seconds"] = tunnel1_phase2_lifetime_seconds
            __props__.__dict__["tunnel1_preshared_key"] = None if tunnel1_preshared_key is None else pulumi.Output.secret(tunnel1_preshared_key)
            __props__.__dict__["tunnel1_rekey_fuzz_percentage"] = tunnel1_rekey_fuzz_percentage
            __props__.__dict__["tunnel1_rekey_margin_time_seconds"] = tunnel1_rekey_margin_time_seconds
            __props__.__dict__["tunnel1_replay_window_size"] = tunnel1_replay_window_size
            __props__.__dict__["tunnel1_startup_action"] = tunnel1_startup_action
            __props__.__dict__["tunnel2_dpd_timeout_action"] = tunnel2_dpd_timeout_action
            __props__.__dict__["tunnel2_dpd_timeout_seconds"] = tunnel2_dpd_timeout_seconds
            __props__.__dict__["tunnel2_ike_versions"] = tunnel2_ike_versions
            __props__.__dict__["tunnel2_inside_cidr"] = tunnel2_inside_cidr
            __props__.__dict__["tunnel2_inside_ipv6_cidr"] = tunnel2_inside_ipv6_cidr
            __props__.__dict__["tunnel2_log_options"] = tunnel2_log_options
            __props__.__dict__["tunnel2_phase1_dh_group_numbers"] = tunnel2_phase1_dh_group_numbers
            __props__.__dict__["tunnel2_phase1_encryption_algorithms"] = tunnel2_phase1_encryption_algorithms
            __props__.__dict__["tunnel2_phase1_integrity_algorithms"] = tunnel2_phase1_integrity_algorithms
            __props__.__dict__["tunnel2_phase1_lifetime_seconds"] = tunnel2_phase1_lifetime_seconds
            __props__.__dict__["tunnel2_phase2_dh_group_numbers"] = tunnel2_phase2_dh_group_numbers
            __props__.__dict__["tunnel2_phase2_encryption_algorithms"] = tunnel2_phase2_encryption_algorithms
            __props__.__dict__["tunnel2_phase2_integrity_algorithms"] = tunnel2_phase2_integrity_algorithms
            __props__.__dict__["tunnel2_phase2_lifetime_seconds"] = tunnel2_phase2_lifetime_seconds
            __props__.__dict__["tunnel2_preshared_key"] = None if tunnel2_preshared_key is None else pulumi.Output.secret(tunnel2_preshared_key)
            __props__.__dict__["tunnel2_rekey_fuzz_percentage"] = tunnel2_rekey_fuzz_percentage
            __props__.__dict__["tunnel2_rekey_margin_time_seconds"] = tunnel2_rekey_margin_time_seconds
            __props__.__dict__["tunnel2_replay_window_size"] = tunnel2_replay_window_size
            __props__.__dict__["tunnel2_startup_action"] = tunnel2_startup_action
            __props__.__dict__["tunnel_inside_ip_version"] = tunnel_inside_ip_version
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vpn_gateway_id"] = vpn_gateway_id
            __props__.__dict__["arn"] = None
            __props__.__dict__["core_network_arn"] = None
            __props__.__dict__["core_network_attachment_arn"] = None
            __props__.__dict__["customer_gateway_configuration"] = None
            __props__.__dict__["routes"] = None
            __props__.__dict__["tags_all"] = None
            __props__.__dict__["transit_gateway_attachment_id"] = None
            __props__.__dict__["tunnel1_address"] = None
            __props__.__dict__["tunnel1_bgp_asn"] = None
            __props__.__dict__["tunnel1_bgp_holdtime"] = None
            __props__.__dict__["tunnel1_cgw_inside_address"] = None
            __props__.__dict__["tunnel1_vgw_inside_address"] = None
            __props__.__dict__["tunnel2_address"] = None
            __props__.__dict__["tunnel2_bgp_asn"] = None
            __props__.__dict__["tunnel2_bgp_holdtime"] = None
            __props__.__dict__["tunnel2_cgw_inside_address"] = None
            __props__.__dict__["tunnel2_vgw_inside_address"] = None
            __props__.__dict__["vgw_telemetries"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["customerGatewayConfiguration", "tunnel1PresharedKey", "tunnel2PresharedKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(VpnConnection, __self__).__init__(
            'aws:ec2/vpnConnection:VpnConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            core_network_arn: Optional[pulumi.Input[str]] = None,
            core_network_attachment_arn: Optional[pulumi.Input[str]] = None,
            customer_gateway_configuration: Optional[pulumi.Input[str]] = None,
            customer_gateway_id: Optional[pulumi.Input[str]] = None,
            enable_acceleration: Optional[pulumi.Input[bool]] = None,
            local_ipv4_network_cidr: Optional[pulumi.Input[str]] = None,
            local_ipv6_network_cidr: Optional[pulumi.Input[str]] = None,
            outside_ip_address_type: Optional[pulumi.Input[str]] = None,
            remote_ipv4_network_cidr: Optional[pulumi.Input[str]] = None,
            remote_ipv6_network_cidr: Optional[pulumi.Input[str]] = None,
            routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnConnectionRouteArgs']]]]] = None,
            static_routes_only: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            transit_gateway_attachment_id: Optional[pulumi.Input[str]] = None,
            transit_gateway_id: Optional[pulumi.Input[str]] = None,
            transport_transit_gateway_attachment_id: Optional[pulumi.Input[str]] = None,
            tunnel1_address: Optional[pulumi.Input[str]] = None,
            tunnel1_bgp_asn: Optional[pulumi.Input[str]] = None,
            tunnel1_bgp_holdtime: Optional[pulumi.Input[int]] = None,
            tunnel1_cgw_inside_address: Optional[pulumi.Input[str]] = None,
            tunnel1_dpd_timeout_action: Optional[pulumi.Input[str]] = None,
            tunnel1_dpd_timeout_seconds: Optional[pulumi.Input[int]] = None,
            tunnel1_ike_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel1_inside_cidr: Optional[pulumi.Input[str]] = None,
            tunnel1_inside_ipv6_cidr: Optional[pulumi.Input[str]] = None,
            tunnel1_log_options: Optional[pulumi.Input[pulumi.InputType['VpnConnectionTunnel1LogOptionsArgs']]] = None,
            tunnel1_phase1_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            tunnel1_phase1_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel1_phase1_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel1_phase1_lifetime_seconds: Optional[pulumi.Input[int]] = None,
            tunnel1_phase2_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            tunnel1_phase2_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel1_phase2_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel1_phase2_lifetime_seconds: Optional[pulumi.Input[int]] = None,
            tunnel1_preshared_key: Optional[pulumi.Input[str]] = None,
            tunnel1_rekey_fuzz_percentage: Optional[pulumi.Input[int]] = None,
            tunnel1_rekey_margin_time_seconds: Optional[pulumi.Input[int]] = None,
            tunnel1_replay_window_size: Optional[pulumi.Input[int]] = None,
            tunnel1_startup_action: Optional[pulumi.Input[str]] = None,
            tunnel1_vgw_inside_address: Optional[pulumi.Input[str]] = None,
            tunnel2_address: Optional[pulumi.Input[str]] = None,
            tunnel2_bgp_asn: Optional[pulumi.Input[str]] = None,
            tunnel2_bgp_holdtime: Optional[pulumi.Input[int]] = None,
            tunnel2_cgw_inside_address: Optional[pulumi.Input[str]] = None,
            tunnel2_dpd_timeout_action: Optional[pulumi.Input[str]] = None,
            tunnel2_dpd_timeout_seconds: Optional[pulumi.Input[int]] = None,
            tunnel2_ike_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel2_inside_cidr: Optional[pulumi.Input[str]] = None,
            tunnel2_inside_ipv6_cidr: Optional[pulumi.Input[str]] = None,
            tunnel2_log_options: Optional[pulumi.Input[pulumi.InputType['VpnConnectionTunnel2LogOptionsArgs']]] = None,
            tunnel2_phase1_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            tunnel2_phase1_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel2_phase1_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel2_phase1_lifetime_seconds: Optional[pulumi.Input[int]] = None,
            tunnel2_phase2_dh_group_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            tunnel2_phase2_encryption_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel2_phase2_integrity_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel2_phase2_lifetime_seconds: Optional[pulumi.Input[int]] = None,
            tunnel2_preshared_key: Optional[pulumi.Input[str]] = None,
            tunnel2_rekey_fuzz_percentage: Optional[pulumi.Input[int]] = None,
            tunnel2_rekey_margin_time_seconds: Optional[pulumi.Input[int]] = None,
            tunnel2_replay_window_size: Optional[pulumi.Input[int]] = None,
            tunnel2_startup_action: Optional[pulumi.Input[str]] = None,
            tunnel2_vgw_inside_address: Optional[pulumi.Input[str]] = None,
            tunnel_inside_ip_version: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vgw_telemetries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VpnConnectionVgwTelemetryArgs']]]]] = None,
            vpn_gateway_id: Optional[pulumi.Input[str]] = None) -> 'VpnConnection':
        """
        Get an existing VpnConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnConnectionState.__new__(_VpnConnectionState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["core_network_arn"] = core_network_arn
        __props__.__dict__["core_network_attachment_arn"] = core_network_attachment_arn
        __props__.__dict__["customer_gateway_configuration"] = customer_gateway_configuration
        __props__.__dict__["customer_gateway_id"] = customer_gateway_id
        __props__.__dict__["enable_acceleration"] = enable_acceleration
        __props__.__dict__["local_ipv4_network_cidr"] = local_ipv4_network_cidr
        __props__.__dict__["local_ipv6_network_cidr"] = local_ipv6_network_cidr
        __props__.__dict__["outside_ip_address_type"] = outside_ip_address_type
        __props__.__dict__["remote_ipv4_network_cidr"] = remote_ipv4_network_cidr
        __props__.__dict__["remote_ipv6_network_cidr"] = remote_ipv6_network_cidr
        __props__.__dict__["routes"] = routes
        __props__.__dict__["static_routes_only"] = static_routes_only
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["transit_gateway_attachment_id"] = transit_gateway_attachment_id
        __props__.__dict__["transit_gateway_id"] = transit_gateway_id
        __props__.__dict__["transport_transit_gateway_attachment_id"] = transport_transit_gateway_attachment_id
        __props__.__dict__["tunnel1_address"] = tunnel1_address
        __props__.__dict__["tunnel1_bgp_asn"] = tunnel1_bgp_asn
        __props__.__dict__["tunnel1_bgp_holdtime"] = tunnel1_bgp_holdtime
        __props__.__dict__["tunnel1_cgw_inside_address"] = tunnel1_cgw_inside_address
        __props__.__dict__["tunnel1_dpd_timeout_action"] = tunnel1_dpd_timeout_action
        __props__.__dict__["tunnel1_dpd_timeout_seconds"] = tunnel1_dpd_timeout_seconds
        __props__.__dict__["tunnel1_ike_versions"] = tunnel1_ike_versions
        __props__.__dict__["tunnel1_inside_cidr"] = tunnel1_inside_cidr
        __props__.__dict__["tunnel1_inside_ipv6_cidr"] = tunnel1_inside_ipv6_cidr
        __props__.__dict__["tunnel1_log_options"] = tunnel1_log_options
        __props__.__dict__["tunnel1_phase1_dh_group_numbers"] = tunnel1_phase1_dh_group_numbers
        __props__.__dict__["tunnel1_phase1_encryption_algorithms"] = tunnel1_phase1_encryption_algorithms
        __props__.__dict__["tunnel1_phase1_integrity_algorithms"] = tunnel1_phase1_integrity_algorithms
        __props__.__dict__["tunnel1_phase1_lifetime_seconds"] = tunnel1_phase1_lifetime_seconds
        __props__.__dict__["tunnel1_phase2_dh_group_numbers"] = tunnel1_phase2_dh_group_numbers
        __props__.__dict__["tunnel1_phase2_encryption_algorithms"] = tunnel1_phase2_encryption_algorithms
        __props__.__dict__["tunnel1_phase2_integrity_algorithms"] = tunnel1_phase2_integrity_algorithms
        __props__.__dict__["tunnel1_phase2_lifetime_seconds"] = tunnel1_phase2_lifetime_seconds
        __props__.__dict__["tunnel1_preshared_key"] = tunnel1_preshared_key
        __props__.__dict__["tunnel1_rekey_fuzz_percentage"] = tunnel1_rekey_fuzz_percentage
        __props__.__dict__["tunnel1_rekey_margin_time_seconds"] = tunnel1_rekey_margin_time_seconds
        __props__.__dict__["tunnel1_replay_window_size"] = tunnel1_replay_window_size
        __props__.__dict__["tunnel1_startup_action"] = tunnel1_startup_action
        __props__.__dict__["tunnel1_vgw_inside_address"] = tunnel1_vgw_inside_address
        __props__.__dict__["tunnel2_address"] = tunnel2_address
        __props__.__dict__["tunnel2_bgp_asn"] = tunnel2_bgp_asn
        __props__.__dict__["tunnel2_bgp_holdtime"] = tunnel2_bgp_holdtime
        __props__.__dict__["tunnel2_cgw_inside_address"] = tunnel2_cgw_inside_address
        __props__.__dict__["tunnel2_dpd_timeout_action"] = tunnel2_dpd_timeout_action
        __props__.__dict__["tunnel2_dpd_timeout_seconds"] = tunnel2_dpd_timeout_seconds
        __props__.__dict__["tunnel2_ike_versions"] = tunnel2_ike_versions
        __props__.__dict__["tunnel2_inside_cidr"] = tunnel2_inside_cidr
        __props__.__dict__["tunnel2_inside_ipv6_cidr"] = tunnel2_inside_ipv6_cidr
        __props__.__dict__["tunnel2_log_options"] = tunnel2_log_options
        __props__.__dict__["tunnel2_phase1_dh_group_numbers"] = tunnel2_phase1_dh_group_numbers
        __props__.__dict__["tunnel2_phase1_encryption_algorithms"] = tunnel2_phase1_encryption_algorithms
        __props__.__dict__["tunnel2_phase1_integrity_algorithms"] = tunnel2_phase1_integrity_algorithms
        __props__.__dict__["tunnel2_phase1_lifetime_seconds"] = tunnel2_phase1_lifetime_seconds
        __props__.__dict__["tunnel2_phase2_dh_group_numbers"] = tunnel2_phase2_dh_group_numbers
        __props__.__dict__["tunnel2_phase2_encryption_algorithms"] = tunnel2_phase2_encryption_algorithms
        __props__.__dict__["tunnel2_phase2_integrity_algorithms"] = tunnel2_phase2_integrity_algorithms
        __props__.__dict__["tunnel2_phase2_lifetime_seconds"] = tunnel2_phase2_lifetime_seconds
        __props__.__dict__["tunnel2_preshared_key"] = tunnel2_preshared_key
        __props__.__dict__["tunnel2_rekey_fuzz_percentage"] = tunnel2_rekey_fuzz_percentage
        __props__.__dict__["tunnel2_rekey_margin_time_seconds"] = tunnel2_rekey_margin_time_seconds
        __props__.__dict__["tunnel2_replay_window_size"] = tunnel2_replay_window_size
        __props__.__dict__["tunnel2_startup_action"] = tunnel2_startup_action
        __props__.__dict__["tunnel2_vgw_inside_address"] = tunnel2_vgw_inside_address
        __props__.__dict__["tunnel_inside_ip_version"] = tunnel_inside_ip_version
        __props__.__dict__["type"] = type
        __props__.__dict__["vgw_telemetries"] = vgw_telemetries
        __props__.__dict__["vpn_gateway_id"] = vpn_gateway_id
        return VpnConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="coreNetworkArn")
    def core_network_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "core_network_arn")

    @property
    @pulumi.getter(name="coreNetworkAttachmentArn")
    def core_network_attachment_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "core_network_attachment_arn")

    @property
    @pulumi.getter(name="customerGatewayConfiguration")
    def customer_gateway_configuration(self) -> pulumi.Output[str]:
        return pulumi.get(self, "customer_gateway_configuration")

    @property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "customer_gateway_id")

    @property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enable_acceleration")

    @property
    @pulumi.getter(name="localIpv4NetworkCidr")
    def local_ipv4_network_cidr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_ipv4_network_cidr")

    @property
    @pulumi.getter(name="localIpv6NetworkCidr")
    def local_ipv6_network_cidr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "local_ipv6_network_cidr")

    @property
    @pulumi.getter(name="outsideIpAddressType")
    def outside_ip_address_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "outside_ip_address_type")

    @property
    @pulumi.getter(name="remoteIpv4NetworkCidr")
    def remote_ipv4_network_cidr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remote_ipv4_network_cidr")

    @property
    @pulumi.getter(name="remoteIpv6NetworkCidr")
    def remote_ipv6_network_cidr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "remote_ipv6_network_cidr")

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Output[Sequence['outputs.VpnConnectionRoute']]:
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="staticRoutesOnly")
    def static_routes_only(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "static_routes_only")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter(name="transitGatewayAttachmentId")
    def transit_gateway_attachment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "transit_gateway_attachment_id")

    @property
    @pulumi.getter(name="transitGatewayId")
    def transit_gateway_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "transit_gateway_id")

    @property
    @pulumi.getter(name="transportTransitGatewayAttachmentId")
    def transport_transit_gateway_attachment_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "transport_transit_gateway_attachment_id")

    @property
    @pulumi.getter(name="tunnel1Address")
    def tunnel1_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel1_address")

    @property
    @pulumi.getter(name="tunnel1BgpAsn")
    def tunnel1_bgp_asn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel1_bgp_asn")

    @property
    @pulumi.getter(name="tunnel1BgpHoldtime")
    def tunnel1_bgp_holdtime(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tunnel1_bgp_holdtime")

    @property
    @pulumi.getter(name="tunnel1CgwInsideAddress")
    def tunnel1_cgw_inside_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel1_cgw_inside_address")

    @property
    @pulumi.getter(name="tunnel1DpdTimeoutAction")
    def tunnel1_dpd_timeout_action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tunnel1_dpd_timeout_action")

    @property
    @pulumi.getter(name="tunnel1DpdTimeoutSeconds")
    def tunnel1_dpd_timeout_seconds(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel1_dpd_timeout_seconds")

    @property
    @pulumi.getter(name="tunnel1IkeVersions")
    def tunnel1_ike_versions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tunnel1_ike_versions")

    @property
    @pulumi.getter(name="tunnel1InsideCidr")
    def tunnel1_inside_cidr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel1_inside_cidr")

    @property
    @pulumi.getter(name="tunnel1InsideIpv6Cidr")
    def tunnel1_inside_ipv6_cidr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel1_inside_ipv6_cidr")

    @property
    @pulumi.getter(name="tunnel1LogOptions")
    def tunnel1_log_options(self) -> pulumi.Output['outputs.VpnConnectionTunnel1LogOptions']:
        return pulumi.get(self, "tunnel1_log_options")

    @property
    @pulumi.getter(name="tunnel1Phase1DhGroupNumbers")
    def tunnel1_phase1_dh_group_numbers(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "tunnel1_phase1_dh_group_numbers")

    @property
    @pulumi.getter(name="tunnel1Phase1EncryptionAlgorithms")
    def tunnel1_phase1_encryption_algorithms(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tunnel1_phase1_encryption_algorithms")

    @property
    @pulumi.getter(name="tunnel1Phase1IntegrityAlgorithms")
    def tunnel1_phase1_integrity_algorithms(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tunnel1_phase1_integrity_algorithms")

    @property
    @pulumi.getter(name="tunnel1Phase1LifetimeSeconds")
    def tunnel1_phase1_lifetime_seconds(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel1_phase1_lifetime_seconds")

    @property
    @pulumi.getter(name="tunnel1Phase2DhGroupNumbers")
    def tunnel1_phase2_dh_group_numbers(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "tunnel1_phase2_dh_group_numbers")

    @property
    @pulumi.getter(name="tunnel1Phase2EncryptionAlgorithms")
    def tunnel1_phase2_encryption_algorithms(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tunnel1_phase2_encryption_algorithms")

    @property
    @pulumi.getter(name="tunnel1Phase2IntegrityAlgorithms")
    def tunnel1_phase2_integrity_algorithms(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tunnel1_phase2_integrity_algorithms")

    @property
    @pulumi.getter(name="tunnel1Phase2LifetimeSeconds")
    def tunnel1_phase2_lifetime_seconds(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel1_phase2_lifetime_seconds")

    @property
    @pulumi.getter(name="tunnel1PresharedKey")
    def tunnel1_preshared_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel1_preshared_key")

    @property
    @pulumi.getter(name="tunnel1RekeyFuzzPercentage")
    def tunnel1_rekey_fuzz_percentage(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel1_rekey_fuzz_percentage")

    @property
    @pulumi.getter(name="tunnel1RekeyMarginTimeSeconds")
    def tunnel1_rekey_margin_time_seconds(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel1_rekey_margin_time_seconds")

    @property
    @pulumi.getter(name="tunnel1ReplayWindowSize")
    def tunnel1_replay_window_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel1_replay_window_size")

    @property
    @pulumi.getter(name="tunnel1StartupAction")
    def tunnel1_startup_action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tunnel1_startup_action")

    @property
    @pulumi.getter(name="tunnel1VgwInsideAddress")
    def tunnel1_vgw_inside_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel1_vgw_inside_address")

    @property
    @pulumi.getter(name="tunnel2Address")
    def tunnel2_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel2_address")

    @property
    @pulumi.getter(name="tunnel2BgpAsn")
    def tunnel2_bgp_asn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel2_bgp_asn")

    @property
    @pulumi.getter(name="tunnel2BgpHoldtime")
    def tunnel2_bgp_holdtime(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tunnel2_bgp_holdtime")

    @property
    @pulumi.getter(name="tunnel2CgwInsideAddress")
    def tunnel2_cgw_inside_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel2_cgw_inside_address")

    @property
    @pulumi.getter(name="tunnel2DpdTimeoutAction")
    def tunnel2_dpd_timeout_action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tunnel2_dpd_timeout_action")

    @property
    @pulumi.getter(name="tunnel2DpdTimeoutSeconds")
    def tunnel2_dpd_timeout_seconds(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel2_dpd_timeout_seconds")

    @property
    @pulumi.getter(name="tunnel2IkeVersions")
    def tunnel2_ike_versions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tunnel2_ike_versions")

    @property
    @pulumi.getter(name="tunnel2InsideCidr")
    def tunnel2_inside_cidr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel2_inside_cidr")

    @property
    @pulumi.getter(name="tunnel2InsideIpv6Cidr")
    def tunnel2_inside_ipv6_cidr(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel2_inside_ipv6_cidr")

    @property
    @pulumi.getter(name="tunnel2LogOptions")
    def tunnel2_log_options(self) -> pulumi.Output['outputs.VpnConnectionTunnel2LogOptions']:
        return pulumi.get(self, "tunnel2_log_options")

    @property
    @pulumi.getter(name="tunnel2Phase1DhGroupNumbers")
    def tunnel2_phase1_dh_group_numbers(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "tunnel2_phase1_dh_group_numbers")

    @property
    @pulumi.getter(name="tunnel2Phase1EncryptionAlgorithms")
    def tunnel2_phase1_encryption_algorithms(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tunnel2_phase1_encryption_algorithms")

    @property
    @pulumi.getter(name="tunnel2Phase1IntegrityAlgorithms")
    def tunnel2_phase1_integrity_algorithms(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tunnel2_phase1_integrity_algorithms")

    @property
    @pulumi.getter(name="tunnel2Phase1LifetimeSeconds")
    def tunnel2_phase1_lifetime_seconds(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel2_phase1_lifetime_seconds")

    @property
    @pulumi.getter(name="tunnel2Phase2DhGroupNumbers")
    def tunnel2_phase2_dh_group_numbers(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "tunnel2_phase2_dh_group_numbers")

    @property
    @pulumi.getter(name="tunnel2Phase2EncryptionAlgorithms")
    def tunnel2_phase2_encryption_algorithms(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tunnel2_phase2_encryption_algorithms")

    @property
    @pulumi.getter(name="tunnel2Phase2IntegrityAlgorithms")
    def tunnel2_phase2_integrity_algorithms(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tunnel2_phase2_integrity_algorithms")

    @property
    @pulumi.getter(name="tunnel2Phase2LifetimeSeconds")
    def tunnel2_phase2_lifetime_seconds(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel2_phase2_lifetime_seconds")

    @property
    @pulumi.getter(name="tunnel2PresharedKey")
    def tunnel2_preshared_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel2_preshared_key")

    @property
    @pulumi.getter(name="tunnel2RekeyFuzzPercentage")
    def tunnel2_rekey_fuzz_percentage(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel2_rekey_fuzz_percentage")

    @property
    @pulumi.getter(name="tunnel2RekeyMarginTimeSeconds")
    def tunnel2_rekey_margin_time_seconds(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel2_rekey_margin_time_seconds")

    @property
    @pulumi.getter(name="tunnel2ReplayWindowSize")
    def tunnel2_replay_window_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel2_replay_window_size")

    @property
    @pulumi.getter(name="tunnel2StartupAction")
    def tunnel2_startup_action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tunnel2_startup_action")

    @property
    @pulumi.getter(name="tunnel2VgwInsideAddress")
    def tunnel2_vgw_inside_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel2_vgw_inside_address")

    @property
    @pulumi.getter(name="tunnelInsideIpVersion")
    def tunnel_inside_ip_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tunnel_inside_ip_version")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vgwTelemetries")
    def vgw_telemetries(self) -> pulumi.Output[Sequence['outputs.VpnConnectionVgwTelemetry']]:
        return pulumi.get(self, "vgw_telemetries")

    @property
    @pulumi.getter(name="vpnGatewayId")
    def vpn_gateway_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vpn_gateway_id")

