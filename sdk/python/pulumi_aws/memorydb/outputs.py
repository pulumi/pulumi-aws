# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ClusterClusterEndpoint',
    'ClusterShard',
    'ClusterShardNode',
    'ClusterShardNodeEndpoint',
    'ParameterGroupParameter',
    'SnapshotClusterConfiguration',
    'UserAuthenticationMode',
    'GetClusterClusterEndpointResult',
    'GetClusterShardResult',
    'GetClusterShardNodeResult',
    'GetClusterShardNodeEndpointResult',
    'GetParameterGroupParameterResult',
    'GetSnapshotClusterConfigurationResult',
    'GetUserAuthenticationModeResult',
]

@pulumi.output_type
class ClusterClusterEndpoint(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str address: DNS hostname of the node.
        :param int port: The port number on which each of the nodes accepts connections. Defaults to `6379`.
        """
        ClusterClusterEndpoint._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: Optional[str] = None,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if address is not None:
            _setter("address", address)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        DNS hostname of the node.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port number on which each of the nodes accepts connections. Defaults to `6379`.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ClusterShard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numNodes":
            suggest = "num_nodes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterShard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterShard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterShard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 nodes: Optional[Sequence['outputs.ClusterShardNode']] = None,
                 num_nodes: Optional[int] = None,
                 slots: Optional[str] = None):
        """
        :param str name: Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        :param Sequence['ClusterShardNodeArgs'] nodes: Set of nodes in this shard.
        :param int num_nodes: Number of individual nodes in this shard.
        :param str slots: Keyspace for this shard. Example: `0-16383`.
        """
        ClusterShard._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            nodes=nodes,
            num_nodes=num_nodes,
            slots=slots,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             nodes: Optional[Sequence['outputs.ClusterShardNode']] = None,
             num_nodes: Optional[int] = None,
             slots: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if num_nodes is None and 'numNodes' in kwargs:
            num_nodes = kwargs['numNodes']

        if name is not None:
            _setter("name", name)
        if nodes is not None:
            _setter("nodes", nodes)
        if num_nodes is not None:
            _setter("num_nodes", num_nodes)
        if slots is not None:
            _setter("slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.ClusterShardNode']]:
        """
        Set of nodes in this shard.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numNodes")
    def num_nodes(self) -> Optional[int]:
        """
        Number of individual nodes in this shard.
        """
        return pulumi.get(self, "num_nodes")

    @property
    @pulumi.getter
    def slots(self) -> Optional[str]:
        """
        Keyspace for this shard. Example: `0-16383`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class ClusterShardNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "createTime":
            suggest = "create_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterShardNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterShardNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterShardNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[str] = None,
                 create_time: Optional[str] = None,
                 endpoints: Optional[Sequence['outputs.ClusterShardNodeEndpoint']] = None,
                 name: Optional[str] = None):
        """
        :param str availability_zone: The Availability Zone in which the node resides.
        :param str create_time: The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
        :param str name: Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        """
        ClusterShardNode._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_zone=availability_zone,
            create_time=create_time,
            endpoints=endpoints,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_zone: Optional[str] = None,
             create_time: Optional[str] = None,
             endpoints: Optional[Sequence['outputs.ClusterShardNodeEndpoint']] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if availability_zone is None and 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if create_time is None and 'createTime' in kwargs:
            create_time = kwargs['createTime']

        if availability_zone is not None:
            _setter("availability_zone", availability_zone)
        if create_time is not None:
            _setter("create_time", create_time)
        if endpoints is not None:
            _setter("endpoints", endpoints)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The Availability Zone in which the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.ClusterShardNodeEndpoint']]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ClusterShardNodeEndpoint(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str address: DNS hostname of the node.
        :param int port: The port number on which each of the nodes accepts connections. Defaults to `6379`.
        """
        ClusterShardNodeEndpoint._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: Optional[str] = None,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if address is not None:
            _setter("address", address)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        DNS hostname of the node.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port number on which each of the nodes accepts connections. Defaults to `6379`.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ParameterGroupParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the parameter.
        :param str value: The value of the parameter.
        """
        ParameterGroupParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SnapshotClusterConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engineVersion":
            suggest = "engine_version"
        elif key == "maintenanceWindow":
            suggest = "maintenance_window"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "numShards":
            suggest = "num_shards"
        elif key == "parameterGroupName":
            suggest = "parameter_group_name"
        elif key == "snapshotRetentionLimit":
            suggest = "snapshot_retention_limit"
        elif key == "snapshotWindow":
            suggest = "snapshot_window"
        elif key == "subnetGroupName":
            suggest = "subnet_group_name"
        elif key == "topicArn":
            suggest = "topic_arn"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotClusterConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotClusterConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotClusterConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 engine_version: Optional[str] = None,
                 maintenance_window: Optional[str] = None,
                 name: Optional[str] = None,
                 node_type: Optional[str] = None,
                 num_shards: Optional[int] = None,
                 parameter_group_name: Optional[str] = None,
                 port: Optional[int] = None,
                 snapshot_retention_limit: Optional[int] = None,
                 snapshot_window: Optional[str] = None,
                 subnet_group_name: Optional[str] = None,
                 topic_arn: Optional[str] = None,
                 vpc_id: Optional[str] = None):
        """
        :param str description: Description for the cluster.
        :param str engine_version: Version number of the Redis engine used by the cluster.
        :param str maintenance_window: The weekly time range during which maintenance on the cluster is performed.
        :param str name: Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        :param str node_type: Compute and memory capacity of the nodes in the cluster.
        :param int num_shards: Number of shards in the cluster.
        :param str parameter_group_name: Name of the parameter group associated with the cluster.
        :param int port: Port number on which the cluster accepts connections.
        :param int snapshot_retention_limit: Number of days for which MemoryDB retains automatic snapshots before deleting them.
        :param str snapshot_window: The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
        :param str subnet_group_name: Name of the subnet group used by the cluster.
        :param str topic_arn: ARN of the SNS topic to which cluster notifications are sent.
        :param str vpc_id: The VPC in which the cluster exists.
        """
        SnapshotClusterConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            engine_version=engine_version,
            maintenance_window=maintenance_window,
            name=name,
            node_type=node_type,
            num_shards=num_shards,
            parameter_group_name=parameter_group_name,
            port=port,
            snapshot_retention_limit=snapshot_retention_limit,
            snapshot_window=snapshot_window,
            subnet_group_name=subnet_group_name,
            topic_arn=topic_arn,
            vpc_id=vpc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             engine_version: Optional[str] = None,
             maintenance_window: Optional[str] = None,
             name: Optional[str] = None,
             node_type: Optional[str] = None,
             num_shards: Optional[int] = None,
             parameter_group_name: Optional[str] = None,
             port: Optional[int] = None,
             snapshot_retention_limit: Optional[int] = None,
             snapshot_window: Optional[str] = None,
             subnet_group_name: Optional[str] = None,
             topic_arn: Optional[str] = None,
             vpc_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if engine_version is None and 'engineVersion' in kwargs:
            engine_version = kwargs['engineVersion']
        if maintenance_window is None and 'maintenanceWindow' in kwargs:
            maintenance_window = kwargs['maintenanceWindow']
        if node_type is None and 'nodeType' in kwargs:
            node_type = kwargs['nodeType']
        if num_shards is None and 'numShards' in kwargs:
            num_shards = kwargs['numShards']
        if parameter_group_name is None and 'parameterGroupName' in kwargs:
            parameter_group_name = kwargs['parameterGroupName']
        if snapshot_retention_limit is None and 'snapshotRetentionLimit' in kwargs:
            snapshot_retention_limit = kwargs['snapshotRetentionLimit']
        if snapshot_window is None and 'snapshotWindow' in kwargs:
            snapshot_window = kwargs['snapshotWindow']
        if subnet_group_name is None and 'subnetGroupName' in kwargs:
            subnet_group_name = kwargs['subnetGroupName']
        if topic_arn is None and 'topicArn' in kwargs:
            topic_arn = kwargs['topicArn']
        if vpc_id is None and 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']

        if description is not None:
            _setter("description", description)
        if engine_version is not None:
            _setter("engine_version", engine_version)
        if maintenance_window is not None:
            _setter("maintenance_window", maintenance_window)
        if name is not None:
            _setter("name", name)
        if node_type is not None:
            _setter("node_type", node_type)
        if num_shards is not None:
            _setter("num_shards", num_shards)
        if parameter_group_name is not None:
            _setter("parameter_group_name", parameter_group_name)
        if port is not None:
            _setter("port", port)
        if snapshot_retention_limit is not None:
            _setter("snapshot_retention_limit", snapshot_retention_limit)
        if snapshot_window is not None:
            _setter("snapshot_window", snapshot_window)
        if subnet_group_name is not None:
            _setter("subnet_group_name", subnet_group_name)
        if topic_arn is not None:
            _setter("topic_arn", topic_arn)
        if vpc_id is not None:
            _setter("vpc_id", vpc_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description for the cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        """
        Version number of the Redis engine used by the cluster.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[str]:
        """
        The weekly time range during which maintenance on the cluster is performed.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `name_prefix`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[str]:
        """
        Compute and memory capacity of the nodes in the cluster.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="numShards")
    def num_shards(self) -> Optional[int]:
        """
        Number of shards in the cluster.
        """
        return pulumi.get(self, "num_shards")

    @property
    @pulumi.getter(name="parameterGroupName")
    def parameter_group_name(self) -> Optional[str]:
        """
        Name of the parameter group associated with the cluster.
        """
        return pulumi.get(self, "parameter_group_name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port number on which the cluster accepts connections.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="snapshotRetentionLimit")
    def snapshot_retention_limit(self) -> Optional[int]:
        """
        Number of days for which MemoryDB retains automatic snapshots before deleting them.
        """
        return pulumi.get(self, "snapshot_retention_limit")

    @property
    @pulumi.getter(name="snapshotWindow")
    def snapshot_window(self) -> Optional[str]:
        """
        The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
        """
        return pulumi.get(self, "snapshot_window")

    @property
    @pulumi.getter(name="subnetGroupName")
    def subnet_group_name(self) -> Optional[str]:
        """
        Name of the subnet group used by the cluster.
        """
        return pulumi.get(self, "subnet_group_name")

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[str]:
        """
        ARN of the SNS topic to which cluster notifications are sent.
        """
        return pulumi.get(self, "topic_arn")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        The VPC in which the cluster exists.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class UserAuthenticationMode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordCount":
            suggest = "password_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAuthenticationMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAuthenticationMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAuthenticationMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 passwords: Sequence[str],
                 type: str,
                 password_count: Optional[int] = None):
        """
        :param Sequence[str] passwords: The set of passwords used for authentication. You can create up to two passwords for each user.
        :param str type: Indicates whether the user requires a password to authenticate. Must be set to `password`.
        :param int password_count: The number of passwords belonging to the user.
        """
        UserAuthenticationMode._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            passwords=passwords,
            type=type,
            password_count=password_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             passwords: Optional[Sequence[str]] = None,
             type: Optional[str] = None,
             password_count: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if passwords is None:
            raise TypeError("Missing 'passwords' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if password_count is None and 'passwordCount' in kwargs:
            password_count = kwargs['passwordCount']

        _setter("passwords", passwords)
        _setter("type", type)
        if password_count is not None:
            _setter("password_count", password_count)

    @property
    @pulumi.getter
    def passwords(self) -> Sequence[str]:
        """
        The set of passwords used for authentication. You can create up to two passwords for each user.
        """
        return pulumi.get(self, "passwords")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Indicates whether the user requires a password to authenticate. Must be set to `password`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="passwordCount")
    def password_count(self) -> Optional[int]:
        """
        The number of passwords belonging to the user.
        """
        return pulumi.get(self, "password_count")


@pulumi.output_type
class GetClusterClusterEndpointResult(dict):
    def __init__(__self__, *,
                 address: str,
                 port: int):
        """
        :param str address: DNS hostname of the node.
        :param int port: Port number that this node is listening on.
        """
        GetClusterClusterEndpointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: Optional[str] = None,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if address is None:
            raise TypeError("Missing 'address' argument")
        if port is None:
            raise TypeError("Missing 'port' argument")

        _setter("address", address)
        _setter("port", port)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        DNS hostname of the node.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number that this node is listening on.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetClusterShardResult(dict):
    def __init__(__self__, *,
                 name: str,
                 nodes: Sequence['outputs.GetClusterShardNodeResult'],
                 num_nodes: int,
                 slots: str):
        """
        :param str name: Name of the cluster.
        :param Sequence['GetClusterShardNodeArgs'] nodes: Set of nodes in this shard.
        :param int num_nodes: Number of individual nodes in this shard.
        :param str slots: Keyspace for this shard. Example: `0-16383`.
        """
        GetClusterShardResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            nodes=nodes,
            num_nodes=num_nodes,
            slots=slots,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             nodes: Optional[Sequence['outputs.GetClusterShardNodeResult']] = None,
             num_nodes: Optional[int] = None,
             slots: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if nodes is None:
            raise TypeError("Missing 'nodes' argument")
        if num_nodes is None and 'numNodes' in kwargs:
            num_nodes = kwargs['numNodes']
        if num_nodes is None:
            raise TypeError("Missing 'num_nodes' argument")
        if slots is None:
            raise TypeError("Missing 'slots' argument")

        _setter("name", name)
        _setter("nodes", nodes)
        _setter("num_nodes", num_nodes)
        _setter("slots", slots)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetClusterShardNodeResult']:
        """
        Set of nodes in this shard.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numNodes")
    def num_nodes(self) -> int:
        """
        Number of individual nodes in this shard.
        """
        return pulumi.get(self, "num_nodes")

    @property
    @pulumi.getter
    def slots(self) -> str:
        """
        Keyspace for this shard. Example: `0-16383`.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class GetClusterShardNodeResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 create_time: str,
                 endpoints: Sequence['outputs.GetClusterShardNodeEndpointResult'],
                 name: str):
        """
        :param str availability_zone: The Availability Zone in which the node resides.
        :param str create_time: The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
        :param str name: Name of the cluster.
        """
        GetClusterShardNodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_zone=availability_zone,
            create_time=create_time,
            endpoints=endpoints,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_zone: Optional[str] = None,
             create_time: Optional[str] = None,
             endpoints: Optional[Sequence['outputs.GetClusterShardNodeEndpointResult']] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if availability_zone is None and 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if availability_zone is None:
            raise TypeError("Missing 'availability_zone' argument")
        if create_time is None and 'createTime' in kwargs:
            create_time = kwargs['createTime']
        if create_time is None:
            raise TypeError("Missing 'create_time' argument")
        if endpoints is None:
            raise TypeError("Missing 'endpoints' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("availability_zone", availability_zone)
        _setter("create_time", create_time)
        _setter("endpoints", endpoints)
        _setter("name", name)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        The Availability Zone in which the node resides.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetClusterShardNodeEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterShardNodeEndpointResult(dict):
    def __init__(__self__, *,
                 address: str,
                 port: int):
        """
        :param str address: DNS hostname of the node.
        :param int port: Port number that this node is listening on.
        """
        GetClusterShardNodeEndpointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: Optional[str] = None,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if address is None:
            raise TypeError("Missing 'address' argument")
        if port is None:
            raise TypeError("Missing 'port' argument")

        _setter("address", address)
        _setter("port", port)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        DNS hostname of the node.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number that this node is listening on.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetParameterGroupParameterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Name of the parameter group.
        :param str value: Value of the parameter.
        """
        GetParameterGroupParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the parameter group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSnapshotClusterConfigurationResult(dict):
    def __init__(__self__, *,
                 description: str,
                 engine_version: str,
                 maintenance_window: str,
                 name: str,
                 node_type: str,
                 num_shards: int,
                 parameter_group_name: str,
                 port: int,
                 snapshot_retention_limit: int,
                 snapshot_window: str,
                 subnet_group_name: str,
                 topic_arn: str,
                 vpc_id: str):
        """
        :param str description: Description for the cluster.
        :param str engine_version: Version number of the Redis engine used by the cluster.
        :param str maintenance_window: The weekly time range during which maintenance on the cluster is performed.
        :param str name: Name of the snapshot.
        :param str node_type: Compute and memory capacity of the nodes in the cluster.
        :param int num_shards: Number of shards in the cluster.
        :param str parameter_group_name: Name of the parameter group associated with the cluster.
        :param int port: Port number on which the cluster accepts connections.
        :param int snapshot_retention_limit: Number of days for which MemoryDB retains automatic snapshots before deleting them.
        :param str snapshot_window: The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
        :param str subnet_group_name: Name of the subnet group used by the cluster.
        :param str topic_arn: ARN of the SNS topic to which cluster notifications are sent.
        :param str vpc_id: The VPC in which the cluster exists.
        """
        GetSnapshotClusterConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            engine_version=engine_version,
            maintenance_window=maintenance_window,
            name=name,
            node_type=node_type,
            num_shards=num_shards,
            parameter_group_name=parameter_group_name,
            port=port,
            snapshot_retention_limit=snapshot_retention_limit,
            snapshot_window=snapshot_window,
            subnet_group_name=subnet_group_name,
            topic_arn=topic_arn,
            vpc_id=vpc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             engine_version: Optional[str] = None,
             maintenance_window: Optional[str] = None,
             name: Optional[str] = None,
             node_type: Optional[str] = None,
             num_shards: Optional[int] = None,
             parameter_group_name: Optional[str] = None,
             port: Optional[int] = None,
             snapshot_retention_limit: Optional[int] = None,
             snapshot_window: Optional[str] = None,
             subnet_group_name: Optional[str] = None,
             topic_arn: Optional[str] = None,
             vpc_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if description is None:
            raise TypeError("Missing 'description' argument")
        if engine_version is None and 'engineVersion' in kwargs:
            engine_version = kwargs['engineVersion']
        if engine_version is None:
            raise TypeError("Missing 'engine_version' argument")
        if maintenance_window is None and 'maintenanceWindow' in kwargs:
            maintenance_window = kwargs['maintenanceWindow']
        if maintenance_window is None:
            raise TypeError("Missing 'maintenance_window' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if node_type is None and 'nodeType' in kwargs:
            node_type = kwargs['nodeType']
        if node_type is None:
            raise TypeError("Missing 'node_type' argument")
        if num_shards is None and 'numShards' in kwargs:
            num_shards = kwargs['numShards']
        if num_shards is None:
            raise TypeError("Missing 'num_shards' argument")
        if parameter_group_name is None and 'parameterGroupName' in kwargs:
            parameter_group_name = kwargs['parameterGroupName']
        if parameter_group_name is None:
            raise TypeError("Missing 'parameter_group_name' argument")
        if port is None:
            raise TypeError("Missing 'port' argument")
        if snapshot_retention_limit is None and 'snapshotRetentionLimit' in kwargs:
            snapshot_retention_limit = kwargs['snapshotRetentionLimit']
        if snapshot_retention_limit is None:
            raise TypeError("Missing 'snapshot_retention_limit' argument")
        if snapshot_window is None and 'snapshotWindow' in kwargs:
            snapshot_window = kwargs['snapshotWindow']
        if snapshot_window is None:
            raise TypeError("Missing 'snapshot_window' argument")
        if subnet_group_name is None and 'subnetGroupName' in kwargs:
            subnet_group_name = kwargs['subnetGroupName']
        if subnet_group_name is None:
            raise TypeError("Missing 'subnet_group_name' argument")
        if topic_arn is None and 'topicArn' in kwargs:
            topic_arn = kwargs['topicArn']
        if topic_arn is None:
            raise TypeError("Missing 'topic_arn' argument")
        if vpc_id is None and 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if vpc_id is None:
            raise TypeError("Missing 'vpc_id' argument")

        _setter("description", description)
        _setter("engine_version", engine_version)
        _setter("maintenance_window", maintenance_window)
        _setter("name", name)
        _setter("node_type", node_type)
        _setter("num_shards", num_shards)
        _setter("parameter_group_name", parameter_group_name)
        _setter("port", port)
        _setter("snapshot_retention_limit", snapshot_retention_limit)
        _setter("snapshot_window", snapshot_window)
        _setter("subnet_group_name", subnet_group_name)
        _setter("topic_arn", topic_arn)
        _setter("vpc_id", vpc_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description for the cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        Version number of the Redis engine used by the cluster.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> str:
        """
        The weekly time range during which maintenance on the cluster is performed.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the snapshot.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        Compute and memory capacity of the nodes in the cluster.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="numShards")
    def num_shards(self) -> int:
        """
        Number of shards in the cluster.
        """
        return pulumi.get(self, "num_shards")

    @property
    @pulumi.getter(name="parameterGroupName")
    def parameter_group_name(self) -> str:
        """
        Name of the parameter group associated with the cluster.
        """
        return pulumi.get(self, "parameter_group_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number on which the cluster accepts connections.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="snapshotRetentionLimit")
    def snapshot_retention_limit(self) -> int:
        """
        Number of days for which MemoryDB retains automatic snapshots before deleting them.
        """
        return pulumi.get(self, "snapshot_retention_limit")

    @property
    @pulumi.getter(name="snapshotWindow")
    def snapshot_window(self) -> str:
        """
        The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
        """
        return pulumi.get(self, "snapshot_window")

    @property
    @pulumi.getter(name="subnetGroupName")
    def subnet_group_name(self) -> str:
        """
        Name of the subnet group used by the cluster.
        """
        return pulumi.get(self, "subnet_group_name")

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> str:
        """
        ARN of the SNS topic to which cluster notifications are sent.
        """
        return pulumi.get(self, "topic_arn")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The VPC in which the cluster exists.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetUserAuthenticationModeResult(dict):
    def __init__(__self__, *,
                 password_count: int,
                 type: str):
        """
        :param int password_count: The number of passwords belonging to the user.
        :param str type: Whether the user requires a password to authenticate.
        """
        GetUserAuthenticationModeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password_count=password_count,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password_count: Optional[int] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if password_count is None and 'passwordCount' in kwargs:
            password_count = kwargs['passwordCount']
        if password_count is None:
            raise TypeError("Missing 'password_count' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("password_count", password_count)
        _setter("type", type)

    @property
    @pulumi.getter(name="passwordCount")
    def password_count(self) -> int:
        """
        The number of passwords belonging to the user.
        """
        return pulumi.get(self, "password_count")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Whether the user requires a password to authenticate.
        """
        return pulumi.get(self, "type")


