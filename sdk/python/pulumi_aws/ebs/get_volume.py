# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetVolumeResult(object):
    """
    A collection of values returned by getVolume.
    """
    def __init__(__self__, arn=None, availability_zone=None, encrypted=None, iops=None, kms_key_id=None, size=None, snapshot_id=None, tags=None, volume_id=None, volume_type=None):
        if not arn:
            raise TypeError('Missing required argument arn')
        elif not isinstance(arn, basestring):
            raise TypeError('Expected argument arn to be a basestring')
        __self__.arn = arn
        """
        The volume ARN (e.g. arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
        """
        if not availability_zone:
            raise TypeError('Missing required argument availability_zone')
        elif not isinstance(availability_zone, basestring):
            raise TypeError('Expected argument availability_zone to be a basestring')
        __self__.availability_zone = availability_zone
        """
        The AZ where the EBS volume exists.
        """
        if not encrypted:
            raise TypeError('Missing required argument encrypted')
        elif not isinstance(encrypted, bool):
            raise TypeError('Expected argument encrypted to be a bool')
        __self__.encrypted = encrypted
        """
        Whether the disk is encrypted.
        """
        if not iops:
            raise TypeError('Missing required argument iops')
        elif not isinstance(iops, int):
            raise TypeError('Expected argument iops to be a int')
        __self__.iops = iops
        """
        The amount of IOPS for the disk.
        """
        if not kms_key_id:
            raise TypeError('Missing required argument kms_key_id')
        elif not isinstance(kms_key_id, basestring):
            raise TypeError('Expected argument kms_key_id to be a basestring')
        __self__.kms_key_id = kms_key_id
        """
        The ARN for the KMS encryption key.
        """
        if not size:
            raise TypeError('Missing required argument size')
        elif not isinstance(size, int):
            raise TypeError('Expected argument size to be a int')
        __self__.size = size
        """
        The size of the drive in GiBs.
        """
        if not snapshot_id:
            raise TypeError('Missing required argument snapshot_id')
        elif not isinstance(snapshot_id, basestring):
            raise TypeError('Expected argument snapshot_id to be a basestring')
        __self__.snapshot_id = snapshot_id
        """
        The snapshot_id the EBS volume is based off.
        """
        if not tags:
            raise TypeError('Missing required argument tags')
        elif not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags for the resource.
        """
        if not volume_id:
            raise TypeError('Missing required argument volume_id')
        elif not isinstance(volume_id, basestring):
            raise TypeError('Expected argument volume_id to be a basestring')
        __self__.volume_id = volume_id
        """
        The volume ID (e.g. vol-59fcb34e).
        """
        if not volume_type:
            raise TypeError('Missing required argument volume_type')
        elif not isinstance(volume_type, basestring):
            raise TypeError('Expected argument volume_type to be a basestring')
        __self__.volume_type = volume_type
        """
        The type of EBS volume.
        """

def get_volume(filters=None, most_recent=None, tags=None):
    """
    Use this data source to get information about an EBS volume for use in other
    resources.
    """
    __args__ = dict()

    __args__['filters'] = filters
    __args__['mostRecent'] = most_recent
    __args__['tags'] = tags
    __ret__ = pulumi.runtime.invoke('aws:ebs/getVolume:getVolume', __args__)

    return GetVolumeResult(
        arn=__ret__['arn'],
        availability_zone=__ret__['availabilityZone'],
        encrypted=__ret__['encrypted'],
        iops=__ret__['iops'],
        kms_key_id=__ret__['kmsKeyId'],
        size=__ret__['size'],
        snapshot_id=__ret__['snapshotId'],
        tags=__ret__['tags'],
        volume_id=__ret__['volumeId'],
        volume_type=__ret__['volumeType'])
