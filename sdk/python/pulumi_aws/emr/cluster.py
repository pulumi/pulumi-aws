# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Cluster(pulumi.CustomResource):
    """
    Provides an Elastic MapReduce Cluster, a web service that makes it easy to
    process large amounts of data efficiently. See [Amazon Elastic MapReduce Documentation](https://aws.amazon.com/documentation/elastic-mapreduce/)
    for more information.
    """
    def __init__(__self__, __name__, __opts__=None, additional_info=None, applications=None, autoscaling_role=None, bootstrap_actions=None, configurations=None, configurations_json=None, core_instance_count=None, core_instance_type=None, custom_ami_id=None, ebs_root_volume_size=None, ec2_attributes=None, instance_groups=None, keep_job_flow_alive_when_no_steps=None, kerberos_attributes=None, log_uri=None, master_instance_type=None, name=None, release_label=None, scale_down_behavior=None, security_configuration=None, service_role=None, steps=None, tags=None, termination_protection=None, visible_to_all_users=None):
        """Create a Cluster resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['additionalInfo'] = additional_info

        __props__['applications'] = applications

        __props__['autoscalingRole'] = autoscaling_role

        __props__['bootstrapActions'] = bootstrap_actions

        __props__['configurations'] = configurations

        __props__['configurationsJson'] = configurations_json

        __props__['coreInstanceCount'] = core_instance_count

        __props__['coreInstanceType'] = core_instance_type

        __props__['customAmiId'] = custom_ami_id

        __props__['ebsRootVolumeSize'] = ebs_root_volume_size

        __props__['ec2Attributes'] = ec2_attributes

        __props__['instanceGroups'] = instance_groups

        __props__['keepJobFlowAliveWhenNoSteps'] = keep_job_flow_alive_when_no_steps

        __props__['kerberosAttributes'] = kerberos_attributes

        __props__['logUri'] = log_uri

        __props__['masterInstanceType'] = master_instance_type

        __props__['name'] = name

        if not release_label:
            raise TypeError('Missing required property release_label')
        __props__['releaseLabel'] = release_label

        __props__['scaleDownBehavior'] = scale_down_behavior

        __props__['securityConfiguration'] = security_configuration

        if not service_role:
            raise TypeError('Missing required property service_role')
        __props__['serviceRole'] = service_role

        __props__['steps'] = steps

        __props__['tags'] = tags

        __props__['terminationProtection'] = termination_protection

        __props__['visibleToAllUsers'] = visible_to_all_users

        __props__['cluster_state'] = None
        __props__['master_public_dns'] = None

        super(Cluster, __self__).__init__(
            'aws:emr/cluster:Cluster',
            __name__,
            __props__,
            __opts__)

