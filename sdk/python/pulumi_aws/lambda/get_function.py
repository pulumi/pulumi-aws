# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetFunctionResult(object):
    """
    A collection of values returned by getFunction.
    """
    def __init__(__self__, arn=None, dead_letter_config=None, description=None, environment=None, handler=None, invoke_arn=None, kms_key_arn=None, last_modified=None, memory_size=None, qualified_arn=None, reserved_concurrent_executions=None, role=None, runtime=None, source_code_hash=None, source_code_size=None, timeout=None, tracing_config=None, version=None, vpc_config=None):
        if not arn:
            raise TypeError('Missing required argument arn')
        elif not isinstance(arn, basestring):
            raise TypeError('Expected argument arn to be a basestring')
        __self__.arn = arn
        """
        The Amazon Resource Name (ARN) identifying your Lambda Function.
        """
        if not dead_letter_config:
            raise TypeError('Missing required argument dead_letter_config')
        elif not isinstance(dead_letter_config, dict):
            raise TypeError('Expected argument dead_letter_config to be a dict')
        __self__.dead_letter_config = dead_letter_config
        """
        Configure the function's *dead letter queue*.
        """
        if not description:
            raise TypeError('Missing required argument description')
        elif not isinstance(description, basestring):
            raise TypeError('Expected argument description to be a basestring')
        __self__.description = description
        """
        Description of what your Lambda Function does.
        """
        if not environment:
            raise TypeError('Missing required argument environment')
        elif not isinstance(environment, dict):
            raise TypeError('Expected argument environment to be a dict')
        __self__.environment = environment
        """
        The Lambda environment's configuration settings.
        """
        if not handler:
            raise TypeError('Missing required argument handler')
        elif not isinstance(handler, basestring):
            raise TypeError('Expected argument handler to be a basestring')
        __self__.handler = handler
        """
        The function entrypoint in your code.
        """
        if not invoke_arn:
            raise TypeError('Missing required argument invoke_arn')
        elif not isinstance(invoke_arn, basestring):
            raise TypeError('Expected argument invoke_arn to be a basestring')
        __self__.invoke_arn = invoke_arn
        """
        The ARN to be used for invoking Lambda Function from API Gateway.
        """
        if not kms_key_arn:
            raise TypeError('Missing required argument kms_key_arn')
        elif not isinstance(kms_key_arn, basestring):
            raise TypeError('Expected argument kms_key_arn to be a basestring')
        __self__.kms_key_arn = kms_key_arn
        """
        The ARN for the KMS encryption key.
        """
        if not last_modified:
            raise TypeError('Missing required argument last_modified')
        elif not isinstance(last_modified, basestring):
            raise TypeError('Expected argument last_modified to be a basestring')
        __self__.last_modified = last_modified
        """
        The date this resource was last modified.
        """
        if not memory_size:
            raise TypeError('Missing required argument memory_size')
        elif not isinstance(memory_size, int):
            raise TypeError('Expected argument memory_size to be a int')
        __self__.memory_size = memory_size
        """
        Amount of memory in MB your Lambda Function can use at runtime.
        """
        if not qualified_arn:
            raise TypeError('Missing required argument qualified_arn')
        elif not isinstance(qualified_arn, basestring):
            raise TypeError('Expected argument qualified_arn to be a basestring')
        __self__.qualified_arn = qualified_arn
        """
        The Amazon Resource Name (ARN) identifying your Lambda Function Version
        """
        if not reserved_concurrent_executions:
            raise TypeError('Missing required argument reserved_concurrent_executions')
        elif not isinstance(reserved_concurrent_executions, int):
            raise TypeError('Expected argument reserved_concurrent_executions to be a int')
        __self__.reserved_concurrent_executions = reserved_concurrent_executions
        """
        The amount of reserved concurrent executions for this lambda function.
        """
        if not role:
            raise TypeError('Missing required argument role')
        elif not isinstance(role, basestring):
            raise TypeError('Expected argument role to be a basestring')
        __self__.role = role
        """
        IAM role attached to the Lambda Function.
        """
        if not runtime:
            raise TypeError('Missing required argument runtime')
        elif not isinstance(runtime, basestring):
            raise TypeError('Expected argument runtime to be a basestring')
        __self__.runtime = runtime
        """
        The runtime environment for the Lambda function..
        """
        if not source_code_hash:
            raise TypeError('Missing required argument source_code_hash')
        elif not isinstance(source_code_hash, basestring):
            raise TypeError('Expected argument source_code_hash to be a basestring')
        __self__.source_code_hash = source_code_hash
        """
        Base64-encoded representation of raw SHA-256 sum of the zip file.
        """
        if not source_code_size:
            raise TypeError('Missing required argument source_code_size')
        elif not isinstance(source_code_size, int):
            raise TypeError('Expected argument source_code_size to be a int')
        __self__.source_code_size = source_code_size
        """
        The size in bytes of the function .zip file.
        """
        if not timeout:
            raise TypeError('Missing required argument timeout')
        elif not isinstance(timeout, int):
            raise TypeError('Expected argument timeout to be a int')
        __self__.timeout = timeout
        """
        The function execution time at which Lambda should terminate the function.
        """
        if not tracing_config:
            raise TypeError('Missing required argument tracing_config')
        elif not isinstance(tracing_config, dict):
            raise TypeError('Expected argument tracing_config to be a dict')
        __self__.tracing_config = tracing_config
        """
        Tracing settings of the function.
        """
        if not version:
            raise TypeError('Missing required argument version')
        elif not isinstance(version, basestring):
            raise TypeError('Expected argument version to be a basestring')
        __self__.version = version
        """
        The version of the Lambda function.
        """
        if not vpc_config:
            raise TypeError('Missing required argument vpc_config')
        elif not isinstance(vpc_config, dict):
            raise TypeError('Expected argument vpc_config to be a dict')
        __self__.vpc_config = vpc_config
        """
        VPC configuration associated with your Lambda function.
        """

def get_function(function_name=None, qualifier=None):
    """
    Provides information about a Lambda Function.
    """
    __args__ = dict()

    __args__['functionName'] = function_name
    __args__['qualifier'] = qualifier
    __ret__ = pulumi.runtime.invoke('aws:lambda/getFunction:getFunction', __args__)

    return GetFunctionResult(
        arn=__ret__['arn'],
        dead_letter_config=__ret__['deadLetterConfig'],
        description=__ret__['description'],
        environment=__ret__['environment'],
        handler=__ret__['handler'],
        invoke_arn=__ret__['invokeArn'],
        kms_key_arn=__ret__['kmsKeyArn'],
        last_modified=__ret__['lastModified'],
        memory_size=__ret__['memorySize'],
        qualified_arn=__ret__['qualifiedArn'],
        reserved_concurrent_executions=__ret__['reservedConcurrentExecutions'],
        role=__ret__['role'],
        runtime=__ret__['runtime'],
        source_code_hash=__ret__['sourceCodeHash'],
        source_code_size=__ret__['sourceCodeSize'],
        timeout=__ret__['timeout'],
        tracing_config=__ret__['tracingConfig'],
        version=__ret__['version'],
        vpc_config=__ret__['vpcConfig'])
