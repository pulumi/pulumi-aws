# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Permission(pulumi.CustomResource):
    """
    Creates a Lambda permission to allow external sources invoking the Lambda function
    (e.g. CloudWatch Event Rule, SNS or S3).
    """
    def __init__(__self__, __name__, __opts__=None, action=None, function=None, principal=None, qualifier=None, source_account=None, source_arn=None, statement_id=None, statement_id_prefix=None):
        """Create a Permission resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not action:
            raise TypeError('Missing required property action')
        elif not isinstance(action, basestring):
            raise TypeError('Expected property action to be a basestring')
        __self__.action = action
        """
        The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
        """
        __props__['action'] = action

        if not function:
            raise TypeError('Missing required property function')
        elif not isinstance(function, basestring):
            raise TypeError('Expected property function to be a basestring')
        __self__.function = function
        """
        Name of the Lambda function whose resource policy you are updating
        """
        __props__['function'] = function

        if not principal:
            raise TypeError('Missing required property principal')
        elif not isinstance(principal, basestring):
            raise TypeError('Expected property principal to be a basestring')
        __self__.principal = principal
        """
        The principal who is getting this permission.
        e.g. `s3.amazonaws.com`, an AWS account ID, or any valid AWS service principal
        such as `events.amazonaws.com` or `sns.amazonaws.com`.
        """
        __props__['principal'] = principal

        if qualifier and not isinstance(qualifier, basestring):
            raise TypeError('Expected property qualifier to be a basestring')
        __self__.qualifier = qualifier
        """
        Query parameter to specify function version or alias name.
        The permission will then apply to the specific qualified ARN.
        e.g. `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
        """
        __props__['qualifier'] = qualifier

        if source_account and not isinstance(source_account, basestring):
            raise TypeError('Expected property source_account to be a basestring')
        __self__.source_account = source_account
        """
        This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
        """
        __props__['sourceAccount'] = source_account

        if source_arn and not isinstance(source_arn, basestring):
            raise TypeError('Expected property source_arn to be a basestring')
        __self__.source_arn = source_arn
        """
        When granting Amazon S3 or CloudWatch Events permission to
        invoke your function, you should specify this field with the Amazon Resource Name (ARN)
        for the S3 Bucket or CloudWatch Events Rule as its value.  This ensures that only events
        generated from the specified bucket or rule can invoke the function.
        API Gateway ARNs have a unique structure described
        [here](http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
        """
        __props__['sourceArn'] = source_arn

        if statement_id and not isinstance(statement_id, basestring):
            raise TypeError('Expected property statement_id to be a basestring')
        __self__.statement_id = statement_id
        """
        A unique statement identifier. By default generated by Terraform.
        """
        __props__['statementId'] = statement_id

        if statement_id_prefix and not isinstance(statement_id_prefix, basestring):
            raise TypeError('Expected property statement_id_prefix to be a basestring')
        __self__.statement_id_prefix = statement_id_prefix
        """
        A statement identifier prefix. Terraform will generate a unique suffix. Conflicts with `statement_id`.
        """
        __props__['statementIdPrefix'] = statement_id_prefix

        super(Permission, __self__).__init__(
            'aws:lambda/permission:Permission',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'action' in outs:
            self.action = outs['action']
        if 'function' in outs:
            self.function = outs['function']
        if 'principal' in outs:
            self.principal = outs['principal']
        if 'qualifier' in outs:
            self.qualifier = outs['qualifier']
        if 'sourceAccount' in outs:
            self.source_account = outs['sourceAccount']
        if 'sourceArn' in outs:
            self.source_arn = outs['sourceArn']
        if 'statementId' in outs:
            self.statement_id = outs['statementId']
        if 'statementIdPrefix' in outs:
            self.statement_id_prefix = outs['statementIdPrefix']
