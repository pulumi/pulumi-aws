# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ServiceQuotaUsageMetricArgs',
    'ServiceQuotaUsageMetricArgsDict',
    'ServiceQuotaUsageMetricMetricDimensionArgs',
    'ServiceQuotaUsageMetricMetricDimensionArgsDict',
    'GetTemplatesTemplateArgs',
    'GetTemplatesTemplateArgsDict',
]

MYPY = False

if not MYPY:
    class ServiceQuotaUsageMetricArgsDict(TypedDict):
        metric_dimensions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceQuotaUsageMetricMetricDimensionArgsDict']]]]
        """
        The metric dimensions.
        """
        metric_name: NotRequired[pulumi.Input[builtins.str]]
        """
        The name of the metric.
        """
        metric_namespace: NotRequired[pulumi.Input[builtins.str]]
        """
        The namespace of the metric.
        """
        metric_statistic_recommendation: NotRequired[pulumi.Input[builtins.str]]
        """
        The metric statistic that AWS recommend you use when determining quota usage.
        """
elif False:
    ServiceQuotaUsageMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceQuotaUsageMetricArgs:
    def __init__(__self__, *,
                 metric_dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceQuotaUsageMetricMetricDimensionArgs']]]] = None,
                 metric_name: Optional[pulumi.Input[builtins.str]] = None,
                 metric_namespace: Optional[pulumi.Input[builtins.str]] = None,
                 metric_statistic_recommendation: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceQuotaUsageMetricMetricDimensionArgs']]] metric_dimensions: The metric dimensions.
        :param pulumi.Input[builtins.str] metric_name: The name of the metric.
        :param pulumi.Input[builtins.str] metric_namespace: The namespace of the metric.
        :param pulumi.Input[builtins.str] metric_statistic_recommendation: The metric statistic that AWS recommend you use when determining quota usage.
        """
        if metric_dimensions is not None:
            pulumi.set(__self__, "metric_dimensions", metric_dimensions)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if metric_namespace is not None:
            pulumi.set(__self__, "metric_namespace", metric_namespace)
        if metric_statistic_recommendation is not None:
            pulumi.set(__self__, "metric_statistic_recommendation", metric_statistic_recommendation)

    @property
    @pulumi.getter(name="metricDimensions")
    def metric_dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceQuotaUsageMetricMetricDimensionArgs']]]]:
        """
        The metric dimensions.
        """
        return pulumi.get(self, "metric_dimensions")

    @metric_dimensions.setter
    def metric_dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceQuotaUsageMetricMetricDimensionArgs']]]]):
        pulumi.set(self, "metric_dimensions", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the metric.
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace of the metric.
        """
        return pulumi.get(self, "metric_namespace")

    @metric_namespace.setter
    def metric_namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric_namespace", value)

    @property
    @pulumi.getter(name="metricStatisticRecommendation")
    def metric_statistic_recommendation(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The metric statistic that AWS recommend you use when determining quota usage.
        """
        return pulumi.get(self, "metric_statistic_recommendation")

    @metric_statistic_recommendation.setter
    def metric_statistic_recommendation(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "metric_statistic_recommendation", value)


if not MYPY:
    class ServiceQuotaUsageMetricMetricDimensionArgsDict(TypedDict):
        class_: NotRequired[pulumi.Input[builtins.str]]
        resource: NotRequired[pulumi.Input[builtins.str]]
        service: NotRequired[pulumi.Input[builtins.str]]
        type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ServiceQuotaUsageMetricMetricDimensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceQuotaUsageMetricMetricDimensionArgs:
    def __init__(__self__, *,
                 class_: Optional[pulumi.Input[builtins.str]] = None,
                 resource: Optional[pulumi.Input[builtins.str]] = None,
                 service: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class GetTemplatesTemplateArgsDict(TypedDict):
        global_quota: builtins.bool
        """
        Indicates whether the quota is global.
        """
        quota_code: builtins.str
        """
        Quota identifier.
        """
        quota_name: builtins.str
        """
        Quota name.
        """
        region: builtins.str
        """
        AWS Region to which the quota increases apply.
        """
        service_code: builtins.str
        """
        (Required) Service identifier.
        """
        service_name: builtins.str
        """
        Service name.
        """
        unit: builtins.str
        """
        Unit of measurement.
        """
        value: builtins.float
        """
        (Required) The new, increased value for the quota.
        """
elif False:
    GetTemplatesTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetTemplatesTemplateArgs:
    def __init__(__self__, *,
                 global_quota: builtins.bool,
                 quota_code: builtins.str,
                 quota_name: builtins.str,
                 region: builtins.str,
                 service_code: builtins.str,
                 service_name: builtins.str,
                 unit: builtins.str,
                 value: builtins.float):
        """
        :param builtins.bool global_quota: Indicates whether the quota is global.
        :param builtins.str quota_code: Quota identifier.
        :param builtins.str quota_name: Quota name.
        :param builtins.str region: AWS Region to which the quota increases apply.
        :param builtins.str service_code: (Required) Service identifier.
        :param builtins.str service_name: Service name.
        :param builtins.str unit: Unit of measurement.
        :param builtins.float value: (Required) The new, increased value for the quota.
        """
        pulumi.set(__self__, "global_quota", global_quota)
        pulumi.set(__self__, "quota_code", quota_code)
        pulumi.set(__self__, "quota_name", quota_name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "service_code", service_code)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="globalQuota")
    def global_quota(self) -> builtins.bool:
        """
        Indicates whether the quota is global.
        """
        return pulumi.get(self, "global_quota")

    @global_quota.setter
    def global_quota(self, value: builtins.bool):
        pulumi.set(self, "global_quota", value)

    @property
    @pulumi.getter(name="quotaCode")
    def quota_code(self) -> builtins.str:
        """
        Quota identifier.
        """
        return pulumi.get(self, "quota_code")

    @quota_code.setter
    def quota_code(self, value: builtins.str):
        pulumi.set(self, "quota_code", value)

    @property
    @pulumi.getter(name="quotaName")
    def quota_name(self) -> builtins.str:
        """
        Quota name.
        """
        return pulumi.get(self, "quota_name")

    @quota_name.setter
    def quota_name(self, value: builtins.str):
        pulumi.set(self, "quota_name", value)

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        AWS Region to which the quota increases apply.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: builtins.str):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceCode")
    def service_code(self) -> builtins.str:
        """
        (Required) Service identifier.
        """
        return pulumi.get(self, "service_code")

    @service_code.setter
    def service_code(self, value: builtins.str):
        pulumi.set(self, "service_code", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        Service name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: builtins.str):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def unit(self) -> builtins.str:
        """
        Unit of measurement.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: builtins.str):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.float:
        """
        (Required) The new, increased value for the quota.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: builtins.float):
        pulumi.set(self, "value", value)


