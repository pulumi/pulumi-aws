# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ServiceQuotaUsageMetricArgs',
    'ServiceQuotaUsageMetricArgsDict',
    'ServiceQuotaUsageMetricMetricDimensionArgs',
    'ServiceQuotaUsageMetricMetricDimensionArgsDict',
]

MYPY = False

if not MYPY:
    class ServiceQuotaUsageMetricArgsDict(TypedDict):
        metric_dimensions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceQuotaUsageMetricMetricDimensionArgsDict']]]]
        """
        The metric dimensions.
        """
        metric_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the metric.
        """
        metric_namespace: NotRequired[pulumi.Input[_builtins.str]]
        """
        The namespace of the metric.
        """
        metric_statistic_recommendation: NotRequired[pulumi.Input[_builtins.str]]
        """
        The metric statistic that AWS recommend you use when determining quota usage.
        """
elif False:
    ServiceQuotaUsageMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceQuotaUsageMetricArgs:
    def __init__(__self__, *,
                 metric_dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceQuotaUsageMetricMetricDimensionArgs']]]] = None,
                 metric_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_statistic_recommendation: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceQuotaUsageMetricMetricDimensionArgs']]] metric_dimensions: The metric dimensions.
        :param pulumi.Input[_builtins.str] metric_name: The name of the metric.
        :param pulumi.Input[_builtins.str] metric_namespace: The namespace of the metric.
        :param pulumi.Input[_builtins.str] metric_statistic_recommendation: The metric statistic that AWS recommend you use when determining quota usage.
        """
        if metric_dimensions is not None:
            pulumi.set(__self__, "metric_dimensions", metric_dimensions)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if metric_namespace is not None:
            pulumi.set(__self__, "metric_namespace", metric_namespace)
        if metric_statistic_recommendation is not None:
            pulumi.set(__self__, "metric_statistic_recommendation", metric_statistic_recommendation)

    @_builtins.property
    @pulumi.getter(name="metricDimensions")
    def metric_dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceQuotaUsageMetricMetricDimensionArgs']]]]:
        """
        The metric dimensions.
        """
        return pulumi.get(self, "metric_dimensions")

    @metric_dimensions.setter
    def metric_dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceQuotaUsageMetricMetricDimensionArgs']]]]):
        pulumi.set(self, "metric_dimensions", value)

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the metric.
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metric_name", value)

    @_builtins.property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The namespace of the metric.
        """
        return pulumi.get(self, "metric_namespace")

    @metric_namespace.setter
    def metric_namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metric_namespace", value)

    @_builtins.property
    @pulumi.getter(name="metricStatisticRecommendation")
    def metric_statistic_recommendation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The metric statistic that AWS recommend you use when determining quota usage.
        """
        return pulumi.get(self, "metric_statistic_recommendation")

    @metric_statistic_recommendation.setter
    def metric_statistic_recommendation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metric_statistic_recommendation", value)


if not MYPY:
    class ServiceQuotaUsageMetricMetricDimensionArgsDict(TypedDict):
        class_: NotRequired[pulumi.Input[_builtins.str]]
        resource: NotRequired[pulumi.Input[_builtins.str]]
        service: NotRequired[pulumi.Input[_builtins.str]]
        type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceQuotaUsageMetricMetricDimensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceQuotaUsageMetricMetricDimensionArgs:
    def __init__(__self__, *,
                 class_: Optional[pulumi.Input[_builtins.str]] = None,
                 resource: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "class_", value)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


