# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ServiceQuotaUsageMetric',
    'ServiceQuotaUsageMetricMetricDimension',
    'GetServiceQuotaUsageMetricResult',
    'GetServiceQuotaUsageMetricMetricDimensionResult',
    'GetTemplatesTemplateResult',
]

@pulumi.output_type
class ServiceQuotaUsageMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricDimensions":
            suggest = "metric_dimensions"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "metricNamespace":
            suggest = "metric_namespace"
        elif key == "metricStatisticRecommendation":
            suggest = "metric_statistic_recommendation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceQuotaUsageMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceQuotaUsageMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceQuotaUsageMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_dimensions: Optional[Sequence['outputs.ServiceQuotaUsageMetricMetricDimension']] = None,
                 metric_name: Optional[str] = None,
                 metric_namespace: Optional[str] = None,
                 metric_statistic_recommendation: Optional[str] = None):
        """
        :param Sequence['ServiceQuotaUsageMetricMetricDimensionArgs'] metric_dimensions: The metric dimensions.
        :param str metric_name: The name of the metric.
        :param str metric_namespace: The namespace of the metric.
        :param str metric_statistic_recommendation: The metric statistic that AWS recommend you use when determining quota usage.
        """
        ServiceQuotaUsageMetric._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric_dimensions=metric_dimensions,
            metric_name=metric_name,
            metric_namespace=metric_namespace,
            metric_statistic_recommendation=metric_statistic_recommendation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric_dimensions: Optional[Sequence['outputs.ServiceQuotaUsageMetricMetricDimension']] = None,
             metric_name: Optional[str] = None,
             metric_namespace: Optional[str] = None,
             metric_statistic_recommendation: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if metric_dimensions is None and 'metricDimensions' in kwargs:
            metric_dimensions = kwargs['metricDimensions']
        if metric_name is None and 'metricName' in kwargs:
            metric_name = kwargs['metricName']
        if metric_namespace is None and 'metricNamespace' in kwargs:
            metric_namespace = kwargs['metricNamespace']
        if metric_statistic_recommendation is None and 'metricStatisticRecommendation' in kwargs:
            metric_statistic_recommendation = kwargs['metricStatisticRecommendation']

        if metric_dimensions is not None:
            _setter("metric_dimensions", metric_dimensions)
        if metric_name is not None:
            _setter("metric_name", metric_name)
        if metric_namespace is not None:
            _setter("metric_namespace", metric_namespace)
        if metric_statistic_recommendation is not None:
            _setter("metric_statistic_recommendation", metric_statistic_recommendation)

    @property
    @pulumi.getter(name="metricDimensions")
    def metric_dimensions(self) -> Optional[Sequence['outputs.ServiceQuotaUsageMetricMetricDimension']]:
        """
        The metric dimensions.
        """
        return pulumi.get(self, "metric_dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        """
        The name of the metric.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> Optional[str]:
        """
        The namespace of the metric.
        """
        return pulumi.get(self, "metric_namespace")

    @property
    @pulumi.getter(name="metricStatisticRecommendation")
    def metric_statistic_recommendation(self) -> Optional[str]:
        """
        The metric statistic that AWS recommend you use when determining quota usage.
        """
        return pulumi.get(self, "metric_statistic_recommendation")


@pulumi.output_type
class ServiceQuotaUsageMetricMetricDimension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "class":
            suggest = "class_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceQuotaUsageMetricMetricDimension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceQuotaUsageMetricMetricDimension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceQuotaUsageMetricMetricDimension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_: Optional[str] = None,
                 resource: Optional[str] = None,
                 service: Optional[str] = None,
                 type: Optional[str] = None):
        ServiceQuotaUsageMetricMetricDimension._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            class_=class_,
            resource=resource,
            service=service,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             class_: Optional[str] = None,
             resource: Optional[str] = None,
             service: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if class_ is None and 'class' in kwargs:
            class_ = kwargs['class']

        if class_ is not None:
            _setter("class_", class_)
        if resource is not None:
            _setter("resource", resource)
        if service is not None:
            _setter("service", service)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[str]:
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceQuotaUsageMetricResult(dict):
    def __init__(__self__, *,
                 metric_dimensions: Sequence['outputs.GetServiceQuotaUsageMetricMetricDimensionResult'],
                 metric_name: str,
                 metric_namespace: str,
                 metric_statistic_recommendation: str):
        """
        :param Sequence['GetServiceQuotaUsageMetricMetricDimensionArgs'] metric_dimensions: The metric dimensions.
        :param str metric_name: The name of the metric.
        :param str metric_namespace: The namespace of the metric.
        :param str metric_statistic_recommendation: The metric statistic that AWS recommend you use when determining quota usage.
        """
        GetServiceQuotaUsageMetricResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric_dimensions=metric_dimensions,
            metric_name=metric_name,
            metric_namespace=metric_namespace,
            metric_statistic_recommendation=metric_statistic_recommendation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric_dimensions: Optional[Sequence['outputs.GetServiceQuotaUsageMetricMetricDimensionResult']] = None,
             metric_name: Optional[str] = None,
             metric_namespace: Optional[str] = None,
             metric_statistic_recommendation: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if metric_dimensions is None and 'metricDimensions' in kwargs:
            metric_dimensions = kwargs['metricDimensions']
        if metric_dimensions is None:
            raise TypeError("Missing 'metric_dimensions' argument")
        if metric_name is None and 'metricName' in kwargs:
            metric_name = kwargs['metricName']
        if metric_name is None:
            raise TypeError("Missing 'metric_name' argument")
        if metric_namespace is None and 'metricNamespace' in kwargs:
            metric_namespace = kwargs['metricNamespace']
        if metric_namespace is None:
            raise TypeError("Missing 'metric_namespace' argument")
        if metric_statistic_recommendation is None and 'metricStatisticRecommendation' in kwargs:
            metric_statistic_recommendation = kwargs['metricStatisticRecommendation']
        if metric_statistic_recommendation is None:
            raise TypeError("Missing 'metric_statistic_recommendation' argument")

        _setter("metric_dimensions", metric_dimensions)
        _setter("metric_name", metric_name)
        _setter("metric_namespace", metric_namespace)
        _setter("metric_statistic_recommendation", metric_statistic_recommendation)

    @property
    @pulumi.getter(name="metricDimensions")
    def metric_dimensions(self) -> Sequence['outputs.GetServiceQuotaUsageMetricMetricDimensionResult']:
        """
        The metric dimensions.
        """
        return pulumi.get(self, "metric_dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        The name of the metric.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricNamespace")
    def metric_namespace(self) -> str:
        """
        The namespace of the metric.
        """
        return pulumi.get(self, "metric_namespace")

    @property
    @pulumi.getter(name="metricStatisticRecommendation")
    def metric_statistic_recommendation(self) -> str:
        """
        The metric statistic that AWS recommend you use when determining quota usage.
        """
        return pulumi.get(self, "metric_statistic_recommendation")


@pulumi.output_type
class GetServiceQuotaUsageMetricMetricDimensionResult(dict):
    def __init__(__self__, *,
                 class_: str,
                 resource: str,
                 service: str,
                 type: str):
        GetServiceQuotaUsageMetricMetricDimensionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            class_=class_,
            resource=resource,
            service=service,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             class_: Optional[str] = None,
             resource: Optional[str] = None,
             service: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if class_ is None and 'class' in kwargs:
            class_ = kwargs['class']
        if class_ is None:
            raise TypeError("Missing 'class_' argument")
        if resource is None:
            raise TypeError("Missing 'resource' argument")
        if service is None:
            raise TypeError("Missing 'service' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("class_", class_)
        _setter("resource", resource)
        _setter("service", service)
        _setter("type", type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> str:
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTemplatesTemplateResult(dict):
    def __init__(__self__, *,
                 global_quota: bool,
                 quota_code: str,
                 quota_name: str,
                 region: str,
                 service_code: str,
                 service_name: str,
                 unit: str,
                 value: float):
        """
        :param bool global_quota: Indicates whether the quota is global.
        :param str quota_code: Quota identifier.
        :param str quota_name: Quota name.
        :param str region: AWS Region to which the quota increases apply.
        :param str service_code: (Required) Service identifier.
        :param str service_name: Service name.
        :param str unit: Unit of measurement.
        :param float value: (Required) The new, increased value for the quota.
        """
        GetTemplatesTemplateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            global_quota=global_quota,
            quota_code=quota_code,
            quota_name=quota_name,
            region=region,
            service_code=service_code,
            service_name=service_name,
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             global_quota: Optional[bool] = None,
             quota_code: Optional[str] = None,
             quota_name: Optional[str] = None,
             region: Optional[str] = None,
             service_code: Optional[str] = None,
             service_name: Optional[str] = None,
             unit: Optional[str] = None,
             value: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if global_quota is None and 'globalQuota' in kwargs:
            global_quota = kwargs['globalQuota']
        if global_quota is None:
            raise TypeError("Missing 'global_quota' argument")
        if quota_code is None and 'quotaCode' in kwargs:
            quota_code = kwargs['quotaCode']
        if quota_code is None:
            raise TypeError("Missing 'quota_code' argument")
        if quota_name is None and 'quotaName' in kwargs:
            quota_name = kwargs['quotaName']
        if quota_name is None:
            raise TypeError("Missing 'quota_name' argument")
        if region is None:
            raise TypeError("Missing 'region' argument")
        if service_code is None and 'serviceCode' in kwargs:
            service_code = kwargs['serviceCode']
        if service_code is None:
            raise TypeError("Missing 'service_code' argument")
        if service_name is None and 'serviceName' in kwargs:
            service_name = kwargs['serviceName']
        if service_name is None:
            raise TypeError("Missing 'service_name' argument")
        if unit is None:
            raise TypeError("Missing 'unit' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("global_quota", global_quota)
        _setter("quota_code", quota_code)
        _setter("quota_name", quota_name)
        _setter("region", region)
        _setter("service_code", service_code)
        _setter("service_name", service_name)
        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter(name="globalQuota")
    def global_quota(self) -> bool:
        """
        Indicates whether the quota is global.
        """
        return pulumi.get(self, "global_quota")

    @property
    @pulumi.getter(name="quotaCode")
    def quota_code(self) -> str:
        """
        Quota identifier.
        """
        return pulumi.get(self, "quota_code")

    @property
    @pulumi.getter(name="quotaName")
    def quota_name(self) -> str:
        """
        Quota name.
        """
        return pulumi.get(self, "quota_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        AWS Region to which the quota increases apply.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceCode")
    def service_code(self) -> str:
        """
        (Required) Service identifier.
        """
        return pulumi.get(self, "service_code")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit of measurement.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        (Required) The new, increased value for the quota.
        """
        return pulumi.get(self, "value")


