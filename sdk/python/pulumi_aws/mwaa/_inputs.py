# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'EnvironmentLastUpdatedArgs',
    'EnvironmentLastUpdatedErrorArgs',
    'EnvironmentLoggingConfigurationArgs',
    'EnvironmentLoggingConfigurationDagProcessingLogsArgs',
    'EnvironmentLoggingConfigurationSchedulerLogsArgs',
    'EnvironmentLoggingConfigurationTaskLogsArgs',
    'EnvironmentLoggingConfigurationWebserverLogsArgs',
    'EnvironmentLoggingConfigurationWorkerLogsArgs',
    'EnvironmentNetworkConfigurationArgs',
]

@pulumi.input_type
class EnvironmentLastUpdatedArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentLastUpdatedErrorArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] created_at: The Created At date of the MWAA Environment
               * `logging_configuration[0].<LOG_CONFIGURATION_TYPE>[0].cloud_watch_log_group_arn` - Provides the ARN for the CloudWatch group where the logs will be published
        :param pulumi.Input[str] status: The status of the Amazon MWAA Environment
        """
        EnvironmentLastUpdatedArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_at=created_at,
            errors=errors,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_at: Optional[pulumi.Input[str]] = None,
             errors: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentLastUpdatedErrorArgs']]]] = None,
             status: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if created_at is None and 'createdAt' in kwargs:
            created_at = kwargs['createdAt']

        if created_at is not None:
            _setter("created_at", created_at)
        if errors is not None:
            _setter("errors", errors)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The Created At date of the MWAA Environment
        * `logging_configuration[0].<LOG_CONFIGURATION_TYPE>[0].cloud_watch_log_group_arn` - Provides the ARN for the CloudWatch group where the logs will be published
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentLastUpdatedErrorArgs']]]]:
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentLastUpdatedErrorArgs']]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the Amazon MWAA Environment
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EnvironmentLastUpdatedErrorArgs:
    def __init__(__self__, *,
                 error_code: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None):
        EnvironmentLastUpdatedErrorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_code=error_code,
            error_message=error_message,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_code: Optional[pulumi.Input[str]] = None,
             error_message: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if error_code is None and 'errorCode' in kwargs:
            error_code = kwargs['errorCode']
        if error_message is None and 'errorMessage' in kwargs:
            error_message = kwargs['errorMessage']

        if error_code is not None:
            _setter("error_code", error_code)
        if error_message is not None:
            _setter("error_message", error_message)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_code")

    @error_code.setter
    def error_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_code", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)


@pulumi.input_type
class EnvironmentLoggingConfigurationArgs:
    def __init__(__self__, *,
                 dag_processing_logs: Optional[pulumi.Input['EnvironmentLoggingConfigurationDagProcessingLogsArgs']] = None,
                 scheduler_logs: Optional[pulumi.Input['EnvironmentLoggingConfigurationSchedulerLogsArgs']] = None,
                 task_logs: Optional[pulumi.Input['EnvironmentLoggingConfigurationTaskLogsArgs']] = None,
                 webserver_logs: Optional[pulumi.Input['EnvironmentLoggingConfigurationWebserverLogsArgs']] = None,
                 worker_logs: Optional[pulumi.Input['EnvironmentLoggingConfigurationWorkerLogsArgs']] = None):
        """
        :param pulumi.Input['EnvironmentLoggingConfigurationDagProcessingLogsArgs'] dag_processing_logs: (Optional) Log configuration options for processing DAGs. See Module logging configuration for more information. Disabled by default.
        :param pulumi.Input['EnvironmentLoggingConfigurationSchedulerLogsArgs'] scheduler_logs: Log configuration options for the schedulers. See Module logging configuration for more information. Disabled by default.
        :param pulumi.Input['EnvironmentLoggingConfigurationTaskLogsArgs'] task_logs: Log configuration options for DAG tasks. See Module logging configuration for more information. Enabled by default with `INFO` log level.
        :param pulumi.Input['EnvironmentLoggingConfigurationWebserverLogsArgs'] webserver_logs: Log configuration options for the webservers. See Module logging configuration for more information. Disabled by default.
        :param pulumi.Input['EnvironmentLoggingConfigurationWorkerLogsArgs'] worker_logs: Log configuration options for the workers. See Module logging configuration for more information. Disabled by default.
        """
        EnvironmentLoggingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dag_processing_logs=dag_processing_logs,
            scheduler_logs=scheduler_logs,
            task_logs=task_logs,
            webserver_logs=webserver_logs,
            worker_logs=worker_logs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dag_processing_logs: Optional[pulumi.Input['EnvironmentLoggingConfigurationDagProcessingLogsArgs']] = None,
             scheduler_logs: Optional[pulumi.Input['EnvironmentLoggingConfigurationSchedulerLogsArgs']] = None,
             task_logs: Optional[pulumi.Input['EnvironmentLoggingConfigurationTaskLogsArgs']] = None,
             webserver_logs: Optional[pulumi.Input['EnvironmentLoggingConfigurationWebserverLogsArgs']] = None,
             worker_logs: Optional[pulumi.Input['EnvironmentLoggingConfigurationWorkerLogsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dag_processing_logs is None and 'dagProcessingLogs' in kwargs:
            dag_processing_logs = kwargs['dagProcessingLogs']
        if scheduler_logs is None and 'schedulerLogs' in kwargs:
            scheduler_logs = kwargs['schedulerLogs']
        if task_logs is None and 'taskLogs' in kwargs:
            task_logs = kwargs['taskLogs']
        if webserver_logs is None and 'webserverLogs' in kwargs:
            webserver_logs = kwargs['webserverLogs']
        if worker_logs is None and 'workerLogs' in kwargs:
            worker_logs = kwargs['workerLogs']

        if dag_processing_logs is not None:
            _setter("dag_processing_logs", dag_processing_logs)
        if scheduler_logs is not None:
            _setter("scheduler_logs", scheduler_logs)
        if task_logs is not None:
            _setter("task_logs", task_logs)
        if webserver_logs is not None:
            _setter("webserver_logs", webserver_logs)
        if worker_logs is not None:
            _setter("worker_logs", worker_logs)

    @property
    @pulumi.getter(name="dagProcessingLogs")
    def dag_processing_logs(self) -> Optional[pulumi.Input['EnvironmentLoggingConfigurationDagProcessingLogsArgs']]:
        """
        (Optional) Log configuration options for processing DAGs. See Module logging configuration for more information. Disabled by default.
        """
        return pulumi.get(self, "dag_processing_logs")

    @dag_processing_logs.setter
    def dag_processing_logs(self, value: Optional[pulumi.Input['EnvironmentLoggingConfigurationDagProcessingLogsArgs']]):
        pulumi.set(self, "dag_processing_logs", value)

    @property
    @pulumi.getter(name="schedulerLogs")
    def scheduler_logs(self) -> Optional[pulumi.Input['EnvironmentLoggingConfigurationSchedulerLogsArgs']]:
        """
        Log configuration options for the schedulers. See Module logging configuration for more information. Disabled by default.
        """
        return pulumi.get(self, "scheduler_logs")

    @scheduler_logs.setter
    def scheduler_logs(self, value: Optional[pulumi.Input['EnvironmentLoggingConfigurationSchedulerLogsArgs']]):
        pulumi.set(self, "scheduler_logs", value)

    @property
    @pulumi.getter(name="taskLogs")
    def task_logs(self) -> Optional[pulumi.Input['EnvironmentLoggingConfigurationTaskLogsArgs']]:
        """
        Log configuration options for DAG tasks. See Module logging configuration for more information. Enabled by default with `INFO` log level.
        """
        return pulumi.get(self, "task_logs")

    @task_logs.setter
    def task_logs(self, value: Optional[pulumi.Input['EnvironmentLoggingConfigurationTaskLogsArgs']]):
        pulumi.set(self, "task_logs", value)

    @property
    @pulumi.getter(name="webserverLogs")
    def webserver_logs(self) -> Optional[pulumi.Input['EnvironmentLoggingConfigurationWebserverLogsArgs']]:
        """
        Log configuration options for the webservers. See Module logging configuration for more information. Disabled by default.
        """
        return pulumi.get(self, "webserver_logs")

    @webserver_logs.setter
    def webserver_logs(self, value: Optional[pulumi.Input['EnvironmentLoggingConfigurationWebserverLogsArgs']]):
        pulumi.set(self, "webserver_logs", value)

    @property
    @pulumi.getter(name="workerLogs")
    def worker_logs(self) -> Optional[pulumi.Input['EnvironmentLoggingConfigurationWorkerLogsArgs']]:
        """
        Log configuration options for the workers. See Module logging configuration for more information. Disabled by default.
        """
        return pulumi.get(self, "worker_logs")

    @worker_logs.setter
    def worker_logs(self, value: Optional[pulumi.Input['EnvironmentLoggingConfigurationWorkerLogsArgs']]):
        pulumi.set(self, "worker_logs", value)


@pulumi.input_type
class EnvironmentLoggingConfigurationDagProcessingLogsArgs:
    def __init__(__self__, *,
                 cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Enabling or disabling the collection of logs
        :param pulumi.Input[str] log_level: Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        """
        EnvironmentLoggingConfigurationDagProcessingLogsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_log_group_arn=cloud_watch_log_group_arn,
            enabled=enabled,
            log_level=log_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             log_level: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cloud_watch_log_group_arn is None and 'cloudWatchLogGroupArn' in kwargs:
            cloud_watch_log_group_arn = kwargs['cloudWatchLogGroupArn']
        if log_level is None and 'logLevel' in kwargs:
            log_level = kwargs['logLevel']

        if cloud_watch_log_group_arn is not None:
            _setter("cloud_watch_log_group_arn", cloud_watch_log_group_arn)
        if enabled is not None:
            _setter("enabled", enabled)
        if log_level is not None:
            _setter("log_level", log_level)

    @property
    @pulumi.getter(name="cloudWatchLogGroupArn")
    def cloud_watch_log_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_watch_log_group_arn")

    @cloud_watch_log_group_arn.setter
    def cloud_watch_log_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_watch_log_group_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling or disabling the collection of logs
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


@pulumi.input_type
class EnvironmentLoggingConfigurationSchedulerLogsArgs:
    def __init__(__self__, *,
                 cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Enabling or disabling the collection of logs
        :param pulumi.Input[str] log_level: Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        """
        EnvironmentLoggingConfigurationSchedulerLogsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_log_group_arn=cloud_watch_log_group_arn,
            enabled=enabled,
            log_level=log_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             log_level: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cloud_watch_log_group_arn is None and 'cloudWatchLogGroupArn' in kwargs:
            cloud_watch_log_group_arn = kwargs['cloudWatchLogGroupArn']
        if log_level is None and 'logLevel' in kwargs:
            log_level = kwargs['logLevel']

        if cloud_watch_log_group_arn is not None:
            _setter("cloud_watch_log_group_arn", cloud_watch_log_group_arn)
        if enabled is not None:
            _setter("enabled", enabled)
        if log_level is not None:
            _setter("log_level", log_level)

    @property
    @pulumi.getter(name="cloudWatchLogGroupArn")
    def cloud_watch_log_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_watch_log_group_arn")

    @cloud_watch_log_group_arn.setter
    def cloud_watch_log_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_watch_log_group_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling or disabling the collection of logs
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


@pulumi.input_type
class EnvironmentLoggingConfigurationTaskLogsArgs:
    def __init__(__self__, *,
                 cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Enabling or disabling the collection of logs
        :param pulumi.Input[str] log_level: Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        """
        EnvironmentLoggingConfigurationTaskLogsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_log_group_arn=cloud_watch_log_group_arn,
            enabled=enabled,
            log_level=log_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             log_level: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cloud_watch_log_group_arn is None and 'cloudWatchLogGroupArn' in kwargs:
            cloud_watch_log_group_arn = kwargs['cloudWatchLogGroupArn']
        if log_level is None and 'logLevel' in kwargs:
            log_level = kwargs['logLevel']

        if cloud_watch_log_group_arn is not None:
            _setter("cloud_watch_log_group_arn", cloud_watch_log_group_arn)
        if enabled is not None:
            _setter("enabled", enabled)
        if log_level is not None:
            _setter("log_level", log_level)

    @property
    @pulumi.getter(name="cloudWatchLogGroupArn")
    def cloud_watch_log_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_watch_log_group_arn")

    @cloud_watch_log_group_arn.setter
    def cloud_watch_log_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_watch_log_group_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling or disabling the collection of logs
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


@pulumi.input_type
class EnvironmentLoggingConfigurationWebserverLogsArgs:
    def __init__(__self__, *,
                 cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Enabling or disabling the collection of logs
        :param pulumi.Input[str] log_level: Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        """
        EnvironmentLoggingConfigurationWebserverLogsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_log_group_arn=cloud_watch_log_group_arn,
            enabled=enabled,
            log_level=log_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             log_level: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cloud_watch_log_group_arn is None and 'cloudWatchLogGroupArn' in kwargs:
            cloud_watch_log_group_arn = kwargs['cloudWatchLogGroupArn']
        if log_level is None and 'logLevel' in kwargs:
            log_level = kwargs['logLevel']

        if cloud_watch_log_group_arn is not None:
            _setter("cloud_watch_log_group_arn", cloud_watch_log_group_arn)
        if enabled is not None:
            _setter("enabled", enabled)
        if log_level is not None:
            _setter("log_level", log_level)

    @property
    @pulumi.getter(name="cloudWatchLogGroupArn")
    def cloud_watch_log_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_watch_log_group_arn")

    @cloud_watch_log_group_arn.setter
    def cloud_watch_log_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_watch_log_group_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling or disabling the collection of logs
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


@pulumi.input_type
class EnvironmentLoggingConfigurationWorkerLogsArgs:
    def __init__(__self__, *,
                 cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Enabling or disabling the collection of logs
        :param pulumi.Input[str] log_level: Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        """
        EnvironmentLoggingConfigurationWorkerLogsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_log_group_arn=cloud_watch_log_group_arn,
            enabled=enabled,
            log_level=log_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             log_level: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cloud_watch_log_group_arn is None and 'cloudWatchLogGroupArn' in kwargs:
            cloud_watch_log_group_arn = kwargs['cloudWatchLogGroupArn']
        if log_level is None and 'logLevel' in kwargs:
            log_level = kwargs['logLevel']

        if cloud_watch_log_group_arn is not None:
            _setter("cloud_watch_log_group_arn", cloud_watch_log_group_arn)
        if enabled is not None:
            _setter("enabled", enabled)
        if log_level is not None:
            _setter("log_level", log_level)

    @property
    @pulumi.getter(name="cloudWatchLogGroupArn")
    def cloud_watch_log_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_watch_log_group_arn")

    @cloud_watch_log_group_arn.setter
    def cloud_watch_log_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_watch_log_group_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enabling or disabling the collection of logs
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Logging level. Valid values: `CRITICAL`, `ERROR`, `WARNING`, `INFO`, `DEBUG`. Will be `INFO` by default.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


@pulumi.input_type
class EnvironmentNetworkConfigurationArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups IDs for the environment. At least one of the security group needs to allow MWAA resources to talk to each other, otherwise MWAA cannot be provisioned.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The private subnet IDs in which the environment should be created. MWAA requires two subnets.
        """
        EnvironmentNetworkConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            security_group_ids=security_group_ids,
            subnet_ids=subnet_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if security_group_ids is None and 'securityGroupIds' in kwargs:
            security_group_ids = kwargs['securityGroupIds']
        if security_group_ids is None:
            raise TypeError("Missing 'security_group_ids' argument")
        if subnet_ids is None and 'subnetIds' in kwargs:
            subnet_ids = kwargs['subnetIds']
        if subnet_ids is None:
            raise TypeError("Missing 'subnet_ids' argument")

        _setter("security_group_ids", security_group_ids)
        _setter("subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Security groups IDs for the environment. At least one of the security group needs to allow MWAA resources to talk to each other, otherwise MWAA cannot be provisioned.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The private subnet IDs in which the environment should be created. MWAA requires two subnets.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)


