# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AggregationFunctionArgs',
    'AggregationFunctionArgsDict',
    'AnalysisDefinitionArgs',
    'AnalysisDefinitionArgsDict',
    'AnalysisDefinitionAnalysisDefaultsArgs',
    'AnalysisDefinitionAnalysisDefaultsArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict',
    'AnalysisDefinitionCalculatedFieldArgs',
    'AnalysisDefinitionCalculatedFieldArgsDict',
    'AnalysisDefinitionColumnConfigurationArgs',
    'AnalysisDefinitionColumnConfigurationArgsDict',
    'AnalysisDefinitionColumnConfigurationFormatConfigurationArgs',
    'AnalysisDefinitionColumnConfigurationFormatConfigurationArgsDict',
    'AnalysisDefinitionDataSetIdentifiersDeclarationArgs',
    'AnalysisDefinitionDataSetIdentifiersDeclarationArgsDict',
    'AnalysisDefinitionFilterGroupArgs',
    'AnalysisDefinitionFilterGroupArgsDict',
    'AnalysisDefinitionFilterGroupScopeConfigurationArgs',
    'AnalysisDefinitionFilterGroupScopeConfigurationArgsDict',
    'AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs',
    'AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict',
    'AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs',
    'AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict',
    'AnalysisDefinitionParameterDeclarationArgs',
    'AnalysisDefinitionParameterDeclarationArgsDict',
    'AnalysisDefinitionSheetArgs',
    'AnalysisDefinitionSheetArgsDict',
    'AnalysisDefinitionSheetParameterControlArgs',
    'AnalysisDefinitionSheetParameterControlArgsDict',
    'AnalysisDefinitionSheetParameterControlDateTimePickerArgs',
    'AnalysisDefinitionSheetParameterControlDateTimePickerArgsDict',
    'AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs',
    'AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict',
    'AnalysisDefinitionSheetParameterControlDropdownArgs',
    'AnalysisDefinitionSheetParameterControlDropdownArgsDict',
    'AnalysisDefinitionSheetParameterControlDropdownDisplayOptionsArgs',
    'AnalysisDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict',
    'AnalysisDefinitionSheetParameterControlDropdownSelectableValuesArgs',
    'AnalysisDefinitionSheetParameterControlDropdownSelectableValuesArgsDict',
    'AnalysisDefinitionSheetParameterControlListArgs',
    'AnalysisDefinitionSheetParameterControlListArgsDict',
    'AnalysisDefinitionSheetParameterControlListDisplayOptionsArgs',
    'AnalysisDefinitionSheetParameterControlListDisplayOptionsArgsDict',
    'AnalysisDefinitionSheetParameterControlListSelectableValuesArgs',
    'AnalysisDefinitionSheetParameterControlListSelectableValuesArgsDict',
    'AnalysisDefinitionSheetParameterControlSliderArgs',
    'AnalysisDefinitionSheetParameterControlSliderArgsDict',
    'AnalysisDefinitionSheetParameterControlSliderDisplayOptionsArgs',
    'AnalysisDefinitionSheetParameterControlSliderDisplayOptionsArgsDict',
    'AnalysisDefinitionSheetParameterControlTextAreaArgs',
    'AnalysisDefinitionSheetParameterControlTextAreaArgsDict',
    'AnalysisDefinitionSheetParameterControlTextFieldArgs',
    'AnalysisDefinitionSheetParameterControlTextFieldArgsDict',
    'AnalysisDefinitionSheetSheetControlLayoutsArgs',
    'AnalysisDefinitionSheetSheetControlLayoutsArgsDict',
    'AnalysisDefinitionSheetSheetControlLayoutsConfigurationArgs',
    'AnalysisDefinitionSheetSheetControlLayoutsConfigurationArgsDict',
    'AnalysisDefinitionSheetTextBoxArgs',
    'AnalysisDefinitionSheetTextBoxArgsDict',
    'AnalysisParametersArgs',
    'AnalysisParametersArgsDict',
    'AnalysisParametersDateTimeParameterArgs',
    'AnalysisParametersDateTimeParameterArgsDict',
    'AnalysisParametersDecimalParameterArgs',
    'AnalysisParametersDecimalParameterArgsDict',
    'AnalysisParametersIntegerParameterArgs',
    'AnalysisParametersIntegerParameterArgsDict',
    'AnalysisParametersStringParameterArgs',
    'AnalysisParametersStringParameterArgsDict',
    'AnalysisPermissionArgs',
    'AnalysisPermissionArgsDict',
    'AnalysisSourceEntityArgs',
    'AnalysisSourceEntityArgsDict',
    'AnalysisSourceEntitySourceTemplateArgs',
    'AnalysisSourceEntitySourceTemplateArgsDict',
    'AnalysisSourceEntitySourceTemplateDataSetReferenceArgs',
    'AnalysisSourceEntitySourceTemplateDataSetReferenceArgsDict',
    'AxisDisplayOptionsArgs',
    'AxisDisplayOptionsArgsDict',
    'AxisDisplayOptionsDataOptionsArgs',
    'AxisDisplayOptionsDataOptionsArgsDict',
    'AxisDisplayOptionsDataOptionsDateAxisOptionsArgs',
    'AxisDisplayOptionsDataOptionsDateAxisOptionsArgsDict',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsArgs',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsArgsDict',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeArgs',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeArgsDict',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDrivenArgs',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDrivenArgsDict',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMaxArgs',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMaxArgsDict',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleArgs',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleArgsDict',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinearArgs',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinearArgsDict',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmicArgs',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmicArgsDict',
    'AxisDisplayOptionsScrollbarOptionsArgs',
    'AxisDisplayOptionsScrollbarOptionsArgsDict',
    'AxisDisplayOptionsScrollbarOptionsVisibleRangeArgs',
    'AxisDisplayOptionsScrollbarOptionsVisibleRangeArgsDict',
    'AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRangeArgs',
    'AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRangeArgsDict',
    'AxisDisplayOptionsTickLabelOptionsArgs',
    'AxisDisplayOptionsTickLabelOptionsArgsDict',
    'CascadingControlConfigurationArgs',
    'CascadingControlConfigurationArgsDict',
    'CascadingControlConfigurationSourceControlArgs',
    'CascadingControlConfigurationSourceControlArgsDict',
    'CategoryFilterArgs',
    'CategoryFilterArgsDict',
    'CellStyleArgs',
    'CellStyleArgsDict',
    'CellStyleBorderArgs',
    'CellStyleBorderArgsDict',
    'CellStyleBorderSideSpecificBorderArgs',
    'CellStyleBorderSideSpecificBorderArgsDict',
    'ChartAxisLabelOptionsArgs',
    'ChartAxisLabelOptionsArgsDict',
    'ChartAxisLabelOptionsAxisLabelOptionsArgs',
    'ChartAxisLabelOptionsAxisLabelOptionsArgsDict',
    'ChartAxisLabelOptionsAxisLabelOptionsApplyToArgs',
    'ChartAxisLabelOptionsAxisLabelOptionsApplyToArgsDict',
    'ColorScaleArgs',
    'ColorScaleArgsDict',
    'ColorScaleColorArgs',
    'ColorScaleColorArgsDict',
    'ColorScaleNullValueColorArgs',
    'ColorScaleNullValueColorArgsDict',
    'ColumnArgs',
    'ColumnArgsDict',
    'ColumnHierarchiesArgs',
    'ColumnHierarchiesArgsDict',
    'ColumnHierarchiesDateTimeHierarchyArgs',
    'ColumnHierarchiesDateTimeHierarchyArgsDict',
    'ColumnHierarchiesExplicitHierarchyArgs',
    'ColumnHierarchiesExplicitHierarchyArgsDict',
    'ColumnHierarchiesExplicitHierarchyColumnArgs',
    'ColumnHierarchiesExplicitHierarchyColumnArgsDict',
    'ColumnHierarchiesPredefinedHierarchyArgs',
    'ColumnHierarchiesPredefinedHierarchyArgsDict',
    'ColumnSortArgs',
    'ColumnSortArgsDict',
    'ConditionalFormattingColorArgs',
    'ConditionalFormattingColorArgsDict',
    'ConditionalFormattingColorGradientArgs',
    'ConditionalFormattingColorGradientArgsDict',
    'ConditionalFormattingColorGradientColorArgs',
    'ConditionalFormattingColorGradientColorArgsDict',
    'ConditionalFormattingColorGradientColorStopArgs',
    'ConditionalFormattingColorGradientColorStopArgsDict',
    'ConditionalFormattingColorSolidArgs',
    'ConditionalFormattingColorSolidArgsDict',
    'ConditionalFormattingIconArgs',
    'ConditionalFormattingIconArgsDict',
    'ConditionalFormattingIconCustomConditionArgs',
    'ConditionalFormattingIconCustomConditionArgsDict',
    'ConditionalFormattingIconCustomConditionDisplayConfigurationArgs',
    'ConditionalFormattingIconCustomConditionDisplayConfigurationArgsDict',
    'ConditionalFormattingIconCustomConditionIconOptionsArgs',
    'ConditionalFormattingIconCustomConditionIconOptionsArgsDict',
    'ConditionalFormattingIconIconSetArgs',
    'ConditionalFormattingIconIconSetArgsDict',
    'ContributionAnalysisDefaultsArgs',
    'ContributionAnalysisDefaultsArgsDict',
    'ContributionAnalysisDefaultsContributorDimensionArgs',
    'ContributionAnalysisDefaultsContributorDimensionArgsDict',
    'DashboardDashboardPublishOptionsArgs',
    'DashboardDashboardPublishOptionsArgsDict',
    'DashboardDashboardPublishOptionsAdHocFilteringOptionArgs',
    'DashboardDashboardPublishOptionsAdHocFilteringOptionArgsDict',
    'DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs',
    'DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgsDict',
    'DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs',
    'DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgsDict',
    'DashboardDashboardPublishOptionsDataPointTooltipOptionArgs',
    'DashboardDashboardPublishOptionsDataPointTooltipOptionArgsDict',
    'DashboardDashboardPublishOptionsExportToCsvOptionArgs',
    'DashboardDashboardPublishOptionsExportToCsvOptionArgsDict',
    'DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs',
    'DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgsDict',
    'DashboardDashboardPublishOptionsSheetControlsOptionArgs',
    'DashboardDashboardPublishOptionsSheetControlsOptionArgsDict',
    'DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs',
    'DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgsDict',
    'DashboardDashboardPublishOptionsVisualAxisSortOptionArgs',
    'DashboardDashboardPublishOptionsVisualAxisSortOptionArgsDict',
    'DashboardDashboardPublishOptionsVisualMenuOptionArgs',
    'DashboardDashboardPublishOptionsVisualMenuOptionArgsDict',
    'DashboardDefinitionArgs',
    'DashboardDefinitionArgsDict',
    'DashboardDefinitionAnalysisDefaultsArgs',
    'DashboardDefinitionAnalysisDefaultsArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict',
    'DashboardDefinitionCalculatedFieldArgs',
    'DashboardDefinitionCalculatedFieldArgsDict',
    'DashboardDefinitionColumnConfigurationArgs',
    'DashboardDefinitionColumnConfigurationArgsDict',
    'DashboardDefinitionColumnConfigurationFormatConfigurationArgs',
    'DashboardDefinitionColumnConfigurationFormatConfigurationArgsDict',
    'DashboardDefinitionDataSetIdentifiersDeclarationArgs',
    'DashboardDefinitionDataSetIdentifiersDeclarationArgsDict',
    'DashboardDefinitionFilterGroupArgs',
    'DashboardDefinitionFilterGroupArgsDict',
    'DashboardDefinitionFilterGroupScopeConfigurationArgs',
    'DashboardDefinitionFilterGroupScopeConfigurationArgsDict',
    'DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs',
    'DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict',
    'DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs',
    'DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict',
    'DashboardDefinitionParameterDeclarationArgs',
    'DashboardDefinitionParameterDeclarationArgsDict',
    'DashboardDefinitionSheetArgs',
    'DashboardDefinitionSheetArgsDict',
    'DashboardDefinitionSheetParameterControlArgs',
    'DashboardDefinitionSheetParameterControlArgsDict',
    'DashboardDefinitionSheetParameterControlDateTimePickerArgs',
    'DashboardDefinitionSheetParameterControlDateTimePickerArgsDict',
    'DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs',
    'DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict',
    'DashboardDefinitionSheetParameterControlDropdownArgs',
    'DashboardDefinitionSheetParameterControlDropdownArgsDict',
    'DashboardDefinitionSheetParameterControlDropdownDisplayOptionsArgs',
    'DashboardDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict',
    'DashboardDefinitionSheetParameterControlDropdownSelectableValuesArgs',
    'DashboardDefinitionSheetParameterControlDropdownSelectableValuesArgsDict',
    'DashboardDefinitionSheetParameterControlListArgs',
    'DashboardDefinitionSheetParameterControlListArgsDict',
    'DashboardDefinitionSheetParameterControlListDisplayOptionsArgs',
    'DashboardDefinitionSheetParameterControlListDisplayOptionsArgsDict',
    'DashboardDefinitionSheetParameterControlListSelectableValuesArgs',
    'DashboardDefinitionSheetParameterControlListSelectableValuesArgsDict',
    'DashboardDefinitionSheetParameterControlSliderArgs',
    'DashboardDefinitionSheetParameterControlSliderArgsDict',
    'DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgs',
    'DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgsDict',
    'DashboardDefinitionSheetParameterControlTextAreaArgs',
    'DashboardDefinitionSheetParameterControlTextAreaArgsDict',
    'DashboardDefinitionSheetParameterControlTextFieldArgs',
    'DashboardDefinitionSheetParameterControlTextFieldArgsDict',
    'DashboardDefinitionSheetSheetControlLayoutsArgs',
    'DashboardDefinitionSheetSheetControlLayoutsArgsDict',
    'DashboardDefinitionSheetSheetControlLayoutsConfigurationArgs',
    'DashboardDefinitionSheetSheetControlLayoutsConfigurationArgsDict',
    'DashboardDefinitionSheetTextBoxArgs',
    'DashboardDefinitionSheetTextBoxArgsDict',
    'DashboardParametersArgs',
    'DashboardParametersArgsDict',
    'DashboardParametersDateTimeParameterArgs',
    'DashboardParametersDateTimeParameterArgsDict',
    'DashboardParametersDecimalParameterArgs',
    'DashboardParametersDecimalParameterArgsDict',
    'DashboardParametersIntegerParameterArgs',
    'DashboardParametersIntegerParameterArgsDict',
    'DashboardParametersStringParameterArgs',
    'DashboardParametersStringParameterArgsDict',
    'DashboardPermissionArgs',
    'DashboardPermissionArgsDict',
    'DashboardSourceEntityArgs',
    'DashboardSourceEntityArgsDict',
    'DashboardSourceEntitySourceTemplateArgs',
    'DashboardSourceEntitySourceTemplateArgsDict',
    'DashboardSourceEntitySourceTemplateDataSetReferenceArgs',
    'DashboardSourceEntitySourceTemplateDataSetReferenceArgsDict',
    'DataLabelsOptionsArgs',
    'DataLabelsOptionsArgsDict',
    'DataLabelsOptionsDataLabelTypeArgs',
    'DataLabelsOptionsDataLabelTypeArgsDict',
    'DataLabelsOptionsDataLabelTypeDataPathLabelTypeArgs',
    'DataLabelsOptionsDataLabelTypeDataPathLabelTypeArgsDict',
    'DataLabelsOptionsDataLabelTypeFieldLabelTypeArgs',
    'DataLabelsOptionsDataLabelTypeFieldLabelTypeArgsDict',
    'DataPathValueArgs',
    'DataPathValueArgsDict',
    'DataSetColumnGroupArgs',
    'DataSetColumnGroupArgsDict',
    'DataSetColumnGroupGeoSpatialColumnGroupArgs',
    'DataSetColumnGroupGeoSpatialColumnGroupArgsDict',
    'DataSetColumnLevelPermissionRuleArgs',
    'DataSetColumnLevelPermissionRuleArgsDict',
    'DataSetDataSetUsageConfigurationArgs',
    'DataSetDataSetUsageConfigurationArgsDict',
    'DataSetFieldFolderArgs',
    'DataSetFieldFolderArgsDict',
    'DataSetLogicalTableMapArgs',
    'DataSetLogicalTableMapArgsDict',
    'DataSetLogicalTableMapDataTransformArgs',
    'DataSetLogicalTableMapDataTransformArgsDict',
    'DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs',
    'DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgsDict',
    'DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs',
    'DataSetLogicalTableMapDataTransformCreateColumnsOperationArgsDict',
    'DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs',
    'DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgsDict',
    'DataSetLogicalTableMapDataTransformFilterOperationArgs',
    'DataSetLogicalTableMapDataTransformFilterOperationArgsDict',
    'DataSetLogicalTableMapDataTransformProjectOperationArgs',
    'DataSetLogicalTableMapDataTransformProjectOperationArgsDict',
    'DataSetLogicalTableMapDataTransformRenameColumnOperationArgs',
    'DataSetLogicalTableMapDataTransformRenameColumnOperationArgsDict',
    'DataSetLogicalTableMapDataTransformTagColumnOperationArgs',
    'DataSetLogicalTableMapDataTransformTagColumnOperationArgsDict',
    'DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs',
    'DataSetLogicalTableMapDataTransformTagColumnOperationTagArgsDict',
    'DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs',
    'DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgsDict',
    'DataSetLogicalTableMapDataTransformUntagColumnOperationArgs',
    'DataSetLogicalTableMapDataTransformUntagColumnOperationArgsDict',
    'DataSetLogicalTableMapSourceArgs',
    'DataSetLogicalTableMapSourceArgsDict',
    'DataSetLogicalTableMapSourceJoinInstructionArgs',
    'DataSetLogicalTableMapSourceJoinInstructionArgsDict',
    'DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs',
    'DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgsDict',
    'DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs',
    'DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgsDict',
    'DataSetOutputColumnArgs',
    'DataSetOutputColumnArgsDict',
    'DataSetPermissionArgs',
    'DataSetPermissionArgsDict',
    'DataSetPhysicalTableMapArgs',
    'DataSetPhysicalTableMapArgsDict',
    'DataSetPhysicalTableMapCustomSqlArgs',
    'DataSetPhysicalTableMapCustomSqlArgsDict',
    'DataSetPhysicalTableMapCustomSqlColumnArgs',
    'DataSetPhysicalTableMapCustomSqlColumnArgsDict',
    'DataSetPhysicalTableMapRelationalTableArgs',
    'DataSetPhysicalTableMapRelationalTableArgsDict',
    'DataSetPhysicalTableMapRelationalTableInputColumnArgs',
    'DataSetPhysicalTableMapRelationalTableInputColumnArgsDict',
    'DataSetPhysicalTableMapS3SourceArgs',
    'DataSetPhysicalTableMapS3SourceArgsDict',
    'DataSetPhysicalTableMapS3SourceInputColumnArgs',
    'DataSetPhysicalTableMapS3SourceInputColumnArgsDict',
    'DataSetPhysicalTableMapS3SourceUploadSettingsArgs',
    'DataSetPhysicalTableMapS3SourceUploadSettingsArgsDict',
    'DataSetRefreshPropertiesArgs',
    'DataSetRefreshPropertiesArgsDict',
    'DataSetRefreshPropertiesRefreshConfigurationArgs',
    'DataSetRefreshPropertiesRefreshConfigurationArgsDict',
    'DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs',
    'DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgsDict',
    'DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs',
    'DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgsDict',
    'DataSetRowLevelPermissionDataSetArgs',
    'DataSetRowLevelPermissionDataSetArgsDict',
    'DataSetRowLevelPermissionTagConfigurationArgs',
    'DataSetRowLevelPermissionTagConfigurationArgsDict',
    'DataSetRowLevelPermissionTagConfigurationTagRuleArgs',
    'DataSetRowLevelPermissionTagConfigurationTagRuleArgsDict',
    'DataSourceCredentialsArgs',
    'DataSourceCredentialsArgsDict',
    'DataSourceCredentialsCredentialPairArgs',
    'DataSourceCredentialsCredentialPairArgsDict',
    'DataSourceParametersArgs',
    'DataSourceParametersArgsDict',
    'DataSourceParametersAmazonElasticsearchArgs',
    'DataSourceParametersAmazonElasticsearchArgsDict',
    'DataSourceParametersAthenaArgs',
    'DataSourceParametersAthenaArgsDict',
    'DataSourceParametersAuroraArgs',
    'DataSourceParametersAuroraArgsDict',
    'DataSourceParametersAuroraPostgresqlArgs',
    'DataSourceParametersAuroraPostgresqlArgsDict',
    'DataSourceParametersAwsIotAnalyticsArgs',
    'DataSourceParametersAwsIotAnalyticsArgsDict',
    'DataSourceParametersJiraArgs',
    'DataSourceParametersJiraArgsDict',
    'DataSourceParametersMariaDbArgs',
    'DataSourceParametersMariaDbArgsDict',
    'DataSourceParametersMysqlArgs',
    'DataSourceParametersMysqlArgsDict',
    'DataSourceParametersOracleArgs',
    'DataSourceParametersOracleArgsDict',
    'DataSourceParametersPostgresqlArgs',
    'DataSourceParametersPostgresqlArgsDict',
    'DataSourceParametersPrestoArgs',
    'DataSourceParametersPrestoArgsDict',
    'DataSourceParametersRdsArgs',
    'DataSourceParametersRdsArgsDict',
    'DataSourceParametersRedshiftArgs',
    'DataSourceParametersRedshiftArgsDict',
    'DataSourceParametersS3Args',
    'DataSourceParametersS3ArgsDict',
    'DataSourceParametersS3ManifestFileLocationArgs',
    'DataSourceParametersS3ManifestFileLocationArgsDict',
    'DataSourceParametersServiceNowArgs',
    'DataSourceParametersServiceNowArgsDict',
    'DataSourceParametersSnowflakeArgs',
    'DataSourceParametersSnowflakeArgsDict',
    'DataSourceParametersSparkArgs',
    'DataSourceParametersSparkArgsDict',
    'DataSourceParametersSqlServerArgs',
    'DataSourceParametersSqlServerArgsDict',
    'DataSourceParametersTeradataArgs',
    'DataSourceParametersTeradataArgsDict',
    'DataSourceParametersTwitterArgs',
    'DataSourceParametersTwitterArgsDict',
    'DataSourcePermissionArgs',
    'DataSourcePermissionArgsDict',
    'DataSourceSslPropertiesArgs',
    'DataSourceSslPropertiesArgsDict',
    'DataSourceVpcConnectionPropertiesArgs',
    'DataSourceVpcConnectionPropertiesArgsDict',
    'DateTimeFormatConfigurationArgs',
    'DateTimeFormatConfigurationArgsDict',
    'DateTimeParameterDeclarationArgs',
    'DateTimeParameterDeclarationArgsDict',
    'DateTimeParameterDeclarationDefaultValuesArgs',
    'DateTimeParameterDeclarationDefaultValuesArgsDict',
    'DateTimeParameterDeclarationDefaultValuesRollingDateArgs',
    'DateTimeParameterDeclarationDefaultValuesRollingDateArgsDict',
    'DateTimeParameterDeclarationValuesWhenUnsetArgs',
    'DateTimeParameterDeclarationValuesWhenUnsetArgsDict',
    'DecimalParameterDeclarationArgs',
    'DecimalParameterDeclarationArgsDict',
    'DecimalParameterDeclarationDefaultValuesArgs',
    'DecimalParameterDeclarationDefaultValuesArgsDict',
    'DecimalParameterDeclarationValuesWhenUnsetArgs',
    'DecimalParameterDeclarationValuesWhenUnsetArgsDict',
    'DecimalPlacesConfigurationArgs',
    'DecimalPlacesConfigurationArgsDict',
    'DimensionFieldSchema2Args',
    'DimensionFieldSchema2ArgsDict',
    'DimensionFieldSchemaArgs',
    'DimensionFieldSchemaArgsDict',
    'DimensionFieldSchemaCategoricalDimensionFieldArgs',
    'DimensionFieldSchemaCategoricalDimensionFieldArgsDict',
    'DimensionFieldSchemaDateDimensionFieldArgs',
    'DimensionFieldSchemaDateDimensionFieldArgsDict',
    'DimensionFieldSchemaNumericalDimensionFieldArgs',
    'DimensionFieldSchemaNumericalDimensionFieldArgsDict',
    'DrillDownFiltersArgs',
    'DrillDownFiltersArgsDict',
    'DynamicValueArgs',
    'DynamicValueArgsDict',
    'FieldSortArgs',
    'FieldSortArgsDict',
    'FieldSortOptionsArgs',
    'FieldSortOptionsArgsDict',
    'FilterControlsArgs',
    'FilterControlsArgsDict',
    'FilterControlsDateTimePickerArgs',
    'FilterControlsDateTimePickerArgsDict',
    'FilterControlsDateTimePickerDisplayOptionsArgs',
    'FilterControlsDateTimePickerDisplayOptionsArgsDict',
    'FilterControlsDropdownArgs',
    'FilterControlsDropdownArgsDict',
    'FilterControlsDropdownDisplayOptionsArgs',
    'FilterControlsDropdownDisplayOptionsArgsDict',
    'FilterControlsDropdownSelectableValuesArgs',
    'FilterControlsDropdownSelectableValuesArgsDict',
    'FilterControlsListArgs',
    'FilterControlsListArgsDict',
    'FilterControlsListDisplayOptionsArgs',
    'FilterControlsListDisplayOptionsArgsDict',
    'FilterControlsListSelectableValuesArgs',
    'FilterControlsListSelectableValuesArgsDict',
    'FilterControlsRelativeDateTimeArgs',
    'FilterControlsRelativeDateTimeArgsDict',
    'FilterControlsRelativeDateTimeDisplayOptionsArgs',
    'FilterControlsRelativeDateTimeDisplayOptionsArgsDict',
    'FilterControlsSliderArgs',
    'FilterControlsSliderArgsDict',
    'FilterControlsSliderDisplayOptionsArgs',
    'FilterControlsSliderDisplayOptionsArgsDict',
    'FilterControlsTextAreaArgs',
    'FilterControlsTextAreaArgsDict',
    'FilterControlsTextFieldArgs',
    'FilterControlsTextFieldArgsDict',
    'FiltersArgs',
    'FiltersArgsDict',
    'FiltersCategoryFilterArgs',
    'FiltersCategoryFilterArgsDict',
    'FiltersCategoryFilterConfigurationArgs',
    'FiltersCategoryFilterConfigurationArgsDict',
    'FiltersCategoryFilterConfigurationCustomFilterConfigurationArgs',
    'FiltersCategoryFilterConfigurationCustomFilterConfigurationArgsDict',
    'FiltersCategoryFilterConfigurationCustomFilterListConfigurationArgs',
    'FiltersCategoryFilterConfigurationCustomFilterListConfigurationArgsDict',
    'FiltersCategoryFilterConfigurationFilterListConfigurationArgs',
    'FiltersCategoryFilterConfigurationFilterListConfigurationArgsDict',
    'FiltersNumericEqualityFilterArgs',
    'FiltersNumericEqualityFilterArgsDict',
    'FiltersNumericRangeFilterArgs',
    'FiltersNumericRangeFilterArgsDict',
    'FiltersNumericRangeFilterRangeMaximumArgs',
    'FiltersNumericRangeFilterRangeMaximumArgsDict',
    'FiltersNumericRangeFilterRangeMinimumArgs',
    'FiltersNumericRangeFilterRangeMinimumArgsDict',
    'FiltersRelativeDatesFilterArgs',
    'FiltersRelativeDatesFilterArgsDict',
    'FiltersRelativeDatesFilterAnchorDateConfigurationArgs',
    'FiltersRelativeDatesFilterAnchorDateConfigurationArgsDict',
    'FiltersRelativeDatesFilterExcludePeriodConfigurationArgs',
    'FiltersRelativeDatesFilterExcludePeriodConfigurationArgsDict',
    'FiltersTimeEqualityFilterArgs',
    'FiltersTimeEqualityFilterArgsDict',
    'FiltersTimeRangeFilterArgs',
    'FiltersTimeRangeFilterArgsDict',
    'FiltersTimeRangeFilterExcludePeriodConfigurationArgs',
    'FiltersTimeRangeFilterExcludePeriodConfigurationArgsDict',
    'FiltersTimeRangeFilterRangeMaximumValueArgs',
    'FiltersTimeRangeFilterRangeMaximumValueArgsDict',
    'FiltersTimeRangeFilterRangeMaximumValueRollingDateArgs',
    'FiltersTimeRangeFilterRangeMaximumValueRollingDateArgsDict',
    'FiltersTimeRangeFilterRangeMinimumValueArgs',
    'FiltersTimeRangeFilterRangeMinimumValueArgsDict',
    'FiltersTimeRangeFilterRangeMinimumValueRollingDateArgs',
    'FiltersTimeRangeFilterRangeMinimumValueRollingDateArgsDict',
    'FiltersTopBottomFilterArgs',
    'FiltersTopBottomFilterArgsDict',
    'FiltersTopBottomFilterAggregationSortConfigurationArgs',
    'FiltersTopBottomFilterAggregationSortConfigurationArgsDict',
    'FolderPermissionArgs',
    'FolderPermissionArgsDict',
    'FontConfigurationArgs',
    'FontConfigurationArgsDict',
    'FontConfigurationFontSizeArgs',
    'FontConfigurationFontSizeArgsDict',
    'FontConfigurationFontWeightArgs',
    'FontConfigurationFontWeightArgsDict',
    'FreeFormLayoutElementsArgs',
    'FreeFormLayoutElementsArgsDict',
    'FreeFormLayoutElementsBackgroundStyleArgs',
    'FreeFormLayoutElementsBackgroundStyleArgsDict',
    'FreeFormLayoutElementsBorderStyleArgs',
    'FreeFormLayoutElementsBorderStyleArgsDict',
    'FreeFormLayoutElementsRenderingRuleArgs',
    'FreeFormLayoutElementsRenderingRuleArgsDict',
    'FreeFormLayoutElementsSelectedBorderStyleArgs',
    'FreeFormLayoutElementsSelectedBorderStyleArgsDict',
    'GridLayoutArgs',
    'GridLayoutArgsDict',
    'GridLayoutCanvasSizeOptionsArgs',
    'GridLayoutCanvasSizeOptionsArgsDict',
    'GridLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgs',
    'GridLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict',
    'GridLayoutElementArgs',
    'GridLayoutElementArgsDict',
    'IamPolicyAssignmentIdentitiesArgs',
    'IamPolicyAssignmentIdentitiesArgsDict',
    'IntegerParameterDeclarationArgs',
    'IntegerParameterDeclarationArgsDict',
    'IntegerParameterDeclarationDefaultValuesArgs',
    'IntegerParameterDeclarationDefaultValuesArgsDict',
    'IntegerParameterDeclarationValuesWhenUnsetArgs',
    'IntegerParameterDeclarationValuesWhenUnsetArgsDict',
    'ItemsLimitConfigurationArgs',
    'ItemsLimitConfigurationArgsDict',
    'LabelOptionsArgs',
    'LabelOptionsArgsDict',
    'LayoutsArgs',
    'LayoutsArgsDict',
    'LayoutsConfigurationArgs',
    'LayoutsConfigurationArgsDict',
    'LayoutsConfigurationFreeFormLayoutArgs',
    'LayoutsConfigurationFreeFormLayoutArgsDict',
    'LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsArgs',
    'LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsArgsDict',
    'LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgs',
    'LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict',
    'LayoutsConfigurationSectionBasedLayoutArgs',
    'LayoutsConfigurationSectionBasedLayoutArgsDict',
    'LayoutsConfigurationSectionBasedLayoutBodySectionArgs',
    'LayoutsConfigurationSectionBasedLayoutBodySectionArgsDict',
    'LayoutsConfigurationSectionBasedLayoutBodySectionContentArgs',
    'LayoutsConfigurationSectionBasedLayoutBodySectionContentArgsDict',
    'LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutArgs',
    'LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutArgsDict',
    'LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayoutArgs',
    'LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayoutArgsDict',
    'LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationArgs',
    'LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationArgsDict',
    'LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfterArgs',
    'LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfterArgsDict',
    'LayoutsConfigurationSectionBasedLayoutBodySectionStyleArgs',
    'LayoutsConfigurationSectionBasedLayoutBodySectionStyleArgsDict',
    'LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsArgs',
    'LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsArgsDict',
    'LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptionsArgs',
    'LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsArgs',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsArgsDict',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutArgs',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutArgsDict',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayoutArgs',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayoutArgsDict',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsStyleArgs',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsStyleArgsDict',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsArgs',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsArgsDict',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutArgs',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutArgsDict',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayoutArgs',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayoutArgsDict',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyleArgs',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyleArgsDict',
    'LegendOptionsArgs',
    'LegendOptionsArgsDict',
    'LineChartLineStyleSettingsArgs',
    'LineChartLineStyleSettingsArgsDict',
    'LineChartMarkerStyleSettingsArgs',
    'LineChartMarkerStyleSettingsArgsDict',
    'MeasureFieldSchema2Args',
    'MeasureFieldSchema2ArgsDict',
    'MeasureFieldSchema2CalculatedMeasureFieldArgs',
    'MeasureFieldSchema2CalculatedMeasureFieldArgsDict',
    'MeasureFieldSchema2CategoricalMeasureFieldArgs',
    'MeasureFieldSchema2CategoricalMeasureFieldArgsDict',
    'MeasureFieldSchema2DateMeasureFieldArgs',
    'MeasureFieldSchema2DateMeasureFieldArgsDict',
    'MeasureFieldSchema2NumericalMeasureFieldArgs',
    'MeasureFieldSchema2NumericalMeasureFieldArgsDict',
    'MeasureFieldSchemaArgs',
    'MeasureFieldSchemaArgsDict',
    'MeasureFieldSchemaCalculatedMeasureFieldArgs',
    'MeasureFieldSchemaCalculatedMeasureFieldArgsDict',
    'MeasureFieldSchemaCategoricalMeasureFieldArgs',
    'MeasureFieldSchemaCategoricalMeasureFieldArgsDict',
    'MeasureFieldSchemaDateMeasureFieldArgs',
    'MeasureFieldSchemaDateMeasureFieldArgsDict',
    'MeasureFieldSchemaNumericalMeasureFieldArgs',
    'MeasureFieldSchemaNumericalMeasureFieldArgsDict',
    'NamespaceTimeoutsArgs',
    'NamespaceTimeoutsArgsDict',
    'NegativeValueConfigurationArgs',
    'NegativeValueConfigurationArgsDict',
    'NullValueFormatConfigurationArgs',
    'NullValueFormatConfigurationArgsDict',
    'NumberDisplayFormatConfigurationArgs',
    'NumberDisplayFormatConfigurationArgsDict',
    'NumberFormatConfigurationArgs',
    'NumberFormatConfigurationArgsDict',
    'NumericEqualityFilterArgs',
    'NumericEqualityFilterArgsDict',
    'NumericFormatConfigurationArgs',
    'NumericFormatConfigurationArgsDict',
    'NumericFormatConfigurationCurrencyDisplayFormatConfigurationArgs',
    'NumericFormatConfigurationCurrencyDisplayFormatConfigurationArgsDict',
    'NumericalAggregationArgs',
    'NumericalAggregationArgsDict',
    'NumericalAggregationPercentileAggregationArgs',
    'NumericalAggregationPercentileAggregationArgsDict',
    'PercentageDisplayFormatConfigurationArgs',
    'PercentageDisplayFormatConfigurationArgsDict',
    'ReferenceLineArgs',
    'ReferenceLineArgsDict',
    'ReferenceLineDataConfigurationArgs',
    'ReferenceLineDataConfigurationArgsDict',
    'ReferenceLineDataConfigurationDynamicConfigurationArgs',
    'ReferenceLineDataConfigurationDynamicConfigurationArgsDict',
    'ReferenceLineDataConfigurationStaticConfigurationArgs',
    'ReferenceLineDataConfigurationStaticConfigurationArgsDict',
    'ReferenceLineLabelConfigurationArgs',
    'ReferenceLineLabelConfigurationArgsDict',
    'ReferenceLineLabelConfigurationCustomLabelConfigurationArgs',
    'ReferenceLineLabelConfigurationCustomLabelConfigurationArgsDict',
    'ReferenceLineLabelConfigurationValueLabelConfigurationArgs',
    'ReferenceLineLabelConfigurationValueLabelConfigurationArgsDict',
    'ReferenceLineStyleConfigurationArgs',
    'ReferenceLineStyleConfigurationArgsDict',
    'RefreshScheduleScheduleArgs',
    'RefreshScheduleScheduleArgsDict',
    'RefreshScheduleScheduleScheduleFrequencyArgs',
    'RefreshScheduleScheduleScheduleFrequencyArgsDict',
    'RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs',
    'RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgsDict',
    'SelectAllOptionsArgs',
    'SelectAllOptionsArgsDict',
    'SeparatorConfigurationArgs',
    'SeparatorConfigurationArgsDict',
    'SeparatorConfigurationThousandsSeparatorArgs',
    'SeparatorConfigurationThousandsSeparatorArgsDict',
    'SmallMultiplesOptionsArgs',
    'SmallMultiplesOptionsArgsDict',
    'SmallMultiplesOptionsPanelConfigurationArgs',
    'SmallMultiplesOptionsPanelConfigurationArgsDict',
    'SmallMultiplesOptionsPanelConfigurationTitleArgs',
    'SmallMultiplesOptionsPanelConfigurationTitleArgsDict',
    'SpacingArgs',
    'SpacingArgsDict',
    'StringFormatConfigurationArgs',
    'StringFormatConfigurationArgsDict',
    'StringParameterDeclarationArgs',
    'StringParameterDeclarationArgsDict',
    'StringParameterDeclarationDefaultValuesArgs',
    'StringParameterDeclarationDefaultValuesArgsDict',
    'StringParameterDeclarationValuesWhenUnsetArgs',
    'StringParameterDeclarationValuesWhenUnsetArgsDict',
    'SubtitleArgs',
    'SubtitleArgsDict',
    'SubtitleFormatTextArgs',
    'SubtitleFormatTextArgsDict',
    'TableBorderOptionsArgs',
    'TableBorderOptionsArgsDict',
    'TemplateDefinitionArgs',
    'TemplateDefinitionArgsDict',
    'TemplateDefinitionAnalysisDefaultsArgs',
    'TemplateDefinitionAnalysisDefaultsArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict',
    'TemplateDefinitionCalculatedFieldArgs',
    'TemplateDefinitionCalculatedFieldArgsDict',
    'TemplateDefinitionColumnConfigurationArgs',
    'TemplateDefinitionColumnConfigurationArgsDict',
    'TemplateDefinitionColumnConfigurationFormatConfigurationArgs',
    'TemplateDefinitionColumnConfigurationFormatConfigurationArgsDict',
    'TemplateDefinitionDataSetConfigurationArgs',
    'TemplateDefinitionDataSetConfigurationArgsDict',
    'TemplateDefinitionDataSetConfigurationColumnGroupSchemaListArgs',
    'TemplateDefinitionDataSetConfigurationColumnGroupSchemaListArgsDict',
    'TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaListArgs',
    'TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaListArgsDict',
    'TemplateDefinitionDataSetConfigurationDataSetSchemaArgs',
    'TemplateDefinitionDataSetConfigurationDataSetSchemaArgsDict',
    'TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaListArgs',
    'TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaListArgsDict',
    'TemplateDefinitionFilterGroupArgs',
    'TemplateDefinitionFilterGroupArgsDict',
    'TemplateDefinitionFilterGroupScopeConfigurationArgs',
    'TemplateDefinitionFilterGroupScopeConfigurationArgsDict',
    'TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs',
    'TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict',
    'TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs',
    'TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict',
    'TemplateDefinitionParametersDeclarationArgs',
    'TemplateDefinitionParametersDeclarationArgsDict',
    'TemplateDefinitionSheetArgs',
    'TemplateDefinitionSheetArgsDict',
    'TemplateDefinitionSheetParameterControlArgs',
    'TemplateDefinitionSheetParameterControlArgsDict',
    'TemplateDefinitionSheetParameterControlDateTimePickerArgs',
    'TemplateDefinitionSheetParameterControlDateTimePickerArgsDict',
    'TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs',
    'TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict',
    'TemplateDefinitionSheetParameterControlDropdownArgs',
    'TemplateDefinitionSheetParameterControlDropdownArgsDict',
    'TemplateDefinitionSheetParameterControlDropdownDisplayOptionsArgs',
    'TemplateDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict',
    'TemplateDefinitionSheetParameterControlDropdownSelectableValuesArgs',
    'TemplateDefinitionSheetParameterControlDropdownSelectableValuesArgsDict',
    'TemplateDefinitionSheetParameterControlListArgs',
    'TemplateDefinitionSheetParameterControlListArgsDict',
    'TemplateDefinitionSheetParameterControlListDisplayOptionsArgs',
    'TemplateDefinitionSheetParameterControlListDisplayOptionsArgsDict',
    'TemplateDefinitionSheetParameterControlListSelectableValuesArgs',
    'TemplateDefinitionSheetParameterControlListSelectableValuesArgsDict',
    'TemplateDefinitionSheetParameterControlSliderArgs',
    'TemplateDefinitionSheetParameterControlSliderArgsDict',
    'TemplateDefinitionSheetParameterControlSliderDisplayOptionsArgs',
    'TemplateDefinitionSheetParameterControlSliderDisplayOptionsArgsDict',
    'TemplateDefinitionSheetParameterControlTextAreaArgs',
    'TemplateDefinitionSheetParameterControlTextAreaArgsDict',
    'TemplateDefinitionSheetParameterControlTextFieldArgs',
    'TemplateDefinitionSheetParameterControlTextFieldArgsDict',
    'TemplateDefinitionSheetSheetControlLayoutsArgs',
    'TemplateDefinitionSheetSheetControlLayoutsArgsDict',
    'TemplateDefinitionSheetSheetControlLayoutsConfigurationArgs',
    'TemplateDefinitionSheetSheetControlLayoutsConfigurationArgsDict',
    'TemplateDefinitionSheetTextBoxArgs',
    'TemplateDefinitionSheetTextBoxArgsDict',
    'TemplatePermissionArgs',
    'TemplatePermissionArgsDict',
    'TemplateSourceEntityArgs',
    'TemplateSourceEntityArgsDict',
    'TemplateSourceEntitySourceAnalysisArgs',
    'TemplateSourceEntitySourceAnalysisArgsDict',
    'TemplateSourceEntitySourceAnalysisDataSetReferenceArgs',
    'TemplateSourceEntitySourceAnalysisDataSetReferenceArgsDict',
    'TemplateSourceEntitySourceTemplateArgs',
    'TemplateSourceEntitySourceTemplateArgsDict',
    'TextAreaControlDisplayOptionsArgs',
    'TextAreaControlDisplayOptionsArgsDict',
    'ThemeConfigurationArgs',
    'ThemeConfigurationArgsDict',
    'ThemeConfigurationDataColorPaletteArgs',
    'ThemeConfigurationDataColorPaletteArgsDict',
    'ThemeConfigurationSheetArgs',
    'ThemeConfigurationSheetArgsDict',
    'ThemeConfigurationSheetTileArgs',
    'ThemeConfigurationSheetTileArgsDict',
    'ThemeConfigurationSheetTileBorderArgs',
    'ThemeConfigurationSheetTileBorderArgsDict',
    'ThemeConfigurationSheetTileLayoutArgs',
    'ThemeConfigurationSheetTileLayoutArgsDict',
    'ThemeConfigurationSheetTileLayoutGutterArgs',
    'ThemeConfigurationSheetTileLayoutGutterArgsDict',
    'ThemeConfigurationSheetTileLayoutMarginArgs',
    'ThemeConfigurationSheetTileLayoutMarginArgsDict',
    'ThemeConfigurationTypographyArgs',
    'ThemeConfigurationTypographyArgsDict',
    'ThemeConfigurationTypographyFontFamilyArgs',
    'ThemeConfigurationTypographyFontFamilyArgsDict',
    'ThemeConfigurationUiColorPaletteArgs',
    'ThemeConfigurationUiColorPaletteArgsDict',
    'ThemePermissionArgs',
    'ThemePermissionArgsDict',
    'TimeRangeFilterArgs',
    'TimeRangeFilterArgsDict',
    'TooltipOptionsArgs',
    'TooltipOptionsArgsDict',
    'TooltipOptionsFieldBaseTooltipArgs',
    'TooltipOptionsFieldBaseTooltipArgsDict',
    'TooltipOptionsFieldBaseTooltipTooltipFieldArgs',
    'TooltipOptionsFieldBaseTooltipTooltipFieldArgsDict',
    'TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItemArgs',
    'TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItemArgsDict',
    'TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItemArgs',
    'TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItemArgsDict',
    'VisualCustomActionsArgs',
    'VisualCustomActionsArgsDict',
    'VisualCustomActionsActionOperationArgs',
    'VisualCustomActionsActionOperationArgsDict',
    'VisualCustomActionsActionOperationFilterOperationArgs',
    'VisualCustomActionsActionOperationFilterOperationArgsDict',
    'VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfigurationArgs',
    'VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfigurationArgsDict',
    'VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationArgs',
    'VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationArgsDict',
    'VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfigurationArgs',
    'VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfigurationArgsDict',
    'VisualCustomActionsActionOperationNavigationOperationArgs',
    'VisualCustomActionsActionOperationNavigationOperationArgsDict',
    'VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfigurationArgs',
    'VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfigurationArgsDict',
    'VisualCustomActionsActionOperationSetParametersOperationArgs',
    'VisualCustomActionsActionOperationSetParametersOperationArgsDict',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationArgs',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationArgsDict',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueArgs',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueArgsDict',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationArgs',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationArgsDict',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValuesArgs',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValuesArgsDict',
    'VisualCustomActionsActionOperationUrlOperationArgs',
    'VisualCustomActionsActionOperationUrlOperationArgsDict',
    'VisualPaletteArgs',
    'VisualPaletteArgsDict',
    'VisualPaletteColorMapArgs',
    'VisualPaletteColorMapArgsDict',
    'VisualsArgs',
    'VisualsArgsDict',
    'VisualsBarChartVisualArgs',
    'VisualsBarChartVisualArgsDict',
    'VisualsBarChartVisualChartConfigurationArgs',
    'VisualsBarChartVisualChartConfigurationArgsDict',
    'VisualsBarChartVisualChartConfigurationFieldWellsArgs',
    'VisualsBarChartVisualChartConfigurationFieldWellsArgsDict',
    'VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWellsArgs',
    'VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWellsArgsDict',
    'VisualsBarChartVisualChartConfigurationSortConfigurationArgs',
    'VisualsBarChartVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsBoxPlotVisualArgs',
    'VisualsBoxPlotVisualArgsDict',
    'VisualsBoxPlotVisualChartConfigurationArgs',
    'VisualsBoxPlotVisualChartConfigurationArgsDict',
    'VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsArgs',
    'VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsArgsDict',
    'VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptionsArgs',
    'VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptionsArgsDict',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsArgs',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsArgsDict',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsArgs',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsArgsDict',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueArgs',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueArgsDict',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureFieldArgs',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureFieldArgs',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureFieldArgs',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureFieldArgsDict',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureFieldArgs',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureFieldArgsDict',
    'VisualsBoxPlotVisualChartConfigurationSortConfigurationArgs',
    'VisualsBoxPlotVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfigurationArgs',
    'VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfigurationArgsDict',
    'VisualsComboChartVisualArgs',
    'VisualsComboChartVisualArgsDict',
    'VisualsComboChartVisualChartConfigurationArgs',
    'VisualsComboChartVisualChartConfigurationArgsDict',
    'VisualsComboChartVisualChartConfigurationFieldWellsArgs',
    'VisualsComboChartVisualChartConfigurationFieldWellsArgsDict',
    'VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWellsArgs',
    'VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWellsArgsDict',
    'VisualsComboChartVisualChartConfigurationSortConfigurationArgs',
    'VisualsComboChartVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsCustomContentVisualArgs',
    'VisualsCustomContentVisualArgsDict',
    'VisualsCustomContentVisualChartConfigurationArgs',
    'VisualsCustomContentVisualChartConfigurationArgsDict',
    'VisualsEmptyVisualArgs',
    'VisualsEmptyVisualArgsDict',
    'VisualsFilledMapVisualArgs',
    'VisualsFilledMapVisualArgsDict',
    'VisualsFilledMapVisualChartConfigurationArgs',
    'VisualsFilledMapVisualChartConfigurationArgsDict',
    'VisualsFilledMapVisualChartConfigurationFieldWellsArgs',
    'VisualsFilledMapVisualChartConfigurationFieldWellsArgsDict',
    'VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWellsArgs',
    'VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWellsArgsDict',
    'VisualsFilledMapVisualChartConfigurationMapStyleOptionsArgs',
    'VisualsFilledMapVisualChartConfigurationMapStyleOptionsArgsDict',
    'VisualsFilledMapVisualChartConfigurationSortConfigurationArgs',
    'VisualsFilledMapVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsFilledMapVisualChartConfigurationWindowOptionsArgs',
    'VisualsFilledMapVisualChartConfigurationWindowOptionsArgsDict',
    'VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs',
    'VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgsDict',
    'VisualsFilledMapVisualConditionalFormattingArgs',
    'VisualsFilledMapVisualConditionalFormattingArgsDict',
    'VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs',
    'VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgsDict',
    'VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs',
    'VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgsDict',
    'VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs',
    'VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgsDict',
    'VisualsFunnelChartVisualArgs',
    'VisualsFunnelChartVisualArgsDict',
    'VisualsFunnelChartVisualChartConfigurationArgs',
    'VisualsFunnelChartVisualChartConfigurationArgsDict',
    'VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs',
    'VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgsDict',
    'VisualsFunnelChartVisualChartConfigurationFieldWellsArgs',
    'VisualsFunnelChartVisualChartConfigurationFieldWellsArgsDict',
    'VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWellsArgs',
    'VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWellsArgsDict',
    'VisualsFunnelChartVisualChartConfigurationSortConfigurationArgs',
    'VisualsFunnelChartVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsGaugeChartVisualArgs',
    'VisualsGaugeChartVisualArgsDict',
    'VisualsGaugeChartVisualChartConfigurationArgs',
    'VisualsGaugeChartVisualChartConfigurationArgsDict',
    'VisualsGaugeChartVisualChartConfigurationFieldWellsArgs',
    'VisualsGaugeChartVisualChartConfigurationFieldWellsArgsDict',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgs',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgsDict',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcArgs',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcArgsDict',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisArgs',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisArgsDict',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRangeArgs',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRangeArgsDict',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonArgs',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonArgsDict',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormatArgs',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormatArgsDict',
    'VisualsGaugeChartVisualConditionalFormattingArgs',
    'VisualsGaugeChartVisualConditionalFormattingArgsDict',
    'VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArgs',
    'VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArgsDict',
    'VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs',
    'VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgsDict',
    'VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgs',
    'VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgsDict',
    'VisualsGeospatialMapVisualArgs',
    'VisualsGeospatialMapVisualArgsDict',
    'VisualsGeospatialMapVisualChartConfigurationArgs',
    'VisualsGeospatialMapVisualChartConfigurationArgsDict',
    'VisualsGeospatialMapVisualChartConfigurationFieldWellsArgs',
    'VisualsGeospatialMapVisualChartConfigurationFieldWellsArgsDict',
    'VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWellsArgs',
    'VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWellsArgsDict',
    'VisualsGeospatialMapVisualChartConfigurationMapStyleOptionsArgs',
    'VisualsGeospatialMapVisualChartConfigurationMapStyleOptionsArgsDict',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsArgs',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsArgsDict',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationArgs',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationArgsDict',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerArgs',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerArgsDict',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarkerArgs',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarkerArgsDict',
    'VisualsGeospatialMapVisualChartConfigurationWindowOptionsArgs',
    'VisualsGeospatialMapVisualChartConfigurationWindowOptionsArgsDict',
    'VisualsGeospatialMapVisualChartConfigurationWindowOptionsBoundsArgs',
    'VisualsGeospatialMapVisualChartConfigurationWindowOptionsBoundsArgsDict',
    'VisualsHeatMapVisualArgs',
    'VisualsHeatMapVisualArgsDict',
    'VisualsHeatMapVisualChartConfigurationArgs',
    'VisualsHeatMapVisualChartConfigurationArgsDict',
    'VisualsHeatMapVisualChartConfigurationFieldWellsArgs',
    'VisualsHeatMapVisualChartConfigurationFieldWellsArgsDict',
    'VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWellsArgs',
    'VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWellsArgsDict',
    'VisualsHeatMapVisualChartConfigurationSortConfigurationArgs',
    'VisualsHeatMapVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsHistogramVisualArgs',
    'VisualsHistogramVisualArgsDict',
    'VisualsHistogramVisualChartConfigurationArgs',
    'VisualsHistogramVisualChartConfigurationArgsDict',
    'VisualsHistogramVisualChartConfigurationBinOptionsArgs',
    'VisualsHistogramVisualChartConfigurationBinOptionsArgsDict',
    'VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgs',
    'VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgsDict',
    'VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgs',
    'VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgsDict',
    'VisualsHistogramVisualChartConfigurationFieldWellsArgs',
    'VisualsHistogramVisualChartConfigurationFieldWellsArgsDict',
    'VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWellsArgs',
    'VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWellsArgsDict',
    'VisualsInsightVisualArgs',
    'VisualsInsightVisualArgsDict',
    'VisualsInsightVisualInsightConfigurationArgs',
    'VisualsInsightVisualInsightConfigurationArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationArgs',
    'VisualsInsightVisualInsightConfigurationComputationArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationForecastArgs',
    'VisualsInsightVisualInsightConfigurationComputationForecastArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationGrowthRateArgs',
    'VisualsInsightVisualInsightConfigurationComputationGrowthRateArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationMaximumMinimumArgs',
    'VisualsInsightVisualInsightConfigurationComputationMaximumMinimumArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationMetricComparisonArgs',
    'VisualsInsightVisualInsightConfigurationComputationMetricComparisonArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriodArgs',
    'VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriodArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationPeriodToDateArgs',
    'VisualsInsightVisualInsightConfigurationComputationPeriodToDateArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationTopBottomMoversArgs',
    'VisualsInsightVisualInsightConfigurationComputationTopBottomMoversArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationTopBottomRankedArgs',
    'VisualsInsightVisualInsightConfigurationComputationTopBottomRankedArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationTotalAggregationArgs',
    'VisualsInsightVisualInsightConfigurationComputationTotalAggregationArgsDict',
    'VisualsInsightVisualInsightConfigurationComputationUniqueValuesArgs',
    'VisualsInsightVisualInsightConfigurationComputationUniqueValuesArgsDict',
    'VisualsInsightVisualInsightConfigurationCustomNarrativeArgs',
    'VisualsInsightVisualInsightConfigurationCustomNarrativeArgsDict',
    'VisualsKpiVisualArgs',
    'VisualsKpiVisualArgsDict',
    'VisualsKpiVisualChartConfigurationArgs',
    'VisualsKpiVisualChartConfigurationArgsDict',
    'VisualsKpiVisualChartConfigurationFieldWellsArgs',
    'VisualsKpiVisualChartConfigurationFieldWellsArgsDict',
    'VisualsKpiVisualChartConfigurationKpiOptionsArgs',
    'VisualsKpiVisualChartConfigurationKpiOptionsArgsDict',
    'VisualsKpiVisualChartConfigurationKpiOptionsComparisonArgs',
    'VisualsKpiVisualChartConfigurationKpiOptionsComparisonArgsDict',
    'VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormatArgs',
    'VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormatArgsDict',
    'VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs',
    'VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgsDict',
    'VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsArgs',
    'VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsArgsDict',
    'VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayoutArgs',
    'VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayoutArgsDict',
    'VisualsKpiVisualChartConfigurationSortConfigurationArgs',
    'VisualsKpiVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsKpiVisualConditionalFormattingArgs',
    'VisualsKpiVisualConditionalFormattingArgsDict',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionArgs',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionArgsDict',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgsDict',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValueArgs',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValueArgsDict',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgs',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgsDict',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBarArgs',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBarArgsDict',
    'VisualsLineChartVisualArgs',
    'VisualsLineChartVisualArgsDict',
    'VisualsLineChartVisualChartConfigurationArgs',
    'VisualsLineChartVisualChartConfigurationArgsDict',
    'VisualsLineChartVisualChartConfigurationDefaultSeriesSettingsArgs',
    'VisualsLineChartVisualChartConfigurationDefaultSeriesSettingsArgsDict',
    'VisualsLineChartVisualChartConfigurationFieldWellsArgs',
    'VisualsLineChartVisualChartConfigurationFieldWellsArgsDict',
    'VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWellsArgs',
    'VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWellsArgsDict',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationArgs',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationArgsDict',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgsDict',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioArgs',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioArgsDict',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenarioArgs',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenarioArgsDict',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenarioArgs',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenarioArgsDict',
    'VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsArgs',
    'VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsArgsDict',
    'VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfigurationArgs',
    'VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfigurationArgsDict',
    'VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsArgs',
    'VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsArgsDict',
    'VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfigurationArgs',
    'VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfigurationArgsDict',
    'VisualsLineChartVisualChartConfigurationSeriesArgs',
    'VisualsLineChartVisualChartConfigurationSeriesArgsDict',
    'VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemArgs',
    'VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemArgsDict',
    'VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettingsArgs',
    'VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettingsArgsDict',
    'VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemArgs',
    'VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemArgsDict',
    'VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettingsArgs',
    'VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettingsArgsDict',
    'VisualsLineChartVisualChartConfigurationSortConfigurationArgs',
    'VisualsLineChartVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsPieChartVisualArgs',
    'VisualsPieChartVisualArgsDict',
    'VisualsPieChartVisualChartConfigurationArgs',
    'VisualsPieChartVisualChartConfigurationArgsDict',
    'VisualsPieChartVisualChartConfigurationDonutOptionsArgs',
    'VisualsPieChartVisualChartConfigurationDonutOptionsArgsDict',
    'VisualsPieChartVisualChartConfigurationDonutOptionsArcOptionsArgs',
    'VisualsPieChartVisualChartConfigurationDonutOptionsArcOptionsArgsDict',
    'VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptionsArgs',
    'VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptionsArgsDict',
    'VisualsPieChartVisualChartConfigurationFieldWellsArgs',
    'VisualsPieChartVisualChartConfigurationFieldWellsArgsDict',
    'VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWellsArgs',
    'VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWellsArgsDict',
    'VisualsPieChartVisualChartConfigurationSortConfigurationArgs',
    'VisualsPieChartVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsPivotTableVisualArgs',
    'VisualsPivotTableVisualArgsDict',
    'VisualsPivotTableVisualChartConfigurationArgs',
    'VisualsPivotTableVisualChartConfigurationArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsArgs',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathListArgs',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathListArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionFieldArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionFieldArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionFieldArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionFieldArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionFieldArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionFieldArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionFieldArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionFieldArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionFieldArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionFieldArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionFieldArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionFieldArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureFieldArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureFieldArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureFieldArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureFieldArgsDict',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureFieldArgs',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureFieldArgsDict',
    'VisualsPivotTableVisualChartConfigurationPaginatedReportOptionsArgs',
    'VisualsPivotTableVisualChartConfigurationPaginatedReportOptionsArgsDict',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationArgs',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionArgs',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionArgsDict',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByArgs',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByArgsDict',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathArgs',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathArgsDict',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPathArgs',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPathArgsDict',
    'VisualsPivotTableVisualChartConfigurationTableOptionsArgs',
    'VisualsPivotTableVisualChartConfigurationTableOptionsArgsDict',
    'VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs',
    'VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgsDict',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsArgs',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsArgsDict',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsArgs',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsArgsDict',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOptionArgs',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOptionArgsDict',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgsDict',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsArgs',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsArgsDict',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOptionArgs',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOptionArgsDict',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptionsArgs',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptionsArgsDict',
    'VisualsPivotTableVisualConditionalFormattingArgs',
    'VisualsPivotTableVisualConditionalFormattingArgsDict',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgsDict',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgsDict',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgs',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgsDict',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgsDict',
    'VisualsRadarChartVisualArgs',
    'VisualsRadarChartVisualArgsDict',
    'VisualsRadarChartVisualChartConfigurationArgs',
    'VisualsRadarChartVisualChartConfigurationArgsDict',
    'VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgs',
    'VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgsDict',
    'VisualsRadarChartVisualChartConfigurationFieldWellsArgs',
    'VisualsRadarChartVisualChartConfigurationFieldWellsArgsDict',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsArgs',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsArgsDict',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueArgs',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueArgsDict',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureFieldArgs',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureFieldArgs',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureFieldArgs',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureFieldArgsDict',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureFieldArgs',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureFieldArgsDict',
    'VisualsRadarChartVisualChartConfigurationSortConfigurationArgs',
    'VisualsRadarChartVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsSankeyDiagramVisualArgs',
    'VisualsSankeyDiagramVisualArgsDict',
    'VisualsSankeyDiagramVisualChartConfigurationArgs',
    'VisualsSankeyDiagramVisualChartConfigurationArgsDict',
    'VisualsSankeyDiagramVisualChartConfigurationFieldWellsArgs',
    'VisualsSankeyDiagramVisualChartConfigurationFieldWellsArgsDict',
    'VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWellsArgs',
    'VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWellsArgsDict',
    'VisualsSankeyDiagramVisualChartConfigurationSortConfigurationArgs',
    'VisualsSankeyDiagramVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsScatterPlotVisualArgs',
    'VisualsScatterPlotVisualArgsDict',
    'VisualsScatterPlotVisualChartConfigurationArgs',
    'VisualsScatterPlotVisualChartConfigurationArgsDict',
    'VisualsScatterPlotVisualChartConfigurationFieldWellsArgs',
    'VisualsScatterPlotVisualChartConfigurationFieldWellsArgsDict',
    'VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWellsArgs',
    'VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWellsArgsDict',
    'VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWellsArgs',
    'VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWellsArgsDict',
    'VisualsTableVisualArgs',
    'VisualsTableVisualArgsDict',
    'VisualsTableVisualChartConfigurationArgs',
    'VisualsTableVisualChartConfigurationArgsDict',
    'VisualsTableVisualChartConfigurationFieldOptionsArgs',
    'VisualsTableVisualChartConfigurationFieldOptionsArgsDict',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgsDict',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingArgs',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingArgsDict',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationArgs',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationArgsDict',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptionsArgs',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptionsArgsDict',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationArgs',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationArgsDict',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentArgs',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentArgsDict',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContentArgs',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContentArgsDict',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContentArgs',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContentArgsDict',
    'VisualsTableVisualChartConfigurationFieldWellsArgs',
    'VisualsTableVisualChartConfigurationFieldWellsArgsDict',
    'VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWellsArgs',
    'VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWellsArgsDict',
    'VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsArgs',
    'VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsArgsDict',
    'VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueArgs',
    'VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueArgsDict',
    'VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfigurationArgs',
    'VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfigurationArgsDict',
    'VisualsTableVisualChartConfigurationPaginatedReportOptionsArgs',
    'VisualsTableVisualChartConfigurationPaginatedReportOptionsArgsDict',
    'VisualsTableVisualChartConfigurationSortConfigurationArgs',
    'VisualsTableVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsTableVisualChartConfigurationSortConfigurationPaginationConfigurationArgs',
    'VisualsTableVisualChartConfigurationSortConfigurationPaginationConfigurationArgsDict',
    'VisualsTableVisualChartConfigurationTableInlineVisualizationArgs',
    'VisualsTableVisualChartConfigurationTableInlineVisualizationArgsDict',
    'VisualsTableVisualChartConfigurationTableInlineVisualizationDataBarsArgs',
    'VisualsTableVisualChartConfigurationTableInlineVisualizationDataBarsArgsDict',
    'VisualsTableVisualChartConfigurationTableOptionsArgs',
    'VisualsTableVisualChartConfigurationTableOptionsArgsDict',
    'VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs',
    'VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgsDict',
    'VisualsTableVisualChartConfigurationTotalOptionsArgs',
    'VisualsTableVisualChartConfigurationTotalOptionsArgsDict',
    'VisualsTableVisualConditionalFormattingArgs',
    'VisualsTableVisualConditionalFormattingArgsDict',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionArgs',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionArgsDict',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgsDict',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgsDict',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionRowArgs',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionRowArgsDict',
    'VisualsTreeMapVisualArgs',
    'VisualsTreeMapVisualArgsDict',
    'VisualsTreeMapVisualChartConfigurationArgs',
    'VisualsTreeMapVisualChartConfigurationArgsDict',
    'VisualsTreeMapVisualChartConfigurationFieldWellsArgs',
    'VisualsTreeMapVisualChartConfigurationFieldWellsArgsDict',
    'VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWellsArgs',
    'VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWellsArgsDict',
    'VisualsTreeMapVisualChartConfigurationSortConfigurationArgs',
    'VisualsTreeMapVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsWaterfallVisualArgs',
    'VisualsWaterfallVisualArgsDict',
    'VisualsWaterfallVisualChartConfigurationArgs',
    'VisualsWaterfallVisualChartConfigurationArgsDict',
    'VisualsWaterfallVisualChartConfigurationFieldWellsArgs',
    'VisualsWaterfallVisualChartConfigurationFieldWellsArgsDict',
    'VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWellsArgs',
    'VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWellsArgsDict',
    'VisualsWaterfallVisualChartConfigurationSortConfigurationArgs',
    'VisualsWaterfallVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsWaterfallVisualChartConfigurationWaterfallChartOptionsArgs',
    'VisualsWaterfallVisualChartConfigurationWaterfallChartOptionsArgsDict',
    'VisualsWordCloudVisualArgs',
    'VisualsWordCloudVisualArgsDict',
    'VisualsWordCloudVisualChartConfigurationArgs',
    'VisualsWordCloudVisualChartConfigurationArgsDict',
    'VisualsWordCloudVisualChartConfigurationFieldWellsArgs',
    'VisualsWordCloudVisualChartConfigurationFieldWellsArgsDict',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsArgs',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsArgsDict',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByArgs',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByArgsDict',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionFieldArgs',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionFieldArgsDict',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionFieldArgs',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionFieldArgsDict',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionFieldArgs',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionFieldArgsDict',
    'VisualsWordCloudVisualChartConfigurationSortConfigurationArgs',
    'VisualsWordCloudVisualChartConfigurationSortConfigurationArgsDict',
    'VisualsWordCloudVisualChartConfigurationWordCloudOptionsArgs',
    'VisualsWordCloudVisualChartConfigurationWordCloudOptionsArgsDict',
    'VpcConnectionTimeoutsArgs',
    'VpcConnectionTimeoutsArgsDict',
    'GetDataSetColumnLevelPermissionRuleArgs',
    'GetDataSetColumnLevelPermissionRuleArgsDict',
]

MYPY = False

if not MYPY:
    class AggregationFunctionArgsDict(TypedDict):
        categorical_aggregation_function: NotRequired[pulumi.Input[str]]
        date_aggregation_function: NotRequired[pulumi.Input[str]]
        numerical_aggregation_function: NotRequired[pulumi.Input['NumericalAggregationArgsDict']]
elif False:
    AggregationFunctionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AggregationFunctionArgs:
    def __init__(__self__, *,
                 categorical_aggregation_function: Optional[pulumi.Input[str]] = None,
                 date_aggregation_function: Optional[pulumi.Input[str]] = None,
                 numerical_aggregation_function: Optional[pulumi.Input['NumericalAggregationArgs']] = None):
        if categorical_aggregation_function is not None:
            pulumi.set(__self__, "categorical_aggregation_function", categorical_aggregation_function)
        if date_aggregation_function is not None:
            pulumi.set(__self__, "date_aggregation_function", date_aggregation_function)
        if numerical_aggregation_function is not None:
            pulumi.set(__self__, "numerical_aggregation_function", numerical_aggregation_function)

    @property
    @pulumi.getter(name="categoricalAggregationFunction")
    def categorical_aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "categorical_aggregation_function")

    @categorical_aggregation_function.setter
    def categorical_aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "categorical_aggregation_function", value)

    @property
    @pulumi.getter(name="dateAggregationFunction")
    def date_aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_aggregation_function")

    @date_aggregation_function.setter
    def date_aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_aggregation_function", value)

    @property
    @pulumi.getter(name="numericalAggregationFunction")
    def numerical_aggregation_function(self) -> Optional[pulumi.Input['NumericalAggregationArgs']]:
        return pulumi.get(self, "numerical_aggregation_function")

    @numerical_aggregation_function.setter
    def numerical_aggregation_function(self, value: Optional[pulumi.Input['NumericalAggregationArgs']]):
        pulumi.set(self, "numerical_aggregation_function", value)


if not MYPY:
    class AnalysisDefinitionArgsDict(TypedDict):
        data_set_identifiers_declarations: pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionDataSetIdentifiersDeclarationArgsDict']]]
        """
        A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the analysis sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
        """
        analysis_defaults: NotRequired[pulumi.Input['AnalysisDefinitionAnalysisDefaultsArgsDict']]
        """
        The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        """
        calculated_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionCalculatedFieldArgsDict']]]]
        """
        A list of calculated field definitions for the analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        """
        column_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionColumnConfigurationArgsDict']]]]
        """
        A list of analysis-level column configurations. Column configurations are used to set default formatting for a column that's used throughout an analysis. See AWS API Documentation for complete description.
        """
        filter_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionFilterGroupArgsDict']]]]
        """
        A list of filter definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        """
        parameter_declarations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionParameterDeclarationArgsDict']]]]
        sheets: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetArgsDict']]]]
        """
        A list of sheet definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
elif False:
    AnalysisDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionArgs:
    def __init__(__self__, *,
                 data_set_identifiers_declarations: pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionDataSetIdentifiersDeclarationArgs']]],
                 analysis_defaults: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsArgs']] = None,
                 calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionCalculatedFieldArgs']]]] = None,
                 column_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionColumnConfigurationArgs']]]] = None,
                 filter_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionFilterGroupArgs']]]] = None,
                 parameter_declarations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionParameterDeclarationArgs']]]] = None,
                 sheets: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionDataSetIdentifiersDeclarationArgs']]] data_set_identifiers_declarations: A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the analysis sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
        :param pulumi.Input['AnalysisDefinitionAnalysisDefaultsArgs'] analysis_defaults: The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionCalculatedFieldArgs']]] calculated_fields: A list of calculated field definitions for the analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionColumnConfigurationArgs']]] column_configurations: A list of analysis-level column configurations. Column configurations are used to set default formatting for a column that's used throughout an analysis. See AWS API Documentation for complete description.
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionFilterGroupArgs']]] filter_groups: A list of filter definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetArgs']]] sheets: A list of sheet definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        pulumi.set(__self__, "data_set_identifiers_declarations", data_set_identifiers_declarations)
        if analysis_defaults is not None:
            pulumi.set(__self__, "analysis_defaults", analysis_defaults)
        if calculated_fields is not None:
            pulumi.set(__self__, "calculated_fields", calculated_fields)
        if column_configurations is not None:
            pulumi.set(__self__, "column_configurations", column_configurations)
        if filter_groups is not None:
            pulumi.set(__self__, "filter_groups", filter_groups)
        if parameter_declarations is not None:
            pulumi.set(__self__, "parameter_declarations", parameter_declarations)
        if sheets is not None:
            pulumi.set(__self__, "sheets", sheets)

    @property
    @pulumi.getter(name="dataSetIdentifiersDeclarations")
    def data_set_identifiers_declarations(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionDataSetIdentifiersDeclarationArgs']]]:
        """
        A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the analysis sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
        """
        return pulumi.get(self, "data_set_identifiers_declarations")

    @data_set_identifiers_declarations.setter
    def data_set_identifiers_declarations(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionDataSetIdentifiersDeclarationArgs']]]):
        pulumi.set(self, "data_set_identifiers_declarations", value)

    @property
    @pulumi.getter(name="analysisDefaults")
    def analysis_defaults(self) -> Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsArgs']]:
        """
        The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        """
        return pulumi.get(self, "analysis_defaults")

    @analysis_defaults.setter
    def analysis_defaults(self, value: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsArgs']]):
        pulumi.set(self, "analysis_defaults", value)

    @property
    @pulumi.getter(name="calculatedFields")
    def calculated_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionCalculatedFieldArgs']]]]:
        """
        A list of calculated field definitions for the analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        """
        return pulumi.get(self, "calculated_fields")

    @calculated_fields.setter
    def calculated_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionCalculatedFieldArgs']]]]):
        pulumi.set(self, "calculated_fields", value)

    @property
    @pulumi.getter(name="columnConfigurations")
    def column_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionColumnConfigurationArgs']]]]:
        """
        A list of analysis-level column configurations. Column configurations are used to set default formatting for a column that's used throughout an analysis. See AWS API Documentation for complete description.
        """
        return pulumi.get(self, "column_configurations")

    @column_configurations.setter
    def column_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionColumnConfigurationArgs']]]]):
        pulumi.set(self, "column_configurations", value)

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionFilterGroupArgs']]]]:
        """
        A list of filter definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        """
        return pulumi.get(self, "filter_groups")

    @filter_groups.setter
    def filter_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionFilterGroupArgs']]]]):
        pulumi.set(self, "filter_groups", value)

    @property
    @pulumi.getter(name="parameterDeclarations")
    def parameter_declarations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionParameterDeclarationArgs']]]]:
        return pulumi.get(self, "parameter_declarations")

    @parameter_declarations.setter
    def parameter_declarations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionParameterDeclarationArgs']]]]):
        pulumi.set(self, "parameter_declarations", value)

    @property
    @pulumi.getter
    def sheets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetArgs']]]]:
        """
        A list of sheet definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        return pulumi.get(self, "sheets")

    @sheets.setter
    def sheets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetArgs']]]]):
        pulumi.set(self, "sheets", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsArgsDict(TypedDict):
        default_new_sheet_configuration: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict']
elif False:
    AnalysisDefinitionAnalysisDefaultsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsArgs:
    def __init__(__self__, *,
                 default_new_sheet_configuration: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs']):
        pulumi.set(__self__, "default_new_sheet_configuration", default_new_sheet_configuration)

    @property
    @pulumi.getter(name="defaultNewSheetConfiguration")
    def default_new_sheet_configuration(self) -> pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs']:
        return pulumi.get(self, "default_new_sheet_configuration")

    @default_new_sheet_configuration.setter
    def default_new_sheet_configuration(self, value: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs']):
        pulumi.set(self, "default_new_sheet_configuration", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict(TypedDict):
        interactive_layout_configuration: NotRequired[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict']]
        paginated_layout_configuration: NotRequired[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict']]
        sheet_content_type: NotRequired[pulumi.Input[str]]
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs:
    def __init__(__self__, *,
                 interactive_layout_configuration: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs']] = None,
                 paginated_layout_configuration: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs']] = None,
                 sheet_content_type: Optional[pulumi.Input[str]] = None):
        if interactive_layout_configuration is not None:
            pulumi.set(__self__, "interactive_layout_configuration", interactive_layout_configuration)
        if paginated_layout_configuration is not None:
            pulumi.set(__self__, "paginated_layout_configuration", paginated_layout_configuration)
        if sheet_content_type is not None:
            pulumi.set(__self__, "sheet_content_type", sheet_content_type)

    @property
    @pulumi.getter(name="interactiveLayoutConfiguration")
    def interactive_layout_configuration(self) -> Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs']]:
        return pulumi.get(self, "interactive_layout_configuration")

    @interactive_layout_configuration.setter
    def interactive_layout_configuration(self, value: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs']]):
        pulumi.set(self, "interactive_layout_configuration", value)

    @property
    @pulumi.getter(name="paginatedLayoutConfiguration")
    def paginated_layout_configuration(self) -> Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs']]:
        return pulumi.get(self, "paginated_layout_configuration")

    @paginated_layout_configuration.setter
    def paginated_layout_configuration(self, value: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs']]):
        pulumi.set(self, "paginated_layout_configuration", value)

    @property
    @pulumi.getter(name="sheetContentType")
    def sheet_content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sheet_content_type")

    @sheet_content_type.setter
    def sheet_content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sheet_content_type", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict(TypedDict):
        free_form: NotRequired[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict']]
        grid: NotRequired[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict']]
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs']] = None,
                 grid: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs']] = None):
        if free_form is not None:
            pulumi.set(__self__, "free_form", free_form)
        if grid is not None:
            pulumi.set(__self__, "grid", grid)

    @property
    @pulumi.getter(name="freeForm")
    def free_form(self) -> Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs']]:
        return pulumi.get(self, "free_form")

    @free_form.setter
    def free_form(self, value: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs']]):
        pulumi.set(self, "free_form", value)

    @property
    @pulumi.getter
    def grid(self) -> Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs']]:
        return pulumi.get(self, "grid")

    @grid.setter
    def grid(self, value: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs']]):
        pulumi.set(self, "grid", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict(TypedDict):
        canvas_size_options: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict']
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs']):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict(TypedDict):
        screen_canvas_size_options: NotRequired[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict']]
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs']] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict(TypedDict):
        optimized_view_port_width: pulumi.Input[str]
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 optimized_view_port_width: pulumi.Input[str]):
        pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> pulumi.Input[str]:
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: pulumi.Input[str]):
        pulumi.set(self, "optimized_view_port_width", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict(TypedDict):
        canvas_size_options: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict']
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs']):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict(TypedDict):
        screen_canvas_size_options: NotRequired[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict']]
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs']] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict(TypedDict):
        resize_option: pulumi.Input[str]
        optimized_view_port_width: NotRequired[pulumi.Input[str]]
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 resize_option: pulumi.Input[str],
                 optimized_view_port_width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "resize_option", resize_option)
        if optimized_view_port_width is not None:
            pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resize_option")

    @resize_option.setter
    def resize_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "resize_option", value)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimized_view_port_width", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict(TypedDict):
        section_based: NotRequired[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict']]
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 section_based: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs']] = None):
        if section_based is not None:
            pulumi.set(__self__, "section_based", section_based)

    @property
    @pulumi.getter(name="sectionBased")
    def section_based(self) -> Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs']]:
        return pulumi.get(self, "section_based")

    @section_based.setter
    def section_based(self, value: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs']]):
        pulumi.set(self, "section_based", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict(TypedDict):
        canvas_size_options: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict']
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs']):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict(TypedDict):
        paper_canvas_size_options: NotRequired[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict']]
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_canvas_size_options: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs']] = None):
        if paper_canvas_size_options is not None:
            pulumi.set(__self__, "paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "paper_canvas_size_options")

    @paper_canvas_size_options.setter
    def paper_canvas_size_options(self, value: Optional[pulumi.Input['AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs']]):
        pulumi.set(self, "paper_canvas_size_options", value)


if not MYPY:
    class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict(TypedDict):
        paper_margin: NotRequired[pulumi.Input['SpacingArgsDict']]
        paper_orientation: NotRequired[pulumi.Input[str]]
        paper_size: NotRequired[pulumi.Input[str]]
elif False:
    AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_margin: Optional[pulumi.Input['SpacingArgs']] = None,
                 paper_orientation: Optional[pulumi.Input[str]] = None,
                 paper_size: Optional[pulumi.Input[str]] = None):
        if paper_margin is not None:
            pulumi.set(__self__, "paper_margin", paper_margin)
        if paper_orientation is not None:
            pulumi.set(__self__, "paper_orientation", paper_orientation)
        if paper_size is not None:
            pulumi.set(__self__, "paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional[pulumi.Input['SpacingArgs']]:
        return pulumi.get(self, "paper_margin")

    @paper_margin.setter
    def paper_margin(self, value: Optional[pulumi.Input['SpacingArgs']]):
        pulumi.set(self, "paper_margin", value)

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "paper_orientation")

    @paper_orientation.setter
    def paper_orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper_orientation", value)

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "paper_size")

    @paper_size.setter
    def paper_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper_size", value)


if not MYPY:
    class AnalysisDefinitionCalculatedFieldArgsDict(TypedDict):
        data_set_identifier: pulumi.Input[str]
        expression: pulumi.Input[str]
        name: pulumi.Input[str]
        """
        Display name for the analysis.

        The following arguments are optional:
        """
elif False:
    AnalysisDefinitionCalculatedFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionCalculatedFieldArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AnalysisDefinitionColumnConfigurationArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        format_configuration: NotRequired[pulumi.Input['AnalysisDefinitionColumnConfigurationFormatConfigurationArgsDict']]
        role: NotRequired[pulumi.Input[str]]
elif False:
    AnalysisDefinitionColumnConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionColumnConfigurationArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 format_configuration: Optional[pulumi.Input['AnalysisDefinitionColumnConfigurationFormatConfigurationArgs']] = None,
                 role: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisDefinitionColumnConfigurationFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisDefinitionColumnConfigurationFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


if not MYPY:
    class AnalysisDefinitionColumnConfigurationFormatConfigurationArgsDict(TypedDict):
        date_time_format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
        number_format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
        string_format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
elif False:
    AnalysisDefinitionColumnConfigurationFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionColumnConfigurationFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None,
                 number_format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None,
                 string_format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None):
        if date_time_format_configuration is not None:
            pulumi.set(__self__, "date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            pulumi.set(__self__, "number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            pulumi.set(__self__, "string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "date_time_format_configuration")

    @date_time_format_configuration.setter
    def date_time_format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "date_time_format_configuration", value)

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "number_format_configuration")

    @number_format_configuration.setter
    def number_format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "number_format_configuration", value)

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "string_format_configuration")

    @string_format_configuration.setter
    def string_format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "string_format_configuration", value)


if not MYPY:
    class AnalysisDefinitionDataSetIdentifiersDeclarationArgsDict(TypedDict):
        data_set_arn: NotRequired[pulumi.Input[str]]
        """
        Dataset Amazon Resource Name (ARN).
        """
        identifier: NotRequired[pulumi.Input[str]]
elif False:
    AnalysisDefinitionDataSetIdentifiersDeclarationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionDataSetIdentifiersDeclarationArgs:
    def __init__(__self__, *,
                 data_set_arn: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_set_arn: Dataset Amazon Resource Name (ARN).
        """
        if data_set_arn is not None:
            pulumi.set(__self__, "data_set_arn", data_set_arn)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Dataset Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)


if not MYPY:
    class AnalysisDefinitionFilterGroupArgsDict(TypedDict):
        cross_dataset: pulumi.Input[str]
        filter_group_id: pulumi.Input[str]
        filters: pulumi.Input[Sequence[pulumi.Input['FiltersArgsDict']]]
        scope_configuration: pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationArgsDict']
        status: NotRequired[pulumi.Input[str]]
        """
        The analysis creation status.
        """
elif False:
    AnalysisDefinitionFilterGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionFilterGroupArgs:
    def __init__(__self__, *,
                 cross_dataset: pulumi.Input[str],
                 filter_group_id: pulumi.Input[str],
                 filters: pulumi.Input[Sequence[pulumi.Input['FiltersArgs']]],
                 scope_configuration: pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationArgs'],
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: The analysis creation status.
        """
        pulumi.set(__self__, "cross_dataset", cross_dataset)
        pulumi.set(__self__, "filter_group_id", filter_group_id)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "scope_configuration", scope_configuration)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="crossDataset")
    def cross_dataset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cross_dataset")

    @cross_dataset.setter
    def cross_dataset(self, value: pulumi.Input[str]):
        pulumi.set(self, "cross_dataset", value)

    @property
    @pulumi.getter(name="filterGroupId")
    def filter_group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_group_id")

    @filter_group_id.setter
    def filter_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_group_id", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['FiltersArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['FiltersArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="scopeConfiguration")
    def scope_configuration(self) -> pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationArgs']:
        return pulumi.get(self, "scope_configuration")

    @scope_configuration.setter
    def scope_configuration(self, value: pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationArgs']):
        pulumi.set(self, "scope_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The analysis creation status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class AnalysisDefinitionFilterGroupScopeConfigurationArgsDict(TypedDict):
        selected_sheets: NotRequired[pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict']]
elif False:
    AnalysisDefinitionFilterGroupScopeConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionFilterGroupScopeConfigurationArgs:
    def __init__(__self__, *,
                 selected_sheets: Optional[pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs']] = None):
        if selected_sheets is not None:
            pulumi.set(__self__, "selected_sheets", selected_sheets)

    @property
    @pulumi.getter(name="selectedSheets")
    def selected_sheets(self) -> Optional[pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs']]:
        return pulumi.get(self, "selected_sheets")

    @selected_sheets.setter
    def selected_sheets(self, value: Optional[pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs']]):
        pulumi.set(self, "selected_sheets", value)


if not MYPY:
    class AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict(TypedDict):
        sheet_visual_scoping_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict']]]]
elif False:
    AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs:
    def __init__(__self__, *,
                 sheet_visual_scoping_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs']]]] = None):
        if sheet_visual_scoping_configurations is not None:
            pulumi.set(__self__, "sheet_visual_scoping_configurations", sheet_visual_scoping_configurations)

    @property
    @pulumi.getter(name="sheetVisualScopingConfigurations")
    def sheet_visual_scoping_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs']]]]:
        return pulumi.get(self, "sheet_visual_scoping_configurations")

    @sheet_visual_scoping_configurations.setter
    def sheet_visual_scoping_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs']]]]):
        pulumi.set(self, "sheet_visual_scoping_configurations", value)


if not MYPY:
    class AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict(TypedDict):
        scope: pulumi.Input[str]
        sheet_id: pulumi.Input[str]
        visual_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs:
    def __init__(__self__, *,
                 scope: pulumi.Input[str],
                 sheet_id: pulumi.Input[str],
                 visual_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sheet_id", sheet_id)
        if visual_ids is not None:
            pulumi.set(__self__, "visual_ids", visual_ids)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="visualIds")
    def visual_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "visual_ids")

    @visual_ids.setter
    def visual_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "visual_ids", value)


if not MYPY:
    class AnalysisDefinitionParameterDeclarationArgsDict(TypedDict):
        date_time_parameter_declaration: NotRequired[pulumi.Input['DateTimeParameterDeclarationArgsDict']]
        decimal_parameter_declaration: NotRequired[pulumi.Input['DecimalParameterDeclarationArgsDict']]
        integer_parameter_declaration: NotRequired[pulumi.Input['IntegerParameterDeclarationArgsDict']]
        string_parameter_declaration: NotRequired[pulumi.Input['StringParameterDeclarationArgsDict']]
elif False:
    AnalysisDefinitionParameterDeclarationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionParameterDeclarationArgs:
    def __init__(__self__, *,
                 date_time_parameter_declaration: Optional[pulumi.Input['DateTimeParameterDeclarationArgs']] = None,
                 decimal_parameter_declaration: Optional[pulumi.Input['DecimalParameterDeclarationArgs']] = None,
                 integer_parameter_declaration: Optional[pulumi.Input['IntegerParameterDeclarationArgs']] = None,
                 string_parameter_declaration: Optional[pulumi.Input['StringParameterDeclarationArgs']] = None):
        if date_time_parameter_declaration is not None:
            pulumi.set(__self__, "date_time_parameter_declaration", date_time_parameter_declaration)
        if decimal_parameter_declaration is not None:
            pulumi.set(__self__, "decimal_parameter_declaration", decimal_parameter_declaration)
        if integer_parameter_declaration is not None:
            pulumi.set(__self__, "integer_parameter_declaration", integer_parameter_declaration)
        if string_parameter_declaration is not None:
            pulumi.set(__self__, "string_parameter_declaration", string_parameter_declaration)

    @property
    @pulumi.getter(name="dateTimeParameterDeclaration")
    def date_time_parameter_declaration(self) -> Optional[pulumi.Input['DateTimeParameterDeclarationArgs']]:
        return pulumi.get(self, "date_time_parameter_declaration")

    @date_time_parameter_declaration.setter
    def date_time_parameter_declaration(self, value: Optional[pulumi.Input['DateTimeParameterDeclarationArgs']]):
        pulumi.set(self, "date_time_parameter_declaration", value)

    @property
    @pulumi.getter(name="decimalParameterDeclaration")
    def decimal_parameter_declaration(self) -> Optional[pulumi.Input['DecimalParameterDeclarationArgs']]:
        return pulumi.get(self, "decimal_parameter_declaration")

    @decimal_parameter_declaration.setter
    def decimal_parameter_declaration(self, value: Optional[pulumi.Input['DecimalParameterDeclarationArgs']]):
        pulumi.set(self, "decimal_parameter_declaration", value)

    @property
    @pulumi.getter(name="integerParameterDeclaration")
    def integer_parameter_declaration(self) -> Optional[pulumi.Input['IntegerParameterDeclarationArgs']]:
        return pulumi.get(self, "integer_parameter_declaration")

    @integer_parameter_declaration.setter
    def integer_parameter_declaration(self, value: Optional[pulumi.Input['IntegerParameterDeclarationArgs']]):
        pulumi.set(self, "integer_parameter_declaration", value)

    @property
    @pulumi.getter(name="stringParameterDeclaration")
    def string_parameter_declaration(self) -> Optional[pulumi.Input['StringParameterDeclarationArgs']]:
        return pulumi.get(self, "string_parameter_declaration")

    @string_parameter_declaration.setter
    def string_parameter_declaration(self, value: Optional[pulumi.Input['StringParameterDeclarationArgs']]):
        pulumi.set(self, "string_parameter_declaration", value)


if not MYPY:
    class AnalysisDefinitionSheetArgsDict(TypedDict):
        sheet_id: pulumi.Input[str]
        content_type: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        filter_controls: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgsDict']]]]
        layouts: NotRequired[pulumi.Input['LayoutsArgsDict']]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        parameter_controls: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetParameterControlArgsDict']]]]
        sheet_control_layouts: NotRequired[pulumi.Input['AnalysisDefinitionSheetSheetControlLayoutsArgsDict']]
        text_boxes: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetTextBoxArgsDict']]]]
        title: NotRequired[pulumi.Input[str]]
        visuals: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsArgsDict']]]]
elif False:
    AnalysisDefinitionSheetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetArgs:
    def __init__(__self__, *,
                 sheet_id: pulumi.Input[str],
                 content_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgs']]]] = None,
                 layouts: Optional[pulumi.Input['LayoutsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetParameterControlArgs']]]] = None,
                 sheet_control_layouts: Optional[pulumi.Input['AnalysisDefinitionSheetSheetControlLayoutsArgs']] = None,
                 text_boxes: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetTextBoxArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visuals: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "sheet_id", sheet_id)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter_controls is not None:
            pulumi.set(__self__, "filter_controls", filter_controls)
        if layouts is not None:
            pulumi.set(__self__, "layouts", layouts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_controls is not None:
            pulumi.set(__self__, "parameter_controls", parameter_controls)
        if sheet_control_layouts is not None:
            pulumi.set(__self__, "sheet_control_layouts", sheet_control_layouts)
        if text_boxes is not None:
            pulumi.set(__self__, "text_boxes", text_boxes)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visuals is not None:
            pulumi.set(__self__, "visuals", visuals)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="filterControls")
    def filter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgs']]]]:
        return pulumi.get(self, "filter_controls")

    @filter_controls.setter
    def filter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgs']]]]):
        pulumi.set(self, "filter_controls", value)

    @property
    @pulumi.getter
    def layouts(self) -> Optional[pulumi.Input['LayoutsArgs']]:
        return pulumi.get(self, "layouts")

    @layouts.setter
    def layouts(self, value: Optional[pulumi.Input['LayoutsArgs']]):
        pulumi.set(self, "layouts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterControls")
    def parameter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetParameterControlArgs']]]]:
        return pulumi.get(self, "parameter_controls")

    @parameter_controls.setter
    def parameter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetParameterControlArgs']]]]):
        pulumi.set(self, "parameter_controls", value)

    @property
    @pulumi.getter(name="sheetControlLayouts")
    def sheet_control_layouts(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetSheetControlLayoutsArgs']]:
        return pulumi.get(self, "sheet_control_layouts")

    @sheet_control_layouts.setter
    def sheet_control_layouts(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetSheetControlLayoutsArgs']]):
        pulumi.set(self, "sheet_control_layouts", value)

    @property
    @pulumi.getter(name="textBoxes")
    def text_boxes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetTextBoxArgs']]]]:
        return pulumi.get(self, "text_boxes")

    @text_boxes.setter
    def text_boxes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDefinitionSheetTextBoxArgs']]]]):
        pulumi.set(self, "text_boxes", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visuals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsArgs']]]]:
        return pulumi.get(self, "visuals")

    @visuals.setter
    def visuals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsArgs']]]]):
        pulumi.set(self, "visuals", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlArgsDict(TypedDict):
        date_time_picker: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlDateTimePickerArgsDict']]
        dropdown: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownArgsDict']]
        list: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlListArgsDict']]
        slider: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlSliderArgsDict']]
        text_area: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlTextAreaArgsDict']]
        text_field: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlTextFieldArgsDict']]
elif False:
    AnalysisDefinitionSheetParameterControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlArgs:
    def __init__(__self__, *,
                 date_time_picker: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDateTimePickerArgs']] = None,
                 dropdown: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownArgs']] = None,
                 list: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlListArgs']] = None,
                 slider: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlSliderArgs']] = None,
                 text_area: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlTextAreaArgs']] = None,
                 text_field: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlTextFieldArgs']] = None):
        if date_time_picker is not None:
            pulumi.set(__self__, "date_time_picker", date_time_picker)
        if dropdown is not None:
            pulumi.set(__self__, "dropdown", dropdown)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if slider is not None:
            pulumi.set(__self__, "slider", slider)
        if text_area is not None:
            pulumi.set(__self__, "text_area", text_area)
        if text_field is not None:
            pulumi.set(__self__, "text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDateTimePickerArgs']]:
        return pulumi.get(self, "date_time_picker")

    @date_time_picker.setter
    def date_time_picker(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDateTimePickerArgs']]):
        pulumi.set(self, "date_time_picker", value)

    @property
    @pulumi.getter
    def dropdown(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownArgs']]:
        return pulumi.get(self, "dropdown")

    @dropdown.setter
    def dropdown(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownArgs']]):
        pulumi.set(self, "dropdown", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlListArgs']]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlListArgs']]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter
    def slider(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlSliderArgs']]:
        return pulumi.get(self, "slider")

    @slider.setter
    def slider(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlSliderArgs']]):
        pulumi.set(self, "slider", value)

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlTextAreaArgs']]:
        return pulumi.get(self, "text_area")

    @text_area.setter
    def text_area(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlTextAreaArgs']]):
        pulumi.set(self, "text_area", value)

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlTextFieldArgs']]:
        return pulumi.get(self, "text_field")

    @text_field.setter
    def text_field(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlTextFieldArgs']]):
        pulumi.set(self, "text_field", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlDateTimePickerArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict']]
elif False:
    AnalysisDefinitionSheetParameterControlDateTimePickerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlDateTimePickerArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict(TypedDict):
        date_time_format: NotRequired[pulumi.Input[str]]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlDropdownArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        cascading_control_configuration: NotRequired[pulumi.Input['CascadingControlConfigurationArgsDict']]
        display_options: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict']]
        selectable_values: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownSelectableValuesArgsDict']]
        type: NotRequired[pulumi.Input[str]]
elif False:
    AnalysisDefinitionSheetParameterControlDropdownArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlDropdownArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['CascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['CascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['CascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlDropdownSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict(TypedDict):
        select_all_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    AnalysisDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlDropdownDisplayOptionsArgs:
    def __init__(__self__, *,
                 select_all_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlDropdownSelectableValuesArgsDict(TypedDict):
        link_to_data_set_column: NotRequired[pulumi.Input['ColumnArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    AnalysisDefinitionSheetParameterControlDropdownSelectableValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlDropdownSelectableValuesArgs:
    def __init__(__self__, *,
                 link_to_data_set_column: Optional[pulumi.Input['ColumnArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional[pulumi.Input['ColumnArgs']]:
        return pulumi.get(self, "link_to_data_set_column")

    @link_to_data_set_column.setter
    def link_to_data_set_column(self, value: Optional[pulumi.Input['ColumnArgs']]):
        pulumi.set(self, "link_to_data_set_column", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlListArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        cascading_control_configuration: NotRequired[pulumi.Input['CascadingControlConfigurationArgsDict']]
        display_options: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlListDisplayOptionsArgsDict']]
        selectable_values: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlListSelectableValuesArgsDict']]
        type: NotRequired[pulumi.Input[str]]
elif False:
    AnalysisDefinitionSheetParameterControlListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlListArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['CascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlListDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlListSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['CascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['CascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlListDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlListDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlListSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlListSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlListDisplayOptionsArgsDict(TypedDict):
        search_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        select_all_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    AnalysisDefinitionSheetParameterControlListDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlListDisplayOptionsArgs:
    def __init__(__self__, *,
                 search_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 select_all_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if search_options is not None:
            pulumi.set(__self__, "search_options", search_options)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "search_options")

    @search_options.setter
    def search_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "search_options", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlListSelectableValuesArgsDict(TypedDict):
        link_to_data_set_column: NotRequired[pulumi.Input['ColumnArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    AnalysisDefinitionSheetParameterControlListSelectableValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlListSelectableValuesArgs:
    def __init__(__self__, *,
                 link_to_data_set_column: Optional[pulumi.Input['ColumnArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional[pulumi.Input['ColumnArgs']]:
        return pulumi.get(self, "link_to_data_set_column")

    @link_to_data_set_column.setter
    def link_to_data_set_column(self, value: Optional[pulumi.Input['ColumnArgs']]):
        pulumi.set(self, "link_to_data_set_column", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlSliderArgsDict(TypedDict):
        maximum_value: pulumi.Input[float]
        minimum_value: pulumi.Input[float]
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        step_size: pulumi.Input[float]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['AnalysisDefinitionSheetParameterControlSliderDisplayOptionsArgsDict']]
elif False:
    AnalysisDefinitionSheetParameterControlSliderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlSliderArgs:
    def __init__(__self__, *,
                 maximum_value: pulumi.Input[float],
                 minimum_value: pulumi.Input[float],
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 step_size: pulumi.Input[float],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlSliderDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "maximum_value", maximum_value)
        pulumi.set(__self__, "minimum_value", minimum_value)
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "step_size", step_size)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "maximum_value")

    @maximum_value.setter
    def maximum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_value", value)

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum_value")

    @minimum_value.setter
    def minimum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_value", value)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "step_size", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlSliderDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisDefinitionSheetParameterControlSliderDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlSliderDisplayOptionsArgsDict(TypedDict):
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    AnalysisDefinitionSheetParameterControlSliderDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlSliderDisplayOptionsArgs:
    def __init__(__self__, *,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlTextAreaArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        delimiter: NotRequired[pulumi.Input[str]]
        display_options: NotRequired[pulumi.Input['TextAreaControlDisplayOptionsArgsDict']]
elif False:
    AnalysisDefinitionSheetParameterControlTextAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlTextAreaArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 display_options: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class AnalysisDefinitionSheetParameterControlTextFieldArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['TextAreaControlDisplayOptionsArgsDict']]
elif False:
    AnalysisDefinitionSheetParameterControlTextFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetParameterControlTextFieldArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class AnalysisDefinitionSheetSheetControlLayoutsArgsDict(TypedDict):
        configuration: pulumi.Input['AnalysisDefinitionSheetSheetControlLayoutsConfigurationArgsDict']
elif False:
    AnalysisDefinitionSheetSheetControlLayoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetSheetControlLayoutsArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['AnalysisDefinitionSheetSheetControlLayoutsConfigurationArgs']):
        pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['AnalysisDefinitionSheetSheetControlLayoutsConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['AnalysisDefinitionSheetSheetControlLayoutsConfigurationArgs']):
        pulumi.set(self, "configuration", value)


if not MYPY:
    class AnalysisDefinitionSheetSheetControlLayoutsConfigurationArgsDict(TypedDict):
        grid_layout: NotRequired[pulumi.Input['GridLayoutArgsDict']]
elif False:
    AnalysisDefinitionSheetSheetControlLayoutsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetSheetControlLayoutsConfigurationArgs:
    def __init__(__self__, *,
                 grid_layout: Optional[pulumi.Input['GridLayoutArgs']] = None):
        if grid_layout is not None:
            pulumi.set(__self__, "grid_layout", grid_layout)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional[pulumi.Input['GridLayoutArgs']]:
        return pulumi.get(self, "grid_layout")

    @grid_layout.setter
    def grid_layout(self, value: Optional[pulumi.Input['GridLayoutArgs']]):
        pulumi.set(self, "grid_layout", value)


if not MYPY:
    class AnalysisDefinitionSheetTextBoxArgsDict(TypedDict):
        sheet_text_box_id: pulumi.Input[str]
        content: NotRequired[pulumi.Input[str]]
elif False:
    AnalysisDefinitionSheetTextBoxArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisDefinitionSheetTextBoxArgs:
    def __init__(__self__, *,
                 sheet_text_box_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sheet_text_box_id", sheet_text_box_id)
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter(name="sheetTextBoxId")
    def sheet_text_box_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_text_box_id")

    @sheet_text_box_id.setter
    def sheet_text_box_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_text_box_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)


if not MYPY:
    class AnalysisParametersArgsDict(TypedDict):
        date_time_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersDateTimeParameterArgsDict']]]]
        """
        A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
        """
        decimal_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersDecimalParameterArgsDict']]]]
        """
        A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
        """
        integer_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersIntegerParameterArgsDict']]]]
        """
        A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
        """
        string_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersStringParameterArgsDict']]]]
        """
        A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
        """
elif False:
    AnalysisParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisParametersArgs:
    def __init__(__self__, *,
                 date_time_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersDateTimeParameterArgs']]]] = None,
                 decimal_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersDecimalParameterArgs']]]] = None,
                 integer_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersIntegerParameterArgs']]]] = None,
                 string_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersStringParameterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisParametersDateTimeParameterArgs']]] date_time_parameters: A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisParametersDecimalParameterArgs']]] decimal_parameters: A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisParametersIntegerParameterArgs']]] integer_parameters: A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisParametersStringParameterArgs']]] string_parameters: A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
        """
        if date_time_parameters is not None:
            pulumi.set(__self__, "date_time_parameters", date_time_parameters)
        if decimal_parameters is not None:
            pulumi.set(__self__, "decimal_parameters", decimal_parameters)
        if integer_parameters is not None:
            pulumi.set(__self__, "integer_parameters", integer_parameters)
        if string_parameters is not None:
            pulumi.set(__self__, "string_parameters", string_parameters)

    @property
    @pulumi.getter(name="dateTimeParameters")
    def date_time_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersDateTimeParameterArgs']]]]:
        """
        A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
        """
        return pulumi.get(self, "date_time_parameters")

    @date_time_parameters.setter
    def date_time_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersDateTimeParameterArgs']]]]):
        pulumi.set(self, "date_time_parameters", value)

    @property
    @pulumi.getter(name="decimalParameters")
    def decimal_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersDecimalParameterArgs']]]]:
        """
        A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
        """
        return pulumi.get(self, "decimal_parameters")

    @decimal_parameters.setter
    def decimal_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersDecimalParameterArgs']]]]):
        pulumi.set(self, "decimal_parameters", value)

    @property
    @pulumi.getter(name="integerParameters")
    def integer_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersIntegerParameterArgs']]]]:
        """
        A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
        """
        return pulumi.get(self, "integer_parameters")

    @integer_parameters.setter
    def integer_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersIntegerParameterArgs']]]]):
        pulumi.set(self, "integer_parameters", value)

    @property
    @pulumi.getter(name="stringParameters")
    def string_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersStringParameterArgs']]]]:
        """
        A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
        """
        return pulumi.get(self, "string_parameters")

    @string_parameters.setter
    def string_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParametersStringParameterArgs']]]]):
        pulumi.set(self, "string_parameters", value)


if not MYPY:
    class AnalysisParametersDateTimeParameterArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    AnalysisParametersDateTimeParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisParametersDateTimeParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AnalysisParametersDecimalParameterArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        values: pulumi.Input[Sequence[pulumi.Input[float]]]
elif False:
    AnalysisParametersDecimalParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisParametersDecimalParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[float]]]):
        """
        :param pulumi.Input[str] name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AnalysisParametersIntegerParameterArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        values: pulumi.Input[Sequence[pulumi.Input[int]]]
elif False:
    AnalysisParametersIntegerParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisParametersIntegerParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[str] name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AnalysisParametersStringParameterArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    AnalysisParametersStringParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisParametersStringParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AnalysisPermissionArgsDict(TypedDict):
        actions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        principal: pulumi.Input[str]
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
elif False:
    AnalysisPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisPermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: List of IAM actions to grant or revoke permissions on.
        :param pulumi.Input[str] principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)


if not MYPY:
    class AnalysisSourceEntityArgsDict(TypedDict):
        source_template: NotRequired[pulumi.Input['AnalysisSourceEntitySourceTemplateArgsDict']]
        """
        The source template. See source_template.
        """
elif False:
    AnalysisSourceEntityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisSourceEntityArgs:
    def __init__(__self__, *,
                 source_template: Optional[pulumi.Input['AnalysisSourceEntitySourceTemplateArgs']] = None):
        """
        :param pulumi.Input['AnalysisSourceEntitySourceTemplateArgs'] source_template: The source template. See source_template.
        """
        if source_template is not None:
            pulumi.set(__self__, "source_template", source_template)

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional[pulumi.Input['AnalysisSourceEntitySourceTemplateArgs']]:
        """
        The source template. See source_template.
        """
        return pulumi.get(self, "source_template")

    @source_template.setter
    def source_template(self, value: Optional[pulumi.Input['AnalysisSourceEntitySourceTemplateArgs']]):
        pulumi.set(self, "source_template", value)


if not MYPY:
    class AnalysisSourceEntitySourceTemplateArgsDict(TypedDict):
        arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        data_set_references: pulumi.Input[Sequence[pulumi.Input['AnalysisSourceEntitySourceTemplateDataSetReferenceArgsDict']]]
        """
        List of dataset references. See data_set_references.
        """
elif False:
    AnalysisSourceEntitySourceTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisSourceEntitySourceTemplateArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 data_set_references: pulumi.Input[Sequence[pulumi.Input['AnalysisSourceEntitySourceTemplateDataSetReferenceArgs']]]):
        """
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the resource.
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisSourceEntitySourceTemplateDataSetReferenceArgs']]] data_set_references: List of dataset references. See data_set_references.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "data_set_references", data_set_references)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="dataSetReferences")
    def data_set_references(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisSourceEntitySourceTemplateDataSetReferenceArgs']]]:
        """
        List of dataset references. See data_set_references.
        """
        return pulumi.get(self, "data_set_references")

    @data_set_references.setter
    def data_set_references(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisSourceEntitySourceTemplateDataSetReferenceArgs']]]):
        pulumi.set(self, "data_set_references", value)


if not MYPY:
    class AnalysisSourceEntitySourceTemplateDataSetReferenceArgsDict(TypedDict):
        data_set_arn: pulumi.Input[str]
        """
        Dataset Amazon Resource Name (ARN).
        """
        data_set_placeholder: pulumi.Input[str]
        """
        Dataset placeholder.
        """
elif False:
    AnalysisSourceEntitySourceTemplateDataSetReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalysisSourceEntitySourceTemplateDataSetReferenceArgs:
    def __init__(__self__, *,
                 data_set_arn: pulumi.Input[str],
                 data_set_placeholder: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data_set_arn: Dataset Amazon Resource Name (ARN).
        :param pulumi.Input[str] data_set_placeholder: Dataset placeholder.
        """
        pulumi.set(__self__, "data_set_arn", data_set_arn)
        pulumi.set(__self__, "data_set_placeholder", data_set_placeholder)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> pulumi.Input[str]:
        """
        Dataset Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter(name="dataSetPlaceholder")
    def data_set_placeholder(self) -> pulumi.Input[str]:
        """
        Dataset placeholder.
        """
        return pulumi.get(self, "data_set_placeholder")

    @data_set_placeholder.setter
    def data_set_placeholder(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_placeholder", value)


if not MYPY:
    class AxisDisplayOptionsArgsDict(TypedDict):
        axis_line_visibility: NotRequired[pulumi.Input[str]]
        axis_offset: NotRequired[pulumi.Input[str]]
        data_options: NotRequired[pulumi.Input['AxisDisplayOptionsDataOptionsArgsDict']]
        grid_line_visibility: NotRequired[pulumi.Input[str]]
        scrollbar_options: NotRequired[pulumi.Input['AxisDisplayOptionsScrollbarOptionsArgsDict']]
        tick_label_options: NotRequired[pulumi.Input['AxisDisplayOptionsTickLabelOptionsArgsDict']]
elif False:
    AxisDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsArgs:
    def __init__(__self__, *,
                 axis_line_visibility: Optional[pulumi.Input[str]] = None,
                 axis_offset: Optional[pulumi.Input[str]] = None,
                 data_options: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsArgs']] = None,
                 grid_line_visibility: Optional[pulumi.Input[str]] = None,
                 scrollbar_options: Optional[pulumi.Input['AxisDisplayOptionsScrollbarOptionsArgs']] = None,
                 tick_label_options: Optional[pulumi.Input['AxisDisplayOptionsTickLabelOptionsArgs']] = None):
        if axis_line_visibility is not None:
            pulumi.set(__self__, "axis_line_visibility", axis_line_visibility)
        if axis_offset is not None:
            pulumi.set(__self__, "axis_offset", axis_offset)
        if data_options is not None:
            pulumi.set(__self__, "data_options", data_options)
        if grid_line_visibility is not None:
            pulumi.set(__self__, "grid_line_visibility", grid_line_visibility)
        if scrollbar_options is not None:
            pulumi.set(__self__, "scrollbar_options", scrollbar_options)
        if tick_label_options is not None:
            pulumi.set(__self__, "tick_label_options", tick_label_options)

    @property
    @pulumi.getter(name="axisLineVisibility")
    def axis_line_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "axis_line_visibility")

    @axis_line_visibility.setter
    def axis_line_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "axis_line_visibility", value)

    @property
    @pulumi.getter(name="axisOffset")
    def axis_offset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "axis_offset")

    @axis_offset.setter
    def axis_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "axis_offset", value)

    @property
    @pulumi.getter(name="dataOptions")
    def data_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsDataOptionsArgs']]:
        return pulumi.get(self, "data_options")

    @data_options.setter
    def data_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsArgs']]):
        pulumi.set(self, "data_options", value)

    @property
    @pulumi.getter(name="gridLineVisibility")
    def grid_line_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grid_line_visibility")

    @grid_line_visibility.setter
    def grid_line_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grid_line_visibility", value)

    @property
    @pulumi.getter(name="scrollbarOptions")
    def scrollbar_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsScrollbarOptionsArgs']]:
        return pulumi.get(self, "scrollbar_options")

    @scrollbar_options.setter
    def scrollbar_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsScrollbarOptionsArgs']]):
        pulumi.set(self, "scrollbar_options", value)

    @property
    @pulumi.getter(name="tickLabelOptions")
    def tick_label_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsTickLabelOptionsArgs']]:
        return pulumi.get(self, "tick_label_options")

    @tick_label_options.setter
    def tick_label_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsTickLabelOptionsArgs']]):
        pulumi.set(self, "tick_label_options", value)


if not MYPY:
    class AxisDisplayOptionsDataOptionsArgsDict(TypedDict):
        date_axis_options: NotRequired[pulumi.Input['AxisDisplayOptionsDataOptionsDateAxisOptionsArgsDict']]
        numeric_axis_options: NotRequired[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsArgsDict']]
elif False:
    AxisDisplayOptionsDataOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsDataOptionsArgs:
    def __init__(__self__, *,
                 date_axis_options: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsDateAxisOptionsArgs']] = None,
                 numeric_axis_options: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsArgs']] = None):
        if date_axis_options is not None:
            pulumi.set(__self__, "date_axis_options", date_axis_options)
        if numeric_axis_options is not None:
            pulumi.set(__self__, "numeric_axis_options", numeric_axis_options)

    @property
    @pulumi.getter(name="dateAxisOptions")
    def date_axis_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsDataOptionsDateAxisOptionsArgs']]:
        return pulumi.get(self, "date_axis_options")

    @date_axis_options.setter
    def date_axis_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsDateAxisOptionsArgs']]):
        pulumi.set(self, "date_axis_options", value)

    @property
    @pulumi.getter(name="numericAxisOptions")
    def numeric_axis_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsArgs']]:
        return pulumi.get(self, "numeric_axis_options")

    @numeric_axis_options.setter
    def numeric_axis_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsArgs']]):
        pulumi.set(self, "numeric_axis_options", value)


if not MYPY:
    class AxisDisplayOptionsDataOptionsDateAxisOptionsArgsDict(TypedDict):
        missing_date_visibility: NotRequired[pulumi.Input[str]]
elif False:
    AxisDisplayOptionsDataOptionsDateAxisOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsDataOptionsDateAxisOptionsArgs:
    def __init__(__self__, *,
                 missing_date_visibility: Optional[pulumi.Input[str]] = None):
        if missing_date_visibility is not None:
            pulumi.set(__self__, "missing_date_visibility", missing_date_visibility)

    @property
    @pulumi.getter(name="missingDateVisibility")
    def missing_date_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "missing_date_visibility")

    @missing_date_visibility.setter
    def missing_date_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "missing_date_visibility", value)


if not MYPY:
    class AxisDisplayOptionsDataOptionsNumericAxisOptionsArgsDict(TypedDict):
        range: NotRequired[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeArgsDict']]
        scale: NotRequired[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleArgsDict']]
elif False:
    AxisDisplayOptionsDataOptionsNumericAxisOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeArgs']] = None,
                 scale: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleArgs']] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleArgs']]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleArgs']]):
        pulumi.set(self, "scale", value)


if not MYPY:
    class AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeArgsDict(TypedDict):
        data_driven: NotRequired[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDrivenArgsDict']]
        min_max: NotRequired[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMaxArgsDict']]
elif False:
    AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeArgs:
    def __init__(__self__, *,
                 data_driven: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDrivenArgs']] = None,
                 min_max: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMaxArgs']] = None):
        if data_driven is not None:
            pulumi.set(__self__, "data_driven", data_driven)
        if min_max is not None:
            pulumi.set(__self__, "min_max", min_max)

    @property
    @pulumi.getter(name="dataDriven")
    def data_driven(self) -> Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDrivenArgs']]:
        return pulumi.get(self, "data_driven")

    @data_driven.setter
    def data_driven(self, value: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDrivenArgs']]):
        pulumi.set(self, "data_driven", value)

    @property
    @pulumi.getter(name="minMax")
    def min_max(self) -> Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMaxArgs']]:
        return pulumi.get(self, "min_max")

    @min_max.setter
    def min_max(self, value: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMaxArgs']]):
        pulumi.set(self, "min_max", value)


if not MYPY:
    class AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDrivenArgsDict(TypedDict):
        pass
elif False:
    AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDrivenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDrivenArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMaxArgsDict(TypedDict):
        maximum: NotRequired[pulumi.Input[float]]
        minimum: NotRequired[pulumi.Input[float]]
elif False:
    AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMaxArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMaxArgs:
    def __init__(__self__, *,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None):
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)


if not MYPY:
    class AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleArgsDict(TypedDict):
        linear: NotRequired[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinearArgsDict']]
        logarithmic: NotRequired[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmicArgsDict']]
elif False:
    AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleArgs:
    def __init__(__self__, *,
                 linear: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinearArgs']] = None,
                 logarithmic: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmicArgs']] = None):
        if linear is not None:
            pulumi.set(__self__, "linear", linear)
        if logarithmic is not None:
            pulumi.set(__self__, "logarithmic", logarithmic)

    @property
    @pulumi.getter
    def linear(self) -> Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinearArgs']]:
        return pulumi.get(self, "linear")

    @linear.setter
    def linear(self, value: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinearArgs']]):
        pulumi.set(self, "linear", value)

    @property
    @pulumi.getter
    def logarithmic(self) -> Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmicArgs']]:
        return pulumi.get(self, "logarithmic")

    @logarithmic.setter
    def logarithmic(self, value: Optional[pulumi.Input['AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmicArgs']]):
        pulumi.set(self, "logarithmic", value)


if not MYPY:
    class AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinearArgsDict(TypedDict):
        step_count: NotRequired[pulumi.Input[int]]
        step_size: NotRequired[pulumi.Input[float]]
elif False:
    AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinearArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinearArgs:
    def __init__(__self__, *,
                 step_count: Optional[pulumi.Input[int]] = None,
                 step_size: Optional[pulumi.Input[float]] = None):
        if step_count is not None:
            pulumi.set(__self__, "step_count", step_count)
        if step_size is not None:
            pulumi.set(__self__, "step_size", step_size)

    @property
    @pulumi.getter(name="stepCount")
    def step_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "step_count")

    @step_count.setter
    def step_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "step_count", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "step_size", value)


if not MYPY:
    class AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmicArgsDict(TypedDict):
        base: NotRequired[pulumi.Input[float]]
elif False:
    AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmicArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmicArgs:
    def __init__(__self__, *,
                 base: Optional[pulumi.Input[float]] = None):
        if base is not None:
            pulumi.set(__self__, "base", base)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "base", value)


if not MYPY:
    class AxisDisplayOptionsScrollbarOptionsArgsDict(TypedDict):
        visibility: NotRequired[pulumi.Input[str]]
        visible_range: NotRequired[pulumi.Input['AxisDisplayOptionsScrollbarOptionsVisibleRangeArgsDict']]
elif False:
    AxisDisplayOptionsScrollbarOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsScrollbarOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input[str]] = None,
                 visible_range: Optional[pulumi.Input['AxisDisplayOptionsScrollbarOptionsVisibleRangeArgs']] = None):
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if visible_range is not None:
            pulumi.set(__self__, "visible_range", visible_range)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter(name="visibleRange")
    def visible_range(self) -> Optional[pulumi.Input['AxisDisplayOptionsScrollbarOptionsVisibleRangeArgs']]:
        return pulumi.get(self, "visible_range")

    @visible_range.setter
    def visible_range(self, value: Optional[pulumi.Input['AxisDisplayOptionsScrollbarOptionsVisibleRangeArgs']]):
        pulumi.set(self, "visible_range", value)


if not MYPY:
    class AxisDisplayOptionsScrollbarOptionsVisibleRangeArgsDict(TypedDict):
        percent_range: NotRequired[pulumi.Input['AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRangeArgsDict']]
elif False:
    AxisDisplayOptionsScrollbarOptionsVisibleRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsScrollbarOptionsVisibleRangeArgs:
    def __init__(__self__, *,
                 percent_range: Optional[pulumi.Input['AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRangeArgs']] = None):
        if percent_range is not None:
            pulumi.set(__self__, "percent_range", percent_range)

    @property
    @pulumi.getter(name="percentRange")
    def percent_range(self) -> Optional[pulumi.Input['AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRangeArgs']]:
        return pulumi.get(self, "percent_range")

    @percent_range.setter
    def percent_range(self, value: Optional[pulumi.Input['AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRangeArgs']]):
        pulumi.set(self, "percent_range", value)


if not MYPY:
    class AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[float]]
        to: NotRequired[pulumi.Input[float]]
elif False:
    AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[float]] = None,
                 to: Optional[pulumi.Input[float]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class AxisDisplayOptionsTickLabelOptionsArgsDict(TypedDict):
        label_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
        rotation_angle: NotRequired[pulumi.Input[float]]
elif False:
    AxisDisplayOptionsTickLabelOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AxisDisplayOptionsTickLabelOptionsArgs:
    def __init__(__self__, *,
                 label_options: Optional[pulumi.Input['LabelOptionsArgs']] = None,
                 rotation_angle: Optional[pulumi.Input[float]] = None):
        if label_options is not None:
            pulumi.set(__self__, "label_options", label_options)
        if rotation_angle is not None:
            pulumi.set(__self__, "rotation_angle", rotation_angle)

    @property
    @pulumi.getter(name="labelOptions")
    def label_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "label_options")

    @label_options.setter
    def label_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "label_options", value)

    @property
    @pulumi.getter(name="rotationAngle")
    def rotation_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "rotation_angle")

    @rotation_angle.setter
    def rotation_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rotation_angle", value)


if not MYPY:
    class CascadingControlConfigurationArgsDict(TypedDict):
        source_controls: NotRequired[pulumi.Input[Sequence[pulumi.Input['CascadingControlConfigurationSourceControlArgsDict']]]]
elif False:
    CascadingControlConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CascadingControlConfigurationArgs:
    def __init__(__self__, *,
                 source_controls: Optional[pulumi.Input[Sequence[pulumi.Input['CascadingControlConfigurationSourceControlArgs']]]] = None):
        if source_controls is not None:
            pulumi.set(__self__, "source_controls", source_controls)

    @property
    @pulumi.getter(name="sourceControls")
    def source_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CascadingControlConfigurationSourceControlArgs']]]]:
        return pulumi.get(self, "source_controls")

    @source_controls.setter
    def source_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CascadingControlConfigurationSourceControlArgs']]]]):
        pulumi.set(self, "source_controls", value)


if not MYPY:
    class CascadingControlConfigurationSourceControlArgsDict(TypedDict):
        column_to_match: pulumi.Input['ColumnArgsDict']
        source_sheet_control_id: NotRequired[pulumi.Input[str]]
elif False:
    CascadingControlConfigurationSourceControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CascadingControlConfigurationSourceControlArgs:
    def __init__(__self__, *,
                 column_to_match: pulumi.Input['ColumnArgs'],
                 source_sheet_control_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column_to_match", column_to_match)
        if source_sheet_control_id is not None:
            pulumi.set(__self__, "source_sheet_control_id", source_sheet_control_id)

    @property
    @pulumi.getter(name="columnToMatch")
    def column_to_match(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column_to_match")

    @column_to_match.setter
    def column_to_match(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column_to_match", value)

    @property
    @pulumi.getter(name="sourceSheetControlId")
    def source_sheet_control_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_sheet_control_id")

    @source_sheet_control_id.setter
    def source_sheet_control_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_sheet_control_id", value)


if not MYPY:
    class CategoryFilterArgsDict(TypedDict):
        category_values: pulumi.Input[Sequence[pulumi.Input[str]]]
        column: pulumi.Input['ColumnArgsDict']
elif False:
    CategoryFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CategoryFilterArgs:
    def __init__(__self__, *,
                 category_values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 column: pulumi.Input['ColumnArgs']):
        pulumi.set(__self__, "category_values", category_values)
        pulumi.set(__self__, "column", column)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)


if not MYPY:
    class CellStyleArgsDict(TypedDict):
        background_color: NotRequired[pulumi.Input[str]]
        border: NotRequired[pulumi.Input['CellStyleBorderArgsDict']]
        font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
        height: NotRequired[pulumi.Input[int]]
        horizontal_text_alignment: NotRequired[pulumi.Input[str]]
        text_wrap: NotRequired[pulumi.Input[str]]
        vertical_text_alignment: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    CellStyleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CellStyleArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 border: Optional[pulumi.Input['CellStyleBorderArgs']] = None,
                 font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 horizontal_text_alignment: Optional[pulumi.Input[str]] = None,
                 text_wrap: Optional[pulumi.Input[str]] = None,
                 vertical_text_alignment: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if border is not None:
            pulumi.set(__self__, "border", border)
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if horizontal_text_alignment is not None:
            pulumi.set(__self__, "horizontal_text_alignment", horizontal_text_alignment)
        if text_wrap is not None:
            pulumi.set(__self__, "text_wrap", text_wrap)
        if vertical_text_alignment is not None:
            pulumi.set(__self__, "vertical_text_alignment", vertical_text_alignment)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter
    def border(self) -> Optional[pulumi.Input['CellStyleBorderArgs']]:
        return pulumi.get(self, "border")

    @border.setter
    def border(self, value: Optional[pulumi.Input['CellStyleBorderArgs']]):
        pulumi.set(self, "border", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="horizontalTextAlignment")
    def horizontal_text_alignment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "horizontal_text_alignment")

    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_text_alignment", value)

    @property
    @pulumi.getter(name="textWrap")
    def text_wrap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_wrap")

    @text_wrap.setter
    def text_wrap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_wrap", value)

    @property
    @pulumi.getter(name="verticalTextAlignment")
    def vertical_text_alignment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vertical_text_alignment")

    @vertical_text_alignment.setter
    def vertical_text_alignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vertical_text_alignment", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class CellStyleBorderArgsDict(TypedDict):
        uniform_border: pulumi.Input['TableBorderOptionsArgsDict']
        side_specific_border: NotRequired[pulumi.Input['CellStyleBorderSideSpecificBorderArgsDict']]
elif False:
    CellStyleBorderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CellStyleBorderArgs:
    def __init__(__self__, *,
                 uniform_border: pulumi.Input['TableBorderOptionsArgs'],
                 side_specific_border: Optional[pulumi.Input['CellStyleBorderSideSpecificBorderArgs']] = None):
        pulumi.set(__self__, "uniform_border", uniform_border)
        if side_specific_border is not None:
            pulumi.set(__self__, "side_specific_border", side_specific_border)

    @property
    @pulumi.getter(name="uniformBorder")
    def uniform_border(self) -> pulumi.Input['TableBorderOptionsArgs']:
        return pulumi.get(self, "uniform_border")

    @uniform_border.setter
    def uniform_border(self, value: pulumi.Input['TableBorderOptionsArgs']):
        pulumi.set(self, "uniform_border", value)

    @property
    @pulumi.getter(name="sideSpecificBorder")
    def side_specific_border(self) -> Optional[pulumi.Input['CellStyleBorderSideSpecificBorderArgs']]:
        return pulumi.get(self, "side_specific_border")

    @side_specific_border.setter
    def side_specific_border(self, value: Optional[pulumi.Input['CellStyleBorderSideSpecificBorderArgs']]):
        pulumi.set(self, "side_specific_border", value)


if not MYPY:
    class CellStyleBorderSideSpecificBorderArgsDict(TypedDict):
        bottom: pulumi.Input['TableBorderOptionsArgsDict']
        inner_horizontal: pulumi.Input['TableBorderOptionsArgsDict']
        inner_vertical: pulumi.Input['TableBorderOptionsArgsDict']
        left: pulumi.Input['TableBorderOptionsArgsDict']
        right: pulumi.Input['TableBorderOptionsArgsDict']
        top: pulumi.Input['TableBorderOptionsArgsDict']
elif False:
    CellStyleBorderSideSpecificBorderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CellStyleBorderSideSpecificBorderArgs:
    def __init__(__self__, *,
                 bottom: pulumi.Input['TableBorderOptionsArgs'],
                 inner_horizontal: pulumi.Input['TableBorderOptionsArgs'],
                 inner_vertical: pulumi.Input['TableBorderOptionsArgs'],
                 left: pulumi.Input['TableBorderOptionsArgs'],
                 right: pulumi.Input['TableBorderOptionsArgs'],
                 top: pulumi.Input['TableBorderOptionsArgs']):
        pulumi.set(__self__, "bottom", bottom)
        pulumi.set(__self__, "inner_horizontal", inner_horizontal)
        pulumi.set(__self__, "inner_vertical", inner_vertical)
        pulumi.set(__self__, "left", left)
        pulumi.set(__self__, "right", right)
        pulumi.set(__self__, "top", top)

    @property
    @pulumi.getter
    def bottom(self) -> pulumi.Input['TableBorderOptionsArgs']:
        return pulumi.get(self, "bottom")

    @bottom.setter
    def bottom(self, value: pulumi.Input['TableBorderOptionsArgs']):
        pulumi.set(self, "bottom", value)

    @property
    @pulumi.getter(name="innerHorizontal")
    def inner_horizontal(self) -> pulumi.Input['TableBorderOptionsArgs']:
        return pulumi.get(self, "inner_horizontal")

    @inner_horizontal.setter
    def inner_horizontal(self, value: pulumi.Input['TableBorderOptionsArgs']):
        pulumi.set(self, "inner_horizontal", value)

    @property
    @pulumi.getter(name="innerVertical")
    def inner_vertical(self) -> pulumi.Input['TableBorderOptionsArgs']:
        return pulumi.get(self, "inner_vertical")

    @inner_vertical.setter
    def inner_vertical(self, value: pulumi.Input['TableBorderOptionsArgs']):
        pulumi.set(self, "inner_vertical", value)

    @property
    @pulumi.getter
    def left(self) -> pulumi.Input['TableBorderOptionsArgs']:
        return pulumi.get(self, "left")

    @left.setter
    def left(self, value: pulumi.Input['TableBorderOptionsArgs']):
        pulumi.set(self, "left", value)

    @property
    @pulumi.getter
    def right(self) -> pulumi.Input['TableBorderOptionsArgs']:
        return pulumi.get(self, "right")

    @right.setter
    def right(self, value: pulumi.Input['TableBorderOptionsArgs']):
        pulumi.set(self, "right", value)

    @property
    @pulumi.getter
    def top(self) -> pulumi.Input['TableBorderOptionsArgs']:
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: pulumi.Input['TableBorderOptionsArgs']):
        pulumi.set(self, "top", value)


if not MYPY:
    class ChartAxisLabelOptionsArgsDict(TypedDict):
        axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsAxisLabelOptionsArgsDict']]
        sort_icon_visibility: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    ChartAxisLabelOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChartAxisLabelOptionsArgs:
    def __init__(__self__, *,
                 axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsAxisLabelOptionsArgs']] = None,
                 sort_icon_visibility: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if axis_label_options is not None:
            pulumi.set(__self__, "axis_label_options", axis_label_options)
        if sort_icon_visibility is not None:
            pulumi.set(__self__, "sort_icon_visibility", sort_icon_visibility)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="axisLabelOptions")
    def axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsAxisLabelOptionsArgs']]:
        return pulumi.get(self, "axis_label_options")

    @axis_label_options.setter
    def axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsAxisLabelOptionsArgs']]):
        pulumi.set(self, "axis_label_options", value)

    @property
    @pulumi.getter(name="sortIconVisibility")
    def sort_icon_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort_icon_visibility")

    @sort_icon_visibility.setter
    def sort_icon_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_icon_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class ChartAxisLabelOptionsAxisLabelOptionsArgsDict(TypedDict):
        apply_to: NotRequired[pulumi.Input['ChartAxisLabelOptionsAxisLabelOptionsApplyToArgsDict']]
        custom_label: NotRequired[pulumi.Input[str]]
        font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
elif False:
    ChartAxisLabelOptionsAxisLabelOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChartAxisLabelOptionsAxisLabelOptionsArgs:
    def __init__(__self__, *,
                 apply_to: Optional[pulumi.Input['ChartAxisLabelOptionsAxisLabelOptionsApplyToArgs']] = None,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None):
        if apply_to is not None:
            pulumi.set(__self__, "apply_to", apply_to)
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)

    @property
    @pulumi.getter(name="applyTo")
    def apply_to(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsAxisLabelOptionsApplyToArgs']]:
        return pulumi.get(self, "apply_to")

    @apply_to.setter
    def apply_to(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsAxisLabelOptionsApplyToArgs']]):
        pulumi.set(self, "apply_to", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)


if not MYPY:
    class ChartAxisLabelOptionsAxisLabelOptionsApplyToArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
elif False:
    ChartAxisLabelOptionsAxisLabelOptionsApplyToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ChartAxisLabelOptionsAxisLabelOptionsApplyToArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str]):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


if not MYPY:
    class ColorScaleArgsDict(TypedDict):
        color_fill_type: pulumi.Input[str]
        colors: pulumi.Input[Sequence[pulumi.Input['ColorScaleColorArgsDict']]]
        null_value_color: NotRequired[pulumi.Input['ColorScaleNullValueColorArgsDict']]
elif False:
    ColorScaleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColorScaleArgs:
    def __init__(__self__, *,
                 color_fill_type: pulumi.Input[str],
                 colors: pulumi.Input[Sequence[pulumi.Input['ColorScaleColorArgs']]],
                 null_value_color: Optional[pulumi.Input['ColorScaleNullValueColorArgs']] = None):
        pulumi.set(__self__, "color_fill_type", color_fill_type)
        pulumi.set(__self__, "colors", colors)
        if null_value_color is not None:
            pulumi.set(__self__, "null_value_color", null_value_color)

    @property
    @pulumi.getter(name="colorFillType")
    def color_fill_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color_fill_type")

    @color_fill_type.setter
    def color_fill_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "color_fill_type", value)

    @property
    @pulumi.getter
    def colors(self) -> pulumi.Input[Sequence[pulumi.Input['ColorScaleColorArgs']]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: pulumi.Input[Sequence[pulumi.Input['ColorScaleColorArgs']]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="nullValueColor")
    def null_value_color(self) -> Optional[pulumi.Input['ColorScaleNullValueColorArgs']]:
        return pulumi.get(self, "null_value_color")

    @null_value_color.setter
    def null_value_color(self, value: Optional[pulumi.Input['ColorScaleNullValueColorArgs']]):
        pulumi.set(self, "null_value_color", value)


if not MYPY:
    class ColorScaleColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        data_value: NotRequired[pulumi.Input[float]]
elif False:
    ColorScaleColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColorScaleColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 data_value: Optional[pulumi.Input[float]] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if data_value is not None:
            pulumi.set(__self__, "data_value", data_value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "data_value")

    @data_value.setter
    def data_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_value", value)


if not MYPY:
    class ColorScaleNullValueColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        data_value: NotRequired[pulumi.Input[float]]
elif False:
    ColorScaleNullValueColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColorScaleNullValueColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 data_value: Optional[pulumi.Input[float]] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if data_value is not None:
            pulumi.set(__self__, "data_value", data_value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "data_value")

    @data_value.setter
    def data_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_value", value)


if not MYPY:
    class ColumnArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        data_set_identifier: pulumi.Input[str]
elif False:
    ColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColumnArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 data_set_identifier: pulumi.Input[str]):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)


if not MYPY:
    class ColumnHierarchiesArgsDict(TypedDict):
        date_time_hierarchy: NotRequired[pulumi.Input['ColumnHierarchiesDateTimeHierarchyArgsDict']]
        explicit_hierarchy: NotRequired[pulumi.Input['ColumnHierarchiesExplicitHierarchyArgsDict']]
        predefined_hierarchy: NotRequired[pulumi.Input['ColumnHierarchiesPredefinedHierarchyArgsDict']]
elif False:
    ColumnHierarchiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColumnHierarchiesArgs:
    def __init__(__self__, *,
                 date_time_hierarchy: Optional[pulumi.Input['ColumnHierarchiesDateTimeHierarchyArgs']] = None,
                 explicit_hierarchy: Optional[pulumi.Input['ColumnHierarchiesExplicitHierarchyArgs']] = None,
                 predefined_hierarchy: Optional[pulumi.Input['ColumnHierarchiesPredefinedHierarchyArgs']] = None):
        if date_time_hierarchy is not None:
            pulumi.set(__self__, "date_time_hierarchy", date_time_hierarchy)
        if explicit_hierarchy is not None:
            pulumi.set(__self__, "explicit_hierarchy", explicit_hierarchy)
        if predefined_hierarchy is not None:
            pulumi.set(__self__, "predefined_hierarchy", predefined_hierarchy)

    @property
    @pulumi.getter(name="dateTimeHierarchy")
    def date_time_hierarchy(self) -> Optional[pulumi.Input['ColumnHierarchiesDateTimeHierarchyArgs']]:
        return pulumi.get(self, "date_time_hierarchy")

    @date_time_hierarchy.setter
    def date_time_hierarchy(self, value: Optional[pulumi.Input['ColumnHierarchiesDateTimeHierarchyArgs']]):
        pulumi.set(self, "date_time_hierarchy", value)

    @property
    @pulumi.getter(name="explicitHierarchy")
    def explicit_hierarchy(self) -> Optional[pulumi.Input['ColumnHierarchiesExplicitHierarchyArgs']]:
        return pulumi.get(self, "explicit_hierarchy")

    @explicit_hierarchy.setter
    def explicit_hierarchy(self, value: Optional[pulumi.Input['ColumnHierarchiesExplicitHierarchyArgs']]):
        pulumi.set(self, "explicit_hierarchy", value)

    @property
    @pulumi.getter(name="predefinedHierarchy")
    def predefined_hierarchy(self) -> Optional[pulumi.Input['ColumnHierarchiesPredefinedHierarchyArgs']]:
        return pulumi.get(self, "predefined_hierarchy")

    @predefined_hierarchy.setter
    def predefined_hierarchy(self, value: Optional[pulumi.Input['ColumnHierarchiesPredefinedHierarchyArgs']]):
        pulumi.set(self, "predefined_hierarchy", value)


if not MYPY:
    class ColumnHierarchiesDateTimeHierarchyArgsDict(TypedDict):
        hierarchy_id: pulumi.Input[str]
        drill_down_filters: NotRequired[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgsDict']]]]
elif False:
    ColumnHierarchiesDateTimeHierarchyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColumnHierarchiesDateTimeHierarchyArgs:
    def __init__(__self__, *,
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgs']]]] = None):
        pulumi.set(__self__, "hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            pulumi.set(__self__, "drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


if not MYPY:
    class ColumnHierarchiesExplicitHierarchyArgsDict(TypedDict):
        columns: pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesExplicitHierarchyColumnArgsDict']]]
        hierarchy_id: pulumi.Input[str]
        drill_down_filters: NotRequired[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgsDict']]]]
elif False:
    ColumnHierarchiesExplicitHierarchyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColumnHierarchiesExplicitHierarchyArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesExplicitHierarchyColumnArgs']]],
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgs']]]] = None):
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            pulumi.set(__self__, "drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesExplicitHierarchyColumnArgs']]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesExplicitHierarchyColumnArgs']]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


if not MYPY:
    class ColumnHierarchiesExplicitHierarchyColumnArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        data_set_identifier: pulumi.Input[str]
elif False:
    ColumnHierarchiesExplicitHierarchyColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColumnHierarchiesExplicitHierarchyColumnArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 data_set_identifier: pulumi.Input[str]):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)


if not MYPY:
    class ColumnHierarchiesPredefinedHierarchyArgsDict(TypedDict):
        columns: pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchema2ArgsDict']]]
        hierarchy_id: pulumi.Input[str]
        drill_down_filters: NotRequired[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgsDict']]]]
elif False:
    ColumnHierarchiesPredefinedHierarchyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColumnHierarchiesPredefinedHierarchyArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchema2Args']]],
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgs']]]] = None):
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            pulumi.set(__self__, "drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchema2Args']]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchema2Args']]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrillDownFiltersArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


if not MYPY:
    class ColumnSortArgsDict(TypedDict):
        direction: pulumi.Input[str]
        sort_by: pulumi.Input['ColumnArgsDict']
        aggregation_function: NotRequired[pulumi.Input['AggregationFunctionArgsDict']]
elif False:
    ColumnSortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColumnSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 sort_by: pulumi.Input['ColumnArgs'],
                 aggregation_function: Optional[pulumi.Input['AggregationFunctionArgs']] = None):
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "sort_by", sort_by)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "sort_by", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['AggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['AggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)


if not MYPY:
    class ConditionalFormattingColorArgsDict(TypedDict):
        gradient: NotRequired[pulumi.Input['ConditionalFormattingColorGradientArgsDict']]
        solid: NotRequired[pulumi.Input['ConditionalFormattingColorSolidArgsDict']]
elif False:
    ConditionalFormattingColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConditionalFormattingColorArgs:
    def __init__(__self__, *,
                 gradient: Optional[pulumi.Input['ConditionalFormattingColorGradientArgs']] = None,
                 solid: Optional[pulumi.Input['ConditionalFormattingColorSolidArgs']] = None):
        if gradient is not None:
            pulumi.set(__self__, "gradient", gradient)
        if solid is not None:
            pulumi.set(__self__, "solid", solid)

    @property
    @pulumi.getter
    def gradient(self) -> Optional[pulumi.Input['ConditionalFormattingColorGradientArgs']]:
        return pulumi.get(self, "gradient")

    @gradient.setter
    def gradient(self, value: Optional[pulumi.Input['ConditionalFormattingColorGradientArgs']]):
        pulumi.set(self, "gradient", value)

    @property
    @pulumi.getter
    def solid(self) -> Optional[pulumi.Input['ConditionalFormattingColorSolidArgs']]:
        return pulumi.get(self, "solid")

    @solid.setter
    def solid(self, value: Optional[pulumi.Input['ConditionalFormattingColorSolidArgs']]):
        pulumi.set(self, "solid", value)


if not MYPY:
    class ConditionalFormattingColorGradientArgsDict(TypedDict):
        color: pulumi.Input['ConditionalFormattingColorGradientColorArgsDict']
        expression: pulumi.Input[str]
elif False:
    ConditionalFormattingColorGradientArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConditionalFormattingColorGradientArgs:
    def __init__(__self__, *,
                 color: pulumi.Input['ConditionalFormattingColorGradientColorArgs'],
                 expression: pulumi.Input[str]):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input['ConditionalFormattingColorGradientColorArgs']:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input['ConditionalFormattingColorGradientColorArgs']):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


if not MYPY:
    class ConditionalFormattingColorGradientColorArgsDict(TypedDict):
        stops: NotRequired[pulumi.Input[Sequence[pulumi.Input['ConditionalFormattingColorGradientColorStopArgsDict']]]]
elif False:
    ConditionalFormattingColorGradientColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConditionalFormattingColorGradientColorArgs:
    def __init__(__self__, *,
                 stops: Optional[pulumi.Input[Sequence[pulumi.Input['ConditionalFormattingColorGradientColorStopArgs']]]] = None):
        if stops is not None:
            pulumi.set(__self__, "stops", stops)

    @property
    @pulumi.getter
    def stops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConditionalFormattingColorGradientColorStopArgs']]]]:
        return pulumi.get(self, "stops")

    @stops.setter
    def stops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConditionalFormattingColorGradientColorStopArgs']]]]):
        pulumi.set(self, "stops", value)


if not MYPY:
    class ConditionalFormattingColorGradientColorStopArgsDict(TypedDict):
        gradient_offset: pulumi.Input[float]
        color: NotRequired[pulumi.Input[str]]
        data_value: NotRequired[pulumi.Input[float]]
elif False:
    ConditionalFormattingColorGradientColorStopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConditionalFormattingColorGradientColorStopArgs:
    def __init__(__self__, *,
                 gradient_offset: pulumi.Input[float],
                 color: Optional[pulumi.Input[str]] = None,
                 data_value: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "gradient_offset", gradient_offset)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if data_value is not None:
            pulumi.set(__self__, "data_value", data_value)

    @property
    @pulumi.getter(name="gradientOffset")
    def gradient_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "gradient_offset")

    @gradient_offset.setter
    def gradient_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "gradient_offset", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "data_value")

    @data_value.setter
    def data_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_value", value)


if not MYPY:
    class ConditionalFormattingColorSolidArgsDict(TypedDict):
        expression: pulumi.Input[str]
        color: NotRequired[pulumi.Input[str]]
elif False:
    ConditionalFormattingColorSolidArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConditionalFormattingColorSolidArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        if color is not None:
            pulumi.set(__self__, "color", color)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)


if not MYPY:
    class ConditionalFormattingIconArgsDict(TypedDict):
        custom_condition: NotRequired[pulumi.Input['ConditionalFormattingIconCustomConditionArgsDict']]
        icon_set: NotRequired[pulumi.Input['ConditionalFormattingIconIconSetArgsDict']]
elif False:
    ConditionalFormattingIconArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConditionalFormattingIconArgs:
    def __init__(__self__, *,
                 custom_condition: Optional[pulumi.Input['ConditionalFormattingIconCustomConditionArgs']] = None,
                 icon_set: Optional[pulumi.Input['ConditionalFormattingIconIconSetArgs']] = None):
        if custom_condition is not None:
            pulumi.set(__self__, "custom_condition", custom_condition)
        if icon_set is not None:
            pulumi.set(__self__, "icon_set", icon_set)

    @property
    @pulumi.getter(name="customCondition")
    def custom_condition(self) -> Optional[pulumi.Input['ConditionalFormattingIconCustomConditionArgs']]:
        return pulumi.get(self, "custom_condition")

    @custom_condition.setter
    def custom_condition(self, value: Optional[pulumi.Input['ConditionalFormattingIconCustomConditionArgs']]):
        pulumi.set(self, "custom_condition", value)

    @property
    @pulumi.getter(name="iconSet")
    def icon_set(self) -> Optional[pulumi.Input['ConditionalFormattingIconIconSetArgs']]:
        return pulumi.get(self, "icon_set")

    @icon_set.setter
    def icon_set(self, value: Optional[pulumi.Input['ConditionalFormattingIconIconSetArgs']]):
        pulumi.set(self, "icon_set", value)


if not MYPY:
    class ConditionalFormattingIconCustomConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        icon_options: pulumi.Input['ConditionalFormattingIconCustomConditionIconOptionsArgsDict']
        color: NotRequired[pulumi.Input[str]]
        display_configuration: NotRequired[pulumi.Input['ConditionalFormattingIconCustomConditionDisplayConfigurationArgsDict']]
elif False:
    ConditionalFormattingIconCustomConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConditionalFormattingIconCustomConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 icon_options: pulumi.Input['ConditionalFormattingIconCustomConditionIconOptionsArgs'],
                 color: Optional[pulumi.Input[str]] = None,
                 display_configuration: Optional[pulumi.Input['ConditionalFormattingIconCustomConditionDisplayConfigurationArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "icon_options", icon_options)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if display_configuration is not None:
            pulumi.set(__self__, "display_configuration", display_configuration)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="iconOptions")
    def icon_options(self) -> pulumi.Input['ConditionalFormattingIconCustomConditionIconOptionsArgs']:
        return pulumi.get(self, "icon_options")

    @icon_options.setter
    def icon_options(self, value: pulumi.Input['ConditionalFormattingIconCustomConditionIconOptionsArgs']):
        pulumi.set(self, "icon_options", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayConfiguration")
    def display_configuration(self) -> Optional[pulumi.Input['ConditionalFormattingIconCustomConditionDisplayConfigurationArgs']]:
        return pulumi.get(self, "display_configuration")

    @display_configuration.setter
    def display_configuration(self, value: Optional[pulumi.Input['ConditionalFormattingIconCustomConditionDisplayConfigurationArgs']]):
        pulumi.set(self, "display_configuration", value)


if not MYPY:
    class ConditionalFormattingIconCustomConditionDisplayConfigurationArgsDict(TypedDict):
        icon_display_option: NotRequired[pulumi.Input[str]]
elif False:
    ConditionalFormattingIconCustomConditionDisplayConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConditionalFormattingIconCustomConditionDisplayConfigurationArgs:
    def __init__(__self__, *,
                 icon_display_option: Optional[pulumi.Input[str]] = None):
        if icon_display_option is not None:
            pulumi.set(__self__, "icon_display_option", icon_display_option)

    @property
    @pulumi.getter(name="iconDisplayOption")
    def icon_display_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon_display_option")

    @icon_display_option.setter
    def icon_display_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_display_option", value)


if not MYPY:
    class ConditionalFormattingIconCustomConditionIconOptionsArgsDict(TypedDict):
        icon: NotRequired[pulumi.Input[str]]
        unicode_icon: NotRequired[pulumi.Input[str]]
elif False:
    ConditionalFormattingIconCustomConditionIconOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConditionalFormattingIconCustomConditionIconOptionsArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input[str]] = None,
                 unicode_icon: Optional[pulumi.Input[str]] = None):
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if unicode_icon is not None:
            pulumi.set(__self__, "unicode_icon", unicode_icon)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="unicodeIcon")
    def unicode_icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unicode_icon")

    @unicode_icon.setter
    def unicode_icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicode_icon", value)


if not MYPY:
    class ConditionalFormattingIconIconSetArgsDict(TypedDict):
        expression: pulumi.Input[str]
        icon_set_type: NotRequired[pulumi.Input[str]]
elif False:
    ConditionalFormattingIconIconSetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConditionalFormattingIconIconSetArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 icon_set_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        if icon_set_type is not None:
            pulumi.set(__self__, "icon_set_type", icon_set_type)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="iconSetType")
    def icon_set_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon_set_type")

    @icon_set_type.setter
    def icon_set_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_set_type", value)


if not MYPY:
    class ContributionAnalysisDefaultsArgsDict(TypedDict):
        contributor_dimensions: pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsContributorDimensionArgsDict']]]
        measure_field_id: pulumi.Input[str]
elif False:
    ContributionAnalysisDefaultsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContributionAnalysisDefaultsArgs:
    def __init__(__self__, *,
                 contributor_dimensions: pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsContributorDimensionArgs']]],
                 measure_field_id: pulumi.Input[str]):
        pulumi.set(__self__, "contributor_dimensions", contributor_dimensions)
        pulumi.set(__self__, "measure_field_id", measure_field_id)

    @property
    @pulumi.getter(name="contributorDimensions")
    def contributor_dimensions(self) -> pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsContributorDimensionArgs']]]:
        return pulumi.get(self, "contributor_dimensions")

    @contributor_dimensions.setter
    def contributor_dimensions(self, value: pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsContributorDimensionArgs']]]):
        pulumi.set(self, "contributor_dimensions", value)

    @property
    @pulumi.getter(name="measureFieldId")
    def measure_field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "measure_field_id")

    @measure_field_id.setter
    def measure_field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure_field_id", value)


if not MYPY:
    class ContributionAnalysisDefaultsContributorDimensionArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        data_set_identifier: pulumi.Input[str]
elif False:
    ContributionAnalysisDefaultsContributorDimensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContributionAnalysisDefaultsContributorDimensionArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 data_set_identifier: pulumi.Input[str]):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)


if not MYPY:
    class DashboardDashboardPublishOptionsArgsDict(TypedDict):
        ad_hoc_filtering_option: NotRequired[pulumi.Input['DashboardDashboardPublishOptionsAdHocFilteringOptionArgsDict']]
        """
        Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
        """
        data_point_drill_up_down_option: NotRequired[pulumi.Input['DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgsDict']]
        """
        The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
        """
        data_point_menu_label_option: NotRequired[pulumi.Input['DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgsDict']]
        """
        The data point menu label options of a dashboard. See data_point_menu_label_option.
        """
        data_point_tooltip_option: NotRequired[pulumi.Input['DashboardDashboardPublishOptionsDataPointTooltipOptionArgsDict']]
        """
        The data point tool tip options of a dashboard. See data_point_tooltip_option.
        """
        export_to_csv_option: NotRequired[pulumi.Input['DashboardDashboardPublishOptionsExportToCsvOptionArgsDict']]
        """
        Export to .csv option. See export_to_csv_option.
        """
        export_with_hidden_fields_option: NotRequired[pulumi.Input['DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgsDict']]
        """
        Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
        """
        sheet_controls_option: NotRequired[pulumi.Input['DashboardDashboardPublishOptionsSheetControlsOptionArgsDict']]
        """
        Sheet controls option. See sheet_controls_option.
        """
        sheet_layout_element_maximization_option: NotRequired[pulumi.Input['DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgsDict']]
        """
        The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
        """
        visual_axis_sort_option: NotRequired[pulumi.Input['DashboardDashboardPublishOptionsVisualAxisSortOptionArgsDict']]
        """
        The axis sort options of a dashboard. See visual_axis_sort_option.
        """
        visual_menu_option: NotRequired[pulumi.Input['DashboardDashboardPublishOptionsVisualMenuOptionArgsDict']]
        """
        The menu options of a visual in a dashboard. See visual_menu_option.
        """
elif False:
    DashboardDashboardPublishOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsArgs:
    def __init__(__self__, *,
                 ad_hoc_filtering_option: Optional[pulumi.Input['DashboardDashboardPublishOptionsAdHocFilteringOptionArgs']] = None,
                 data_point_drill_up_down_option: Optional[pulumi.Input['DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs']] = None,
                 data_point_menu_label_option: Optional[pulumi.Input['DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs']] = None,
                 data_point_tooltip_option: Optional[pulumi.Input['DashboardDashboardPublishOptionsDataPointTooltipOptionArgs']] = None,
                 export_to_csv_option: Optional[pulumi.Input['DashboardDashboardPublishOptionsExportToCsvOptionArgs']] = None,
                 export_with_hidden_fields_option: Optional[pulumi.Input['DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs']] = None,
                 sheet_controls_option: Optional[pulumi.Input['DashboardDashboardPublishOptionsSheetControlsOptionArgs']] = None,
                 sheet_layout_element_maximization_option: Optional[pulumi.Input['DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs']] = None,
                 visual_axis_sort_option: Optional[pulumi.Input['DashboardDashboardPublishOptionsVisualAxisSortOptionArgs']] = None,
                 visual_menu_option: Optional[pulumi.Input['DashboardDashboardPublishOptionsVisualMenuOptionArgs']] = None):
        """
        :param pulumi.Input['DashboardDashboardPublishOptionsAdHocFilteringOptionArgs'] ad_hoc_filtering_option: Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
        :param pulumi.Input['DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs'] data_point_drill_up_down_option: The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
        :param pulumi.Input['DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs'] data_point_menu_label_option: The data point menu label options of a dashboard. See data_point_menu_label_option.
        :param pulumi.Input['DashboardDashboardPublishOptionsDataPointTooltipOptionArgs'] data_point_tooltip_option: The data point tool tip options of a dashboard. See data_point_tooltip_option.
        :param pulumi.Input['DashboardDashboardPublishOptionsExportToCsvOptionArgs'] export_to_csv_option: Export to .csv option. See export_to_csv_option.
        :param pulumi.Input['DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs'] export_with_hidden_fields_option: Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
        :param pulumi.Input['DashboardDashboardPublishOptionsSheetControlsOptionArgs'] sheet_controls_option: Sheet controls option. See sheet_controls_option.
        :param pulumi.Input['DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs'] sheet_layout_element_maximization_option: The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
        :param pulumi.Input['DashboardDashboardPublishOptionsVisualAxisSortOptionArgs'] visual_axis_sort_option: The axis sort options of a dashboard. See visual_axis_sort_option.
        :param pulumi.Input['DashboardDashboardPublishOptionsVisualMenuOptionArgs'] visual_menu_option: The menu options of a visual in a dashboard. See visual_menu_option.
        """
        if ad_hoc_filtering_option is not None:
            pulumi.set(__self__, "ad_hoc_filtering_option", ad_hoc_filtering_option)
        if data_point_drill_up_down_option is not None:
            pulumi.set(__self__, "data_point_drill_up_down_option", data_point_drill_up_down_option)
        if data_point_menu_label_option is not None:
            pulumi.set(__self__, "data_point_menu_label_option", data_point_menu_label_option)
        if data_point_tooltip_option is not None:
            pulumi.set(__self__, "data_point_tooltip_option", data_point_tooltip_option)
        if export_to_csv_option is not None:
            pulumi.set(__self__, "export_to_csv_option", export_to_csv_option)
        if export_with_hidden_fields_option is not None:
            pulumi.set(__self__, "export_with_hidden_fields_option", export_with_hidden_fields_option)
        if sheet_controls_option is not None:
            pulumi.set(__self__, "sheet_controls_option", sheet_controls_option)
        if sheet_layout_element_maximization_option is not None:
            pulumi.set(__self__, "sheet_layout_element_maximization_option", sheet_layout_element_maximization_option)
        if visual_axis_sort_option is not None:
            pulumi.set(__self__, "visual_axis_sort_option", visual_axis_sort_option)
        if visual_menu_option is not None:
            pulumi.set(__self__, "visual_menu_option", visual_menu_option)

    @property
    @pulumi.getter(name="adHocFilteringOption")
    def ad_hoc_filtering_option(self) -> Optional[pulumi.Input['DashboardDashboardPublishOptionsAdHocFilteringOptionArgs']]:
        """
        Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
        """
        return pulumi.get(self, "ad_hoc_filtering_option")

    @ad_hoc_filtering_option.setter
    def ad_hoc_filtering_option(self, value: Optional[pulumi.Input['DashboardDashboardPublishOptionsAdHocFilteringOptionArgs']]):
        pulumi.set(self, "ad_hoc_filtering_option", value)

    @property
    @pulumi.getter(name="dataPointDrillUpDownOption")
    def data_point_drill_up_down_option(self) -> Optional[pulumi.Input['DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs']]:
        """
        The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
        """
        return pulumi.get(self, "data_point_drill_up_down_option")

    @data_point_drill_up_down_option.setter
    def data_point_drill_up_down_option(self, value: Optional[pulumi.Input['DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs']]):
        pulumi.set(self, "data_point_drill_up_down_option", value)

    @property
    @pulumi.getter(name="dataPointMenuLabelOption")
    def data_point_menu_label_option(self) -> Optional[pulumi.Input['DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs']]:
        """
        The data point menu label options of a dashboard. See data_point_menu_label_option.
        """
        return pulumi.get(self, "data_point_menu_label_option")

    @data_point_menu_label_option.setter
    def data_point_menu_label_option(self, value: Optional[pulumi.Input['DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs']]):
        pulumi.set(self, "data_point_menu_label_option", value)

    @property
    @pulumi.getter(name="dataPointTooltipOption")
    def data_point_tooltip_option(self) -> Optional[pulumi.Input['DashboardDashboardPublishOptionsDataPointTooltipOptionArgs']]:
        """
        The data point tool tip options of a dashboard. See data_point_tooltip_option.
        """
        return pulumi.get(self, "data_point_tooltip_option")

    @data_point_tooltip_option.setter
    def data_point_tooltip_option(self, value: Optional[pulumi.Input['DashboardDashboardPublishOptionsDataPointTooltipOptionArgs']]):
        pulumi.set(self, "data_point_tooltip_option", value)

    @property
    @pulumi.getter(name="exportToCsvOption")
    def export_to_csv_option(self) -> Optional[pulumi.Input['DashboardDashboardPublishOptionsExportToCsvOptionArgs']]:
        """
        Export to .csv option. See export_to_csv_option.
        """
        return pulumi.get(self, "export_to_csv_option")

    @export_to_csv_option.setter
    def export_to_csv_option(self, value: Optional[pulumi.Input['DashboardDashboardPublishOptionsExportToCsvOptionArgs']]):
        pulumi.set(self, "export_to_csv_option", value)

    @property
    @pulumi.getter(name="exportWithHiddenFieldsOption")
    def export_with_hidden_fields_option(self) -> Optional[pulumi.Input['DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs']]:
        """
        Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
        """
        return pulumi.get(self, "export_with_hidden_fields_option")

    @export_with_hidden_fields_option.setter
    def export_with_hidden_fields_option(self, value: Optional[pulumi.Input['DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs']]):
        pulumi.set(self, "export_with_hidden_fields_option", value)

    @property
    @pulumi.getter(name="sheetControlsOption")
    def sheet_controls_option(self) -> Optional[pulumi.Input['DashboardDashboardPublishOptionsSheetControlsOptionArgs']]:
        """
        Sheet controls option. See sheet_controls_option.
        """
        return pulumi.get(self, "sheet_controls_option")

    @sheet_controls_option.setter
    def sheet_controls_option(self, value: Optional[pulumi.Input['DashboardDashboardPublishOptionsSheetControlsOptionArgs']]):
        pulumi.set(self, "sheet_controls_option", value)

    @property
    @pulumi.getter(name="sheetLayoutElementMaximizationOption")
    def sheet_layout_element_maximization_option(self) -> Optional[pulumi.Input['DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs']]:
        """
        The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
        """
        return pulumi.get(self, "sheet_layout_element_maximization_option")

    @sheet_layout_element_maximization_option.setter
    def sheet_layout_element_maximization_option(self, value: Optional[pulumi.Input['DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs']]):
        pulumi.set(self, "sheet_layout_element_maximization_option", value)

    @property
    @pulumi.getter(name="visualAxisSortOption")
    def visual_axis_sort_option(self) -> Optional[pulumi.Input['DashboardDashboardPublishOptionsVisualAxisSortOptionArgs']]:
        """
        The axis sort options of a dashboard. See visual_axis_sort_option.
        """
        return pulumi.get(self, "visual_axis_sort_option")

    @visual_axis_sort_option.setter
    def visual_axis_sort_option(self, value: Optional[pulumi.Input['DashboardDashboardPublishOptionsVisualAxisSortOptionArgs']]):
        pulumi.set(self, "visual_axis_sort_option", value)

    @property
    @pulumi.getter(name="visualMenuOption")
    def visual_menu_option(self) -> Optional[pulumi.Input['DashboardDashboardPublishOptionsVisualMenuOptionArgs']]:
        """
        The menu options of a visual in a dashboard. See visual_menu_option.
        """
        return pulumi.get(self, "visual_menu_option")

    @visual_menu_option.setter
    def visual_menu_option(self, value: Optional[pulumi.Input['DashboardDashboardPublishOptionsVisualMenuOptionArgs']]):
        pulumi.set(self, "visual_menu_option", value)


if not MYPY:
    class DashboardDashboardPublishOptionsAdHocFilteringOptionArgsDict(TypedDict):
        availability_status: NotRequired[pulumi.Input[str]]
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
elif False:
    DashboardDashboardPublishOptionsAdHocFilteringOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsAdHocFilteringOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input[str]]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_status", value)


if not MYPY:
    class DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgsDict(TypedDict):
        availability_status: NotRequired[pulumi.Input[str]]
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
elif False:
    DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input[str]]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_status", value)


if not MYPY:
    class DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgsDict(TypedDict):
        availability_status: NotRequired[pulumi.Input[str]]
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
elif False:
    DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input[str]]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_status", value)


if not MYPY:
    class DashboardDashboardPublishOptionsDataPointTooltipOptionArgsDict(TypedDict):
        availability_status: NotRequired[pulumi.Input[str]]
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
elif False:
    DashboardDashboardPublishOptionsDataPointTooltipOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsDataPointTooltipOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input[str]]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_status", value)


if not MYPY:
    class DashboardDashboardPublishOptionsExportToCsvOptionArgsDict(TypedDict):
        availability_status: NotRequired[pulumi.Input[str]]
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
elif False:
    DashboardDashboardPublishOptionsExportToCsvOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsExportToCsvOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input[str]]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_status", value)


if not MYPY:
    class DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgsDict(TypedDict):
        availability_status: NotRequired[pulumi.Input[str]]
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
elif False:
    DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input[str]]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_status", value)


if not MYPY:
    class DashboardDashboardPublishOptionsSheetControlsOptionArgsDict(TypedDict):
        visibility_state: NotRequired[pulumi.Input[str]]
        """
        Visibility state. Possibles values: EXPANDED, COLLAPSED.
        """
elif False:
    DashboardDashboardPublishOptionsSheetControlsOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsSheetControlsOptionArgs:
    def __init__(__self__, *,
                 visibility_state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] visibility_state: Visibility state. Possibles values: EXPANDED, COLLAPSED.
        """
        if visibility_state is not None:
            pulumi.set(__self__, "visibility_state", visibility_state)

    @property
    @pulumi.getter(name="visibilityState")
    def visibility_state(self) -> Optional[pulumi.Input[str]]:
        """
        Visibility state. Possibles values: EXPANDED, COLLAPSED.
        """
        return pulumi.get(self, "visibility_state")

    @visibility_state.setter
    def visibility_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility_state", value)


if not MYPY:
    class DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgsDict(TypedDict):
        availability_status: NotRequired[pulumi.Input[str]]
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
elif False:
    DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input[str]]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_status", value)


if not MYPY:
    class DashboardDashboardPublishOptionsVisualAxisSortOptionArgsDict(TypedDict):
        availability_status: NotRequired[pulumi.Input[str]]
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
elif False:
    DashboardDashboardPublishOptionsVisualAxisSortOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsVisualAxisSortOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input[str]]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_status", value)


if not MYPY:
    class DashboardDashboardPublishOptionsVisualMenuOptionArgsDict(TypedDict):
        availability_status: NotRequired[pulumi.Input[str]]
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
elif False:
    DashboardDashboardPublishOptionsVisualMenuOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDashboardPublishOptionsVisualMenuOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input[str]]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_status", value)


if not MYPY:
    class DashboardDefinitionArgsDict(TypedDict):
        data_set_identifiers_declarations: pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionDataSetIdentifiersDeclarationArgsDict']]]
        """
        A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
        """
        analysis_defaults: NotRequired[pulumi.Input['DashboardDefinitionAnalysisDefaultsArgsDict']]
        """
        The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        """
        calculated_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionCalculatedFieldArgsDict']]]]
        """
        A list of calculated field definitions for the dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        """
        column_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionColumnConfigurationArgsDict']]]]
        """
        A list of dashboard-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a dashboard. See AWS API Documentation for complete description.
        """
        filter_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionFilterGroupArgsDict']]]]
        """
        A list of filter definitions for a dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        """
        parameter_declarations: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionParameterDeclarationArgsDict']]]]
        sheets: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetArgsDict']]]]
        """
        A list of sheet definitions for a dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
elif False:
    DashboardDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionArgs:
    def __init__(__self__, *,
                 data_set_identifiers_declarations: pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionDataSetIdentifiersDeclarationArgs']]],
                 analysis_defaults: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsArgs']] = None,
                 calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionCalculatedFieldArgs']]]] = None,
                 column_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionColumnConfigurationArgs']]]] = None,
                 filter_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionFilterGroupArgs']]]] = None,
                 parameter_declarations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionParameterDeclarationArgs']]]] = None,
                 sheets: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionDataSetIdentifiersDeclarationArgs']]] data_set_identifiers_declarations: A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
        :param pulumi.Input['DashboardDefinitionAnalysisDefaultsArgs'] analysis_defaults: The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        :param pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionCalculatedFieldArgs']]] calculated_fields: A list of calculated field definitions for the dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        :param pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionColumnConfigurationArgs']]] column_configurations: A list of dashboard-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a dashboard. See AWS API Documentation for complete description.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionFilterGroupArgs']]] filter_groups: A list of filter definitions for a dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetArgs']]] sheets: A list of sheet definitions for a dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        pulumi.set(__self__, "data_set_identifiers_declarations", data_set_identifiers_declarations)
        if analysis_defaults is not None:
            pulumi.set(__self__, "analysis_defaults", analysis_defaults)
        if calculated_fields is not None:
            pulumi.set(__self__, "calculated_fields", calculated_fields)
        if column_configurations is not None:
            pulumi.set(__self__, "column_configurations", column_configurations)
        if filter_groups is not None:
            pulumi.set(__self__, "filter_groups", filter_groups)
        if parameter_declarations is not None:
            pulumi.set(__self__, "parameter_declarations", parameter_declarations)
        if sheets is not None:
            pulumi.set(__self__, "sheets", sheets)

    @property
    @pulumi.getter(name="dataSetIdentifiersDeclarations")
    def data_set_identifiers_declarations(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionDataSetIdentifiersDeclarationArgs']]]:
        """
        A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
        """
        return pulumi.get(self, "data_set_identifiers_declarations")

    @data_set_identifiers_declarations.setter
    def data_set_identifiers_declarations(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionDataSetIdentifiersDeclarationArgs']]]):
        pulumi.set(self, "data_set_identifiers_declarations", value)

    @property
    @pulumi.getter(name="analysisDefaults")
    def analysis_defaults(self) -> Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsArgs']]:
        """
        The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        """
        return pulumi.get(self, "analysis_defaults")

    @analysis_defaults.setter
    def analysis_defaults(self, value: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsArgs']]):
        pulumi.set(self, "analysis_defaults", value)

    @property
    @pulumi.getter(name="calculatedFields")
    def calculated_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionCalculatedFieldArgs']]]]:
        """
        A list of calculated field definitions for the dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        """
        return pulumi.get(self, "calculated_fields")

    @calculated_fields.setter
    def calculated_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionCalculatedFieldArgs']]]]):
        pulumi.set(self, "calculated_fields", value)

    @property
    @pulumi.getter(name="columnConfigurations")
    def column_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionColumnConfigurationArgs']]]]:
        """
        A list of dashboard-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a dashboard. See AWS API Documentation for complete description.
        """
        return pulumi.get(self, "column_configurations")

    @column_configurations.setter
    def column_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionColumnConfigurationArgs']]]]):
        pulumi.set(self, "column_configurations", value)

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionFilterGroupArgs']]]]:
        """
        A list of filter definitions for a dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        """
        return pulumi.get(self, "filter_groups")

    @filter_groups.setter
    def filter_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionFilterGroupArgs']]]]):
        pulumi.set(self, "filter_groups", value)

    @property
    @pulumi.getter(name="parameterDeclarations")
    def parameter_declarations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionParameterDeclarationArgs']]]]:
        return pulumi.get(self, "parameter_declarations")

    @parameter_declarations.setter
    def parameter_declarations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionParameterDeclarationArgs']]]]):
        pulumi.set(self, "parameter_declarations", value)

    @property
    @pulumi.getter
    def sheets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetArgs']]]]:
        """
        A list of sheet definitions for a dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        return pulumi.get(self, "sheets")

    @sheets.setter
    def sheets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetArgs']]]]):
        pulumi.set(self, "sheets", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsArgsDict(TypedDict):
        default_new_sheet_configuration: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict']
elif False:
    DashboardDefinitionAnalysisDefaultsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsArgs:
    def __init__(__self__, *,
                 default_new_sheet_configuration: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs']):
        pulumi.set(__self__, "default_new_sheet_configuration", default_new_sheet_configuration)

    @property
    @pulumi.getter(name="defaultNewSheetConfiguration")
    def default_new_sheet_configuration(self) -> pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs']:
        return pulumi.get(self, "default_new_sheet_configuration")

    @default_new_sheet_configuration.setter
    def default_new_sheet_configuration(self, value: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs']):
        pulumi.set(self, "default_new_sheet_configuration", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict(TypedDict):
        interactive_layout_configuration: NotRequired[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict']]
        paginated_layout_configuration: NotRequired[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict']]
        sheet_content_type: NotRequired[pulumi.Input[str]]
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs:
    def __init__(__self__, *,
                 interactive_layout_configuration: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs']] = None,
                 paginated_layout_configuration: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs']] = None,
                 sheet_content_type: Optional[pulumi.Input[str]] = None):
        if interactive_layout_configuration is not None:
            pulumi.set(__self__, "interactive_layout_configuration", interactive_layout_configuration)
        if paginated_layout_configuration is not None:
            pulumi.set(__self__, "paginated_layout_configuration", paginated_layout_configuration)
        if sheet_content_type is not None:
            pulumi.set(__self__, "sheet_content_type", sheet_content_type)

    @property
    @pulumi.getter(name="interactiveLayoutConfiguration")
    def interactive_layout_configuration(self) -> Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs']]:
        return pulumi.get(self, "interactive_layout_configuration")

    @interactive_layout_configuration.setter
    def interactive_layout_configuration(self, value: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs']]):
        pulumi.set(self, "interactive_layout_configuration", value)

    @property
    @pulumi.getter(name="paginatedLayoutConfiguration")
    def paginated_layout_configuration(self) -> Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs']]:
        return pulumi.get(self, "paginated_layout_configuration")

    @paginated_layout_configuration.setter
    def paginated_layout_configuration(self, value: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs']]):
        pulumi.set(self, "paginated_layout_configuration", value)

    @property
    @pulumi.getter(name="sheetContentType")
    def sheet_content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sheet_content_type")

    @sheet_content_type.setter
    def sheet_content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sheet_content_type", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict(TypedDict):
        free_form: NotRequired[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict']]
        grid: NotRequired[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict']]
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs']] = None,
                 grid: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs']] = None):
        if free_form is not None:
            pulumi.set(__self__, "free_form", free_form)
        if grid is not None:
            pulumi.set(__self__, "grid", grid)

    @property
    @pulumi.getter(name="freeForm")
    def free_form(self) -> Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs']]:
        return pulumi.get(self, "free_form")

    @free_form.setter
    def free_form(self, value: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs']]):
        pulumi.set(self, "free_form", value)

    @property
    @pulumi.getter
    def grid(self) -> Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs']]:
        return pulumi.get(self, "grid")

    @grid.setter
    def grid(self, value: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs']]):
        pulumi.set(self, "grid", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict(TypedDict):
        canvas_size_options: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict']
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs']):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict(TypedDict):
        screen_canvas_size_options: NotRequired[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict']]
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs']] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict(TypedDict):
        optimized_view_port_width: pulumi.Input[str]
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 optimized_view_port_width: pulumi.Input[str]):
        pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> pulumi.Input[str]:
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: pulumi.Input[str]):
        pulumi.set(self, "optimized_view_port_width", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict(TypedDict):
        canvas_size_options: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict']
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs']):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict(TypedDict):
        screen_canvas_size_options: NotRequired[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict']]
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs']] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict(TypedDict):
        resize_option: pulumi.Input[str]
        optimized_view_port_width: NotRequired[pulumi.Input[str]]
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 resize_option: pulumi.Input[str],
                 optimized_view_port_width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "resize_option", resize_option)
        if optimized_view_port_width is not None:
            pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resize_option")

    @resize_option.setter
    def resize_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "resize_option", value)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimized_view_port_width", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict(TypedDict):
        section_based: NotRequired[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict']]
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 section_based: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs']] = None):
        if section_based is not None:
            pulumi.set(__self__, "section_based", section_based)

    @property
    @pulumi.getter(name="sectionBased")
    def section_based(self) -> Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs']]:
        return pulumi.get(self, "section_based")

    @section_based.setter
    def section_based(self, value: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs']]):
        pulumi.set(self, "section_based", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict(TypedDict):
        canvas_size_options: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict']
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs']):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict(TypedDict):
        paper_canvas_size_options: NotRequired[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict']]
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_canvas_size_options: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs']] = None):
        if paper_canvas_size_options is not None:
            pulumi.set(__self__, "paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "paper_canvas_size_options")

    @paper_canvas_size_options.setter
    def paper_canvas_size_options(self, value: Optional[pulumi.Input['DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs']]):
        pulumi.set(self, "paper_canvas_size_options", value)


if not MYPY:
    class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict(TypedDict):
        paper_margin: NotRequired[pulumi.Input['SpacingArgsDict']]
        paper_orientation: NotRequired[pulumi.Input[str]]
        paper_size: NotRequired[pulumi.Input[str]]
elif False:
    DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_margin: Optional[pulumi.Input['SpacingArgs']] = None,
                 paper_orientation: Optional[pulumi.Input[str]] = None,
                 paper_size: Optional[pulumi.Input[str]] = None):
        if paper_margin is not None:
            pulumi.set(__self__, "paper_margin", paper_margin)
        if paper_orientation is not None:
            pulumi.set(__self__, "paper_orientation", paper_orientation)
        if paper_size is not None:
            pulumi.set(__self__, "paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional[pulumi.Input['SpacingArgs']]:
        return pulumi.get(self, "paper_margin")

    @paper_margin.setter
    def paper_margin(self, value: Optional[pulumi.Input['SpacingArgs']]):
        pulumi.set(self, "paper_margin", value)

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "paper_orientation")

    @paper_orientation.setter
    def paper_orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper_orientation", value)

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "paper_size")

    @paper_size.setter
    def paper_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper_size", value)


if not MYPY:
    class DashboardDefinitionCalculatedFieldArgsDict(TypedDict):
        data_set_identifier: pulumi.Input[str]
        expression: pulumi.Input[str]
        name: pulumi.Input[str]
        """
        Display name for the dashboard.
        """
elif False:
    DashboardDefinitionCalculatedFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionCalculatedFieldArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DashboardDefinitionColumnConfigurationArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        format_configuration: NotRequired[pulumi.Input['DashboardDefinitionColumnConfigurationFormatConfigurationArgsDict']]
        role: NotRequired[pulumi.Input[str]]
elif False:
    DashboardDefinitionColumnConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionColumnConfigurationArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 format_configuration: Optional[pulumi.Input['DashboardDefinitionColumnConfigurationFormatConfigurationArgs']] = None,
                 role: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardDefinitionColumnConfigurationFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardDefinitionColumnConfigurationFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


if not MYPY:
    class DashboardDefinitionColumnConfigurationFormatConfigurationArgsDict(TypedDict):
        date_time_format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
        number_format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
        string_format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
elif False:
    DashboardDefinitionColumnConfigurationFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionColumnConfigurationFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None,
                 number_format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None,
                 string_format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None):
        if date_time_format_configuration is not None:
            pulumi.set(__self__, "date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            pulumi.set(__self__, "number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            pulumi.set(__self__, "string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "date_time_format_configuration")

    @date_time_format_configuration.setter
    def date_time_format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "date_time_format_configuration", value)

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "number_format_configuration")

    @number_format_configuration.setter
    def number_format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "number_format_configuration", value)

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "string_format_configuration")

    @string_format_configuration.setter
    def string_format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "string_format_configuration", value)


if not MYPY:
    class DashboardDefinitionDataSetIdentifiersDeclarationArgsDict(TypedDict):
        data_set_arn: NotRequired[pulumi.Input[str]]
        """
        Dataset Amazon Resource Name (ARN).
        """
        identifier: NotRequired[pulumi.Input[str]]
elif False:
    DashboardDefinitionDataSetIdentifiersDeclarationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionDataSetIdentifiersDeclarationArgs:
    def __init__(__self__, *,
                 data_set_arn: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_set_arn: Dataset Amazon Resource Name (ARN).
        """
        if data_set_arn is not None:
            pulumi.set(__self__, "data_set_arn", data_set_arn)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Dataset Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)


if not MYPY:
    class DashboardDefinitionFilterGroupArgsDict(TypedDict):
        cross_dataset: pulumi.Input[str]
        filter_group_id: pulumi.Input[str]
        filters: pulumi.Input[Sequence[pulumi.Input['FiltersArgsDict']]]
        scope_configuration: pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationArgsDict']
        status: NotRequired[pulumi.Input[str]]
        """
        The dashboard creation status.
        """
elif False:
    DashboardDefinitionFilterGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionFilterGroupArgs:
    def __init__(__self__, *,
                 cross_dataset: pulumi.Input[str],
                 filter_group_id: pulumi.Input[str],
                 filters: pulumi.Input[Sequence[pulumi.Input['FiltersArgs']]],
                 scope_configuration: pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationArgs'],
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: The dashboard creation status.
        """
        pulumi.set(__self__, "cross_dataset", cross_dataset)
        pulumi.set(__self__, "filter_group_id", filter_group_id)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "scope_configuration", scope_configuration)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="crossDataset")
    def cross_dataset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cross_dataset")

    @cross_dataset.setter
    def cross_dataset(self, value: pulumi.Input[str]):
        pulumi.set(self, "cross_dataset", value)

    @property
    @pulumi.getter(name="filterGroupId")
    def filter_group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_group_id")

    @filter_group_id.setter
    def filter_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_group_id", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['FiltersArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['FiltersArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="scopeConfiguration")
    def scope_configuration(self) -> pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationArgs']:
        return pulumi.get(self, "scope_configuration")

    @scope_configuration.setter
    def scope_configuration(self, value: pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationArgs']):
        pulumi.set(self, "scope_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class DashboardDefinitionFilterGroupScopeConfigurationArgsDict(TypedDict):
        selected_sheets: NotRequired[pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict']]
elif False:
    DashboardDefinitionFilterGroupScopeConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionFilterGroupScopeConfigurationArgs:
    def __init__(__self__, *,
                 selected_sheets: Optional[pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs']] = None):
        if selected_sheets is not None:
            pulumi.set(__self__, "selected_sheets", selected_sheets)

    @property
    @pulumi.getter(name="selectedSheets")
    def selected_sheets(self) -> Optional[pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs']]:
        return pulumi.get(self, "selected_sheets")

    @selected_sheets.setter
    def selected_sheets(self, value: Optional[pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs']]):
        pulumi.set(self, "selected_sheets", value)


if not MYPY:
    class DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict(TypedDict):
        sheet_visual_scoping_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict']]]]
elif False:
    DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs:
    def __init__(__self__, *,
                 sheet_visual_scoping_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs']]]] = None):
        if sheet_visual_scoping_configurations is not None:
            pulumi.set(__self__, "sheet_visual_scoping_configurations", sheet_visual_scoping_configurations)

    @property
    @pulumi.getter(name="sheetVisualScopingConfigurations")
    def sheet_visual_scoping_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs']]]]:
        return pulumi.get(self, "sheet_visual_scoping_configurations")

    @sheet_visual_scoping_configurations.setter
    def sheet_visual_scoping_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs']]]]):
        pulumi.set(self, "sheet_visual_scoping_configurations", value)


if not MYPY:
    class DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict(TypedDict):
        scope: pulumi.Input[str]
        sheet_id: pulumi.Input[str]
        visual_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs:
    def __init__(__self__, *,
                 scope: pulumi.Input[str],
                 sheet_id: pulumi.Input[str],
                 visual_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sheet_id", sheet_id)
        if visual_ids is not None:
            pulumi.set(__self__, "visual_ids", visual_ids)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="visualIds")
    def visual_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "visual_ids")

    @visual_ids.setter
    def visual_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "visual_ids", value)


if not MYPY:
    class DashboardDefinitionParameterDeclarationArgsDict(TypedDict):
        date_time_parameter_declaration: NotRequired[pulumi.Input['DateTimeParameterDeclarationArgsDict']]
        decimal_parameter_declaration: NotRequired[pulumi.Input['DecimalParameterDeclarationArgsDict']]
        integer_parameter_declaration: NotRequired[pulumi.Input['IntegerParameterDeclarationArgsDict']]
        string_parameter_declaration: NotRequired[pulumi.Input['StringParameterDeclarationArgsDict']]
elif False:
    DashboardDefinitionParameterDeclarationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionParameterDeclarationArgs:
    def __init__(__self__, *,
                 date_time_parameter_declaration: Optional[pulumi.Input['DateTimeParameterDeclarationArgs']] = None,
                 decimal_parameter_declaration: Optional[pulumi.Input['DecimalParameterDeclarationArgs']] = None,
                 integer_parameter_declaration: Optional[pulumi.Input['IntegerParameterDeclarationArgs']] = None,
                 string_parameter_declaration: Optional[pulumi.Input['StringParameterDeclarationArgs']] = None):
        if date_time_parameter_declaration is not None:
            pulumi.set(__self__, "date_time_parameter_declaration", date_time_parameter_declaration)
        if decimal_parameter_declaration is not None:
            pulumi.set(__self__, "decimal_parameter_declaration", decimal_parameter_declaration)
        if integer_parameter_declaration is not None:
            pulumi.set(__self__, "integer_parameter_declaration", integer_parameter_declaration)
        if string_parameter_declaration is not None:
            pulumi.set(__self__, "string_parameter_declaration", string_parameter_declaration)

    @property
    @pulumi.getter(name="dateTimeParameterDeclaration")
    def date_time_parameter_declaration(self) -> Optional[pulumi.Input['DateTimeParameterDeclarationArgs']]:
        return pulumi.get(self, "date_time_parameter_declaration")

    @date_time_parameter_declaration.setter
    def date_time_parameter_declaration(self, value: Optional[pulumi.Input['DateTimeParameterDeclarationArgs']]):
        pulumi.set(self, "date_time_parameter_declaration", value)

    @property
    @pulumi.getter(name="decimalParameterDeclaration")
    def decimal_parameter_declaration(self) -> Optional[pulumi.Input['DecimalParameterDeclarationArgs']]:
        return pulumi.get(self, "decimal_parameter_declaration")

    @decimal_parameter_declaration.setter
    def decimal_parameter_declaration(self, value: Optional[pulumi.Input['DecimalParameterDeclarationArgs']]):
        pulumi.set(self, "decimal_parameter_declaration", value)

    @property
    @pulumi.getter(name="integerParameterDeclaration")
    def integer_parameter_declaration(self) -> Optional[pulumi.Input['IntegerParameterDeclarationArgs']]:
        return pulumi.get(self, "integer_parameter_declaration")

    @integer_parameter_declaration.setter
    def integer_parameter_declaration(self, value: Optional[pulumi.Input['IntegerParameterDeclarationArgs']]):
        pulumi.set(self, "integer_parameter_declaration", value)

    @property
    @pulumi.getter(name="stringParameterDeclaration")
    def string_parameter_declaration(self) -> Optional[pulumi.Input['StringParameterDeclarationArgs']]:
        return pulumi.get(self, "string_parameter_declaration")

    @string_parameter_declaration.setter
    def string_parameter_declaration(self, value: Optional[pulumi.Input['StringParameterDeclarationArgs']]):
        pulumi.set(self, "string_parameter_declaration", value)


if not MYPY:
    class DashboardDefinitionSheetArgsDict(TypedDict):
        sheet_id: pulumi.Input[str]
        content_type: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        filter_controls: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgsDict']]]]
        layouts: NotRequired[pulumi.Input['LayoutsArgsDict']]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
        parameter_controls: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetParameterControlArgsDict']]]]
        sheet_control_layouts: NotRequired[pulumi.Input['DashboardDefinitionSheetSheetControlLayoutsArgsDict']]
        text_boxes: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetTextBoxArgsDict']]]]
        title: NotRequired[pulumi.Input[str]]
        visuals: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsArgsDict']]]]
elif False:
    DashboardDefinitionSheetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetArgs:
    def __init__(__self__, *,
                 sheet_id: pulumi.Input[str],
                 content_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgs']]]] = None,
                 layouts: Optional[pulumi.Input['LayoutsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetParameterControlArgs']]]] = None,
                 sheet_control_layouts: Optional[pulumi.Input['DashboardDefinitionSheetSheetControlLayoutsArgs']] = None,
                 text_boxes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetTextBoxArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visuals: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "sheet_id", sheet_id)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter_controls is not None:
            pulumi.set(__self__, "filter_controls", filter_controls)
        if layouts is not None:
            pulumi.set(__self__, "layouts", layouts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_controls is not None:
            pulumi.set(__self__, "parameter_controls", parameter_controls)
        if sheet_control_layouts is not None:
            pulumi.set(__self__, "sheet_control_layouts", sheet_control_layouts)
        if text_boxes is not None:
            pulumi.set(__self__, "text_boxes", text_boxes)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visuals is not None:
            pulumi.set(__self__, "visuals", visuals)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="filterControls")
    def filter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgs']]]]:
        return pulumi.get(self, "filter_controls")

    @filter_controls.setter
    def filter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgs']]]]):
        pulumi.set(self, "filter_controls", value)

    @property
    @pulumi.getter
    def layouts(self) -> Optional[pulumi.Input['LayoutsArgs']]:
        return pulumi.get(self, "layouts")

    @layouts.setter
    def layouts(self, value: Optional[pulumi.Input['LayoutsArgs']]):
        pulumi.set(self, "layouts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterControls")
    def parameter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetParameterControlArgs']]]]:
        return pulumi.get(self, "parameter_controls")

    @parameter_controls.setter
    def parameter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetParameterControlArgs']]]]):
        pulumi.set(self, "parameter_controls", value)

    @property
    @pulumi.getter(name="sheetControlLayouts")
    def sheet_control_layouts(self) -> Optional[pulumi.Input['DashboardDefinitionSheetSheetControlLayoutsArgs']]:
        return pulumi.get(self, "sheet_control_layouts")

    @sheet_control_layouts.setter
    def sheet_control_layouts(self, value: Optional[pulumi.Input['DashboardDefinitionSheetSheetControlLayoutsArgs']]):
        pulumi.set(self, "sheet_control_layouts", value)

    @property
    @pulumi.getter(name="textBoxes")
    def text_boxes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetTextBoxArgs']]]]:
        return pulumi.get(self, "text_boxes")

    @text_boxes.setter
    def text_boxes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDefinitionSheetTextBoxArgs']]]]):
        pulumi.set(self, "text_boxes", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visuals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsArgs']]]]:
        return pulumi.get(self, "visuals")

    @visuals.setter
    def visuals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsArgs']]]]):
        pulumi.set(self, "visuals", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlArgsDict(TypedDict):
        date_time_picker: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlDateTimePickerArgsDict']]
        dropdown: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownArgsDict']]
        list: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlListArgsDict']]
        slider: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlSliderArgsDict']]
        text_area: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlTextAreaArgsDict']]
        text_field: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlTextFieldArgsDict']]
elif False:
    DashboardDefinitionSheetParameterControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlArgs:
    def __init__(__self__, *,
                 date_time_picker: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDateTimePickerArgs']] = None,
                 dropdown: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownArgs']] = None,
                 list: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlListArgs']] = None,
                 slider: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlSliderArgs']] = None,
                 text_area: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlTextAreaArgs']] = None,
                 text_field: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlTextFieldArgs']] = None):
        if date_time_picker is not None:
            pulumi.set(__self__, "date_time_picker", date_time_picker)
        if dropdown is not None:
            pulumi.set(__self__, "dropdown", dropdown)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if slider is not None:
            pulumi.set(__self__, "slider", slider)
        if text_area is not None:
            pulumi.set(__self__, "text_area", text_area)
        if text_field is not None:
            pulumi.set(__self__, "text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDateTimePickerArgs']]:
        return pulumi.get(self, "date_time_picker")

    @date_time_picker.setter
    def date_time_picker(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDateTimePickerArgs']]):
        pulumi.set(self, "date_time_picker", value)

    @property
    @pulumi.getter
    def dropdown(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownArgs']]:
        return pulumi.get(self, "dropdown")

    @dropdown.setter
    def dropdown(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownArgs']]):
        pulumi.set(self, "dropdown", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlListArgs']]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlListArgs']]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter
    def slider(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlSliderArgs']]:
        return pulumi.get(self, "slider")

    @slider.setter
    def slider(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlSliderArgs']]):
        pulumi.set(self, "slider", value)

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlTextAreaArgs']]:
        return pulumi.get(self, "text_area")

    @text_area.setter
    def text_area(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlTextAreaArgs']]):
        pulumi.set(self, "text_area", value)

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlTextFieldArgs']]:
        return pulumi.get(self, "text_field")

    @text_field.setter
    def text_field(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlTextFieldArgs']]):
        pulumi.set(self, "text_field", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlDateTimePickerArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict']]
elif False:
    DashboardDefinitionSheetParameterControlDateTimePickerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlDateTimePickerArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict(TypedDict):
        date_time_format: NotRequired[pulumi.Input[str]]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlDropdownArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        cascading_control_configuration: NotRequired[pulumi.Input['CascadingControlConfigurationArgsDict']]
        display_options: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict']]
        selectable_values: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownSelectableValuesArgsDict']]
        type: NotRequired[pulumi.Input[str]]
elif False:
    DashboardDefinitionSheetParameterControlDropdownArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlDropdownArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['CascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['CascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['CascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlDropdownSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict(TypedDict):
        select_all_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    DashboardDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlDropdownDisplayOptionsArgs:
    def __init__(__self__, *,
                 select_all_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlDropdownSelectableValuesArgsDict(TypedDict):
        link_to_data_set_column: NotRequired[pulumi.Input['ColumnArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    DashboardDefinitionSheetParameterControlDropdownSelectableValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlDropdownSelectableValuesArgs:
    def __init__(__self__, *,
                 link_to_data_set_column: Optional[pulumi.Input['ColumnArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional[pulumi.Input['ColumnArgs']]:
        return pulumi.get(self, "link_to_data_set_column")

    @link_to_data_set_column.setter
    def link_to_data_set_column(self, value: Optional[pulumi.Input['ColumnArgs']]):
        pulumi.set(self, "link_to_data_set_column", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlListArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        cascading_control_configuration: NotRequired[pulumi.Input['CascadingControlConfigurationArgsDict']]
        display_options: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlListDisplayOptionsArgsDict']]
        selectable_values: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlListSelectableValuesArgsDict']]
        type: NotRequired[pulumi.Input[str]]
elif False:
    DashboardDefinitionSheetParameterControlListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlListArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['CascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlListDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlListSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['CascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['CascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlListDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlListDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlListSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlListSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlListDisplayOptionsArgsDict(TypedDict):
        search_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        select_all_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    DashboardDefinitionSheetParameterControlListDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlListDisplayOptionsArgs:
    def __init__(__self__, *,
                 search_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 select_all_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if search_options is not None:
            pulumi.set(__self__, "search_options", search_options)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "search_options")

    @search_options.setter
    def search_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "search_options", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlListSelectableValuesArgsDict(TypedDict):
        link_to_data_set_column: NotRequired[pulumi.Input['ColumnArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    DashboardDefinitionSheetParameterControlListSelectableValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlListSelectableValuesArgs:
    def __init__(__self__, *,
                 link_to_data_set_column: Optional[pulumi.Input['ColumnArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional[pulumi.Input['ColumnArgs']]:
        return pulumi.get(self, "link_to_data_set_column")

    @link_to_data_set_column.setter
    def link_to_data_set_column(self, value: Optional[pulumi.Input['ColumnArgs']]):
        pulumi.set(self, "link_to_data_set_column", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlSliderArgsDict(TypedDict):
        maximum_value: pulumi.Input[float]
        minimum_value: pulumi.Input[float]
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        step_size: pulumi.Input[float]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgsDict']]
elif False:
    DashboardDefinitionSheetParameterControlSliderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlSliderArgs:
    def __init__(__self__, *,
                 maximum_value: pulumi.Input[float],
                 minimum_value: pulumi.Input[float],
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 step_size: pulumi.Input[float],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "maximum_value", maximum_value)
        pulumi.set(__self__, "minimum_value", minimum_value)
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "step_size", step_size)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "maximum_value")

    @maximum_value.setter
    def maximum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_value", value)

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum_value")

    @minimum_value.setter
    def minimum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_value", value)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "step_size", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgsDict(TypedDict):
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlSliderDisplayOptionsArgs:
    def __init__(__self__, *,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlTextAreaArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        delimiter: NotRequired[pulumi.Input[str]]
        display_options: NotRequired[pulumi.Input['TextAreaControlDisplayOptionsArgsDict']]
elif False:
    DashboardDefinitionSheetParameterControlTextAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlTextAreaArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 display_options: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class DashboardDefinitionSheetParameterControlTextFieldArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['TextAreaControlDisplayOptionsArgsDict']]
elif False:
    DashboardDefinitionSheetParameterControlTextFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetParameterControlTextFieldArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class DashboardDefinitionSheetSheetControlLayoutsArgsDict(TypedDict):
        configuration: pulumi.Input['DashboardDefinitionSheetSheetControlLayoutsConfigurationArgsDict']
elif False:
    DashboardDefinitionSheetSheetControlLayoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetSheetControlLayoutsArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['DashboardDefinitionSheetSheetControlLayoutsConfigurationArgs']):
        pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['DashboardDefinitionSheetSheetControlLayoutsConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['DashboardDefinitionSheetSheetControlLayoutsConfigurationArgs']):
        pulumi.set(self, "configuration", value)


if not MYPY:
    class DashboardDefinitionSheetSheetControlLayoutsConfigurationArgsDict(TypedDict):
        grid_layout: NotRequired[pulumi.Input['GridLayoutArgsDict']]
elif False:
    DashboardDefinitionSheetSheetControlLayoutsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetSheetControlLayoutsConfigurationArgs:
    def __init__(__self__, *,
                 grid_layout: Optional[pulumi.Input['GridLayoutArgs']] = None):
        if grid_layout is not None:
            pulumi.set(__self__, "grid_layout", grid_layout)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional[pulumi.Input['GridLayoutArgs']]:
        return pulumi.get(self, "grid_layout")

    @grid_layout.setter
    def grid_layout(self, value: Optional[pulumi.Input['GridLayoutArgs']]):
        pulumi.set(self, "grid_layout", value)


if not MYPY:
    class DashboardDefinitionSheetTextBoxArgsDict(TypedDict):
        sheet_text_box_id: pulumi.Input[str]
        content: NotRequired[pulumi.Input[str]]
elif False:
    DashboardDefinitionSheetTextBoxArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardDefinitionSheetTextBoxArgs:
    def __init__(__self__, *,
                 sheet_text_box_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sheet_text_box_id", sheet_text_box_id)
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter(name="sheetTextBoxId")
    def sheet_text_box_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_text_box_id")

    @sheet_text_box_id.setter
    def sheet_text_box_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_text_box_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)


if not MYPY:
    class DashboardParametersArgsDict(TypedDict):
        date_time_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardParametersDateTimeParameterArgsDict']]]]
        """
        A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
        """
        decimal_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardParametersDecimalParameterArgsDict']]]]
        """
        A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
        """
        integer_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardParametersIntegerParameterArgsDict']]]]
        """
        A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
        """
        string_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['DashboardParametersStringParameterArgsDict']]]]
        """
        A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
        """
elif False:
    DashboardParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardParametersArgs:
    def __init__(__self__, *,
                 date_time_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersDateTimeParameterArgs']]]] = None,
                 decimal_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersDecimalParameterArgs']]]] = None,
                 integer_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersIntegerParameterArgs']]]] = None,
                 string_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersStringParameterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardParametersDateTimeParameterArgs']]] date_time_parameters: A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
        :param pulumi.Input[Sequence[pulumi.Input['DashboardParametersDecimalParameterArgs']]] decimal_parameters: A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
        :param pulumi.Input[Sequence[pulumi.Input['DashboardParametersIntegerParameterArgs']]] integer_parameters: A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
        :param pulumi.Input[Sequence[pulumi.Input['DashboardParametersStringParameterArgs']]] string_parameters: A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
        """
        if date_time_parameters is not None:
            pulumi.set(__self__, "date_time_parameters", date_time_parameters)
        if decimal_parameters is not None:
            pulumi.set(__self__, "decimal_parameters", decimal_parameters)
        if integer_parameters is not None:
            pulumi.set(__self__, "integer_parameters", integer_parameters)
        if string_parameters is not None:
            pulumi.set(__self__, "string_parameters", string_parameters)

    @property
    @pulumi.getter(name="dateTimeParameters")
    def date_time_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersDateTimeParameterArgs']]]]:
        """
        A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
        """
        return pulumi.get(self, "date_time_parameters")

    @date_time_parameters.setter
    def date_time_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersDateTimeParameterArgs']]]]):
        pulumi.set(self, "date_time_parameters", value)

    @property
    @pulumi.getter(name="decimalParameters")
    def decimal_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersDecimalParameterArgs']]]]:
        """
        A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
        """
        return pulumi.get(self, "decimal_parameters")

    @decimal_parameters.setter
    def decimal_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersDecimalParameterArgs']]]]):
        pulumi.set(self, "decimal_parameters", value)

    @property
    @pulumi.getter(name="integerParameters")
    def integer_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersIntegerParameterArgs']]]]:
        """
        A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
        """
        return pulumi.get(self, "integer_parameters")

    @integer_parameters.setter
    def integer_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersIntegerParameterArgs']]]]):
        pulumi.set(self, "integer_parameters", value)

    @property
    @pulumi.getter(name="stringParameters")
    def string_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersStringParameterArgs']]]]:
        """
        A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
        """
        return pulumi.get(self, "string_parameters")

    @string_parameters.setter
    def string_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParametersStringParameterArgs']]]]):
        pulumi.set(self, "string_parameters", value)


if not MYPY:
    class DashboardParametersDateTimeParameterArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the dashboard.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    DashboardParametersDateTimeParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardParametersDateTimeParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class DashboardParametersDecimalParameterArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the dashboard.
        """
        values: pulumi.Input[Sequence[pulumi.Input[float]]]
elif False:
    DashboardParametersDecimalParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardParametersDecimalParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[float]]]):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class DashboardParametersIntegerParameterArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the dashboard.
        """
        values: pulumi.Input[Sequence[pulumi.Input[int]]]
elif False:
    DashboardParametersIntegerParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardParametersIntegerParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class DashboardParametersStringParameterArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the dashboard.
        """
        values: pulumi.Input[Sequence[pulumi.Input[str]]]
elif False:
    DashboardParametersStringParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardParametersStringParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class DashboardPermissionArgsDict(TypedDict):
        actions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        principal: pulumi.Input[str]
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
elif False:
    DashboardPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardPermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: List of IAM actions to grant or revoke permissions on.
        :param pulumi.Input[str] principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)


if not MYPY:
    class DashboardSourceEntityArgsDict(TypedDict):
        source_template: NotRequired[pulumi.Input['DashboardSourceEntitySourceTemplateArgsDict']]
        """
        The source template. See source_template.
        """
elif False:
    DashboardSourceEntityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardSourceEntityArgs:
    def __init__(__self__, *,
                 source_template: Optional[pulumi.Input['DashboardSourceEntitySourceTemplateArgs']] = None):
        """
        :param pulumi.Input['DashboardSourceEntitySourceTemplateArgs'] source_template: The source template. See source_template.
        """
        if source_template is not None:
            pulumi.set(__self__, "source_template", source_template)

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional[pulumi.Input['DashboardSourceEntitySourceTemplateArgs']]:
        """
        The source template. See source_template.
        """
        return pulumi.get(self, "source_template")

    @source_template.setter
    def source_template(self, value: Optional[pulumi.Input['DashboardSourceEntitySourceTemplateArgs']]):
        pulumi.set(self, "source_template", value)


if not MYPY:
    class DashboardSourceEntitySourceTemplateArgsDict(TypedDict):
        arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        data_set_references: pulumi.Input[Sequence[pulumi.Input['DashboardSourceEntitySourceTemplateDataSetReferenceArgsDict']]]
        """
        List of dataset references. See data_set_references.
        """
elif False:
    DashboardSourceEntitySourceTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardSourceEntitySourceTemplateArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 data_set_references: pulumi.Input[Sequence[pulumi.Input['DashboardSourceEntitySourceTemplateDataSetReferenceArgs']]]):
        """
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the resource.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardSourceEntitySourceTemplateDataSetReferenceArgs']]] data_set_references: List of dataset references. See data_set_references.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "data_set_references", data_set_references)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="dataSetReferences")
    def data_set_references(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardSourceEntitySourceTemplateDataSetReferenceArgs']]]:
        """
        List of dataset references. See data_set_references.
        """
        return pulumi.get(self, "data_set_references")

    @data_set_references.setter
    def data_set_references(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardSourceEntitySourceTemplateDataSetReferenceArgs']]]):
        pulumi.set(self, "data_set_references", value)


if not MYPY:
    class DashboardSourceEntitySourceTemplateDataSetReferenceArgsDict(TypedDict):
        data_set_arn: pulumi.Input[str]
        """
        Dataset Amazon Resource Name (ARN).
        """
        data_set_placeholder: pulumi.Input[str]
        """
        Dataset placeholder.
        """
elif False:
    DashboardSourceEntitySourceTemplateDataSetReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DashboardSourceEntitySourceTemplateDataSetReferenceArgs:
    def __init__(__self__, *,
                 data_set_arn: pulumi.Input[str],
                 data_set_placeholder: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data_set_arn: Dataset Amazon Resource Name (ARN).
        :param pulumi.Input[str] data_set_placeholder: Dataset placeholder.
        """
        pulumi.set(__self__, "data_set_arn", data_set_arn)
        pulumi.set(__self__, "data_set_placeholder", data_set_placeholder)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> pulumi.Input[str]:
        """
        Dataset Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter(name="dataSetPlaceholder")
    def data_set_placeholder(self) -> pulumi.Input[str]:
        """
        Dataset placeholder.
        """
        return pulumi.get(self, "data_set_placeholder")

    @data_set_placeholder.setter
    def data_set_placeholder(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_placeholder", value)


if not MYPY:
    class DataLabelsOptionsArgsDict(TypedDict):
        category_label_visibility: NotRequired[pulumi.Input[str]]
        data_label_types: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataLabelsOptionsDataLabelTypeArgsDict']]]]
        label_color: NotRequired[pulumi.Input[str]]
        label_content: NotRequired[pulumi.Input[str]]
        label_font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
        measure_label_visibility: NotRequired[pulumi.Input[str]]
        overlap: NotRequired[pulumi.Input[str]]
        position: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    DataLabelsOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataLabelsOptionsArgs:
    def __init__(__self__, *,
                 category_label_visibility: Optional[pulumi.Input[str]] = None,
                 data_label_types: Optional[pulumi.Input[Sequence[pulumi.Input['DataLabelsOptionsDataLabelTypeArgs']]]] = None,
                 label_color: Optional[pulumi.Input[str]] = None,
                 label_content: Optional[pulumi.Input[str]] = None,
                 label_font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None,
                 measure_label_visibility: Optional[pulumi.Input[str]] = None,
                 overlap: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if category_label_visibility is not None:
            pulumi.set(__self__, "category_label_visibility", category_label_visibility)
        if data_label_types is not None:
            pulumi.set(__self__, "data_label_types", data_label_types)
        if label_color is not None:
            pulumi.set(__self__, "label_color", label_color)
        if label_content is not None:
            pulumi.set(__self__, "label_content", label_content)
        if label_font_configuration is not None:
            pulumi.set(__self__, "label_font_configuration", label_font_configuration)
        if measure_label_visibility is not None:
            pulumi.set(__self__, "measure_label_visibility", measure_label_visibility)
        if overlap is not None:
            pulumi.set(__self__, "overlap", overlap)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="categoryLabelVisibility")
    def category_label_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category_label_visibility")

    @category_label_visibility.setter
    def category_label_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category_label_visibility", value)

    @property
    @pulumi.getter(name="dataLabelTypes")
    def data_label_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataLabelsOptionsDataLabelTypeArgs']]]]:
        return pulumi.get(self, "data_label_types")

    @data_label_types.setter
    def data_label_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataLabelsOptionsDataLabelTypeArgs']]]]):
        pulumi.set(self, "data_label_types", value)

    @property
    @pulumi.getter(name="labelColor")
    def label_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_color")

    @label_color.setter
    def label_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_color", value)

    @property
    @pulumi.getter(name="labelContent")
    def label_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_content")

    @label_content.setter
    def label_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_content", value)

    @property
    @pulumi.getter(name="labelFontConfiguration")
    def label_font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "label_font_configuration")

    @label_font_configuration.setter
    def label_font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "label_font_configuration", value)

    @property
    @pulumi.getter(name="measureLabelVisibility")
    def measure_label_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "measure_label_visibility")

    @measure_label_visibility.setter
    def measure_label_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "measure_label_visibility", value)

    @property
    @pulumi.getter
    def overlap(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overlap")

    @overlap.setter
    def overlap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlap", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class DataLabelsOptionsDataLabelTypeArgsDict(TypedDict):
        data_path_label_type: NotRequired[pulumi.Input['DataLabelsOptionsDataLabelTypeDataPathLabelTypeArgsDict']]
        field_label_type: NotRequired[pulumi.Input['DataLabelsOptionsDataLabelTypeFieldLabelTypeArgsDict']]
        maximum_label_type: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        minimum_label_type: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        range_ends_label_type: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
elif False:
    DataLabelsOptionsDataLabelTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataLabelsOptionsDataLabelTypeArgs:
    def __init__(__self__, *,
                 data_path_label_type: Optional[pulumi.Input['DataLabelsOptionsDataLabelTypeDataPathLabelTypeArgs']] = None,
                 field_label_type: Optional[pulumi.Input['DataLabelsOptionsDataLabelTypeFieldLabelTypeArgs']] = None,
                 maximum_label_type: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 minimum_label_type: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 range_ends_label_type: Optional[pulumi.Input['SelectAllOptionsArgs']] = None):
        if data_path_label_type is not None:
            pulumi.set(__self__, "data_path_label_type", data_path_label_type)
        if field_label_type is not None:
            pulumi.set(__self__, "field_label_type", field_label_type)
        if maximum_label_type is not None:
            pulumi.set(__self__, "maximum_label_type", maximum_label_type)
        if minimum_label_type is not None:
            pulumi.set(__self__, "minimum_label_type", minimum_label_type)
        if range_ends_label_type is not None:
            pulumi.set(__self__, "range_ends_label_type", range_ends_label_type)

    @property
    @pulumi.getter(name="dataPathLabelType")
    def data_path_label_type(self) -> Optional[pulumi.Input['DataLabelsOptionsDataLabelTypeDataPathLabelTypeArgs']]:
        return pulumi.get(self, "data_path_label_type")

    @data_path_label_type.setter
    def data_path_label_type(self, value: Optional[pulumi.Input['DataLabelsOptionsDataLabelTypeDataPathLabelTypeArgs']]):
        pulumi.set(self, "data_path_label_type", value)

    @property
    @pulumi.getter(name="fieldLabelType")
    def field_label_type(self) -> Optional[pulumi.Input['DataLabelsOptionsDataLabelTypeFieldLabelTypeArgs']]:
        return pulumi.get(self, "field_label_type")

    @field_label_type.setter
    def field_label_type(self, value: Optional[pulumi.Input['DataLabelsOptionsDataLabelTypeFieldLabelTypeArgs']]):
        pulumi.set(self, "field_label_type", value)

    @property
    @pulumi.getter(name="maximumLabelType")
    def maximum_label_type(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "maximum_label_type")

    @maximum_label_type.setter
    def maximum_label_type(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "maximum_label_type", value)

    @property
    @pulumi.getter(name="minimumLabelType")
    def minimum_label_type(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "minimum_label_type")

    @minimum_label_type.setter
    def minimum_label_type(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "minimum_label_type", value)

    @property
    @pulumi.getter(name="rangeEndsLabelType")
    def range_ends_label_type(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "range_ends_label_type")

    @range_ends_label_type.setter
    def range_ends_label_type(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "range_ends_label_type", value)


if not MYPY:
    class DataLabelsOptionsDataLabelTypeDataPathLabelTypeArgsDict(TypedDict):
        field_id: NotRequired[pulumi.Input[str]]
        field_value: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    DataLabelsOptionsDataLabelTypeDataPathLabelTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataLabelsOptionsDataLabelTypeDataPathLabelTypeArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None,
                 field_value: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)
        if field_value is not None:
            pulumi.set(__self__, "field_value", field_value)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class DataLabelsOptionsDataLabelTypeFieldLabelTypeArgsDict(TypedDict):
        field_id: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    DataLabelsOptionsDataLabelTypeFieldLabelTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataLabelsOptionsDataLabelTypeFieldLabelTypeArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class DataPathValueArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        field_value: pulumi.Input[str]
elif False:
    DataPathValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataPathValueArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 field_value: pulumi.Input[str]):
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "field_value", field_value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_value", value)


if not MYPY:
    class DataSetColumnGroupArgsDict(TypedDict):
        geo_spatial_column_group: NotRequired[pulumi.Input['DataSetColumnGroupGeoSpatialColumnGroupArgsDict']]
        """
        Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
        """
elif False:
    DataSetColumnGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetColumnGroupArgs:
    def __init__(__self__, *,
                 geo_spatial_column_group: Optional[pulumi.Input['DataSetColumnGroupGeoSpatialColumnGroupArgs']] = None):
        """
        :param pulumi.Input['DataSetColumnGroupGeoSpatialColumnGroupArgs'] geo_spatial_column_group: Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
        """
        if geo_spatial_column_group is not None:
            pulumi.set(__self__, "geo_spatial_column_group", geo_spatial_column_group)

    @property
    @pulumi.getter(name="geoSpatialColumnGroup")
    def geo_spatial_column_group(self) -> Optional[pulumi.Input['DataSetColumnGroupGeoSpatialColumnGroupArgs']]:
        """
        Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
        """
        return pulumi.get(self, "geo_spatial_column_group")

    @geo_spatial_column_group.setter
    def geo_spatial_column_group(self, value: Optional[pulumi.Input['DataSetColumnGroupGeoSpatialColumnGroupArgs']]):
        pulumi.set(self, "geo_spatial_column_group", value)


if not MYPY:
    class DataSetColumnGroupGeoSpatialColumnGroupArgsDict(TypedDict):
        columns: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Columns in this hierarchy.
        """
        country_code: pulumi.Input[str]
        """
        Country code. Valid values are `US`.
        """
        name: pulumi.Input[str]
        """
        A display name for the hierarchy.
        """
elif False:
    DataSetColumnGroupGeoSpatialColumnGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetColumnGroupGeoSpatialColumnGroupArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 country_code: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] columns: Columns in this hierarchy.
        :param pulumi.Input[str] country_code: Country code. Valid values are `US`.
        :param pulumi.Input[str] name: A display name for the hierarchy.
        """
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Columns in this hierarchy.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[str]:
        """
        Country code. Valid values are `US`.
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A display name for the hierarchy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class DataSetColumnLevelPermissionRuleArgsDict(TypedDict):
        column_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of column names.
        """
        principals: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of ARNs for Amazon QuickSight users or groups.
        """
elif False:
    DataSetColumnLevelPermissionRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetColumnLevelPermissionRuleArgs:
    def __init__(__self__, *,
                 column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] column_names: An array of column names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] principals: An array of ARNs for Amazon QuickSight users or groups.
        """
        if column_names is not None:
            pulumi.set(__self__, "column_names", column_names)
        if principals is not None:
            pulumi.set(__self__, "principals", principals)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of column names.
        """
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter
    def principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of ARNs for Amazon QuickSight users or groups.
        """
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "principals", value)


if not MYPY:
    class DataSetDataSetUsageConfigurationArgsDict(TypedDict):
        disable_use_as_direct_query_source: NotRequired[pulumi.Input[bool]]
        """
        Controls whether a child dataset of a direct query can use this dataset as a source.
        """
        disable_use_as_imported_source: NotRequired[pulumi.Input[bool]]
        """
        Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
        """
elif False:
    DataSetDataSetUsageConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetDataSetUsageConfigurationArgs:
    def __init__(__self__, *,
                 disable_use_as_direct_query_source: Optional[pulumi.Input[bool]] = None,
                 disable_use_as_imported_source: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] disable_use_as_direct_query_source: Controls whether a child dataset of a direct query can use this dataset as a source.
        :param pulumi.Input[bool] disable_use_as_imported_source: Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
        """
        if disable_use_as_direct_query_source is not None:
            pulumi.set(__self__, "disable_use_as_direct_query_source", disable_use_as_direct_query_source)
        if disable_use_as_imported_source is not None:
            pulumi.set(__self__, "disable_use_as_imported_source", disable_use_as_imported_source)

    @property
    @pulumi.getter(name="disableUseAsDirectQuerySource")
    def disable_use_as_direct_query_source(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls whether a child dataset of a direct query can use this dataset as a source.
        """
        return pulumi.get(self, "disable_use_as_direct_query_source")

    @disable_use_as_direct_query_source.setter
    def disable_use_as_direct_query_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_use_as_direct_query_source", value)

    @property
    @pulumi.getter(name="disableUseAsImportedSource")
    def disable_use_as_imported_source(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
        """
        return pulumi.get(self, "disable_use_as_imported_source")

    @disable_use_as_imported_source.setter
    def disable_use_as_imported_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_use_as_imported_source", value)


if not MYPY:
    class DataSetFieldFolderArgsDict(TypedDict):
        field_folders_id: pulumi.Input[str]
        """
        Key of the field folder map.
        """
        columns: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        An array of column names to add to the folder. A column can only be in one folder.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Field folder description.
        """
elif False:
    DataSetFieldFolderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetFieldFolderArgs:
    def __init__(__self__, *,
                 field_folders_id: pulumi.Input[str],
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] field_folders_id: Key of the field folder map.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] columns: An array of column names to add to the folder. A column can only be in one folder.
        :param pulumi.Input[str] description: Field folder description.
        """
        pulumi.set(__self__, "field_folders_id", field_folders_id)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="fieldFoldersId")
    def field_folders_id(self) -> pulumi.Input[str]:
        """
        Key of the field folder map.
        """
        return pulumi.get(self, "field_folders_id")

    @field_folders_id.setter
    def field_folders_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_folders_id", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of column names to add to the folder. A column can only be in one folder.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Field folder description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class DataSetLogicalTableMapArgsDict(TypedDict):
        alias: pulumi.Input[str]
        """
        A display name for the logical table.
        """
        logical_table_map_id: pulumi.Input[str]
        """
        Key of the logical table map.
        """
        source: pulumi.Input['DataSetLogicalTableMapSourceArgsDict']
        """
        Source of this logical table. See source.
        """
        data_transforms: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformArgsDict']]]]
        """
        Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
        """
elif False:
    DataSetLogicalTableMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapArgs:
    def __init__(__self__, *,
                 alias: pulumi.Input[str],
                 logical_table_map_id: pulumi.Input[str],
                 source: pulumi.Input['DataSetLogicalTableMapSourceArgs'],
                 data_transforms: Optional[pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformArgs']]]] = None):
        """
        :param pulumi.Input[str] alias: A display name for the logical table.
        :param pulumi.Input[str] logical_table_map_id: Key of the logical table map.
        :param pulumi.Input['DataSetLogicalTableMapSourceArgs'] source: Source of this logical table. See source.
        :param pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformArgs']]] data_transforms: Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "logical_table_map_id", logical_table_map_id)
        pulumi.set(__self__, "source", source)
        if data_transforms is not None:
            pulumi.set(__self__, "data_transforms", data_transforms)

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Input[str]:
        """
        A display name for the logical table.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: pulumi.Input[str]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="logicalTableMapId")
    def logical_table_map_id(self) -> pulumi.Input[str]:
        """
        Key of the logical table map.
        """
        return pulumi.get(self, "logical_table_map_id")

    @logical_table_map_id.setter
    def logical_table_map_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "logical_table_map_id", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['DataSetLogicalTableMapSourceArgs']:
        """
        Source of this logical table. See source.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['DataSetLogicalTableMapSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="dataTransforms")
    def data_transforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformArgs']]]]:
        """
        Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
        """
        return pulumi.get(self, "data_transforms")

    @data_transforms.setter
    def data_transforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformArgs']]]]):
        pulumi.set(self, "data_transforms", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformArgsDict(TypedDict):
        cast_column_type_operation: NotRequired[pulumi.Input['DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgsDict']]
        """
        A transform operation that casts a column to a different type. See cast_column_type_operation.
        """
        create_columns_operation: NotRequired[pulumi.Input['DataSetLogicalTableMapDataTransformCreateColumnsOperationArgsDict']]
        """
        An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
        """
        filter_operation: NotRequired[pulumi.Input['DataSetLogicalTableMapDataTransformFilterOperationArgsDict']]
        """
        An operation that filters rows based on some condition. See filter_operation.
        """
        project_operation: NotRequired[pulumi.Input['DataSetLogicalTableMapDataTransformProjectOperationArgsDict']]
        """
        An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
        """
        rename_column_operation: NotRequired[pulumi.Input['DataSetLogicalTableMapDataTransformRenameColumnOperationArgsDict']]
        """
        An operation that renames a column. See rename_column_operation.
        """
        tag_column_operation: NotRequired[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationArgsDict']]
        """
        An operation that tags a column with additional information. See tag_column_operation.
        """
        untag_column_operation: NotRequired[pulumi.Input['DataSetLogicalTableMapDataTransformUntagColumnOperationArgsDict']]
        """
        A transform operation that removes tags associated with a column. See untag_column_operation.
        """
elif False:
    DataSetLogicalTableMapDataTransformArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformArgs:
    def __init__(__self__, *,
                 cast_column_type_operation: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs']] = None,
                 create_columns_operation: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs']] = None,
                 filter_operation: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformFilterOperationArgs']] = None,
                 project_operation: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformProjectOperationArgs']] = None,
                 rename_column_operation: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformRenameColumnOperationArgs']] = None,
                 tag_column_operation: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationArgs']] = None,
                 untag_column_operation: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformUntagColumnOperationArgs']] = None):
        """
        :param pulumi.Input['DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs'] cast_column_type_operation: A transform operation that casts a column to a different type. See cast_column_type_operation.
        :param pulumi.Input['DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs'] create_columns_operation: An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
        :param pulumi.Input['DataSetLogicalTableMapDataTransformFilterOperationArgs'] filter_operation: An operation that filters rows based on some condition. See filter_operation.
        :param pulumi.Input['DataSetLogicalTableMapDataTransformProjectOperationArgs'] project_operation: An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
        :param pulumi.Input['DataSetLogicalTableMapDataTransformRenameColumnOperationArgs'] rename_column_operation: An operation that renames a column. See rename_column_operation.
        :param pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationArgs'] tag_column_operation: An operation that tags a column with additional information. See tag_column_operation.
        :param pulumi.Input['DataSetLogicalTableMapDataTransformUntagColumnOperationArgs'] untag_column_operation: A transform operation that removes tags associated with a column. See untag_column_operation.
        """
        if cast_column_type_operation is not None:
            pulumi.set(__self__, "cast_column_type_operation", cast_column_type_operation)
        if create_columns_operation is not None:
            pulumi.set(__self__, "create_columns_operation", create_columns_operation)
        if filter_operation is not None:
            pulumi.set(__self__, "filter_operation", filter_operation)
        if project_operation is not None:
            pulumi.set(__self__, "project_operation", project_operation)
        if rename_column_operation is not None:
            pulumi.set(__self__, "rename_column_operation", rename_column_operation)
        if tag_column_operation is not None:
            pulumi.set(__self__, "tag_column_operation", tag_column_operation)
        if untag_column_operation is not None:
            pulumi.set(__self__, "untag_column_operation", untag_column_operation)

    @property
    @pulumi.getter(name="castColumnTypeOperation")
    def cast_column_type_operation(self) -> Optional[pulumi.Input['DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs']]:
        """
        A transform operation that casts a column to a different type. See cast_column_type_operation.
        """
        return pulumi.get(self, "cast_column_type_operation")

    @cast_column_type_operation.setter
    def cast_column_type_operation(self, value: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs']]):
        pulumi.set(self, "cast_column_type_operation", value)

    @property
    @pulumi.getter(name="createColumnsOperation")
    def create_columns_operation(self) -> Optional[pulumi.Input['DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs']]:
        """
        An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
        """
        return pulumi.get(self, "create_columns_operation")

    @create_columns_operation.setter
    def create_columns_operation(self, value: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs']]):
        pulumi.set(self, "create_columns_operation", value)

    @property
    @pulumi.getter(name="filterOperation")
    def filter_operation(self) -> Optional[pulumi.Input['DataSetLogicalTableMapDataTransformFilterOperationArgs']]:
        """
        An operation that filters rows based on some condition. See filter_operation.
        """
        return pulumi.get(self, "filter_operation")

    @filter_operation.setter
    def filter_operation(self, value: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformFilterOperationArgs']]):
        pulumi.set(self, "filter_operation", value)

    @property
    @pulumi.getter(name="projectOperation")
    def project_operation(self) -> Optional[pulumi.Input['DataSetLogicalTableMapDataTransformProjectOperationArgs']]:
        """
        An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
        """
        return pulumi.get(self, "project_operation")

    @project_operation.setter
    def project_operation(self, value: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformProjectOperationArgs']]):
        pulumi.set(self, "project_operation", value)

    @property
    @pulumi.getter(name="renameColumnOperation")
    def rename_column_operation(self) -> Optional[pulumi.Input['DataSetLogicalTableMapDataTransformRenameColumnOperationArgs']]:
        """
        An operation that renames a column. See rename_column_operation.
        """
        return pulumi.get(self, "rename_column_operation")

    @rename_column_operation.setter
    def rename_column_operation(self, value: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformRenameColumnOperationArgs']]):
        pulumi.set(self, "rename_column_operation", value)

    @property
    @pulumi.getter(name="tagColumnOperation")
    def tag_column_operation(self) -> Optional[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationArgs']]:
        """
        An operation that tags a column with additional information. See tag_column_operation.
        """
        return pulumi.get(self, "tag_column_operation")

    @tag_column_operation.setter
    def tag_column_operation(self, value: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationArgs']]):
        pulumi.set(self, "tag_column_operation", value)

    @property
    @pulumi.getter(name="untagColumnOperation")
    def untag_column_operation(self) -> Optional[pulumi.Input['DataSetLogicalTableMapDataTransformUntagColumnOperationArgs']]:
        """
        A transform operation that removes tags associated with a column. See untag_column_operation.
        """
        return pulumi.get(self, "untag_column_operation")

    @untag_column_operation.setter
    def untag_column_operation(self, value: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformUntagColumnOperationArgs']]):
        pulumi.set(self, "untag_column_operation", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        """
        Column name.
        """
        new_column_type: pulumi.Input[str]
        """
        New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
        """
        format: NotRequired[pulumi.Input[str]]
        """
        When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
        """
elif False:
    DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 new_column_type: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] column_name: Column name.
        :param pulumi.Input[str] new_column_type: New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
        :param pulumi.Input[str] format: When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "new_column_type", new_column_type)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        """
        Column name.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="newColumnType")
    def new_column_type(self) -> pulumi.Input[str]:
        """
        New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
        """
        return pulumi.get(self, "new_column_type")

    @new_column_type.setter
    def new_column_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_column_type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformCreateColumnsOperationArgsDict(TypedDict):
        columns: pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgsDict']]]
        """
        Calculated columns to create. See columns.
        """
elif False:
    DataSetLogicalTableMapDataTransformCreateColumnsOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs']]] columns: Calculated columns to create. See columns.
        """
        pulumi.set(__self__, "columns", columns)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs']]]:
        """
        Calculated columns to create. See columns.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs']]]):
        pulumi.set(self, "columns", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgsDict(TypedDict):
        column_id: pulumi.Input[str]
        """
        A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
        """
        column_name: pulumi.Input[str]
        """
        Column name.
        """
        expression: pulumi.Input[str]
        """
        An expression that defines the calculated column.
        """
elif False:
    DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs:
    def __init__(__self__, *,
                 column_id: pulumi.Input[str],
                 column_name: pulumi.Input[str],
                 expression: pulumi.Input[str]):
        """
        :param pulumi.Input[str] column_id: A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
        :param pulumi.Input[str] column_name: Column name.
        :param pulumi.Input[str] expression: An expression that defines the calculated column.
        """
        pulumi.set(__self__, "column_id", column_id)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="columnId")
    def column_id(self) -> pulumi.Input[str]:
        """
        A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
        """
        return pulumi.get(self, "column_id")

    @column_id.setter
    def column_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_id", value)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        """
        Column name.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        An expression that defines the calculated column.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformFilterOperationArgsDict(TypedDict):
        condition_expression: pulumi.Input[str]
        """
        An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
        """
elif False:
    DataSetLogicalTableMapDataTransformFilterOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformFilterOperationArgs:
    def __init__(__self__, *,
                 condition_expression: pulumi.Input[str]):
        """
        :param pulumi.Input[str] condition_expression: An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
        """
        pulumi.set(__self__, "condition_expression", condition_expression)

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> pulumi.Input[str]:
        """
        An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
        """
        return pulumi.get(self, "condition_expression")

    @condition_expression.setter
    def condition_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition_expression", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformProjectOperationArgsDict(TypedDict):
        projected_columns: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Projected columns.
        """
elif False:
    DataSetLogicalTableMapDataTransformProjectOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformProjectOperationArgs:
    def __init__(__self__, *,
                 projected_columns: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] projected_columns: Projected columns.
        """
        pulumi.set(__self__, "projected_columns", projected_columns)

    @property
    @pulumi.getter(name="projectedColumns")
    def projected_columns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Projected columns.
        """
        return pulumi.get(self, "projected_columns")

    @projected_columns.setter
    def projected_columns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "projected_columns", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformRenameColumnOperationArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        """
        Column to be renamed.
        """
        new_column_name: pulumi.Input[str]
        """
        New name for the column.
        """
elif False:
    DataSetLogicalTableMapDataTransformRenameColumnOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformRenameColumnOperationArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 new_column_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] column_name: Column to be renamed.
        :param pulumi.Input[str] new_column_name: New name for the column.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "new_column_name", new_column_name)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        """
        Column to be renamed.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="newColumnName")
    def new_column_name(self) -> pulumi.Input[str]:
        """
        New name for the column.
        """
        return pulumi.get(self, "new_column_name")

    @new_column_name.setter
    def new_column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_column_name", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformTagColumnOperationArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        """
        Column name.
        """
        tags: pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationTagArgsDict']]]
        """
        The dataset column tag, currently only used for geospatial type tagging. See tags.
        """
elif False:
    DataSetLogicalTableMapDataTransformTagColumnOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformTagColumnOperationArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 tags: pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs']]]):
        """
        :param pulumi.Input[str] column_name: Column name.
        :param pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs']]] tags: The dataset column tag, currently only used for geospatial type tagging. See tags.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        """
        Column name.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs']]]:
        """
        The dataset column tag, currently only used for geospatial type tagging. See tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Sequence[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs']]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformTagColumnOperationTagArgsDict(TypedDict):
        column_description: NotRequired[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgsDict']]
        """
        A description for a column. See column_description.
        """
        column_geographic_role: NotRequired[pulumi.Input[str]]
        """
        A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
        """
elif False:
    DataSetLogicalTableMapDataTransformTagColumnOperationTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs:
    def __init__(__self__, *,
                 column_description: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs']] = None,
                 column_geographic_role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs'] column_description: A description for a column. See column_description.
        :param pulumi.Input[str] column_geographic_role: A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
        """
        if column_description is not None:
            pulumi.set(__self__, "column_description", column_description)
        if column_geographic_role is not None:
            pulumi.set(__self__, "column_geographic_role", column_geographic_role)

    @property
    @pulumi.getter(name="columnDescription")
    def column_description(self) -> Optional[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs']]:
        """
        A description for a column. See column_description.
        """
        return pulumi.get(self, "column_description")

    @column_description.setter
    def column_description(self, value: Optional[pulumi.Input['DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs']]):
        pulumi.set(self, "column_description", value)

    @property
    @pulumi.getter(name="columnGeographicRole")
    def column_geographic_role(self) -> Optional[pulumi.Input[str]]:
        """
        A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
        """
        return pulumi.get(self, "column_geographic_role")

    @column_geographic_role.setter
    def column_geographic_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_geographic_role", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgsDict(TypedDict):
        text: NotRequired[pulumi.Input[str]]
        """
        The text of a description for a column.
        """
elif False:
    DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs:
    def __init__(__self__, *,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] text: The text of a description for a column.
        """
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        The text of a description for a column.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


if not MYPY:
    class DataSetLogicalTableMapDataTransformUntagColumnOperationArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        """
        Column name.
        """
        tag_names: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The column tags to remove from this column.
        """
elif False:
    DataSetLogicalTableMapDataTransformUntagColumnOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapDataTransformUntagColumnOperationArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 tag_names: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] column_name: Column name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_names: The column tags to remove from this column.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "tag_names", tag_names)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        """
        Column name.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="tagNames")
    def tag_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The column tags to remove from this column.
        """
        return pulumi.get(self, "tag_names")

    @tag_names.setter
    def tag_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tag_names", value)


if not MYPY:
    class DataSetLogicalTableMapSourceArgsDict(TypedDict):
        data_set_arn: NotRequired[pulumi.Input[str]]
        """
        ARN of the parent data set.
        """
        join_instruction: NotRequired[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionArgsDict']]
        """
        Specifies the result of a join of two logical tables. See join_instruction.
        """
        physical_table_id: NotRequired[pulumi.Input[str]]
        """
        Physical table ID.
        """
elif False:
    DataSetLogicalTableMapSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapSourceArgs:
    def __init__(__self__, *,
                 data_set_arn: Optional[pulumi.Input[str]] = None,
                 join_instruction: Optional[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionArgs']] = None,
                 physical_table_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_set_arn: ARN of the parent data set.
        :param pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionArgs'] join_instruction: Specifies the result of a join of two logical tables. See join_instruction.
        :param pulumi.Input[str] physical_table_id: Physical table ID.
        """
        if data_set_arn is not None:
            pulumi.set(__self__, "data_set_arn", data_set_arn)
        if join_instruction is not None:
            pulumi.set(__self__, "join_instruction", join_instruction)
        if physical_table_id is not None:
            pulumi.set(__self__, "physical_table_id", physical_table_id)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of the parent data set.
        """
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter(name="joinInstruction")
    def join_instruction(self) -> Optional[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionArgs']]:
        """
        Specifies the result of a join of two logical tables. See join_instruction.
        """
        return pulumi.get(self, "join_instruction")

    @join_instruction.setter
    def join_instruction(self, value: Optional[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionArgs']]):
        pulumi.set(self, "join_instruction", value)

    @property
    @pulumi.getter(name="physicalTableId")
    def physical_table_id(self) -> Optional[pulumi.Input[str]]:
        """
        Physical table ID.
        """
        return pulumi.get(self, "physical_table_id")

    @physical_table_id.setter
    def physical_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "physical_table_id", value)


if not MYPY:
    class DataSetLogicalTableMapSourceJoinInstructionArgsDict(TypedDict):
        left_operand: pulumi.Input[str]
        """
        Operand on the left side of a join.
        """
        on_clause: pulumi.Input[str]
        """
        Join instructions provided in the ON clause of a join.
        """
        right_operand: pulumi.Input[str]
        """
        Operand on the right side of a join.
        """
        type: pulumi.Input[str]
        """
        Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
        """
        left_join_key_properties: NotRequired[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgsDict']]
        """
        Join key properties of the left operand. See left_join_key_properties.
        """
        right_join_key_properties: NotRequired[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgsDict']]
        """
        Join key properties of the right operand. See right_join_key_properties.
        """
elif False:
    DataSetLogicalTableMapSourceJoinInstructionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapSourceJoinInstructionArgs:
    def __init__(__self__, *,
                 left_operand: pulumi.Input[str],
                 on_clause: pulumi.Input[str],
                 right_operand: pulumi.Input[str],
                 type: pulumi.Input[str],
                 left_join_key_properties: Optional[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs']] = None,
                 right_join_key_properties: Optional[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs']] = None):
        """
        :param pulumi.Input[str] left_operand: Operand on the left side of a join.
        :param pulumi.Input[str] on_clause: Join instructions provided in the ON clause of a join.
        :param pulumi.Input[str] right_operand: Operand on the right side of a join.
        :param pulumi.Input[str] type: Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
        :param pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs'] left_join_key_properties: Join key properties of the left operand. See left_join_key_properties.
        :param pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs'] right_join_key_properties: Join key properties of the right operand. See right_join_key_properties.
        """
        pulumi.set(__self__, "left_operand", left_operand)
        pulumi.set(__self__, "on_clause", on_clause)
        pulumi.set(__self__, "right_operand", right_operand)
        pulumi.set(__self__, "type", type)
        if left_join_key_properties is not None:
            pulumi.set(__self__, "left_join_key_properties", left_join_key_properties)
        if right_join_key_properties is not None:
            pulumi.set(__self__, "right_join_key_properties", right_join_key_properties)

    @property
    @pulumi.getter(name="leftOperand")
    def left_operand(self) -> pulumi.Input[str]:
        """
        Operand on the left side of a join.
        """
        return pulumi.get(self, "left_operand")

    @left_operand.setter
    def left_operand(self, value: pulumi.Input[str]):
        pulumi.set(self, "left_operand", value)

    @property
    @pulumi.getter(name="onClause")
    def on_clause(self) -> pulumi.Input[str]:
        """
        Join instructions provided in the ON clause of a join.
        """
        return pulumi.get(self, "on_clause")

    @on_clause.setter
    def on_clause(self, value: pulumi.Input[str]):
        pulumi.set(self, "on_clause", value)

    @property
    @pulumi.getter(name="rightOperand")
    def right_operand(self) -> pulumi.Input[str]:
        """
        Operand on the right side of a join.
        """
        return pulumi.get(self, "right_operand")

    @right_operand.setter
    def right_operand(self, value: pulumi.Input[str]):
        pulumi.set(self, "right_operand", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="leftJoinKeyProperties")
    def left_join_key_properties(self) -> Optional[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs']]:
        """
        Join key properties of the left operand. See left_join_key_properties.
        """
        return pulumi.get(self, "left_join_key_properties")

    @left_join_key_properties.setter
    def left_join_key_properties(self, value: Optional[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs']]):
        pulumi.set(self, "left_join_key_properties", value)

    @property
    @pulumi.getter(name="rightJoinKeyProperties")
    def right_join_key_properties(self) -> Optional[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs']]:
        """
        Join key properties of the right operand. See right_join_key_properties.
        """
        return pulumi.get(self, "right_join_key_properties")

    @right_join_key_properties.setter
    def right_join_key_properties(self, value: Optional[pulumi.Input['DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs']]):
        pulumi.set(self, "right_join_key_properties", value)


if not MYPY:
    class DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgsDict(TypedDict):
        unique_key: NotRequired[pulumi.Input[bool]]
        """
        A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
        """
elif False:
    DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs:
    def __init__(__self__, *,
                 unique_key: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] unique_key: A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
        """
        if unique_key is not None:
            pulumi.set(__self__, "unique_key", unique_key)

    @property
    @pulumi.getter(name="uniqueKey")
    def unique_key(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
        """
        return pulumi.get(self, "unique_key")

    @unique_key.setter
    def unique_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unique_key", value)


if not MYPY:
    class DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgsDict(TypedDict):
        unique_key: NotRequired[pulumi.Input[bool]]
        """
        A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
        """
elif False:
    DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs:
    def __init__(__self__, *,
                 unique_key: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] unique_key: A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
        """
        if unique_key is not None:
            pulumi.set(__self__, "unique_key", unique_key)

    @property
    @pulumi.getter(name="uniqueKey")
    def unique_key(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
        """
        return pulumi.get(self, "unique_key")

    @unique_key.setter
    def unique_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unique_key", value)


if not MYPY:
    class DataSetOutputColumnArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        Field folder description.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dataset.
        """
        type: NotRequired[pulumi.Input[str]]
elif False:
    DataSetOutputColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetOutputColumnArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Field folder description.
        :param pulumi.Input[str] name: Display name for the dataset.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Field folder description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DataSetPermissionArgsDict(TypedDict):
        actions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        principal: pulumi.Input[str]
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
elif False:
    DataSetPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetPermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: List of IAM actions to grant or revoke permissions on.
        :param pulumi.Input[str] principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)


if not MYPY:
    class DataSetPhysicalTableMapArgsDict(TypedDict):
        physical_table_map_id: pulumi.Input[str]
        """
        Key of the physical table map.
        """
        custom_sql: NotRequired[pulumi.Input['DataSetPhysicalTableMapCustomSqlArgsDict']]
        """
        A physical table type built from the results of the custom SQL query. See custom_sql.
        """
        relational_table: NotRequired[pulumi.Input['DataSetPhysicalTableMapRelationalTableArgsDict']]
        """
        A physical table type for relational data sources. See relational_table.
        """
        s3_source: NotRequired[pulumi.Input['DataSetPhysicalTableMapS3SourceArgsDict']]
        """
        A physical table type for as S3 data source. See s3_source.
        """
elif False:
    DataSetPhysicalTableMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetPhysicalTableMapArgs:
    def __init__(__self__, *,
                 physical_table_map_id: pulumi.Input[str],
                 custom_sql: Optional[pulumi.Input['DataSetPhysicalTableMapCustomSqlArgs']] = None,
                 relational_table: Optional[pulumi.Input['DataSetPhysicalTableMapRelationalTableArgs']] = None,
                 s3_source: Optional[pulumi.Input['DataSetPhysicalTableMapS3SourceArgs']] = None):
        """
        :param pulumi.Input[str] physical_table_map_id: Key of the physical table map.
        :param pulumi.Input['DataSetPhysicalTableMapCustomSqlArgs'] custom_sql: A physical table type built from the results of the custom SQL query. See custom_sql.
        :param pulumi.Input['DataSetPhysicalTableMapRelationalTableArgs'] relational_table: A physical table type for relational data sources. See relational_table.
        :param pulumi.Input['DataSetPhysicalTableMapS3SourceArgs'] s3_source: A physical table type for as S3 data source. See s3_source.
        """
        pulumi.set(__self__, "physical_table_map_id", physical_table_map_id)
        if custom_sql is not None:
            pulumi.set(__self__, "custom_sql", custom_sql)
        if relational_table is not None:
            pulumi.set(__self__, "relational_table", relational_table)
        if s3_source is not None:
            pulumi.set(__self__, "s3_source", s3_source)

    @property
    @pulumi.getter(name="physicalTableMapId")
    def physical_table_map_id(self) -> pulumi.Input[str]:
        """
        Key of the physical table map.
        """
        return pulumi.get(self, "physical_table_map_id")

    @physical_table_map_id.setter
    def physical_table_map_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "physical_table_map_id", value)

    @property
    @pulumi.getter(name="customSql")
    def custom_sql(self) -> Optional[pulumi.Input['DataSetPhysicalTableMapCustomSqlArgs']]:
        """
        A physical table type built from the results of the custom SQL query. See custom_sql.
        """
        return pulumi.get(self, "custom_sql")

    @custom_sql.setter
    def custom_sql(self, value: Optional[pulumi.Input['DataSetPhysicalTableMapCustomSqlArgs']]):
        pulumi.set(self, "custom_sql", value)

    @property
    @pulumi.getter(name="relationalTable")
    def relational_table(self) -> Optional[pulumi.Input['DataSetPhysicalTableMapRelationalTableArgs']]:
        """
        A physical table type for relational data sources. See relational_table.
        """
        return pulumi.get(self, "relational_table")

    @relational_table.setter
    def relational_table(self, value: Optional[pulumi.Input['DataSetPhysicalTableMapRelationalTableArgs']]):
        pulumi.set(self, "relational_table", value)

    @property
    @pulumi.getter(name="s3Source")
    def s3_source(self) -> Optional[pulumi.Input['DataSetPhysicalTableMapS3SourceArgs']]:
        """
        A physical table type for as S3 data source. See s3_source.
        """
        return pulumi.get(self, "s3_source")

    @s3_source.setter
    def s3_source(self, value: Optional[pulumi.Input['DataSetPhysicalTableMapS3SourceArgs']]):
        pulumi.set(self, "s3_source", value)


if not MYPY:
    class DataSetPhysicalTableMapCustomSqlArgsDict(TypedDict):
        data_source_arn: pulumi.Input[str]
        """
        ARN of the data source.
        """
        name: pulumi.Input[str]
        """
        Display name for the SQL query result.
        """
        sql_query: pulumi.Input[str]
        """
        SQL query.
        """
        columns: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapCustomSqlColumnArgsDict']]]]
        """
        Column schema from the SQL query result set. See columns.
        """
elif False:
    DataSetPhysicalTableMapCustomSqlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetPhysicalTableMapCustomSqlArgs:
    def __init__(__self__, *,
                 data_source_arn: pulumi.Input[str],
                 name: pulumi.Input[str],
                 sql_query: pulumi.Input[str],
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapCustomSqlColumnArgs']]]] = None):
        """
        :param pulumi.Input[str] data_source_arn: ARN of the data source.
        :param pulumi.Input[str] name: Display name for the SQL query result.
        :param pulumi.Input[str] sql_query: SQL query.
        :param pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapCustomSqlColumnArgs']]] columns: Column schema from the SQL query result set. See columns.
        """
        pulumi.set(__self__, "data_source_arn", data_source_arn)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sql_query", sql_query)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)

    @property
    @pulumi.getter(name="dataSourceArn")
    def data_source_arn(self) -> pulumi.Input[str]:
        """
        ARN of the data source.
        """
        return pulumi.get(self, "data_source_arn")

    @data_source_arn.setter
    def data_source_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source_arn", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the SQL query result.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sqlQuery")
    def sql_query(self) -> pulumi.Input[str]:
        """
        SQL query.
        """
        return pulumi.get(self, "sql_query")

    @sql_query.setter
    def sql_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "sql_query", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapCustomSqlColumnArgs']]]]:
        """
        Column schema from the SQL query result set. See columns.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapCustomSqlColumnArgs']]]]):
        pulumi.set(self, "columns", value)


if not MYPY:
    class DataSetPhysicalTableMapCustomSqlColumnArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of this column in the underlying data source.
        """
        type: pulumi.Input[str]
        """
        Data type of the column.
        """
elif False:
    DataSetPhysicalTableMapCustomSqlColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetPhysicalTableMapCustomSqlColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of this column in the underlying data source.
        :param pulumi.Input[str] type: Data type of the column.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of this column in the underlying data source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Data type of the column.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DataSetPhysicalTableMapRelationalTableArgsDict(TypedDict):
        data_source_arn: pulumi.Input[str]
        """
        ARN of the data source.
        """
        input_columns: pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapRelationalTableInputColumnArgsDict']]]
        """
        Column schema of the table. See input_columns.
        """
        name: pulumi.Input[str]
        """
        Name of the relational table.
        """
        catalog: NotRequired[pulumi.Input[str]]
        """
        Catalog associated with the table.
        """
        schema: NotRequired[pulumi.Input[str]]
        """
        Schema name. This name applies to certain relational database engines.
        """
elif False:
    DataSetPhysicalTableMapRelationalTableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetPhysicalTableMapRelationalTableArgs:
    def __init__(__self__, *,
                 data_source_arn: pulumi.Input[str],
                 input_columns: pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapRelationalTableInputColumnArgs']]],
                 name: pulumi.Input[str],
                 catalog: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source_arn: ARN of the data source.
        :param pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapRelationalTableInputColumnArgs']]] input_columns: Column schema of the table. See input_columns.
        :param pulumi.Input[str] name: Name of the relational table.
        :param pulumi.Input[str] catalog: Catalog associated with the table.
        :param pulumi.Input[str] schema: Schema name. This name applies to certain relational database engines.
        """
        pulumi.set(__self__, "data_source_arn", data_source_arn)
        pulumi.set(__self__, "input_columns", input_columns)
        pulumi.set(__self__, "name", name)
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="dataSourceArn")
    def data_source_arn(self) -> pulumi.Input[str]:
        """
        ARN of the data source.
        """
        return pulumi.get(self, "data_source_arn")

    @data_source_arn.setter
    def data_source_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source_arn", value)

    @property
    @pulumi.getter(name="inputColumns")
    def input_columns(self) -> pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapRelationalTableInputColumnArgs']]]:
        """
        Column schema of the table. See input_columns.
        """
        return pulumi.get(self, "input_columns")

    @input_columns.setter
    def input_columns(self, value: pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapRelationalTableInputColumnArgs']]]):
        pulumi.set(self, "input_columns", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the relational table.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog associated with the table.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        Schema name. This name applies to certain relational database engines.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


if not MYPY:
    class DataSetPhysicalTableMapRelationalTableInputColumnArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of this column in the underlying data source.
        """
        type: pulumi.Input[str]
        """
        Data type of the column.
        """
elif False:
    DataSetPhysicalTableMapRelationalTableInputColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetPhysicalTableMapRelationalTableInputColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of this column in the underlying data source.
        :param pulumi.Input[str] type: Data type of the column.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of this column in the underlying data source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Data type of the column.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DataSetPhysicalTableMapS3SourceArgsDict(TypedDict):
        data_source_arn: pulumi.Input[str]
        """
        ARN of the data source.
        """
        input_columns: pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapS3SourceInputColumnArgsDict']]]
        """
        Column schema of the table. See input_columns.
        """
        upload_settings: pulumi.Input['DataSetPhysicalTableMapS3SourceUploadSettingsArgsDict']
        """
        Information about the format for the S3 source file or files. See upload_settings.
        """
elif False:
    DataSetPhysicalTableMapS3SourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetPhysicalTableMapS3SourceArgs:
    def __init__(__self__, *,
                 data_source_arn: pulumi.Input[str],
                 input_columns: pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapS3SourceInputColumnArgs']]],
                 upload_settings: pulumi.Input['DataSetPhysicalTableMapS3SourceUploadSettingsArgs']):
        """
        :param pulumi.Input[str] data_source_arn: ARN of the data source.
        :param pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapS3SourceInputColumnArgs']]] input_columns: Column schema of the table. See input_columns.
        :param pulumi.Input['DataSetPhysicalTableMapS3SourceUploadSettingsArgs'] upload_settings: Information about the format for the S3 source file or files. See upload_settings.
        """
        pulumi.set(__self__, "data_source_arn", data_source_arn)
        pulumi.set(__self__, "input_columns", input_columns)
        pulumi.set(__self__, "upload_settings", upload_settings)

    @property
    @pulumi.getter(name="dataSourceArn")
    def data_source_arn(self) -> pulumi.Input[str]:
        """
        ARN of the data source.
        """
        return pulumi.get(self, "data_source_arn")

    @data_source_arn.setter
    def data_source_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source_arn", value)

    @property
    @pulumi.getter(name="inputColumns")
    def input_columns(self) -> pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapS3SourceInputColumnArgs']]]:
        """
        Column schema of the table. See input_columns.
        """
        return pulumi.get(self, "input_columns")

    @input_columns.setter
    def input_columns(self, value: pulumi.Input[Sequence[pulumi.Input['DataSetPhysicalTableMapS3SourceInputColumnArgs']]]):
        pulumi.set(self, "input_columns", value)

    @property
    @pulumi.getter(name="uploadSettings")
    def upload_settings(self) -> pulumi.Input['DataSetPhysicalTableMapS3SourceUploadSettingsArgs']:
        """
        Information about the format for the S3 source file or files. See upload_settings.
        """
        return pulumi.get(self, "upload_settings")

    @upload_settings.setter
    def upload_settings(self, value: pulumi.Input['DataSetPhysicalTableMapS3SourceUploadSettingsArgs']):
        pulumi.set(self, "upload_settings", value)


if not MYPY:
    class DataSetPhysicalTableMapS3SourceInputColumnArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of this column in the underlying data source.
        """
        type: pulumi.Input[str]
        """
        Data type of the column.
        """
elif False:
    DataSetPhysicalTableMapS3SourceInputColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetPhysicalTableMapS3SourceInputColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of this column in the underlying data source.
        :param pulumi.Input[str] type: Data type of the column.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of this column in the underlying data source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Data type of the column.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class DataSetPhysicalTableMapS3SourceUploadSettingsArgsDict(TypedDict):
        contains_header: NotRequired[pulumi.Input[bool]]
        """
        Whether the file has a header row, or the files each have a header row.
        """
        delimiter: NotRequired[pulumi.Input[str]]
        """
        Delimiter between values in the file.
        """
        format: NotRequired[pulumi.Input[str]]
        """
        File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
        """
        start_from_row: NotRequired[pulumi.Input[int]]
        """
        A row number to start reading data from.
        """
        text_qualifier: NotRequired[pulumi.Input[str]]
        """
        Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
        """
elif False:
    DataSetPhysicalTableMapS3SourceUploadSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetPhysicalTableMapS3SourceUploadSettingsArgs:
    def __init__(__self__, *,
                 contains_header: Optional[pulumi.Input[bool]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 start_from_row: Optional[pulumi.Input[int]] = None,
                 text_qualifier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] contains_header: Whether the file has a header row, or the files each have a header row.
        :param pulumi.Input[str] delimiter: Delimiter between values in the file.
        :param pulumi.Input[str] format: File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
        :param pulumi.Input[int] start_from_row: A row number to start reading data from.
        :param pulumi.Input[str] text_qualifier: Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
        """
        if contains_header is not None:
            pulumi.set(__self__, "contains_header", contains_header)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if start_from_row is not None:
            pulumi.set(__self__, "start_from_row", start_from_row)
        if text_qualifier is not None:
            pulumi.set(__self__, "text_qualifier", text_qualifier)

    @property
    @pulumi.getter(name="containsHeader")
    def contains_header(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the file has a header row, or the files each have a header row.
        """
        return pulumi.get(self, "contains_header")

    @contains_header.setter
    def contains_header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_header", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        Delimiter between values in the file.
        """
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="startFromRow")
    def start_from_row(self) -> Optional[pulumi.Input[int]]:
        """
        A row number to start reading data from.
        """
        return pulumi.get(self, "start_from_row")

    @start_from_row.setter
    def start_from_row(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_from_row", value)

    @property
    @pulumi.getter(name="textQualifier")
    def text_qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
        """
        return pulumi.get(self, "text_qualifier")

    @text_qualifier.setter
    def text_qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_qualifier", value)


if not MYPY:
    class DataSetRefreshPropertiesArgsDict(TypedDict):
        refresh_configuration: pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationArgsDict']
        """
        The refresh configuration for the data set. See refresh_configuration.
        """
elif False:
    DataSetRefreshPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetRefreshPropertiesArgs:
    def __init__(__self__, *,
                 refresh_configuration: pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationArgs']):
        """
        :param pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationArgs'] refresh_configuration: The refresh configuration for the data set. See refresh_configuration.
        """
        pulumi.set(__self__, "refresh_configuration", refresh_configuration)

    @property
    @pulumi.getter(name="refreshConfiguration")
    def refresh_configuration(self) -> pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationArgs']:
        """
        The refresh configuration for the data set. See refresh_configuration.
        """
        return pulumi.get(self, "refresh_configuration")

    @refresh_configuration.setter
    def refresh_configuration(self, value: pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationArgs']):
        pulumi.set(self, "refresh_configuration", value)


if not MYPY:
    class DataSetRefreshPropertiesRefreshConfigurationArgsDict(TypedDict):
        incremental_refresh: pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgsDict']
        """
        The incremental refresh for the data set. See incremental_refresh.
        """
elif False:
    DataSetRefreshPropertiesRefreshConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetRefreshPropertiesRefreshConfigurationArgs:
    def __init__(__self__, *,
                 incremental_refresh: pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs']):
        """
        :param pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs'] incremental_refresh: The incremental refresh for the data set. See incremental_refresh.
        """
        pulumi.set(__self__, "incremental_refresh", incremental_refresh)

    @property
    @pulumi.getter(name="incrementalRefresh")
    def incremental_refresh(self) -> pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs']:
        """
        The incremental refresh for the data set. See incremental_refresh.
        """
        return pulumi.get(self, "incremental_refresh")

    @incremental_refresh.setter
    def incremental_refresh(self, value: pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs']):
        pulumi.set(self, "incremental_refresh", value)


if not MYPY:
    class DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgsDict(TypedDict):
        lookback_window: pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgsDict']
        """
        The lookback window setup for an incremental refresh configuration. See lookback_window.
        """
elif False:
    DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs:
    def __init__(__self__, *,
                 lookback_window: pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs']):
        """
        :param pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs'] lookback_window: The lookback window setup for an incremental refresh configuration. See lookback_window.
        """
        pulumi.set(__self__, "lookback_window", lookback_window)

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs']:
        """
        The lookback window setup for an incremental refresh configuration. See lookback_window.
        """
        return pulumi.get(self, "lookback_window")

    @lookback_window.setter
    def lookback_window(self, value: pulumi.Input['DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs']):
        pulumi.set(self, "lookback_window", value)


if not MYPY:
    class DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        """
        The name of the lookback window column.
        """
        size: pulumi.Input[int]
        """
        The lookback window column size.
        """
        size_unit: pulumi.Input[str]
        """
        The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
        """
elif False:
    DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 size: pulumi.Input[int],
                 size_unit: pulumi.Input[str]):
        """
        :param pulumi.Input[str] column_name: The name of the lookback window column.
        :param pulumi.Input[int] size: The lookback window column size.
        :param pulumi.Input[str] size_unit: The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_unit", size_unit)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        """
        The name of the lookback window column.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        """
        The lookback window column size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeUnit")
    def size_unit(self) -> pulumi.Input[str]:
        """
        The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
        """
        return pulumi.get(self, "size_unit")

    @size_unit.setter
    def size_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "size_unit", value)


if not MYPY:
    class DataSetRowLevelPermissionDataSetArgsDict(TypedDict):
        arn: pulumi.Input[str]
        """
        ARN of the dataset that contains permissions for RLS.
        """
        permission_policy: pulumi.Input[str]
        """
        Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
        """
        format_version: NotRequired[pulumi.Input[str]]
        """
        User or group rules associated with the dataset that contains permissions for RLS.
        """
        namespace: NotRequired[pulumi.Input[str]]
        """
        Namespace associated with the dataset that contains permissions for RLS.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
        """
elif False:
    DataSetRowLevelPermissionDataSetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetRowLevelPermissionDataSetArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 permission_policy: pulumi.Input[str],
                 format_version: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] arn: ARN of the dataset that contains permissions for RLS.
        :param pulumi.Input[str] permission_policy: Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
        :param pulumi.Input[str] format_version: User or group rules associated with the dataset that contains permissions for RLS.
        :param pulumi.Input[str] namespace: Namespace associated with the dataset that contains permissions for RLS.
        :param pulumi.Input[str] status: Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "permission_policy", permission_policy)
        if format_version is not None:
            pulumi.set(__self__, "format_version", format_version)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        """
        ARN of the dataset that contains permissions for RLS.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="permissionPolicy")
    def permission_policy(self) -> pulumi.Input[str]:
        """
        Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
        """
        return pulumi.get(self, "permission_policy")

    @permission_policy.setter
    def permission_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_policy", value)

    @property
    @pulumi.getter(name="formatVersion")
    def format_version(self) -> Optional[pulumi.Input[str]]:
        """
        User or group rules associated with the dataset that contains permissions for RLS.
        """
        return pulumi.get(self, "format_version")

    @format_version.setter
    def format_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format_version", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace associated with the dataset that contains permissions for RLS.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class DataSetRowLevelPermissionTagConfigurationArgsDict(TypedDict):
        tag_rules: pulumi.Input[Sequence[pulumi.Input['DataSetRowLevelPermissionTagConfigurationTagRuleArgsDict']]]
        """
        A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
        """
        status: NotRequired[pulumi.Input[str]]
        """
        The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
        """
elif False:
    DataSetRowLevelPermissionTagConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetRowLevelPermissionTagConfigurationArgs:
    def __init__(__self__, *,
                 tag_rules: pulumi.Input[Sequence[pulumi.Input['DataSetRowLevelPermissionTagConfigurationTagRuleArgs']]],
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DataSetRowLevelPermissionTagConfigurationTagRuleArgs']]] tag_rules: A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
        :param pulumi.Input[str] status: The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
        """
        pulumi.set(__self__, "tag_rules", tag_rules)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="tagRules")
    def tag_rules(self) -> pulumi.Input[Sequence[pulumi.Input['DataSetRowLevelPermissionTagConfigurationTagRuleArgs']]]:
        """
        A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
        """
        return pulumi.get(self, "tag_rules")

    @tag_rules.setter
    def tag_rules(self, value: pulumi.Input[Sequence[pulumi.Input['DataSetRowLevelPermissionTagConfigurationTagRuleArgs']]]):
        pulumi.set(self, "tag_rules", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class DataSetRowLevelPermissionTagConfigurationTagRuleArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        """
        Column name that a tag key is assigned to.
        """
        tag_key: pulumi.Input[str]
        """
        Unique key for a tag.
        """
        match_all_value: NotRequired[pulumi.Input[str]]
        """
        A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
        """
        tag_multi_value_delimiter: NotRequired[pulumi.Input[str]]
        """
        A string that you want to use to delimit the values when you pass the values at run time.
        """
elif False:
    DataSetRowLevelPermissionTagConfigurationTagRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSetRowLevelPermissionTagConfigurationTagRuleArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 tag_key: pulumi.Input[str],
                 match_all_value: Optional[pulumi.Input[str]] = None,
                 tag_multi_value_delimiter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] column_name: Column name that a tag key is assigned to.
        :param pulumi.Input[str] tag_key: Unique key for a tag.
        :param pulumi.Input[str] match_all_value: A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
        :param pulumi.Input[str] tag_multi_value_delimiter: A string that you want to use to delimit the values when you pass the values at run time.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "tag_key", tag_key)
        if match_all_value is not None:
            pulumi.set(__self__, "match_all_value", match_all_value)
        if tag_multi_value_delimiter is not None:
            pulumi.set(__self__, "tag_multi_value_delimiter", tag_multi_value_delimiter)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        """
        Column name that a tag key is assigned to.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> pulumi.Input[str]:
        """
        Unique key for a tag.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="matchAllValue")
    def match_all_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
        """
        return pulumi.get(self, "match_all_value")

    @match_all_value.setter
    def match_all_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_all_value", value)

    @property
    @pulumi.getter(name="tagMultiValueDelimiter")
    def tag_multi_value_delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        A string that you want to use to delimit the values when you pass the values at run time.
        """
        return pulumi.get(self, "tag_multi_value_delimiter")

    @tag_multi_value_delimiter.setter
    def tag_multi_value_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_multi_value_delimiter", value)


if not MYPY:
    class DataSourceCredentialsArgsDict(TypedDict):
        copy_source_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
        When the value is not null, the `credential_pair` from the data source in the ARN is used.
        """
        credential_pair: NotRequired[pulumi.Input['DataSourceCredentialsCredentialPairArgsDict']]
        """
        Credential pair. See Credential Pair below for more details.
        """
elif False:
    DataSourceCredentialsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceCredentialsArgs:
    def __init__(__self__, *,
                 copy_source_arn: Optional[pulumi.Input[str]] = None,
                 credential_pair: Optional[pulumi.Input['DataSourceCredentialsCredentialPairArgs']] = None):
        """
        :param pulumi.Input[str] copy_source_arn: The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
               When the value is not null, the `credential_pair` from the data source in the ARN is used.
        :param pulumi.Input['DataSourceCredentialsCredentialPairArgs'] credential_pair: Credential pair. See Credential Pair below for more details.
        """
        if copy_source_arn is not None:
            pulumi.set(__self__, "copy_source_arn", copy_source_arn)
        if credential_pair is not None:
            pulumi.set(__self__, "credential_pair", credential_pair)

    @property
    @pulumi.getter(name="copySourceArn")
    def copy_source_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
        When the value is not null, the `credential_pair` from the data source in the ARN is used.
        """
        return pulumi.get(self, "copy_source_arn")

    @copy_source_arn.setter
    def copy_source_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_source_arn", value)

    @property
    @pulumi.getter(name="credentialPair")
    def credential_pair(self) -> Optional[pulumi.Input['DataSourceCredentialsCredentialPairArgs']]:
        """
        Credential pair. See Credential Pair below for more details.
        """
        return pulumi.get(self, "credential_pair")

    @credential_pair.setter
    def credential_pair(self, value: Optional[pulumi.Input['DataSourceCredentialsCredentialPairArgs']]):
        pulumi.set(self, "credential_pair", value)


if not MYPY:
    class DataSourceCredentialsCredentialPairArgsDict(TypedDict):
        password: pulumi.Input[str]
        """
        Password, maximum length of 1024 characters.
        """
        username: pulumi.Input[str]
        """
        User name, maximum length of 64 characters.
        """
elif False:
    DataSourceCredentialsCredentialPairArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceCredentialsCredentialPairArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: Password, maximum length of 1024 characters.
        :param pulumi.Input[str] username: User name, maximum length of 64 characters.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password, maximum length of 1024 characters.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        User name, maximum length of 64 characters.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


if not MYPY:
    class DataSourceParametersArgsDict(TypedDict):
        amazon_elasticsearch: NotRequired[pulumi.Input['DataSourceParametersAmazonElasticsearchArgsDict']]
        """
        Parameters for connecting to Amazon Elasticsearch.
        """
        athena: NotRequired[pulumi.Input['DataSourceParametersAthenaArgsDict']]
        """
        Parameters for connecting to Athena.
        """
        aurora: NotRequired[pulumi.Input['DataSourceParametersAuroraArgsDict']]
        """
        Parameters for connecting to Aurora MySQL.
        """
        aurora_postgresql: NotRequired[pulumi.Input['DataSourceParametersAuroraPostgresqlArgsDict']]
        """
        Parameters for connecting to Aurora Postgresql.
        """
        aws_iot_analytics: NotRequired[pulumi.Input['DataSourceParametersAwsIotAnalyticsArgsDict']]
        """
        Parameters for connecting to AWS IOT Analytics.
        """
        jira: NotRequired[pulumi.Input['DataSourceParametersJiraArgsDict']]
        """
        Parameters for connecting to Jira.
        """
        maria_db: NotRequired[pulumi.Input['DataSourceParametersMariaDbArgsDict']]
        """
        Parameters for connecting to MariaDB.
        """
        mysql: NotRequired[pulumi.Input['DataSourceParametersMysqlArgsDict']]
        """
        Parameters for connecting to MySQL.
        """
        oracle: NotRequired[pulumi.Input['DataSourceParametersOracleArgsDict']]
        """
        Parameters for connecting to Oracle.
        """
        postgresql: NotRequired[pulumi.Input['DataSourceParametersPostgresqlArgsDict']]
        """
        Parameters for connecting to Postgresql.
        """
        presto: NotRequired[pulumi.Input['DataSourceParametersPrestoArgsDict']]
        """
        Parameters for connecting to Presto.
        """
        rds: NotRequired[pulumi.Input['DataSourceParametersRdsArgsDict']]
        """
        Parameters for connecting to RDS.
        """
        redshift: NotRequired[pulumi.Input['DataSourceParametersRedshiftArgsDict']]
        """
        Parameters for connecting to Redshift.
        """
        s3: NotRequired[pulumi.Input['DataSourceParametersS3ArgsDict']]
        """
        Parameters for connecting to S3.
        """
        service_now: NotRequired[pulumi.Input['DataSourceParametersServiceNowArgsDict']]
        """
        Parameters for connecting to ServiceNow.
        """
        snowflake: NotRequired[pulumi.Input['DataSourceParametersSnowflakeArgsDict']]
        """
        Parameters for connecting to Snowflake.
        """
        spark: NotRequired[pulumi.Input['DataSourceParametersSparkArgsDict']]
        """
        Parameters for connecting to Spark.
        """
        sql_server: NotRequired[pulumi.Input['DataSourceParametersSqlServerArgsDict']]
        """
        Parameters for connecting to SQL Server.
        """
        teradata: NotRequired[pulumi.Input['DataSourceParametersTeradataArgsDict']]
        """
        Parameters for connecting to Teradata.
        """
        twitter: NotRequired[pulumi.Input['DataSourceParametersTwitterArgsDict']]
        """
        Parameters for connecting to Twitter.
        """
elif False:
    DataSourceParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersArgs:
    def __init__(__self__, *,
                 amazon_elasticsearch: Optional[pulumi.Input['DataSourceParametersAmazonElasticsearchArgs']] = None,
                 athena: Optional[pulumi.Input['DataSourceParametersAthenaArgs']] = None,
                 aurora: Optional[pulumi.Input['DataSourceParametersAuroraArgs']] = None,
                 aurora_postgresql: Optional[pulumi.Input['DataSourceParametersAuroraPostgresqlArgs']] = None,
                 aws_iot_analytics: Optional[pulumi.Input['DataSourceParametersAwsIotAnalyticsArgs']] = None,
                 jira: Optional[pulumi.Input['DataSourceParametersJiraArgs']] = None,
                 maria_db: Optional[pulumi.Input['DataSourceParametersMariaDbArgs']] = None,
                 mysql: Optional[pulumi.Input['DataSourceParametersMysqlArgs']] = None,
                 oracle: Optional[pulumi.Input['DataSourceParametersOracleArgs']] = None,
                 postgresql: Optional[pulumi.Input['DataSourceParametersPostgresqlArgs']] = None,
                 presto: Optional[pulumi.Input['DataSourceParametersPrestoArgs']] = None,
                 rds: Optional[pulumi.Input['DataSourceParametersRdsArgs']] = None,
                 redshift: Optional[pulumi.Input['DataSourceParametersRedshiftArgs']] = None,
                 s3: Optional[pulumi.Input['DataSourceParametersS3Args']] = None,
                 service_now: Optional[pulumi.Input['DataSourceParametersServiceNowArgs']] = None,
                 snowflake: Optional[pulumi.Input['DataSourceParametersSnowflakeArgs']] = None,
                 spark: Optional[pulumi.Input['DataSourceParametersSparkArgs']] = None,
                 sql_server: Optional[pulumi.Input['DataSourceParametersSqlServerArgs']] = None,
                 teradata: Optional[pulumi.Input['DataSourceParametersTeradataArgs']] = None,
                 twitter: Optional[pulumi.Input['DataSourceParametersTwitterArgs']] = None):
        """
        :param pulumi.Input['DataSourceParametersAmazonElasticsearchArgs'] amazon_elasticsearch: Parameters for connecting to Amazon Elasticsearch.
        :param pulumi.Input['DataSourceParametersAthenaArgs'] athena: Parameters for connecting to Athena.
        :param pulumi.Input['DataSourceParametersAuroraArgs'] aurora: Parameters for connecting to Aurora MySQL.
        :param pulumi.Input['DataSourceParametersAuroraPostgresqlArgs'] aurora_postgresql: Parameters for connecting to Aurora Postgresql.
        :param pulumi.Input['DataSourceParametersAwsIotAnalyticsArgs'] aws_iot_analytics: Parameters for connecting to AWS IOT Analytics.
        :param pulumi.Input['DataSourceParametersJiraArgs'] jira: Parameters for connecting to Jira.
        :param pulumi.Input['DataSourceParametersMariaDbArgs'] maria_db: Parameters for connecting to MariaDB.
        :param pulumi.Input['DataSourceParametersMysqlArgs'] mysql: Parameters for connecting to MySQL.
        :param pulumi.Input['DataSourceParametersOracleArgs'] oracle: Parameters for connecting to Oracle.
        :param pulumi.Input['DataSourceParametersPostgresqlArgs'] postgresql: Parameters for connecting to Postgresql.
        :param pulumi.Input['DataSourceParametersPrestoArgs'] presto: Parameters for connecting to Presto.
        :param pulumi.Input['DataSourceParametersRdsArgs'] rds: Parameters for connecting to RDS.
        :param pulumi.Input['DataSourceParametersRedshiftArgs'] redshift: Parameters for connecting to Redshift.
        :param pulumi.Input['DataSourceParametersS3Args'] s3: Parameters for connecting to S3.
        :param pulumi.Input['DataSourceParametersServiceNowArgs'] service_now: Parameters for connecting to ServiceNow.
        :param pulumi.Input['DataSourceParametersSnowflakeArgs'] snowflake: Parameters for connecting to Snowflake.
        :param pulumi.Input['DataSourceParametersSparkArgs'] spark: Parameters for connecting to Spark.
        :param pulumi.Input['DataSourceParametersSqlServerArgs'] sql_server: Parameters for connecting to SQL Server.
        :param pulumi.Input['DataSourceParametersTeradataArgs'] teradata: Parameters for connecting to Teradata.
        :param pulumi.Input['DataSourceParametersTwitterArgs'] twitter: Parameters for connecting to Twitter.
        """
        if amazon_elasticsearch is not None:
            pulumi.set(__self__, "amazon_elasticsearch", amazon_elasticsearch)
        if athena is not None:
            pulumi.set(__self__, "athena", athena)
        if aurora is not None:
            pulumi.set(__self__, "aurora", aurora)
        if aurora_postgresql is not None:
            pulumi.set(__self__, "aurora_postgresql", aurora_postgresql)
        if aws_iot_analytics is not None:
            pulumi.set(__self__, "aws_iot_analytics", aws_iot_analytics)
        if jira is not None:
            pulumi.set(__self__, "jira", jira)
        if maria_db is not None:
            pulumi.set(__self__, "maria_db", maria_db)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if oracle is not None:
            pulumi.set(__self__, "oracle", oracle)
        if postgresql is not None:
            pulumi.set(__self__, "postgresql", postgresql)
        if presto is not None:
            pulumi.set(__self__, "presto", presto)
        if rds is not None:
            pulumi.set(__self__, "rds", rds)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if spark is not None:
            pulumi.set(__self__, "spark", spark)
        if sql_server is not None:
            pulumi.set(__self__, "sql_server", sql_server)
        if teradata is not None:
            pulumi.set(__self__, "teradata", teradata)
        if twitter is not None:
            pulumi.set(__self__, "twitter", twitter)

    @property
    @pulumi.getter(name="amazonElasticsearch")
    def amazon_elasticsearch(self) -> Optional[pulumi.Input['DataSourceParametersAmazonElasticsearchArgs']]:
        """
        Parameters for connecting to Amazon Elasticsearch.
        """
        return pulumi.get(self, "amazon_elasticsearch")

    @amazon_elasticsearch.setter
    def amazon_elasticsearch(self, value: Optional[pulumi.Input['DataSourceParametersAmazonElasticsearchArgs']]):
        pulumi.set(self, "amazon_elasticsearch", value)

    @property
    @pulumi.getter
    def athena(self) -> Optional[pulumi.Input['DataSourceParametersAthenaArgs']]:
        """
        Parameters for connecting to Athena.
        """
        return pulumi.get(self, "athena")

    @athena.setter
    def athena(self, value: Optional[pulumi.Input['DataSourceParametersAthenaArgs']]):
        pulumi.set(self, "athena", value)

    @property
    @pulumi.getter
    def aurora(self) -> Optional[pulumi.Input['DataSourceParametersAuroraArgs']]:
        """
        Parameters for connecting to Aurora MySQL.
        """
        return pulumi.get(self, "aurora")

    @aurora.setter
    def aurora(self, value: Optional[pulumi.Input['DataSourceParametersAuroraArgs']]):
        pulumi.set(self, "aurora", value)

    @property
    @pulumi.getter(name="auroraPostgresql")
    def aurora_postgresql(self) -> Optional[pulumi.Input['DataSourceParametersAuroraPostgresqlArgs']]:
        """
        Parameters for connecting to Aurora Postgresql.
        """
        return pulumi.get(self, "aurora_postgresql")

    @aurora_postgresql.setter
    def aurora_postgresql(self, value: Optional[pulumi.Input['DataSourceParametersAuroraPostgresqlArgs']]):
        pulumi.set(self, "aurora_postgresql", value)

    @property
    @pulumi.getter(name="awsIotAnalytics")
    def aws_iot_analytics(self) -> Optional[pulumi.Input['DataSourceParametersAwsIotAnalyticsArgs']]:
        """
        Parameters for connecting to AWS IOT Analytics.
        """
        return pulumi.get(self, "aws_iot_analytics")

    @aws_iot_analytics.setter
    def aws_iot_analytics(self, value: Optional[pulumi.Input['DataSourceParametersAwsIotAnalyticsArgs']]):
        pulumi.set(self, "aws_iot_analytics", value)

    @property
    @pulumi.getter
    def jira(self) -> Optional[pulumi.Input['DataSourceParametersJiraArgs']]:
        """
        Parameters for connecting to Jira.
        """
        return pulumi.get(self, "jira")

    @jira.setter
    def jira(self, value: Optional[pulumi.Input['DataSourceParametersJiraArgs']]):
        pulumi.set(self, "jira", value)

    @property
    @pulumi.getter(name="mariaDb")
    def maria_db(self) -> Optional[pulumi.Input['DataSourceParametersMariaDbArgs']]:
        """
        Parameters for connecting to MariaDB.
        """
        return pulumi.get(self, "maria_db")

    @maria_db.setter
    def maria_db(self, value: Optional[pulumi.Input['DataSourceParametersMariaDbArgs']]):
        pulumi.set(self, "maria_db", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input['DataSourceParametersMysqlArgs']]:
        """
        Parameters for connecting to MySQL.
        """
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input['DataSourceParametersMysqlArgs']]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def oracle(self) -> Optional[pulumi.Input['DataSourceParametersOracleArgs']]:
        """
        Parameters for connecting to Oracle.
        """
        return pulumi.get(self, "oracle")

    @oracle.setter
    def oracle(self, value: Optional[pulumi.Input['DataSourceParametersOracleArgs']]):
        pulumi.set(self, "oracle", value)

    @property
    @pulumi.getter
    def postgresql(self) -> Optional[pulumi.Input['DataSourceParametersPostgresqlArgs']]:
        """
        Parameters for connecting to Postgresql.
        """
        return pulumi.get(self, "postgresql")

    @postgresql.setter
    def postgresql(self, value: Optional[pulumi.Input['DataSourceParametersPostgresqlArgs']]):
        pulumi.set(self, "postgresql", value)

    @property
    @pulumi.getter
    def presto(self) -> Optional[pulumi.Input['DataSourceParametersPrestoArgs']]:
        """
        Parameters for connecting to Presto.
        """
        return pulumi.get(self, "presto")

    @presto.setter
    def presto(self, value: Optional[pulumi.Input['DataSourceParametersPrestoArgs']]):
        pulumi.set(self, "presto", value)

    @property
    @pulumi.getter
    def rds(self) -> Optional[pulumi.Input['DataSourceParametersRdsArgs']]:
        """
        Parameters for connecting to RDS.
        """
        return pulumi.get(self, "rds")

    @rds.setter
    def rds(self, value: Optional[pulumi.Input['DataSourceParametersRdsArgs']]):
        pulumi.set(self, "rds", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['DataSourceParametersRedshiftArgs']]:
        """
        Parameters for connecting to Redshift.
        """
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['DataSourceParametersRedshiftArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['DataSourceParametersS3Args']]:
        """
        Parameters for connecting to S3.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['DataSourceParametersS3Args']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['DataSourceParametersServiceNowArgs']]:
        """
        Parameters for connecting to ServiceNow.
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['DataSourceParametersServiceNowArgs']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['DataSourceParametersSnowflakeArgs']]:
        """
        Parameters for connecting to Snowflake.
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['DataSourceParametersSnowflakeArgs']]):
        pulumi.set(self, "snowflake", value)

    @property
    @pulumi.getter
    def spark(self) -> Optional[pulumi.Input['DataSourceParametersSparkArgs']]:
        """
        Parameters for connecting to Spark.
        """
        return pulumi.get(self, "spark")

    @spark.setter
    def spark(self, value: Optional[pulumi.Input['DataSourceParametersSparkArgs']]):
        pulumi.set(self, "spark", value)

    @property
    @pulumi.getter(name="sqlServer")
    def sql_server(self) -> Optional[pulumi.Input['DataSourceParametersSqlServerArgs']]:
        """
        Parameters for connecting to SQL Server.
        """
        return pulumi.get(self, "sql_server")

    @sql_server.setter
    def sql_server(self, value: Optional[pulumi.Input['DataSourceParametersSqlServerArgs']]):
        pulumi.set(self, "sql_server", value)

    @property
    @pulumi.getter
    def teradata(self) -> Optional[pulumi.Input['DataSourceParametersTeradataArgs']]:
        """
        Parameters for connecting to Teradata.
        """
        return pulumi.get(self, "teradata")

    @teradata.setter
    def teradata(self, value: Optional[pulumi.Input['DataSourceParametersTeradataArgs']]):
        pulumi.set(self, "teradata", value)

    @property
    @pulumi.getter
    def twitter(self) -> Optional[pulumi.Input['DataSourceParametersTwitterArgs']]:
        """
        Parameters for connecting to Twitter.
        """
        return pulumi.get(self, "twitter")

    @twitter.setter
    def twitter(self, value: Optional[pulumi.Input['DataSourceParametersTwitterArgs']]):
        pulumi.set(self, "twitter", value)


if not MYPY:
    class DataSourceParametersAmazonElasticsearchArgsDict(TypedDict):
        domain: pulumi.Input[str]
        """
        The OpenSearch domain.
        """
elif False:
    DataSourceParametersAmazonElasticsearchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersAmazonElasticsearchArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str]):
        """
        :param pulumi.Input[str] domain: The OpenSearch domain.
        """
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        The OpenSearch domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)


if not MYPY:
    class DataSourceParametersAthenaArgsDict(TypedDict):
        work_group: NotRequired[pulumi.Input[str]]
        """
        The work-group to which to connect.
        """
elif False:
    DataSourceParametersAthenaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersAthenaArgs:
    def __init__(__self__, *,
                 work_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] work_group: The work-group to which to connect.
        """
        if work_group is not None:
            pulumi.set(__self__, "work_group", work_group)

    @property
    @pulumi.getter(name="workGroup")
    def work_group(self) -> Optional[pulumi.Input[str]]:
        """
        The work-group to which to connect.
        """
        return pulumi.get(self, "work_group")

    @work_group.setter
    def work_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_group", value)


if not MYPY:
    class DataSourceParametersAuroraArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        port: pulumi.Input[int]
        """
        The port to which to connect.
        """
elif False:
    DataSourceParametersAuroraArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersAuroraArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersAuroraPostgresqlArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        port: pulumi.Input[int]
        """
        The port to which to connect.
        """
elif False:
    DataSourceParametersAuroraPostgresqlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersAuroraPostgresqlArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersAwsIotAnalyticsArgsDict(TypedDict):
        data_set_name: pulumi.Input[str]
        """
        The name of the data set to which to connect.
        """
elif False:
    DataSourceParametersAwsIotAnalyticsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersAwsIotAnalyticsArgs:
    def __init__(__self__, *,
                 data_set_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data_set_name: The name of the data set to which to connect.
        """
        pulumi.set(__self__, "data_set_name", data_set_name)

    @property
    @pulumi.getter(name="dataSetName")
    def data_set_name(self) -> pulumi.Input[str]:
        """
        The name of the data set to which to connect.
        """
        return pulumi.get(self, "data_set_name")

    @data_set_name.setter
    def data_set_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_name", value)


if not MYPY:
    class DataSourceParametersJiraArgsDict(TypedDict):
        site_base_url: pulumi.Input[str]
        """
        The base URL of the Jira instance's site to which to connect.
        """
elif False:
    DataSourceParametersJiraArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersJiraArgs:
    def __init__(__self__, *,
                 site_base_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] site_base_url: The base URL of the Jira instance's site to which to connect.
        """
        pulumi.set(__self__, "site_base_url", site_base_url)

    @property
    @pulumi.getter(name="siteBaseUrl")
    def site_base_url(self) -> pulumi.Input[str]:
        """
        The base URL of the Jira instance's site to which to connect.
        """
        return pulumi.get(self, "site_base_url")

    @site_base_url.setter
    def site_base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_base_url", value)


if not MYPY:
    class DataSourceParametersMariaDbArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        port: pulumi.Input[int]
        """
        The port to which to connect.
        """
elif False:
    DataSourceParametersMariaDbArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersMariaDbArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersMysqlArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        port: pulumi.Input[int]
        """
        The port to which to connect.
        """
elif False:
    DataSourceParametersMysqlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersMysqlArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersOracleArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        port: pulumi.Input[int]
        """
        The port to which to connect.
        """
elif False:
    DataSourceParametersOracleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersOracleArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersPostgresqlArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        port: pulumi.Input[int]
        """
        The port to which to connect.
        """
elif False:
    DataSourceParametersPostgresqlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersPostgresqlArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersPrestoArgsDict(TypedDict):
        catalog: pulumi.Input[str]
        """
        The catalog to which to connect.
        """
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        port: pulumi.Input[int]
        """
        The port to which to connect.
        """
elif False:
    DataSourceParametersPrestoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersPrestoArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] catalog: The catalog to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The port to which to connect.
        """
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        """
        The catalog to which to connect.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersRdsArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        instance_id: pulumi.Input[str]
        """
        The instance ID to which to connect.
        """
elif False:
    DataSourceParametersRdsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersRdsArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 instance_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] instance_id: The instance ID to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The instance ID to which to connect.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)


if not MYPY:
    class DataSourceParametersRedshiftArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        cluster_id: NotRequired[pulumi.Input[str]]
        """
        The ID of the cluster to which to connect.
        """
        host: NotRequired[pulumi.Input[str]]
        """
        The host to which to connect.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        The port to which to connect.
        """
elif False:
    DataSourceParametersRedshiftArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersRedshiftArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] cluster_id: The ID of the cluster to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cluster to which to connect.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersS3ArgsDict(TypedDict):
        manifest_file_location: pulumi.Input['DataSourceParametersS3ManifestFileLocationArgsDict']
        """
        An object containing the S3 location of the S3 manifest file.
        """
elif False:
    DataSourceParametersS3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersS3Args:
    def __init__(__self__, *,
                 manifest_file_location: pulumi.Input['DataSourceParametersS3ManifestFileLocationArgs']):
        """
        :param pulumi.Input['DataSourceParametersS3ManifestFileLocationArgs'] manifest_file_location: An object containing the S3 location of the S3 manifest file.
        """
        pulumi.set(__self__, "manifest_file_location", manifest_file_location)

    @property
    @pulumi.getter(name="manifestFileLocation")
    def manifest_file_location(self) -> pulumi.Input['DataSourceParametersS3ManifestFileLocationArgs']:
        """
        An object containing the S3 location of the S3 manifest file.
        """
        return pulumi.get(self, "manifest_file_location")

    @manifest_file_location.setter
    def manifest_file_location(self, value: pulumi.Input['DataSourceParametersS3ManifestFileLocationArgs']):
        pulumi.set(self, "manifest_file_location", value)


if not MYPY:
    class DataSourceParametersS3ManifestFileLocationArgsDict(TypedDict):
        bucket: pulumi.Input[str]
        """
        The name of the bucket that contains the manifest file.
        """
        key: pulumi.Input[str]
        """
        The key of the manifest file within the bucket.
        """
elif False:
    DataSourceParametersS3ManifestFileLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersS3ManifestFileLocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] bucket: The name of the bucket that contains the manifest file.
        :param pulumi.Input[str] key: The key of the manifest file within the bucket.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The name of the bucket that contains the manifest file.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the manifest file within the bucket.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


if not MYPY:
    class DataSourceParametersServiceNowArgsDict(TypedDict):
        site_base_url: pulumi.Input[str]
        """
        The base URL of the Jira instance's site to which to connect.
        """
elif False:
    DataSourceParametersServiceNowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersServiceNowArgs:
    def __init__(__self__, *,
                 site_base_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] site_base_url: The base URL of the Jira instance's site to which to connect.
        """
        pulumi.set(__self__, "site_base_url", site_base_url)

    @property
    @pulumi.getter(name="siteBaseUrl")
    def site_base_url(self) -> pulumi.Input[str]:
        """
        The base URL of the Jira instance's site to which to connect.
        """
        return pulumi.get(self, "site_base_url")

    @site_base_url.setter
    def site_base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_base_url", value)


if not MYPY:
    class DataSourceParametersSnowflakeArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        warehouse: pulumi.Input[str]
        """
        The warehouse to which to connect.
        """
elif False:
    DataSourceParametersSnowflakeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersSnowflakeArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 warehouse: pulumi.Input[str]):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[str] warehouse: The warehouse to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def warehouse(self) -> pulumi.Input[str]:
        """
        The warehouse to which to connect.
        """
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: pulumi.Input[str]):
        pulumi.set(self, "warehouse", value)


if not MYPY:
    class DataSourceParametersSparkArgsDict(TypedDict):
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        port: pulumi.Input[int]
        """
        The warehouse to which to connect.
        """
elif False:
    DataSourceParametersSparkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersSparkArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The warehouse to which to connect.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The warehouse to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersSqlServerArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        port: pulumi.Input[int]
        """
        The warehouse to which to connect.
        """
elif False:
    DataSourceParametersSqlServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersSqlServerArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The warehouse to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The warehouse to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersTeradataArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The database to which to connect.
        """
        host: pulumi.Input[str]
        """
        The host to which to connect.
        """
        port: pulumi.Input[int]
        """
        The warehouse to which to connect.
        """
elif False:
    DataSourceParametersTeradataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersTeradataArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] database: The database to which to connect.
        :param pulumi.Input[str] host: The host to which to connect.
        :param pulumi.Input[int] port: The warehouse to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The warehouse to which to connect.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class DataSourceParametersTwitterArgsDict(TypedDict):
        max_rows: pulumi.Input[int]
        """
        The maximum number of rows to query.
        """
        query: pulumi.Input[str]
        """
        The Twitter query to retrieve the data.
        """
elif False:
    DataSourceParametersTwitterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceParametersTwitterArgs:
    def __init__(__self__, *,
                 max_rows: pulumi.Input[int],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[int] max_rows: The maximum number of rows to query.
        :param pulumi.Input[str] query: The Twitter query to retrieve the data.
        """
        pulumi.set(__self__, "max_rows", max_rows)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="maxRows")
    def max_rows(self) -> pulumi.Input[int]:
        """
        The maximum number of rows to query.
        """
        return pulumi.get(self, "max_rows")

    @max_rows.setter
    def max_rows(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_rows", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        The Twitter query to retrieve the data.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


if not MYPY:
    class DataSourcePermissionArgsDict(TypedDict):
        actions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Set of IAM actions to grant or revoke permissions on. Max of 16 items.
        """
        principal: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the principal.
        """
elif False:
    DataSourcePermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourcePermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: Set of IAM actions to grant or revoke permissions on. Max of 16 items.
        :param pulumi.Input[str] principal: The Amazon Resource Name (ARN) of the principal.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Set of IAM actions to grant or revoke permissions on. Max of 16 items.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the principal.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)


if not MYPY:
    class DataSourceSslPropertiesArgsDict(TypedDict):
        disable_ssl: pulumi.Input[bool]
        """
        A Boolean option to control whether SSL should be disabled.
        """
elif False:
    DataSourceSslPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceSslPropertiesArgs:
    def __init__(__self__, *,
                 disable_ssl: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] disable_ssl: A Boolean option to control whether SSL should be disabled.
        """
        pulumi.set(__self__, "disable_ssl", disable_ssl)

    @property
    @pulumi.getter(name="disableSsl")
    def disable_ssl(self) -> pulumi.Input[bool]:
        """
        A Boolean option to control whether SSL should be disabled.
        """
        return pulumi.get(self, "disable_ssl")

    @disable_ssl.setter
    def disable_ssl(self, value: pulumi.Input[bool]):
        pulumi.set(self, "disable_ssl", value)


if not MYPY:
    class DataSourceVpcConnectionPropertiesArgsDict(TypedDict):
        vpc_connection_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) for the VPC connection.
        """
elif False:
    DataSourceVpcConnectionPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceVpcConnectionPropertiesArgs:
    def __init__(__self__, *,
                 vpc_connection_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] vpc_connection_arn: The Amazon Resource Name (ARN) for the VPC connection.
        """
        pulumi.set(__self__, "vpc_connection_arn", vpc_connection_arn)

    @property
    @pulumi.getter(name="vpcConnectionArn")
    def vpc_connection_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) for the VPC connection.
        """
        return pulumi.get(self, "vpc_connection_arn")

    @vpc_connection_arn.setter
    def vpc_connection_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_connection_arn", value)


if not MYPY:
    class DateTimeFormatConfigurationArgsDict(TypedDict):
        date_time_format: NotRequired[pulumi.Input[str]]
        null_value_format_configuration: NotRequired[pulumi.Input['NullValueFormatConfigurationArgsDict']]
        numeric_format_configuration: NotRequired[pulumi.Input['NumericFormatConfigurationArgsDict']]
elif False:
    DateTimeFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DateTimeFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 null_value_format_configuration: Optional[pulumi.Input['NullValueFormatConfigurationArgs']] = None,
                 numeric_format_configuration: Optional[pulumi.Input['NumericFormatConfigurationArgs']] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if null_value_format_configuration is not None:
            pulumi.set(__self__, "null_value_format_configuration", null_value_format_configuration)
        if numeric_format_configuration is not None:
            pulumi.set(__self__, "numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['NullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['NullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional[pulumi.Input['NumericFormatConfigurationArgs']]:
        return pulumi.get(self, "numeric_format_configuration")

    @numeric_format_configuration.setter
    def numeric_format_configuration(self, value: Optional[pulumi.Input['NumericFormatConfigurationArgs']]):
        pulumi.set(self, "numeric_format_configuration", value)


if not MYPY:
    class DateTimeParameterDeclarationArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the dashboard.
        """
        default_values: NotRequired[pulumi.Input['DateTimeParameterDeclarationDefaultValuesArgsDict']]
        time_granularity: NotRequired[pulumi.Input[str]]
        values_when_unset: NotRequired[pulumi.Input['DateTimeParameterDeclarationValuesWhenUnsetArgsDict']]
elif False:
    DateTimeParameterDeclarationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DateTimeParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default_values: Optional[pulumi.Input['DateTimeParameterDeclarationDefaultValuesArgs']] = None,
                 time_granularity: Optional[pulumi.Input[str]] = None,
                 values_when_unset: Optional[pulumi.Input['DateTimeParameterDeclarationValuesWhenUnsetArgs']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if time_granularity is not None:
            pulumi.set(__self__, "time_granularity", time_granularity)
        if values_when_unset is not None:
            pulumi.set(__self__, "values_when_unset", values_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['DateTimeParameterDeclarationDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['DateTimeParameterDeclarationDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter(name="valuesWhenUnset")
    def values_when_unset(self) -> Optional[pulumi.Input['DateTimeParameterDeclarationValuesWhenUnsetArgs']]:
        return pulumi.get(self, "values_when_unset")

    @values_when_unset.setter
    def values_when_unset(self, value: Optional[pulumi.Input['DateTimeParameterDeclarationValuesWhenUnsetArgs']]):
        pulumi.set(self, "values_when_unset", value)


if not MYPY:
    class DateTimeParameterDeclarationDefaultValuesArgsDict(TypedDict):
        dynamic_value: NotRequired[pulumi.Input['DynamicValueArgsDict']]
        rolling_date: NotRequired[pulumi.Input['DateTimeParameterDeclarationDefaultValuesRollingDateArgsDict']]
        static_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    DateTimeParameterDeclarationDefaultValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DateTimeParameterDeclarationDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['DynamicValueArgs']] = None,
                 rolling_date: Optional[pulumi.Input['DateTimeParameterDeclarationDefaultValuesRollingDateArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if dynamic_value is not None:
            pulumi.set(__self__, "dynamic_value", dynamic_value)
        if rolling_date is not None:
            pulumi.set(__self__, "rolling_date", rolling_date)
        if static_values is not None:
            pulumi.set(__self__, "static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['DynamicValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['DynamicValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional[pulumi.Input['DateTimeParameterDeclarationDefaultValuesRollingDateArgs']]:
        return pulumi.get(self, "rolling_date")

    @rolling_date.setter
    def rolling_date(self, value: Optional[pulumi.Input['DateTimeParameterDeclarationDefaultValuesRollingDateArgs']]):
        pulumi.set(self, "rolling_date", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_values", value)


if not MYPY:
    class DateTimeParameterDeclarationDefaultValuesRollingDateArgsDict(TypedDict):
        expression: pulumi.Input[str]
        data_set_identifier: NotRequired[pulumi.Input[str]]
elif False:
    DateTimeParameterDeclarationDefaultValuesRollingDateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DateTimeParameterDeclarationDefaultValuesRollingDateArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 data_set_identifier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        if data_set_identifier is not None:
            pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_set_identifier", value)


if not MYPY:
    class DateTimeParameterDeclarationValuesWhenUnsetArgsDict(TypedDict):
        custom_value: NotRequired[pulumi.Input[str]]
        value_when_unset_option: NotRequired[pulumi.Input[str]]
elif False:
    DateTimeParameterDeclarationValuesWhenUnsetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DateTimeParameterDeclarationValuesWhenUnsetArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[str]] = None,
                 value_when_unset_option: Optional[pulumi.Input[str]] = None):
        if custom_value is not None:
            pulumi.set(__self__, "custom_value", custom_value)
        if value_when_unset_option is not None:
            pulumi.set(__self__, "value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_when_unset_option", value)


if not MYPY:
    class DecimalParameterDeclarationArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the dashboard.
        """
        parameter_value_type: pulumi.Input[str]
        default_values: NotRequired[pulumi.Input['DecimalParameterDeclarationDefaultValuesArgsDict']]
        values_when_unset: NotRequired[pulumi.Input['DecimalParameterDeclarationValuesWhenUnsetArgsDict']]
elif False:
    DecimalParameterDeclarationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DecimalParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input[str],
                 default_values: Optional[pulumi.Input['DecimalParameterDeclarationDefaultValuesArgs']] = None,
                 values_when_unset: Optional[pulumi.Input['DecimalParameterDeclarationValuesWhenUnsetArgs']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameter_value_type", parameter_value_type)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if values_when_unset is not None:
            pulumi.set(__self__, "values_when_unset", values_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['DecimalParameterDeclarationDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['DecimalParameterDeclarationDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="valuesWhenUnset")
    def values_when_unset(self) -> Optional[pulumi.Input['DecimalParameterDeclarationValuesWhenUnsetArgs']]:
        return pulumi.get(self, "values_when_unset")

    @values_when_unset.setter
    def values_when_unset(self, value: Optional[pulumi.Input['DecimalParameterDeclarationValuesWhenUnsetArgs']]):
        pulumi.set(self, "values_when_unset", value)


if not MYPY:
    class DecimalParameterDeclarationDefaultValuesArgsDict(TypedDict):
        dynamic_value: NotRequired[pulumi.Input['DynamicValueArgsDict']]
        static_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[float]]]]
elif False:
    DecimalParameterDeclarationDefaultValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DecimalParameterDeclarationDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['DynamicValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        if dynamic_value is not None:
            pulumi.set(__self__, "dynamic_value", dynamic_value)
        if static_values is not None:
            pulumi.set(__self__, "static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['DynamicValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['DynamicValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "static_values", value)


if not MYPY:
    class DecimalParameterDeclarationValuesWhenUnsetArgsDict(TypedDict):
        custom_value: NotRequired[pulumi.Input[float]]
        value_when_unset_option: NotRequired[pulumi.Input[str]]
elif False:
    DecimalParameterDeclarationValuesWhenUnsetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DecimalParameterDeclarationValuesWhenUnsetArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[float]] = None,
                 value_when_unset_option: Optional[pulumi.Input[str]] = None):
        if custom_value is not None:
            pulumi.set(__self__, "custom_value", custom_value)
        if value_when_unset_option is not None:
            pulumi.set(__self__, "value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_when_unset_option", value)


if not MYPY:
    class DecimalPlacesConfigurationArgsDict(TypedDict):
        decimal_places: pulumi.Input[int]
elif False:
    DecimalPlacesConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DecimalPlacesConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places: pulumi.Input[int]):
        pulumi.set(__self__, "decimal_places", decimal_places)

    @property
    @pulumi.getter(name="decimalPlaces")
    def decimal_places(self) -> pulumi.Input[int]:
        return pulumi.get(self, "decimal_places")

    @decimal_places.setter
    def decimal_places(self, value: pulumi.Input[int]):
        pulumi.set(self, "decimal_places", value)


if not MYPY:
    class DimensionFieldSchema2ArgsDict(TypedDict):
        column_name: pulumi.Input[str]
        data_set_identifier: pulumi.Input[str]
elif False:
    DimensionFieldSchema2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DimensionFieldSchema2Args:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 data_set_identifier: pulumi.Input[str]):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)


if not MYPY:
    class DimensionFieldSchemaArgsDict(TypedDict):
        categorical_dimension_field: NotRequired[pulumi.Input['DimensionFieldSchemaCategoricalDimensionFieldArgsDict']]
        date_dimension_field: NotRequired[pulumi.Input['DimensionFieldSchemaDateDimensionFieldArgsDict']]
        numerical_dimension_field: NotRequired[pulumi.Input['DimensionFieldSchemaNumericalDimensionFieldArgsDict']]
elif False:
    DimensionFieldSchemaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DimensionFieldSchemaArgs:
    def __init__(__self__, *,
                 categorical_dimension_field: Optional[pulumi.Input['DimensionFieldSchemaCategoricalDimensionFieldArgs']] = None,
                 date_dimension_field: Optional[pulumi.Input['DimensionFieldSchemaDateDimensionFieldArgs']] = None,
                 numerical_dimension_field: Optional[pulumi.Input['DimensionFieldSchemaNumericalDimensionFieldArgs']] = None):
        if categorical_dimension_field is not None:
            pulumi.set(__self__, "categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            pulumi.set(__self__, "date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            pulumi.set(__self__, "numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional[pulumi.Input['DimensionFieldSchemaCategoricalDimensionFieldArgs']]:
        return pulumi.get(self, "categorical_dimension_field")

    @categorical_dimension_field.setter
    def categorical_dimension_field(self, value: Optional[pulumi.Input['DimensionFieldSchemaCategoricalDimensionFieldArgs']]):
        pulumi.set(self, "categorical_dimension_field", value)

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional[pulumi.Input['DimensionFieldSchemaDateDimensionFieldArgs']]:
        return pulumi.get(self, "date_dimension_field")

    @date_dimension_field.setter
    def date_dimension_field(self, value: Optional[pulumi.Input['DimensionFieldSchemaDateDimensionFieldArgs']]):
        pulumi.set(self, "date_dimension_field", value)

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional[pulumi.Input['DimensionFieldSchemaNumericalDimensionFieldArgs']]:
        return pulumi.get(self, "numerical_dimension_field")

    @numerical_dimension_field.setter
    def numerical_dimension_field(self, value: Optional[pulumi.Input['DimensionFieldSchemaNumericalDimensionFieldArgs']]):
        pulumi.set(self, "numerical_dimension_field", value)


if not MYPY:
    class DimensionFieldSchemaCategoricalDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    DimensionFieldSchemaCategoricalDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DimensionFieldSchemaCategoricalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class DimensionFieldSchemaDateDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        date_granularity: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    DimensionFieldSchemaDateDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DimensionFieldSchemaDateDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 date_granularity: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if date_granularity is not None:
            pulumi.set(__self__, "date_granularity", date_granularity)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_granularity")

    @date_granularity.setter
    def date_granularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_granularity", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class DimensionFieldSchemaNumericalDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    DimensionFieldSchemaNumericalDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DimensionFieldSchemaNumericalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class DrillDownFiltersArgsDict(TypedDict):
        category_filter: NotRequired[pulumi.Input['CategoryFilterArgsDict']]
        numeric_equality_filter: NotRequired[pulumi.Input['NumericEqualityFilterArgsDict']]
        time_range_filter: NotRequired[pulumi.Input['TimeRangeFilterArgsDict']]
elif False:
    DrillDownFiltersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DrillDownFiltersArgs:
    def __init__(__self__, *,
                 category_filter: Optional[pulumi.Input['CategoryFilterArgs']] = None,
                 numeric_equality_filter: Optional[pulumi.Input['NumericEqualityFilterArgs']] = None,
                 time_range_filter: Optional[pulumi.Input['TimeRangeFilterArgs']] = None):
        if category_filter is not None:
            pulumi.set(__self__, "category_filter", category_filter)
        if numeric_equality_filter is not None:
            pulumi.set(__self__, "numeric_equality_filter", numeric_equality_filter)
        if time_range_filter is not None:
            pulumi.set(__self__, "time_range_filter", time_range_filter)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional[pulumi.Input['CategoryFilterArgs']]:
        return pulumi.get(self, "category_filter")

    @category_filter.setter
    def category_filter(self, value: Optional[pulumi.Input['CategoryFilterArgs']]):
        pulumi.set(self, "category_filter", value)

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional[pulumi.Input['NumericEqualityFilterArgs']]:
        return pulumi.get(self, "numeric_equality_filter")

    @numeric_equality_filter.setter
    def numeric_equality_filter(self, value: Optional[pulumi.Input['NumericEqualityFilterArgs']]):
        pulumi.set(self, "numeric_equality_filter", value)

    @property
    @pulumi.getter(name="timeRangeFilter")
    def time_range_filter(self) -> Optional[pulumi.Input['TimeRangeFilterArgs']]:
        return pulumi.get(self, "time_range_filter")

    @time_range_filter.setter
    def time_range_filter(self, value: Optional[pulumi.Input['TimeRangeFilterArgs']]):
        pulumi.set(self, "time_range_filter", value)


if not MYPY:
    class DynamicValueArgsDict(TypedDict):
        default_value_column: pulumi.Input['ColumnArgsDict']
        group_name_column: NotRequired[pulumi.Input['ColumnArgsDict']]
        user_name_column: NotRequired[pulumi.Input['ColumnArgsDict']]
elif False:
    DynamicValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DynamicValueArgs:
    def __init__(__self__, *,
                 default_value_column: pulumi.Input['ColumnArgs'],
                 group_name_column: Optional[pulumi.Input['ColumnArgs']] = None,
                 user_name_column: Optional[pulumi.Input['ColumnArgs']] = None):
        pulumi.set(__self__, "default_value_column", default_value_column)
        if group_name_column is not None:
            pulumi.set(__self__, "group_name_column", group_name_column)
        if user_name_column is not None:
            pulumi.set(__self__, "user_name_column", user_name_column)

    @property
    @pulumi.getter(name="defaultValueColumn")
    def default_value_column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "default_value_column")

    @default_value_column.setter
    def default_value_column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "default_value_column", value)

    @property
    @pulumi.getter(name="groupNameColumn")
    def group_name_column(self) -> Optional[pulumi.Input['ColumnArgs']]:
        return pulumi.get(self, "group_name_column")

    @group_name_column.setter
    def group_name_column(self, value: Optional[pulumi.Input['ColumnArgs']]):
        pulumi.set(self, "group_name_column", value)

    @property
    @pulumi.getter(name="userNameColumn")
    def user_name_column(self) -> Optional[pulumi.Input['ColumnArgs']]:
        return pulumi.get(self, "user_name_column")

    @user_name_column.setter
    def user_name_column(self, value: Optional[pulumi.Input['ColumnArgs']]):
        pulumi.set(self, "user_name_column", value)


if not MYPY:
    class FieldSortArgsDict(TypedDict):
        direction: pulumi.Input[str]
        field_id: pulumi.Input[str]
elif False:
    FieldSortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FieldSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 field_id: pulumi.Input[str]):
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


if not MYPY:
    class FieldSortOptionsArgsDict(TypedDict):
        column_sort: NotRequired[pulumi.Input['ColumnSortArgsDict']]
        field_sort: NotRequired[pulumi.Input['FieldSortArgsDict']]
elif False:
    FieldSortOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FieldSortOptionsArgs:
    def __init__(__self__, *,
                 column_sort: Optional[pulumi.Input['ColumnSortArgs']] = None,
                 field_sort: Optional[pulumi.Input['FieldSortArgs']] = None):
        if column_sort is not None:
            pulumi.set(__self__, "column_sort", column_sort)
        if field_sort is not None:
            pulumi.set(__self__, "field_sort", field_sort)

    @property
    @pulumi.getter(name="columnSort")
    def column_sort(self) -> Optional[pulumi.Input['ColumnSortArgs']]:
        return pulumi.get(self, "column_sort")

    @column_sort.setter
    def column_sort(self, value: Optional[pulumi.Input['ColumnSortArgs']]):
        pulumi.set(self, "column_sort", value)

    @property
    @pulumi.getter(name="fieldSort")
    def field_sort(self) -> Optional[pulumi.Input['FieldSortArgs']]:
        return pulumi.get(self, "field_sort")

    @field_sort.setter
    def field_sort(self, value: Optional[pulumi.Input['FieldSortArgs']]):
        pulumi.set(self, "field_sort", value)


if not MYPY:
    class FilterControlsArgsDict(TypedDict):
        date_time_picker: NotRequired[pulumi.Input['FilterControlsDateTimePickerArgsDict']]
        dropdown: NotRequired[pulumi.Input['FilterControlsDropdownArgsDict']]
        list: NotRequired[pulumi.Input['FilterControlsListArgsDict']]
        relative_date_time: NotRequired[pulumi.Input['FilterControlsRelativeDateTimeArgsDict']]
        slider: NotRequired[pulumi.Input['FilterControlsSliderArgsDict']]
        text_area: NotRequired[pulumi.Input['FilterControlsTextAreaArgsDict']]
        text_field: NotRequired[pulumi.Input['FilterControlsTextFieldArgsDict']]
elif False:
    FilterControlsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsArgs:
    def __init__(__self__, *,
                 date_time_picker: Optional[pulumi.Input['FilterControlsDateTimePickerArgs']] = None,
                 dropdown: Optional[pulumi.Input['FilterControlsDropdownArgs']] = None,
                 list: Optional[pulumi.Input['FilterControlsListArgs']] = None,
                 relative_date_time: Optional[pulumi.Input['FilterControlsRelativeDateTimeArgs']] = None,
                 slider: Optional[pulumi.Input['FilterControlsSliderArgs']] = None,
                 text_area: Optional[pulumi.Input['FilterControlsTextAreaArgs']] = None,
                 text_field: Optional[pulumi.Input['FilterControlsTextFieldArgs']] = None):
        if date_time_picker is not None:
            pulumi.set(__self__, "date_time_picker", date_time_picker)
        if dropdown is not None:
            pulumi.set(__self__, "dropdown", dropdown)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if relative_date_time is not None:
            pulumi.set(__self__, "relative_date_time", relative_date_time)
        if slider is not None:
            pulumi.set(__self__, "slider", slider)
        if text_area is not None:
            pulumi.set(__self__, "text_area", text_area)
        if text_field is not None:
            pulumi.set(__self__, "text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional[pulumi.Input['FilterControlsDateTimePickerArgs']]:
        return pulumi.get(self, "date_time_picker")

    @date_time_picker.setter
    def date_time_picker(self, value: Optional[pulumi.Input['FilterControlsDateTimePickerArgs']]):
        pulumi.set(self, "date_time_picker", value)

    @property
    @pulumi.getter
    def dropdown(self) -> Optional[pulumi.Input['FilterControlsDropdownArgs']]:
        return pulumi.get(self, "dropdown")

    @dropdown.setter
    def dropdown(self, value: Optional[pulumi.Input['FilterControlsDropdownArgs']]):
        pulumi.set(self, "dropdown", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input['FilterControlsListArgs']]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input['FilterControlsListArgs']]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter(name="relativeDateTime")
    def relative_date_time(self) -> Optional[pulumi.Input['FilterControlsRelativeDateTimeArgs']]:
        return pulumi.get(self, "relative_date_time")

    @relative_date_time.setter
    def relative_date_time(self, value: Optional[pulumi.Input['FilterControlsRelativeDateTimeArgs']]):
        pulumi.set(self, "relative_date_time", value)

    @property
    @pulumi.getter
    def slider(self) -> Optional[pulumi.Input['FilterControlsSliderArgs']]:
        return pulumi.get(self, "slider")

    @slider.setter
    def slider(self, value: Optional[pulumi.Input['FilterControlsSliderArgs']]):
        pulumi.set(self, "slider", value)

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional[pulumi.Input['FilterControlsTextAreaArgs']]:
        return pulumi.get(self, "text_area")

    @text_area.setter
    def text_area(self, value: Optional[pulumi.Input['FilterControlsTextAreaArgs']]):
        pulumi.set(self, "text_area", value)

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional[pulumi.Input['FilterControlsTextFieldArgs']]:
        return pulumi.get(self, "text_field")

    @text_field.setter
    def text_field(self, value: Optional[pulumi.Input['FilterControlsTextFieldArgs']]):
        pulumi.set(self, "text_field", value)


if not MYPY:
    class FilterControlsDateTimePickerArgsDict(TypedDict):
        filter_control_id: pulumi.Input[str]
        source_filter_id: pulumi.Input[str]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['FilterControlsDateTimePickerDisplayOptionsArgsDict']]
        type: NotRequired[pulumi.Input[str]]
elif False:
    FilterControlsDateTimePickerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsDateTimePickerArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['FilterControlsDateTimePickerDisplayOptionsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['FilterControlsDateTimePickerDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['FilterControlsDateTimePickerDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FilterControlsDateTimePickerDisplayOptionsArgsDict(TypedDict):
        date_time_format: NotRequired[pulumi.Input[str]]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    FilterControlsDateTimePickerDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsDateTimePickerDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class FilterControlsDropdownArgsDict(TypedDict):
        filter_control_id: pulumi.Input[str]
        source_filter_id: pulumi.Input[str]
        title: pulumi.Input[str]
        cascading_control_configuration: NotRequired[pulumi.Input['CascadingControlConfigurationArgsDict']]
        display_options: NotRequired[pulumi.Input['FilterControlsDropdownDisplayOptionsArgsDict']]
        selectable_values: NotRequired[pulumi.Input['FilterControlsDropdownSelectableValuesArgsDict']]
        type: NotRequired[pulumi.Input[str]]
elif False:
    FilterControlsDropdownArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsDropdownArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['CascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['FilterControlsDropdownDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['FilterControlsDropdownSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['CascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['CascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['FilterControlsDropdownDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['FilterControlsDropdownDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['FilterControlsDropdownSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['FilterControlsDropdownSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FilterControlsDropdownDisplayOptionsArgsDict(TypedDict):
        select_all_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    FilterControlsDropdownDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsDropdownDisplayOptionsArgs:
    def __init__(__self__, *,
                 select_all_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class FilterControlsDropdownSelectableValuesArgsDict(TypedDict):
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    FilterControlsDropdownSelectableValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsDropdownSelectableValuesArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class FilterControlsListArgsDict(TypedDict):
        filter_control_id: pulumi.Input[str]
        source_filter_id: pulumi.Input[str]
        title: pulumi.Input[str]
        cascading_control_configuration: NotRequired[pulumi.Input['CascadingControlConfigurationArgsDict']]
        display_options: NotRequired[pulumi.Input['FilterControlsListDisplayOptionsArgsDict']]
        selectable_values: NotRequired[pulumi.Input['FilterControlsListSelectableValuesArgsDict']]
        type: NotRequired[pulumi.Input[str]]
elif False:
    FilterControlsListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsListArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['CascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['FilterControlsListDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['FilterControlsListSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['CascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['CascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['FilterControlsListDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['FilterControlsListDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['FilterControlsListSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['FilterControlsListSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FilterControlsListDisplayOptionsArgsDict(TypedDict):
        search_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        select_all_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    FilterControlsListDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsListDisplayOptionsArgs:
    def __init__(__self__, *,
                 search_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 select_all_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if search_options is not None:
            pulumi.set(__self__, "search_options", search_options)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "search_options")

    @search_options.setter
    def search_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "search_options", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class FilterControlsListSelectableValuesArgsDict(TypedDict):
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    FilterControlsListSelectableValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsListSelectableValuesArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class FilterControlsRelativeDateTimeArgsDict(TypedDict):
        filter_control_id: pulumi.Input[str]
        source_filter_id: pulumi.Input[str]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['FilterControlsRelativeDateTimeDisplayOptionsArgsDict']]
elif False:
    FilterControlsRelativeDateTimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsRelativeDateTimeArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['FilterControlsRelativeDateTimeDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['FilterControlsRelativeDateTimeDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['FilterControlsRelativeDateTimeDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class FilterControlsRelativeDateTimeDisplayOptionsArgsDict(TypedDict):
        date_time_format: NotRequired[pulumi.Input[str]]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    FilterControlsRelativeDateTimeDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsRelativeDateTimeDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class FilterControlsSliderArgsDict(TypedDict):
        filter_control_id: pulumi.Input[str]
        maximum_value: pulumi.Input[float]
        minimum_value: pulumi.Input[float]
        source_filter_id: pulumi.Input[str]
        step_size: pulumi.Input[float]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['FilterControlsSliderDisplayOptionsArgsDict']]
        type: NotRequired[pulumi.Input[str]]
elif False:
    FilterControlsSliderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsSliderArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 maximum_value: pulumi.Input[float],
                 minimum_value: pulumi.Input[float],
                 source_filter_id: pulumi.Input[str],
                 step_size: pulumi.Input[float],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['FilterControlsSliderDisplayOptionsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "maximum_value", maximum_value)
        pulumi.set(__self__, "minimum_value", minimum_value)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "step_size", step_size)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "maximum_value")

    @maximum_value.setter
    def maximum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_value", value)

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum_value")

    @minimum_value.setter
    def minimum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_value", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "step_size", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['FilterControlsSliderDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['FilterControlsSliderDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FilterControlsSliderDisplayOptionsArgsDict(TypedDict):
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    FilterControlsSliderDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsSliderDisplayOptionsArgs:
    def __init__(__self__, *,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class FilterControlsTextAreaArgsDict(TypedDict):
        filter_control_id: pulumi.Input[str]
        source_filter_id: pulumi.Input[str]
        title: pulumi.Input[str]
        delimiter: NotRequired[pulumi.Input[str]]
        display_options: NotRequired[pulumi.Input['TextAreaControlDisplayOptionsArgsDict']]
elif False:
    FilterControlsTextAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsTextAreaArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 display_options: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class FilterControlsTextFieldArgsDict(TypedDict):
        filter_control_id: pulumi.Input[str]
        source_filter_id: pulumi.Input[str]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['TextAreaControlDisplayOptionsArgsDict']]
elif False:
    FilterControlsTextFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilterControlsTextFieldArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class FiltersArgsDict(TypedDict):
        category_filter: NotRequired[pulumi.Input['FiltersCategoryFilterArgsDict']]
        numeric_equality_filter: NotRequired[pulumi.Input['FiltersNumericEqualityFilterArgsDict']]
        numeric_range_filter: NotRequired[pulumi.Input['FiltersNumericRangeFilterArgsDict']]
        relative_dates_filter: NotRequired[pulumi.Input['FiltersRelativeDatesFilterArgsDict']]
        time_equality_filter: NotRequired[pulumi.Input['FiltersTimeEqualityFilterArgsDict']]
        time_range_filter: NotRequired[pulumi.Input['FiltersTimeRangeFilterArgsDict']]
        top_bottom_filter: NotRequired[pulumi.Input['FiltersTopBottomFilterArgsDict']]
elif False:
    FiltersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersArgs:
    def __init__(__self__, *,
                 category_filter: Optional[pulumi.Input['FiltersCategoryFilterArgs']] = None,
                 numeric_equality_filter: Optional[pulumi.Input['FiltersNumericEqualityFilterArgs']] = None,
                 numeric_range_filter: Optional[pulumi.Input['FiltersNumericRangeFilterArgs']] = None,
                 relative_dates_filter: Optional[pulumi.Input['FiltersRelativeDatesFilterArgs']] = None,
                 time_equality_filter: Optional[pulumi.Input['FiltersTimeEqualityFilterArgs']] = None,
                 time_range_filter: Optional[pulumi.Input['FiltersTimeRangeFilterArgs']] = None,
                 top_bottom_filter: Optional[pulumi.Input['FiltersTopBottomFilterArgs']] = None):
        if category_filter is not None:
            pulumi.set(__self__, "category_filter", category_filter)
        if numeric_equality_filter is not None:
            pulumi.set(__self__, "numeric_equality_filter", numeric_equality_filter)
        if numeric_range_filter is not None:
            pulumi.set(__self__, "numeric_range_filter", numeric_range_filter)
        if relative_dates_filter is not None:
            pulumi.set(__self__, "relative_dates_filter", relative_dates_filter)
        if time_equality_filter is not None:
            pulumi.set(__self__, "time_equality_filter", time_equality_filter)
        if time_range_filter is not None:
            pulumi.set(__self__, "time_range_filter", time_range_filter)
        if top_bottom_filter is not None:
            pulumi.set(__self__, "top_bottom_filter", top_bottom_filter)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional[pulumi.Input['FiltersCategoryFilterArgs']]:
        return pulumi.get(self, "category_filter")

    @category_filter.setter
    def category_filter(self, value: Optional[pulumi.Input['FiltersCategoryFilterArgs']]):
        pulumi.set(self, "category_filter", value)

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional[pulumi.Input['FiltersNumericEqualityFilterArgs']]:
        return pulumi.get(self, "numeric_equality_filter")

    @numeric_equality_filter.setter
    def numeric_equality_filter(self, value: Optional[pulumi.Input['FiltersNumericEqualityFilterArgs']]):
        pulumi.set(self, "numeric_equality_filter", value)

    @property
    @pulumi.getter(name="numericRangeFilter")
    def numeric_range_filter(self) -> Optional[pulumi.Input['FiltersNumericRangeFilterArgs']]:
        return pulumi.get(self, "numeric_range_filter")

    @numeric_range_filter.setter
    def numeric_range_filter(self, value: Optional[pulumi.Input['FiltersNumericRangeFilterArgs']]):
        pulumi.set(self, "numeric_range_filter", value)

    @property
    @pulumi.getter(name="relativeDatesFilter")
    def relative_dates_filter(self) -> Optional[pulumi.Input['FiltersRelativeDatesFilterArgs']]:
        return pulumi.get(self, "relative_dates_filter")

    @relative_dates_filter.setter
    def relative_dates_filter(self, value: Optional[pulumi.Input['FiltersRelativeDatesFilterArgs']]):
        pulumi.set(self, "relative_dates_filter", value)

    @property
    @pulumi.getter(name="timeEqualityFilter")
    def time_equality_filter(self) -> Optional[pulumi.Input['FiltersTimeEqualityFilterArgs']]:
        return pulumi.get(self, "time_equality_filter")

    @time_equality_filter.setter
    def time_equality_filter(self, value: Optional[pulumi.Input['FiltersTimeEqualityFilterArgs']]):
        pulumi.set(self, "time_equality_filter", value)

    @property
    @pulumi.getter(name="timeRangeFilter")
    def time_range_filter(self) -> Optional[pulumi.Input['FiltersTimeRangeFilterArgs']]:
        return pulumi.get(self, "time_range_filter")

    @time_range_filter.setter
    def time_range_filter(self, value: Optional[pulumi.Input['FiltersTimeRangeFilterArgs']]):
        pulumi.set(self, "time_range_filter", value)

    @property
    @pulumi.getter(name="topBottomFilter")
    def top_bottom_filter(self) -> Optional[pulumi.Input['FiltersTopBottomFilterArgs']]:
        return pulumi.get(self, "top_bottom_filter")

    @top_bottom_filter.setter
    def top_bottom_filter(self, value: Optional[pulumi.Input['FiltersTopBottomFilterArgs']]):
        pulumi.set(self, "top_bottom_filter", value)


if not MYPY:
    class FiltersCategoryFilterArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        configuration: pulumi.Input['FiltersCategoryFilterConfigurationArgsDict']
        filter_id: pulumi.Input[str]
elif False:
    FiltersCategoryFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersCategoryFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 configuration: pulumi.Input['FiltersCategoryFilterConfigurationArgs'],
                 filter_id: pulumi.Input[str]):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "filter_id", filter_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['FiltersCategoryFilterConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['FiltersCategoryFilterConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)


if not MYPY:
    class FiltersCategoryFilterConfigurationArgsDict(TypedDict):
        custom_filter_configuration: NotRequired[pulumi.Input['FiltersCategoryFilterConfigurationCustomFilterConfigurationArgsDict']]
        custom_filter_list_configuration: NotRequired[pulumi.Input['FiltersCategoryFilterConfigurationCustomFilterListConfigurationArgsDict']]
        filter_list_configuration: NotRequired[pulumi.Input['FiltersCategoryFilterConfigurationFilterListConfigurationArgsDict']]
elif False:
    FiltersCategoryFilterConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersCategoryFilterConfigurationArgs:
    def __init__(__self__, *,
                 custom_filter_configuration: Optional[pulumi.Input['FiltersCategoryFilterConfigurationCustomFilterConfigurationArgs']] = None,
                 custom_filter_list_configuration: Optional[pulumi.Input['FiltersCategoryFilterConfigurationCustomFilterListConfigurationArgs']] = None,
                 filter_list_configuration: Optional[pulumi.Input['FiltersCategoryFilterConfigurationFilterListConfigurationArgs']] = None):
        if custom_filter_configuration is not None:
            pulumi.set(__self__, "custom_filter_configuration", custom_filter_configuration)
        if custom_filter_list_configuration is not None:
            pulumi.set(__self__, "custom_filter_list_configuration", custom_filter_list_configuration)
        if filter_list_configuration is not None:
            pulumi.set(__self__, "filter_list_configuration", filter_list_configuration)

    @property
    @pulumi.getter(name="customFilterConfiguration")
    def custom_filter_configuration(self) -> Optional[pulumi.Input['FiltersCategoryFilterConfigurationCustomFilterConfigurationArgs']]:
        return pulumi.get(self, "custom_filter_configuration")

    @custom_filter_configuration.setter
    def custom_filter_configuration(self, value: Optional[pulumi.Input['FiltersCategoryFilterConfigurationCustomFilterConfigurationArgs']]):
        pulumi.set(self, "custom_filter_configuration", value)

    @property
    @pulumi.getter(name="customFilterListConfiguration")
    def custom_filter_list_configuration(self) -> Optional[pulumi.Input['FiltersCategoryFilterConfigurationCustomFilterListConfigurationArgs']]:
        return pulumi.get(self, "custom_filter_list_configuration")

    @custom_filter_list_configuration.setter
    def custom_filter_list_configuration(self, value: Optional[pulumi.Input['FiltersCategoryFilterConfigurationCustomFilterListConfigurationArgs']]):
        pulumi.set(self, "custom_filter_list_configuration", value)

    @property
    @pulumi.getter(name="filterListConfiguration")
    def filter_list_configuration(self) -> Optional[pulumi.Input['FiltersCategoryFilterConfigurationFilterListConfigurationArgs']]:
        return pulumi.get(self, "filter_list_configuration")

    @filter_list_configuration.setter
    def filter_list_configuration(self, value: Optional[pulumi.Input['FiltersCategoryFilterConfigurationFilterListConfigurationArgs']]):
        pulumi.set(self, "filter_list_configuration", value)


if not MYPY:
    class FiltersCategoryFilterConfigurationCustomFilterConfigurationArgsDict(TypedDict):
        match_operator: pulumi.Input[str]
        null_option: pulumi.Input[str]
        category_value: NotRequired[pulumi.Input[str]]
        parameter_name: NotRequired[pulumi.Input[str]]
        select_all_options: NotRequired[pulumi.Input[str]]
elif False:
    FiltersCategoryFilterConfigurationCustomFilterConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersCategoryFilterConfigurationCustomFilterConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input[str],
                 null_option: pulumi.Input[str],
                 category_value: Optional[pulumi.Input[str]] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 select_all_options: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "match_operator", match_operator)
        pulumi.set(__self__, "null_option", null_option)
        if category_value is not None:
            pulumi.set(__self__, "category_value", category_value)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input[str]:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="categoryValue")
    def category_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category_value")

    @category_value.setter
    def category_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category_value", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "select_all_options", value)


if not MYPY:
    class FiltersCategoryFilterConfigurationCustomFilterListConfigurationArgsDict(TypedDict):
        match_operator: pulumi.Input[str]
        null_option: pulumi.Input[str]
        category_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        select_all_options: NotRequired[pulumi.Input[str]]
elif False:
    FiltersCategoryFilterConfigurationCustomFilterListConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersCategoryFilterConfigurationCustomFilterListConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input[str],
                 null_option: pulumi.Input[str],
                 category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 select_all_options: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "match_operator", match_operator)
        pulumi.set(__self__, "null_option", null_option)
        if category_values is not None:
            pulumi.set(__self__, "category_values", category_values)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input[str]:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "select_all_options", value)


if not MYPY:
    class FiltersCategoryFilterConfigurationFilterListConfigurationArgsDict(TypedDict):
        match_operator: pulumi.Input[str]
        category_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        select_all_options: NotRequired[pulumi.Input[str]]
elif False:
    FiltersCategoryFilterConfigurationFilterListConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersCategoryFilterConfigurationFilterListConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input[str],
                 category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 select_all_options: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "match_operator", match_operator)
        if category_values is not None:
            pulumi.set(__self__, "category_values", category_values)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "select_all_options", value)


if not MYPY:
    class FiltersNumericEqualityFilterArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        filter_id: pulumi.Input[str]
        match_operator: pulumi.Input[str]
        null_option: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input['AggregationFunctionArgsDict']]
        parameter_name: NotRequired[pulumi.Input[str]]
        select_all_options: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[float]]
elif False:
    FiltersNumericEqualityFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersNumericEqualityFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 filter_id: pulumi.Input[str],
                 match_operator: pulumi.Input[str],
                 null_option: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['AggregationFunctionArgs']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 select_all_options: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "match_operator", match_operator)
        pulumi.set(__self__, "null_option", null_option)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input[str]:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['AggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['AggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FiltersNumericRangeFilterArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        filter_id: pulumi.Input[str]
        null_option: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input['AggregationFunctionArgsDict']]
        include_maximum: NotRequired[pulumi.Input[bool]]
        include_minimum: NotRequired[pulumi.Input[bool]]
        range_maximum: NotRequired[pulumi.Input['FiltersNumericRangeFilterRangeMaximumArgsDict']]
        range_minimum: NotRequired[pulumi.Input['FiltersNumericRangeFilterRangeMinimumArgsDict']]
        select_all_options: NotRequired[pulumi.Input[str]]
elif False:
    FiltersNumericRangeFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersNumericRangeFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['AggregationFunctionArgs']] = None,
                 include_maximum: Optional[pulumi.Input[bool]] = None,
                 include_minimum: Optional[pulumi.Input[bool]] = None,
                 range_maximum: Optional[pulumi.Input['FiltersNumericRangeFilterRangeMaximumArgs']] = None,
                 range_minimum: Optional[pulumi.Input['FiltersNumericRangeFilterRangeMinimumArgs']] = None,
                 select_all_options: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "null_option", null_option)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if include_maximum is not None:
            pulumi.set(__self__, "include_maximum", include_maximum)
        if include_minimum is not None:
            pulumi.set(__self__, "include_minimum", include_minimum)
        if range_maximum is not None:
            pulumi.set(__self__, "range_maximum", range_maximum)
        if range_minimum is not None:
            pulumi.set(__self__, "range_minimum", range_minimum)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input[str]:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['AggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['AggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="includeMaximum")
    def include_maximum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_maximum")

    @include_maximum.setter
    def include_maximum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_maximum", value)

    @property
    @pulumi.getter(name="includeMinimum")
    def include_minimum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_minimum")

    @include_minimum.setter
    def include_minimum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_minimum", value)

    @property
    @pulumi.getter(name="rangeMaximum")
    def range_maximum(self) -> Optional[pulumi.Input['FiltersNumericRangeFilterRangeMaximumArgs']]:
        return pulumi.get(self, "range_maximum")

    @range_maximum.setter
    def range_maximum(self, value: Optional[pulumi.Input['FiltersNumericRangeFilterRangeMaximumArgs']]):
        pulumi.set(self, "range_maximum", value)

    @property
    @pulumi.getter(name="rangeMinimum")
    def range_minimum(self) -> Optional[pulumi.Input['FiltersNumericRangeFilterRangeMinimumArgs']]:
        return pulumi.get(self, "range_minimum")

    @range_minimum.setter
    def range_minimum(self, value: Optional[pulumi.Input['FiltersNumericRangeFilterRangeMinimumArgs']]):
        pulumi.set(self, "range_minimum", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "select_all_options", value)


if not MYPY:
    class FiltersNumericRangeFilterRangeMaximumArgsDict(TypedDict):
        parameter: NotRequired[pulumi.Input[str]]
        static_value: NotRequired[pulumi.Input[float]]
elif False:
    FiltersNumericRangeFilterRangeMaximumArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersNumericRangeFilterRangeMaximumArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 static_value: Optional[pulumi.Input[float]] = None):
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if static_value is not None:
            pulumi.set(__self__, "static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "static_value", value)


if not MYPY:
    class FiltersNumericRangeFilterRangeMinimumArgsDict(TypedDict):
        parameter: NotRequired[pulumi.Input[str]]
        static_value: NotRequired[pulumi.Input[float]]
elif False:
    FiltersNumericRangeFilterRangeMinimumArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersNumericRangeFilterRangeMinimumArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 static_value: Optional[pulumi.Input[float]] = None):
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if static_value is not None:
            pulumi.set(__self__, "static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "static_value", value)


if not MYPY:
    class FiltersRelativeDatesFilterArgsDict(TypedDict):
        anchor_date_configuration: pulumi.Input['FiltersRelativeDatesFilterAnchorDateConfigurationArgsDict']
        column: pulumi.Input['ColumnArgsDict']
        filter_id: pulumi.Input[str]
        minimum_granularity: pulumi.Input[str]
        null_option: pulumi.Input[str]
        relative_date_type: pulumi.Input[str]
        time_granularity: pulumi.Input[str]
        exclude_period_configuration: NotRequired[pulumi.Input['FiltersRelativeDatesFilterExcludePeriodConfigurationArgsDict']]
        parameter_name: NotRequired[pulumi.Input[str]]
        relative_date_value: NotRequired[pulumi.Input[int]]
elif False:
    FiltersRelativeDatesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersRelativeDatesFilterArgs:
    def __init__(__self__, *,
                 anchor_date_configuration: pulumi.Input['FiltersRelativeDatesFilterAnchorDateConfigurationArgs'],
                 column: pulumi.Input['ColumnArgs'],
                 filter_id: pulumi.Input[str],
                 minimum_granularity: pulumi.Input[str],
                 null_option: pulumi.Input[str],
                 relative_date_type: pulumi.Input[str],
                 time_granularity: pulumi.Input[str],
                 exclude_period_configuration: Optional[pulumi.Input['FiltersRelativeDatesFilterExcludePeriodConfigurationArgs']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 relative_date_value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "anchor_date_configuration", anchor_date_configuration)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "minimum_granularity", minimum_granularity)
        pulumi.set(__self__, "null_option", null_option)
        pulumi.set(__self__, "relative_date_type", relative_date_type)
        pulumi.set(__self__, "time_granularity", time_granularity)
        if exclude_period_configuration is not None:
            pulumi.set(__self__, "exclude_period_configuration", exclude_period_configuration)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if relative_date_value is not None:
            pulumi.set(__self__, "relative_date_value", relative_date_value)

    @property
    @pulumi.getter(name="anchorDateConfiguration")
    def anchor_date_configuration(self) -> pulumi.Input['FiltersRelativeDatesFilterAnchorDateConfigurationArgs']:
        return pulumi.get(self, "anchor_date_configuration")

    @anchor_date_configuration.setter
    def anchor_date_configuration(self, value: pulumi.Input['FiltersRelativeDatesFilterAnchorDateConfigurationArgs']):
        pulumi.set(self, "anchor_date_configuration", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="minimumGranularity")
    def minimum_granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "minimum_granularity")

    @minimum_granularity.setter
    def minimum_granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "minimum_granularity", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input[str]:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="relativeDateType")
    def relative_date_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "relative_date_type")

    @relative_date_type.setter
    def relative_date_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_date_type", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter(name="excludePeriodConfiguration")
    def exclude_period_configuration(self) -> Optional[pulumi.Input['FiltersRelativeDatesFilterExcludePeriodConfigurationArgs']]:
        return pulumi.get(self, "exclude_period_configuration")

    @exclude_period_configuration.setter
    def exclude_period_configuration(self, value: Optional[pulumi.Input['FiltersRelativeDatesFilterExcludePeriodConfigurationArgs']]):
        pulumi.set(self, "exclude_period_configuration", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="relativeDateValue")
    def relative_date_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "relative_date_value")

    @relative_date_value.setter
    def relative_date_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "relative_date_value", value)


if not MYPY:
    class FiltersRelativeDatesFilterAnchorDateConfigurationArgsDict(TypedDict):
        anchor_option: NotRequired[pulumi.Input[str]]
        parameter_name: NotRequired[pulumi.Input[str]]
elif False:
    FiltersRelativeDatesFilterAnchorDateConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersRelativeDatesFilterAnchorDateConfigurationArgs:
    def __init__(__self__, *,
                 anchor_option: Optional[pulumi.Input[str]] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None):
        if anchor_option is not None:
            pulumi.set(__self__, "anchor_option", anchor_option)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)

    @property
    @pulumi.getter(name="anchorOption")
    def anchor_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anchor_option")

    @anchor_option.setter
    def anchor_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anchor_option", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)


if not MYPY:
    class FiltersRelativeDatesFilterExcludePeriodConfigurationArgsDict(TypedDict):
        amount: pulumi.Input[int]
        granularity: pulumi.Input[str]
        status: NotRequired[pulumi.Input[str]]
        """
        The dashboard creation status.
        """
elif False:
    FiltersRelativeDatesFilterExcludePeriodConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersRelativeDatesFilterExcludePeriodConfigurationArgs:
    def __init__(__self__, *,
                 amount: pulumi.Input[int],
                 granularity: pulumi.Input[str],
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: The dashboard creation status.
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "granularity", granularity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter
    def granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "granularity")

    @granularity.setter
    def granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "granularity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class FiltersTimeEqualityFilterArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        filter_id: pulumi.Input[str]
        time_granularity: pulumi.Input[str]
        parameter_name: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    FiltersTimeEqualityFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersTimeEqualityFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 filter_id: pulumi.Input[str],
                 time_granularity: pulumi.Input[str],
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "time_granularity", time_granularity)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class FiltersTimeRangeFilterArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        filter_id: pulumi.Input[str]
        null_option: pulumi.Input[str]
        time_granularity: pulumi.Input[str]
        exclude_period_configuration: NotRequired[pulumi.Input['FiltersTimeRangeFilterExcludePeriodConfigurationArgsDict']]
        include_maximum: NotRequired[pulumi.Input[bool]]
        include_minimum: NotRequired[pulumi.Input[bool]]
        range_maximum_value: NotRequired[pulumi.Input['FiltersTimeRangeFilterRangeMaximumValueArgsDict']]
        range_minimum_value: NotRequired[pulumi.Input['FiltersTimeRangeFilterRangeMinimumValueArgsDict']]
elif False:
    FiltersTimeRangeFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersTimeRangeFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input[str],
                 time_granularity: pulumi.Input[str],
                 exclude_period_configuration: Optional[pulumi.Input['FiltersTimeRangeFilterExcludePeriodConfigurationArgs']] = None,
                 include_maximum: Optional[pulumi.Input[bool]] = None,
                 include_minimum: Optional[pulumi.Input[bool]] = None,
                 range_maximum_value: Optional[pulumi.Input['FiltersTimeRangeFilterRangeMaximumValueArgs']] = None,
                 range_minimum_value: Optional[pulumi.Input['FiltersTimeRangeFilterRangeMinimumValueArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "null_option", null_option)
        pulumi.set(__self__, "time_granularity", time_granularity)
        if exclude_period_configuration is not None:
            pulumi.set(__self__, "exclude_period_configuration", exclude_period_configuration)
        if include_maximum is not None:
            pulumi.set(__self__, "include_maximum", include_maximum)
        if include_minimum is not None:
            pulumi.set(__self__, "include_minimum", include_minimum)
        if range_maximum_value is not None:
            pulumi.set(__self__, "range_maximum_value", range_maximum_value)
        if range_minimum_value is not None:
            pulumi.set(__self__, "range_minimum_value", range_minimum_value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input[str]:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter(name="excludePeriodConfiguration")
    def exclude_period_configuration(self) -> Optional[pulumi.Input['FiltersTimeRangeFilterExcludePeriodConfigurationArgs']]:
        return pulumi.get(self, "exclude_period_configuration")

    @exclude_period_configuration.setter
    def exclude_period_configuration(self, value: Optional[pulumi.Input['FiltersTimeRangeFilterExcludePeriodConfigurationArgs']]):
        pulumi.set(self, "exclude_period_configuration", value)

    @property
    @pulumi.getter(name="includeMaximum")
    def include_maximum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_maximum")

    @include_maximum.setter
    def include_maximum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_maximum", value)

    @property
    @pulumi.getter(name="includeMinimum")
    def include_minimum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_minimum")

    @include_minimum.setter
    def include_minimum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_minimum", value)

    @property
    @pulumi.getter(name="rangeMaximumValue")
    def range_maximum_value(self) -> Optional[pulumi.Input['FiltersTimeRangeFilterRangeMaximumValueArgs']]:
        return pulumi.get(self, "range_maximum_value")

    @range_maximum_value.setter
    def range_maximum_value(self, value: Optional[pulumi.Input['FiltersTimeRangeFilterRangeMaximumValueArgs']]):
        pulumi.set(self, "range_maximum_value", value)

    @property
    @pulumi.getter(name="rangeMinimumValue")
    def range_minimum_value(self) -> Optional[pulumi.Input['FiltersTimeRangeFilterRangeMinimumValueArgs']]:
        return pulumi.get(self, "range_minimum_value")

    @range_minimum_value.setter
    def range_minimum_value(self, value: Optional[pulumi.Input['FiltersTimeRangeFilterRangeMinimumValueArgs']]):
        pulumi.set(self, "range_minimum_value", value)


if not MYPY:
    class FiltersTimeRangeFilterExcludePeriodConfigurationArgsDict(TypedDict):
        amount: pulumi.Input[int]
        granularity: pulumi.Input[str]
        status: NotRequired[pulumi.Input[str]]
        """
        The dashboard creation status.
        """
elif False:
    FiltersTimeRangeFilterExcludePeriodConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersTimeRangeFilterExcludePeriodConfigurationArgs:
    def __init__(__self__, *,
                 amount: pulumi.Input[int],
                 granularity: pulumi.Input[str],
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: The dashboard creation status.
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "granularity", granularity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter
    def granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "granularity")

    @granularity.setter
    def granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "granularity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class FiltersTimeRangeFilterRangeMaximumValueArgsDict(TypedDict):
        parameter: NotRequired[pulumi.Input[str]]
        rolling_date: NotRequired[pulumi.Input['FiltersTimeRangeFilterRangeMaximumValueRollingDateArgsDict']]
        static_value: NotRequired[pulumi.Input[str]]
elif False:
    FiltersTimeRangeFilterRangeMaximumValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersTimeRangeFilterRangeMaximumValueArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 rolling_date: Optional[pulumi.Input['FiltersTimeRangeFilterRangeMaximumValueRollingDateArgs']] = None,
                 static_value: Optional[pulumi.Input[str]] = None):
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if rolling_date is not None:
            pulumi.set(__self__, "rolling_date", rolling_date)
        if static_value is not None:
            pulumi.set(__self__, "static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional[pulumi.Input['FiltersTimeRangeFilterRangeMaximumValueRollingDateArgs']]:
        return pulumi.get(self, "rolling_date")

    @rolling_date.setter
    def rolling_date(self, value: Optional[pulumi.Input['FiltersTimeRangeFilterRangeMaximumValueRollingDateArgs']]):
        pulumi.set(self, "rolling_date", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "static_value", value)


if not MYPY:
    class FiltersTimeRangeFilterRangeMaximumValueRollingDateArgsDict(TypedDict):
        expression: pulumi.Input[str]
        data_set_identifier: NotRequired[pulumi.Input[str]]
elif False:
    FiltersTimeRangeFilterRangeMaximumValueRollingDateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersTimeRangeFilterRangeMaximumValueRollingDateArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 data_set_identifier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        if data_set_identifier is not None:
            pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_set_identifier", value)


if not MYPY:
    class FiltersTimeRangeFilterRangeMinimumValueArgsDict(TypedDict):
        parameter: NotRequired[pulumi.Input[str]]
        rolling_date: NotRequired[pulumi.Input['FiltersTimeRangeFilterRangeMinimumValueRollingDateArgsDict']]
        static_value: NotRequired[pulumi.Input[str]]
elif False:
    FiltersTimeRangeFilterRangeMinimumValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersTimeRangeFilterRangeMinimumValueArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 rolling_date: Optional[pulumi.Input['FiltersTimeRangeFilterRangeMinimumValueRollingDateArgs']] = None,
                 static_value: Optional[pulumi.Input[str]] = None):
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if rolling_date is not None:
            pulumi.set(__self__, "rolling_date", rolling_date)
        if static_value is not None:
            pulumi.set(__self__, "static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional[pulumi.Input['FiltersTimeRangeFilterRangeMinimumValueRollingDateArgs']]:
        return pulumi.get(self, "rolling_date")

    @rolling_date.setter
    def rolling_date(self, value: Optional[pulumi.Input['FiltersTimeRangeFilterRangeMinimumValueRollingDateArgs']]):
        pulumi.set(self, "rolling_date", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "static_value", value)


if not MYPY:
    class FiltersTimeRangeFilterRangeMinimumValueRollingDateArgsDict(TypedDict):
        expression: pulumi.Input[str]
        data_set_identifier: NotRequired[pulumi.Input[str]]
elif False:
    FiltersTimeRangeFilterRangeMinimumValueRollingDateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersTimeRangeFilterRangeMinimumValueRollingDateArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 data_set_identifier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        if data_set_identifier is not None:
            pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_set_identifier", value)


if not MYPY:
    class FiltersTopBottomFilterArgsDict(TypedDict):
        aggregation_sort_configurations: pulumi.Input[Sequence[pulumi.Input['FiltersTopBottomFilterAggregationSortConfigurationArgsDict']]]
        column: pulumi.Input['ColumnArgsDict']
        filter_id: pulumi.Input[str]
        time_granularity: pulumi.Input[str]
        limit: NotRequired[pulumi.Input[int]]
        parameter_name: NotRequired[pulumi.Input[str]]
elif False:
    FiltersTopBottomFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersTopBottomFilterArgs:
    def __init__(__self__, *,
                 aggregation_sort_configurations: pulumi.Input[Sequence[pulumi.Input['FiltersTopBottomFilterAggregationSortConfigurationArgs']]],
                 column: pulumi.Input['ColumnArgs'],
                 filter_id: pulumi.Input[str],
                 time_granularity: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aggregation_sort_configurations", aggregation_sort_configurations)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "time_granularity", time_granularity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)

    @property
    @pulumi.getter(name="aggregationSortConfigurations")
    def aggregation_sort_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['FiltersTopBottomFilterAggregationSortConfigurationArgs']]]:
        return pulumi.get(self, "aggregation_sort_configurations")

    @aggregation_sort_configurations.setter
    def aggregation_sort_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['FiltersTopBottomFilterAggregationSortConfigurationArgs']]]):
        pulumi.set(self, "aggregation_sort_configurations", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)


if not MYPY:
    class FiltersTopBottomFilterAggregationSortConfigurationArgsDict(TypedDict):
        aggregation_function: pulumi.Input['AggregationFunctionArgsDict']
        column: pulumi.Input['ColumnArgsDict']
        sort_direction: pulumi.Input[str]
elif False:
    FiltersTopBottomFilterAggregationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FiltersTopBottomFilterAggregationSortConfigurationArgs:
    def __init__(__self__, *,
                 aggregation_function: pulumi.Input['AggregationFunctionArgs'],
                 column: pulumi.Input['ColumnArgs'],
                 sort_direction: pulumi.Input[str]):
        pulumi.set(__self__, "aggregation_function", aggregation_function)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "sort_direction", sort_direction)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> pulumi.Input['AggregationFunctionArgs']:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: pulumi.Input['AggregationFunctionArgs']):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="sortDirection")
    def sort_direction(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sort_direction")

    @sort_direction.setter
    def sort_direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "sort_direction", value)


if not MYPY:
    class FolderPermissionArgsDict(TypedDict):
        actions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        principal: pulumi.Input[str]
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
elif False:
    FolderPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FolderPermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: List of IAM actions to grant or revoke permissions on.
        :param pulumi.Input[str] principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)


if not MYPY:
    class FontConfigurationArgsDict(TypedDict):
        font_color: NotRequired[pulumi.Input[str]]
        font_decoration: NotRequired[pulumi.Input[str]]
        font_size: NotRequired[pulumi.Input['FontConfigurationFontSizeArgsDict']]
        font_style: NotRequired[pulumi.Input[str]]
        font_weight: NotRequired[pulumi.Input['FontConfigurationFontWeightArgsDict']]
elif False:
    FontConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FontConfigurationArgs:
    def __init__(__self__, *,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_decoration: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input['FontConfigurationFontSizeArgs']] = None,
                 font_style: Optional[pulumi.Input[str]] = None,
                 font_weight: Optional[pulumi.Input['FontConfigurationFontWeightArgs']] = None):
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_decoration is not None:
            pulumi.set(__self__, "font_decoration", font_decoration)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_style is not None:
            pulumi.set(__self__, "font_style", font_style)
        if font_weight is not None:
            pulumi.set(__self__, "font_weight", font_weight)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontDecoration")
    def font_decoration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_decoration")

    @font_decoration.setter
    def font_decoration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_decoration", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input['FontConfigurationFontSizeArgs']]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input['FontConfigurationFontSizeArgs']]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontStyle")
    def font_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_style")

    @font_style.setter
    def font_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_style", value)

    @property
    @pulumi.getter(name="fontWeight")
    def font_weight(self) -> Optional[pulumi.Input['FontConfigurationFontWeightArgs']]:
        return pulumi.get(self, "font_weight")

    @font_weight.setter
    def font_weight(self, value: Optional[pulumi.Input['FontConfigurationFontWeightArgs']]):
        pulumi.set(self, "font_weight", value)


if not MYPY:
    class FontConfigurationFontSizeArgsDict(TypedDict):
        relative: NotRequired[pulumi.Input[str]]
elif False:
    FontConfigurationFontSizeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FontConfigurationFontSizeArgs:
    def __init__(__self__, *,
                 relative: Optional[pulumi.Input[str]] = None):
        if relative is not None:
            pulumi.set(__self__, "relative", relative)

    @property
    @pulumi.getter
    def relative(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "relative")

    @relative.setter
    def relative(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relative", value)


if not MYPY:
    class FontConfigurationFontWeightArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
elif False:
    FontConfigurationFontWeightArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FontConfigurationFontWeightArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class FreeFormLayoutElementsArgsDict(TypedDict):
        element_id: pulumi.Input[str]
        element_type: pulumi.Input[str]
        height: pulumi.Input[str]
        width: pulumi.Input[str]
        x_axis_location: pulumi.Input[str]
        y_axis_location: pulumi.Input[str]
        background_style: NotRequired[pulumi.Input['FreeFormLayoutElementsBackgroundStyleArgsDict']]
        border_style: NotRequired[pulumi.Input['FreeFormLayoutElementsBorderStyleArgsDict']]
        loading_animation: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        rendering_rules: NotRequired[pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsRenderingRuleArgsDict']]]]
        selected_border_style: NotRequired[pulumi.Input['FreeFormLayoutElementsSelectedBorderStyleArgsDict']]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    FreeFormLayoutElementsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FreeFormLayoutElementsArgs:
    def __init__(__self__, *,
                 element_id: pulumi.Input[str],
                 element_type: pulumi.Input[str],
                 height: pulumi.Input[str],
                 width: pulumi.Input[str],
                 x_axis_location: pulumi.Input[str],
                 y_axis_location: pulumi.Input[str],
                 background_style: Optional[pulumi.Input['FreeFormLayoutElementsBackgroundStyleArgs']] = None,
                 border_style: Optional[pulumi.Input['FreeFormLayoutElementsBorderStyleArgs']] = None,
                 loading_animation: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 rendering_rules: Optional[pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsRenderingRuleArgs']]]] = None,
                 selected_border_style: Optional[pulumi.Input['FreeFormLayoutElementsSelectedBorderStyleArgs']] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "element_id", element_id)
        pulumi.set(__self__, "element_type", element_type)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x_axis_location", x_axis_location)
        pulumi.set(__self__, "y_axis_location", y_axis_location)
        if background_style is not None:
            pulumi.set(__self__, "background_style", background_style)
        if border_style is not None:
            pulumi.set(__self__, "border_style", border_style)
        if loading_animation is not None:
            pulumi.set(__self__, "loading_animation", loading_animation)
        if rendering_rules is not None:
            pulumi.set(__self__, "rendering_rules", rendering_rules)
        if selected_border_style is not None:
            pulumi.set(__self__, "selected_border_style", selected_border_style)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="elementId")
    def element_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element_id")

    @element_id.setter
    def element_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "element_id", value)

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element_type")

    @element_type.setter
    def element_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "element_type", value)

    @property
    @pulumi.getter
    def height(self) -> pulumi.Input[str]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: pulumi.Input[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[str]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xAxisLocation")
    def x_axis_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "x_axis_location")

    @x_axis_location.setter
    def x_axis_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "x_axis_location", value)

    @property
    @pulumi.getter(name="yAxisLocation")
    def y_axis_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "y_axis_location")

    @y_axis_location.setter
    def y_axis_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "y_axis_location", value)

    @property
    @pulumi.getter(name="backgroundStyle")
    def background_style(self) -> Optional[pulumi.Input['FreeFormLayoutElementsBackgroundStyleArgs']]:
        return pulumi.get(self, "background_style")

    @background_style.setter
    def background_style(self, value: Optional[pulumi.Input['FreeFormLayoutElementsBackgroundStyleArgs']]):
        pulumi.set(self, "background_style", value)

    @property
    @pulumi.getter(name="borderStyle")
    def border_style(self) -> Optional[pulumi.Input['FreeFormLayoutElementsBorderStyleArgs']]:
        return pulumi.get(self, "border_style")

    @border_style.setter
    def border_style(self, value: Optional[pulumi.Input['FreeFormLayoutElementsBorderStyleArgs']]):
        pulumi.set(self, "border_style", value)

    @property
    @pulumi.getter(name="loadingAnimation")
    def loading_animation(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "loading_animation")

    @loading_animation.setter
    def loading_animation(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "loading_animation", value)

    @property
    @pulumi.getter(name="renderingRules")
    def rendering_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsRenderingRuleArgs']]]]:
        return pulumi.get(self, "rendering_rules")

    @rendering_rules.setter
    def rendering_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsRenderingRuleArgs']]]]):
        pulumi.set(self, "rendering_rules", value)

    @property
    @pulumi.getter(name="selectedBorderStyle")
    def selected_border_style(self) -> Optional[pulumi.Input['FreeFormLayoutElementsSelectedBorderStyleArgs']]:
        return pulumi.get(self, "selected_border_style")

    @selected_border_style.setter
    def selected_border_style(self, value: Optional[pulumi.Input['FreeFormLayoutElementsSelectedBorderStyleArgs']]):
        pulumi.set(self, "selected_border_style", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class FreeFormLayoutElementsBackgroundStyleArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    FreeFormLayoutElementsBackgroundStyleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FreeFormLayoutElementsBackgroundStyleArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class FreeFormLayoutElementsBorderStyleArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    FreeFormLayoutElementsBorderStyleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FreeFormLayoutElementsBorderStyleArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class FreeFormLayoutElementsRenderingRuleArgsDict(TypedDict):
        configuration_overrides: pulumi.Input['SelectAllOptionsArgsDict']
        expression: pulumi.Input[str]
elif False:
    FreeFormLayoutElementsRenderingRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FreeFormLayoutElementsRenderingRuleArgs:
    def __init__(__self__, *,
                 configuration_overrides: pulumi.Input['SelectAllOptionsArgs'],
                 expression: pulumi.Input[str]):
        pulumi.set(__self__, "configuration_overrides", configuration_overrides)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="configurationOverrides")
    def configuration_overrides(self) -> pulumi.Input['SelectAllOptionsArgs']:
        return pulumi.get(self, "configuration_overrides")

    @configuration_overrides.setter
    def configuration_overrides(self, value: pulumi.Input['SelectAllOptionsArgs']):
        pulumi.set(self, "configuration_overrides", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


if not MYPY:
    class FreeFormLayoutElementsSelectedBorderStyleArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    FreeFormLayoutElementsSelectedBorderStyleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FreeFormLayoutElementsSelectedBorderStyleArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class GridLayoutArgsDict(TypedDict):
        elements: pulumi.Input[Sequence[pulumi.Input['GridLayoutElementArgsDict']]]
        canvas_size_options: NotRequired[pulumi.Input['GridLayoutCanvasSizeOptionsArgsDict']]
elif False:
    GridLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GridLayoutArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['GridLayoutElementArgs']]],
                 canvas_size_options: Optional[pulumi.Input['GridLayoutCanvasSizeOptionsArgs']] = None):
        pulumi.set(__self__, "elements", elements)
        if canvas_size_options is not None:
            pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['GridLayoutElementArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['GridLayoutElementArgs']]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional[pulumi.Input['GridLayoutCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: Optional[pulumi.Input['GridLayoutCanvasSizeOptionsArgs']]):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class GridLayoutCanvasSizeOptionsArgsDict(TypedDict):
        screen_canvas_size_options: NotRequired[pulumi.Input['GridLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict']]
elif False:
    GridLayoutCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GridLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['GridLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgs']] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['GridLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['GridLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


if not MYPY:
    class GridLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict(TypedDict):
        resize_option: pulumi.Input[str]
        optimized_view_port_width: NotRequired[pulumi.Input[str]]
elif False:
    GridLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GridLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 resize_option: pulumi.Input[str],
                 optimized_view_port_width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "resize_option", resize_option)
        if optimized_view_port_width is not None:
            pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resize_option")

    @resize_option.setter
    def resize_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "resize_option", value)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimized_view_port_width", value)


if not MYPY:
    class GridLayoutElementArgsDict(TypedDict):
        column_span: pulumi.Input[int]
        element_id: pulumi.Input[str]
        element_type: pulumi.Input[str]
        row_span: pulumi.Input[int]
        column_index: NotRequired[pulumi.Input[str]]
        row_index: NotRequired[pulumi.Input[str]]
elif False:
    GridLayoutElementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GridLayoutElementArgs:
    def __init__(__self__, *,
                 column_span: pulumi.Input[int],
                 element_id: pulumi.Input[str],
                 element_type: pulumi.Input[str],
                 row_span: pulumi.Input[int],
                 column_index: Optional[pulumi.Input[str]] = None,
                 row_index: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column_span", column_span)
        pulumi.set(__self__, "element_id", element_id)
        pulumi.set(__self__, "element_type", element_type)
        pulumi.set(__self__, "row_span", row_span)
        if column_index is not None:
            pulumi.set(__self__, "column_index", column_index)
        if row_index is not None:
            pulumi.set(__self__, "row_index", row_index)

    @property
    @pulumi.getter(name="columnSpan")
    def column_span(self) -> pulumi.Input[int]:
        return pulumi.get(self, "column_span")

    @column_span.setter
    def column_span(self, value: pulumi.Input[int]):
        pulumi.set(self, "column_span", value)

    @property
    @pulumi.getter(name="elementId")
    def element_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element_id")

    @element_id.setter
    def element_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "element_id", value)

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element_type")

    @element_type.setter
    def element_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "element_type", value)

    @property
    @pulumi.getter(name="rowSpan")
    def row_span(self) -> pulumi.Input[int]:
        return pulumi.get(self, "row_span")

    @row_span.setter
    def row_span(self, value: pulumi.Input[int]):
        pulumi.set(self, "row_span", value)

    @property
    @pulumi.getter(name="columnIndex")
    def column_index(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_index")

    @column_index.setter
    def column_index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_index", value)

    @property
    @pulumi.getter(name="rowIndex")
    def row_index(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "row_index")

    @row_index.setter
    def row_index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "row_index", value)


if not MYPY:
    class IamPolicyAssignmentIdentitiesArgsDict(TypedDict):
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Array of Quicksight group names to assign the policy to.
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Array of Quicksight user names to assign the policy to.
        """
elif False:
    IamPolicyAssignmentIdentitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IamPolicyAssignmentIdentitiesArgs:
    def __init__(__self__, *,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: Array of Quicksight group names to assign the policy to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Array of Quicksight user names to assign the policy to.
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of Quicksight group names to assign the policy to.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of Quicksight user names to assign the policy to.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class IntegerParameterDeclarationArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the dashboard.
        """
        parameter_value_type: pulumi.Input[str]
        default_values: NotRequired[pulumi.Input['IntegerParameterDeclarationDefaultValuesArgsDict']]
        values_when_unset: NotRequired[pulumi.Input['IntegerParameterDeclarationValuesWhenUnsetArgsDict']]
elif False:
    IntegerParameterDeclarationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegerParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input[str],
                 default_values: Optional[pulumi.Input['IntegerParameterDeclarationDefaultValuesArgs']] = None,
                 values_when_unset: Optional[pulumi.Input['IntegerParameterDeclarationValuesWhenUnsetArgs']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameter_value_type", parameter_value_type)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if values_when_unset is not None:
            pulumi.set(__self__, "values_when_unset", values_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['IntegerParameterDeclarationDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['IntegerParameterDeclarationDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="valuesWhenUnset")
    def values_when_unset(self) -> Optional[pulumi.Input['IntegerParameterDeclarationValuesWhenUnsetArgs']]:
        return pulumi.get(self, "values_when_unset")

    @values_when_unset.setter
    def values_when_unset(self, value: Optional[pulumi.Input['IntegerParameterDeclarationValuesWhenUnsetArgs']]):
        pulumi.set(self, "values_when_unset", value)


if not MYPY:
    class IntegerParameterDeclarationDefaultValuesArgsDict(TypedDict):
        dynamic_value: NotRequired[pulumi.Input['DynamicValueArgsDict']]
        static_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
elif False:
    IntegerParameterDeclarationDefaultValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegerParameterDeclarationDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['DynamicValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        if dynamic_value is not None:
            pulumi.set(__self__, "dynamic_value", dynamic_value)
        if static_values is not None:
            pulumi.set(__self__, "static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['DynamicValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['DynamicValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "static_values", value)


if not MYPY:
    class IntegerParameterDeclarationValuesWhenUnsetArgsDict(TypedDict):
        custom_value: NotRequired[pulumi.Input[int]]
        value_when_unset_option: NotRequired[pulumi.Input[str]]
elif False:
    IntegerParameterDeclarationValuesWhenUnsetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegerParameterDeclarationValuesWhenUnsetArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[int]] = None,
                 value_when_unset_option: Optional[pulumi.Input[str]] = None):
        if custom_value is not None:
            pulumi.set(__self__, "custom_value", custom_value)
        if value_when_unset_option is not None:
            pulumi.set(__self__, "value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_when_unset_option", value)


if not MYPY:
    class ItemsLimitConfigurationArgsDict(TypedDict):
        other_categories: pulumi.Input[str]
        items_limit: NotRequired[pulumi.Input[int]]
elif False:
    ItemsLimitConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ItemsLimitConfigurationArgs:
    def __init__(__self__, *,
                 other_categories: pulumi.Input[str],
                 items_limit: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "other_categories", other_categories)
        if items_limit is not None:
            pulumi.set(__self__, "items_limit", items_limit)

    @property
    @pulumi.getter(name="otherCategories")
    def other_categories(self) -> pulumi.Input[str]:
        return pulumi.get(self, "other_categories")

    @other_categories.setter
    def other_categories(self, value: pulumi.Input[str]):
        pulumi.set(self, "other_categories", value)

    @property
    @pulumi.getter(name="itemsLimit")
    def items_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "items_limit")

    @items_limit.setter
    def items_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "items_limit", value)


if not MYPY:
    class LabelOptionsArgsDict(TypedDict):
        custom_label: NotRequired[pulumi.Input[str]]
        font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    LabelOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LabelOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class LayoutsArgsDict(TypedDict):
        configuration: pulumi.Input['LayoutsConfigurationArgsDict']
elif False:
    LayoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['LayoutsConfigurationArgs']):
        pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['LayoutsConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['LayoutsConfigurationArgs']):
        pulumi.set(self, "configuration", value)


if not MYPY:
    class LayoutsConfigurationArgsDict(TypedDict):
        free_form_layout: NotRequired[pulumi.Input['LayoutsConfigurationFreeFormLayoutArgsDict']]
        grid_layout: NotRequired[pulumi.Input['GridLayoutArgsDict']]
        section_based_layout: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutArgsDict']]
elif False:
    LayoutsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationArgs:
    def __init__(__self__, *,
                 free_form_layout: Optional[pulumi.Input['LayoutsConfigurationFreeFormLayoutArgs']] = None,
                 grid_layout: Optional[pulumi.Input['GridLayoutArgs']] = None,
                 section_based_layout: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutArgs']] = None):
        if free_form_layout is not None:
            pulumi.set(__self__, "free_form_layout", free_form_layout)
        if grid_layout is not None:
            pulumi.set(__self__, "grid_layout", grid_layout)
        if section_based_layout is not None:
            pulumi.set(__self__, "section_based_layout", section_based_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> Optional[pulumi.Input['LayoutsConfigurationFreeFormLayoutArgs']]:
        return pulumi.get(self, "free_form_layout")

    @free_form_layout.setter
    def free_form_layout(self, value: Optional[pulumi.Input['LayoutsConfigurationFreeFormLayoutArgs']]):
        pulumi.set(self, "free_form_layout", value)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional[pulumi.Input['GridLayoutArgs']]:
        return pulumi.get(self, "grid_layout")

    @grid_layout.setter
    def grid_layout(self, value: Optional[pulumi.Input['GridLayoutArgs']]):
        pulumi.set(self, "grid_layout", value)

    @property
    @pulumi.getter(name="sectionBasedLayout")
    def section_based_layout(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutArgs']]:
        return pulumi.get(self, "section_based_layout")

    @section_based_layout.setter
    def section_based_layout(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutArgs']]):
        pulumi.set(self, "section_based_layout", value)


if not MYPY:
    class LayoutsConfigurationFreeFormLayoutArgsDict(TypedDict):
        elements: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgsDict']]]
        canvas_size_options: NotRequired[pulumi.Input['LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsArgsDict']]
elif False:
    LayoutsConfigurationFreeFormLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationFreeFormLayoutArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]],
                 canvas_size_options: Optional[pulumi.Input['LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsArgs']] = None):
        pulumi.set(__self__, "elements", elements)
        if canvas_size_options is not None:
            pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional[pulumi.Input['LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: Optional[pulumi.Input['LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsArgs']]):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsArgsDict(TypedDict):
        screen_canvas_size_options: NotRequired[pulumi.Input['LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict']]
elif False:
    LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgs']] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


if not MYPY:
    class LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict(TypedDict):
        optimized_view_port_width: pulumi.Input[str]
elif False:
    LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 optimized_view_port_width: pulumi.Input[str]):
        pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> pulumi.Input[str]:
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: pulumi.Input[str]):
        pulumi.set(self, "optimized_view_port_width", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutArgsDict(TypedDict):
        body_sections: pulumi.Input[Sequence[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionArgsDict']]]
        footer_sections: pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsArgsDict']
        header_sections: pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsArgsDict']
        canvas_size_options: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsArgsDict']]
elif False:
    LayoutsConfigurationSectionBasedLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutArgs:
    def __init__(__self__, *,
                 body_sections: pulumi.Input[Sequence[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionArgs']]],
                 footer_sections: pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsArgs'],
                 header_sections: pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsArgs'],
                 canvas_size_options: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsArgs']] = None):
        pulumi.set(__self__, "body_sections", body_sections)
        pulumi.set(__self__, "footer_sections", footer_sections)
        pulumi.set(__self__, "header_sections", header_sections)
        if canvas_size_options is not None:
            pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="bodySections")
    def body_sections(self) -> pulumi.Input[Sequence[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionArgs']]]:
        return pulumi.get(self, "body_sections")

    @body_sections.setter
    def body_sections(self, value: pulumi.Input[Sequence[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionArgs']]]):
        pulumi.set(self, "body_sections", value)

    @property
    @pulumi.getter(name="footerSections")
    def footer_sections(self) -> pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsArgs']:
        return pulumi.get(self, "footer_sections")

    @footer_sections.setter
    def footer_sections(self, value: pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsArgs']):
        pulumi.set(self, "footer_sections", value)

    @property
    @pulumi.getter(name="headerSections")
    def header_sections(self) -> pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsArgs']:
        return pulumi.get(self, "header_sections")

    @header_sections.setter
    def header_sections(self, value: pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsArgs']):
        pulumi.set(self, "header_sections", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsArgs']]):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutBodySectionArgsDict(TypedDict):
        content: pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentArgsDict']
        section_id: pulumi.Input[str]
        page_break_configuration: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationArgsDict']]
        style: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionStyleArgsDict']]
elif False:
    LayoutsConfigurationSectionBasedLayoutBodySectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutBodySectionArgs:
    def __init__(__self__, *,
                 content: pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentArgs'],
                 section_id: pulumi.Input[str],
                 page_break_configuration: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationArgs']] = None,
                 style: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionStyleArgs']] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "section_id", section_id)
        if page_break_configuration is not None:
            pulumi.set(__self__, "page_break_configuration", page_break_configuration)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentArgs']:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentArgs']):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter(name="pageBreakConfiguration")
    def page_break_configuration(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationArgs']]:
        return pulumi.get(self, "page_break_configuration")

    @page_break_configuration.setter
    def page_break_configuration(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationArgs']]):
        pulumi.set(self, "page_break_configuration", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionStyleArgs']]):
        pulumi.set(self, "style", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutBodySectionContentArgsDict(TypedDict):
        layout: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutArgsDict']]
elif False:
    LayoutsConfigurationSectionBasedLayoutBodySectionContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutBodySectionContentArgs:
    def __init__(__self__, *,
                 layout: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutArgs']] = None):
        if layout is not None:
            pulumi.set(__self__, "layout", layout)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutArgs']]:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutArgs']]):
        pulumi.set(self, "layout", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutArgsDict(TypedDict):
        free_form_layout: pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayoutArgsDict']
elif False:
    LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutArgs:
    def __init__(__self__, *,
                 free_form_layout: pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayoutArgs']):
        pulumi.set(__self__, "free_form_layout", free_form_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayoutArgs']:
        return pulumi.get(self, "free_form_layout")

    @free_form_layout.setter
    def free_form_layout(self, value: pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayoutArgs']):
        pulumi.set(self, "free_form_layout", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayoutArgsDict(TypedDict):
        elements: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgsDict']]]
elif False:
    LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayoutArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]):
        pulumi.set(__self__, "elements", elements)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]):
        pulumi.set(self, "elements", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationArgsDict(TypedDict):
        after: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfterArgsDict']]
elif False:
    LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationArgs:
    def __init__(__self__, *,
                 after: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfterArgs']] = None):
        if after is not None:
            pulumi.set(__self__, "after", after)

    @property
    @pulumi.getter
    def after(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfterArgs']]:
        return pulumi.get(self, "after")

    @after.setter
    def after(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfterArgs']]):
        pulumi.set(self, "after", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfterArgsDict(TypedDict):
        status: NotRequired[pulumi.Input[str]]
        """
        The dashboard creation status.
        """
elif False:
    LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfterArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: The dashboard creation status.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutBodySectionStyleArgsDict(TypedDict):
        height: NotRequired[pulumi.Input[str]]
        padding: NotRequired[pulumi.Input['SpacingArgsDict']]
elif False:
    LayoutsConfigurationSectionBasedLayoutBodySectionStyleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutBodySectionStyleArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 padding: Optional[pulumi.Input['SpacingArgs']] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[pulumi.Input['SpacingArgs']]:
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[pulumi.Input['SpacingArgs']]):
        pulumi.set(self, "padding", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsArgsDict(TypedDict):
        paper_canvas_size_options: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict']]
elif False:
    LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_canvas_size_options: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptionsArgs']] = None):
        if paper_canvas_size_options is not None:
            pulumi.set(__self__, "paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "paper_canvas_size_options")

    @paper_canvas_size_options.setter
    def paper_canvas_size_options(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptionsArgs']]):
        pulumi.set(self, "paper_canvas_size_options", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict(TypedDict):
        paper_margin: NotRequired[pulumi.Input['SpacingArgsDict']]
        paper_orientation: NotRequired[pulumi.Input[str]]
        paper_size: NotRequired[pulumi.Input[str]]
elif False:
    LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_margin: Optional[pulumi.Input['SpacingArgs']] = None,
                 paper_orientation: Optional[pulumi.Input[str]] = None,
                 paper_size: Optional[pulumi.Input[str]] = None):
        if paper_margin is not None:
            pulumi.set(__self__, "paper_margin", paper_margin)
        if paper_orientation is not None:
            pulumi.set(__self__, "paper_orientation", paper_orientation)
        if paper_size is not None:
            pulumi.set(__self__, "paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional[pulumi.Input['SpacingArgs']]:
        return pulumi.get(self, "paper_margin")

    @paper_margin.setter
    def paper_margin(self, value: Optional[pulumi.Input['SpacingArgs']]):
        pulumi.set(self, "paper_margin", value)

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "paper_orientation")

    @paper_orientation.setter
    def paper_orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper_orientation", value)

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "paper_size")

    @paper_size.setter
    def paper_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper_size", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutFooterSectionsArgsDict(TypedDict):
        section_id: pulumi.Input[str]
        layout: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutArgsDict']]
        style: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsStyleArgsDict']]
elif False:
    LayoutsConfigurationSectionBasedLayoutFooterSectionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutFooterSectionsArgs:
    def __init__(__self__, *,
                 section_id: pulumi.Input[str],
                 layout: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutArgs']] = None,
                 style: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsStyleArgs']] = None):
        pulumi.set(__self__, "section_id", section_id)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutArgs']]:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutArgs']]):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsStyleArgs']]):
        pulumi.set(self, "style", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutArgsDict(TypedDict):
        free_form_layout: pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayoutArgsDict']
elif False:
    LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutArgs:
    def __init__(__self__, *,
                 free_form_layout: pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayoutArgs']):
        pulumi.set(__self__, "free_form_layout", free_form_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayoutArgs']:
        return pulumi.get(self, "free_form_layout")

    @free_form_layout.setter
    def free_form_layout(self, value: pulumi.Input['LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayoutArgs']):
        pulumi.set(self, "free_form_layout", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayoutArgsDict(TypedDict):
        elements: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgsDict']]]
elif False:
    LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayoutArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]):
        pulumi.set(__self__, "elements", elements)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]):
        pulumi.set(self, "elements", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutFooterSectionsStyleArgsDict(TypedDict):
        height: NotRequired[pulumi.Input[str]]
        padding: NotRequired[pulumi.Input['SpacingArgsDict']]
elif False:
    LayoutsConfigurationSectionBasedLayoutFooterSectionsStyleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutFooterSectionsStyleArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 padding: Optional[pulumi.Input['SpacingArgs']] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[pulumi.Input['SpacingArgs']]:
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[pulumi.Input['SpacingArgs']]):
        pulumi.set(self, "padding", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutHeaderSectionsArgsDict(TypedDict):
        section_id: pulumi.Input[str]
        layout: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutArgsDict']]
        style: NotRequired[pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyleArgsDict']]
elif False:
    LayoutsConfigurationSectionBasedLayoutHeaderSectionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutHeaderSectionsArgs:
    def __init__(__self__, *,
                 section_id: pulumi.Input[str],
                 layout: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutArgs']] = None,
                 style: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyleArgs']] = None):
        pulumi.set(__self__, "section_id", section_id)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutArgs']]:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutArgs']]):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyleArgs']]):
        pulumi.set(self, "style", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutArgsDict(TypedDict):
        free_form_layout: pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayoutArgsDict']
elif False:
    LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutArgs:
    def __init__(__self__, *,
                 free_form_layout: pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayoutArgs']):
        pulumi.set(__self__, "free_form_layout", free_form_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayoutArgs']:
        return pulumi.get(self, "free_form_layout")

    @free_form_layout.setter
    def free_form_layout(self, value: pulumi.Input['LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayoutArgs']):
        pulumi.set(self, "free_form_layout", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayoutArgsDict(TypedDict):
        elements: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgsDict']]]
elif False:
    LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayoutArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]):
        pulumi.set(__self__, "elements", elements)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['FreeFormLayoutElementsArgs']]]):
        pulumi.set(self, "elements", value)


if not MYPY:
    class LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyleArgsDict(TypedDict):
        height: NotRequired[pulumi.Input[str]]
        padding: NotRequired[pulumi.Input['SpacingArgsDict']]
elif False:
    LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyleArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 padding: Optional[pulumi.Input['SpacingArgs']] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[pulumi.Input['SpacingArgs']]:
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[pulumi.Input['SpacingArgs']]):
        pulumi.set(self, "padding", value)


if not MYPY:
    class LegendOptionsArgsDict(TypedDict):
        height: NotRequired[pulumi.Input[str]]
        position: NotRequired[pulumi.Input[str]]
        title: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
        visibility: NotRequired[pulumi.Input[str]]
        width: NotRequired[pulumi.Input[str]]
elif False:
    LegendOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LegendOptionsArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input['LabelOptionsArgs']] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


if not MYPY:
    class LineChartLineStyleSettingsArgsDict(TypedDict):
        line_interpolation: NotRequired[pulumi.Input[str]]
        line_style: NotRequired[pulumi.Input[str]]
        line_visibility: NotRequired[pulumi.Input[str]]
        line_width: NotRequired[pulumi.Input[str]]
elif False:
    LineChartLineStyleSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineChartLineStyleSettingsArgs:
    def __init__(__self__, *,
                 line_interpolation: Optional[pulumi.Input[str]] = None,
                 line_style: Optional[pulumi.Input[str]] = None,
                 line_visibility: Optional[pulumi.Input[str]] = None,
                 line_width: Optional[pulumi.Input[str]] = None):
        if line_interpolation is not None:
            pulumi.set(__self__, "line_interpolation", line_interpolation)
        if line_style is not None:
            pulumi.set(__self__, "line_style", line_style)
        if line_visibility is not None:
            pulumi.set(__self__, "line_visibility", line_visibility)
        if line_width is not None:
            pulumi.set(__self__, "line_width", line_width)

    @property
    @pulumi.getter(name="lineInterpolation")
    def line_interpolation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_interpolation")

    @line_interpolation.setter
    def line_interpolation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_interpolation", value)

    @property
    @pulumi.getter(name="lineStyle")
    def line_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_style")

    @line_style.setter
    def line_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_style", value)

    @property
    @pulumi.getter(name="lineVisibility")
    def line_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_visibility")

    @line_visibility.setter
    def line_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_visibility", value)

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "line_width")

    @line_width.setter
    def line_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_width", value)


if not MYPY:
    class LineChartMarkerStyleSettingsArgsDict(TypedDict):
        marker_color: NotRequired[pulumi.Input[str]]
        marker_shape: NotRequired[pulumi.Input[str]]
        marker_size: NotRequired[pulumi.Input[str]]
        marker_visibility: NotRequired[pulumi.Input[str]]
elif False:
    LineChartMarkerStyleSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LineChartMarkerStyleSettingsArgs:
    def __init__(__self__, *,
                 marker_color: Optional[pulumi.Input[str]] = None,
                 marker_shape: Optional[pulumi.Input[str]] = None,
                 marker_size: Optional[pulumi.Input[str]] = None,
                 marker_visibility: Optional[pulumi.Input[str]] = None):
        if marker_color is not None:
            pulumi.set(__self__, "marker_color", marker_color)
        if marker_shape is not None:
            pulumi.set(__self__, "marker_shape", marker_shape)
        if marker_size is not None:
            pulumi.set(__self__, "marker_size", marker_size)
        if marker_visibility is not None:
            pulumi.set(__self__, "marker_visibility", marker_visibility)

    @property
    @pulumi.getter(name="markerColor")
    def marker_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "marker_color")

    @marker_color.setter
    def marker_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marker_color", value)

    @property
    @pulumi.getter(name="markerShape")
    def marker_shape(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "marker_shape")

    @marker_shape.setter
    def marker_shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marker_shape", value)

    @property
    @pulumi.getter(name="markerSize")
    def marker_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "marker_size")

    @marker_size.setter
    def marker_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marker_size", value)

    @property
    @pulumi.getter(name="markerVisibility")
    def marker_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "marker_visibility")

    @marker_visibility.setter
    def marker_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marker_visibility", value)


if not MYPY:
    class MeasureFieldSchema2ArgsDict(TypedDict):
        calculated_measure_field: NotRequired[pulumi.Input['MeasureFieldSchema2CalculatedMeasureFieldArgsDict']]
        categorical_measure_field: NotRequired[pulumi.Input['MeasureFieldSchema2CategoricalMeasureFieldArgsDict']]
        date_measure_field: NotRequired[pulumi.Input['MeasureFieldSchema2DateMeasureFieldArgsDict']]
        numerical_measure_field: NotRequired[pulumi.Input['MeasureFieldSchema2NumericalMeasureFieldArgsDict']]
elif False:
    MeasureFieldSchema2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeasureFieldSchema2Args:
    def __init__(__self__, *,
                 calculated_measure_field: Optional[pulumi.Input['MeasureFieldSchema2CalculatedMeasureFieldArgs']] = None,
                 categorical_measure_field: Optional[pulumi.Input['MeasureFieldSchema2CategoricalMeasureFieldArgs']] = None,
                 date_measure_field: Optional[pulumi.Input['MeasureFieldSchema2DateMeasureFieldArgs']] = None,
                 numerical_measure_field: Optional[pulumi.Input['MeasureFieldSchema2NumericalMeasureFieldArgs']] = None):
        if calculated_measure_field is not None:
            pulumi.set(__self__, "calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            pulumi.set(__self__, "categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            pulumi.set(__self__, "date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            pulumi.set(__self__, "numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional[pulumi.Input['MeasureFieldSchema2CalculatedMeasureFieldArgs']]:
        return pulumi.get(self, "calculated_measure_field")

    @calculated_measure_field.setter
    def calculated_measure_field(self, value: Optional[pulumi.Input['MeasureFieldSchema2CalculatedMeasureFieldArgs']]):
        pulumi.set(self, "calculated_measure_field", value)

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional[pulumi.Input['MeasureFieldSchema2CategoricalMeasureFieldArgs']]:
        return pulumi.get(self, "categorical_measure_field")

    @categorical_measure_field.setter
    def categorical_measure_field(self, value: Optional[pulumi.Input['MeasureFieldSchema2CategoricalMeasureFieldArgs']]):
        pulumi.set(self, "categorical_measure_field", value)

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional[pulumi.Input['MeasureFieldSchema2DateMeasureFieldArgs']]:
        return pulumi.get(self, "date_measure_field")

    @date_measure_field.setter
    def date_measure_field(self, value: Optional[pulumi.Input['MeasureFieldSchema2DateMeasureFieldArgs']]):
        pulumi.set(self, "date_measure_field", value)

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional[pulumi.Input['MeasureFieldSchema2NumericalMeasureFieldArgs']]:
        return pulumi.get(self, "numerical_measure_field")

    @numerical_measure_field.setter
    def numerical_measure_field(self, value: Optional[pulumi.Input['MeasureFieldSchema2NumericalMeasureFieldArgs']]):
        pulumi.set(self, "numerical_measure_field", value)


if not MYPY:
    class MeasureFieldSchema2CalculatedMeasureFieldArgsDict(TypedDict):
        expression: pulumi.Input[str]
        field_id: pulumi.Input[str]
elif False:
    MeasureFieldSchema2CalculatedMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeasureFieldSchema2CalculatedMeasureFieldArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 field_id: pulumi.Input[str]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


if not MYPY:
    class MeasureFieldSchema2CategoricalMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
elif False:
    MeasureFieldSchema2CategoricalMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeasureFieldSchema2CategoricalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class MeasureFieldSchema2DateMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
elif False:
    MeasureFieldSchema2DateMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeasureFieldSchema2DateMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class MeasureFieldSchema2NumericalMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input['NumericalAggregationArgsDict']]
        format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
elif False:
    MeasureFieldSchema2NumericalMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeasureFieldSchema2NumericalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['NumericalAggregationArgs']] = None,
                 format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['NumericalAggregationArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['NumericalAggregationArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class MeasureFieldSchemaArgsDict(TypedDict):
        calculated_measure_field: NotRequired[pulumi.Input['MeasureFieldSchemaCalculatedMeasureFieldArgsDict']]
        categorical_measure_field: NotRequired[pulumi.Input['MeasureFieldSchemaCategoricalMeasureFieldArgsDict']]
        date_measure_field: NotRequired[pulumi.Input['MeasureFieldSchemaDateMeasureFieldArgsDict']]
        numerical_measure_field: NotRequired[pulumi.Input['MeasureFieldSchemaNumericalMeasureFieldArgsDict']]
elif False:
    MeasureFieldSchemaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeasureFieldSchemaArgs:
    def __init__(__self__, *,
                 calculated_measure_field: Optional[pulumi.Input['MeasureFieldSchemaCalculatedMeasureFieldArgs']] = None,
                 categorical_measure_field: Optional[pulumi.Input['MeasureFieldSchemaCategoricalMeasureFieldArgs']] = None,
                 date_measure_field: Optional[pulumi.Input['MeasureFieldSchemaDateMeasureFieldArgs']] = None,
                 numerical_measure_field: Optional[pulumi.Input['MeasureFieldSchemaNumericalMeasureFieldArgs']] = None):
        if calculated_measure_field is not None:
            pulumi.set(__self__, "calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            pulumi.set(__self__, "categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            pulumi.set(__self__, "date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            pulumi.set(__self__, "numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional[pulumi.Input['MeasureFieldSchemaCalculatedMeasureFieldArgs']]:
        return pulumi.get(self, "calculated_measure_field")

    @calculated_measure_field.setter
    def calculated_measure_field(self, value: Optional[pulumi.Input['MeasureFieldSchemaCalculatedMeasureFieldArgs']]):
        pulumi.set(self, "calculated_measure_field", value)

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional[pulumi.Input['MeasureFieldSchemaCategoricalMeasureFieldArgs']]:
        return pulumi.get(self, "categorical_measure_field")

    @categorical_measure_field.setter
    def categorical_measure_field(self, value: Optional[pulumi.Input['MeasureFieldSchemaCategoricalMeasureFieldArgs']]):
        pulumi.set(self, "categorical_measure_field", value)

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional[pulumi.Input['MeasureFieldSchemaDateMeasureFieldArgs']]:
        return pulumi.get(self, "date_measure_field")

    @date_measure_field.setter
    def date_measure_field(self, value: Optional[pulumi.Input['MeasureFieldSchemaDateMeasureFieldArgs']]):
        pulumi.set(self, "date_measure_field", value)

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional[pulumi.Input['MeasureFieldSchemaNumericalMeasureFieldArgs']]:
        return pulumi.get(self, "numerical_measure_field")

    @numerical_measure_field.setter
    def numerical_measure_field(self, value: Optional[pulumi.Input['MeasureFieldSchemaNumericalMeasureFieldArgs']]):
        pulumi.set(self, "numerical_measure_field", value)


if not MYPY:
    class MeasureFieldSchemaCalculatedMeasureFieldArgsDict(TypedDict):
        expression: pulumi.Input[str]
        field_id: pulumi.Input[str]
elif False:
    MeasureFieldSchemaCalculatedMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeasureFieldSchemaCalculatedMeasureFieldArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 field_id: pulumi.Input[str]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


if not MYPY:
    class MeasureFieldSchemaCategoricalMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
elif False:
    MeasureFieldSchemaCategoricalMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeasureFieldSchemaCategoricalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class MeasureFieldSchemaDateMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
elif False:
    MeasureFieldSchemaDateMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeasureFieldSchemaDateMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class MeasureFieldSchemaNumericalMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input['NumericalAggregationArgsDict']]
        format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
elif False:
    MeasureFieldSchemaNumericalMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeasureFieldSchemaNumericalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['NumericalAggregationArgs']] = None,
                 format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['NumericalAggregationArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['NumericalAggregationArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class NamespaceTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
elif False:
    NamespaceTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NamespaceTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)


if not MYPY:
    class NegativeValueConfigurationArgsDict(TypedDict):
        display_mode: pulumi.Input[str]
elif False:
    NegativeValueConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NegativeValueConfigurationArgs:
    def __init__(__self__, *,
                 display_mode: pulumi.Input[str]):
        pulumi.set(__self__, "display_mode", display_mode)

    @property
    @pulumi.getter(name="displayMode")
    def display_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_mode")

    @display_mode.setter
    def display_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_mode", value)


if not MYPY:
    class NullValueFormatConfigurationArgsDict(TypedDict):
        null_string: pulumi.Input[str]
elif False:
    NullValueFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NullValueFormatConfigurationArgs:
    def __init__(__self__, *,
                 null_string: pulumi.Input[str]):
        pulumi.set(__self__, "null_string", null_string)

    @property
    @pulumi.getter(name="nullString")
    def null_string(self) -> pulumi.Input[str]:
        return pulumi.get(self, "null_string")

    @null_string.setter
    def null_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "null_string", value)


if not MYPY:
    class NumberDisplayFormatConfigurationArgsDict(TypedDict):
        decimal_places_configuration: NotRequired[pulumi.Input['DecimalPlacesConfigurationArgsDict']]
        negative_value_configuration: NotRequired[pulumi.Input['NegativeValueConfigurationArgsDict']]
        null_value_format_configuration: NotRequired[pulumi.Input['NullValueFormatConfigurationArgsDict']]
        number_scale: NotRequired[pulumi.Input[str]]
        prefix: NotRequired[pulumi.Input[str]]
        separator_configuration: NotRequired[pulumi.Input['SeparatorConfigurationArgsDict']]
        suffix: NotRequired[pulumi.Input[str]]
elif False:
    NumberDisplayFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NumberDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['DecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['NegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['NullValueFormatConfigurationArgs']] = None,
                 number_scale: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['SeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        if decimal_places_configuration is not None:
            pulumi.set(__self__, "decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            pulumi.set(__self__, "negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            pulumi.set(__self__, "null_value_format_configuration", null_value_format_configuration)
        if number_scale is not None:
            pulumi.set(__self__, "number_scale", number_scale)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if separator_configuration is not None:
            pulumi.set(__self__, "separator_configuration", separator_configuration)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['DecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['DecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['NegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['NegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['NullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['NullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numberScale")
    def number_scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "number_scale")

    @number_scale.setter
    def number_scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "number_scale", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['SeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['SeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


if not MYPY:
    class NumberFormatConfigurationArgsDict(TypedDict):
        numeric_format_configuration: NotRequired[pulumi.Input['NumericFormatConfigurationArgsDict']]
elif False:
    NumberFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NumberFormatConfigurationArgs:
    def __init__(__self__, *,
                 numeric_format_configuration: Optional[pulumi.Input['NumericFormatConfigurationArgs']] = None):
        if numeric_format_configuration is not None:
            pulumi.set(__self__, "numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional[pulumi.Input['NumericFormatConfigurationArgs']]:
        return pulumi.get(self, "numeric_format_configuration")

    @numeric_format_configuration.setter
    def numeric_format_configuration(self, value: Optional[pulumi.Input['NumericFormatConfigurationArgs']]):
        pulumi.set(self, "numeric_format_configuration", value)


if not MYPY:
    class NumericEqualityFilterArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        value: pulumi.Input[float]
elif False:
    NumericEqualityFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NumericEqualityFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NumericFormatConfigurationArgsDict(TypedDict):
        currency_display_format_configuration: NotRequired[pulumi.Input['NumericFormatConfigurationCurrencyDisplayFormatConfigurationArgsDict']]
        number_display_format_configuration: NotRequired[pulumi.Input['NumberDisplayFormatConfigurationArgsDict']]
        percentage_display_format_configuration: NotRequired[pulumi.Input['PercentageDisplayFormatConfigurationArgsDict']]
elif False:
    NumericFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NumericFormatConfigurationArgs:
    def __init__(__self__, *,
                 currency_display_format_configuration: Optional[pulumi.Input['NumericFormatConfigurationCurrencyDisplayFormatConfigurationArgs']] = None,
                 number_display_format_configuration: Optional[pulumi.Input['NumberDisplayFormatConfigurationArgs']] = None,
                 percentage_display_format_configuration: Optional[pulumi.Input['PercentageDisplayFormatConfigurationArgs']] = None):
        if currency_display_format_configuration is not None:
            pulumi.set(__self__, "currency_display_format_configuration", currency_display_format_configuration)
        if number_display_format_configuration is not None:
            pulumi.set(__self__, "number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            pulumi.set(__self__, "percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="currencyDisplayFormatConfiguration")
    def currency_display_format_configuration(self) -> Optional[pulumi.Input['NumericFormatConfigurationCurrencyDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "currency_display_format_configuration")

    @currency_display_format_configuration.setter
    def currency_display_format_configuration(self, value: Optional[pulumi.Input['NumericFormatConfigurationCurrencyDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "currency_display_format_configuration", value)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional[pulumi.Input['NumberDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "number_display_format_configuration")

    @number_display_format_configuration.setter
    def number_display_format_configuration(self, value: Optional[pulumi.Input['NumberDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "number_display_format_configuration", value)

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional[pulumi.Input['PercentageDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "percentage_display_format_configuration")

    @percentage_display_format_configuration.setter
    def percentage_display_format_configuration(self, value: Optional[pulumi.Input['PercentageDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "percentage_display_format_configuration", value)


if not MYPY:
    class NumericFormatConfigurationCurrencyDisplayFormatConfigurationArgsDict(TypedDict):
        decimal_places_configuration: NotRequired[pulumi.Input['DecimalPlacesConfigurationArgsDict']]
        negative_value_configuration: NotRequired[pulumi.Input['NegativeValueConfigurationArgsDict']]
        null_value_format_configuration: NotRequired[pulumi.Input['NullValueFormatConfigurationArgsDict']]
        number_scale: NotRequired[pulumi.Input[str]]
        prefix: NotRequired[pulumi.Input[str]]
        separator_configuration: NotRequired[pulumi.Input['SeparatorConfigurationArgsDict']]
        suffix: NotRequired[pulumi.Input[str]]
        symbol: NotRequired[pulumi.Input[str]]
elif False:
    NumericFormatConfigurationCurrencyDisplayFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NumericFormatConfigurationCurrencyDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['DecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['NegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['NullValueFormatConfigurationArgs']] = None,
                 number_scale: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['SeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 symbol: Optional[pulumi.Input[str]] = None):
        if decimal_places_configuration is not None:
            pulumi.set(__self__, "decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            pulumi.set(__self__, "negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            pulumi.set(__self__, "null_value_format_configuration", null_value_format_configuration)
        if number_scale is not None:
            pulumi.set(__self__, "number_scale", number_scale)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if separator_configuration is not None:
            pulumi.set(__self__, "separator_configuration", separator_configuration)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if symbol is not None:
            pulumi.set(__self__, "symbol", symbol)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['DecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['DecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['NegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['NegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['NullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['NullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numberScale")
    def number_scale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "number_scale")

    @number_scale.setter
    def number_scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "number_scale", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['SeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['SeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "symbol")

    @symbol.setter
    def symbol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "symbol", value)


if not MYPY:
    class NumericalAggregationArgsDict(TypedDict):
        percentile_aggregation: NotRequired[pulumi.Input['NumericalAggregationPercentileAggregationArgsDict']]
        simple_numerical_aggregation: NotRequired[pulumi.Input[str]]
elif False:
    NumericalAggregationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NumericalAggregationArgs:
    def __init__(__self__, *,
                 percentile_aggregation: Optional[pulumi.Input['NumericalAggregationPercentileAggregationArgs']] = None,
                 simple_numerical_aggregation: Optional[pulumi.Input[str]] = None):
        if percentile_aggregation is not None:
            pulumi.set(__self__, "percentile_aggregation", percentile_aggregation)
        if simple_numerical_aggregation is not None:
            pulumi.set(__self__, "simple_numerical_aggregation", simple_numerical_aggregation)

    @property
    @pulumi.getter(name="percentileAggregation")
    def percentile_aggregation(self) -> Optional[pulumi.Input['NumericalAggregationPercentileAggregationArgs']]:
        return pulumi.get(self, "percentile_aggregation")

    @percentile_aggregation.setter
    def percentile_aggregation(self, value: Optional[pulumi.Input['NumericalAggregationPercentileAggregationArgs']]):
        pulumi.set(self, "percentile_aggregation", value)

    @property
    @pulumi.getter(name="simpleNumericalAggregation")
    def simple_numerical_aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "simple_numerical_aggregation")

    @simple_numerical_aggregation.setter
    def simple_numerical_aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simple_numerical_aggregation", value)


if not MYPY:
    class NumericalAggregationPercentileAggregationArgsDict(TypedDict):
        percentile_value: NotRequired[pulumi.Input[float]]
elif False:
    NumericalAggregationPercentileAggregationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NumericalAggregationPercentileAggregationArgs:
    def __init__(__self__, *,
                 percentile_value: Optional[pulumi.Input[float]] = None):
        if percentile_value is not None:
            pulumi.set(__self__, "percentile_value", percentile_value)

    @property
    @pulumi.getter(name="percentileValue")
    def percentile_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percentile_value")

    @percentile_value.setter
    def percentile_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percentile_value", value)


if not MYPY:
    class PercentageDisplayFormatConfigurationArgsDict(TypedDict):
        decimal_places_configuration: NotRequired[pulumi.Input['DecimalPlacesConfigurationArgsDict']]
        negative_value_configuration: NotRequired[pulumi.Input['NegativeValueConfigurationArgsDict']]
        null_value_format_configuration: NotRequired[pulumi.Input['NullValueFormatConfigurationArgsDict']]
        prefix: NotRequired[pulumi.Input[str]]
        separator_configuration: NotRequired[pulumi.Input['SeparatorConfigurationArgsDict']]
        suffix: NotRequired[pulumi.Input[str]]
elif False:
    PercentageDisplayFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PercentageDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['DecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['NegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['NullValueFormatConfigurationArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['SeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        if decimal_places_configuration is not None:
            pulumi.set(__self__, "decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            pulumi.set(__self__, "negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            pulumi.set(__self__, "null_value_format_configuration", null_value_format_configuration)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if separator_configuration is not None:
            pulumi.set(__self__, "separator_configuration", separator_configuration)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['DecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['DecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['NegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['NegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['NullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['NullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['SeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['SeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


if not MYPY:
    class ReferenceLineArgsDict(TypedDict):
        data_configuration: pulumi.Input['ReferenceLineDataConfigurationArgsDict']
        label_configuration: NotRequired[pulumi.Input['ReferenceLineLabelConfigurationArgsDict']]
        status: NotRequired[pulumi.Input[str]]
        """
        The dashboard creation status.
        """
        style_configuration: NotRequired[pulumi.Input['ReferenceLineStyleConfigurationArgsDict']]
elif False:
    ReferenceLineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReferenceLineArgs:
    def __init__(__self__, *,
                 data_configuration: pulumi.Input['ReferenceLineDataConfigurationArgs'],
                 label_configuration: Optional[pulumi.Input['ReferenceLineLabelConfigurationArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 style_configuration: Optional[pulumi.Input['ReferenceLineStyleConfigurationArgs']] = None):
        """
        :param pulumi.Input[str] status: The dashboard creation status.
        """
        pulumi.set(__self__, "data_configuration", data_configuration)
        if label_configuration is not None:
            pulumi.set(__self__, "label_configuration", label_configuration)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if style_configuration is not None:
            pulumi.set(__self__, "style_configuration", style_configuration)

    @property
    @pulumi.getter(name="dataConfiguration")
    def data_configuration(self) -> pulumi.Input['ReferenceLineDataConfigurationArgs']:
        return pulumi.get(self, "data_configuration")

    @data_configuration.setter
    def data_configuration(self, value: pulumi.Input['ReferenceLineDataConfigurationArgs']):
        pulumi.set(self, "data_configuration", value)

    @property
    @pulumi.getter(name="labelConfiguration")
    def label_configuration(self) -> Optional[pulumi.Input['ReferenceLineLabelConfigurationArgs']]:
        return pulumi.get(self, "label_configuration")

    @label_configuration.setter
    def label_configuration(self, value: Optional[pulumi.Input['ReferenceLineLabelConfigurationArgs']]):
        pulumi.set(self, "label_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="styleConfiguration")
    def style_configuration(self) -> Optional[pulumi.Input['ReferenceLineStyleConfigurationArgs']]:
        return pulumi.get(self, "style_configuration")

    @style_configuration.setter
    def style_configuration(self, value: Optional[pulumi.Input['ReferenceLineStyleConfigurationArgs']]):
        pulumi.set(self, "style_configuration", value)


if not MYPY:
    class ReferenceLineDataConfigurationArgsDict(TypedDict):
        axis_binding: NotRequired[pulumi.Input[str]]
        dynamic_configuration: NotRequired[pulumi.Input['ReferenceLineDataConfigurationDynamicConfigurationArgsDict']]
        static_configuration: NotRequired[pulumi.Input['ReferenceLineDataConfigurationStaticConfigurationArgsDict']]
elif False:
    ReferenceLineDataConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReferenceLineDataConfigurationArgs:
    def __init__(__self__, *,
                 axis_binding: Optional[pulumi.Input[str]] = None,
                 dynamic_configuration: Optional[pulumi.Input['ReferenceLineDataConfigurationDynamicConfigurationArgs']] = None,
                 static_configuration: Optional[pulumi.Input['ReferenceLineDataConfigurationStaticConfigurationArgs']] = None):
        if axis_binding is not None:
            pulumi.set(__self__, "axis_binding", axis_binding)
        if dynamic_configuration is not None:
            pulumi.set(__self__, "dynamic_configuration", dynamic_configuration)
        if static_configuration is not None:
            pulumi.set(__self__, "static_configuration", static_configuration)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="dynamicConfiguration")
    def dynamic_configuration(self) -> Optional[pulumi.Input['ReferenceLineDataConfigurationDynamicConfigurationArgs']]:
        return pulumi.get(self, "dynamic_configuration")

    @dynamic_configuration.setter
    def dynamic_configuration(self, value: Optional[pulumi.Input['ReferenceLineDataConfigurationDynamicConfigurationArgs']]):
        pulumi.set(self, "dynamic_configuration", value)

    @property
    @pulumi.getter(name="staticConfiguration")
    def static_configuration(self) -> Optional[pulumi.Input['ReferenceLineDataConfigurationStaticConfigurationArgs']]:
        return pulumi.get(self, "static_configuration")

    @static_configuration.setter
    def static_configuration(self, value: Optional[pulumi.Input['ReferenceLineDataConfigurationStaticConfigurationArgs']]):
        pulumi.set(self, "static_configuration", value)


if not MYPY:
    class ReferenceLineDataConfigurationDynamicConfigurationArgsDict(TypedDict):
        calculation: pulumi.Input['NumericalAggregationArgsDict']
        column: pulumi.Input['ColumnArgsDict']
        measure_aggregation_function: pulumi.Input['AggregationFunctionArgsDict']
elif False:
    ReferenceLineDataConfigurationDynamicConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReferenceLineDataConfigurationDynamicConfigurationArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input['NumericalAggregationArgs'],
                 column: pulumi.Input['ColumnArgs'],
                 measure_aggregation_function: pulumi.Input['AggregationFunctionArgs']):
        pulumi.set(__self__, "calculation", calculation)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "measure_aggregation_function", measure_aggregation_function)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input['NumericalAggregationArgs']:
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input['NumericalAggregationArgs']):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="measureAggregationFunction")
    def measure_aggregation_function(self) -> pulumi.Input['AggregationFunctionArgs']:
        return pulumi.get(self, "measure_aggregation_function")

    @measure_aggregation_function.setter
    def measure_aggregation_function(self, value: pulumi.Input['AggregationFunctionArgs']):
        pulumi.set(self, "measure_aggregation_function", value)


if not MYPY:
    class ReferenceLineDataConfigurationStaticConfigurationArgsDict(TypedDict):
        value: pulumi.Input[float]
elif False:
    ReferenceLineDataConfigurationStaticConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReferenceLineDataConfigurationStaticConfigurationArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ReferenceLineLabelConfigurationArgsDict(TypedDict):
        custom_label_configuration: NotRequired[pulumi.Input['ReferenceLineLabelConfigurationCustomLabelConfigurationArgsDict']]
        font_color: NotRequired[pulumi.Input[str]]
        font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
        horizontal_position: NotRequired[pulumi.Input[str]]
        value_label_configuration: NotRequired[pulumi.Input['ReferenceLineLabelConfigurationValueLabelConfigurationArgsDict']]
        vertical_position: NotRequired[pulumi.Input[str]]
elif False:
    ReferenceLineLabelConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReferenceLineLabelConfigurationArgs:
    def __init__(__self__, *,
                 custom_label_configuration: Optional[pulumi.Input['ReferenceLineLabelConfigurationCustomLabelConfigurationArgs']] = None,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None,
                 horizontal_position: Optional[pulumi.Input[str]] = None,
                 value_label_configuration: Optional[pulumi.Input['ReferenceLineLabelConfigurationValueLabelConfigurationArgs']] = None,
                 vertical_position: Optional[pulumi.Input[str]] = None):
        if custom_label_configuration is not None:
            pulumi.set(__self__, "custom_label_configuration", custom_label_configuration)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)
        if horizontal_position is not None:
            pulumi.set(__self__, "horizontal_position", horizontal_position)
        if value_label_configuration is not None:
            pulumi.set(__self__, "value_label_configuration", value_label_configuration)
        if vertical_position is not None:
            pulumi.set(__self__, "vertical_position", vertical_position)

    @property
    @pulumi.getter(name="customLabelConfiguration")
    def custom_label_configuration(self) -> Optional[pulumi.Input['ReferenceLineLabelConfigurationCustomLabelConfigurationArgs']]:
        return pulumi.get(self, "custom_label_configuration")

    @custom_label_configuration.setter
    def custom_label_configuration(self, value: Optional[pulumi.Input['ReferenceLineLabelConfigurationCustomLabelConfigurationArgs']]):
        pulumi.set(self, "custom_label_configuration", value)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter(name="horizontalPosition")
    def horizontal_position(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "horizontal_position")

    @horizontal_position.setter
    def horizontal_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_position", value)

    @property
    @pulumi.getter(name="valueLabelConfiguration")
    def value_label_configuration(self) -> Optional[pulumi.Input['ReferenceLineLabelConfigurationValueLabelConfigurationArgs']]:
        return pulumi.get(self, "value_label_configuration")

    @value_label_configuration.setter
    def value_label_configuration(self, value: Optional[pulumi.Input['ReferenceLineLabelConfigurationValueLabelConfigurationArgs']]):
        pulumi.set(self, "value_label_configuration", value)

    @property
    @pulumi.getter(name="verticalPosition")
    def vertical_position(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vertical_position")

    @vertical_position.setter
    def vertical_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vertical_position", value)


if not MYPY:
    class ReferenceLineLabelConfigurationCustomLabelConfigurationArgsDict(TypedDict):
        custom_label: pulumi.Input[str]
elif False:
    ReferenceLineLabelConfigurationCustomLabelConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReferenceLineLabelConfigurationCustomLabelConfigurationArgs:
    def __init__(__self__, *,
                 custom_label: pulumi.Input[str]):
        pulumi.set(__self__, "custom_label", custom_label)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_label", value)


if not MYPY:
    class ReferenceLineLabelConfigurationValueLabelConfigurationArgsDict(TypedDict):
        format_configuration: NotRequired[pulumi.Input['NumericFormatConfigurationArgsDict']]
        relative_position: NotRequired[pulumi.Input[str]]
elif False:
    ReferenceLineLabelConfigurationValueLabelConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReferenceLineLabelConfigurationValueLabelConfigurationArgs:
    def __init__(__self__, *,
                 format_configuration: Optional[pulumi.Input['NumericFormatConfigurationArgs']] = None,
                 relative_position: Optional[pulumi.Input[str]] = None):
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if relative_position is not None:
            pulumi.set(__self__, "relative_position", relative_position)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['NumericFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['NumericFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="relativePosition")
    def relative_position(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "relative_position")

    @relative_position.setter
    def relative_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relative_position", value)


if not MYPY:
    class ReferenceLineStyleConfigurationArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        pattern: NotRequired[pulumi.Input[str]]
elif False:
    ReferenceLineStyleConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ReferenceLineStyleConfigurationArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


if not MYPY:
    class RefreshScheduleScheduleArgsDict(TypedDict):
        refresh_type: pulumi.Input[str]
        """
        The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
        """
        schedule_frequency: NotRequired[pulumi.Input['RefreshScheduleScheduleScheduleFrequencyArgsDict']]
        """
        The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
        """
        start_after_date_time: NotRequired[pulumi.Input[str]]
        """
        Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
        """
elif False:
    RefreshScheduleScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RefreshScheduleScheduleArgs:
    def __init__(__self__, *,
                 refresh_type: pulumi.Input[str],
                 schedule_frequency: Optional[pulumi.Input['RefreshScheduleScheduleScheduleFrequencyArgs']] = None,
                 start_after_date_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] refresh_type: The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
        :param pulumi.Input['RefreshScheduleScheduleScheduleFrequencyArgs'] schedule_frequency: The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
        :param pulumi.Input[str] start_after_date_time: Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
        """
        pulumi.set(__self__, "refresh_type", refresh_type)
        if schedule_frequency is not None:
            pulumi.set(__self__, "schedule_frequency", schedule_frequency)
        if start_after_date_time is not None:
            pulumi.set(__self__, "start_after_date_time", start_after_date_time)

    @property
    @pulumi.getter(name="refreshType")
    def refresh_type(self) -> pulumi.Input[str]:
        """
        The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
        """
        return pulumi.get(self, "refresh_type")

    @refresh_type.setter
    def refresh_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_type", value)

    @property
    @pulumi.getter(name="scheduleFrequency")
    def schedule_frequency(self) -> Optional[pulumi.Input['RefreshScheduleScheduleScheduleFrequencyArgs']]:
        """
        The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
        """
        return pulumi.get(self, "schedule_frequency")

    @schedule_frequency.setter
    def schedule_frequency(self, value: Optional[pulumi.Input['RefreshScheduleScheduleScheduleFrequencyArgs']]):
        pulumi.set(self, "schedule_frequency", value)

    @property
    @pulumi.getter(name="startAfterDateTime")
    def start_after_date_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
        """
        return pulumi.get(self, "start_after_date_time")

    @start_after_date_time.setter
    def start_after_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_after_date_time", value)


if not MYPY:
    class RefreshScheduleScheduleScheduleFrequencyArgsDict(TypedDict):
        interval: pulumi.Input[str]
        """
        The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
        """
        refresh_on_day: NotRequired[pulumi.Input['RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgsDict']]
        """
        The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
        """
        time_of_the_day: NotRequired[pulumi.Input[str]]
        """
        The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
        """
        timezone: NotRequired[pulumi.Input[str]]
        """
        The timezone that you want the refresh schedule to use.
        """
elif False:
    RefreshScheduleScheduleScheduleFrequencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RefreshScheduleScheduleScheduleFrequencyArgs:
    def __init__(__self__, *,
                 interval: pulumi.Input[str],
                 refresh_on_day: Optional[pulumi.Input['RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs']] = None,
                 time_of_the_day: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interval: The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
        :param pulumi.Input['RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs'] refresh_on_day: The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
        :param pulumi.Input[str] time_of_the_day: The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
        :param pulumi.Input[str] timezone: The timezone that you want the refresh schedule to use.
        """
        pulumi.set(__self__, "interval", interval)
        if refresh_on_day is not None:
            pulumi.set(__self__, "refresh_on_day", refresh_on_day)
        if time_of_the_day is not None:
            pulumi.set(__self__, "time_of_the_day", time_of_the_day)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[str]:
        """
        The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[str]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="refreshOnDay")
    def refresh_on_day(self) -> Optional[pulumi.Input['RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs']]:
        """
        The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
        """
        return pulumi.get(self, "refresh_on_day")

    @refresh_on_day.setter
    def refresh_on_day(self, value: Optional[pulumi.Input['RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs']]):
        pulumi.set(self, "refresh_on_day", value)

    @property
    @pulumi.getter(name="timeOfTheDay")
    def time_of_the_day(self) -> Optional[pulumi.Input[str]]:
        """
        The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
        """
        return pulumi.get(self, "time_of_the_day")

    @time_of_the_day.setter
    def time_of_the_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_of_the_day", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The timezone that you want the refresh schedule to use.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgsDict(TypedDict):
        day_of_month: NotRequired[pulumi.Input[str]]
        """
        The day of the month that you want to schedule refresh on.
        """
        day_of_week: NotRequired[pulumi.Input[str]]
        """
        The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
        """
elif False:
    RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[str]] = None,
                 day_of_week: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] day_of_month: The day of the month that you want to schedule refresh on.
        :param pulumi.Input[str] day_of_week: The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
        """
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[str]]:
        """
        The day of the month that you want to schedule refresh on.
        """
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)


if not MYPY:
    class SelectAllOptionsArgsDict(TypedDict):
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    SelectAllOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SelectAllOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input[str]] = None):
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class SeparatorConfigurationArgsDict(TypedDict):
        decimal_separator: NotRequired[pulumi.Input[str]]
        thousands_separator: NotRequired[pulumi.Input['SeparatorConfigurationThousandsSeparatorArgsDict']]
elif False:
    SeparatorConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SeparatorConfigurationArgs:
    def __init__(__self__, *,
                 decimal_separator: Optional[pulumi.Input[str]] = None,
                 thousands_separator: Optional[pulumi.Input['SeparatorConfigurationThousandsSeparatorArgs']] = None):
        if decimal_separator is not None:
            pulumi.set(__self__, "decimal_separator", decimal_separator)
        if thousands_separator is not None:
            pulumi.set(__self__, "thousands_separator", thousands_separator)

    @property
    @pulumi.getter(name="decimalSeparator")
    def decimal_separator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "decimal_separator")

    @decimal_separator.setter
    def decimal_separator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decimal_separator", value)

    @property
    @pulumi.getter(name="thousandsSeparator")
    def thousands_separator(self) -> Optional[pulumi.Input['SeparatorConfigurationThousandsSeparatorArgs']]:
        return pulumi.get(self, "thousands_separator")

    @thousands_separator.setter
    def thousands_separator(self, value: Optional[pulumi.Input['SeparatorConfigurationThousandsSeparatorArgs']]):
        pulumi.set(self, "thousands_separator", value)


if not MYPY:
    class SeparatorConfigurationThousandsSeparatorArgsDict(TypedDict):
        symbol: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    SeparatorConfigurationThousandsSeparatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SeparatorConfigurationThousandsSeparatorArgs:
    def __init__(__self__, *,
                 symbol: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if symbol is not None:
            pulumi.set(__self__, "symbol", symbol)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "symbol")

    @symbol.setter
    def symbol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "symbol", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class SmallMultiplesOptionsArgsDict(TypedDict):
        max_visible_columns: NotRequired[pulumi.Input[int]]
        max_visible_rows: NotRequired[pulumi.Input[int]]
        panel_configuration: NotRequired[pulumi.Input['SmallMultiplesOptionsPanelConfigurationArgsDict']]
elif False:
    SmallMultiplesOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SmallMultiplesOptionsArgs:
    def __init__(__self__, *,
                 max_visible_columns: Optional[pulumi.Input[int]] = None,
                 max_visible_rows: Optional[pulumi.Input[int]] = None,
                 panel_configuration: Optional[pulumi.Input['SmallMultiplesOptionsPanelConfigurationArgs']] = None):
        if max_visible_columns is not None:
            pulumi.set(__self__, "max_visible_columns", max_visible_columns)
        if max_visible_rows is not None:
            pulumi.set(__self__, "max_visible_rows", max_visible_rows)
        if panel_configuration is not None:
            pulumi.set(__self__, "panel_configuration", panel_configuration)

    @property
    @pulumi.getter(name="maxVisibleColumns")
    def max_visible_columns(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_visible_columns")

    @max_visible_columns.setter
    def max_visible_columns(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_visible_columns", value)

    @property
    @pulumi.getter(name="maxVisibleRows")
    def max_visible_rows(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_visible_rows")

    @max_visible_rows.setter
    def max_visible_rows(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_visible_rows", value)

    @property
    @pulumi.getter(name="panelConfiguration")
    def panel_configuration(self) -> Optional[pulumi.Input['SmallMultiplesOptionsPanelConfigurationArgs']]:
        return pulumi.get(self, "panel_configuration")

    @panel_configuration.setter
    def panel_configuration(self, value: Optional[pulumi.Input['SmallMultiplesOptionsPanelConfigurationArgs']]):
        pulumi.set(self, "panel_configuration", value)


if not MYPY:
    class SmallMultiplesOptionsPanelConfigurationArgsDict(TypedDict):
        background_color: NotRequired[pulumi.Input[str]]
        background_visibility: NotRequired[pulumi.Input[str]]
        border_color: NotRequired[pulumi.Input[str]]
        border_style: NotRequired[pulumi.Input[str]]
        border_thickness: NotRequired[pulumi.Input[str]]
        border_visibility: NotRequired[pulumi.Input[str]]
        gutter_spacing: NotRequired[pulumi.Input[str]]
        gutter_visibility: NotRequired[pulumi.Input[str]]
        title: NotRequired[pulumi.Input['SmallMultiplesOptionsPanelConfigurationTitleArgsDict']]
elif False:
    SmallMultiplesOptionsPanelConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SmallMultiplesOptionsPanelConfigurationArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 background_visibility: Optional[pulumi.Input[str]] = None,
                 border_color: Optional[pulumi.Input[str]] = None,
                 border_style: Optional[pulumi.Input[str]] = None,
                 border_thickness: Optional[pulumi.Input[str]] = None,
                 border_visibility: Optional[pulumi.Input[str]] = None,
                 gutter_spacing: Optional[pulumi.Input[str]] = None,
                 gutter_visibility: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input['SmallMultiplesOptionsPanelConfigurationTitleArgs']] = None):
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if background_visibility is not None:
            pulumi.set(__self__, "background_visibility", background_visibility)
        if border_color is not None:
            pulumi.set(__self__, "border_color", border_color)
        if border_style is not None:
            pulumi.set(__self__, "border_style", border_style)
        if border_thickness is not None:
            pulumi.set(__self__, "border_thickness", border_thickness)
        if border_visibility is not None:
            pulumi.set(__self__, "border_visibility", border_visibility)
        if gutter_spacing is not None:
            pulumi.set(__self__, "gutter_spacing", gutter_spacing)
        if gutter_visibility is not None:
            pulumi.set(__self__, "gutter_visibility", gutter_visibility)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="backgroundVisibility")
    def background_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_visibility")

    @background_visibility.setter
    def background_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_visibility", value)

    @property
    @pulumi.getter(name="borderColor")
    def border_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_color")

    @border_color.setter
    def border_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_color", value)

    @property
    @pulumi.getter(name="borderStyle")
    def border_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_style")

    @border_style.setter
    def border_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_style", value)

    @property
    @pulumi.getter(name="borderThickness")
    def border_thickness(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_thickness")

    @border_thickness.setter
    def border_thickness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_thickness", value)

    @property
    @pulumi.getter(name="borderVisibility")
    def border_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_visibility")

    @border_visibility.setter
    def border_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_visibility", value)

    @property
    @pulumi.getter(name="gutterSpacing")
    def gutter_spacing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gutter_spacing")

    @gutter_spacing.setter
    def gutter_spacing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gutter_spacing", value)

    @property
    @pulumi.getter(name="gutterVisibility")
    def gutter_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gutter_visibility")

    @gutter_visibility.setter
    def gutter_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gutter_visibility", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SmallMultiplesOptionsPanelConfigurationTitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SmallMultiplesOptionsPanelConfigurationTitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class SmallMultiplesOptionsPanelConfigurationTitleArgsDict(TypedDict):
        font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
        horizontal_text_alignment: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    SmallMultiplesOptionsPanelConfigurationTitleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SmallMultiplesOptionsPanelConfigurationTitleArgs:
    def __init__(__self__, *,
                 font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None,
                 horizontal_text_alignment: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)
        if horizontal_text_alignment is not None:
            pulumi.set(__self__, "horizontal_text_alignment", horizontal_text_alignment)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter(name="horizontalTextAlignment")
    def horizontal_text_alignment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "horizontal_text_alignment")

    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_text_alignment", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class SpacingArgsDict(TypedDict):
        bottom: NotRequired[pulumi.Input[str]]
        left: NotRequired[pulumi.Input[str]]
        right: NotRequired[pulumi.Input[str]]
        top: NotRequired[pulumi.Input[str]]
elif False:
    SpacingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SpacingArgs:
    def __init__(__self__, *,
                 bottom: Optional[pulumi.Input[str]] = None,
                 left: Optional[pulumi.Input[str]] = None,
                 right: Optional[pulumi.Input[str]] = None,
                 top: Optional[pulumi.Input[str]] = None):
        if bottom is not None:
            pulumi.set(__self__, "bottom", bottom)
        if left is not None:
            pulumi.set(__self__, "left", left)
        if right is not None:
            pulumi.set(__self__, "right", right)
        if top is not None:
            pulumi.set(__self__, "top", top)

    @property
    @pulumi.getter
    def bottom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bottom")

    @bottom.setter
    def bottom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bottom", value)

    @property
    @pulumi.getter
    def left(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "left")

    @left.setter
    def left(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "left", value)

    @property
    @pulumi.getter
    def right(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "right")

    @right.setter
    def right(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "right", value)

    @property
    @pulumi.getter
    def top(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "top", value)


if not MYPY:
    class StringFormatConfigurationArgsDict(TypedDict):
        null_value_format_configuration: NotRequired[pulumi.Input['NullValueFormatConfigurationArgsDict']]
        numeric_format_configuration: NotRequired[pulumi.Input['NumericFormatConfigurationArgsDict']]
elif False:
    StringFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StringFormatConfigurationArgs:
    def __init__(__self__, *,
                 null_value_format_configuration: Optional[pulumi.Input['NullValueFormatConfigurationArgs']] = None,
                 numeric_format_configuration: Optional[pulumi.Input['NumericFormatConfigurationArgs']] = None):
        if null_value_format_configuration is not None:
            pulumi.set(__self__, "null_value_format_configuration", null_value_format_configuration)
        if numeric_format_configuration is not None:
            pulumi.set(__self__, "numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['NullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['NullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional[pulumi.Input['NumericFormatConfigurationArgs']]:
        return pulumi.get(self, "numeric_format_configuration")

    @numeric_format_configuration.setter
    def numeric_format_configuration(self, value: Optional[pulumi.Input['NumericFormatConfigurationArgs']]):
        pulumi.set(self, "numeric_format_configuration", value)


if not MYPY:
    class StringParameterDeclarationArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Display name for the dashboard.
        """
        parameter_value_type: pulumi.Input[str]
        default_values: NotRequired[pulumi.Input['StringParameterDeclarationDefaultValuesArgsDict']]
        values_when_unset: NotRequired[pulumi.Input['StringParameterDeclarationValuesWhenUnsetArgsDict']]
elif False:
    StringParameterDeclarationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StringParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input[str],
                 default_values: Optional[pulumi.Input['StringParameterDeclarationDefaultValuesArgs']] = None,
                 values_when_unset: Optional[pulumi.Input['StringParameterDeclarationValuesWhenUnsetArgs']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameter_value_type", parameter_value_type)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if values_when_unset is not None:
            pulumi.set(__self__, "values_when_unset", values_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['StringParameterDeclarationDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['StringParameterDeclarationDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="valuesWhenUnset")
    def values_when_unset(self) -> Optional[pulumi.Input['StringParameterDeclarationValuesWhenUnsetArgs']]:
        return pulumi.get(self, "values_when_unset")

    @values_when_unset.setter
    def values_when_unset(self, value: Optional[pulumi.Input['StringParameterDeclarationValuesWhenUnsetArgs']]):
        pulumi.set(self, "values_when_unset", value)


if not MYPY:
    class StringParameterDeclarationDefaultValuesArgsDict(TypedDict):
        dynamic_value: NotRequired[pulumi.Input['DynamicValueArgsDict']]
        static_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    StringParameterDeclarationDefaultValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StringParameterDeclarationDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['DynamicValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if dynamic_value is not None:
            pulumi.set(__self__, "dynamic_value", dynamic_value)
        if static_values is not None:
            pulumi.set(__self__, "static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['DynamicValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['DynamicValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_values", value)


if not MYPY:
    class StringParameterDeclarationValuesWhenUnsetArgsDict(TypedDict):
        custom_value: NotRequired[pulumi.Input[str]]
        value_when_unset_option: NotRequired[pulumi.Input[str]]
elif False:
    StringParameterDeclarationValuesWhenUnsetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StringParameterDeclarationValuesWhenUnsetArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[str]] = None,
                 value_when_unset_option: Optional[pulumi.Input[str]] = None):
        if custom_value is not None:
            pulumi.set(__self__, "custom_value", custom_value)
        if value_when_unset_option is not None:
            pulumi.set(__self__, "value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_when_unset_option", value)


if not MYPY:
    class SubtitleArgsDict(TypedDict):
        format_text: NotRequired[pulumi.Input['SubtitleFormatTextArgsDict']]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    SubtitleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SubtitleArgs:
    def __init__(__self__, *,
                 format_text: Optional[pulumi.Input['SubtitleFormatTextArgs']] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if format_text is not None:
            pulumi.set(__self__, "format_text", format_text)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="formatText")
    def format_text(self) -> Optional[pulumi.Input['SubtitleFormatTextArgs']]:
        return pulumi.get(self, "format_text")

    @format_text.setter
    def format_text(self, value: Optional[pulumi.Input['SubtitleFormatTextArgs']]):
        pulumi.set(self, "format_text", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class SubtitleFormatTextArgsDict(TypedDict):
        plain_text: NotRequired[pulumi.Input[str]]
        rich_text: NotRequired[pulumi.Input[str]]
elif False:
    SubtitleFormatTextArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SubtitleFormatTextArgs:
    def __init__(__self__, *,
                 plain_text: Optional[pulumi.Input[str]] = None,
                 rich_text: Optional[pulumi.Input[str]] = None):
        if plain_text is not None:
            pulumi.set(__self__, "plain_text", plain_text)
        if rich_text is not None:
            pulumi.set(__self__, "rich_text", rich_text)

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plain_text")

    @plain_text.setter
    def plain_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plain_text", value)

    @property
    @pulumi.getter(name="richText")
    def rich_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rich_text")

    @rich_text.setter
    def rich_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rich_text", value)


if not MYPY:
    class TableBorderOptionsArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
        style: NotRequired[pulumi.Input[str]]
        thickness: NotRequired[pulumi.Input[int]]
elif False:
    TableBorderOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TableBorderOptionsArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 thickness: Optional[pulumi.Input[int]] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if thickness is not None:
            pulumi.set(__self__, "thickness", thickness)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def thickness(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "thickness")

    @thickness.setter
    def thickness(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thickness", value)


if not MYPY:
    class TemplateDefinitionArgsDict(TypedDict):
        data_set_configurations: pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationArgsDict']]]
        """
        A list of dataset configurations. These configurations define the required columns for each dataset used within a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetConfiguration.html).
        """
        analysis_defaults: NotRequired[pulumi.Input['TemplateDefinitionAnalysisDefaultsArgsDict']]
        """
        The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        """
        calculated_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionCalculatedFieldArgsDict']]]]
        """
        A list of calculated field definitions for the template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        """
        column_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionColumnConfigurationArgsDict']]]]
        """
        A list of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template. See AWS API Documentation for complete description.
        """
        filter_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionFilterGroupArgsDict']]]]
        """
        A list of filter definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        """
        parameters_declarations: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionParametersDeclarationArgsDict']]]]
        """
        A list of parameter declarations for a template. Parameters are named variables that can transfer a value for use by an action or an object. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ParameterDeclaration.html). For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the Amazon QuickSight User Guide.
        """
        sheets: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetArgsDict']]]]
        """
        A list of sheet definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
elif False:
    TemplateDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionArgs:
    def __init__(__self__, *,
                 data_set_configurations: pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationArgs']]],
                 analysis_defaults: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsArgs']] = None,
                 calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionCalculatedFieldArgs']]]] = None,
                 column_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionColumnConfigurationArgs']]]] = None,
                 filter_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionFilterGroupArgs']]]] = None,
                 parameters_declarations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionParametersDeclarationArgs']]]] = None,
                 sheets: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationArgs']]] data_set_configurations: A list of dataset configurations. These configurations define the required columns for each dataset used within a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetConfiguration.html).
        :param pulumi.Input['TemplateDefinitionAnalysisDefaultsArgs'] analysis_defaults: The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        :param pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionCalculatedFieldArgs']]] calculated_fields: A list of calculated field definitions for the template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        :param pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionColumnConfigurationArgs']]] column_configurations: A list of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template. See AWS API Documentation for complete description.
        :param pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionFilterGroupArgs']]] filter_groups: A list of filter definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        :param pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionParametersDeclarationArgs']]] parameters_declarations: A list of parameter declarations for a template. Parameters are named variables that can transfer a value for use by an action or an object. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ParameterDeclaration.html). For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the Amazon QuickSight User Guide.
        :param pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetArgs']]] sheets: A list of sheet definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        pulumi.set(__self__, "data_set_configurations", data_set_configurations)
        if analysis_defaults is not None:
            pulumi.set(__self__, "analysis_defaults", analysis_defaults)
        if calculated_fields is not None:
            pulumi.set(__self__, "calculated_fields", calculated_fields)
        if column_configurations is not None:
            pulumi.set(__self__, "column_configurations", column_configurations)
        if filter_groups is not None:
            pulumi.set(__self__, "filter_groups", filter_groups)
        if parameters_declarations is not None:
            pulumi.set(__self__, "parameters_declarations", parameters_declarations)
        if sheets is not None:
            pulumi.set(__self__, "sheets", sheets)

    @property
    @pulumi.getter(name="dataSetConfigurations")
    def data_set_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationArgs']]]:
        """
        A list of dataset configurations. These configurations define the required columns for each dataset used within a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetConfiguration.html).
        """
        return pulumi.get(self, "data_set_configurations")

    @data_set_configurations.setter
    def data_set_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationArgs']]]):
        pulumi.set(self, "data_set_configurations", value)

    @property
    @pulumi.getter(name="analysisDefaults")
    def analysis_defaults(self) -> Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsArgs']]:
        """
        The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        """
        return pulumi.get(self, "analysis_defaults")

    @analysis_defaults.setter
    def analysis_defaults(self, value: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsArgs']]):
        pulumi.set(self, "analysis_defaults", value)

    @property
    @pulumi.getter(name="calculatedFields")
    def calculated_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionCalculatedFieldArgs']]]]:
        """
        A list of calculated field definitions for the template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        """
        return pulumi.get(self, "calculated_fields")

    @calculated_fields.setter
    def calculated_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionCalculatedFieldArgs']]]]):
        pulumi.set(self, "calculated_fields", value)

    @property
    @pulumi.getter(name="columnConfigurations")
    def column_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionColumnConfigurationArgs']]]]:
        """
        A list of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template. See AWS API Documentation for complete description.
        """
        return pulumi.get(self, "column_configurations")

    @column_configurations.setter
    def column_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionColumnConfigurationArgs']]]]):
        pulumi.set(self, "column_configurations", value)

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionFilterGroupArgs']]]]:
        """
        A list of filter definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        """
        return pulumi.get(self, "filter_groups")

    @filter_groups.setter
    def filter_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionFilterGroupArgs']]]]):
        pulumi.set(self, "filter_groups", value)

    @property
    @pulumi.getter(name="parametersDeclarations")
    def parameters_declarations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionParametersDeclarationArgs']]]]:
        """
        A list of parameter declarations for a template. Parameters are named variables that can transfer a value for use by an action or an object. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ParameterDeclaration.html). For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the Amazon QuickSight User Guide.
        """
        return pulumi.get(self, "parameters_declarations")

    @parameters_declarations.setter
    def parameters_declarations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionParametersDeclarationArgs']]]]):
        pulumi.set(self, "parameters_declarations", value)

    @property
    @pulumi.getter
    def sheets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetArgs']]]]:
        """
        A list of sheet definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        return pulumi.get(self, "sheets")

    @sheets.setter
    def sheets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetArgs']]]]):
        pulumi.set(self, "sheets", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsArgsDict(TypedDict):
        default_new_sheet_configuration: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict']
elif False:
    TemplateDefinitionAnalysisDefaultsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsArgs:
    def __init__(__self__, *,
                 default_new_sheet_configuration: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs']):
        pulumi.set(__self__, "default_new_sheet_configuration", default_new_sheet_configuration)

    @property
    @pulumi.getter(name="defaultNewSheetConfiguration")
    def default_new_sheet_configuration(self) -> pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs']:
        return pulumi.get(self, "default_new_sheet_configuration")

    @default_new_sheet_configuration.setter
    def default_new_sheet_configuration(self, value: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs']):
        pulumi.set(self, "default_new_sheet_configuration", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict(TypedDict):
        interactive_layout_configuration: NotRequired[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict']]
        paginated_layout_configuration: NotRequired[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict']]
        sheet_content_type: NotRequired[pulumi.Input[str]]
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationArgs:
    def __init__(__self__, *,
                 interactive_layout_configuration: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs']] = None,
                 paginated_layout_configuration: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs']] = None,
                 sheet_content_type: Optional[pulumi.Input[str]] = None):
        if interactive_layout_configuration is not None:
            pulumi.set(__self__, "interactive_layout_configuration", interactive_layout_configuration)
        if paginated_layout_configuration is not None:
            pulumi.set(__self__, "paginated_layout_configuration", paginated_layout_configuration)
        if sheet_content_type is not None:
            pulumi.set(__self__, "sheet_content_type", sheet_content_type)

    @property
    @pulumi.getter(name="interactiveLayoutConfiguration")
    def interactive_layout_configuration(self) -> Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs']]:
        return pulumi.get(self, "interactive_layout_configuration")

    @interactive_layout_configuration.setter
    def interactive_layout_configuration(self, value: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs']]):
        pulumi.set(self, "interactive_layout_configuration", value)

    @property
    @pulumi.getter(name="paginatedLayoutConfiguration")
    def paginated_layout_configuration(self) -> Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs']]:
        return pulumi.get(self, "paginated_layout_configuration")

    @paginated_layout_configuration.setter
    def paginated_layout_configuration(self, value: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs']]):
        pulumi.set(self, "paginated_layout_configuration", value)

    @property
    @pulumi.getter(name="sheetContentType")
    def sheet_content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sheet_content_type")

    @sheet_content_type.setter
    def sheet_content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sheet_content_type", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict(TypedDict):
        free_form: NotRequired[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict']]
        grid: NotRequired[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict']]
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs']] = None,
                 grid: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs']] = None):
        if free_form is not None:
            pulumi.set(__self__, "free_form", free_form)
        if grid is not None:
            pulumi.set(__self__, "grid", grid)

    @property
    @pulumi.getter(name="freeForm")
    def free_form(self) -> Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs']]:
        return pulumi.get(self, "free_form")

    @free_form.setter
    def free_form(self, value: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs']]):
        pulumi.set(self, "free_form", value)

    @property
    @pulumi.getter
    def grid(self) -> Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs']]:
        return pulumi.get(self, "grid")

    @grid.setter
    def grid(self, value: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs']]):
        pulumi.set(self, "grid", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict(TypedDict):
        canvas_size_options: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict']
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs']):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict(TypedDict):
        screen_canvas_size_options: NotRequired[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict']]
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs']] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict(TypedDict):
        optimized_view_port_width: pulumi.Input[str]
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 optimized_view_port_width: pulumi.Input[str]):
        pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> pulumi.Input[str]:
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: pulumi.Input[str]):
        pulumi.set(self, "optimized_view_port_width", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict(TypedDict):
        canvas_size_options: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict']
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs']):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict(TypedDict):
        screen_canvas_size_options: NotRequired[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict']]
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs']] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict(TypedDict):
        resize_option: pulumi.Input[str]
        optimized_view_port_width: NotRequired[pulumi.Input[str]]
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 resize_option: pulumi.Input[str],
                 optimized_view_port_width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "resize_option", resize_option)
        if optimized_view_port_width is not None:
            pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resize_option")

    @resize_option.setter
    def resize_option(self, value: pulumi.Input[str]):
        pulumi.set(self, "resize_option", value)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimized_view_port_width", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict(TypedDict):
        section_based: NotRequired[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict']]
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 section_based: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs']] = None):
        if section_based is not None:
            pulumi.set(__self__, "section_based", section_based)

    @property
    @pulumi.getter(name="sectionBased")
    def section_based(self) -> Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs']]:
        return pulumi.get(self, "section_based")

    @section_based.setter
    def section_based(self, value: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs']]):
        pulumi.set(self, "section_based", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict(TypedDict):
        canvas_size_options: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict']
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs']):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict(TypedDict):
        paper_canvas_size_options: NotRequired[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict']]
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_canvas_size_options: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs']] = None):
        if paper_canvas_size_options is not None:
            pulumi.set(__self__, "paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "paper_canvas_size_options")

    @paper_canvas_size_options.setter
    def paper_canvas_size_options(self, value: Optional[pulumi.Input['TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs']]):
        pulumi.set(self, "paper_canvas_size_options", value)


if not MYPY:
    class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict(TypedDict):
        paper_margin: NotRequired[pulumi.Input['SpacingArgsDict']]
        paper_orientation: NotRequired[pulumi.Input[str]]
        paper_size: NotRequired[pulumi.Input[str]]
elif False:
    TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_margin: Optional[pulumi.Input['SpacingArgs']] = None,
                 paper_orientation: Optional[pulumi.Input[str]] = None,
                 paper_size: Optional[pulumi.Input[str]] = None):
        if paper_margin is not None:
            pulumi.set(__self__, "paper_margin", paper_margin)
        if paper_orientation is not None:
            pulumi.set(__self__, "paper_orientation", paper_orientation)
        if paper_size is not None:
            pulumi.set(__self__, "paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional[pulumi.Input['SpacingArgs']]:
        return pulumi.get(self, "paper_margin")

    @paper_margin.setter
    def paper_margin(self, value: Optional[pulumi.Input['SpacingArgs']]):
        pulumi.set(self, "paper_margin", value)

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "paper_orientation")

    @paper_orientation.setter
    def paper_orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper_orientation", value)

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "paper_size")

    @paper_size.setter
    def paper_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper_size", value)


if not MYPY:
    class TemplateDefinitionCalculatedFieldArgsDict(TypedDict):
        data_set_identifier: pulumi.Input[str]
        expression: pulumi.Input[str]
        name: pulumi.Input[str]
        """
        Display name for the template.
        """
elif False:
    TemplateDefinitionCalculatedFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionCalculatedFieldArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Display name for the template.
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class TemplateDefinitionColumnConfigurationArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        format_configuration: NotRequired[pulumi.Input['TemplateDefinitionColumnConfigurationFormatConfigurationArgsDict']]
        role: NotRequired[pulumi.Input[str]]
elif False:
    TemplateDefinitionColumnConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionColumnConfigurationArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 format_configuration: Optional[pulumi.Input['TemplateDefinitionColumnConfigurationFormatConfigurationArgs']] = None,
                 role: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateDefinitionColumnConfigurationFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateDefinitionColumnConfigurationFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


if not MYPY:
    class TemplateDefinitionColumnConfigurationFormatConfigurationArgsDict(TypedDict):
        date_time_format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
        number_format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
        string_format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
elif False:
    TemplateDefinitionColumnConfigurationFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionColumnConfigurationFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None,
                 number_format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None,
                 string_format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None):
        if date_time_format_configuration is not None:
            pulumi.set(__self__, "date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            pulumi.set(__self__, "number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            pulumi.set(__self__, "string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "date_time_format_configuration")

    @date_time_format_configuration.setter
    def date_time_format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "date_time_format_configuration", value)

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "number_format_configuration")

    @number_format_configuration.setter
    def number_format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "number_format_configuration", value)

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "string_format_configuration")

    @string_format_configuration.setter
    def string_format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "string_format_configuration", value)


if not MYPY:
    class TemplateDefinitionDataSetConfigurationArgsDict(TypedDict):
        column_group_schema_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationColumnGroupSchemaListArgsDict']]]]
        data_set_schema: NotRequired[pulumi.Input['TemplateDefinitionDataSetConfigurationDataSetSchemaArgsDict']]
        placeholder: NotRequired[pulumi.Input[str]]
elif False:
    TemplateDefinitionDataSetConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionDataSetConfigurationArgs:
    def __init__(__self__, *,
                 column_group_schema_lists: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationColumnGroupSchemaListArgs']]]] = None,
                 data_set_schema: Optional[pulumi.Input['TemplateDefinitionDataSetConfigurationDataSetSchemaArgs']] = None,
                 placeholder: Optional[pulumi.Input[str]] = None):
        if column_group_schema_lists is not None:
            pulumi.set(__self__, "column_group_schema_lists", column_group_schema_lists)
        if data_set_schema is not None:
            pulumi.set(__self__, "data_set_schema", data_set_schema)
        if placeholder is not None:
            pulumi.set(__self__, "placeholder", placeholder)

    @property
    @pulumi.getter(name="columnGroupSchemaLists")
    def column_group_schema_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationColumnGroupSchemaListArgs']]]]:
        return pulumi.get(self, "column_group_schema_lists")

    @column_group_schema_lists.setter
    def column_group_schema_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationColumnGroupSchemaListArgs']]]]):
        pulumi.set(self, "column_group_schema_lists", value)

    @property
    @pulumi.getter(name="dataSetSchema")
    def data_set_schema(self) -> Optional[pulumi.Input['TemplateDefinitionDataSetConfigurationDataSetSchemaArgs']]:
        return pulumi.get(self, "data_set_schema")

    @data_set_schema.setter
    def data_set_schema(self, value: Optional[pulumi.Input['TemplateDefinitionDataSetConfigurationDataSetSchemaArgs']]):
        pulumi.set(self, "data_set_schema", value)

    @property
    @pulumi.getter
    def placeholder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "placeholder")

    @placeholder.setter
    def placeholder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placeholder", value)


if not MYPY:
    class TemplateDefinitionDataSetConfigurationColumnGroupSchemaListArgsDict(TypedDict):
        column_group_column_schema_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaListArgsDict']]]]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the template.
        """
elif False:
    TemplateDefinitionDataSetConfigurationColumnGroupSchemaListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionDataSetConfigurationColumnGroupSchemaListArgs:
    def __init__(__self__, *,
                 column_group_column_schema_lists: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaListArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Display name for the template.
        """
        if column_group_column_schema_lists is not None:
            pulumi.set(__self__, "column_group_column_schema_lists", column_group_column_schema_lists)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="columnGroupColumnSchemaLists")
    def column_group_column_schema_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaListArgs']]]]:
        return pulumi.get(self, "column_group_column_schema_lists")

    @column_group_column_schema_lists.setter
    def column_group_column_schema_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaListArgs']]]]):
        pulumi.set(self, "column_group_column_schema_lists", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaListArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the template.
        """
elif False:
    TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Display name for the template.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class TemplateDefinitionDataSetConfigurationDataSetSchemaArgsDict(TypedDict):
        column_schema_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaListArgsDict']]]]
elif False:
    TemplateDefinitionDataSetConfigurationDataSetSchemaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionDataSetConfigurationDataSetSchemaArgs:
    def __init__(__self__, *,
                 column_schema_lists: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaListArgs']]]] = None):
        if column_schema_lists is not None:
            pulumi.set(__self__, "column_schema_lists", column_schema_lists)

    @property
    @pulumi.getter(name="columnSchemaLists")
    def column_schema_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaListArgs']]]]:
        return pulumi.get(self, "column_schema_lists")

    @column_schema_lists.setter
    def column_schema_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaListArgs']]]]):
        pulumi.set(self, "column_schema_lists", value)


if not MYPY:
    class TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaListArgsDict(TypedDict):
        data_type: NotRequired[pulumi.Input[str]]
        geographic_role: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the template.
        """
elif False:
    TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaListArgs:
    def __init__(__self__, *,
                 data_type: Optional[pulumi.Input[str]] = None,
                 geographic_role: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Display name for the template.
        """
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if geographic_role is not None:
            pulumi.set(__self__, "geographic_role", geographic_role)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="geographicRole")
    def geographic_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "geographic_role")

    @geographic_role.setter
    def geographic_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geographic_role", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class TemplateDefinitionFilterGroupArgsDict(TypedDict):
        cross_dataset: pulumi.Input[str]
        filter_group_id: pulumi.Input[str]
        filters: pulumi.Input[Sequence[pulumi.Input['FiltersArgsDict']]]
        scope_configuration: pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationArgsDict']
        status: NotRequired[pulumi.Input[str]]
        """
        The template creation status.
        """
elif False:
    TemplateDefinitionFilterGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionFilterGroupArgs:
    def __init__(__self__, *,
                 cross_dataset: pulumi.Input[str],
                 filter_group_id: pulumi.Input[str],
                 filters: pulumi.Input[Sequence[pulumi.Input['FiltersArgs']]],
                 scope_configuration: pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationArgs'],
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: The template creation status.
        """
        pulumi.set(__self__, "cross_dataset", cross_dataset)
        pulumi.set(__self__, "filter_group_id", filter_group_id)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "scope_configuration", scope_configuration)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="crossDataset")
    def cross_dataset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cross_dataset")

    @cross_dataset.setter
    def cross_dataset(self, value: pulumi.Input[str]):
        pulumi.set(self, "cross_dataset", value)

    @property
    @pulumi.getter(name="filterGroupId")
    def filter_group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_group_id")

    @filter_group_id.setter
    def filter_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_group_id", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['FiltersArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['FiltersArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="scopeConfiguration")
    def scope_configuration(self) -> pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationArgs']:
        return pulumi.get(self, "scope_configuration")

    @scope_configuration.setter
    def scope_configuration(self, value: pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationArgs']):
        pulumi.set(self, "scope_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The template creation status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class TemplateDefinitionFilterGroupScopeConfigurationArgsDict(TypedDict):
        selected_sheets: NotRequired[pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict']]
elif False:
    TemplateDefinitionFilterGroupScopeConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionFilterGroupScopeConfigurationArgs:
    def __init__(__self__, *,
                 selected_sheets: Optional[pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs']] = None):
        if selected_sheets is not None:
            pulumi.set(__self__, "selected_sheets", selected_sheets)

    @property
    @pulumi.getter(name="selectedSheets")
    def selected_sheets(self) -> Optional[pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs']]:
        return pulumi.get(self, "selected_sheets")

    @selected_sheets.setter
    def selected_sheets(self, value: Optional[pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs']]):
        pulumi.set(self, "selected_sheets", value)


if not MYPY:
    class TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict(TypedDict):
        sheet_visual_scoping_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict']]]]
elif False:
    TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsArgs:
    def __init__(__self__, *,
                 sheet_visual_scoping_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs']]]] = None):
        if sheet_visual_scoping_configurations is not None:
            pulumi.set(__self__, "sheet_visual_scoping_configurations", sheet_visual_scoping_configurations)

    @property
    @pulumi.getter(name="sheetVisualScopingConfigurations")
    def sheet_visual_scoping_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs']]]]:
        return pulumi.get(self, "sheet_visual_scoping_configurations")

    @sheet_visual_scoping_configurations.setter
    def sheet_visual_scoping_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs']]]]):
        pulumi.set(self, "sheet_visual_scoping_configurations", value)


if not MYPY:
    class TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict(TypedDict):
        scope: pulumi.Input[str]
        sheet_id: pulumi.Input[str]
        visual_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfigurationArgs:
    def __init__(__self__, *,
                 scope: pulumi.Input[str],
                 sheet_id: pulumi.Input[str],
                 visual_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sheet_id", sheet_id)
        if visual_ids is not None:
            pulumi.set(__self__, "visual_ids", visual_ids)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="visualIds")
    def visual_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "visual_ids")

    @visual_ids.setter
    def visual_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "visual_ids", value)


if not MYPY:
    class TemplateDefinitionParametersDeclarationArgsDict(TypedDict):
        date_time_parameter_declaration: NotRequired[pulumi.Input['DateTimeParameterDeclarationArgsDict']]
        decimal_parameter_declaration: NotRequired[pulumi.Input['DecimalParameterDeclarationArgsDict']]
        integer_parameter_declaration: NotRequired[pulumi.Input['IntegerParameterDeclarationArgsDict']]
        string_parameter_declaration: NotRequired[pulumi.Input['StringParameterDeclarationArgsDict']]
elif False:
    TemplateDefinitionParametersDeclarationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionParametersDeclarationArgs:
    def __init__(__self__, *,
                 date_time_parameter_declaration: Optional[pulumi.Input['DateTimeParameterDeclarationArgs']] = None,
                 decimal_parameter_declaration: Optional[pulumi.Input['DecimalParameterDeclarationArgs']] = None,
                 integer_parameter_declaration: Optional[pulumi.Input['IntegerParameterDeclarationArgs']] = None,
                 string_parameter_declaration: Optional[pulumi.Input['StringParameterDeclarationArgs']] = None):
        if date_time_parameter_declaration is not None:
            pulumi.set(__self__, "date_time_parameter_declaration", date_time_parameter_declaration)
        if decimal_parameter_declaration is not None:
            pulumi.set(__self__, "decimal_parameter_declaration", decimal_parameter_declaration)
        if integer_parameter_declaration is not None:
            pulumi.set(__self__, "integer_parameter_declaration", integer_parameter_declaration)
        if string_parameter_declaration is not None:
            pulumi.set(__self__, "string_parameter_declaration", string_parameter_declaration)

    @property
    @pulumi.getter(name="dateTimeParameterDeclaration")
    def date_time_parameter_declaration(self) -> Optional[pulumi.Input['DateTimeParameterDeclarationArgs']]:
        return pulumi.get(self, "date_time_parameter_declaration")

    @date_time_parameter_declaration.setter
    def date_time_parameter_declaration(self, value: Optional[pulumi.Input['DateTimeParameterDeclarationArgs']]):
        pulumi.set(self, "date_time_parameter_declaration", value)

    @property
    @pulumi.getter(name="decimalParameterDeclaration")
    def decimal_parameter_declaration(self) -> Optional[pulumi.Input['DecimalParameterDeclarationArgs']]:
        return pulumi.get(self, "decimal_parameter_declaration")

    @decimal_parameter_declaration.setter
    def decimal_parameter_declaration(self, value: Optional[pulumi.Input['DecimalParameterDeclarationArgs']]):
        pulumi.set(self, "decimal_parameter_declaration", value)

    @property
    @pulumi.getter(name="integerParameterDeclaration")
    def integer_parameter_declaration(self) -> Optional[pulumi.Input['IntegerParameterDeclarationArgs']]:
        return pulumi.get(self, "integer_parameter_declaration")

    @integer_parameter_declaration.setter
    def integer_parameter_declaration(self, value: Optional[pulumi.Input['IntegerParameterDeclarationArgs']]):
        pulumi.set(self, "integer_parameter_declaration", value)

    @property
    @pulumi.getter(name="stringParameterDeclaration")
    def string_parameter_declaration(self) -> Optional[pulumi.Input['StringParameterDeclarationArgs']]:
        return pulumi.get(self, "string_parameter_declaration")

    @string_parameter_declaration.setter
    def string_parameter_declaration(self, value: Optional[pulumi.Input['StringParameterDeclarationArgs']]):
        pulumi.set(self, "string_parameter_declaration", value)


if not MYPY:
    class TemplateDefinitionSheetArgsDict(TypedDict):
        sheet_id: pulumi.Input[str]
        content_type: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        filter_controls: NotRequired[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgsDict']]]]
        layouts: NotRequired[pulumi.Input['LayoutsArgsDict']]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the template.
        """
        parameter_controls: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetParameterControlArgsDict']]]]
        sheet_control_layouts: NotRequired[pulumi.Input['TemplateDefinitionSheetSheetControlLayoutsArgsDict']]
        text_boxes: NotRequired[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetTextBoxArgsDict']]]]
        title: NotRequired[pulumi.Input[str]]
        visuals: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsArgsDict']]]]
elif False:
    TemplateDefinitionSheetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetArgs:
    def __init__(__self__, *,
                 sheet_id: pulumi.Input[str],
                 content_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgs']]]] = None,
                 layouts: Optional[pulumi.Input['LayoutsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetParameterControlArgs']]]] = None,
                 sheet_control_layouts: Optional[pulumi.Input['TemplateDefinitionSheetSheetControlLayoutsArgs']] = None,
                 text_boxes: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetTextBoxArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visuals: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Display name for the template.
        """
        pulumi.set(__self__, "sheet_id", sheet_id)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter_controls is not None:
            pulumi.set(__self__, "filter_controls", filter_controls)
        if layouts is not None:
            pulumi.set(__self__, "layouts", layouts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_controls is not None:
            pulumi.set(__self__, "parameter_controls", parameter_controls)
        if sheet_control_layouts is not None:
            pulumi.set(__self__, "sheet_control_layouts", sheet_control_layouts)
        if text_boxes is not None:
            pulumi.set(__self__, "text_boxes", text_boxes)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visuals is not None:
            pulumi.set(__self__, "visuals", visuals)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="filterControls")
    def filter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgs']]]]:
        return pulumi.get(self, "filter_controls")

    @filter_controls.setter
    def filter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FilterControlsArgs']]]]):
        pulumi.set(self, "filter_controls", value)

    @property
    @pulumi.getter
    def layouts(self) -> Optional[pulumi.Input['LayoutsArgs']]:
        return pulumi.get(self, "layouts")

    @layouts.setter
    def layouts(self, value: Optional[pulumi.Input['LayoutsArgs']]):
        pulumi.set(self, "layouts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterControls")
    def parameter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetParameterControlArgs']]]]:
        return pulumi.get(self, "parameter_controls")

    @parameter_controls.setter
    def parameter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetParameterControlArgs']]]]):
        pulumi.set(self, "parameter_controls", value)

    @property
    @pulumi.getter(name="sheetControlLayouts")
    def sheet_control_layouts(self) -> Optional[pulumi.Input['TemplateDefinitionSheetSheetControlLayoutsArgs']]:
        return pulumi.get(self, "sheet_control_layouts")

    @sheet_control_layouts.setter
    def sheet_control_layouts(self, value: Optional[pulumi.Input['TemplateDefinitionSheetSheetControlLayoutsArgs']]):
        pulumi.set(self, "sheet_control_layouts", value)

    @property
    @pulumi.getter(name="textBoxes")
    def text_boxes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetTextBoxArgs']]]]:
        return pulumi.get(self, "text_boxes")

    @text_boxes.setter
    def text_boxes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDefinitionSheetTextBoxArgs']]]]):
        pulumi.set(self, "text_boxes", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visuals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsArgs']]]]:
        return pulumi.get(self, "visuals")

    @visuals.setter
    def visuals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsArgs']]]]):
        pulumi.set(self, "visuals", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlArgsDict(TypedDict):
        date_time_picker: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlDateTimePickerArgsDict']]
        dropdown: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownArgsDict']]
        list: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlListArgsDict']]
        slider: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlSliderArgsDict']]
        text_area: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlTextAreaArgsDict']]
        text_field: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlTextFieldArgsDict']]
elif False:
    TemplateDefinitionSheetParameterControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlArgs:
    def __init__(__self__, *,
                 date_time_picker: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDateTimePickerArgs']] = None,
                 dropdown: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownArgs']] = None,
                 list: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlListArgs']] = None,
                 slider: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlSliderArgs']] = None,
                 text_area: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlTextAreaArgs']] = None,
                 text_field: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlTextFieldArgs']] = None):
        if date_time_picker is not None:
            pulumi.set(__self__, "date_time_picker", date_time_picker)
        if dropdown is not None:
            pulumi.set(__self__, "dropdown", dropdown)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if slider is not None:
            pulumi.set(__self__, "slider", slider)
        if text_area is not None:
            pulumi.set(__self__, "text_area", text_area)
        if text_field is not None:
            pulumi.set(__self__, "text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDateTimePickerArgs']]:
        return pulumi.get(self, "date_time_picker")

    @date_time_picker.setter
    def date_time_picker(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDateTimePickerArgs']]):
        pulumi.set(self, "date_time_picker", value)

    @property
    @pulumi.getter
    def dropdown(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownArgs']]:
        return pulumi.get(self, "dropdown")

    @dropdown.setter
    def dropdown(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownArgs']]):
        pulumi.set(self, "dropdown", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlListArgs']]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlListArgs']]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter
    def slider(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlSliderArgs']]:
        return pulumi.get(self, "slider")

    @slider.setter
    def slider(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlSliderArgs']]):
        pulumi.set(self, "slider", value)

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlTextAreaArgs']]:
        return pulumi.get(self, "text_area")

    @text_area.setter
    def text_area(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlTextAreaArgs']]):
        pulumi.set(self, "text_area", value)

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlTextFieldArgs']]:
        return pulumi.get(self, "text_field")

    @text_field.setter
    def text_field(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlTextFieldArgs']]):
        pulumi.set(self, "text_field", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlDateTimePickerArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict']]
elif False:
    TemplateDefinitionSheetParameterControlDateTimePickerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlDateTimePickerArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict(TypedDict):
        date_time_format: NotRequired[pulumi.Input[str]]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlDropdownArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        cascading_control_configuration: NotRequired[pulumi.Input['CascadingControlConfigurationArgsDict']]
        display_options: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict']]
        selectable_values: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownSelectableValuesArgsDict']]
        type: NotRequired[pulumi.Input[str]]
elif False:
    TemplateDefinitionSheetParameterControlDropdownArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlDropdownArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['CascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['CascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['CascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlDropdownSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict(TypedDict):
        select_all_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    TemplateDefinitionSheetParameterControlDropdownDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlDropdownDisplayOptionsArgs:
    def __init__(__self__, *,
                 select_all_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlDropdownSelectableValuesArgsDict(TypedDict):
        link_to_data_set_column: NotRequired[pulumi.Input['ColumnArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    TemplateDefinitionSheetParameterControlDropdownSelectableValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlDropdownSelectableValuesArgs:
    def __init__(__self__, *,
                 link_to_data_set_column: Optional[pulumi.Input['ColumnArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional[pulumi.Input['ColumnArgs']]:
        return pulumi.get(self, "link_to_data_set_column")

    @link_to_data_set_column.setter
    def link_to_data_set_column(self, value: Optional[pulumi.Input['ColumnArgs']]):
        pulumi.set(self, "link_to_data_set_column", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlListArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        cascading_control_configuration: NotRequired[pulumi.Input['CascadingControlConfigurationArgsDict']]
        display_options: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlListDisplayOptionsArgsDict']]
        selectable_values: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlListSelectableValuesArgsDict']]
        type: NotRequired[pulumi.Input[str]]
elif False:
    TemplateDefinitionSheetParameterControlListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlListArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['CascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlListDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlListSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['CascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['CascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlListDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlListDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlListSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlListSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlListDisplayOptionsArgsDict(TypedDict):
        search_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        select_all_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    TemplateDefinitionSheetParameterControlListDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlListDisplayOptionsArgs:
    def __init__(__self__, *,
                 search_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 select_all_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if search_options is not None:
            pulumi.set(__self__, "search_options", search_options)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "search_options")

    @search_options.setter
    def search_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "search_options", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlListSelectableValuesArgsDict(TypedDict):
        link_to_data_set_column: NotRequired[pulumi.Input['ColumnArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    TemplateDefinitionSheetParameterControlListSelectableValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlListSelectableValuesArgs:
    def __init__(__self__, *,
                 link_to_data_set_column: Optional[pulumi.Input['ColumnArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional[pulumi.Input['ColumnArgs']]:
        return pulumi.get(self, "link_to_data_set_column")

    @link_to_data_set_column.setter
    def link_to_data_set_column(self, value: Optional[pulumi.Input['ColumnArgs']]):
        pulumi.set(self, "link_to_data_set_column", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlSliderArgsDict(TypedDict):
        maximum_value: pulumi.Input[float]
        minimum_value: pulumi.Input[float]
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        step_size: pulumi.Input[float]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['TemplateDefinitionSheetParameterControlSliderDisplayOptionsArgsDict']]
elif False:
    TemplateDefinitionSheetParameterControlSliderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlSliderArgs:
    def __init__(__self__, *,
                 maximum_value: pulumi.Input[float],
                 minimum_value: pulumi.Input[float],
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 step_size: pulumi.Input[float],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlSliderDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "maximum_value", maximum_value)
        pulumi.set(__self__, "minimum_value", minimum_value)
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "step_size", step_size)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "maximum_value")

    @maximum_value.setter
    def maximum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_value", value)

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum_value")

    @minimum_value.setter
    def minimum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_value", value)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "step_size", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateDefinitionSheetParameterControlSliderDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateDefinitionSheetParameterControlSliderDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlSliderDisplayOptionsArgsDict(TypedDict):
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    TemplateDefinitionSheetParameterControlSliderDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlSliderDisplayOptionsArgs:
    def __init__(__self__, *,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlTextAreaArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        delimiter: NotRequired[pulumi.Input[str]]
        display_options: NotRequired[pulumi.Input['TextAreaControlDisplayOptionsArgsDict']]
elif False:
    TemplateDefinitionSheetParameterControlTextAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlTextAreaArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 display_options: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class TemplateDefinitionSheetParameterControlTextFieldArgsDict(TypedDict):
        parameter_control_id: pulumi.Input[str]
        source_parameter_name: pulumi.Input[str]
        title: pulumi.Input[str]
        display_options: NotRequired[pulumi.Input['TextAreaControlDisplayOptionsArgsDict']]
elif False:
    TemplateDefinitionSheetParameterControlTextFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetParameterControlTextFieldArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


if not MYPY:
    class TemplateDefinitionSheetSheetControlLayoutsArgsDict(TypedDict):
        configuration: pulumi.Input['TemplateDefinitionSheetSheetControlLayoutsConfigurationArgsDict']
elif False:
    TemplateDefinitionSheetSheetControlLayoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetSheetControlLayoutsArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['TemplateDefinitionSheetSheetControlLayoutsConfigurationArgs']):
        pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['TemplateDefinitionSheetSheetControlLayoutsConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['TemplateDefinitionSheetSheetControlLayoutsConfigurationArgs']):
        pulumi.set(self, "configuration", value)


if not MYPY:
    class TemplateDefinitionSheetSheetControlLayoutsConfigurationArgsDict(TypedDict):
        grid_layout: NotRequired[pulumi.Input['GridLayoutArgsDict']]
elif False:
    TemplateDefinitionSheetSheetControlLayoutsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetSheetControlLayoutsConfigurationArgs:
    def __init__(__self__, *,
                 grid_layout: Optional[pulumi.Input['GridLayoutArgs']] = None):
        if grid_layout is not None:
            pulumi.set(__self__, "grid_layout", grid_layout)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional[pulumi.Input['GridLayoutArgs']]:
        return pulumi.get(self, "grid_layout")

    @grid_layout.setter
    def grid_layout(self, value: Optional[pulumi.Input['GridLayoutArgs']]):
        pulumi.set(self, "grid_layout", value)


if not MYPY:
    class TemplateDefinitionSheetTextBoxArgsDict(TypedDict):
        sheet_text_box_id: pulumi.Input[str]
        content: NotRequired[pulumi.Input[str]]
elif False:
    TemplateDefinitionSheetTextBoxArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateDefinitionSheetTextBoxArgs:
    def __init__(__self__, *,
                 sheet_text_box_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sheet_text_box_id", sheet_text_box_id)
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter(name="sheetTextBoxId")
    def sheet_text_box_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_text_box_id")

    @sheet_text_box_id.setter
    def sheet_text_box_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_text_box_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)


if not MYPY:
    class TemplatePermissionArgsDict(TypedDict):
        actions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        principal: pulumi.Input[str]
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
elif False:
    TemplatePermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplatePermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: List of IAM actions to grant or revoke permissions on.
        :param pulumi.Input[str] principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)


if not MYPY:
    class TemplateSourceEntityArgsDict(TypedDict):
        source_analysis: NotRequired[pulumi.Input['TemplateSourceEntitySourceAnalysisArgsDict']]
        """
        The source analysis, if it is based on an analysis.. Only one of `source_analysis` or `source_template` should be configured. See source_analysis.
        """
        source_template: NotRequired[pulumi.Input['TemplateSourceEntitySourceTemplateArgsDict']]
        """
        The source template, if it is based on an template.. Only one of `source_analysis` or `source_template` should be configured. See source_template.
        """
elif False:
    TemplateSourceEntityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateSourceEntityArgs:
    def __init__(__self__, *,
                 source_analysis: Optional[pulumi.Input['TemplateSourceEntitySourceAnalysisArgs']] = None,
                 source_template: Optional[pulumi.Input['TemplateSourceEntitySourceTemplateArgs']] = None):
        """
        :param pulumi.Input['TemplateSourceEntitySourceAnalysisArgs'] source_analysis: The source analysis, if it is based on an analysis.. Only one of `source_analysis` or `source_template` should be configured. See source_analysis.
        :param pulumi.Input['TemplateSourceEntitySourceTemplateArgs'] source_template: The source template, if it is based on an template.. Only one of `source_analysis` or `source_template` should be configured. See source_template.
        """
        if source_analysis is not None:
            pulumi.set(__self__, "source_analysis", source_analysis)
        if source_template is not None:
            pulumi.set(__self__, "source_template", source_template)

    @property
    @pulumi.getter(name="sourceAnalysis")
    def source_analysis(self) -> Optional[pulumi.Input['TemplateSourceEntitySourceAnalysisArgs']]:
        """
        The source analysis, if it is based on an analysis.. Only one of `source_analysis` or `source_template` should be configured. See source_analysis.
        """
        return pulumi.get(self, "source_analysis")

    @source_analysis.setter
    def source_analysis(self, value: Optional[pulumi.Input['TemplateSourceEntitySourceAnalysisArgs']]):
        pulumi.set(self, "source_analysis", value)

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional[pulumi.Input['TemplateSourceEntitySourceTemplateArgs']]:
        """
        The source template, if it is based on an template.. Only one of `source_analysis` or `source_template` should be configured. See source_template.
        """
        return pulumi.get(self, "source_template")

    @source_template.setter
    def source_template(self, value: Optional[pulumi.Input['TemplateSourceEntitySourceTemplateArgs']]):
        pulumi.set(self, "source_template", value)


if not MYPY:
    class TemplateSourceEntitySourceAnalysisArgsDict(TypedDict):
        arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        data_set_references: pulumi.Input[Sequence[pulumi.Input['TemplateSourceEntitySourceAnalysisDataSetReferenceArgsDict']]]
        """
        A list of dataset references used as placeholders in the template. See data_set_references.
        """
elif False:
    TemplateSourceEntitySourceAnalysisArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateSourceEntitySourceAnalysisArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 data_set_references: pulumi.Input[Sequence[pulumi.Input['TemplateSourceEntitySourceAnalysisDataSetReferenceArgs']]]):
        """
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the resource.
        :param pulumi.Input[Sequence[pulumi.Input['TemplateSourceEntitySourceAnalysisDataSetReferenceArgs']]] data_set_references: A list of dataset references used as placeholders in the template. See data_set_references.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "data_set_references", data_set_references)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="dataSetReferences")
    def data_set_references(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateSourceEntitySourceAnalysisDataSetReferenceArgs']]]:
        """
        A list of dataset references used as placeholders in the template. See data_set_references.
        """
        return pulumi.get(self, "data_set_references")

    @data_set_references.setter
    def data_set_references(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateSourceEntitySourceAnalysisDataSetReferenceArgs']]]):
        pulumi.set(self, "data_set_references", value)


if not MYPY:
    class TemplateSourceEntitySourceAnalysisDataSetReferenceArgsDict(TypedDict):
        data_set_arn: pulumi.Input[str]
        """
        Dataset Amazon Resource Name (ARN).
        """
        data_set_placeholder: pulumi.Input[str]
        """
        Dataset placeholder.
        """
elif False:
    TemplateSourceEntitySourceAnalysisDataSetReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateSourceEntitySourceAnalysisDataSetReferenceArgs:
    def __init__(__self__, *,
                 data_set_arn: pulumi.Input[str],
                 data_set_placeholder: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data_set_arn: Dataset Amazon Resource Name (ARN).
        :param pulumi.Input[str] data_set_placeholder: Dataset placeholder.
        """
        pulumi.set(__self__, "data_set_arn", data_set_arn)
        pulumi.set(__self__, "data_set_placeholder", data_set_placeholder)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> pulumi.Input[str]:
        """
        Dataset Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter(name="dataSetPlaceholder")
    def data_set_placeholder(self) -> pulumi.Input[str]:
        """
        Dataset placeholder.
        """
        return pulumi.get(self, "data_set_placeholder")

    @data_set_placeholder.setter
    def data_set_placeholder(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_placeholder", value)


if not MYPY:
    class TemplateSourceEntitySourceTemplateArgsDict(TypedDict):
        arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the resource.
        """
elif False:
    TemplateSourceEntitySourceTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateSourceEntitySourceTemplateArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) of the resource.
        """
        pulumi.set(__self__, "arn", arn)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)


if not MYPY:
    class TextAreaControlDisplayOptionsArgsDict(TypedDict):
        placeholder_options: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        title_options: NotRequired[pulumi.Input['LabelOptionsArgsDict']]
elif False:
    TextAreaControlDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TextAreaControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 placeholder_options: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['LabelOptionsArgs']] = None):
        if placeholder_options is not None:
            pulumi.set(__self__, "placeholder_options", placeholder_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="placeholderOptions")
    def placeholder_options(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "placeholder_options")

    @placeholder_options.setter
    def placeholder_options(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "placeholder_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['LabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['LabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


if not MYPY:
    class ThemeConfigurationArgsDict(TypedDict):
        data_color_palette: NotRequired[pulumi.Input['ThemeConfigurationDataColorPaletteArgsDict']]
        """
        Color properties that apply to chart data colors. See data_color_palette.
        """
        sheet: NotRequired[pulumi.Input['ThemeConfigurationSheetArgsDict']]
        """
        Display options related to sheets. See sheet.
        """
        typography: NotRequired[pulumi.Input['ThemeConfigurationTypographyArgsDict']]
        """
        Determines the typography options. See typography.
        """
        ui_color_palette: NotRequired[pulumi.Input['ThemeConfigurationUiColorPaletteArgsDict']]
        """
        Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
        """
elif False:
    ThemeConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationArgs:
    def __init__(__self__, *,
                 data_color_palette: Optional[pulumi.Input['ThemeConfigurationDataColorPaletteArgs']] = None,
                 sheet: Optional[pulumi.Input['ThemeConfigurationSheetArgs']] = None,
                 typography: Optional[pulumi.Input['ThemeConfigurationTypographyArgs']] = None,
                 ui_color_palette: Optional[pulumi.Input['ThemeConfigurationUiColorPaletteArgs']] = None):
        """
        :param pulumi.Input['ThemeConfigurationDataColorPaletteArgs'] data_color_palette: Color properties that apply to chart data colors. See data_color_palette.
        :param pulumi.Input['ThemeConfigurationSheetArgs'] sheet: Display options related to sheets. See sheet.
        :param pulumi.Input['ThemeConfigurationTypographyArgs'] typography: Determines the typography options. See typography.
        :param pulumi.Input['ThemeConfigurationUiColorPaletteArgs'] ui_color_palette: Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
        """
        if data_color_palette is not None:
            pulumi.set(__self__, "data_color_palette", data_color_palette)
        if sheet is not None:
            pulumi.set(__self__, "sheet", sheet)
        if typography is not None:
            pulumi.set(__self__, "typography", typography)
        if ui_color_palette is not None:
            pulumi.set(__self__, "ui_color_palette", ui_color_palette)

    @property
    @pulumi.getter(name="dataColorPalette")
    def data_color_palette(self) -> Optional[pulumi.Input['ThemeConfigurationDataColorPaletteArgs']]:
        """
        Color properties that apply to chart data colors. See data_color_palette.
        """
        return pulumi.get(self, "data_color_palette")

    @data_color_palette.setter
    def data_color_palette(self, value: Optional[pulumi.Input['ThemeConfigurationDataColorPaletteArgs']]):
        pulumi.set(self, "data_color_palette", value)

    @property
    @pulumi.getter
    def sheet(self) -> Optional[pulumi.Input['ThemeConfigurationSheetArgs']]:
        """
        Display options related to sheets. See sheet.
        """
        return pulumi.get(self, "sheet")

    @sheet.setter
    def sheet(self, value: Optional[pulumi.Input['ThemeConfigurationSheetArgs']]):
        pulumi.set(self, "sheet", value)

    @property
    @pulumi.getter
    def typography(self) -> Optional[pulumi.Input['ThemeConfigurationTypographyArgs']]:
        """
        Determines the typography options. See typography.
        """
        return pulumi.get(self, "typography")

    @typography.setter
    def typography(self, value: Optional[pulumi.Input['ThemeConfigurationTypographyArgs']]):
        pulumi.set(self, "typography", value)

    @property
    @pulumi.getter(name="uiColorPalette")
    def ui_color_palette(self) -> Optional[pulumi.Input['ThemeConfigurationUiColorPaletteArgs']]:
        """
        Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
        """
        return pulumi.get(self, "ui_color_palette")

    @ui_color_palette.setter
    def ui_color_palette(self, value: Optional[pulumi.Input['ThemeConfigurationUiColorPaletteArgs']]):
        pulumi.set(self, "ui_color_palette", value)


if not MYPY:
    class ThemeConfigurationDataColorPaletteArgsDict(TypedDict):
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
        """
        empty_fill_color: NotRequired[pulumi.Input[str]]
        """
        The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
        """
        min_max_gradients: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
        """
elif False:
    ThemeConfigurationDataColorPaletteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationDataColorPaletteArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 empty_fill_color: Optional[pulumi.Input[str]] = None,
                 min_max_gradients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] colors: List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
        :param pulumi.Input[str] empty_fill_color: The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] min_max_gradients: The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
        """
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if empty_fill_color is not None:
            pulumi.set(__self__, "empty_fill_color", empty_fill_color)
        if min_max_gradients is not None:
            pulumi.set(__self__, "min_max_gradients", min_max_gradients)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="emptyFillColor")
    def empty_fill_color(self) -> Optional[pulumi.Input[str]]:
        """
        The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
        """
        return pulumi.get(self, "empty_fill_color")

    @empty_fill_color.setter
    def empty_fill_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "empty_fill_color", value)

    @property
    @pulumi.getter(name="minMaxGradients")
    def min_max_gradients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
        """
        return pulumi.get(self, "min_max_gradients")

    @min_max_gradients.setter
    def min_max_gradients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "min_max_gradients", value)


if not MYPY:
    class ThemeConfigurationSheetArgsDict(TypedDict):
        tile: NotRequired[pulumi.Input['ThemeConfigurationSheetTileArgsDict']]
        """
        The display options for tiles. See tile.
        """
        tile_layout: NotRequired[pulumi.Input['ThemeConfigurationSheetTileLayoutArgsDict']]
        """
        The layout options for tiles. See tile_layout.
        """
elif False:
    ThemeConfigurationSheetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationSheetArgs:
    def __init__(__self__, *,
                 tile: Optional[pulumi.Input['ThemeConfigurationSheetTileArgs']] = None,
                 tile_layout: Optional[pulumi.Input['ThemeConfigurationSheetTileLayoutArgs']] = None):
        """
        :param pulumi.Input['ThemeConfigurationSheetTileArgs'] tile: The display options for tiles. See tile.
        :param pulumi.Input['ThemeConfigurationSheetTileLayoutArgs'] tile_layout: The layout options for tiles. See tile_layout.
        """
        if tile is not None:
            pulumi.set(__self__, "tile", tile)
        if tile_layout is not None:
            pulumi.set(__self__, "tile_layout", tile_layout)

    @property
    @pulumi.getter
    def tile(self) -> Optional[pulumi.Input['ThemeConfigurationSheetTileArgs']]:
        """
        The display options for tiles. See tile.
        """
        return pulumi.get(self, "tile")

    @tile.setter
    def tile(self, value: Optional[pulumi.Input['ThemeConfigurationSheetTileArgs']]):
        pulumi.set(self, "tile", value)

    @property
    @pulumi.getter(name="tileLayout")
    def tile_layout(self) -> Optional[pulumi.Input['ThemeConfigurationSheetTileLayoutArgs']]:
        """
        The layout options for tiles. See tile_layout.
        """
        return pulumi.get(self, "tile_layout")

    @tile_layout.setter
    def tile_layout(self, value: Optional[pulumi.Input['ThemeConfigurationSheetTileLayoutArgs']]):
        pulumi.set(self, "tile_layout", value)


if not MYPY:
    class ThemeConfigurationSheetTileArgsDict(TypedDict):
        border: NotRequired[pulumi.Input['ThemeConfigurationSheetTileBorderArgsDict']]
        """
        The border around a tile. See border.
        """
elif False:
    ThemeConfigurationSheetTileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationSheetTileArgs:
    def __init__(__self__, *,
                 border: Optional[pulumi.Input['ThemeConfigurationSheetTileBorderArgs']] = None):
        """
        :param pulumi.Input['ThemeConfigurationSheetTileBorderArgs'] border: The border around a tile. See border.
        """
        if border is not None:
            pulumi.set(__self__, "border", border)

    @property
    @pulumi.getter
    def border(self) -> Optional[pulumi.Input['ThemeConfigurationSheetTileBorderArgs']]:
        """
        The border around a tile. See border.
        """
        return pulumi.get(self, "border")

    @border.setter
    def border(self, value: Optional[pulumi.Input['ThemeConfigurationSheetTileBorderArgs']]):
        pulumi.set(self, "border", value)


if not MYPY:
    class ThemeConfigurationSheetTileBorderArgsDict(TypedDict):
        show: NotRequired[pulumi.Input[bool]]
        """
        The option to enable display of borders for visuals.
        """
elif False:
    ThemeConfigurationSheetTileBorderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationSheetTileBorderArgs:
    def __init__(__self__, *,
                 show: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] show: The option to enable display of borders for visuals.
        """
        if show is not None:
            pulumi.set(__self__, "show", show)

    @property
    @pulumi.getter
    def show(self) -> Optional[pulumi.Input[bool]]:
        """
        The option to enable display of borders for visuals.
        """
        return pulumi.get(self, "show")

    @show.setter
    def show(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show", value)


if not MYPY:
    class ThemeConfigurationSheetTileLayoutArgsDict(TypedDict):
        gutter: NotRequired[pulumi.Input['ThemeConfigurationSheetTileLayoutGutterArgsDict']]
        """
        The gutter settings that apply between tiles. See gutter.
        """
        margin: NotRequired[pulumi.Input['ThemeConfigurationSheetTileLayoutMarginArgsDict']]
        """
        The margin settings that apply around the outside edge of sheets. See margin.
        """
elif False:
    ThemeConfigurationSheetTileLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationSheetTileLayoutArgs:
    def __init__(__self__, *,
                 gutter: Optional[pulumi.Input['ThemeConfigurationSheetTileLayoutGutterArgs']] = None,
                 margin: Optional[pulumi.Input['ThemeConfigurationSheetTileLayoutMarginArgs']] = None):
        """
        :param pulumi.Input['ThemeConfigurationSheetTileLayoutGutterArgs'] gutter: The gutter settings that apply between tiles. See gutter.
        :param pulumi.Input['ThemeConfigurationSheetTileLayoutMarginArgs'] margin: The margin settings that apply around the outside edge of sheets. See margin.
        """
        if gutter is not None:
            pulumi.set(__self__, "gutter", gutter)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)

    @property
    @pulumi.getter
    def gutter(self) -> Optional[pulumi.Input['ThemeConfigurationSheetTileLayoutGutterArgs']]:
        """
        The gutter settings that apply between tiles. See gutter.
        """
        return pulumi.get(self, "gutter")

    @gutter.setter
    def gutter(self, value: Optional[pulumi.Input['ThemeConfigurationSheetTileLayoutGutterArgs']]):
        pulumi.set(self, "gutter", value)

    @property
    @pulumi.getter
    def margin(self) -> Optional[pulumi.Input['ThemeConfigurationSheetTileLayoutMarginArgs']]:
        """
        The margin settings that apply around the outside edge of sheets. See margin.
        """
        return pulumi.get(self, "margin")

    @margin.setter
    def margin(self, value: Optional[pulumi.Input['ThemeConfigurationSheetTileLayoutMarginArgs']]):
        pulumi.set(self, "margin", value)


if not MYPY:
    class ThemeConfigurationSheetTileLayoutGutterArgsDict(TypedDict):
        show: NotRequired[pulumi.Input[bool]]
        """
        This Boolean value controls whether to display a gutter space between sheet tiles.
        """
elif False:
    ThemeConfigurationSheetTileLayoutGutterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationSheetTileLayoutGutterArgs:
    def __init__(__self__, *,
                 show: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] show: This Boolean value controls whether to display a gutter space between sheet tiles.
        """
        if show is not None:
            pulumi.set(__self__, "show", show)

    @property
    @pulumi.getter
    def show(self) -> Optional[pulumi.Input[bool]]:
        """
        This Boolean value controls whether to display a gutter space between sheet tiles.
        """
        return pulumi.get(self, "show")

    @show.setter
    def show(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show", value)


if not MYPY:
    class ThemeConfigurationSheetTileLayoutMarginArgsDict(TypedDict):
        show: NotRequired[pulumi.Input[bool]]
        """
        This Boolean value controls whether to display sheet margins.
        """
elif False:
    ThemeConfigurationSheetTileLayoutMarginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationSheetTileLayoutMarginArgs:
    def __init__(__self__, *,
                 show: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] show: This Boolean value controls whether to display sheet margins.
        """
        if show is not None:
            pulumi.set(__self__, "show", show)

    @property
    @pulumi.getter
    def show(self) -> Optional[pulumi.Input[bool]]:
        """
        This Boolean value controls whether to display sheet margins.
        """
        return pulumi.get(self, "show")

    @show.setter
    def show(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show", value)


if not MYPY:
    class ThemeConfigurationTypographyArgsDict(TypedDict):
        font_families: NotRequired[pulumi.Input[Sequence[pulumi.Input['ThemeConfigurationTypographyFontFamilyArgsDict']]]]
        """
        Determines the list of font families. Maximum number of 5 items. See font_families.
        """
elif False:
    ThemeConfigurationTypographyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationTypographyArgs:
    def __init__(__self__, *,
                 font_families: Optional[pulumi.Input[Sequence[pulumi.Input['ThemeConfigurationTypographyFontFamilyArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ThemeConfigurationTypographyFontFamilyArgs']]] font_families: Determines the list of font families. Maximum number of 5 items. See font_families.
        """
        if font_families is not None:
            pulumi.set(__self__, "font_families", font_families)

    @property
    @pulumi.getter(name="fontFamilies")
    def font_families(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ThemeConfigurationTypographyFontFamilyArgs']]]]:
        """
        Determines the list of font families. Maximum number of 5 items. See font_families.
        """
        return pulumi.get(self, "font_families")

    @font_families.setter
    def font_families(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ThemeConfigurationTypographyFontFamilyArgs']]]]):
        pulumi.set(self, "font_families", value)


if not MYPY:
    class ThemeConfigurationTypographyFontFamilyArgsDict(TypedDict):
        font_family: NotRequired[pulumi.Input[str]]
        """
        Font family name.
        """
elif False:
    ThemeConfigurationTypographyFontFamilyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationTypographyFontFamilyArgs:
    def __init__(__self__, *,
                 font_family: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] font_family: Font family name.
        """
        if font_family is not None:
            pulumi.set(__self__, "font_family", font_family)

    @property
    @pulumi.getter(name="fontFamily")
    def font_family(self) -> Optional[pulumi.Input[str]]:
        """
        Font family name.
        """
        return pulumi.get(self, "font_family")

    @font_family.setter
    def font_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_family", value)


if not MYPY:
    class ThemeConfigurationUiColorPaletteArgsDict(TypedDict):
        accent: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to selected states and buttons.
        """
        accent_foreground: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
        """
        danger: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to error messages.
        """
        danger_foreground: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the error color.
        """
        dimension: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
        """
        dimension_foreground: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
        """
        measure: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to the names of fields that are identified as measures.
        """
        measure_foreground: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
        """
        primary_background: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to visuals and other high emphasis UI.
        """
        primary_foreground: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
        """
        secondary_background: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to the sheet background and sheet controls.
        """
        secondary_foreground: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
        """
        success: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
        """
        success_foreground: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the success color.
        """
        warning: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to warning and informational messages.
        """
        warning_foreground: NotRequired[pulumi.Input[str]]
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
        """
elif False:
    ThemeConfigurationUiColorPaletteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemeConfigurationUiColorPaletteArgs:
    def __init__(__self__, *,
                 accent: Optional[pulumi.Input[str]] = None,
                 accent_foreground: Optional[pulumi.Input[str]] = None,
                 danger: Optional[pulumi.Input[str]] = None,
                 danger_foreground: Optional[pulumi.Input[str]] = None,
                 dimension: Optional[pulumi.Input[str]] = None,
                 dimension_foreground: Optional[pulumi.Input[str]] = None,
                 measure: Optional[pulumi.Input[str]] = None,
                 measure_foreground: Optional[pulumi.Input[str]] = None,
                 primary_background: Optional[pulumi.Input[str]] = None,
                 primary_foreground: Optional[pulumi.Input[str]] = None,
                 secondary_background: Optional[pulumi.Input[str]] = None,
                 secondary_foreground: Optional[pulumi.Input[str]] = None,
                 success: Optional[pulumi.Input[str]] = None,
                 success_foreground: Optional[pulumi.Input[str]] = None,
                 warning: Optional[pulumi.Input[str]] = None,
                 warning_foreground: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] accent: Color (hexadecimal) that applies to selected states and buttons.
        :param pulumi.Input[str] accent_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
        :param pulumi.Input[str] danger: Color (hexadecimal) that applies to error messages.
        :param pulumi.Input[str] danger_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the error color.
        :param pulumi.Input[str] dimension: Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
        :param pulumi.Input[str] dimension_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
        :param pulumi.Input[str] measure: Color (hexadecimal) that applies to the names of fields that are identified as measures.
        :param pulumi.Input[str] measure_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
        :param pulumi.Input[str] primary_background: Color (hexadecimal) that applies to visuals and other high emphasis UI.
        :param pulumi.Input[str] primary_foreground: Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
        :param pulumi.Input[str] secondary_background: Color (hexadecimal) that applies to the sheet background and sheet controls.
        :param pulumi.Input[str] secondary_foreground: Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
        :param pulumi.Input[str] success: Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
        :param pulumi.Input[str] success_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the success color.
        :param pulumi.Input[str] warning: Color (hexadecimal) that applies to warning and informational messages.
        :param pulumi.Input[str] warning_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
        """
        if accent is not None:
            pulumi.set(__self__, "accent", accent)
        if accent_foreground is not None:
            pulumi.set(__self__, "accent_foreground", accent_foreground)
        if danger is not None:
            pulumi.set(__self__, "danger", danger)
        if danger_foreground is not None:
            pulumi.set(__self__, "danger_foreground", danger_foreground)
        if dimension is not None:
            pulumi.set(__self__, "dimension", dimension)
        if dimension_foreground is not None:
            pulumi.set(__self__, "dimension_foreground", dimension_foreground)
        if measure is not None:
            pulumi.set(__self__, "measure", measure)
        if measure_foreground is not None:
            pulumi.set(__self__, "measure_foreground", measure_foreground)
        if primary_background is not None:
            pulumi.set(__self__, "primary_background", primary_background)
        if primary_foreground is not None:
            pulumi.set(__self__, "primary_foreground", primary_foreground)
        if secondary_background is not None:
            pulumi.set(__self__, "secondary_background", secondary_background)
        if secondary_foreground is not None:
            pulumi.set(__self__, "secondary_foreground", secondary_foreground)
        if success is not None:
            pulumi.set(__self__, "success", success)
        if success_foreground is not None:
            pulumi.set(__self__, "success_foreground", success_foreground)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if warning_foreground is not None:
            pulumi.set(__self__, "warning_foreground", warning_foreground)

    @property
    @pulumi.getter
    def accent(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to selected states and buttons.
        """
        return pulumi.get(self, "accent")

    @accent.setter
    def accent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accent", value)

    @property
    @pulumi.getter(name="accentForeground")
    def accent_foreground(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
        """
        return pulumi.get(self, "accent_foreground")

    @accent_foreground.setter
    def accent_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accent_foreground", value)

    @property
    @pulumi.getter
    def danger(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to error messages.
        """
        return pulumi.get(self, "danger")

    @danger.setter
    def danger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "danger", value)

    @property
    @pulumi.getter(name="dangerForeground")
    def danger_foreground(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the error color.
        """
        return pulumi.get(self, "danger_foreground")

    @danger_foreground.setter
    def danger_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "danger_foreground", value)

    @property
    @pulumi.getter
    def dimension(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
        """
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter(name="dimensionForeground")
    def dimension_foreground(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
        """
        return pulumi.get(self, "dimension_foreground")

    @dimension_foreground.setter
    def dimension_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dimension_foreground", value)

    @property
    @pulumi.getter
    def measure(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to the names of fields that are identified as measures.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="measureForeground")
    def measure_foreground(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
        """
        return pulumi.get(self, "measure_foreground")

    @measure_foreground.setter
    def measure_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "measure_foreground", value)

    @property
    @pulumi.getter(name="primaryBackground")
    def primary_background(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to visuals and other high emphasis UI.
        """
        return pulumi.get(self, "primary_background")

    @primary_background.setter
    def primary_background(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_background", value)

    @property
    @pulumi.getter(name="primaryForeground")
    def primary_foreground(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
        """
        return pulumi.get(self, "primary_foreground")

    @primary_foreground.setter
    def primary_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_foreground", value)

    @property
    @pulumi.getter(name="secondaryBackground")
    def secondary_background(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to the sheet background and sheet controls.
        """
        return pulumi.get(self, "secondary_background")

    @secondary_background.setter
    def secondary_background(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_background", value)

    @property
    @pulumi.getter(name="secondaryForeground")
    def secondary_foreground(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
        """
        return pulumi.get(self, "secondary_foreground")

    @secondary_foreground.setter
    def secondary_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_foreground", value)

    @property
    @pulumi.getter
    def success(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
        """
        return pulumi.get(self, "success")

    @success.setter
    def success(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success", value)

    @property
    @pulumi.getter(name="successForeground")
    def success_foreground(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the success color.
        """
        return pulumi.get(self, "success_foreground")

    @success_foreground.setter
    def success_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_foreground", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to warning and informational messages.
        """
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning", value)

    @property
    @pulumi.getter(name="warningForeground")
    def warning_foreground(self) -> Optional[pulumi.Input[str]]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
        """
        return pulumi.get(self, "warning_foreground")

    @warning_foreground.setter
    def warning_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_foreground", value)


if not MYPY:
    class ThemePermissionArgsDict(TypedDict):
        actions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        principal: pulumi.Input[str]
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
elif False:
    ThemePermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ThemePermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: List of IAM actions to grant or revoke permissions on.
        :param pulumi.Input[str] principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)


if not MYPY:
    class TimeRangeFilterArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        range_maximum: pulumi.Input[str]
        range_minimum: pulumi.Input[str]
        time_granularity: pulumi.Input[str]
elif False:
    TimeRangeFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TimeRangeFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 range_maximum: pulumi.Input[str],
                 range_minimum: pulumi.Input[str],
                 time_granularity: pulumi.Input[str]):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "range_maximum", range_maximum)
        pulumi.set(__self__, "range_minimum", range_minimum)
        pulumi.set(__self__, "time_granularity", time_granularity)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="rangeMaximum")
    def range_maximum(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_maximum")

    @range_maximum.setter
    def range_maximum(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_maximum", value)

    @property
    @pulumi.getter(name="rangeMinimum")
    def range_minimum(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_minimum")

    @range_minimum.setter
    def range_minimum(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_minimum", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_granularity", value)


if not MYPY:
    class TooltipOptionsArgsDict(TypedDict):
        field_base_tooltip: NotRequired[pulumi.Input['TooltipOptionsFieldBaseTooltipArgsDict']]
        selected_tooltip_type: NotRequired[pulumi.Input[str]]
        tooltip_visibility: NotRequired[pulumi.Input[str]]
elif False:
    TooltipOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TooltipOptionsArgs:
    def __init__(__self__, *,
                 field_base_tooltip: Optional[pulumi.Input['TooltipOptionsFieldBaseTooltipArgs']] = None,
                 selected_tooltip_type: Optional[pulumi.Input[str]] = None,
                 tooltip_visibility: Optional[pulumi.Input[str]] = None):
        if field_base_tooltip is not None:
            pulumi.set(__self__, "field_base_tooltip", field_base_tooltip)
        if selected_tooltip_type is not None:
            pulumi.set(__self__, "selected_tooltip_type", selected_tooltip_type)
        if tooltip_visibility is not None:
            pulumi.set(__self__, "tooltip_visibility", tooltip_visibility)

    @property
    @pulumi.getter(name="fieldBaseTooltip")
    def field_base_tooltip(self) -> Optional[pulumi.Input['TooltipOptionsFieldBaseTooltipArgs']]:
        return pulumi.get(self, "field_base_tooltip")

    @field_base_tooltip.setter
    def field_base_tooltip(self, value: Optional[pulumi.Input['TooltipOptionsFieldBaseTooltipArgs']]):
        pulumi.set(self, "field_base_tooltip", value)

    @property
    @pulumi.getter(name="selectedTooltipType")
    def selected_tooltip_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selected_tooltip_type")

    @selected_tooltip_type.setter
    def selected_tooltip_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selected_tooltip_type", value)

    @property
    @pulumi.getter(name="tooltipVisibility")
    def tooltip_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tooltip_visibility")

    @tooltip_visibility.setter
    def tooltip_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tooltip_visibility", value)


if not MYPY:
    class TooltipOptionsFieldBaseTooltipArgsDict(TypedDict):
        aggregation_visibility: NotRequired[pulumi.Input[str]]
        tooltip_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldArgsDict']]]]
        tooltip_title_type: NotRequired[pulumi.Input[str]]
elif False:
    TooltipOptionsFieldBaseTooltipArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TooltipOptionsFieldBaseTooltipArgs:
    def __init__(__self__, *,
                 aggregation_visibility: Optional[pulumi.Input[str]] = None,
                 tooltip_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldArgs']]]] = None,
                 tooltip_title_type: Optional[pulumi.Input[str]] = None):
        if aggregation_visibility is not None:
            pulumi.set(__self__, "aggregation_visibility", aggregation_visibility)
        if tooltip_fields is not None:
            pulumi.set(__self__, "tooltip_fields", tooltip_fields)
        if tooltip_title_type is not None:
            pulumi.set(__self__, "tooltip_title_type", tooltip_title_type)

    @property
    @pulumi.getter(name="aggregationVisibility")
    def aggregation_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_visibility")

    @aggregation_visibility.setter
    def aggregation_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_visibility", value)

    @property
    @pulumi.getter(name="tooltipFields")
    def tooltip_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldArgs']]]]:
        return pulumi.get(self, "tooltip_fields")

    @tooltip_fields.setter
    def tooltip_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldArgs']]]]):
        pulumi.set(self, "tooltip_fields", value)

    @property
    @pulumi.getter(name="tooltipTitleType")
    def tooltip_title_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tooltip_title_type")

    @tooltip_title_type.setter
    def tooltip_title_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tooltip_title_type", value)


if not MYPY:
    class TooltipOptionsFieldBaseTooltipTooltipFieldArgsDict(TypedDict):
        column_tooltip_item: NotRequired[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItemArgsDict']]
        field_tooltip_item: NotRequired[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItemArgsDict']]
elif False:
    TooltipOptionsFieldBaseTooltipTooltipFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TooltipOptionsFieldBaseTooltipTooltipFieldArgs:
    def __init__(__self__, *,
                 column_tooltip_item: Optional[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItemArgs']] = None,
                 field_tooltip_item: Optional[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItemArgs']] = None):
        if column_tooltip_item is not None:
            pulumi.set(__self__, "column_tooltip_item", column_tooltip_item)
        if field_tooltip_item is not None:
            pulumi.set(__self__, "field_tooltip_item", field_tooltip_item)

    @property
    @pulumi.getter(name="columnTooltipItem")
    def column_tooltip_item(self) -> Optional[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItemArgs']]:
        return pulumi.get(self, "column_tooltip_item")

    @column_tooltip_item.setter
    def column_tooltip_item(self, value: Optional[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItemArgs']]):
        pulumi.set(self, "column_tooltip_item", value)

    @property
    @pulumi.getter(name="fieldTooltipItem")
    def field_tooltip_item(self) -> Optional[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItemArgs']]:
        return pulumi.get(self, "field_tooltip_item")

    @field_tooltip_item.setter
    def field_tooltip_item(self, value: Optional[pulumi.Input['TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItemArgs']]):
        pulumi.set(self, "field_tooltip_item", value)


if not MYPY:
    class TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItemArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        aggregation: NotRequired[pulumi.Input['AggregationFunctionArgsDict']]
        label: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItemArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 aggregation: Optional[pulumi.Input['AggregationFunctionArgs']] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input['AggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input['AggregationFunctionArgs']]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItemArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        label: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItemArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "field_id", field_id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class VisualCustomActionsArgsDict(TypedDict):
        action_operations: pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsActionOperationArgsDict']]]
        custom_action_id: pulumi.Input[str]
        name: pulumi.Input[str]
        """
        Display name for the dashboard.
        """
        status: pulumi.Input[str]
        """
        The dashboard creation status.
        """
        trigger: pulumi.Input[str]
elif False:
    VisualCustomActionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsArgs:
    def __init__(__self__, *,
                 action_operations: pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsActionOperationArgs']]],
                 custom_action_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 status: pulumi.Input[str],
                 trigger: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        :param pulumi.Input[str] status: The dashboard creation status.
        """
        pulumi.set(__self__, "action_operations", action_operations)
        pulumi.set(__self__, "custom_action_id", custom_action_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter(name="actionOperations")
    def action_operations(self) -> pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsActionOperationArgs']]]:
        return pulumi.get(self, "action_operations")

    @action_operations.setter
    def action_operations(self, value: pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsActionOperationArgs']]]):
        pulumi.set(self, "action_operations", value)

    @property
    @pulumi.getter(name="customActionId")
    def custom_action_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_action_id")

    @custom_action_id.setter
    def custom_action_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_action_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Input[str]:
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: pulumi.Input[str]):
        pulumi.set(self, "trigger", value)


if not MYPY:
    class VisualCustomActionsActionOperationArgsDict(TypedDict):
        filter_operation: NotRequired[pulumi.Input['VisualCustomActionsActionOperationFilterOperationArgsDict']]
        navigation_operation: NotRequired[pulumi.Input['VisualCustomActionsActionOperationNavigationOperationArgsDict']]
        set_parameters_operation: NotRequired[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationArgsDict']]
        url_operation: NotRequired[pulumi.Input['VisualCustomActionsActionOperationUrlOperationArgsDict']]
elif False:
    VisualCustomActionsActionOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationArgs:
    def __init__(__self__, *,
                 filter_operation: Optional[pulumi.Input['VisualCustomActionsActionOperationFilterOperationArgs']] = None,
                 navigation_operation: Optional[pulumi.Input['VisualCustomActionsActionOperationNavigationOperationArgs']] = None,
                 set_parameters_operation: Optional[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationArgs']] = None,
                 url_operation: Optional[pulumi.Input['VisualCustomActionsActionOperationUrlOperationArgs']] = None):
        if filter_operation is not None:
            pulumi.set(__self__, "filter_operation", filter_operation)
        if navigation_operation is not None:
            pulumi.set(__self__, "navigation_operation", navigation_operation)
        if set_parameters_operation is not None:
            pulumi.set(__self__, "set_parameters_operation", set_parameters_operation)
        if url_operation is not None:
            pulumi.set(__self__, "url_operation", url_operation)

    @property
    @pulumi.getter(name="filterOperation")
    def filter_operation(self) -> Optional[pulumi.Input['VisualCustomActionsActionOperationFilterOperationArgs']]:
        return pulumi.get(self, "filter_operation")

    @filter_operation.setter
    def filter_operation(self, value: Optional[pulumi.Input['VisualCustomActionsActionOperationFilterOperationArgs']]):
        pulumi.set(self, "filter_operation", value)

    @property
    @pulumi.getter(name="navigationOperation")
    def navigation_operation(self) -> Optional[pulumi.Input['VisualCustomActionsActionOperationNavigationOperationArgs']]:
        return pulumi.get(self, "navigation_operation")

    @navigation_operation.setter
    def navigation_operation(self, value: Optional[pulumi.Input['VisualCustomActionsActionOperationNavigationOperationArgs']]):
        pulumi.set(self, "navigation_operation", value)

    @property
    @pulumi.getter(name="setParametersOperation")
    def set_parameters_operation(self) -> Optional[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationArgs']]:
        return pulumi.get(self, "set_parameters_operation")

    @set_parameters_operation.setter
    def set_parameters_operation(self, value: Optional[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationArgs']]):
        pulumi.set(self, "set_parameters_operation", value)

    @property
    @pulumi.getter(name="urlOperation")
    def url_operation(self) -> Optional[pulumi.Input['VisualCustomActionsActionOperationUrlOperationArgs']]:
        return pulumi.get(self, "url_operation")

    @url_operation.setter
    def url_operation(self, value: Optional[pulumi.Input['VisualCustomActionsActionOperationUrlOperationArgs']]):
        pulumi.set(self, "url_operation", value)


if not MYPY:
    class VisualCustomActionsActionOperationFilterOperationArgsDict(TypedDict):
        selected_fields_configuration: pulumi.Input['VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfigurationArgsDict']
        target_visuals_configuration: pulumi.Input['VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationArgsDict']
elif False:
    VisualCustomActionsActionOperationFilterOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationFilterOperationArgs:
    def __init__(__self__, *,
                 selected_fields_configuration: pulumi.Input['VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfigurationArgs'],
                 target_visuals_configuration: pulumi.Input['VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationArgs']):
        pulumi.set(__self__, "selected_fields_configuration", selected_fields_configuration)
        pulumi.set(__self__, "target_visuals_configuration", target_visuals_configuration)

    @property
    @pulumi.getter(name="selectedFieldsConfiguration")
    def selected_fields_configuration(self) -> pulumi.Input['VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfigurationArgs']:
        return pulumi.get(self, "selected_fields_configuration")

    @selected_fields_configuration.setter
    def selected_fields_configuration(self, value: pulumi.Input['VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfigurationArgs']):
        pulumi.set(self, "selected_fields_configuration", value)

    @property
    @pulumi.getter(name="targetVisualsConfiguration")
    def target_visuals_configuration(self) -> pulumi.Input['VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationArgs']:
        return pulumi.get(self, "target_visuals_configuration")

    @target_visuals_configuration.setter
    def target_visuals_configuration(self, value: pulumi.Input['VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationArgs']):
        pulumi.set(self, "target_visuals_configuration", value)


if not MYPY:
    class VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfigurationArgsDict(TypedDict):
        selected_field_option: NotRequired[pulumi.Input[str]]
        selected_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfigurationArgs:
    def __init__(__self__, *,
                 selected_field_option: Optional[pulumi.Input[str]] = None,
                 selected_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if selected_field_option is not None:
            pulumi.set(__self__, "selected_field_option", selected_field_option)
        if selected_fields is not None:
            pulumi.set(__self__, "selected_fields", selected_fields)

    @property
    @pulumi.getter(name="selectedFieldOption")
    def selected_field_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selected_field_option")

    @selected_field_option.setter
    def selected_field_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selected_field_option", value)

    @property
    @pulumi.getter(name="selectedFields")
    def selected_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "selected_fields")

    @selected_fields.setter
    def selected_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selected_fields", value)


if not MYPY:
    class VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationArgsDict(TypedDict):
        same_sheet_target_visual_configuration: NotRequired[pulumi.Input['VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfigurationArgsDict']]
elif False:
    VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationArgs:
    def __init__(__self__, *,
                 same_sheet_target_visual_configuration: Optional[pulumi.Input['VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfigurationArgs']] = None):
        if same_sheet_target_visual_configuration is not None:
            pulumi.set(__self__, "same_sheet_target_visual_configuration", same_sheet_target_visual_configuration)

    @property
    @pulumi.getter(name="sameSheetTargetVisualConfiguration")
    def same_sheet_target_visual_configuration(self) -> Optional[pulumi.Input['VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfigurationArgs']]:
        return pulumi.get(self, "same_sheet_target_visual_configuration")

    @same_sheet_target_visual_configuration.setter
    def same_sheet_target_visual_configuration(self, value: Optional[pulumi.Input['VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfigurationArgs']]):
        pulumi.set(self, "same_sheet_target_visual_configuration", value)


if not MYPY:
    class VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfigurationArgsDict(TypedDict):
        target_visual_option: NotRequired[pulumi.Input[str]]
        target_visuals: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfigurationArgs:
    def __init__(__self__, *,
                 target_visual_option: Optional[pulumi.Input[str]] = None,
                 target_visuals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if target_visual_option is not None:
            pulumi.set(__self__, "target_visual_option", target_visual_option)
        if target_visuals is not None:
            pulumi.set(__self__, "target_visuals", target_visuals)

    @property
    @pulumi.getter(name="targetVisualOption")
    def target_visual_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_visual_option")

    @target_visual_option.setter
    def target_visual_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_visual_option", value)

    @property
    @pulumi.getter(name="targetVisuals")
    def target_visuals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "target_visuals")

    @target_visuals.setter
    def target_visuals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_visuals", value)


if not MYPY:
    class VisualCustomActionsActionOperationNavigationOperationArgsDict(TypedDict):
        local_navigation_configuration: NotRequired[pulumi.Input['VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfigurationArgsDict']]
elif False:
    VisualCustomActionsActionOperationNavigationOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationNavigationOperationArgs:
    def __init__(__self__, *,
                 local_navigation_configuration: Optional[pulumi.Input['VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfigurationArgs']] = None):
        if local_navigation_configuration is not None:
            pulumi.set(__self__, "local_navigation_configuration", local_navigation_configuration)

    @property
    @pulumi.getter(name="localNavigationConfiguration")
    def local_navigation_configuration(self) -> Optional[pulumi.Input['VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfigurationArgs']]:
        return pulumi.get(self, "local_navigation_configuration")

    @local_navigation_configuration.setter
    def local_navigation_configuration(self, value: Optional[pulumi.Input['VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfigurationArgs']]):
        pulumi.set(self, "local_navigation_configuration", value)


if not MYPY:
    class VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfigurationArgsDict(TypedDict):
        target_sheet_id: pulumi.Input[str]
elif False:
    VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfigurationArgs:
    def __init__(__self__, *,
                 target_sheet_id: pulumi.Input[str]):
        pulumi.set(__self__, "target_sheet_id", target_sheet_id)

    @property
    @pulumi.getter(name="targetSheetId")
    def target_sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_sheet_id")

    @target_sheet_id.setter
    def target_sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_sheet_id", value)


if not MYPY:
    class VisualCustomActionsActionOperationSetParametersOperationArgsDict(TypedDict):
        parameter_value_configurations: pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationArgsDict']]]
elif False:
    VisualCustomActionsActionOperationSetParametersOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationSetParametersOperationArgs:
    def __init__(__self__, *,
                 parameter_value_configurations: pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationArgs']]]):
        pulumi.set(__self__, "parameter_value_configurations", parameter_value_configurations)

    @property
    @pulumi.getter(name="parameterValueConfigurations")
    def parameter_value_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationArgs']]]:
        return pulumi.get(self, "parameter_value_configurations")

    @parameter_value_configurations.setter
    def parameter_value_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationArgs']]]):
        pulumi.set(self, "parameter_value_configurations", value)


if not MYPY:
    class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationArgsDict(TypedDict):
        destination_parameter_name: pulumi.Input[str]
        value: pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueArgsDict']
elif False:
    VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationArgs:
    def __init__(__self__, *,
                 destination_parameter_name: pulumi.Input[str],
                 value: pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueArgs']):
        pulumi.set(__self__, "destination_parameter_name", destination_parameter_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="destinationParameterName")
    def destination_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_parameter_name")

    @destination_parameter_name.setter
    def destination_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_parameter_name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueArgs']):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueArgsDict(TypedDict):
        custom_values_configuration: NotRequired[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationArgsDict']]
        select_all_value_options: NotRequired[pulumi.Input[str]]
        source_field: NotRequired[pulumi.Input[str]]
        source_parameter_name: NotRequired[pulumi.Input[str]]
elif False:
    VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueArgs:
    def __init__(__self__, *,
                 custom_values_configuration: Optional[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationArgs']] = None,
                 select_all_value_options: Optional[pulumi.Input[str]] = None,
                 source_field: Optional[pulumi.Input[str]] = None,
                 source_parameter_name: Optional[pulumi.Input[str]] = None):
        if custom_values_configuration is not None:
            pulumi.set(__self__, "custom_values_configuration", custom_values_configuration)
        if select_all_value_options is not None:
            pulumi.set(__self__, "select_all_value_options", select_all_value_options)
        if source_field is not None:
            pulumi.set(__self__, "source_field", source_field)
        if source_parameter_name is not None:
            pulumi.set(__self__, "source_parameter_name", source_parameter_name)

    @property
    @pulumi.getter(name="customValuesConfiguration")
    def custom_values_configuration(self) -> Optional[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationArgs']]:
        return pulumi.get(self, "custom_values_configuration")

    @custom_values_configuration.setter
    def custom_values_configuration(self, value: Optional[pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationArgs']]):
        pulumi.set(self, "custom_values_configuration", value)

    @property
    @pulumi.getter(name="selectAllValueOptions")
    def select_all_value_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "select_all_value_options")

    @select_all_value_options.setter
    def select_all_value_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "select_all_value_options", value)

    @property
    @pulumi.getter(name="sourceField")
    def source_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_field")

    @source_field.setter
    def source_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_field", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_parameter_name", value)


if not MYPY:
    class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationArgsDict(TypedDict):
        custom_values: pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValuesArgsDict']
        include_null_value: NotRequired[pulumi.Input[bool]]
elif False:
    VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationArgs:
    def __init__(__self__, *,
                 custom_values: pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValuesArgs'],
                 include_null_value: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "custom_values", custom_values)
        if include_null_value is not None:
            pulumi.set(__self__, "include_null_value", include_null_value)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValuesArgs']:
        return pulumi.get(self, "custom_values")

    @custom_values.setter
    def custom_values(self, value: pulumi.Input['VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValuesArgs']):
        pulumi.set(self, "custom_values", value)

    @property
    @pulumi.getter(name="includeNullValue")
    def include_null_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_null_value")

    @include_null_value.setter
    def include_null_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_null_value", value)


if not MYPY:
    class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValuesArgsDict(TypedDict):
        date_time_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        decimal_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[float]]]]
        integer_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        string_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValuesArgs:
    def __init__(__self__, *,
                 date_time_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 decimal_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 integer_values: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 string_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if date_time_values is not None:
            pulumi.set(__self__, "date_time_values", date_time_values)
        if decimal_values is not None:
            pulumi.set(__self__, "decimal_values", decimal_values)
        if integer_values is not None:
            pulumi.set(__self__, "integer_values", integer_values)
        if string_values is not None:
            pulumi.set(__self__, "string_values", string_values)

    @property
    @pulumi.getter(name="dateTimeValues")
    def date_time_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "date_time_values")

    @date_time_values.setter
    def date_time_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "date_time_values", value)

    @property
    @pulumi.getter(name="decimalValues")
    def decimal_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "decimal_values")

    @decimal_values.setter
    def decimal_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "decimal_values", value)

    @property
    @pulumi.getter(name="integerValues")
    def integer_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "integer_values")

    @integer_values.setter
    def integer_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "integer_values", value)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "string_values")

    @string_values.setter
    def string_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "string_values", value)


if not MYPY:
    class VisualCustomActionsActionOperationUrlOperationArgsDict(TypedDict):
        url_target: pulumi.Input[str]
        url_template: pulumi.Input[str]
elif False:
    VisualCustomActionsActionOperationUrlOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualCustomActionsActionOperationUrlOperationArgs:
    def __init__(__self__, *,
                 url_target: pulumi.Input[str],
                 url_template: pulumi.Input[str]):
        pulumi.set(__self__, "url_target", url_target)
        pulumi.set(__self__, "url_template", url_template)

    @property
    @pulumi.getter(name="urlTarget")
    def url_target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url_target")

    @url_target.setter
    def url_target(self, value: pulumi.Input[str]):
        pulumi.set(self, "url_target", value)

    @property
    @pulumi.getter(name="urlTemplate")
    def url_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url_template")

    @url_template.setter
    def url_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "url_template", value)


if not MYPY:
    class VisualPaletteArgsDict(TypedDict):
        chart_color: NotRequired[pulumi.Input[str]]
        color_maps: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualPaletteColorMapArgsDict']]]]
elif False:
    VisualPaletteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualPaletteArgs:
    def __init__(__self__, *,
                 chart_color: Optional[pulumi.Input[str]] = None,
                 color_maps: Optional[pulumi.Input[Sequence[pulumi.Input['VisualPaletteColorMapArgs']]]] = None):
        if chart_color is not None:
            pulumi.set(__self__, "chart_color", chart_color)
        if color_maps is not None:
            pulumi.set(__self__, "color_maps", color_maps)

    @property
    @pulumi.getter(name="chartColor")
    def chart_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chart_color")

    @chart_color.setter
    def chart_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_color", value)

    @property
    @pulumi.getter(name="colorMaps")
    def color_maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualPaletteColorMapArgs']]]]:
        return pulumi.get(self, "color_maps")

    @color_maps.setter
    def color_maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualPaletteColorMapArgs']]]]):
        pulumi.set(self, "color_maps", value)


if not MYPY:
    class VisualPaletteColorMapArgsDict(TypedDict):
        color: pulumi.Input[str]
        element: pulumi.Input['DataPathValueArgsDict']
        time_granularity: NotRequired[pulumi.Input[str]]
elif False:
    VisualPaletteColorMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualPaletteColorMapArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 element: pulumi.Input['DataPathValueArgs'],
                 time_granularity: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "element", element)
        if time_granularity is not None:
            pulumi.set(__self__, "time_granularity", time_granularity)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def element(self) -> pulumi.Input['DataPathValueArgs']:
        return pulumi.get(self, "element")

    @element.setter
    def element(self, value: pulumi.Input['DataPathValueArgs']):
        pulumi.set(self, "element", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_granularity", value)


if not MYPY:
    class VisualsArgsDict(TypedDict):
        bar_chart_visual: NotRequired[pulumi.Input['VisualsBarChartVisualArgsDict']]
        box_plot_visual: NotRequired[pulumi.Input['VisualsBoxPlotVisualArgsDict']]
        combo_chart_visual: NotRequired[pulumi.Input['VisualsComboChartVisualArgsDict']]
        custom_content_visual: NotRequired[pulumi.Input['VisualsCustomContentVisualArgsDict']]
        empty_visual: NotRequired[pulumi.Input['VisualsEmptyVisualArgsDict']]
        filled_map_visual: NotRequired[pulumi.Input['VisualsFilledMapVisualArgsDict']]
        funnel_chart_visual: NotRequired[pulumi.Input['VisualsFunnelChartVisualArgsDict']]
        gauge_chart_visual: NotRequired[pulumi.Input['VisualsGaugeChartVisualArgsDict']]
        geospatial_map_visual: NotRequired[pulumi.Input['VisualsGeospatialMapVisualArgsDict']]
        heat_map_visual: NotRequired[pulumi.Input['VisualsHeatMapVisualArgsDict']]
        histogram_visual: NotRequired[pulumi.Input['VisualsHistogramVisualArgsDict']]
        insight_visual: NotRequired[pulumi.Input['VisualsInsightVisualArgsDict']]
        kpi_visual: NotRequired[pulumi.Input['VisualsKpiVisualArgsDict']]
        line_chart_visual: NotRequired[pulumi.Input['VisualsLineChartVisualArgsDict']]
        pie_chart_visual: NotRequired[pulumi.Input['VisualsPieChartVisualArgsDict']]
        pivot_table_visual: NotRequired[pulumi.Input['VisualsPivotTableVisualArgsDict']]
        radar_chart_visual: NotRequired[pulumi.Input['VisualsRadarChartVisualArgsDict']]
        sankey_diagram_visual: NotRequired[pulumi.Input['VisualsSankeyDiagramVisualArgsDict']]
        scatter_plot_visual: NotRequired[pulumi.Input['VisualsScatterPlotVisualArgsDict']]
        table_visual: NotRequired[pulumi.Input['VisualsTableVisualArgsDict']]
        tree_map_visual: NotRequired[pulumi.Input['VisualsTreeMapVisualArgsDict']]
        waterfall_visual: NotRequired[pulumi.Input['VisualsWaterfallVisualArgsDict']]
        word_cloud_visual: NotRequired[pulumi.Input['VisualsWordCloudVisualArgsDict']]
elif False:
    VisualsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsArgs:
    def __init__(__self__, *,
                 bar_chart_visual: Optional[pulumi.Input['VisualsBarChartVisualArgs']] = None,
                 box_plot_visual: Optional[pulumi.Input['VisualsBoxPlotVisualArgs']] = None,
                 combo_chart_visual: Optional[pulumi.Input['VisualsComboChartVisualArgs']] = None,
                 custom_content_visual: Optional[pulumi.Input['VisualsCustomContentVisualArgs']] = None,
                 empty_visual: Optional[pulumi.Input['VisualsEmptyVisualArgs']] = None,
                 filled_map_visual: Optional[pulumi.Input['VisualsFilledMapVisualArgs']] = None,
                 funnel_chart_visual: Optional[pulumi.Input['VisualsFunnelChartVisualArgs']] = None,
                 gauge_chart_visual: Optional[pulumi.Input['VisualsGaugeChartVisualArgs']] = None,
                 geospatial_map_visual: Optional[pulumi.Input['VisualsGeospatialMapVisualArgs']] = None,
                 heat_map_visual: Optional[pulumi.Input['VisualsHeatMapVisualArgs']] = None,
                 histogram_visual: Optional[pulumi.Input['VisualsHistogramVisualArgs']] = None,
                 insight_visual: Optional[pulumi.Input['VisualsInsightVisualArgs']] = None,
                 kpi_visual: Optional[pulumi.Input['VisualsKpiVisualArgs']] = None,
                 line_chart_visual: Optional[pulumi.Input['VisualsLineChartVisualArgs']] = None,
                 pie_chart_visual: Optional[pulumi.Input['VisualsPieChartVisualArgs']] = None,
                 pivot_table_visual: Optional[pulumi.Input['VisualsPivotTableVisualArgs']] = None,
                 radar_chart_visual: Optional[pulumi.Input['VisualsRadarChartVisualArgs']] = None,
                 sankey_diagram_visual: Optional[pulumi.Input['VisualsSankeyDiagramVisualArgs']] = None,
                 scatter_plot_visual: Optional[pulumi.Input['VisualsScatterPlotVisualArgs']] = None,
                 table_visual: Optional[pulumi.Input['VisualsTableVisualArgs']] = None,
                 tree_map_visual: Optional[pulumi.Input['VisualsTreeMapVisualArgs']] = None,
                 waterfall_visual: Optional[pulumi.Input['VisualsWaterfallVisualArgs']] = None,
                 word_cloud_visual: Optional[pulumi.Input['VisualsWordCloudVisualArgs']] = None):
        if bar_chart_visual is not None:
            pulumi.set(__self__, "bar_chart_visual", bar_chart_visual)
        if box_plot_visual is not None:
            pulumi.set(__self__, "box_plot_visual", box_plot_visual)
        if combo_chart_visual is not None:
            pulumi.set(__self__, "combo_chart_visual", combo_chart_visual)
        if custom_content_visual is not None:
            pulumi.set(__self__, "custom_content_visual", custom_content_visual)
        if empty_visual is not None:
            pulumi.set(__self__, "empty_visual", empty_visual)
        if filled_map_visual is not None:
            pulumi.set(__self__, "filled_map_visual", filled_map_visual)
        if funnel_chart_visual is not None:
            pulumi.set(__self__, "funnel_chart_visual", funnel_chart_visual)
        if gauge_chart_visual is not None:
            pulumi.set(__self__, "gauge_chart_visual", gauge_chart_visual)
        if geospatial_map_visual is not None:
            pulumi.set(__self__, "geospatial_map_visual", geospatial_map_visual)
        if heat_map_visual is not None:
            pulumi.set(__self__, "heat_map_visual", heat_map_visual)
        if histogram_visual is not None:
            pulumi.set(__self__, "histogram_visual", histogram_visual)
        if insight_visual is not None:
            pulumi.set(__self__, "insight_visual", insight_visual)
        if kpi_visual is not None:
            pulumi.set(__self__, "kpi_visual", kpi_visual)
        if line_chart_visual is not None:
            pulumi.set(__self__, "line_chart_visual", line_chart_visual)
        if pie_chart_visual is not None:
            pulumi.set(__self__, "pie_chart_visual", pie_chart_visual)
        if pivot_table_visual is not None:
            pulumi.set(__self__, "pivot_table_visual", pivot_table_visual)
        if radar_chart_visual is not None:
            pulumi.set(__self__, "radar_chart_visual", radar_chart_visual)
        if sankey_diagram_visual is not None:
            pulumi.set(__self__, "sankey_diagram_visual", sankey_diagram_visual)
        if scatter_plot_visual is not None:
            pulumi.set(__self__, "scatter_plot_visual", scatter_plot_visual)
        if table_visual is not None:
            pulumi.set(__self__, "table_visual", table_visual)
        if tree_map_visual is not None:
            pulumi.set(__self__, "tree_map_visual", tree_map_visual)
        if waterfall_visual is not None:
            pulumi.set(__self__, "waterfall_visual", waterfall_visual)
        if word_cloud_visual is not None:
            pulumi.set(__self__, "word_cloud_visual", word_cloud_visual)

    @property
    @pulumi.getter(name="barChartVisual")
    def bar_chart_visual(self) -> Optional[pulumi.Input['VisualsBarChartVisualArgs']]:
        return pulumi.get(self, "bar_chart_visual")

    @bar_chart_visual.setter
    def bar_chart_visual(self, value: Optional[pulumi.Input['VisualsBarChartVisualArgs']]):
        pulumi.set(self, "bar_chart_visual", value)

    @property
    @pulumi.getter(name="boxPlotVisual")
    def box_plot_visual(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualArgs']]:
        return pulumi.get(self, "box_plot_visual")

    @box_plot_visual.setter
    def box_plot_visual(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualArgs']]):
        pulumi.set(self, "box_plot_visual", value)

    @property
    @pulumi.getter(name="comboChartVisual")
    def combo_chart_visual(self) -> Optional[pulumi.Input['VisualsComboChartVisualArgs']]:
        return pulumi.get(self, "combo_chart_visual")

    @combo_chart_visual.setter
    def combo_chart_visual(self, value: Optional[pulumi.Input['VisualsComboChartVisualArgs']]):
        pulumi.set(self, "combo_chart_visual", value)

    @property
    @pulumi.getter(name="customContentVisual")
    def custom_content_visual(self) -> Optional[pulumi.Input['VisualsCustomContentVisualArgs']]:
        return pulumi.get(self, "custom_content_visual")

    @custom_content_visual.setter
    def custom_content_visual(self, value: Optional[pulumi.Input['VisualsCustomContentVisualArgs']]):
        pulumi.set(self, "custom_content_visual", value)

    @property
    @pulumi.getter(name="emptyVisual")
    def empty_visual(self) -> Optional[pulumi.Input['VisualsEmptyVisualArgs']]:
        return pulumi.get(self, "empty_visual")

    @empty_visual.setter
    def empty_visual(self, value: Optional[pulumi.Input['VisualsEmptyVisualArgs']]):
        pulumi.set(self, "empty_visual", value)

    @property
    @pulumi.getter(name="filledMapVisual")
    def filled_map_visual(self) -> Optional[pulumi.Input['VisualsFilledMapVisualArgs']]:
        return pulumi.get(self, "filled_map_visual")

    @filled_map_visual.setter
    def filled_map_visual(self, value: Optional[pulumi.Input['VisualsFilledMapVisualArgs']]):
        pulumi.set(self, "filled_map_visual", value)

    @property
    @pulumi.getter(name="funnelChartVisual")
    def funnel_chart_visual(self) -> Optional[pulumi.Input['VisualsFunnelChartVisualArgs']]:
        return pulumi.get(self, "funnel_chart_visual")

    @funnel_chart_visual.setter
    def funnel_chart_visual(self, value: Optional[pulumi.Input['VisualsFunnelChartVisualArgs']]):
        pulumi.set(self, "funnel_chart_visual", value)

    @property
    @pulumi.getter(name="gaugeChartVisual")
    def gauge_chart_visual(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualArgs']]:
        return pulumi.get(self, "gauge_chart_visual")

    @gauge_chart_visual.setter
    def gauge_chart_visual(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualArgs']]):
        pulumi.set(self, "gauge_chart_visual", value)

    @property
    @pulumi.getter(name="geospatialMapVisual")
    def geospatial_map_visual(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualArgs']]:
        return pulumi.get(self, "geospatial_map_visual")

    @geospatial_map_visual.setter
    def geospatial_map_visual(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualArgs']]):
        pulumi.set(self, "geospatial_map_visual", value)

    @property
    @pulumi.getter(name="heatMapVisual")
    def heat_map_visual(self) -> Optional[pulumi.Input['VisualsHeatMapVisualArgs']]:
        return pulumi.get(self, "heat_map_visual")

    @heat_map_visual.setter
    def heat_map_visual(self, value: Optional[pulumi.Input['VisualsHeatMapVisualArgs']]):
        pulumi.set(self, "heat_map_visual", value)

    @property
    @pulumi.getter(name="histogramVisual")
    def histogram_visual(self) -> Optional[pulumi.Input['VisualsHistogramVisualArgs']]:
        return pulumi.get(self, "histogram_visual")

    @histogram_visual.setter
    def histogram_visual(self, value: Optional[pulumi.Input['VisualsHistogramVisualArgs']]):
        pulumi.set(self, "histogram_visual", value)

    @property
    @pulumi.getter(name="insightVisual")
    def insight_visual(self) -> Optional[pulumi.Input['VisualsInsightVisualArgs']]:
        return pulumi.get(self, "insight_visual")

    @insight_visual.setter
    def insight_visual(self, value: Optional[pulumi.Input['VisualsInsightVisualArgs']]):
        pulumi.set(self, "insight_visual", value)

    @property
    @pulumi.getter(name="kpiVisual")
    def kpi_visual(self) -> Optional[pulumi.Input['VisualsKpiVisualArgs']]:
        return pulumi.get(self, "kpi_visual")

    @kpi_visual.setter
    def kpi_visual(self, value: Optional[pulumi.Input['VisualsKpiVisualArgs']]):
        pulumi.set(self, "kpi_visual", value)

    @property
    @pulumi.getter(name="lineChartVisual")
    def line_chart_visual(self) -> Optional[pulumi.Input['VisualsLineChartVisualArgs']]:
        return pulumi.get(self, "line_chart_visual")

    @line_chart_visual.setter
    def line_chart_visual(self, value: Optional[pulumi.Input['VisualsLineChartVisualArgs']]):
        pulumi.set(self, "line_chart_visual", value)

    @property
    @pulumi.getter(name="pieChartVisual")
    def pie_chart_visual(self) -> Optional[pulumi.Input['VisualsPieChartVisualArgs']]:
        return pulumi.get(self, "pie_chart_visual")

    @pie_chart_visual.setter
    def pie_chart_visual(self, value: Optional[pulumi.Input['VisualsPieChartVisualArgs']]):
        pulumi.set(self, "pie_chart_visual", value)

    @property
    @pulumi.getter(name="pivotTableVisual")
    def pivot_table_visual(self) -> Optional[pulumi.Input['VisualsPivotTableVisualArgs']]:
        return pulumi.get(self, "pivot_table_visual")

    @pivot_table_visual.setter
    def pivot_table_visual(self, value: Optional[pulumi.Input['VisualsPivotTableVisualArgs']]):
        pulumi.set(self, "pivot_table_visual", value)

    @property
    @pulumi.getter(name="radarChartVisual")
    def radar_chart_visual(self) -> Optional[pulumi.Input['VisualsRadarChartVisualArgs']]:
        return pulumi.get(self, "radar_chart_visual")

    @radar_chart_visual.setter
    def radar_chart_visual(self, value: Optional[pulumi.Input['VisualsRadarChartVisualArgs']]):
        pulumi.set(self, "radar_chart_visual", value)

    @property
    @pulumi.getter(name="sankeyDiagramVisual")
    def sankey_diagram_visual(self) -> Optional[pulumi.Input['VisualsSankeyDiagramVisualArgs']]:
        return pulumi.get(self, "sankey_diagram_visual")

    @sankey_diagram_visual.setter
    def sankey_diagram_visual(self, value: Optional[pulumi.Input['VisualsSankeyDiagramVisualArgs']]):
        pulumi.set(self, "sankey_diagram_visual", value)

    @property
    @pulumi.getter(name="scatterPlotVisual")
    def scatter_plot_visual(self) -> Optional[pulumi.Input['VisualsScatterPlotVisualArgs']]:
        return pulumi.get(self, "scatter_plot_visual")

    @scatter_plot_visual.setter
    def scatter_plot_visual(self, value: Optional[pulumi.Input['VisualsScatterPlotVisualArgs']]):
        pulumi.set(self, "scatter_plot_visual", value)

    @property
    @pulumi.getter(name="tableVisual")
    def table_visual(self) -> Optional[pulumi.Input['VisualsTableVisualArgs']]:
        return pulumi.get(self, "table_visual")

    @table_visual.setter
    def table_visual(self, value: Optional[pulumi.Input['VisualsTableVisualArgs']]):
        pulumi.set(self, "table_visual", value)

    @property
    @pulumi.getter(name="treeMapVisual")
    def tree_map_visual(self) -> Optional[pulumi.Input['VisualsTreeMapVisualArgs']]:
        return pulumi.get(self, "tree_map_visual")

    @tree_map_visual.setter
    def tree_map_visual(self, value: Optional[pulumi.Input['VisualsTreeMapVisualArgs']]):
        pulumi.set(self, "tree_map_visual", value)

    @property
    @pulumi.getter(name="waterfallVisual")
    def waterfall_visual(self) -> Optional[pulumi.Input['VisualsWaterfallVisualArgs']]:
        return pulumi.get(self, "waterfall_visual")

    @waterfall_visual.setter
    def waterfall_visual(self, value: Optional[pulumi.Input['VisualsWaterfallVisualArgs']]):
        pulumi.set(self, "waterfall_visual", value)

    @property
    @pulumi.getter(name="wordCloudVisual")
    def word_cloud_visual(self) -> Optional[pulumi.Input['VisualsWordCloudVisualArgs']]:
        return pulumi.get(self, "word_cloud_visual")

    @word_cloud_visual.setter
    def word_cloud_visual(self, value: Optional[pulumi.Input['VisualsWordCloudVisualArgs']]):
        pulumi.set(self, "word_cloud_visual", value)


if not MYPY:
    class VisualsBarChartVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsBarChartVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsBarChartVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBarChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsBarChartVisualChartConfigurationArgsDict(TypedDict):
        bars_arrangement: NotRequired[pulumi.Input[str]]
        category_axis: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        category_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        color_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        contribution_analysis_defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgsDict']]]]
        data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsBarChartVisualChartConfigurationFieldWellsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        orientation: NotRequired[pulumi.Input[str]]
        reference_lines: NotRequired[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgsDict']]]]
        small_multiples_options: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsBarChartVisualChartConfigurationSortConfigurationArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        value_axis: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        value_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
elif False:
    VisualsBarChartVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBarChartVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 bars_arrangement: Optional[pulumi.Input[str]] = None,
                 category_axis: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 orientation: Optional[pulumi.Input[str]] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]] = None,
                 small_multiples_options: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 value_axis: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None):
        if bars_arrangement is not None:
            pulumi.set(__self__, "bars_arrangement", bars_arrangement)
        if category_axis is not None:
            pulumi.set(__self__, "category_axis", category_axis)
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if color_label_options is not None:
            pulumi.set(__self__, "color_label_options", color_label_options)
        if contribution_analysis_defaults is not None:
            pulumi.set(__self__, "contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if orientation is not None:
            pulumi.set(__self__, "orientation", orientation)
        if reference_lines is not None:
            pulumi.set(__self__, "reference_lines", reference_lines)
        if small_multiples_options is not None:
            pulumi.set(__self__, "small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if value_axis is not None:
            pulumi.set(__self__, "value_axis", value_axis)
        if value_label_options is not None:
            pulumi.set(__self__, "value_label_options", value_label_options)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="barsArrangement")
    def bars_arrangement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bars_arrangement")

    @bars_arrangement.setter
    def bars_arrangement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bars_arrangement", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueAxis")
    def value_axis(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "value_axis")

    @value_axis.setter
    def value_axis(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "value_axis", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


if not MYPY:
    class VisualsBarChartVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        bar_chart_aggregated_field_wells: NotRequired[pulumi.Input['VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWellsArgsDict']]
elif False:
    VisualsBarChartVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBarChartVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 bar_chart_aggregated_field_wells: Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWellsArgs']] = None):
        if bar_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "bar_chart_aggregated_field_wells", bar_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="barChartAggregatedFieldWells")
    def bar_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "bar_chart_aggregated_field_wells")

    @bar_chart_aggregated_field_wells.setter
    def bar_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "bar_chart_aggregated_field_wells", value)


if not MYPY:
    class VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWellsArgsDict(TypedDict):
        categories: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        small_multiples: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if small_multiples is not None:
            pulumi.set(__self__, "small_multiples", small_multiples)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsBarChartVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        category_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        category_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
        color_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        color_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
        small_multiples_limit_configuration: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        small_multiples_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsBarChartVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBarChartVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 category_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 color_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 small_multiples_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if color_items_limit is not None:
            pulumi.set(__self__, "color_items_limit", color_items_limit)
        if color_sorts is not None:
            pulumi.set(__self__, "color_sorts", color_sorts)
        if small_multiples_limit_configuration is not None:
            pulumi.set(__self__, "small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sorts is not None:
            pulumi.set(__self__, "small_multiples_sorts", small_multiples_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sorts")

    @category_sorts.setter
    def category_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sorts", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSorts")
    def color_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sorts")

    @color_sorts.setter
    def color_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sorts", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSorts")
    def small_multiples_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sorts")

    @small_multiples_sorts.setter
    def small_multiples_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sorts", value)


if not MYPY:
    class VisualsBoxPlotVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsBoxPlotVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationArgsDict(TypedDict):
        box_plot_options: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsArgsDict']]
        category_axis: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        category_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        primary_y_axis_display_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        primary_y_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        reference_lines: NotRequired[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgsDict']]]]
        sort_configuration: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationSortConfigurationArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
elif False:
    VisualsBoxPlotVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 box_plot_options: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsArgs']] = None,
                 category_axis: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None):
        if box_plot_options is not None:
            pulumi.set(__self__, "box_plot_options", box_plot_options)
        if category_axis is not None:
            pulumi.set(__self__, "category_axis", category_axis)
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if primary_y_axis_display_options is not None:
            pulumi.set(__self__, "primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            pulumi.set(__self__, "primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            pulumi.set(__self__, "reference_lines", reference_lines)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="boxPlotOptions")
    def box_plot_options(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsArgs']]:
        return pulumi.get(self, "box_plot_options")

    @box_plot_options.setter
    def box_plot_options(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsArgs']]):
        pulumi.set(self, "box_plot_options", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsArgsDict(TypedDict):
        all_data_points_visibility: NotRequired[pulumi.Input[str]]
        outlier_visibility: NotRequired[pulumi.Input[str]]
        style_options: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptionsArgsDict']]
elif False:
    VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsArgs:
    def __init__(__self__, *,
                 all_data_points_visibility: Optional[pulumi.Input[str]] = None,
                 outlier_visibility: Optional[pulumi.Input[str]] = None,
                 style_options: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptionsArgs']] = None):
        if all_data_points_visibility is not None:
            pulumi.set(__self__, "all_data_points_visibility", all_data_points_visibility)
        if outlier_visibility is not None:
            pulumi.set(__self__, "outlier_visibility", outlier_visibility)
        if style_options is not None:
            pulumi.set(__self__, "style_options", style_options)

    @property
    @pulumi.getter(name="allDataPointsVisibility")
    def all_data_points_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "all_data_points_visibility")

    @all_data_points_visibility.setter
    def all_data_points_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "all_data_points_visibility", value)

    @property
    @pulumi.getter(name="outlierVisibility")
    def outlier_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outlier_visibility")

    @outlier_visibility.setter
    def outlier_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outlier_visibility", value)

    @property
    @pulumi.getter(name="styleOptions")
    def style_options(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptionsArgs']]:
        return pulumi.get(self, "style_options")

    @style_options.setter
    def style_options(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptionsArgs']]):
        pulumi.set(self, "style_options", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptionsArgsDict(TypedDict):
        fill_style: NotRequired[pulumi.Input[str]]
elif False:
    VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptionsArgs:
    def __init__(__self__, *,
                 fill_style: Optional[pulumi.Input[str]] = None):
        if fill_style is not None:
            pulumi.set(__self__, "fill_style", fill_style)

    @property
    @pulumi.getter(name="fillStyle")
    def fill_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_style")

    @fill_style.setter
    def fill_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_style", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        box_plot_aggregated_field_wells: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsArgsDict']]
elif False:
    VisualsBoxPlotVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 box_plot_aggregated_field_wells: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsArgs']] = None):
        if box_plot_aggregated_field_wells is not None:
            pulumi.set(__self__, "box_plot_aggregated_field_wells", box_plot_aggregated_field_wells)

    @property
    @pulumi.getter(name="boxPlotAggregatedFieldWells")
    def box_plot_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "box_plot_aggregated_field_wells")

    @box_plot_aggregated_field_wells.setter
    def box_plot_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsArgs']]):
        pulumi.set(self, "box_plot_aggregated_field_wells", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsArgsDict(TypedDict):
        group_by: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueArgsDict']]]]
elif False:
    VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_by: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueArgs']]]] = None):
        if group_by is not None:
            pulumi.set(__self__, "group_by", group_by)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueArgsDict(TypedDict):
        calculated_measure_field: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict']]
        categorical_measure_field: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict']]
        date_measure_field: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureFieldArgsDict']]
        numerical_measure_field: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureFieldArgsDict']]
elif False:
    VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueArgs:
    def __init__(__self__, *,
                 calculated_measure_field: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureFieldArgs']] = None,
                 categorical_measure_field: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureFieldArgs']] = None,
                 date_measure_field: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureFieldArgs']] = None,
                 numerical_measure_field: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureFieldArgs']] = None):
        if calculated_measure_field is not None:
            pulumi.set(__self__, "calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            pulumi.set(__self__, "categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            pulumi.set(__self__, "date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            pulumi.set(__self__, "numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureFieldArgs']]:
        return pulumi.get(self, "calculated_measure_field")

    @calculated_measure_field.setter
    def calculated_measure_field(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureFieldArgs']]):
        pulumi.set(self, "calculated_measure_field", value)

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureFieldArgs']]:
        return pulumi.get(self, "categorical_measure_field")

    @categorical_measure_field.setter
    def categorical_measure_field(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureFieldArgs']]):
        pulumi.set(self, "categorical_measure_field", value)

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureFieldArgs']]:
        return pulumi.get(self, "date_measure_field")

    @date_measure_field.setter
    def date_measure_field(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureFieldArgs']]):
        pulumi.set(self, "date_measure_field", value)

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureFieldArgs']]:
        return pulumi.get(self, "numerical_measure_field")

    @numerical_measure_field.setter
    def numerical_measure_field(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureFieldArgs']]):
        pulumi.set(self, "numerical_measure_field", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict(TypedDict):
        expression: pulumi.Input[str]
        field_id: pulumi.Input[str]
elif False:
    VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureFieldArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 field_id: pulumi.Input[str]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
elif False:
    VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
elif False:
    VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input['NumericalAggregationArgsDict']]
        format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
elif False:
    VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['NumericalAggregationArgs']] = None,
                 format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['NumericalAggregationArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['NumericalAggregationArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        category_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
        pagination_configuration: NotRequired[pulumi.Input['VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfigurationArgsDict']]
elif False:
    VisualsBoxPlotVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 category_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None,
                 pagination_configuration: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfigurationArgs']] = None):
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if pagination_configuration is not None:
            pulumi.set(__self__, "pagination_configuration", pagination_configuration)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sorts")

    @category_sorts.setter
    def category_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sorts", value)

    @property
    @pulumi.getter(name="paginationConfiguration")
    def pagination_configuration(self) -> Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfigurationArgs']]:
        return pulumi.get(self, "pagination_configuration")

    @pagination_configuration.setter
    def pagination_configuration(self, value: Optional[pulumi.Input['VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfigurationArgs']]):
        pulumi.set(self, "pagination_configuration", value)


if not MYPY:
    class VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfigurationArgsDict(TypedDict):
        page_number: pulumi.Input[int]
        page_size: pulumi.Input[int]
elif False:
    VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfigurationArgs:
    def __init__(__self__, *,
                 page_number: pulumi.Input[int],
                 page_size: pulumi.Input[int]):
        pulumi.set(__self__, "page_number", page_number)
        pulumi.set(__self__, "page_size", page_size)

    @property
    @pulumi.getter(name="pageNumber")
    def page_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "page_number")

    @page_number.setter
    def page_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "page_number", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "page_size", value)


if not MYPY:
    class VisualsComboChartVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsComboChartVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsComboChartVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsComboChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsComboChartVisualChartConfigurationArgsDict(TypedDict):
        bar_data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        bars_arrangement: NotRequired[pulumi.Input[str]]
        category_axis: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        category_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        color_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsComboChartVisualChartConfigurationFieldWellsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        line_data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        primary_y_axis_display_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        primary_y_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        reference_lines: NotRequired[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgsDict']]]]
        secondary_y_axis_display_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        secondary_y_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsComboChartVisualChartConfigurationSortConfigurationArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
elif False:
    VisualsComboChartVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsComboChartVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 bar_data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 bars_arrangement: Optional[pulumi.Input[str]] = None,
                 category_axis: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 line_data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]] = None,
                 secondary_y_axis_display_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 secondary_y_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None):
        if bar_data_labels is not None:
            pulumi.set(__self__, "bar_data_labels", bar_data_labels)
        if bars_arrangement is not None:
            pulumi.set(__self__, "bars_arrangement", bars_arrangement)
        if category_axis is not None:
            pulumi.set(__self__, "category_axis", category_axis)
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if color_label_options is not None:
            pulumi.set(__self__, "color_label_options", color_label_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if line_data_labels is not None:
            pulumi.set(__self__, "line_data_labels", line_data_labels)
        if primary_y_axis_display_options is not None:
            pulumi.set(__self__, "primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            pulumi.set(__self__, "primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            pulumi.set(__self__, "reference_lines", reference_lines)
        if secondary_y_axis_display_options is not None:
            pulumi.set(__self__, "secondary_y_axis_display_options", secondary_y_axis_display_options)
        if secondary_y_axis_label_options is not None:
            pulumi.set(__self__, "secondary_y_axis_label_options", secondary_y_axis_label_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="barDataLabels")
    def bar_data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "bar_data_labels")

    @bar_data_labels.setter
    def bar_data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "bar_data_labels", value)

    @property
    @pulumi.getter(name="barsArrangement")
    def bars_arrangement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bars_arrangement")

    @bars_arrangement.setter
    def bars_arrangement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bars_arrangement", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="lineDataLabels")
    def line_data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "line_data_labels")

    @line_data_labels.setter
    def line_data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "line_data_labels", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="secondaryYAxisDisplayOptions")
    def secondary_y_axis_display_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_display_options")

    @secondary_y_axis_display_options.setter
    def secondary_y_axis_display_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="secondaryYAxisLabelOptions")
    def secondary_y_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_label_options")

    @secondary_y_axis_label_options.setter
    def secondary_y_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


if not MYPY:
    class VisualsComboChartVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        combo_chart_aggregated_field_wells: NotRequired[pulumi.Input['VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWellsArgsDict']]
elif False:
    VisualsComboChartVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsComboChartVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 combo_chart_aggregated_field_wells: Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWellsArgs']] = None):
        if combo_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "combo_chart_aggregated_field_wells", combo_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="comboChartAggregatedFieldWells")
    def combo_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "combo_chart_aggregated_field_wells")

    @combo_chart_aggregated_field_wells.setter
    def combo_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "combo_chart_aggregated_field_wells", value)


if not MYPY:
    class VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWellsArgsDict(TypedDict):
        bar_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
        categories: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        line_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 bar_values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 line_values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if bar_values is not None:
            pulumi.set(__self__, "bar_values", bar_values)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if line_values is not None:
            pulumi.set(__self__, "line_values", line_values)

    @property
    @pulumi.getter(name="barValues")
    def bar_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "bar_values")

    @bar_values.setter
    def bar_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "bar_values", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="lineValues")
    def line_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "line_values")

    @line_values.setter
    def line_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "line_values", value)


if not MYPY:
    class VisualsComboChartVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        category_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        category_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
        color_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        color_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsComboChartVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsComboChartVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 category_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 color_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if color_items_limit is not None:
            pulumi.set(__self__, "color_items_limit", color_items_limit)
        if color_sorts is not None:
            pulumi.set(__self__, "color_sorts", color_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sorts")

    @category_sorts.setter
    def category_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sorts", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSorts")
    def color_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sorts")

    @color_sorts.setter
    def color_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sorts", value)


if not MYPY:
    class VisualsCustomContentVisualArgsDict(TypedDict):
        data_set_identifier: pulumi.Input[str]
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsCustomContentVisualChartConfigurationArgsDict']]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsCustomContentVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsCustomContentVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsCustomContentVisualChartConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsCustomContentVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsCustomContentVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsCustomContentVisualChartConfigurationArgsDict(TypedDict):
        content_type: NotRequired[pulumi.Input[str]]
        content_url: NotRequired[pulumi.Input[str]]
        image_scaling: NotRequired[pulumi.Input[str]]
elif False:
    VisualsCustomContentVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsCustomContentVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 content_type: Optional[pulumi.Input[str]] = None,
                 content_url: Optional[pulumi.Input[str]] = None,
                 image_scaling: Optional[pulumi.Input[str]] = None):
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if content_url is not None:
            pulumi.set(__self__, "content_url", content_url)
        if image_scaling is not None:
            pulumi.set(__self__, "image_scaling", image_scaling)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="contentUrl")
    def content_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_url")

    @content_url.setter
    def content_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_url", value)

    @property
    @pulumi.getter(name="imageScaling")
    def image_scaling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_scaling")

    @image_scaling.setter
    def image_scaling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_scaling", value)


if not MYPY:
    class VisualsEmptyVisualArgsDict(TypedDict):
        data_set_identifier: pulumi.Input[str]
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
elif False:
    VisualsEmptyVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsEmptyVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)


if not MYPY:
    class VisualsFilledMapVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsFilledMapVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        conditional_formatting: NotRequired[pulumi.Input['VisualsFilledMapVisualConditionalFormattingArgsDict']]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsFilledMapVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 conditional_formatting: Optional[pulumi.Input['VisualsFilledMapVisualConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if conditional_formatting is not None:
            pulumi.set(__self__, "conditional_formatting", conditional_formatting)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['VisualsFilledMapVisualConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['VisualsFilledMapVisualConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsFilledMapVisualChartConfigurationArgsDict(TypedDict):
        field_wells: NotRequired[pulumi.Input['VisualsFilledMapVisualChartConfigurationFieldWellsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        map_style_options: NotRequired[pulumi.Input['VisualsFilledMapVisualChartConfigurationMapStyleOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsFilledMapVisualChartConfigurationSortConfigurationArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        window_options: NotRequired[pulumi.Input['VisualsFilledMapVisualChartConfigurationWindowOptionsArgsDict']]
elif False:
    VisualsFilledMapVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 map_style_options: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationMapStyleOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 window_options: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationWindowOptionsArgs']] = None):
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if map_style_options is not None:
            pulumi.set(__self__, "map_style_options", map_style_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if window_options is not None:
            pulumi.set(__self__, "window_options", window_options)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="mapStyleOptions")
    def map_style_options(self) -> Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationMapStyleOptionsArgs']]:
        return pulumi.get(self, "map_style_options")

    @map_style_options.setter
    def map_style_options(self, value: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationMapStyleOptionsArgs']]):
        pulumi.set(self, "map_style_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="windowOptions")
    def window_options(self) -> Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationWindowOptionsArgs']]:
        return pulumi.get(self, "window_options")

    @window_options.setter
    def window_options(self, value: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationWindowOptionsArgs']]):
        pulumi.set(self, "window_options", value)


if not MYPY:
    class VisualsFilledMapVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        filled_map_aggregated_field_wells: NotRequired[pulumi.Input['VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWellsArgsDict']]
elif False:
    VisualsFilledMapVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 filled_map_aggregated_field_wells: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWellsArgs']] = None):
        if filled_map_aggregated_field_wells is not None:
            pulumi.set(__self__, "filled_map_aggregated_field_wells", filled_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="filledMapAggregatedFieldWells")
    def filled_map_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "filled_map_aggregated_field_wells")

    @filled_map_aggregated_field_wells.setter
    def filled_map_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "filled_map_aggregated_field_wells", value)


if not MYPY:
    class VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWellsArgsDict(TypedDict):
        geospatial: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        values: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 geospatial: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 values: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        if geospatial is not None:
            pulumi.set(__self__, "geospatial", geospatial)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def geospatial(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "geospatial")

    @geospatial.setter
    def geospatial(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "geospatial", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsFilledMapVisualChartConfigurationMapStyleOptionsArgsDict(TypedDict):
        base_map_style: NotRequired[pulumi.Input[str]]
elif False:
    VisualsFilledMapVisualChartConfigurationMapStyleOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualChartConfigurationMapStyleOptionsArgs:
    def __init__(__self__, *,
                 base_map_style: Optional[pulumi.Input[str]] = None):
        if base_map_style is not None:
            pulumi.set(__self__, "base_map_style", base_map_style)

    @property
    @pulumi.getter(name="baseMapStyle")
    def base_map_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_map_style")

    @base_map_style.setter
    def base_map_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_map_style", value)


if not MYPY:
    class VisualsFilledMapVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        category_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsFilledMapVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 category_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sorts")

    @category_sorts.setter
    def category_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sorts", value)


if not MYPY:
    class VisualsFilledMapVisualChartConfigurationWindowOptionsArgsDict(TypedDict):
        bounds: NotRequired[pulumi.Input['VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgsDict']]
        map_zoom_mode: NotRequired[pulumi.Input[str]]
elif False:
    VisualsFilledMapVisualChartConfigurationWindowOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualChartConfigurationWindowOptionsArgs:
    def __init__(__self__, *,
                 bounds: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs']] = None,
                 map_zoom_mode: Optional[pulumi.Input[str]] = None):
        if bounds is not None:
            pulumi.set(__self__, "bounds", bounds)
        if map_zoom_mode is not None:
            pulumi.set(__self__, "map_zoom_mode", map_zoom_mode)

    @property
    @pulumi.getter
    def bounds(self) -> Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs']]:
        return pulumi.get(self, "bounds")

    @bounds.setter
    def bounds(self, value: Optional[pulumi.Input['VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs']]):
        pulumi.set(self, "bounds", value)

    @property
    @pulumi.getter(name="mapZoomMode")
    def map_zoom_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "map_zoom_mode")

    @map_zoom_mode.setter
    def map_zoom_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_zoom_mode", value)


if not MYPY:
    class VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgsDict(TypedDict):
        east: pulumi.Input[float]
        north: pulumi.Input[float]
        south: pulumi.Input[float]
        west: pulumi.Input[float]
elif False:
    VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualChartConfigurationWindowOptionsBoundsArgs:
    def __init__(__self__, *,
                 east: pulumi.Input[float],
                 north: pulumi.Input[float],
                 south: pulumi.Input[float],
                 west: pulumi.Input[float]):
        pulumi.set(__self__, "east", east)
        pulumi.set(__self__, "north", north)
        pulumi.set(__self__, "south", south)
        pulumi.set(__self__, "west", west)

    @property
    @pulumi.getter
    def east(self) -> pulumi.Input[float]:
        return pulumi.get(self, "east")

    @east.setter
    def east(self, value: pulumi.Input[float]):
        pulumi.set(self, "east", value)

    @property
    @pulumi.getter
    def north(self) -> pulumi.Input[float]:
        return pulumi.get(self, "north")

    @north.setter
    def north(self, value: pulumi.Input[float]):
        pulumi.set(self, "north", value)

    @property
    @pulumi.getter
    def south(self) -> pulumi.Input[float]:
        return pulumi.get(self, "south")

    @south.setter
    def south(self, value: pulumi.Input[float]):
        pulumi.set(self, "south", value)

    @property
    @pulumi.getter
    def west(self) -> pulumi.Input[float]:
        return pulumi.get(self, "west")

    @west.setter
    def west(self, value: pulumi.Input[float]):
        pulumi.set(self, "west", value)


if not MYPY:
    class VisualsFilledMapVisualConditionalFormattingArgsDict(TypedDict):
        conditional_formatting_options: pulumi.Input[Sequence[pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgsDict']]]
elif False:
    VisualsFilledMapVisualConditionalFormattingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: pulumi.Input[Sequence[pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs']]]):
        pulumi.set(__self__, "conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> pulumi.Input[Sequence[pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs']]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: pulumi.Input[Sequence[pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs']]]):
        pulumi.set(self, "conditional_formatting_options", value)


if not MYPY:
    class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgsDict(TypedDict):
        shape: pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgsDict']
elif False:
    VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 shape: pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs']):
        pulumi.set(__self__, "shape", shape)

    @property
    @pulumi.getter
    def shape(self) -> pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs']:
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs']):
        pulumi.set(self, "shape", value)


if not MYPY:
    class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        format: NotRequired[pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgsDict']]
elif False:
    VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 format: Optional[pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs']] = None):
        pulumi.set(__self__, "field_id", field_id)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs']]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs']]):
        pulumi.set(self, "format", value)


if not MYPY:
    class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgsDict(TypedDict):
        background_color: pulumi.Input['ConditionalFormattingColorArgsDict']
elif False:
    VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormatArgs:
    def __init__(__self__, *,
                 background_color: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(__self__, "background_color", background_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "background_color", value)


if not MYPY:
    class VisualsFunnelChartVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsFunnelChartVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsFunnelChartVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFunnelChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsFunnelChartVisualChartConfigurationArgsDict(TypedDict):
        category_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        data_label_options: NotRequired[pulumi.Input['VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsFunnelChartVisualChartConfigurationFieldWellsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsFunnelChartVisualChartConfigurationSortConfigurationArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        value_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
elif False:
    VisualsFunnelChartVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFunnelChartVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 data_label_options: Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None):
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if data_label_options is not None:
            pulumi.set(__self__, "data_label_options", data_label_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if value_label_options is not None:
            pulumi.set(__self__, "value_label_options", value_label_options)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="dataLabelOptions")
    def data_label_options(self) -> Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_label_options")

    @data_label_options.setter
    def data_label_options(self, value: Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs']]):
        pulumi.set(self, "data_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


if not MYPY:
    class VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgsDict(TypedDict):
        category_label_visibility: NotRequired[pulumi.Input[str]]
        label_color: NotRequired[pulumi.Input[str]]
        label_font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
        measure_data_label_style: NotRequired[pulumi.Input[str]]
        measure_label_visibility: NotRequired[pulumi.Input[str]]
        position: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFunnelChartVisualChartConfigurationDataLabelOptionsArgs:
    def __init__(__self__, *,
                 category_label_visibility: Optional[pulumi.Input[str]] = None,
                 label_color: Optional[pulumi.Input[str]] = None,
                 label_font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None,
                 measure_data_label_style: Optional[pulumi.Input[str]] = None,
                 measure_label_visibility: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        if category_label_visibility is not None:
            pulumi.set(__self__, "category_label_visibility", category_label_visibility)
        if label_color is not None:
            pulumi.set(__self__, "label_color", label_color)
        if label_font_configuration is not None:
            pulumi.set(__self__, "label_font_configuration", label_font_configuration)
        if measure_data_label_style is not None:
            pulumi.set(__self__, "measure_data_label_style", measure_data_label_style)
        if measure_label_visibility is not None:
            pulumi.set(__self__, "measure_label_visibility", measure_label_visibility)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="categoryLabelVisibility")
    def category_label_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category_label_visibility")

    @category_label_visibility.setter
    def category_label_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category_label_visibility", value)

    @property
    @pulumi.getter(name="labelColor")
    def label_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_color")

    @label_color.setter
    def label_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_color", value)

    @property
    @pulumi.getter(name="labelFontConfiguration")
    def label_font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "label_font_configuration")

    @label_font_configuration.setter
    def label_font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "label_font_configuration", value)

    @property
    @pulumi.getter(name="measureDataLabelStyle")
    def measure_data_label_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "measure_data_label_style")

    @measure_data_label_style.setter
    def measure_data_label_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "measure_data_label_style", value)

    @property
    @pulumi.getter(name="measureLabelVisibility")
    def measure_label_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "measure_label_visibility")

    @measure_label_visibility.setter
    def measure_label_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "measure_label_visibility", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class VisualsFunnelChartVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        funnel_chart_aggregated_field_wells: NotRequired[pulumi.Input['VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWellsArgsDict']]
elif False:
    VisualsFunnelChartVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFunnelChartVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 funnel_chart_aggregated_field_wells: Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWellsArgs']] = None):
        if funnel_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "funnel_chart_aggregated_field_wells", funnel_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="funnelChartAggregatedFieldWells")
    def funnel_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "funnel_chart_aggregated_field_wells")

    @funnel_chart_aggregated_field_wells.setter
    def funnel_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "funnel_chart_aggregated_field_wells", value)


if not MYPY:
    class VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWellsArgsDict(TypedDict):
        category: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        values: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 values: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsFunnelChartVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        category_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        category_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsFunnelChartVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsFunnelChartVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 category_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sorts")

    @category_sorts.setter
    def category_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sorts", value)


if not MYPY:
    class VisualsGaugeChartVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsGaugeChartVisualChartConfigurationArgsDict']]
        conditional_formatting: NotRequired[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingArgsDict']]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsGaugeChartVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            pulumi.set(__self__, "conditional_formatting", conditional_formatting)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsGaugeChartVisualChartConfigurationArgsDict(TypedDict):
        data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsGaugeChartVisualChartConfigurationFieldWellsArgsDict']]
        gauge_chart_options: NotRequired[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
elif False:
    VisualsGaugeChartVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationFieldWellsArgs']] = None,
                 gauge_chart_options: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None):
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if gauge_chart_options is not None:
            pulumi.set(__self__, "gauge_chart_options", gauge_chart_options)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="gaugeChartOptions")
    def gauge_chart_options(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgs']]:
        return pulumi.get(self, "gauge_chart_options")

    @gauge_chart_options.setter
    def gauge_chart_options(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgs']]):
        pulumi.set(self, "gauge_chart_options", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


if not MYPY:
    class VisualsGaugeChartVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        target_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsGaugeChartVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 target_values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if target_values is not None:
            pulumi.set(__self__, "target_values", target_values)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="targetValues")
    def target_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "target_values")

    @target_values.setter
    def target_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "target_values", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgsDict(TypedDict):
        arc: NotRequired[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcArgsDict']]
        arc_axis: NotRequired[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisArgsDict']]
        comparison: NotRequired[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonArgsDict']]
        primary_value_display_type: NotRequired[pulumi.Input[str]]
        primary_value_font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
elif False:
    VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArgs:
    def __init__(__self__, *,
                 arc: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcArgs']] = None,
                 arc_axis: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisArgs']] = None,
                 comparison: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonArgs']] = None,
                 primary_value_display_type: Optional[pulumi.Input[str]] = None,
                 primary_value_font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None):
        if arc is not None:
            pulumi.set(__self__, "arc", arc)
        if arc_axis is not None:
            pulumi.set(__self__, "arc_axis", arc_axis)
        if comparison is not None:
            pulumi.set(__self__, "comparison", comparison)
        if primary_value_display_type is not None:
            pulumi.set(__self__, "primary_value_display_type", primary_value_display_type)
        if primary_value_font_configuration is not None:
            pulumi.set(__self__, "primary_value_font_configuration", primary_value_font_configuration)

    @property
    @pulumi.getter
    def arc(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcArgs']]:
        return pulumi.get(self, "arc")

    @arc.setter
    def arc(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcArgs']]):
        pulumi.set(self, "arc", value)

    @property
    @pulumi.getter(name="arcAxis")
    def arc_axis(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisArgs']]:
        return pulumi.get(self, "arc_axis")

    @arc_axis.setter
    def arc_axis(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisArgs']]):
        pulumi.set(self, "arc_axis", value)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonArgs']]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonArgs']]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter(name="primaryValueDisplayType")
    def primary_value_display_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_value_display_type")

    @primary_value_display_type.setter
    def primary_value_display_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_value_display_type", value)

    @property
    @pulumi.getter(name="primaryValueFontConfiguration")
    def primary_value_font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "primary_value_font_configuration")

    @primary_value_font_configuration.setter
    def primary_value_font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "primary_value_font_configuration", value)


if not MYPY:
    class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcArgsDict(TypedDict):
        arc_angle: NotRequired[pulumi.Input[float]]
        arc_thickness: NotRequired[pulumi.Input[str]]
elif False:
    VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcArgs:
    def __init__(__self__, *,
                 arc_angle: Optional[pulumi.Input[float]] = None,
                 arc_thickness: Optional[pulumi.Input[str]] = None):
        if arc_angle is not None:
            pulumi.set(__self__, "arc_angle", arc_angle)
        if arc_thickness is not None:
            pulumi.set(__self__, "arc_thickness", arc_thickness)

    @property
    @pulumi.getter(name="arcAngle")
    def arc_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "arc_angle")

    @arc_angle.setter
    def arc_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "arc_angle", value)

    @property
    @pulumi.getter(name="arcThickness")
    def arc_thickness(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arc_thickness")

    @arc_thickness.setter
    def arc_thickness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arc_thickness", value)


if not MYPY:
    class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisArgsDict(TypedDict):
        range: NotRequired[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRangeArgsDict']]
        reserve_range: NotRequired[pulumi.Input[int]]
elif False:
    VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRangeArgs']] = None,
                 reserve_range: Optional[pulumi.Input[int]] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)
        if reserve_range is not None:
            pulumi.set(__self__, "reserve_range", reserve_range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter(name="reserveRange")
    def reserve_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reserve_range")

    @reserve_range.setter
    def reserve_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserve_range", value)


if not MYPY:
    class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRangeArgsDict(TypedDict):
        max: NotRequired[pulumi.Input[float]]
        min: NotRequired[pulumi.Input[float]]
elif False:
    VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRangeArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min", value)


if not MYPY:
    class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonArgsDict(TypedDict):
        comparison_format: NotRequired[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormatArgsDict']]
        comparison_method: NotRequired[pulumi.Input[str]]
elif False:
    VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonArgs:
    def __init__(__self__, *,
                 comparison_format: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormatArgs']] = None,
                 comparison_method: Optional[pulumi.Input[str]] = None):
        if comparison_format is not None:
            pulumi.set(__self__, "comparison_format", comparison_format)
        if comparison_method is not None:
            pulumi.set(__self__, "comparison_method", comparison_method)

    @property
    @pulumi.getter(name="comparisonFormat")
    def comparison_format(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormatArgs']]:
        return pulumi.get(self, "comparison_format")

    @comparison_format.setter
    def comparison_format(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormatArgs']]):
        pulumi.set(self, "comparison_format", value)

    @property
    @pulumi.getter(name="comparisonMethod")
    def comparison_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comparison_method")

    @comparison_method.setter
    def comparison_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison_method", value)


if not MYPY:
    class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormatArgsDict(TypedDict):
        number_display_format_configuration: NotRequired[pulumi.Input['NumberDisplayFormatConfigurationArgsDict']]
        percentage_display_format_configuration: NotRequired[pulumi.Input['PercentageDisplayFormatConfigurationArgsDict']]
elif False:
    VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormatArgs:
    def __init__(__self__, *,
                 number_display_format_configuration: Optional[pulumi.Input['NumberDisplayFormatConfigurationArgs']] = None,
                 percentage_display_format_configuration: Optional[pulumi.Input['PercentageDisplayFormatConfigurationArgs']] = None):
        if number_display_format_configuration is not None:
            pulumi.set(__self__, "number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            pulumi.set(__self__, "percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional[pulumi.Input['NumberDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "number_display_format_configuration")

    @number_display_format_configuration.setter
    def number_display_format_configuration(self, value: Optional[pulumi.Input['NumberDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "number_display_format_configuration", value)

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional[pulumi.Input['PercentageDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "percentage_display_format_configuration")

    @percentage_display_format_configuration.setter
    def percentage_display_format_configuration(self, value: Optional[pulumi.Input['PercentageDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "percentage_display_format_configuration", value)


if not MYPY:
    class VisualsGaugeChartVisualConditionalFormattingArgsDict(TypedDict):
        conditional_formatting_options: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArgsDict']]]]
elif False:
    VisualsGaugeChartVisualConditionalFormattingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArgs']]]] = None):
        if conditional_formatting_options is not None:
            pulumi.set(__self__, "conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


if not MYPY:
    class VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArgsDict(TypedDict):
        arc: NotRequired[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgsDict']]
        primary_value: NotRequired[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgsDict']]
elif False:
    VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 arc: Optional[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs']] = None,
                 primary_value: Optional[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgs']] = None):
        if arc is not None:
            pulumi.set(__self__, "arc", arc)
        if primary_value is not None:
            pulumi.set(__self__, "primary_value", primary_value)

    @property
    @pulumi.getter
    def arc(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs']]:
        return pulumi.get(self, "arc")

    @arc.setter
    def arc(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs']]):
        pulumi.set(self, "arc", value)

    @property
    @pulumi.getter(name="primaryValue")
    def primary_value(self) -> Optional[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgs']]:
        return pulumi.get(self, "primary_value")

    @primary_value.setter
    def primary_value(self, value: Optional[pulumi.Input['VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgs']]):
        pulumi.set(self, "primary_value", value)


if not MYPY:
    class VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgsDict(TypedDict):
        foreground_color: pulumi.Input['ConditionalFormattingColorArgsDict']
elif False:
    VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArcArgs:
    def __init__(__self__, *,
                 foreground_color: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(__self__, "foreground_color", foreground_color)

    @property
    @pulumi.getter(name="foregroundColor")
    def foreground_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "foreground_color")

    @foreground_color.setter
    def foreground_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "foreground_color", value)


if not MYPY:
    class VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgsDict(TypedDict):
        text_color: pulumi.Input['ConditionalFormattingColorArgsDict']
        icon: NotRequired[pulumi.Input['ConditionalFormattingIconArgsDict']]
elif False:
    VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgs:
    def __init__(__self__, *,
                 text_color: pulumi.Input['ConditionalFormattingColorArgs'],
                 icon: Optional[pulumi.Input['ConditionalFormattingIconArgs']] = None):
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "text_color", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['ConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['ConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)


if not MYPY:
    class VisualsGeospatialMapVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsGeospatialMapVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsGeospatialMapVisualChartConfigurationArgsDict(TypedDict):
        field_wells: NotRequired[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationFieldWellsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        map_style_options: NotRequired[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationMapStyleOptionsArgsDict']]
        point_style_options: NotRequired[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
        window_options: NotRequired[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationWindowOptionsArgsDict']]
elif False:
    VisualsGeospatialMapVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 map_style_options: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationMapStyleOptionsArgs']] = None,
                 point_style_options: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None,
                 window_options: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationWindowOptionsArgs']] = None):
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if map_style_options is not None:
            pulumi.set(__self__, "map_style_options", map_style_options)
        if point_style_options is not None:
            pulumi.set(__self__, "point_style_options", point_style_options)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)
        if window_options is not None:
            pulumi.set(__self__, "window_options", window_options)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="mapStyleOptions")
    def map_style_options(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationMapStyleOptionsArgs']]:
        return pulumi.get(self, "map_style_options")

    @map_style_options.setter
    def map_style_options(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationMapStyleOptionsArgs']]):
        pulumi.set(self, "map_style_options", value)

    @property
    @pulumi.getter(name="pointStyleOptions")
    def point_style_options(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsArgs']]:
        return pulumi.get(self, "point_style_options")

    @point_style_options.setter
    def point_style_options(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsArgs']]):
        pulumi.set(self, "point_style_options", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="windowOptions")
    def window_options(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationWindowOptionsArgs']]:
        return pulumi.get(self, "window_options")

    @window_options.setter
    def window_options(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationWindowOptionsArgs']]):
        pulumi.set(self, "window_options", value)


if not MYPY:
    class VisualsGeospatialMapVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        geospatial_map_aggregated_field_wells: NotRequired[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWellsArgsDict']]
elif False:
    VisualsGeospatialMapVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 geospatial_map_aggregated_field_wells: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWellsArgs']] = None):
        if geospatial_map_aggregated_field_wells is not None:
            pulumi.set(__self__, "geospatial_map_aggregated_field_wells", geospatial_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="geospatialMapAggregatedFieldWells")
    def geospatial_map_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "geospatial_map_aggregated_field_wells")

    @geospatial_map_aggregated_field_wells.setter
    def geospatial_map_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "geospatial_map_aggregated_field_wells", value)


if not MYPY:
    class VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWellsArgsDict(TypedDict):
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        geospatials: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 geospatials: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if geospatials is not None:
            pulumi.set(__self__, "geospatials", geospatials)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def geospatials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "geospatials")

    @geospatials.setter
    def geospatials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "geospatials", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsGeospatialMapVisualChartConfigurationMapStyleOptionsArgsDict(TypedDict):
        base_map_style: NotRequired[pulumi.Input[str]]
elif False:
    VisualsGeospatialMapVisualChartConfigurationMapStyleOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualChartConfigurationMapStyleOptionsArgs:
    def __init__(__self__, *,
                 base_map_style: Optional[pulumi.Input[str]] = None):
        if base_map_style is not None:
            pulumi.set(__self__, "base_map_style", base_map_style)

    @property
    @pulumi.getter(name="baseMapStyle")
    def base_map_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_map_style")

    @base_map_style.setter
    def base_map_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_map_style", value)


if not MYPY:
    class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsArgsDict(TypedDict):
        cluster_marker_configuration: NotRequired[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationArgsDict']]
        selected_point_style: NotRequired[pulumi.Input[str]]
elif False:
    VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsArgs:
    def __init__(__self__, *,
                 cluster_marker_configuration: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationArgs']] = None,
                 selected_point_style: Optional[pulumi.Input[str]] = None):
        if cluster_marker_configuration is not None:
            pulumi.set(__self__, "cluster_marker_configuration", cluster_marker_configuration)
        if selected_point_style is not None:
            pulumi.set(__self__, "selected_point_style", selected_point_style)

    @property
    @pulumi.getter(name="clusterMarkerConfiguration")
    def cluster_marker_configuration(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationArgs']]:
        return pulumi.get(self, "cluster_marker_configuration")

    @cluster_marker_configuration.setter
    def cluster_marker_configuration(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationArgs']]):
        pulumi.set(self, "cluster_marker_configuration", value)

    @property
    @pulumi.getter(name="selectedPointStyle")
    def selected_point_style(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selected_point_style")

    @selected_point_style.setter
    def selected_point_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selected_point_style", value)


if not MYPY:
    class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationArgsDict(TypedDict):
        cluster_marker: NotRequired[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerArgsDict']]
elif False:
    VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationArgs:
    def __init__(__self__, *,
                 cluster_marker: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerArgs']] = None):
        if cluster_marker is not None:
            pulumi.set(__self__, "cluster_marker", cluster_marker)

    @property
    @pulumi.getter(name="clusterMarker")
    def cluster_marker(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerArgs']]:
        return pulumi.get(self, "cluster_marker")

    @cluster_marker.setter
    def cluster_marker(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerArgs']]):
        pulumi.set(self, "cluster_marker", value)


if not MYPY:
    class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerArgsDict(TypedDict):
        simple_cluster_marker: NotRequired[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarkerArgsDict']]
elif False:
    VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerArgs:
    def __init__(__self__, *,
                 simple_cluster_marker: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarkerArgs']] = None):
        if simple_cluster_marker is not None:
            pulumi.set(__self__, "simple_cluster_marker", simple_cluster_marker)

    @property
    @pulumi.getter(name="simpleClusterMarker")
    def simple_cluster_marker(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarkerArgs']]:
        return pulumi.get(self, "simple_cluster_marker")

    @simple_cluster_marker.setter
    def simple_cluster_marker(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarkerArgs']]):
        pulumi.set(self, "simple_cluster_marker", value)


if not MYPY:
    class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarkerArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[str]]
elif False:
    VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarkerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarkerArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)


if not MYPY:
    class VisualsGeospatialMapVisualChartConfigurationWindowOptionsArgsDict(TypedDict):
        bounds: NotRequired[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationWindowOptionsBoundsArgsDict']]
        map_zoom_mode: NotRequired[pulumi.Input[str]]
elif False:
    VisualsGeospatialMapVisualChartConfigurationWindowOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualChartConfigurationWindowOptionsArgs:
    def __init__(__self__, *,
                 bounds: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationWindowOptionsBoundsArgs']] = None,
                 map_zoom_mode: Optional[pulumi.Input[str]] = None):
        if bounds is not None:
            pulumi.set(__self__, "bounds", bounds)
        if map_zoom_mode is not None:
            pulumi.set(__self__, "map_zoom_mode", map_zoom_mode)

    @property
    @pulumi.getter
    def bounds(self) -> Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationWindowOptionsBoundsArgs']]:
        return pulumi.get(self, "bounds")

    @bounds.setter
    def bounds(self, value: Optional[pulumi.Input['VisualsGeospatialMapVisualChartConfigurationWindowOptionsBoundsArgs']]):
        pulumi.set(self, "bounds", value)

    @property
    @pulumi.getter(name="mapZoomMode")
    def map_zoom_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "map_zoom_mode")

    @map_zoom_mode.setter
    def map_zoom_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_zoom_mode", value)


if not MYPY:
    class VisualsGeospatialMapVisualChartConfigurationWindowOptionsBoundsArgsDict(TypedDict):
        east: pulumi.Input[float]
        north: pulumi.Input[float]
        south: pulumi.Input[float]
        west: pulumi.Input[float]
elif False:
    VisualsGeospatialMapVisualChartConfigurationWindowOptionsBoundsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsGeospatialMapVisualChartConfigurationWindowOptionsBoundsArgs:
    def __init__(__self__, *,
                 east: pulumi.Input[float],
                 north: pulumi.Input[float],
                 south: pulumi.Input[float],
                 west: pulumi.Input[float]):
        pulumi.set(__self__, "east", east)
        pulumi.set(__self__, "north", north)
        pulumi.set(__self__, "south", south)
        pulumi.set(__self__, "west", west)

    @property
    @pulumi.getter
    def east(self) -> pulumi.Input[float]:
        return pulumi.get(self, "east")

    @east.setter
    def east(self, value: pulumi.Input[float]):
        pulumi.set(self, "east", value)

    @property
    @pulumi.getter
    def north(self) -> pulumi.Input[float]:
        return pulumi.get(self, "north")

    @north.setter
    def north(self, value: pulumi.Input[float]):
        pulumi.set(self, "north", value)

    @property
    @pulumi.getter
    def south(self) -> pulumi.Input[float]:
        return pulumi.get(self, "south")

    @south.setter
    def south(self, value: pulumi.Input[float]):
        pulumi.set(self, "south", value)

    @property
    @pulumi.getter
    def west(self) -> pulumi.Input[float]:
        return pulumi.get(self, "west")

    @west.setter
    def west(self, value: pulumi.Input[float]):
        pulumi.set(self, "west", value)


if not MYPY:
    class VisualsHeatMapVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsHeatMapVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsHeatMapVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHeatMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsHeatMapVisualChartConfigurationArgsDict(TypedDict):
        color_scale: NotRequired[pulumi.Input['ColorScaleArgsDict']]
        column_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsHeatMapVisualChartConfigurationFieldWellsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        row_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsHeatMapVisualChartConfigurationSortConfigurationArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
elif False:
    VisualsHeatMapVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHeatMapVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 color_scale: Optional[pulumi.Input['ColorScaleArgs']] = None,
                 column_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 row_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None):
        if color_scale is not None:
            pulumi.set(__self__, "color_scale", color_scale)
        if column_label_options is not None:
            pulumi.set(__self__, "column_label_options", column_label_options)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if row_label_options is not None:
            pulumi.set(__self__, "row_label_options", row_label_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)

    @property
    @pulumi.getter(name="colorScale")
    def color_scale(self) -> Optional[pulumi.Input['ColorScaleArgs']]:
        return pulumi.get(self, "color_scale")

    @color_scale.setter
    def color_scale(self, value: Optional[pulumi.Input['ColorScaleArgs']]):
        pulumi.set(self, "color_scale", value)

    @property
    @pulumi.getter(name="columnLabelOptions")
    def column_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "column_label_options")

    @column_label_options.setter
    def column_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "column_label_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="rowLabelOptions")
    def row_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "row_label_options")

    @row_label_options.setter
    def row_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "row_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)


if not MYPY:
    class VisualsHeatMapVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        heat_map_aggregated_field_wells: NotRequired[pulumi.Input['VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWellsArgsDict']]
elif False:
    VisualsHeatMapVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHeatMapVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 heat_map_aggregated_field_wells: Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWellsArgs']] = None):
        if heat_map_aggregated_field_wells is not None:
            pulumi.set(__self__, "heat_map_aggregated_field_wells", heat_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="heatMapAggregatedFieldWells")
    def heat_map_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "heat_map_aggregated_field_wells")

    @heat_map_aggregated_field_wells.setter
    def heat_map_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "heat_map_aggregated_field_wells", value)


if not MYPY:
    class VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWellsArgsDict(TypedDict):
        columns: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        rows: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        values: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 rows: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 values: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if rows is not None:
            pulumi.set(__self__, "rows", rows)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsHeatMapVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        heat_map_column_items_limit_configuration: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        heat_map_column_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
        heat_map_row_items_limit_configuration: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        heat_map_row_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsHeatMapVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHeatMapVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 heat_map_column_items_limit_configuration: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 heat_map_column_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None,
                 heat_map_row_items_limit_configuration: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 heat_map_row_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if heat_map_column_items_limit_configuration is not None:
            pulumi.set(__self__, "heat_map_column_items_limit_configuration", heat_map_column_items_limit_configuration)
        if heat_map_column_sorts is not None:
            pulumi.set(__self__, "heat_map_column_sorts", heat_map_column_sorts)
        if heat_map_row_items_limit_configuration is not None:
            pulumi.set(__self__, "heat_map_row_items_limit_configuration", heat_map_row_items_limit_configuration)
        if heat_map_row_sorts is not None:
            pulumi.set(__self__, "heat_map_row_sorts", heat_map_row_sorts)

    @property
    @pulumi.getter(name="heatMapColumnItemsLimitConfiguration")
    def heat_map_column_items_limit_configuration(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "heat_map_column_items_limit_configuration")

    @heat_map_column_items_limit_configuration.setter
    def heat_map_column_items_limit_configuration(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "heat_map_column_items_limit_configuration", value)

    @property
    @pulumi.getter(name="heatMapColumnSorts")
    def heat_map_column_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "heat_map_column_sorts")

    @heat_map_column_sorts.setter
    def heat_map_column_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "heat_map_column_sorts", value)

    @property
    @pulumi.getter(name="heatMapRowItemsLimitConfiguration")
    def heat_map_row_items_limit_configuration(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "heat_map_row_items_limit_configuration")

    @heat_map_row_items_limit_configuration.setter
    def heat_map_row_items_limit_configuration(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "heat_map_row_items_limit_configuration", value)

    @property
    @pulumi.getter(name="heatMapRowSorts")
    def heat_map_row_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "heat_map_row_sorts")

    @heat_map_row_sorts.setter
    def heat_map_row_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "heat_map_row_sorts", value)


if not MYPY:
    class VisualsHistogramVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsHistogramVisualChartConfigurationArgsDict']]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsHistogramVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHistogramVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsHistogramVisualChartConfigurationArgsDict(TypedDict):
        bin_options: NotRequired[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsArgsDict']]
        data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsHistogramVisualChartConfigurationFieldWellsArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
        x_axis_display_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        x_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        y_axis_display_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
elif False:
    VisualsHistogramVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHistogramVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 bin_options: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationFieldWellsArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 y_axis_display_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None):
        if bin_options is not None:
            pulumi.set(__self__, "bin_options", bin_options)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)
        if x_axis_display_options is not None:
            pulumi.set(__self__, "x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            pulumi.set(__self__, "x_axis_label_options", x_axis_label_options)
        if y_axis_display_options is not None:
            pulumi.set(__self__, "y_axis_display_options", y_axis_display_options)

    @property
    @pulumi.getter(name="binOptions")
    def bin_options(self) -> Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsArgs']]:
        return pulumi.get(self, "bin_options")

    @bin_options.setter
    def bin_options(self, value: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsArgs']]):
        pulumi.set(self, "bin_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)

    @property
    @pulumi.getter(name="yAxisDisplayOptions")
    def y_axis_display_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "y_axis_display_options")

    @y_axis_display_options.setter
    def y_axis_display_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "y_axis_display_options", value)


if not MYPY:
    class VisualsHistogramVisualChartConfigurationBinOptionsArgsDict(TypedDict):
        bin_count: NotRequired[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgsDict']]
        bin_width: NotRequired[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgsDict']]
        selected_bin_type: NotRequired[pulumi.Input[str]]
        start_value: NotRequired[pulumi.Input[float]]
elif False:
    VisualsHistogramVisualChartConfigurationBinOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHistogramVisualChartConfigurationBinOptionsArgs:
    def __init__(__self__, *,
                 bin_count: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgs']] = None,
                 bin_width: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgs']] = None,
                 selected_bin_type: Optional[pulumi.Input[str]] = None,
                 start_value: Optional[pulumi.Input[float]] = None):
        if bin_count is not None:
            pulumi.set(__self__, "bin_count", bin_count)
        if bin_width is not None:
            pulumi.set(__self__, "bin_width", bin_width)
        if selected_bin_type is not None:
            pulumi.set(__self__, "selected_bin_type", selected_bin_type)
        if start_value is not None:
            pulumi.set(__self__, "start_value", start_value)

    @property
    @pulumi.getter(name="binCount")
    def bin_count(self) -> Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgs']]:
        return pulumi.get(self, "bin_count")

    @bin_count.setter
    def bin_count(self, value: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgs']]):
        pulumi.set(self, "bin_count", value)

    @property
    @pulumi.getter(name="binWidth")
    def bin_width(self) -> Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgs']]:
        return pulumi.get(self, "bin_width")

    @bin_width.setter
    def bin_width(self, value: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgs']]):
        pulumi.set(self, "bin_width", value)

    @property
    @pulumi.getter(name="selectedBinType")
    def selected_bin_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selected_bin_type")

    @selected_bin_type.setter
    def selected_bin_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selected_bin_type", value)

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_value")

    @start_value.setter
    def start_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_value", value)


if not MYPY:
    class VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgsDict(TypedDict):
        value: NotRequired[pulumi.Input[int]]
elif False:
    VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHistogramVisualChartConfigurationBinOptionsBinCountArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[int]] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgsDict(TypedDict):
        bin_count_limit: NotRequired[pulumi.Input[int]]
        value: NotRequired[pulumi.Input[float]]
elif False:
    VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHistogramVisualChartConfigurationBinOptionsBinWidthArgs:
    def __init__(__self__, *,
                 bin_count_limit: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        if bin_count_limit is not None:
            pulumi.set(__self__, "bin_count_limit", bin_count_limit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="binCountLimit")
    def bin_count_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bin_count_limit")

    @bin_count_limit.setter
    def bin_count_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bin_count_limit", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsHistogramVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        histogram_aggregated_field_wells: NotRequired[pulumi.Input['VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWellsArgsDict']]
elif False:
    VisualsHistogramVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHistogramVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 histogram_aggregated_field_wells: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWellsArgs']] = None):
        if histogram_aggregated_field_wells is not None:
            pulumi.set(__self__, "histogram_aggregated_field_wells", histogram_aggregated_field_wells)

    @property
    @pulumi.getter(name="histogramAggregatedFieldWells")
    def histogram_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "histogram_aggregated_field_wells")

    @histogram_aggregated_field_wells.setter
    def histogram_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWellsArgs']]):
        pulumi.set(self, "histogram_aggregated_field_wells", value)


if not MYPY:
    class VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWellsArgsDict(TypedDict):
        values: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsInsightVisualArgsDict(TypedDict):
        data_set_identifier: pulumi.Input[str]
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        insight_configuration: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationArgsDict']]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsInsightVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 insight_configuration: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if insight_configuration is not None:
            pulumi.set(__self__, "insight_configuration", insight_configuration)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="insightConfiguration")
    def insight_configuration(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationArgs']]:
        return pulumi.get(self, "insight_configuration")

    @insight_configuration.setter
    def insight_configuration(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationArgs']]):
        pulumi.set(self, "insight_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationArgsDict(TypedDict):
        computations: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationArgsDict']]]]
        custom_narrative: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationCustomNarrativeArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationArgs:
    def __init__(__self__, *,
                 computations: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationArgs']]]] = None,
                 custom_narrative: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationCustomNarrativeArgs']] = None):
        if computations is not None:
            pulumi.set(__self__, "computations", computations)
        if custom_narrative is not None:
            pulumi.set(__self__, "custom_narrative", custom_narrative)

    @property
    @pulumi.getter
    def computations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationArgs']]]]:
        return pulumi.get(self, "computations")

    @computations.setter
    def computations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationArgs']]]]):
        pulumi.set(self, "computations", value)

    @property
    @pulumi.getter(name="customNarrative")
    def custom_narrative(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationCustomNarrativeArgs']]:
        return pulumi.get(self, "custom_narrative")

    @custom_narrative.setter
    def custom_narrative(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationCustomNarrativeArgs']]):
        pulumi.set(self, "custom_narrative", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationArgsDict(TypedDict):
        forecast: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationForecastArgsDict']]
        growth_rate: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationGrowthRateArgsDict']]
        maximum_minimum: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationMaximumMinimumArgsDict']]
        metric_comparison: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationMetricComparisonArgsDict']]
        period_over_period: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriodArgsDict']]
        period_to_date: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationPeriodToDateArgsDict']]
        top_bottom_movers: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTopBottomMoversArgsDict']]
        top_bottom_ranked: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTopBottomRankedArgsDict']]
        total_aggregation: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTotalAggregationArgsDict']]
        unique_values: NotRequired[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationUniqueValuesArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationComputationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationArgs:
    def __init__(__self__, *,
                 forecast: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationForecastArgs']] = None,
                 growth_rate: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationGrowthRateArgs']] = None,
                 maximum_minimum: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationMaximumMinimumArgs']] = None,
                 metric_comparison: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationMetricComparisonArgs']] = None,
                 period_over_period: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriodArgs']] = None,
                 period_to_date: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationPeriodToDateArgs']] = None,
                 top_bottom_movers: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTopBottomMoversArgs']] = None,
                 top_bottom_ranked: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTopBottomRankedArgs']] = None,
                 total_aggregation: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTotalAggregationArgs']] = None,
                 unique_values: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationUniqueValuesArgs']] = None):
        if forecast is not None:
            pulumi.set(__self__, "forecast", forecast)
        if growth_rate is not None:
            pulumi.set(__self__, "growth_rate", growth_rate)
        if maximum_minimum is not None:
            pulumi.set(__self__, "maximum_minimum", maximum_minimum)
        if metric_comparison is not None:
            pulumi.set(__self__, "metric_comparison", metric_comparison)
        if period_over_period is not None:
            pulumi.set(__self__, "period_over_period", period_over_period)
        if period_to_date is not None:
            pulumi.set(__self__, "period_to_date", period_to_date)
        if top_bottom_movers is not None:
            pulumi.set(__self__, "top_bottom_movers", top_bottom_movers)
        if top_bottom_ranked is not None:
            pulumi.set(__self__, "top_bottom_ranked", top_bottom_ranked)
        if total_aggregation is not None:
            pulumi.set(__self__, "total_aggregation", total_aggregation)
        if unique_values is not None:
            pulumi.set(__self__, "unique_values", unique_values)

    @property
    @pulumi.getter
    def forecast(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationForecastArgs']]:
        return pulumi.get(self, "forecast")

    @forecast.setter
    def forecast(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationForecastArgs']]):
        pulumi.set(self, "forecast", value)

    @property
    @pulumi.getter(name="growthRate")
    def growth_rate(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationGrowthRateArgs']]:
        return pulumi.get(self, "growth_rate")

    @growth_rate.setter
    def growth_rate(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationGrowthRateArgs']]):
        pulumi.set(self, "growth_rate", value)

    @property
    @pulumi.getter(name="maximumMinimum")
    def maximum_minimum(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationMaximumMinimumArgs']]:
        return pulumi.get(self, "maximum_minimum")

    @maximum_minimum.setter
    def maximum_minimum(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationMaximumMinimumArgs']]):
        pulumi.set(self, "maximum_minimum", value)

    @property
    @pulumi.getter(name="metricComparison")
    def metric_comparison(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationMetricComparisonArgs']]:
        return pulumi.get(self, "metric_comparison")

    @metric_comparison.setter
    def metric_comparison(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationMetricComparisonArgs']]):
        pulumi.set(self, "metric_comparison", value)

    @property
    @pulumi.getter(name="periodOverPeriod")
    def period_over_period(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriodArgs']]:
        return pulumi.get(self, "period_over_period")

    @period_over_period.setter
    def period_over_period(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriodArgs']]):
        pulumi.set(self, "period_over_period", value)

    @property
    @pulumi.getter(name="periodToDate")
    def period_to_date(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationPeriodToDateArgs']]:
        return pulumi.get(self, "period_to_date")

    @period_to_date.setter
    def period_to_date(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationPeriodToDateArgs']]):
        pulumi.set(self, "period_to_date", value)

    @property
    @pulumi.getter(name="topBottomMovers")
    def top_bottom_movers(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTopBottomMoversArgs']]:
        return pulumi.get(self, "top_bottom_movers")

    @top_bottom_movers.setter
    def top_bottom_movers(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTopBottomMoversArgs']]):
        pulumi.set(self, "top_bottom_movers", value)

    @property
    @pulumi.getter(name="topBottomRanked")
    def top_bottom_ranked(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTopBottomRankedArgs']]:
        return pulumi.get(self, "top_bottom_ranked")

    @top_bottom_ranked.setter
    def top_bottom_ranked(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTopBottomRankedArgs']]):
        pulumi.set(self, "top_bottom_ranked", value)

    @property
    @pulumi.getter(name="totalAggregation")
    def total_aggregation(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTotalAggregationArgs']]:
        return pulumi.get(self, "total_aggregation")

    @total_aggregation.setter
    def total_aggregation(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationTotalAggregationArgs']]):
        pulumi.set(self, "total_aggregation", value)

    @property
    @pulumi.getter(name="uniqueValues")
    def unique_values(self) -> Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationUniqueValuesArgs']]:
        return pulumi.get(self, "unique_values")

    @unique_values.setter
    def unique_values(self, value: Optional[pulumi.Input['VisualsInsightVisualInsightConfigurationComputationUniqueValuesArgs']]):
        pulumi.set(self, "unique_values", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationForecastArgsDict(TypedDict):
        computation_id: pulumi.Input[str]
        seasonality: pulumi.Input[str]
        custom_seasonality_value: NotRequired[pulumi.Input[int]]
        lower_boundary: NotRequired[pulumi.Input[float]]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
        periods_backward: NotRequired[pulumi.Input[int]]
        periods_forward: NotRequired[pulumi.Input[int]]
        prediction_interval: NotRequired[pulumi.Input[int]]
        time: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        upper_boundary: NotRequired[pulumi.Input[float]]
        value: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationComputationForecastArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationForecastArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 seasonality: pulumi.Input[str],
                 custom_seasonality_value: Optional[pulumi.Input[int]] = None,
                 lower_boundary: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 periods_backward: Optional[pulumi.Input[int]] = None,
                 periods_forward: Optional[pulumi.Input[int]] = None,
                 prediction_interval: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 upper_boundary: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        pulumi.set(__self__, "seasonality", seasonality)
        if custom_seasonality_value is not None:
            pulumi.set(__self__, "custom_seasonality_value", custom_seasonality_value)
        if lower_boundary is not None:
            pulumi.set(__self__, "lower_boundary", lower_boundary)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if periods_backward is not None:
            pulumi.set(__self__, "periods_backward", periods_backward)
        if periods_forward is not None:
            pulumi.set(__self__, "periods_forward", periods_forward)
        if prediction_interval is not None:
            pulumi.set(__self__, "prediction_interval", prediction_interval)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if upper_boundary is not None:
            pulumi.set(__self__, "upper_boundary", upper_boundary)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def seasonality(self) -> pulumi.Input[str]:
        return pulumi.get(self, "seasonality")

    @seasonality.setter
    def seasonality(self, value: pulumi.Input[str]):
        pulumi.set(self, "seasonality", value)

    @property
    @pulumi.getter(name="customSeasonalityValue")
    def custom_seasonality_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "custom_seasonality_value")

    @custom_seasonality_value.setter
    def custom_seasonality_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_seasonality_value", value)

    @property
    @pulumi.getter(name="lowerBoundary")
    def lower_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lower_boundary")

    @lower_boundary.setter
    def lower_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lower_boundary", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodsBackward")
    def periods_backward(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "periods_backward")

    @periods_backward.setter
    def periods_backward(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "periods_backward", value)

    @property
    @pulumi.getter(name="periodsForward")
    def periods_forward(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "periods_forward")

    @periods_forward.setter
    def periods_forward(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "periods_forward", value)

    @property
    @pulumi.getter(name="predictionInterval")
    def prediction_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prediction_interval")

    @prediction_interval.setter
    def prediction_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prediction_interval", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="upperBoundary")
    def upper_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "upper_boundary")

    @upper_boundary.setter
    def upper_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "upper_boundary", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationGrowthRateArgsDict(TypedDict):
        computation_id: pulumi.Input[str]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
        period_size: NotRequired[pulumi.Input[int]]
        time: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        value: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationComputationGrowthRateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationGrowthRateArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 period_size: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 value: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period_size is not None:
            pulumi.set(__self__, "period_size", period_size)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodSize")
    def period_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_size")

    @period_size.setter
    def period_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_size", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationMaximumMinimumArgsDict(TypedDict):
        computation_id: pulumi.Input[str]
        type: pulumi.Input[str]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
        time: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        value: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationComputationMaximumMinimumArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationMaximumMinimumArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 value: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationMetricComparisonArgsDict(TypedDict):
        computation_id: pulumi.Input[str]
        from_value: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
        target_value: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
        time: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationComputationMetricComparisonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationMetricComparisonArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 from_value: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 target_value: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None,
                 time: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        if from_value is not None:
            pulumi.set(__self__, "from_value", from_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target_value is not None:
            pulumi.set(__self__, "target_value", target_value)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter(name="fromValue")
    def from_value(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "from_value")

    @from_value.setter
    def from_value(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "from_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "target_value", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "time", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriodArgsDict(TypedDict):
        computation_id: pulumi.Input[str]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
        time: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        value: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriodArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 value: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationPeriodToDateArgsDict(TypedDict):
        computation_id: pulumi.Input[str]
        period_time_granularity: pulumi.Input[str]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
        time: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        value: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationComputationPeriodToDateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationPeriodToDateArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 period_time_granularity: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 value: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        pulumi.set(__self__, "period_time_granularity", period_time_granularity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter(name="periodTimeGranularity")
    def period_time_granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "period_time_granularity")

    @period_time_granularity.setter
    def period_time_granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "period_time_granularity", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationTopBottomMoversArgsDict(TypedDict):
        computation_id: pulumi.Input[str]
        sort_order: pulumi.Input[str]
        type: pulumi.Input[str]
        category: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        mover_size: NotRequired[pulumi.Input[int]]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
        time: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        value: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationComputationTopBottomMoversArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationTopBottomMoversArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 sort_order: pulumi.Input[str],
                 type: pulumi.Input[str],
                 category: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 mover_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 value: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "type", type)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if mover_size is not None:
            pulumi.set(__self__, "mover_size", mover_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: pulumi.Input[str]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="moverSize")
    def mover_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mover_size")

    @mover_size.setter
    def mover_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mover_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationTopBottomRankedArgsDict(TypedDict):
        computation_id: pulumi.Input[str]
        type: pulumi.Input[str]
        category: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
        result_size: NotRequired[pulumi.Input[int]]
        value: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationComputationTopBottomRankedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationTopBottomRankedArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 category: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 result_size: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        pulumi.set(__self__, "type", type)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if result_size is not None:
            pulumi.set(__self__, "result_size", result_size)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resultSize")
    def result_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "result_size")

    @result_size.setter
    def result_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "result_size", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationTotalAggregationArgsDict(TypedDict):
        computation_id: pulumi.Input[str]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
        value: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsInsightVisualInsightConfigurationComputationTotalAggregationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationTotalAggregationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationComputationUniqueValuesArgsDict(TypedDict):
        computation_id: pulumi.Input[str]
        category: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        name: NotRequired[pulumi.Input[str]]
        """
        Display name for the dashboard.
        """
elif False:
    VisualsInsightVisualInsightConfigurationComputationUniqueValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationComputationUniqueValuesArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 category: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class VisualsInsightVisualInsightConfigurationCustomNarrativeArgsDict(TypedDict):
        narrative: pulumi.Input[str]
elif False:
    VisualsInsightVisualInsightConfigurationCustomNarrativeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsInsightVisualInsightConfigurationCustomNarrativeArgs:
    def __init__(__self__, *,
                 narrative: pulumi.Input[str]):
        pulumi.set(__self__, "narrative", narrative)

    @property
    @pulumi.getter
    def narrative(self) -> pulumi.Input[str]:
        return pulumi.get(self, "narrative")

    @narrative.setter
    def narrative(self, value: pulumi.Input[str]):
        pulumi.set(self, "narrative", value)


if not MYPY:
    class VisualsKpiVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsKpiVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        conditional_formatting: NotRequired[pulumi.Input['VisualsKpiVisualConditionalFormattingArgsDict']]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsKpiVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 conditional_formatting: Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if conditional_formatting is not None:
            pulumi.set(__self__, "conditional_formatting", conditional_formatting)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsKpiVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsKpiVisualChartConfigurationArgsDict(TypedDict):
        field_wells: NotRequired[pulumi.Input['VisualsKpiVisualChartConfigurationFieldWellsArgsDict']]
        kpi_options: NotRequired[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsKpiVisualChartConfigurationSortConfigurationArgsDict']]
elif False:
    VisualsKpiVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationFieldWellsArgs']] = None,
                 kpi_options: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationSortConfigurationArgs']] = None):
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if kpi_options is not None:
            pulumi.set(__self__, "kpi_options", kpi_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsKpiVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="kpiOptions")
    def kpi_options(self) -> Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsArgs']]:
        return pulumi.get(self, "kpi_options")

    @kpi_options.setter
    def kpi_options(self, value: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsArgs']]):
        pulumi.set(self, "kpi_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsKpiVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)


if not MYPY:
    class VisualsKpiVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        target_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
        trend_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsKpiVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 target_values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None,
                 trend_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if target_values is not None:
            pulumi.set(__self__, "target_values", target_values)
        if trend_groups is not None:
            pulumi.set(__self__, "trend_groups", trend_groups)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="targetValues")
    def target_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "target_values")

    @target_values.setter
    def target_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "target_values", value)

    @property
    @pulumi.getter(name="trendGroups")
    def trend_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "trend_groups")

    @trend_groups.setter
    def trend_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "trend_groups", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsKpiVisualChartConfigurationKpiOptionsArgsDict(TypedDict):
        comparison: NotRequired[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsComparisonArgsDict']]
        primary_value_display_type: NotRequired[pulumi.Input[str]]
        primary_value_font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
        progress_bar: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        secondary_value: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        secondary_value_font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
        sparkline: NotRequired[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgsDict']]
        trend_arrows: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
        visual_layout_options: NotRequired[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsArgsDict']]
elif False:
    VisualsKpiVisualChartConfigurationKpiOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualChartConfigurationKpiOptionsArgs:
    def __init__(__self__, *,
                 comparison: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsComparisonArgs']] = None,
                 primary_value_display_type: Optional[pulumi.Input[str]] = None,
                 primary_value_font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None,
                 progress_bar: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 secondary_value: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 secondary_value_font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None,
                 sparkline: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs']] = None,
                 trend_arrows: Optional[pulumi.Input['SelectAllOptionsArgs']] = None,
                 visual_layout_options: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsArgs']] = None):
        if comparison is not None:
            pulumi.set(__self__, "comparison", comparison)
        if primary_value_display_type is not None:
            pulumi.set(__self__, "primary_value_display_type", primary_value_display_type)
        if primary_value_font_configuration is not None:
            pulumi.set(__self__, "primary_value_font_configuration", primary_value_font_configuration)
        if progress_bar is not None:
            pulumi.set(__self__, "progress_bar", progress_bar)
        if secondary_value is not None:
            pulumi.set(__self__, "secondary_value", secondary_value)
        if secondary_value_font_configuration is not None:
            pulumi.set(__self__, "secondary_value_font_configuration", secondary_value_font_configuration)
        if sparkline is not None:
            pulumi.set(__self__, "sparkline", sparkline)
        if trend_arrows is not None:
            pulumi.set(__self__, "trend_arrows", trend_arrows)
        if visual_layout_options is not None:
            pulumi.set(__self__, "visual_layout_options", visual_layout_options)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsComparisonArgs']]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsComparisonArgs']]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter(name="primaryValueDisplayType")
    def primary_value_display_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_value_display_type")

    @primary_value_display_type.setter
    def primary_value_display_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_value_display_type", value)

    @property
    @pulumi.getter(name="primaryValueFontConfiguration")
    def primary_value_font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "primary_value_font_configuration")

    @primary_value_font_configuration.setter
    def primary_value_font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "primary_value_font_configuration", value)

    @property
    @pulumi.getter(name="progressBar")
    def progress_bar(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "progress_bar")

    @progress_bar.setter
    def progress_bar(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "progress_bar", value)

    @property
    @pulumi.getter(name="secondaryValue")
    def secondary_value(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "secondary_value")

    @secondary_value.setter
    def secondary_value(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "secondary_value", value)

    @property
    @pulumi.getter(name="secondaryValueFontConfiguration")
    def secondary_value_font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "secondary_value_font_configuration")

    @secondary_value_font_configuration.setter
    def secondary_value_font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "secondary_value_font_configuration", value)

    @property
    @pulumi.getter
    def sparkline(self) -> Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs']]:
        return pulumi.get(self, "sparkline")

    @sparkline.setter
    def sparkline(self, value: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs']]):
        pulumi.set(self, "sparkline", value)

    @property
    @pulumi.getter(name="trendArrows")
    def trend_arrows(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "trend_arrows")

    @trend_arrows.setter
    def trend_arrows(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "trend_arrows", value)

    @property
    @pulumi.getter(name="visualLayoutOptions")
    def visual_layout_options(self) -> Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsArgs']]:
        return pulumi.get(self, "visual_layout_options")

    @visual_layout_options.setter
    def visual_layout_options(self, value: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsArgs']]):
        pulumi.set(self, "visual_layout_options", value)


if not MYPY:
    class VisualsKpiVisualChartConfigurationKpiOptionsComparisonArgsDict(TypedDict):
        comparison_format: NotRequired[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormatArgsDict']]
        comparison_method: NotRequired[pulumi.Input[str]]
elif False:
    VisualsKpiVisualChartConfigurationKpiOptionsComparisonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualChartConfigurationKpiOptionsComparisonArgs:
    def __init__(__self__, *,
                 comparison_format: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormatArgs']] = None,
                 comparison_method: Optional[pulumi.Input[str]] = None):
        if comparison_format is not None:
            pulumi.set(__self__, "comparison_format", comparison_format)
        if comparison_method is not None:
            pulumi.set(__self__, "comparison_method", comparison_method)

    @property
    @pulumi.getter(name="comparisonFormat")
    def comparison_format(self) -> Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormatArgs']]:
        return pulumi.get(self, "comparison_format")

    @comparison_format.setter
    def comparison_format(self, value: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormatArgs']]):
        pulumi.set(self, "comparison_format", value)

    @property
    @pulumi.getter(name="comparisonMethod")
    def comparison_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comparison_method")

    @comparison_method.setter
    def comparison_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison_method", value)


if not MYPY:
    class VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormatArgsDict(TypedDict):
        number_display_format_configuration: NotRequired[pulumi.Input['NumberDisplayFormatConfigurationArgsDict']]
        percentage_display_format_configuration: NotRequired[pulumi.Input['PercentageDisplayFormatConfigurationArgsDict']]
elif False:
    VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormatArgs:
    def __init__(__self__, *,
                 number_display_format_configuration: Optional[pulumi.Input['NumberDisplayFormatConfigurationArgs']] = None,
                 percentage_display_format_configuration: Optional[pulumi.Input['PercentageDisplayFormatConfigurationArgs']] = None):
        if number_display_format_configuration is not None:
            pulumi.set(__self__, "number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            pulumi.set(__self__, "percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional[pulumi.Input['NumberDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "number_display_format_configuration")

    @number_display_format_configuration.setter
    def number_display_format_configuration(self, value: Optional[pulumi.Input['NumberDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "number_display_format_configuration", value)

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional[pulumi.Input['PercentageDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "percentage_display_format_configuration")

    @percentage_display_format_configuration.setter
    def percentage_display_format_configuration(self, value: Optional[pulumi.Input['PercentageDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "percentage_display_format_configuration", value)


if not MYPY:
    class VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgsDict(TypedDict):
        type: pulumi.Input[str]
        color: NotRequired[pulumi.Input[str]]
        tooltip_visibility: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualChartConfigurationKpiOptionsSparklineArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None,
                 tooltip_visibility: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if tooltip_visibility is not None:
            pulumi.set(__self__, "tooltip_visibility", tooltip_visibility)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="tooltipVisibility")
    def tooltip_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tooltip_visibility")

    @tooltip_visibility.setter
    def tooltip_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tooltip_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsArgsDict(TypedDict):
        standard_layout: NotRequired[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayoutArgsDict']]
elif False:
    VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsArgs:
    def __init__(__self__, *,
                 standard_layout: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayoutArgs']] = None):
        if standard_layout is not None:
            pulumi.set(__self__, "standard_layout", standard_layout)

    @property
    @pulumi.getter(name="standardLayout")
    def standard_layout(self) -> Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayoutArgs']]:
        return pulumi.get(self, "standard_layout")

    @standard_layout.setter
    def standard_layout(self, value: Optional[pulumi.Input['VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayoutArgs']]):
        pulumi.set(self, "standard_layout", value)


if not MYPY:
    class VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayoutArgsDict(TypedDict):
        type: pulumi.Input[str]
elif False:
    VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayoutArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayoutArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class VisualsKpiVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        trend_group_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsKpiVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 trend_group_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if trend_group_sorts is not None:
            pulumi.set(__self__, "trend_group_sorts", trend_group_sorts)

    @property
    @pulumi.getter(name="trendGroupSorts")
    def trend_group_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "trend_group_sorts")

    @trend_group_sorts.setter
    def trend_group_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "trend_group_sorts", value)


if not MYPY:
    class VisualsKpiVisualConditionalFormattingArgsDict(TypedDict):
        conditional_formatting_options: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionArgsDict']]]]
elif False:
    VisualsKpiVisualConditionalFormattingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionArgs']]]] = None):
        if conditional_formatting_options is not None:
            pulumi.set(__self__, "conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


if not MYPY:
    class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionArgsDict(TypedDict):
        actual_value: NotRequired[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgsDict']]
        comparison_value: NotRequired[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValueArgsDict']]
        primary_value: NotRequired[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgsDict']]
        progress_bar: NotRequired[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBarArgsDict']]
elif False:
    VisualsKpiVisualConditionalFormattingConditionalFormattingOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 actual_value: Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs']] = None,
                 comparison_value: Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValueArgs']] = None,
                 primary_value: Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgs']] = None,
                 progress_bar: Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBarArgs']] = None):
        if actual_value is not None:
            pulumi.set(__self__, "actual_value", actual_value)
        if comparison_value is not None:
            pulumi.set(__self__, "comparison_value", comparison_value)
        if primary_value is not None:
            pulumi.set(__self__, "primary_value", primary_value)
        if progress_bar is not None:
            pulumi.set(__self__, "progress_bar", progress_bar)

    @property
    @pulumi.getter(name="actualValue")
    def actual_value(self) -> Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs']]:
        return pulumi.get(self, "actual_value")

    @actual_value.setter
    def actual_value(self, value: Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs']]):
        pulumi.set(self, "actual_value", value)

    @property
    @pulumi.getter(name="comparisonValue")
    def comparison_value(self) -> Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValueArgs']]:
        return pulumi.get(self, "comparison_value")

    @comparison_value.setter
    def comparison_value(self, value: Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValueArgs']]):
        pulumi.set(self, "comparison_value", value)

    @property
    @pulumi.getter(name="primaryValue")
    def primary_value(self) -> Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgs']]:
        return pulumi.get(self, "primary_value")

    @primary_value.setter
    def primary_value(self, value: Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgs']]):
        pulumi.set(self, "primary_value", value)

    @property
    @pulumi.getter(name="progressBar")
    def progress_bar(self) -> Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBarArgs']]:
        return pulumi.get(self, "progress_bar")

    @progress_bar.setter
    def progress_bar(self, value: Optional[pulumi.Input['VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBarArgs']]):
        pulumi.set(self, "progress_bar", value)


if not MYPY:
    class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgsDict(TypedDict):
        text_color: pulumi.Input['ConditionalFormattingColorArgsDict']
        icon: NotRequired[pulumi.Input['ConditionalFormattingIconArgsDict']]
elif False:
    VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValueArgs:
    def __init__(__self__, *,
                 text_color: pulumi.Input['ConditionalFormattingColorArgs'],
                 icon: Optional[pulumi.Input['ConditionalFormattingIconArgs']] = None):
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "text_color", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['ConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['ConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)


if not MYPY:
    class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValueArgsDict(TypedDict):
        text_color: pulumi.Input['ConditionalFormattingColorArgsDict']
        icon: NotRequired[pulumi.Input['ConditionalFormattingIconArgsDict']]
elif False:
    VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValueArgs:
    def __init__(__self__, *,
                 text_color: pulumi.Input['ConditionalFormattingColorArgs'],
                 icon: Optional[pulumi.Input['ConditionalFormattingIconArgs']] = None):
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "text_color", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['ConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['ConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)


if not MYPY:
    class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgsDict(TypedDict):
        text_color: pulumi.Input['ConditionalFormattingColorArgsDict']
        icon: NotRequired[pulumi.Input['ConditionalFormattingIconArgsDict']]
elif False:
    VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValueArgs:
    def __init__(__self__, *,
                 text_color: pulumi.Input['ConditionalFormattingColorArgs'],
                 icon: Optional[pulumi.Input['ConditionalFormattingIconArgs']] = None):
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "text_color", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['ConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['ConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)


if not MYPY:
    class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBarArgsDict(TypedDict):
        foreground_color: pulumi.Input['ConditionalFormattingColorArgsDict']
elif False:
    VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBarArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBarArgs:
    def __init__(__self__, *,
                 foreground_color: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(__self__, "foreground_color", foreground_color)

    @property
    @pulumi.getter(name="foregroundColor")
    def foreground_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "foreground_color")

    @foreground_color.setter
    def foreground_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "foreground_color", value)


if not MYPY:
    class VisualsLineChartVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsLineChartVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationArgsDict(TypedDict):
        contribution_analysis_defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgsDict']]]]
        data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        default_series_settings: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationDefaultSeriesSettingsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationFieldWellsArgsDict']]
        forecast_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationArgsDict']]]]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        primary_y_axis_display_options: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsArgsDict']]
        primary_y_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        reference_lines: NotRequired[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgsDict']]]]
        secondary_y_axis_display_options: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsArgsDict']]
        secondary_y_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        series: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesArgsDict']]]]
        small_multiples_options: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationSortConfigurationArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        type: NotRequired[pulumi.Input[str]]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
        x_axis_display_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        x_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
elif False:
    VisualsLineChartVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 default_series_settings: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationDefaultSeriesSettingsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationFieldWellsArgs']] = None,
                 forecast_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationArgs']]]] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]] = None,
                 secondary_y_axis_display_options: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsArgs']] = None,
                 secondary_y_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 series: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesArgs']]]] = None,
                 small_multiples_options: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None):
        if contribution_analysis_defaults is not None:
            pulumi.set(__self__, "contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if default_series_settings is not None:
            pulumi.set(__self__, "default_series_settings", default_series_settings)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if forecast_configurations is not None:
            pulumi.set(__self__, "forecast_configurations", forecast_configurations)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if primary_y_axis_display_options is not None:
            pulumi.set(__self__, "primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            pulumi.set(__self__, "primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            pulumi.set(__self__, "reference_lines", reference_lines)
        if secondary_y_axis_display_options is not None:
            pulumi.set(__self__, "secondary_y_axis_display_options", secondary_y_axis_display_options)
        if secondary_y_axis_label_options is not None:
            pulumi.set(__self__, "secondary_y_axis_label_options", secondary_y_axis_label_options)
        if series is not None:
            pulumi.set(__self__, "series", series)
        if small_multiples_options is not None:
            pulumi.set(__self__, "small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)
        if x_axis_display_options is not None:
            pulumi.set(__self__, "x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            pulumi.set(__self__, "x_axis_label_options", x_axis_label_options)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="defaultSeriesSettings")
    def default_series_settings(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationDefaultSeriesSettingsArgs']]:
        return pulumi.get(self, "default_series_settings")

    @default_series_settings.setter
    def default_series_settings(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationDefaultSeriesSettingsArgs']]):
        pulumi.set(self, "default_series_settings", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="forecastConfigurations")
    def forecast_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationArgs']]]]:
        return pulumi.get(self, "forecast_configurations")

    @forecast_configurations.setter
    def forecast_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationArgs']]]]):
        pulumi.set(self, "forecast_configurations", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="secondaryYAxisDisplayOptions")
    def secondary_y_axis_display_options(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_display_options")

    @secondary_y_axis_display_options.setter
    def secondary_y_axis_display_options(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="secondaryYAxisLabelOptions")
    def secondary_y_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_label_options")

    @secondary_y_axis_label_options.setter
    def secondary_y_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_label_options", value)

    @property
    @pulumi.getter
    def series(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesArgs']]]]:
        return pulumi.get(self, "series")

    @series.setter
    def series(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesArgs']]]]):
        pulumi.set(self, "series", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationDefaultSeriesSettingsArgsDict(TypedDict):
        axis_binding: NotRequired[pulumi.Input[str]]
        line_style_settings: NotRequired[pulumi.Input['LineChartLineStyleSettingsArgsDict']]
        marker_style_settings: NotRequired[pulumi.Input['LineChartMarkerStyleSettingsArgsDict']]
elif False:
    VisualsLineChartVisualChartConfigurationDefaultSeriesSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationDefaultSeriesSettingsArgs:
    def __init__(__self__, *,
                 axis_binding: Optional[pulumi.Input[str]] = None,
                 line_style_settings: Optional[pulumi.Input['LineChartLineStyleSettingsArgs']] = None,
                 marker_style_settings: Optional[pulumi.Input['LineChartMarkerStyleSettingsArgs']] = None):
        if axis_binding is not None:
            pulumi.set(__self__, "axis_binding", axis_binding)
        if line_style_settings is not None:
            pulumi.set(__self__, "line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            pulumi.set(__self__, "marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional[pulumi.Input['LineChartLineStyleSettingsArgs']]:
        return pulumi.get(self, "line_style_settings")

    @line_style_settings.setter
    def line_style_settings(self, value: Optional[pulumi.Input['LineChartLineStyleSettingsArgs']]):
        pulumi.set(self, "line_style_settings", value)

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional[pulumi.Input['LineChartMarkerStyleSettingsArgs']]:
        return pulumi.get(self, "marker_style_settings")

    @marker_style_settings.setter
    def marker_style_settings(self, value: Optional[pulumi.Input['LineChartMarkerStyleSettingsArgs']]):
        pulumi.set(self, "marker_style_settings", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        line_chart_aggregated_field_wells: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWellsArgsDict']]
elif False:
    VisualsLineChartVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 line_chart_aggregated_field_wells: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWellsArgs']] = None):
        if line_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "line_chart_aggregated_field_wells", line_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="lineChartAggregatedFieldWells")
    def line_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "line_chart_aggregated_field_wells")

    @line_chart_aggregated_field_wells.setter
    def line_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "line_chart_aggregated_field_wells", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWellsArgsDict(TypedDict):
        categories: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        colors: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        small_multiples: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if small_multiples is not None:
            pulumi.set(__self__, "small_multiples", small_multiples)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationForecastConfigurationArgsDict(TypedDict):
        forecast_properties: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgsDict']]
        scenario: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioArgsDict']]
elif False:
    VisualsLineChartVisualChartConfigurationForecastConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationForecastConfigurationArgs:
    def __init__(__self__, *,
                 forecast_properties: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs']] = None,
                 scenario: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioArgs']] = None):
        if forecast_properties is not None:
            pulumi.set(__self__, "forecast_properties", forecast_properties)
        if scenario is not None:
            pulumi.set(__self__, "scenario", scenario)

    @property
    @pulumi.getter(name="forecastProperties")
    def forecast_properties(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs']]:
        return pulumi.get(self, "forecast_properties")

    @forecast_properties.setter
    def forecast_properties(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs']]):
        pulumi.set(self, "forecast_properties", value)

    @property
    @pulumi.getter
    def scenario(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioArgs']]:
        return pulumi.get(self, "scenario")

    @scenario.setter
    def scenario(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioArgs']]):
        pulumi.set(self, "scenario", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgsDict(TypedDict):
        lower_boundary: NotRequired[pulumi.Input[float]]
        periods_backward: NotRequired[pulumi.Input[int]]
        periods_forward: NotRequired[pulumi.Input[int]]
        prediction_interval: NotRequired[pulumi.Input[int]]
        seasonality: NotRequired[pulumi.Input[int]]
        upper_boundary: NotRequired[pulumi.Input[float]]
elif False:
    VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationForecastConfigurationForecastPropertiesArgs:
    def __init__(__self__, *,
                 lower_boundary: Optional[pulumi.Input[float]] = None,
                 periods_backward: Optional[pulumi.Input[int]] = None,
                 periods_forward: Optional[pulumi.Input[int]] = None,
                 prediction_interval: Optional[pulumi.Input[int]] = None,
                 seasonality: Optional[pulumi.Input[int]] = None,
                 upper_boundary: Optional[pulumi.Input[float]] = None):
        if lower_boundary is not None:
            pulumi.set(__self__, "lower_boundary", lower_boundary)
        if periods_backward is not None:
            pulumi.set(__self__, "periods_backward", periods_backward)
        if periods_forward is not None:
            pulumi.set(__self__, "periods_forward", periods_forward)
        if prediction_interval is not None:
            pulumi.set(__self__, "prediction_interval", prediction_interval)
        if seasonality is not None:
            pulumi.set(__self__, "seasonality", seasonality)
        if upper_boundary is not None:
            pulumi.set(__self__, "upper_boundary", upper_boundary)

    @property
    @pulumi.getter(name="lowerBoundary")
    def lower_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lower_boundary")

    @lower_boundary.setter
    def lower_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lower_boundary", value)

    @property
    @pulumi.getter(name="periodsBackward")
    def periods_backward(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "periods_backward")

    @periods_backward.setter
    def periods_backward(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "periods_backward", value)

    @property
    @pulumi.getter(name="periodsForward")
    def periods_forward(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "periods_forward")

    @periods_forward.setter
    def periods_forward(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "periods_forward", value)

    @property
    @pulumi.getter(name="predictionInterval")
    def prediction_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "prediction_interval")

    @prediction_interval.setter
    def prediction_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prediction_interval", value)

    @property
    @pulumi.getter
    def seasonality(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seasonality")

    @seasonality.setter
    def seasonality(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seasonality", value)

    @property
    @pulumi.getter(name="upperBoundary")
    def upper_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "upper_boundary")

    @upper_boundary.setter
    def upper_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "upper_boundary", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioArgsDict(TypedDict):
        what_if_point_scenario: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenarioArgsDict']]
        what_if_range_scenario: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenarioArgsDict']]
elif False:
    VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioArgs:
    def __init__(__self__, *,
                 what_if_point_scenario: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenarioArgs']] = None,
                 what_if_range_scenario: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenarioArgs']] = None):
        if what_if_point_scenario is not None:
            pulumi.set(__self__, "what_if_point_scenario", what_if_point_scenario)
        if what_if_range_scenario is not None:
            pulumi.set(__self__, "what_if_range_scenario", what_if_range_scenario)

    @property
    @pulumi.getter(name="whatIfPointScenario")
    def what_if_point_scenario(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenarioArgs']]:
        return pulumi.get(self, "what_if_point_scenario")

    @what_if_point_scenario.setter
    def what_if_point_scenario(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenarioArgs']]):
        pulumi.set(self, "what_if_point_scenario", value)

    @property
    @pulumi.getter(name="whatIfRangeScenario")
    def what_if_range_scenario(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenarioArgs']]:
        return pulumi.get(self, "what_if_range_scenario")

    @what_if_range_scenario.setter
    def what_if_range_scenario(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenarioArgs']]):
        pulumi.set(self, "what_if_range_scenario", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenarioArgsDict(TypedDict):
        date: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenarioArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenarioArgs:
    def __init__(__self__, *,
                 date: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: pulumi.Input[str]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenarioArgsDict(TypedDict):
        end_date: pulumi.Input[str]
        start_date: pulumi.Input[str]
        value: pulumi.Input[float]
elif False:
    VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenarioArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenarioArgs:
    def __init__(__self__, *,
                 end_date: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsArgsDict(TypedDict):
        axis_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        missing_data_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfigurationArgsDict']]]]
elif False:
    VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsArgs:
    def __init__(__self__, *,
                 axis_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 missing_data_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfigurationArgs']]]] = None):
        if axis_options is not None:
            pulumi.set(__self__, "axis_options", axis_options)
        if missing_data_configurations is not None:
            pulumi.set(__self__, "missing_data_configurations", missing_data_configurations)

    @property
    @pulumi.getter(name="axisOptions")
    def axis_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "axis_options")

    @axis_options.setter
    def axis_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "axis_options", value)

    @property
    @pulumi.getter(name="missingDataConfigurations")
    def missing_data_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfigurationArgs']]]]:
        return pulumi.get(self, "missing_data_configurations")

    @missing_data_configurations.setter
    def missing_data_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfigurationArgs']]]]):
        pulumi.set(self, "missing_data_configurations", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfigurationArgsDict(TypedDict):
        treatment_option: NotRequired[pulumi.Input[str]]
elif False:
    VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfigurationArgs:
    def __init__(__self__, *,
                 treatment_option: Optional[pulumi.Input[str]] = None):
        if treatment_option is not None:
            pulumi.set(__self__, "treatment_option", treatment_option)

    @property
    @pulumi.getter(name="treatmentOption")
    def treatment_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "treatment_option")

    @treatment_option.setter
    def treatment_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "treatment_option", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsArgsDict(TypedDict):
        axis_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        missing_data_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfigurationArgsDict']]]]
elif False:
    VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsArgs:
    def __init__(__self__, *,
                 axis_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 missing_data_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfigurationArgs']]]] = None):
        if axis_options is not None:
            pulumi.set(__self__, "axis_options", axis_options)
        if missing_data_configurations is not None:
            pulumi.set(__self__, "missing_data_configurations", missing_data_configurations)

    @property
    @pulumi.getter(name="axisOptions")
    def axis_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "axis_options")

    @axis_options.setter
    def axis_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "axis_options", value)

    @property
    @pulumi.getter(name="missingDataConfigurations")
    def missing_data_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfigurationArgs']]]]:
        return pulumi.get(self, "missing_data_configurations")

    @missing_data_configurations.setter
    def missing_data_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfigurationArgs']]]]):
        pulumi.set(self, "missing_data_configurations", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfigurationArgsDict(TypedDict):
        treatment_option: NotRequired[pulumi.Input[str]]
elif False:
    VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfigurationArgs:
    def __init__(__self__, *,
                 treatment_option: Optional[pulumi.Input[str]] = None):
        if treatment_option is not None:
            pulumi.set(__self__, "treatment_option", treatment_option)

    @property
    @pulumi.getter(name="treatmentOption")
    def treatment_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "treatment_option")

    @treatment_option.setter
    def treatment_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "treatment_option", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationSeriesArgsDict(TypedDict):
        data_field_series_item: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemArgsDict']]
        field_series_item: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemArgsDict']]
elif False:
    VisualsLineChartVisualChartConfigurationSeriesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationSeriesArgs:
    def __init__(__self__, *,
                 data_field_series_item: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemArgs']] = None,
                 field_series_item: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemArgs']] = None):
        if data_field_series_item is not None:
            pulumi.set(__self__, "data_field_series_item", data_field_series_item)
        if field_series_item is not None:
            pulumi.set(__self__, "field_series_item", field_series_item)

    @property
    @pulumi.getter(name="dataFieldSeriesItem")
    def data_field_series_item(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemArgs']]:
        return pulumi.get(self, "data_field_series_item")

    @data_field_series_item.setter
    def data_field_series_item(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemArgs']]):
        pulumi.set(self, "data_field_series_item", value)

    @property
    @pulumi.getter(name="fieldSeriesItem")
    def field_series_item(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemArgs']]:
        return pulumi.get(self, "field_series_item")

    @field_series_item.setter
    def field_series_item(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemArgs']]):
        pulumi.set(self, "field_series_item", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemArgsDict(TypedDict):
        axis_binding: pulumi.Input[str]
        field_id: pulumi.Input[str]
        field_value: NotRequired[pulumi.Input[str]]
        settings: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettingsArgsDict']]
elif False:
    VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemArgs:
    def __init__(__self__, *,
                 axis_binding: pulumi.Input[str],
                 field_id: pulumi.Input[str],
                 field_value: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettingsArgs']] = None):
        pulumi.set(__self__, "axis_binding", axis_binding)
        pulumi.set(__self__, "field_id", field_id)
        if field_value is not None:
            pulumi.set(__self__, "field_value", field_value)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> pulumi.Input[str]:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: pulumi.Input[str]):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettingsArgs']]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettingsArgs']]):
        pulumi.set(self, "settings", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettingsArgsDict(TypedDict):
        line_style_settings: NotRequired[pulumi.Input['LineChartLineStyleSettingsArgsDict']]
        marker_style_settings: NotRequired[pulumi.Input['LineChartMarkerStyleSettingsArgsDict']]
elif False:
    VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettingsArgs:
    def __init__(__self__, *,
                 line_style_settings: Optional[pulumi.Input['LineChartLineStyleSettingsArgs']] = None,
                 marker_style_settings: Optional[pulumi.Input['LineChartMarkerStyleSettingsArgs']] = None):
        if line_style_settings is not None:
            pulumi.set(__self__, "line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            pulumi.set(__self__, "marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional[pulumi.Input['LineChartLineStyleSettingsArgs']]:
        return pulumi.get(self, "line_style_settings")

    @line_style_settings.setter
    def line_style_settings(self, value: Optional[pulumi.Input['LineChartLineStyleSettingsArgs']]):
        pulumi.set(self, "line_style_settings", value)

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional[pulumi.Input['LineChartMarkerStyleSettingsArgs']]:
        return pulumi.get(self, "marker_style_settings")

    @marker_style_settings.setter
    def marker_style_settings(self, value: Optional[pulumi.Input['LineChartMarkerStyleSettingsArgs']]):
        pulumi.set(self, "marker_style_settings", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemArgsDict(TypedDict):
        axis_binding: pulumi.Input[str]
        field_id: pulumi.Input[str]
        settings: NotRequired[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettingsArgsDict']]
elif False:
    VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemArgs:
    def __init__(__self__, *,
                 axis_binding: pulumi.Input[str],
                 field_id: pulumi.Input[str],
                 settings: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettingsArgs']] = None):
        pulumi.set(__self__, "axis_binding", axis_binding)
        pulumi.set(__self__, "field_id", field_id)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> pulumi.Input[str]:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: pulumi.Input[str]):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettingsArgs']]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettingsArgs']]):
        pulumi.set(self, "settings", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettingsArgsDict(TypedDict):
        line_style_settings: NotRequired[pulumi.Input['LineChartLineStyleSettingsArgsDict']]
        marker_style_settings: NotRequired[pulumi.Input['LineChartMarkerStyleSettingsArgsDict']]
elif False:
    VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettingsArgs:
    def __init__(__self__, *,
                 line_style_settings: Optional[pulumi.Input['LineChartLineStyleSettingsArgs']] = None,
                 marker_style_settings: Optional[pulumi.Input['LineChartMarkerStyleSettingsArgs']] = None):
        if line_style_settings is not None:
            pulumi.set(__self__, "line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            pulumi.set(__self__, "marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional[pulumi.Input['LineChartLineStyleSettingsArgs']]:
        return pulumi.get(self, "line_style_settings")

    @line_style_settings.setter
    def line_style_settings(self, value: Optional[pulumi.Input['LineChartLineStyleSettingsArgs']]):
        pulumi.set(self, "line_style_settings", value)

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional[pulumi.Input['LineChartMarkerStyleSettingsArgs']]:
        return pulumi.get(self, "marker_style_settings")

    @marker_style_settings.setter
    def marker_style_settings(self, value: Optional[pulumi.Input['LineChartMarkerStyleSettingsArgs']]):
        pulumi.set(self, "marker_style_settings", value)


if not MYPY:
    class VisualsLineChartVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        category_items_limit_configuration: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        category_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
        color_items_limit_configuration: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        small_multiples_limit_configuration: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        small_multiples_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsLineChartVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsLineChartVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit_configuration: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 category_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None,
                 color_items_limit_configuration: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 small_multiples_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if category_items_limit_configuration is not None:
            pulumi.set(__self__, "category_items_limit_configuration", category_items_limit_configuration)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if color_items_limit_configuration is not None:
            pulumi.set(__self__, "color_items_limit_configuration", color_items_limit_configuration)
        if small_multiples_limit_configuration is not None:
            pulumi.set(__self__, "small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sorts is not None:
            pulumi.set(__self__, "small_multiples_sorts", small_multiples_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimitConfiguration")
    def category_items_limit_configuration(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit_configuration")

    @category_items_limit_configuration.setter
    def category_items_limit_configuration(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit_configuration", value)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sorts")

    @category_sorts.setter
    def category_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sorts", value)

    @property
    @pulumi.getter(name="colorItemsLimitConfiguration")
    def color_items_limit_configuration(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit_configuration")

    @color_items_limit_configuration.setter
    def color_items_limit_configuration(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSorts")
    def small_multiples_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sorts")

    @small_multiples_sorts.setter
    def small_multiples_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sorts", value)


if not MYPY:
    class VisualsPieChartVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsPieChartVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsPieChartVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPieChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsPieChartVisualChartConfigurationArgsDict(TypedDict):
        category_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        contribution_analysis_defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgsDict']]]]
        data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        donut_options: NotRequired[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsPieChartVisualChartConfigurationFieldWellsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        small_multiples_options: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsPieChartVisualChartConfigurationSortConfigurationArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        value_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
elif False:
    VisualsPieChartVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPieChartVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 donut_options: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 small_multiples_options: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None):
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if contribution_analysis_defaults is not None:
            pulumi.set(__self__, "contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if donut_options is not None:
            pulumi.set(__self__, "donut_options", donut_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if small_multiples_options is not None:
            pulumi.set(__self__, "small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if value_label_options is not None:
            pulumi.set(__self__, "value_label_options", value_label_options)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContributionAnalysisDefaultsArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="donutOptions")
    def donut_options(self) -> Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsArgs']]:
        return pulumi.get(self, "donut_options")

    @donut_options.setter
    def donut_options(self, value: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsArgs']]):
        pulumi.set(self, "donut_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


if not MYPY:
    class VisualsPieChartVisualChartConfigurationDonutOptionsArgsDict(TypedDict):
        arc_options: NotRequired[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsArcOptionsArgsDict']]
        donut_center_options: NotRequired[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptionsArgsDict']]
elif False:
    VisualsPieChartVisualChartConfigurationDonutOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPieChartVisualChartConfigurationDonutOptionsArgs:
    def __init__(__self__, *,
                 arc_options: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsArcOptionsArgs']] = None,
                 donut_center_options: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptionsArgs']] = None):
        if arc_options is not None:
            pulumi.set(__self__, "arc_options", arc_options)
        if donut_center_options is not None:
            pulumi.set(__self__, "donut_center_options", donut_center_options)

    @property
    @pulumi.getter(name="arcOptions")
    def arc_options(self) -> Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsArcOptionsArgs']]:
        return pulumi.get(self, "arc_options")

    @arc_options.setter
    def arc_options(self, value: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsArcOptionsArgs']]):
        pulumi.set(self, "arc_options", value)

    @property
    @pulumi.getter(name="donutCenterOptions")
    def donut_center_options(self) -> Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptionsArgs']]:
        return pulumi.get(self, "donut_center_options")

    @donut_center_options.setter
    def donut_center_options(self, value: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptionsArgs']]):
        pulumi.set(self, "donut_center_options", value)


if not MYPY:
    class VisualsPieChartVisualChartConfigurationDonutOptionsArcOptionsArgsDict(TypedDict):
        arc_thickness: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPieChartVisualChartConfigurationDonutOptionsArcOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPieChartVisualChartConfigurationDonutOptionsArcOptionsArgs:
    def __init__(__self__, *,
                 arc_thickness: Optional[pulumi.Input[str]] = None):
        if arc_thickness is not None:
            pulumi.set(__self__, "arc_thickness", arc_thickness)

    @property
    @pulumi.getter(name="arcThickness")
    def arc_thickness(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arc_thickness")

    @arc_thickness.setter
    def arc_thickness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arc_thickness", value)


if not MYPY:
    class VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptionsArgsDict(TypedDict):
        label_visibility: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptionsArgs:
    def __init__(__self__, *,
                 label_visibility: Optional[pulumi.Input[str]] = None):
        if label_visibility is not None:
            pulumi.set(__self__, "label_visibility", label_visibility)

    @property
    @pulumi.getter(name="labelVisibility")
    def label_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_visibility")

    @label_visibility.setter
    def label_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_visibility", value)


if not MYPY:
    class VisualsPieChartVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        pie_chart_aggregated_field_wells: NotRequired[pulumi.Input['VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWellsArgsDict']]
elif False:
    VisualsPieChartVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPieChartVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 pie_chart_aggregated_field_wells: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWellsArgs']] = None):
        if pie_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "pie_chart_aggregated_field_wells", pie_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="pieChartAggregatedFieldWells")
    def pie_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "pie_chart_aggregated_field_wells")

    @pie_chart_aggregated_field_wells.setter
    def pie_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "pie_chart_aggregated_field_wells", value)


if not MYPY:
    class VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWellsArgsDict(TypedDict):
        categories: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        small_multiples: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if small_multiples is not None:
            pulumi.set(__self__, "small_multiples", small_multiples)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsPieChartVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        category_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        category_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
        small_multiples_limit_configuration: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        small_multiples_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsPieChartVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPieChartVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 category_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 small_multiples_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if small_multiples_limit_configuration is not None:
            pulumi.set(__self__, "small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sorts is not None:
            pulumi.set(__self__, "small_multiples_sorts", small_multiples_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sorts")

    @category_sorts.setter
    def category_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sorts", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSorts")
    def small_multiples_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sorts")

    @small_multiples_sorts.setter
    def small_multiples_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sorts", value)


if not MYPY:
    class VisualsPivotTableVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationArgsDict']]
        conditional_formatting: NotRequired[pulumi.Input['VisualsPivotTableVisualConditionalFormattingArgsDict']]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsPivotTableVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            pulumi.set(__self__, "conditional_formatting", conditional_formatting)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationArgsDict(TypedDict):
        field_options: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsArgsDict']]
        paginated_report_options: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationPaginatedReportOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationArgsDict']]
        table_options: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationTableOptionsArgsDict']]
        total_options: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 field_options: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsArgs']] = None,
                 paginated_report_options: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationPaginatedReportOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationArgs']] = None,
                 table_options: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTableOptionsArgs']] = None,
                 total_options: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsArgs']] = None):
        if field_options is not None:
            pulumi.set(__self__, "field_options", field_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if paginated_report_options is not None:
            pulumi.set(__self__, "paginated_report_options", paginated_report_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if table_options is not None:
            pulumi.set(__self__, "table_options", table_options)
        if total_options is not None:
            pulumi.set(__self__, "total_options", total_options)

    @property
    @pulumi.getter(name="fieldOptions")
    def field_options(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsArgs']]:
        return pulumi.get(self, "field_options")

    @field_options.setter
    def field_options(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsArgs']]):
        pulumi.set(self, "field_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="paginatedReportOptions")
    def paginated_report_options(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationPaginatedReportOptionsArgs']]:
        return pulumi.get(self, "paginated_report_options")

    @paginated_report_options.setter
    def paginated_report_options(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationPaginatedReportOptionsArgs']]):
        pulumi.set(self, "paginated_report_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTableOptionsArgs']]:
        return pulumi.get(self, "table_options")

    @table_options.setter
    def table_options(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTableOptionsArgs']]):
        pulumi.set(self, "table_options", value)

    @property
    @pulumi.getter(name="totalOptions")
    def total_options(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsArgs']]:
        return pulumi.get(self, "total_options")

    @total_options.setter
    def total_options(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsArgs']]):
        pulumi.set(self, "total_options", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldOptionsArgsDict(TypedDict):
        data_path_options: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgsDict']]]]
        selected_field_options: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgsDict']]]]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldOptionsArgs:
    def __init__(__self__, *,
                 data_path_options: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs']]]] = None,
                 selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs']]]] = None):
        if data_path_options is not None:
            pulumi.set(__self__, "data_path_options", data_path_options)
        if selected_field_options is not None:
            pulumi.set(__self__, "selected_field_options", selected_field_options)

    @property
    @pulumi.getter(name="dataPathOptions")
    def data_path_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs']]]]:
        return pulumi.get(self, "data_path_options")

    @data_path_options.setter
    def data_path_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs']]]]):
        pulumi.set(self, "data_path_options", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs']]]]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs']]]]):
        pulumi.set(self, "selected_field_options", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgsDict(TypedDict):
        data_path_lists: pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathListArgsDict']]]
        width: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionArgs:
    def __init__(__self__, *,
                 data_path_lists: pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathListArgs']]],
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "data_path_lists", data_path_lists)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="dataPathLists")
    def data_path_lists(self) -> pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathListArgs']]]:
        return pulumi.get(self, "data_path_lists")

    @data_path_lists.setter
    def data_path_lists(self, value: pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathListArgs']]]):
        pulumi.set(self, "data_path_lists", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathListArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        field_value: pulumi.Input[str]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathListArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 field_value: pulumi.Input[str]):
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "field_value", field_value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_value", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        custom_label: NotRequired[pulumi.Input[str]]
        visibility: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 custom_label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "field_id", field_id)
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        pivot_table_aggregated_field_wells: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 pivot_table_aggregated_field_wells: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsArgs']] = None):
        if pivot_table_aggregated_field_wells is not None:
            pulumi.set(__self__, "pivot_table_aggregated_field_wells", pivot_table_aggregated_field_wells)

    @property
    @pulumi.getter(name="pivotTableAggregatedFieldWells")
    def pivot_table_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "pivot_table_aggregated_field_wells")

    @pivot_table_aggregated_field_wells.setter
    def pivot_table_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsArgs']]):
        pulumi.set(self, "pivot_table_aggregated_field_wells", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsArgsDict(TypedDict):
        columns: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnArgsDict']]]]
        rows: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowArgsDict']]]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueArgsDict']]]]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnArgs']]]] = None,
                 rows: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueArgs']]]] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if rows is not None:
            pulumi.set(__self__, "rows", rows)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowArgs']]]]:
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowArgs']]]]):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnArgsDict(TypedDict):
        categorical_dimension_field: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionFieldArgsDict']]
        date_dimension_field: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionFieldArgsDict']]
        numerical_dimension_field: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionFieldArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnArgs:
    def __init__(__self__, *,
                 categorical_dimension_field: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionFieldArgs']] = None,
                 date_dimension_field: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionFieldArgs']] = None,
                 numerical_dimension_field: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionFieldArgs']] = None):
        if categorical_dimension_field is not None:
            pulumi.set(__self__, "categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            pulumi.set(__self__, "date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            pulumi.set(__self__, "numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionFieldArgs']]:
        return pulumi.get(self, "categorical_dimension_field")

    @categorical_dimension_field.setter
    def categorical_dimension_field(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionFieldArgs']]):
        pulumi.set(self, "categorical_dimension_field", value)

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionFieldArgs']]:
        return pulumi.get(self, "date_dimension_field")

    @date_dimension_field.setter
    def date_dimension_field(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionFieldArgs']]):
        pulumi.set(self, "date_dimension_field", value)

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionFieldArgs']]:
        return pulumi.get(self, "numerical_dimension_field")

    @numerical_dimension_field.setter
    def numerical_dimension_field(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionFieldArgs']]):
        pulumi.set(self, "numerical_dimension_field", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        date_granularity: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 date_granularity: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if date_granularity is not None:
            pulumi.set(__self__, "date_granularity", date_granularity)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_granularity")

    @date_granularity.setter
    def date_granularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_granularity", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowArgsDict(TypedDict):
        categorical_dimension_field: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionFieldArgsDict']]
        date_dimension_field: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionFieldArgsDict']]
        numerical_dimension_field: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionFieldArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowArgs:
    def __init__(__self__, *,
                 categorical_dimension_field: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionFieldArgs']] = None,
                 date_dimension_field: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionFieldArgs']] = None,
                 numerical_dimension_field: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionFieldArgs']] = None):
        if categorical_dimension_field is not None:
            pulumi.set(__self__, "categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            pulumi.set(__self__, "date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            pulumi.set(__self__, "numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionFieldArgs']]:
        return pulumi.get(self, "categorical_dimension_field")

    @categorical_dimension_field.setter
    def categorical_dimension_field(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionFieldArgs']]):
        pulumi.set(self, "categorical_dimension_field", value)

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionFieldArgs']]:
        return pulumi.get(self, "date_dimension_field")

    @date_dimension_field.setter
    def date_dimension_field(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionFieldArgs']]):
        pulumi.set(self, "date_dimension_field", value)

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionFieldArgs']]:
        return pulumi.get(self, "numerical_dimension_field")

    @numerical_dimension_field.setter
    def numerical_dimension_field(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionFieldArgs']]):
        pulumi.set(self, "numerical_dimension_field", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        date_granularity: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 date_granularity: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if date_granularity is not None:
            pulumi.set(__self__, "date_granularity", date_granularity)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_granularity")

    @date_granularity.setter
    def date_granularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_granularity", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueArgsDict(TypedDict):
        calculated_measure_field: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict']]
        categorical_measure_field: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict']]
        date_measure_field: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureFieldArgsDict']]
        numerical_measure_field: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureFieldArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueArgs:
    def __init__(__self__, *,
                 calculated_measure_field: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureFieldArgs']] = None,
                 categorical_measure_field: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureFieldArgs']] = None,
                 date_measure_field: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureFieldArgs']] = None,
                 numerical_measure_field: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureFieldArgs']] = None):
        if calculated_measure_field is not None:
            pulumi.set(__self__, "calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            pulumi.set(__self__, "categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            pulumi.set(__self__, "date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            pulumi.set(__self__, "numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureFieldArgs']]:
        return pulumi.get(self, "calculated_measure_field")

    @calculated_measure_field.setter
    def calculated_measure_field(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureFieldArgs']]):
        pulumi.set(self, "calculated_measure_field", value)

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureFieldArgs']]:
        return pulumi.get(self, "categorical_measure_field")

    @categorical_measure_field.setter
    def categorical_measure_field(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureFieldArgs']]):
        pulumi.set(self, "categorical_measure_field", value)

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureFieldArgs']]:
        return pulumi.get(self, "date_measure_field")

    @date_measure_field.setter
    def date_measure_field(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureFieldArgs']]):
        pulumi.set(self, "date_measure_field", value)

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureFieldArgs']]:
        return pulumi.get(self, "numerical_measure_field")

    @numerical_measure_field.setter
    def numerical_measure_field(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureFieldArgs']]):
        pulumi.set(self, "numerical_measure_field", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict(TypedDict):
        expression: pulumi.Input[str]
        field_id: pulumi.Input[str]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureFieldArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 field_id: pulumi.Input[str]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input['NumericalAggregationArgsDict']]
        format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['NumericalAggregationArgs']] = None,
                 format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['NumericalAggregationArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['NumericalAggregationArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationPaginatedReportOptionsArgsDict(TypedDict):
        overflow_column_header_visibility: NotRequired[pulumi.Input[str]]
        vertical_overflow_visibility: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationPaginatedReportOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationPaginatedReportOptionsArgs:
    def __init__(__self__, *,
                 overflow_column_header_visibility: Optional[pulumi.Input[str]] = None,
                 vertical_overflow_visibility: Optional[pulumi.Input[str]] = None):
        if overflow_column_header_visibility is not None:
            pulumi.set(__self__, "overflow_column_header_visibility", overflow_column_header_visibility)
        if vertical_overflow_visibility is not None:
            pulumi.set(__self__, "vertical_overflow_visibility", vertical_overflow_visibility)

    @property
    @pulumi.getter(name="overflowColumnHeaderVisibility")
    def overflow_column_header_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overflow_column_header_visibility")

    @overflow_column_header_visibility.setter
    def overflow_column_header_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overflow_column_header_visibility", value)

    @property
    @pulumi.getter(name="verticalOverflowVisibility")
    def vertical_overflow_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vertical_overflow_visibility")

    @vertical_overflow_visibility.setter
    def vertical_overflow_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vertical_overflow_visibility", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        field_sort_options: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionArgsDict']]]]
elif False:
    VisualsPivotTableVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 field_sort_options: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionArgs']]]] = None):
        if field_sort_options is not None:
            pulumi.set(__self__, "field_sort_options", field_sort_options)

    @property
    @pulumi.getter(name="fieldSortOptions")
    def field_sort_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionArgs']]]]:
        return pulumi.get(self, "field_sort_options")

    @field_sort_options.setter
    def field_sort_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionArgs']]]]):
        pulumi.set(self, "field_sort_options", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        sort_by: pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByArgsDict']
elif False:
    VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 sort_by: pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByArgs']):
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "sort_by", sort_by)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByArgs']:
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByArgs']):
        pulumi.set(self, "sort_by", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByArgsDict(TypedDict):
        column: NotRequired[pulumi.Input['ColumnSortArgsDict']]
        data_path: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathArgsDict']]
        field: NotRequired[pulumi.Input['FieldSortArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByArgs:
    def __init__(__self__, *,
                 column: Optional[pulumi.Input['ColumnSortArgs']] = None,
                 data_path: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathArgs']] = None,
                 field: Optional[pulumi.Input['FieldSortArgs']] = None):
        if column is not None:
            pulumi.set(__self__, "column", column)
        if data_path is not None:
            pulumi.set(__self__, "data_path", data_path)
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input['ColumnSortArgs']]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input['ColumnSortArgs']]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathArgs']]:
        return pulumi.get(self, "data_path")

    @data_path.setter
    def data_path(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathArgs']]):
        pulumi.set(self, "data_path", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['FieldSortArgs']]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['FieldSortArgs']]):
        pulumi.set(self, "field", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathArgsDict(TypedDict):
        direction: pulumi.Input[str]
        sort_paths: pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPathArgsDict']]]
elif False:
    VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 sort_paths: pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPathArgs']]]):
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "sort_paths", sort_paths)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="sortPaths")
    def sort_paths(self) -> pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPathArgs']]]:
        return pulumi.get(self, "sort_paths")

    @sort_paths.setter
    def sort_paths(self, value: pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPathArgs']]]):
        pulumi.set(self, "sort_paths", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPathArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        field_value: pulumi.Input[str]
elif False:
    VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPathArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 field_value: pulumi.Input[str]):
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "field_value", field_value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_value", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationTableOptionsArgsDict(TypedDict):
        cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        collapsed_row_dimensions_visibility: NotRequired[pulumi.Input[str]]
        column_header_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        column_names_visibility: NotRequired[pulumi.Input[str]]
        metric_placement: NotRequired[pulumi.Input[str]]
        row_alternate_color_options: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgsDict']]
        row_field_names_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        row_header_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        single_metric_visibility: NotRequired[pulumi.Input[str]]
        toggle_buttons_visibility: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationTableOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationTableOptionsArgs:
    def __init__(__self__, *,
                 cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 collapsed_row_dimensions_visibility: Optional[pulumi.Input[str]] = None,
                 column_header_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 column_names_visibility: Optional[pulumi.Input[str]] = None,
                 metric_placement: Optional[pulumi.Input[str]] = None,
                 row_alternate_color_options: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs']] = None,
                 row_field_names_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 row_header_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 single_metric_visibility: Optional[pulumi.Input[str]] = None,
                 toggle_buttons_visibility: Optional[pulumi.Input[str]] = None):
        if cell_style is not None:
            pulumi.set(__self__, "cell_style", cell_style)
        if collapsed_row_dimensions_visibility is not None:
            pulumi.set(__self__, "collapsed_row_dimensions_visibility", collapsed_row_dimensions_visibility)
        if column_header_style is not None:
            pulumi.set(__self__, "column_header_style", column_header_style)
        if column_names_visibility is not None:
            pulumi.set(__self__, "column_names_visibility", column_names_visibility)
        if metric_placement is not None:
            pulumi.set(__self__, "metric_placement", metric_placement)
        if row_alternate_color_options is not None:
            pulumi.set(__self__, "row_alternate_color_options", row_alternate_color_options)
        if row_field_names_style is not None:
            pulumi.set(__self__, "row_field_names_style", row_field_names_style)
        if row_header_style is not None:
            pulumi.set(__self__, "row_header_style", row_header_style)
        if single_metric_visibility is not None:
            pulumi.set(__self__, "single_metric_visibility", single_metric_visibility)
        if toggle_buttons_visibility is not None:
            pulumi.set(__self__, "toggle_buttons_visibility", toggle_buttons_visibility)

    @property
    @pulumi.getter(name="cellStyle")
    def cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "cell_style")

    @cell_style.setter
    def cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "cell_style", value)

    @property
    @pulumi.getter(name="collapsedRowDimensionsVisibility")
    def collapsed_row_dimensions_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "collapsed_row_dimensions_visibility")

    @collapsed_row_dimensions_visibility.setter
    def collapsed_row_dimensions_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collapsed_row_dimensions_visibility", value)

    @property
    @pulumi.getter(name="columnHeaderStyle")
    def column_header_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "column_header_style")

    @column_header_style.setter
    def column_header_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "column_header_style", value)

    @property
    @pulumi.getter(name="columnNamesVisibility")
    def column_names_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_names_visibility")

    @column_names_visibility.setter
    def column_names_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_names_visibility", value)

    @property
    @pulumi.getter(name="metricPlacement")
    def metric_placement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_placement")

    @metric_placement.setter
    def metric_placement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_placement", value)

    @property
    @pulumi.getter(name="rowAlternateColorOptions")
    def row_alternate_color_options(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs']]:
        return pulumi.get(self, "row_alternate_color_options")

    @row_alternate_color_options.setter
    def row_alternate_color_options(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs']]):
        pulumi.set(self, "row_alternate_color_options", value)

    @property
    @pulumi.getter(name="rowFieldNamesStyle")
    def row_field_names_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "row_field_names_style")

    @row_field_names_style.setter
    def row_field_names_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "row_field_names_style", value)

    @property
    @pulumi.getter(name="rowHeaderStyle")
    def row_header_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "row_header_style")

    @row_header_style.setter
    def row_header_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "row_header_style", value)

    @property
    @pulumi.getter(name="singleMetricVisibility")
    def single_metric_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "single_metric_visibility")

    @single_metric_visibility.setter
    def single_metric_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_metric_visibility", value)

    @property
    @pulumi.getter(name="toggleButtonsVisibility")
    def toggle_buttons_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "toggle_buttons_visibility")

    @toggle_buttons_visibility.setter
    def toggle_buttons_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "toggle_buttons_visibility", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgsDict(TypedDict):
        row_alternate_colors: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        The dashboard creation status.
        """
elif False:
    VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs:
    def __init__(__self__, *,
                 row_alternate_colors: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: The dashboard creation status.
        """
        if row_alternate_colors is not None:
            pulumi.set(__self__, "row_alternate_colors", row_alternate_colors)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="rowAlternateColors")
    def row_alternate_colors(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "row_alternate_colors")

    @row_alternate_colors.setter
    def row_alternate_colors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "row_alternate_colors", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationTotalOptionsArgsDict(TypedDict):
        column_subtotal_options: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsArgsDict']]
        column_total_options: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgsDict']]
        row_subtotal_options: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsArgsDict']]
        row_total_options: NotRequired[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptionsArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationTotalOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsArgs:
    def __init__(__self__, *,
                 column_subtotal_options: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsArgs']] = None,
                 column_total_options: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs']] = None,
                 row_subtotal_options: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsArgs']] = None,
                 row_total_options: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptionsArgs']] = None):
        if column_subtotal_options is not None:
            pulumi.set(__self__, "column_subtotal_options", column_subtotal_options)
        if column_total_options is not None:
            pulumi.set(__self__, "column_total_options", column_total_options)
        if row_subtotal_options is not None:
            pulumi.set(__self__, "row_subtotal_options", row_subtotal_options)
        if row_total_options is not None:
            pulumi.set(__self__, "row_total_options", row_total_options)

    @property
    @pulumi.getter(name="columnSubtotalOptions")
    def column_subtotal_options(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsArgs']]:
        return pulumi.get(self, "column_subtotal_options")

    @column_subtotal_options.setter
    def column_subtotal_options(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsArgs']]):
        pulumi.set(self, "column_subtotal_options", value)

    @property
    @pulumi.getter(name="columnTotalOptions")
    def column_total_options(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs']]:
        return pulumi.get(self, "column_total_options")

    @column_total_options.setter
    def column_total_options(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs']]):
        pulumi.set(self, "column_total_options", value)

    @property
    @pulumi.getter(name="rowSubtotalOptions")
    def row_subtotal_options(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsArgs']]:
        return pulumi.get(self, "row_subtotal_options")

    @row_subtotal_options.setter
    def row_subtotal_options(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsArgs']]):
        pulumi.set(self, "row_subtotal_options", value)

    @property
    @pulumi.getter(name="rowTotalOptions")
    def row_total_options(self) -> Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptionsArgs']]:
        return pulumi.get(self, "row_total_options")

    @row_total_options.setter
    def row_total_options(self, value: Optional[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptionsArgs']]):
        pulumi.set(self, "row_total_options", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsArgsDict(TypedDict):
        custom_label: NotRequired[pulumi.Input[str]]
        field_level: NotRequired[pulumi.Input[str]]
        field_level_options: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOptionArgsDict']]]]
        metric_header_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        total_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        totals_visibility: NotRequired[pulumi.Input[str]]
        value_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 field_level: Optional[pulumi.Input[str]] = None,
                 field_level_options: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOptionArgs']]]] = None,
                 metric_header_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 total_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input[str]] = None,
                 value_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if field_level is not None:
            pulumi.set(__self__, "field_level", field_level)
        if field_level_options is not None:
            pulumi.set(__self__, "field_level_options", field_level_options)
        if metric_header_cell_style is not None:
            pulumi.set(__self__, "metric_header_cell_style", metric_header_cell_style)
        if total_cell_style is not None:
            pulumi.set(__self__, "total_cell_style", total_cell_style)
        if totals_visibility is not None:
            pulumi.set(__self__, "totals_visibility", totals_visibility)
        if value_cell_style is not None:
            pulumi.set(__self__, "value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fieldLevel")
    def field_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_level")

    @field_level.setter
    def field_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_level", value)

    @property
    @pulumi.getter(name="fieldLevelOptions")
    def field_level_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOptionArgs']]]]:
        return pulumi.get(self, "field_level_options")

    @field_level_options.setter
    def field_level_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOptionArgs']]]]):
        pulumi.set(self, "field_level_options", value)

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "metric_header_cell_style")

    @metric_header_cell_style.setter
    def metric_header_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "metric_header_cell_style", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "value_cell_style")

    @value_cell_style.setter
    def value_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "value_cell_style", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOptionArgsDict(TypedDict):
        field_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOptionArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgsDict(TypedDict):
        custom_label: NotRequired[pulumi.Input[str]]
        metric_header_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        placement: NotRequired[pulumi.Input[str]]
        scroll_status: NotRequired[pulumi.Input[str]]
        total_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        totals_visibility: NotRequired[pulumi.Input[str]]
        value_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 metric_header_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 placement: Optional[pulumi.Input[str]] = None,
                 scroll_status: Optional[pulumi.Input[str]] = None,
                 total_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input[str]] = None,
                 value_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if metric_header_cell_style is not None:
            pulumi.set(__self__, "metric_header_cell_style", metric_header_cell_style)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if scroll_status is not None:
            pulumi.set(__self__, "scroll_status", scroll_status)
        if total_cell_style is not None:
            pulumi.set(__self__, "total_cell_style", total_cell_style)
        if totals_visibility is not None:
            pulumi.set(__self__, "totals_visibility", totals_visibility)
        if value_cell_style is not None:
            pulumi.set(__self__, "value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "metric_header_cell_style")

    @metric_header_cell_style.setter
    def metric_header_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "metric_header_cell_style", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scroll_status")

    @scroll_status.setter
    def scroll_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scroll_status", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "value_cell_style")

    @value_cell_style.setter
    def value_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "value_cell_style", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsArgsDict(TypedDict):
        custom_label: NotRequired[pulumi.Input[str]]
        field_level: NotRequired[pulumi.Input[str]]
        field_level_options: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOptionArgsDict']]]]
        metric_header_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        total_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        totals_visibility: NotRequired[pulumi.Input[str]]
        value_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 field_level: Optional[pulumi.Input[str]] = None,
                 field_level_options: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOptionArgs']]]] = None,
                 metric_header_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 total_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input[str]] = None,
                 value_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if field_level is not None:
            pulumi.set(__self__, "field_level", field_level)
        if field_level_options is not None:
            pulumi.set(__self__, "field_level_options", field_level_options)
        if metric_header_cell_style is not None:
            pulumi.set(__self__, "metric_header_cell_style", metric_header_cell_style)
        if total_cell_style is not None:
            pulumi.set(__self__, "total_cell_style", total_cell_style)
        if totals_visibility is not None:
            pulumi.set(__self__, "totals_visibility", totals_visibility)
        if value_cell_style is not None:
            pulumi.set(__self__, "value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fieldLevel")
    def field_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_level")

    @field_level.setter
    def field_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_level", value)

    @property
    @pulumi.getter(name="fieldLevelOptions")
    def field_level_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOptionArgs']]]]:
        return pulumi.get(self, "field_level_options")

    @field_level_options.setter
    def field_level_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOptionArgs']]]]):
        pulumi.set(self, "field_level_options", value)

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "metric_header_cell_style")

    @metric_header_cell_style.setter
    def metric_header_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "metric_header_cell_style", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "value_cell_style")

    @value_cell_style.setter
    def value_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "value_cell_style", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOptionArgsDict(TypedDict):
        field_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOptionArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


if not MYPY:
    class VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptionsArgsDict(TypedDict):
        custom_label: NotRequired[pulumi.Input[str]]
        metric_header_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        placement: NotRequired[pulumi.Input[str]]
        scroll_status: NotRequired[pulumi.Input[str]]
        total_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        totals_visibility: NotRequired[pulumi.Input[str]]
        value_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
elif False:
    VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 metric_header_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 placement: Optional[pulumi.Input[str]] = None,
                 scroll_status: Optional[pulumi.Input[str]] = None,
                 total_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input[str]] = None,
                 value_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if metric_header_cell_style is not None:
            pulumi.set(__self__, "metric_header_cell_style", metric_header_cell_style)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if scroll_status is not None:
            pulumi.set(__self__, "scroll_status", scroll_status)
        if total_cell_style is not None:
            pulumi.set(__self__, "total_cell_style", total_cell_style)
        if totals_visibility is not None:
            pulumi.set(__self__, "totals_visibility", totals_visibility)
        if value_cell_style is not None:
            pulumi.set(__self__, "value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "metric_header_cell_style")

    @metric_header_cell_style.setter
    def metric_header_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "metric_header_cell_style", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scroll_status")

    @scroll_status.setter
    def scroll_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scroll_status", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "value_cell_style")

    @value_cell_style.setter
    def value_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "value_cell_style", value)


if not MYPY:
    class VisualsPivotTableVisualConditionalFormattingArgsDict(TypedDict):
        conditional_formatting_options: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgsDict']]]]
elif False:
    VisualsPivotTableVisualConditionalFormattingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs']]]] = None):
        if conditional_formatting_options is not None:
            pulumi.set(__self__, "conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


if not MYPY:
    class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgsDict(TypedDict):
        cell: NotRequired[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgsDict']]
elif False:
    VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 cell: Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs']] = None):
        if cell is not None:
            pulumi.set(__self__, "cell", cell)

    @property
    @pulumi.getter
    def cell(self) -> Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs']]:
        return pulumi.get(self, "cell")

    @cell.setter
    def cell(self, value: Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs']]):
        pulumi.set(self, "cell", value)


if not MYPY:
    class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        scope: NotRequired[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgsDict']]
        text_format: NotRequired[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgsDict']]
elif False:
    VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 scope: Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgs']] = None,
                 text_format: Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs']] = None):
        pulumi.set(__self__, "field_id", field_id)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if text_format is not None:
            pulumi.set(__self__, "text_format", text_format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgs']]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgs']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="textFormat")
    def text_format(self) -> Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs']]:
        return pulumi.get(self, "text_format")

    @text_format.setter
    def text_format(self, value: Optional[pulumi.Input['VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs']]):
        pulumi.set(self, "text_format", value)


if not MYPY:
    class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgsDict(TypedDict):
        role: NotRequired[pulumi.Input[str]]
elif False:
    VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScopeArgs:
    def __init__(__self__, *,
                 role: Optional[pulumi.Input[str]] = None):
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


if not MYPY:
    class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgsDict(TypedDict):
        background_color: pulumi.Input['ConditionalFormattingColorArgsDict']
        text_color: pulumi.Input['ConditionalFormattingColorArgsDict']
        icon: NotRequired[pulumi.Input['ConditionalFormattingIconArgsDict']]
elif False:
    VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs:
    def __init__(__self__, *,
                 background_color: pulumi.Input['ConditionalFormattingColorArgs'],
                 text_color: pulumi.Input['ConditionalFormattingColorArgs'],
                 icon: Optional[pulumi.Input['ConditionalFormattingIconArgs']] = None):
        pulumi.set(__self__, "background_color", background_color)
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "text_color", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['ConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['ConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)


if not MYPY:
    class VisualsRadarChartVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsRadarChartVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsRadarChartVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsRadarChartVisualChartConfigurationArgsDict(TypedDict):
        alternate_band_colors_visibility: NotRequired[pulumi.Input[str]]
        alternate_band_even_color: NotRequired[pulumi.Input[str]]
        alternate_band_odd_color: NotRequired[pulumi.Input[str]]
        base_series_settings: NotRequired[pulumi.Input['VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgsDict']]
        category_axis: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        category_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        color_axis: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        color_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        shape: NotRequired[pulumi.Input[str]]
        sort_configuration: NotRequired[pulumi.Input['VisualsRadarChartVisualChartConfigurationSortConfigurationArgsDict']]
        start_angle: NotRequired[pulumi.Input[float]]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
elif False:
    VisualsRadarChartVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 alternate_band_colors_visibility: Optional[pulumi.Input[str]] = None,
                 alternate_band_even_color: Optional[pulumi.Input[str]] = None,
                 alternate_band_odd_color: Optional[pulumi.Input[str]] = None,
                 base_series_settings: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgs']] = None,
                 category_axis: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 color_axis: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 shape: Optional[pulumi.Input[str]] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationSortConfigurationArgs']] = None,
                 start_angle: Optional[pulumi.Input[float]] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None):
        if alternate_band_colors_visibility is not None:
            pulumi.set(__self__, "alternate_band_colors_visibility", alternate_band_colors_visibility)
        if alternate_band_even_color is not None:
            pulumi.set(__self__, "alternate_band_even_color", alternate_band_even_color)
        if alternate_band_odd_color is not None:
            pulumi.set(__self__, "alternate_band_odd_color", alternate_band_odd_color)
        if base_series_settings is not None:
            pulumi.set(__self__, "base_series_settings", base_series_settings)
        if category_axis is not None:
            pulumi.set(__self__, "category_axis", category_axis)
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if color_axis is not None:
            pulumi.set(__self__, "color_axis", color_axis)
        if color_label_options is not None:
            pulumi.set(__self__, "color_label_options", color_label_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if start_angle is not None:
            pulumi.set(__self__, "start_angle", start_angle)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="alternateBandColorsVisibility")
    def alternate_band_colors_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alternate_band_colors_visibility")

    @alternate_band_colors_visibility.setter
    def alternate_band_colors_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alternate_band_colors_visibility", value)

    @property
    @pulumi.getter(name="alternateBandEvenColor")
    def alternate_band_even_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alternate_band_even_color")

    @alternate_band_even_color.setter
    def alternate_band_even_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alternate_band_even_color", value)

    @property
    @pulumi.getter(name="alternateBandOddColor")
    def alternate_band_odd_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alternate_band_odd_color")

    @alternate_band_odd_color.setter
    def alternate_band_odd_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alternate_band_odd_color", value)

    @property
    @pulumi.getter(name="baseSeriesSettings")
    def base_series_settings(self) -> Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgs']]:
        return pulumi.get(self, "base_series_settings")

    @base_series_settings.setter
    def base_series_settings(self, value: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgs']]):
        pulumi.set(self, "base_series_settings", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorAxis")
    def color_axis(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "color_axis")

    @color_axis.setter
    def color_axis(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "color_axis", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="startAngle")
    def start_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_angle")

    @start_angle.setter
    def start_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_angle", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


if not MYPY:
    class VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgsDict(TypedDict):
        area_style_settings: NotRequired[pulumi.Input['SelectAllOptionsArgsDict']]
elif False:
    VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualChartConfigurationBaseSeriesSettingsArgs:
    def __init__(__self__, *,
                 area_style_settings: Optional[pulumi.Input['SelectAllOptionsArgs']] = None):
        if area_style_settings is not None:
            pulumi.set(__self__, "area_style_settings", area_style_settings)

    @property
    @pulumi.getter(name="areaStyleSettings")
    def area_style_settings(self) -> Optional[pulumi.Input['SelectAllOptionsArgs']]:
        return pulumi.get(self, "area_style_settings")

    @area_style_settings.setter
    def area_style_settings(self, value: Optional[pulumi.Input['SelectAllOptionsArgs']]):
        pulumi.set(self, "area_style_settings", value)


if not MYPY:
    class VisualsRadarChartVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        radar_chart_aggregated_field_wells: NotRequired[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsArgsDict']]
elif False:
    VisualsRadarChartVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 radar_chart_aggregated_field_wells: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsArgs']] = None):
        if radar_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "radar_chart_aggregated_field_wells", radar_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="radarChartAggregatedFieldWells")
    def radar_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "radar_chart_aggregated_field_wells")

    @radar_chart_aggregated_field_wells.setter
    def radar_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "radar_chart_aggregated_field_wells", value)


if not MYPY:
    class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsArgsDict(TypedDict):
        category: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        color: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueArgsDict']]]]
elif False:
    VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 color: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueArgs']]]] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueArgsDict(TypedDict):
        calculated_measure_field: NotRequired[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict']]
        categorical_measure_field: NotRequired[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict']]
        date_measure_field: NotRequired[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureFieldArgsDict']]
        numerical_measure_field: NotRequired[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureFieldArgsDict']]
elif False:
    VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueArgs:
    def __init__(__self__, *,
                 calculated_measure_field: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureFieldArgs']] = None,
                 categorical_measure_field: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureFieldArgs']] = None,
                 date_measure_field: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureFieldArgs']] = None,
                 numerical_measure_field: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureFieldArgs']] = None):
        if calculated_measure_field is not None:
            pulumi.set(__self__, "calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            pulumi.set(__self__, "categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            pulumi.set(__self__, "date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            pulumi.set(__self__, "numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureFieldArgs']]:
        return pulumi.get(self, "calculated_measure_field")

    @calculated_measure_field.setter
    def calculated_measure_field(self, value: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureFieldArgs']]):
        pulumi.set(self, "calculated_measure_field", value)

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureFieldArgs']]:
        return pulumi.get(self, "categorical_measure_field")

    @categorical_measure_field.setter
    def categorical_measure_field(self, value: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureFieldArgs']]):
        pulumi.set(self, "categorical_measure_field", value)

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureFieldArgs']]:
        return pulumi.get(self, "date_measure_field")

    @date_measure_field.setter
    def date_measure_field(self, value: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureFieldArgs']]):
        pulumi.set(self, "date_measure_field", value)

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureFieldArgs']]:
        return pulumi.get(self, "numerical_measure_field")

    @numerical_measure_field.setter
    def numerical_measure_field(self, value: Optional[pulumi.Input['VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureFieldArgs']]):
        pulumi.set(self, "numerical_measure_field", value)


if not MYPY:
    class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict(TypedDict):
        expression: pulumi.Input[str]
        field_id: pulumi.Input[str]
elif False:
    VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureFieldArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 field_id: pulumi.Input[str]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


if not MYPY:
    class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
elif False:
    VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
elif False:
    VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        aggregation_function: NotRequired[pulumi.Input['NumericalAggregationArgsDict']]
        format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
elif False:
    VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['NumericalAggregationArgs']] = None,
                 format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['NumericalAggregationArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['NumericalAggregationArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class VisualsRadarChartVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        category_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        category_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
        color_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        color_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsRadarChartVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsRadarChartVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 category_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 color_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if color_items_limit is not None:
            pulumi.set(__self__, "color_items_limit", color_items_limit)
        if color_sorts is not None:
            pulumi.set(__self__, "color_sorts", color_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sorts")

    @category_sorts.setter
    def category_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sorts", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSorts")
    def color_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sorts")

    @color_sorts.setter
    def color_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sorts", value)


if not MYPY:
    class VisualsSankeyDiagramVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationArgsDict']]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsSankeyDiagramVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsSankeyDiagramVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsSankeyDiagramVisualChartConfigurationArgsDict(TypedDict):
        data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationFieldWellsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationSortConfigurationArgsDict']]
elif False:
    VisualsSankeyDiagramVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsSankeyDiagramVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationSortConfigurationArgs']] = None):
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)


if not MYPY:
    class VisualsSankeyDiagramVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        sankey_diagram_aggregated_field_wells: NotRequired[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWellsArgsDict']]
elif False:
    VisualsSankeyDiagramVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsSankeyDiagramVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 sankey_diagram_aggregated_field_wells: Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWellsArgs']] = None):
        if sankey_diagram_aggregated_field_wells is not None:
            pulumi.set(__self__, "sankey_diagram_aggregated_field_wells", sankey_diagram_aggregated_field_wells)

    @property
    @pulumi.getter(name="sankeyDiagramAggregatedFieldWells")
    def sankey_diagram_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "sankey_diagram_aggregated_field_wells")

    @sankey_diagram_aggregated_field_wells.setter
    def sankey_diagram_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWellsArgs']]):
        pulumi.set(self, "sankey_diagram_aggregated_field_wells", value)


if not MYPY:
    class VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWellsArgsDict(TypedDict):
        destinations: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        sources: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        weights: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 weights: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if weights is not None:
            pulumi.set(__self__, "weights", weights)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "weights")

    @weights.setter
    def weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "weights", value)


if not MYPY:
    class VisualsSankeyDiagramVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        destination_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        source_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        weight_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsSankeyDiagramVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsSankeyDiagramVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 destination_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 source_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 weight_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if destination_items_limit is not None:
            pulumi.set(__self__, "destination_items_limit", destination_items_limit)
        if source_items_limit is not None:
            pulumi.set(__self__, "source_items_limit", source_items_limit)
        if weight_sorts is not None:
            pulumi.set(__self__, "weight_sorts", weight_sorts)

    @property
    @pulumi.getter(name="destinationItemsLimit")
    def destination_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "destination_items_limit")

    @destination_items_limit.setter
    def destination_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "destination_items_limit", value)

    @property
    @pulumi.getter(name="sourceItemsLimit")
    def source_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "source_items_limit")

    @source_items_limit.setter
    def source_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "source_items_limit", value)

    @property
    @pulumi.getter(name="weightSorts")
    def weight_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "weight_sorts")

    @weight_sorts.setter
    def weight_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "weight_sorts", value)


if not MYPY:
    class VisualsScatterPlotVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsScatterPlotVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsScatterPlotVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsScatterPlotVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsScatterPlotVisualChartConfigurationArgsDict(TypedDict):
        data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
        x_axis_display_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        x_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        y_axis_display_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        y_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
elif False:
    VisualsScatterPlotVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsScatterPlotVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 y_axis_display_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 y_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None):
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)
        if x_axis_display_options is not None:
            pulumi.set(__self__, "x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            pulumi.set(__self__, "x_axis_label_options", x_axis_label_options)
        if y_axis_display_options is not None:
            pulumi.set(__self__, "y_axis_display_options", y_axis_display_options)
        if y_axis_label_options is not None:
            pulumi.set(__self__, "y_axis_label_options", y_axis_label_options)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)

    @property
    @pulumi.getter(name="yAxisDisplayOptions")
    def y_axis_display_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "y_axis_display_options")

    @y_axis_display_options.setter
    def y_axis_display_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "y_axis_display_options", value)

    @property
    @pulumi.getter(name="yAxisLabelOptions")
    def y_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "y_axis_label_options")

    @y_axis_label_options.setter
    def y_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "y_axis_label_options", value)


if not MYPY:
    class VisualsScatterPlotVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        scatter_plot_categorically_aggregated_field_wells: NotRequired[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWellsArgsDict']]
        scatter_plot_unaggregated_field_wells: NotRequired[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWellsArgsDict']]
elif False:
    VisualsScatterPlotVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsScatterPlotVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 scatter_plot_categorically_aggregated_field_wells: Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWellsArgs']] = None,
                 scatter_plot_unaggregated_field_wells: Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWellsArgs']] = None):
        if scatter_plot_categorically_aggregated_field_wells is not None:
            pulumi.set(__self__, "scatter_plot_categorically_aggregated_field_wells", scatter_plot_categorically_aggregated_field_wells)
        if scatter_plot_unaggregated_field_wells is not None:
            pulumi.set(__self__, "scatter_plot_unaggregated_field_wells", scatter_plot_unaggregated_field_wells)

    @property
    @pulumi.getter(name="scatterPlotCategoricallyAggregatedFieldWells")
    def scatter_plot_categorically_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "scatter_plot_categorically_aggregated_field_wells")

    @scatter_plot_categorically_aggregated_field_wells.setter
    def scatter_plot_categorically_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWellsArgs']]):
        pulumi.set(self, "scatter_plot_categorically_aggregated_field_wells", value)

    @property
    @pulumi.getter(name="scatterPlotUnaggregatedFieldWells")
    def scatter_plot_unaggregated_field_wells(self) -> Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWellsArgs']]:
        return pulumi.get(self, "scatter_plot_unaggregated_field_wells")

    @scatter_plot_unaggregated_field_wells.setter
    def scatter_plot_unaggregated_field_wells(self, value: Optional[pulumi.Input['VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWellsArgs']]):
        pulumi.set(self, "scatter_plot_unaggregated_field_wells", value)


if not MYPY:
    class VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWellsArgsDict(TypedDict):
        categories: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        sizes: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
        x_axes: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
        y_axes: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 sizes: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None,
                 x_axes: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None,
                 y_axes: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)
        if x_axes is not None:
            pulumi.set(__self__, "x_axes", x_axes)
        if y_axes is not None:
            pulumi.set(__self__, "y_axes", y_axes)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "sizes")

    @sizes.setter
    def sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "sizes", value)

    @property
    @pulumi.getter(name="xAxes")
    def x_axes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "x_axes")

    @x_axes.setter
    def x_axes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "x_axes", value)

    @property
    @pulumi.getter(name="yAxes")
    def y_axes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "y_axes")

    @y_axes.setter
    def y_axes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "y_axes", value)


if not MYPY:
    class VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWellsArgsDict(TypedDict):
        sizes: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
        x_axes: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        y_axes: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
elif False:
    VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 sizes: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None,
                 x_axes: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 y_axes: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None):
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)
        if x_axes is not None:
            pulumi.set(__self__, "x_axes", x_axes)
        if y_axes is not None:
            pulumi.set(__self__, "y_axes", y_axes)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "sizes")

    @sizes.setter
    def sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "sizes", value)

    @property
    @pulumi.getter(name="xAxes")
    def x_axes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "x_axes")

    @x_axes.setter
    def x_axes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "x_axes", value)

    @property
    @pulumi.getter(name="yAxes")
    def y_axes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "y_axes")

    @y_axes.setter
    def y_axes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "y_axes", value)


if not MYPY:
    class VisualsTableVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationArgsDict']]
        conditional_formatting: NotRequired[pulumi.Input['VisualsTableVisualConditionalFormattingArgsDict']]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsTableVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsTableVisualChartConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['VisualsTableVisualConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            pulumi.set(__self__, "conditional_formatting", conditional_formatting)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['VisualsTableVisualConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['VisualsTableVisualConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationArgsDict(TypedDict):
        field_options: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsArgsDict']]
        paginated_report_options: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationPaginatedReportOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationSortConfigurationArgsDict']]
        table_inline_visualizations: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationTableInlineVisualizationArgsDict']]]]
        table_options: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationTableOptionsArgsDict']]
        total_options: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationTotalOptionsArgsDict']]
elif False:
    VisualsTableVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 field_options: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsArgs']] = None,
                 paginated_report_options: Optional[pulumi.Input['VisualsTableVisualChartConfigurationPaginatedReportOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsTableVisualChartConfigurationSortConfigurationArgs']] = None,
                 table_inline_visualizations: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationTableInlineVisualizationArgs']]]] = None,
                 table_options: Optional[pulumi.Input['VisualsTableVisualChartConfigurationTableOptionsArgs']] = None,
                 total_options: Optional[pulumi.Input['VisualsTableVisualChartConfigurationTotalOptionsArgs']] = None):
        if field_options is not None:
            pulumi.set(__self__, "field_options", field_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if paginated_report_options is not None:
            pulumi.set(__self__, "paginated_report_options", paginated_report_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if table_inline_visualizations is not None:
            pulumi.set(__self__, "table_inline_visualizations", table_inline_visualizations)
        if table_options is not None:
            pulumi.set(__self__, "table_options", table_options)
        if total_options is not None:
            pulumi.set(__self__, "total_options", total_options)

    @property
    @pulumi.getter(name="fieldOptions")
    def field_options(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsArgs']]:
        return pulumi.get(self, "field_options")

    @field_options.setter
    def field_options(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsArgs']]):
        pulumi.set(self, "field_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="paginatedReportOptions")
    def paginated_report_options(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationPaginatedReportOptionsArgs']]:
        return pulumi.get(self, "paginated_report_options")

    @paginated_report_options.setter
    def paginated_report_options(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationPaginatedReportOptionsArgs']]):
        pulumi.set(self, "paginated_report_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="tableInlineVisualizations")
    def table_inline_visualizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationTableInlineVisualizationArgs']]]]:
        return pulumi.get(self, "table_inline_visualizations")

    @table_inline_visualizations.setter
    def table_inline_visualizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationTableInlineVisualizationArgs']]]]):
        pulumi.set(self, "table_inline_visualizations", value)

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationTableOptionsArgs']]:
        return pulumi.get(self, "table_options")

    @table_options.setter
    def table_options(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationTableOptionsArgs']]):
        pulumi.set(self, "table_options", value)

    @property
    @pulumi.getter(name="totalOptions")
    def total_options(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationTotalOptionsArgs']]:
        return pulumi.get(self, "total_options")

    @total_options.setter
    def total_options(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationTotalOptionsArgs']]):
        pulumi.set(self, "total_options", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldOptionsArgsDict(TypedDict):
        orders: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        selected_field_options: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgsDict']]]]
elif False:
    VisualsTableVisualChartConfigurationFieldOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldOptionsArgs:
    def __init__(__self__, *,
                 orders: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs']]]] = None):
        if orders is not None:
            pulumi.set(__self__, "orders", orders)
        if selected_field_options is not None:
            pulumi.set(__self__, "selected_field_options", selected_field_options)

    @property
    @pulumi.getter
    def orders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "orders")

    @orders.setter
    def orders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "orders", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs']]]]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs']]]]):
        pulumi.set(self, "selected_field_options", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        custom_label: NotRequired[pulumi.Input[str]]
        url_styling: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingArgsDict']]
        visibility: NotRequired[pulumi.Input[str]]
        width: NotRequired[pulumi.Input[str]]
elif False:
    VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 custom_label: Optional[pulumi.Input[str]] = None,
                 url_styling: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingArgs']] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "field_id", field_id)
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if url_styling is not None:
            pulumi.set(__self__, "url_styling", url_styling)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="urlStyling")
    def url_styling(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingArgs']]:
        return pulumi.get(self, "url_styling")

    @url_styling.setter
    def url_styling(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingArgs']]):
        pulumi.set(self, "url_styling", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingArgsDict(TypedDict):
        image_configuration: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationArgsDict']]
        link_configuration: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationArgsDict']]
elif False:
    VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingArgs:
    def __init__(__self__, *,
                 image_configuration: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationArgs']] = None,
                 link_configuration: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationArgs']] = None):
        if image_configuration is not None:
            pulumi.set(__self__, "image_configuration", image_configuration)
        if link_configuration is not None:
            pulumi.set(__self__, "link_configuration", link_configuration)

    @property
    @pulumi.getter(name="imageConfiguration")
    def image_configuration(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationArgs']]:
        return pulumi.get(self, "image_configuration")

    @image_configuration.setter
    def image_configuration(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationArgs']]):
        pulumi.set(self, "image_configuration", value)

    @property
    @pulumi.getter(name="linkConfiguration")
    def link_configuration(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationArgs']]:
        return pulumi.get(self, "link_configuration")

    @link_configuration.setter
    def link_configuration(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationArgs']]):
        pulumi.set(self, "link_configuration", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationArgsDict(TypedDict):
        sizing_options: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptionsArgsDict']]
elif False:
    VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationArgs:
    def __init__(__self__, *,
                 sizing_options: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptionsArgs']] = None):
        if sizing_options is not None:
            pulumi.set(__self__, "sizing_options", sizing_options)

    @property
    @pulumi.getter(name="sizingOptions")
    def sizing_options(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptionsArgs']]:
        return pulumi.get(self, "sizing_options")

    @sizing_options.setter
    def sizing_options(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptionsArgs']]):
        pulumi.set(self, "sizing_options", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptionsArgsDict(TypedDict):
        table_cell_image_scaling_configuration: NotRequired[pulumi.Input[str]]
elif False:
    VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptionsArgs:
    def __init__(__self__, *,
                 table_cell_image_scaling_configuration: Optional[pulumi.Input[str]] = None):
        if table_cell_image_scaling_configuration is not None:
            pulumi.set(__self__, "table_cell_image_scaling_configuration", table_cell_image_scaling_configuration)

    @property
    @pulumi.getter(name="tableCellImageScalingConfiguration")
    def table_cell_image_scaling_configuration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_cell_image_scaling_configuration")

    @table_cell_image_scaling_configuration.setter
    def table_cell_image_scaling_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_cell_image_scaling_configuration", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationArgsDict(TypedDict):
        content: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentArgsDict']]
        target: NotRequired[pulumi.Input[str]]
elif False:
    VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentArgs']] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentArgs']]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentArgs']]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentArgsDict(TypedDict):
        custom_icon_content: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContentArgsDict']]
        custom_text_content: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContentArgsDict']]
elif False:
    VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentArgs:
    def __init__(__self__, *,
                 custom_icon_content: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContentArgs']] = None,
                 custom_text_content: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContentArgs']] = None):
        if custom_icon_content is not None:
            pulumi.set(__self__, "custom_icon_content", custom_icon_content)
        if custom_text_content is not None:
            pulumi.set(__self__, "custom_text_content", custom_text_content)

    @property
    @pulumi.getter(name="customIconContent")
    def custom_icon_content(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContentArgs']]:
        return pulumi.get(self, "custom_icon_content")

    @custom_icon_content.setter
    def custom_icon_content(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContentArgs']]):
        pulumi.set(self, "custom_icon_content", value)

    @property
    @pulumi.getter(name="customTextContent")
    def custom_text_content(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContentArgs']]:
        return pulumi.get(self, "custom_text_content")

    @custom_text_content.setter
    def custom_text_content(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContentArgs']]):
        pulumi.set(self, "custom_text_content", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContentArgsDict(TypedDict):
        icon: NotRequired[pulumi.Input[str]]
elif False:
    VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContentArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input[str]] = None):
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContentArgsDict(TypedDict):
        font_configuration: NotRequired[pulumi.Input['FontConfigurationArgsDict']]
        value: NotRequired[pulumi.Input[str]]
elif False:
    VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContentArgs:
    def __init__(__self__, *,
                 font_configuration: Optional[pulumi.Input['FontConfigurationArgs']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['FontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['FontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        table_aggregated_field_wells: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWellsArgsDict']]
        table_unaggregated_field_wells: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsArgsDict']]
elif False:
    VisualsTableVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 table_aggregated_field_wells: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWellsArgs']] = None,
                 table_unaggregated_field_wells: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsArgs']] = None):
        if table_aggregated_field_wells is not None:
            pulumi.set(__self__, "table_aggregated_field_wells", table_aggregated_field_wells)
        if table_unaggregated_field_wells is not None:
            pulumi.set(__self__, "table_unaggregated_field_wells", table_unaggregated_field_wells)

    @property
    @pulumi.getter(name="tableAggregatedFieldWells")
    def table_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "table_aggregated_field_wells")

    @table_aggregated_field_wells.setter
    def table_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWellsArgs']]):
        pulumi.set(self, "table_aggregated_field_wells", value)

    @property
    @pulumi.getter(name="tableUnaggregatedFieldWells")
    def table_unaggregated_field_wells(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsArgs']]:
        return pulumi.get(self, "table_unaggregated_field_wells")

    @table_unaggregated_field_wells.setter
    def table_unaggregated_field_wells(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsArgs']]):
        pulumi.set(self, "table_unaggregated_field_wells", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWellsArgsDict(TypedDict):
        group_bies: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsArgsDict(TypedDict):
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueArgsDict']]]]
elif False:
    VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueArgs']]]] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        format_configuration: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfigurationArgsDict']]
elif False:
    VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfigurationArgs']] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfigurationArgsDict(TypedDict):
        date_time_format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
        number_format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
        string_format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
elif False:
    VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None,
                 number_format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None,
                 string_format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None):
        if date_time_format_configuration is not None:
            pulumi.set(__self__, "date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            pulumi.set(__self__, "number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            pulumi.set(__self__, "string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "date_time_format_configuration")

    @date_time_format_configuration.setter
    def date_time_format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "date_time_format_configuration", value)

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "number_format_configuration")

    @number_format_configuration.setter
    def number_format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "number_format_configuration", value)

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "string_format_configuration")

    @string_format_configuration.setter
    def string_format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "string_format_configuration", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationPaginatedReportOptionsArgsDict(TypedDict):
        overflow_column_header_visibility: NotRequired[pulumi.Input[str]]
        vertical_overflow_visibility: NotRequired[pulumi.Input[str]]
elif False:
    VisualsTableVisualChartConfigurationPaginatedReportOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationPaginatedReportOptionsArgs:
    def __init__(__self__, *,
                 overflow_column_header_visibility: Optional[pulumi.Input[str]] = None,
                 vertical_overflow_visibility: Optional[pulumi.Input[str]] = None):
        if overflow_column_header_visibility is not None:
            pulumi.set(__self__, "overflow_column_header_visibility", overflow_column_header_visibility)
        if vertical_overflow_visibility is not None:
            pulumi.set(__self__, "vertical_overflow_visibility", vertical_overflow_visibility)

    @property
    @pulumi.getter(name="overflowColumnHeaderVisibility")
    def overflow_column_header_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overflow_column_header_visibility")

    @overflow_column_header_visibility.setter
    def overflow_column_header_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overflow_column_header_visibility", value)

    @property
    @pulumi.getter(name="verticalOverflowVisibility")
    def vertical_overflow_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vertical_overflow_visibility")

    @vertical_overflow_visibility.setter
    def vertical_overflow_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vertical_overflow_visibility", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        pagination_configuration: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationSortConfigurationPaginationConfigurationArgsDict']]
        row_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsTableVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 pagination_configuration: Optional[pulumi.Input['VisualsTableVisualChartConfigurationSortConfigurationPaginationConfigurationArgs']] = None,
                 row_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if pagination_configuration is not None:
            pulumi.set(__self__, "pagination_configuration", pagination_configuration)
        if row_sorts is not None:
            pulumi.set(__self__, "row_sorts", row_sorts)

    @property
    @pulumi.getter(name="paginationConfiguration")
    def pagination_configuration(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationSortConfigurationPaginationConfigurationArgs']]:
        return pulumi.get(self, "pagination_configuration")

    @pagination_configuration.setter
    def pagination_configuration(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationSortConfigurationPaginationConfigurationArgs']]):
        pulumi.set(self, "pagination_configuration", value)

    @property
    @pulumi.getter(name="rowSorts")
    def row_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "row_sorts")

    @row_sorts.setter
    def row_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "row_sorts", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationSortConfigurationPaginationConfigurationArgsDict(TypedDict):
        page_number: pulumi.Input[int]
        page_size: pulumi.Input[int]
elif False:
    VisualsTableVisualChartConfigurationSortConfigurationPaginationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationSortConfigurationPaginationConfigurationArgs:
    def __init__(__self__, *,
                 page_number: pulumi.Input[int],
                 page_size: pulumi.Input[int]):
        pulumi.set(__self__, "page_number", page_number)
        pulumi.set(__self__, "page_size", page_size)

    @property
    @pulumi.getter(name="pageNumber")
    def page_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "page_number")

    @page_number.setter
    def page_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "page_number", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "page_size", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationTableInlineVisualizationArgsDict(TypedDict):
        data_bars: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationTableInlineVisualizationDataBarsArgsDict']]
elif False:
    VisualsTableVisualChartConfigurationTableInlineVisualizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationTableInlineVisualizationArgs:
    def __init__(__self__, *,
                 data_bars: Optional[pulumi.Input['VisualsTableVisualChartConfigurationTableInlineVisualizationDataBarsArgs']] = None):
        if data_bars is not None:
            pulumi.set(__self__, "data_bars", data_bars)

    @property
    @pulumi.getter(name="dataBars")
    def data_bars(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationTableInlineVisualizationDataBarsArgs']]:
        return pulumi.get(self, "data_bars")

    @data_bars.setter
    def data_bars(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationTableInlineVisualizationDataBarsArgs']]):
        pulumi.set(self, "data_bars", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationTableInlineVisualizationDataBarsArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        negative_color: NotRequired[pulumi.Input[str]]
        positive_color: NotRequired[pulumi.Input[str]]
elif False:
    VisualsTableVisualChartConfigurationTableInlineVisualizationDataBarsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationTableInlineVisualizationDataBarsArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 negative_color: Optional[pulumi.Input[str]] = None,
                 positive_color: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "field_id", field_id)
        if negative_color is not None:
            pulumi.set(__self__, "negative_color", negative_color)
        if positive_color is not None:
            pulumi.set(__self__, "positive_color", positive_color)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="negativeColor")
    def negative_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "negative_color")

    @negative_color.setter
    def negative_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "negative_color", value)

    @property
    @pulumi.getter(name="positiveColor")
    def positive_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "positive_color")

    @positive_color.setter
    def positive_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "positive_color", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationTableOptionsArgsDict(TypedDict):
        cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        header_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        orientation: NotRequired[pulumi.Input[str]]
        row_alternate_color_options: NotRequired[pulumi.Input['VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgsDict']]
elif False:
    VisualsTableVisualChartConfigurationTableOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationTableOptionsArgs:
    def __init__(__self__, *,
                 cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 header_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 orientation: Optional[pulumi.Input[str]] = None,
                 row_alternate_color_options: Optional[pulumi.Input['VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs']] = None):
        if cell_style is not None:
            pulumi.set(__self__, "cell_style", cell_style)
        if header_style is not None:
            pulumi.set(__self__, "header_style", header_style)
        if orientation is not None:
            pulumi.set(__self__, "orientation", orientation)
        if row_alternate_color_options is not None:
            pulumi.set(__self__, "row_alternate_color_options", row_alternate_color_options)

    @property
    @pulumi.getter(name="cellStyle")
    def cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "cell_style")

    @cell_style.setter
    def cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "cell_style", value)

    @property
    @pulumi.getter(name="headerStyle")
    def header_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "header_style")

    @header_style.setter
    def header_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "header_style", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter(name="rowAlternateColorOptions")
    def row_alternate_color_options(self) -> Optional[pulumi.Input['VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs']]:
        return pulumi.get(self, "row_alternate_color_options")

    @row_alternate_color_options.setter
    def row_alternate_color_options(self, value: Optional[pulumi.Input['VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs']]):
        pulumi.set(self, "row_alternate_color_options", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgsDict(TypedDict):
        row_alternate_colors: NotRequired[pulumi.Input[str]]
        status: NotRequired[pulumi.Input[str]]
        """
        The dashboard creation status.
        """
elif False:
    VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptionsArgs:
    def __init__(__self__, *,
                 row_alternate_colors: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: The dashboard creation status.
        """
        if row_alternate_colors is not None:
            pulumi.set(__self__, "row_alternate_colors", row_alternate_colors)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="rowAlternateColors")
    def row_alternate_colors(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "row_alternate_colors")

    @row_alternate_colors.setter
    def row_alternate_colors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "row_alternate_colors", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class VisualsTableVisualChartConfigurationTotalOptionsArgsDict(TypedDict):
        custom_label: NotRequired[pulumi.Input[str]]
        placement: NotRequired[pulumi.Input[str]]
        scroll_status: NotRequired[pulumi.Input[str]]
        total_cell_style: NotRequired[pulumi.Input['CellStyleArgsDict']]
        totals_visibility: NotRequired[pulumi.Input[str]]
elif False:
    VisualsTableVisualChartConfigurationTotalOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualChartConfigurationTotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 placement: Optional[pulumi.Input[str]] = None,
                 scroll_status: Optional[pulumi.Input[str]] = None,
                 total_cell_style: Optional[pulumi.Input['CellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input[str]] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if scroll_status is not None:
            pulumi.set(__self__, "scroll_status", scroll_status)
        if total_cell_style is not None:
            pulumi.set(__self__, "total_cell_style", total_cell_style)
        if totals_visibility is not None:
            pulumi.set(__self__, "totals_visibility", totals_visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scroll_status")

    @scroll_status.setter
    def scroll_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scroll_status", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['CellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['CellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "totals_visibility", value)


if not MYPY:
    class VisualsTableVisualConditionalFormattingArgsDict(TypedDict):
        conditional_formatting_options: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionArgsDict']]]]
elif False:
    VisualsTableVisualConditionalFormattingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionArgs']]]] = None):
        if conditional_formatting_options is not None:
            pulumi.set(__self__, "conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


if not MYPY:
    class VisualsTableVisualConditionalFormattingConditionalFormattingOptionArgsDict(TypedDict):
        cell: NotRequired[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgsDict']]
        row: NotRequired[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionRowArgsDict']]
elif False:
    VisualsTableVisualConditionalFormattingConditionalFormattingOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualConditionalFormattingConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 cell: Optional[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs']] = None,
                 row: Optional[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionRowArgs']] = None):
        if cell is not None:
            pulumi.set(__self__, "cell", cell)
        if row is not None:
            pulumi.set(__self__, "row", row)

    @property
    @pulumi.getter
    def cell(self) -> Optional[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs']]:
        return pulumi.get(self, "cell")

    @cell.setter
    def cell(self, value: Optional[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs']]):
        pulumi.set(self, "cell", value)

    @property
    @pulumi.getter
    def row(self) -> Optional[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionRowArgs']]:
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: Optional[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionRowArgs']]):
        pulumi.set(self, "row", value)


if not MYPY:
    class VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgsDict(TypedDict):
        field_id: pulumi.Input[str]
        text_format: NotRequired[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgsDict']]
elif False:
    VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 text_format: Optional[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs']] = None):
        pulumi.set(__self__, "field_id", field_id)
        if text_format is not None:
            pulumi.set(__self__, "text_format", text_format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="textFormat")
    def text_format(self) -> Optional[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs']]:
        return pulumi.get(self, "text_format")

    @text_format.setter
    def text_format(self, value: Optional[pulumi.Input['VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs']]):
        pulumi.set(self, "text_format", value)


if not MYPY:
    class VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgsDict(TypedDict):
        background_color: pulumi.Input['ConditionalFormattingColorArgsDict']
        text_color: pulumi.Input['ConditionalFormattingColorArgsDict']
        icon: NotRequired[pulumi.Input['ConditionalFormattingIconArgsDict']]
elif False:
    VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormatArgs:
    def __init__(__self__, *,
                 background_color: pulumi.Input['ConditionalFormattingColorArgs'],
                 text_color: pulumi.Input['ConditionalFormattingColorArgs'],
                 icon: Optional[pulumi.Input['ConditionalFormattingIconArgs']] = None):
        pulumi.set(__self__, "background_color", background_color)
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "text_color", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['ConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['ConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)


if not MYPY:
    class VisualsTableVisualConditionalFormattingConditionalFormattingOptionRowArgsDict(TypedDict):
        background_color: pulumi.Input['ConditionalFormattingColorArgsDict']
        text_color: pulumi.Input['ConditionalFormattingColorArgsDict']
elif False:
    VisualsTableVisualConditionalFormattingConditionalFormattingOptionRowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTableVisualConditionalFormattingConditionalFormattingOptionRowArgs:
    def __init__(__self__, *,
                 background_color: pulumi.Input['ConditionalFormattingColorArgs'],
                 text_color: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(__self__, "background_color", background_color)
        pulumi.set(__self__, "text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> pulumi.Input['ConditionalFormattingColorArgs']:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: pulumi.Input['ConditionalFormattingColorArgs']):
        pulumi.set(self, "text_color", value)


if not MYPY:
    class VisualsTreeMapVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsTreeMapVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsTreeMapVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTreeMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsTreeMapVisualChartConfigurationArgsDict(TypedDict):
        color_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        color_scale: NotRequired[pulumi.Input['ColorScaleArgsDict']]
        data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsTreeMapVisualChartConfigurationFieldWellsArgsDict']]
        group_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        size_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsTreeMapVisualChartConfigurationSortConfigurationArgsDict']]
        tooltip: NotRequired[pulumi.Input['TooltipOptionsArgsDict']]
elif False:
    VisualsTreeMapVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTreeMapVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 color_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 color_scale: Optional[pulumi.Input['ColorScaleArgs']] = None,
                 data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationFieldWellsArgs']] = None,
                 group_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 size_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TooltipOptionsArgs']] = None):
        if color_label_options is not None:
            pulumi.set(__self__, "color_label_options", color_label_options)
        if color_scale is not None:
            pulumi.set(__self__, "color_scale", color_scale)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if group_label_options is not None:
            pulumi.set(__self__, "group_label_options", group_label_options)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if size_label_options is not None:
            pulumi.set(__self__, "size_label_options", size_label_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="colorScale")
    def color_scale(self) -> Optional[pulumi.Input['ColorScaleArgs']]:
        return pulumi.get(self, "color_scale")

    @color_scale.setter
    def color_scale(self, value: Optional[pulumi.Input['ColorScaleArgs']]):
        pulumi.set(self, "color_scale", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="groupLabelOptions")
    def group_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "group_label_options")

    @group_label_options.setter
    def group_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "group_label_options", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="sizeLabelOptions")
    def size_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "size_label_options")

    @size_label_options.setter
    def size_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "size_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)


if not MYPY:
    class VisualsTreeMapVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        tree_map_aggregated_field_wells: NotRequired[pulumi.Input['VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWellsArgsDict']]
elif False:
    VisualsTreeMapVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTreeMapVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 tree_map_aggregated_field_wells: Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWellsArgs']] = None):
        if tree_map_aggregated_field_wells is not None:
            pulumi.set(__self__, "tree_map_aggregated_field_wells", tree_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="treeMapAggregatedFieldWells")
    def tree_map_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "tree_map_aggregated_field_wells")

    @tree_map_aggregated_field_wells.setter
    def tree_map_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "tree_map_aggregated_field_wells", value)


if not MYPY:
    class VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWellsArgsDict(TypedDict):
        colors: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
        groups: NotRequired[pulumi.Input['SmallMultiplesOptionsArgsDict']]
        sizes: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None,
                 groups: Optional[pulumi.Input['SmallMultiplesOptionsArgs']] = None,
                 sizes: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['SmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['SmallMultiplesOptionsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "sizes")

    @sizes.setter
    def sizes(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "sizes", value)


if not MYPY:
    class VisualsTreeMapVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        tree_map_group_items_limit_configuration: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        tree_map_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsTreeMapVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsTreeMapVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 tree_map_group_items_limit_configuration: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 tree_map_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if tree_map_group_items_limit_configuration is not None:
            pulumi.set(__self__, "tree_map_group_items_limit_configuration", tree_map_group_items_limit_configuration)
        if tree_map_sorts is not None:
            pulumi.set(__self__, "tree_map_sorts", tree_map_sorts)

    @property
    @pulumi.getter(name="treeMapGroupItemsLimitConfiguration")
    def tree_map_group_items_limit_configuration(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "tree_map_group_items_limit_configuration")

    @tree_map_group_items_limit_configuration.setter
    def tree_map_group_items_limit_configuration(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "tree_map_group_items_limit_configuration", value)

    @property
    @pulumi.getter(name="treeMapSorts")
    def tree_map_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "tree_map_sorts")

    @tree_map_sorts.setter
    def tree_map_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "tree_map_sorts", value)


if not MYPY:
    class VisualsWaterfallVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsWaterfallVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsWaterfallVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWaterfallVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsWaterfallVisualChartConfigurationArgsDict(TypedDict):
        category_axis_display_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        category_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        data_labels: NotRequired[pulumi.Input['DataLabelsOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsWaterfallVisualChartConfigurationFieldWellsArgsDict']]
        legend: NotRequired[pulumi.Input['LegendOptionsArgsDict']]
        primary_y_axis_display_options: NotRequired[pulumi.Input['AxisDisplayOptionsArgsDict']]
        primary_y_axis_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsWaterfallVisualChartConfigurationSortConfigurationArgsDict']]
        visual_palette: NotRequired[pulumi.Input['VisualPaletteArgsDict']]
        waterfall_chart_options: NotRequired[pulumi.Input['VisualsWaterfallVisualChartConfigurationWaterfallChartOptionsArgsDict']]
elif False:
    VisualsWaterfallVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWaterfallVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 category_axis_display_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 category_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['DataLabelsOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['LegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['AxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationSortConfigurationArgs']] = None,
                 visual_palette: Optional[pulumi.Input['VisualPaletteArgs']] = None,
                 waterfall_chart_options: Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationWaterfallChartOptionsArgs']] = None):
        if category_axis_display_options is not None:
            pulumi.set(__self__, "category_axis_display_options", category_axis_display_options)
        if category_axis_label_options is not None:
            pulumi.set(__self__, "category_axis_label_options", category_axis_label_options)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if primary_y_axis_display_options is not None:
            pulumi.set(__self__, "primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            pulumi.set(__self__, "primary_y_axis_label_options", primary_y_axis_label_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)
        if waterfall_chart_options is not None:
            pulumi.set(__self__, "waterfall_chart_options", waterfall_chart_options)

    @property
    @pulumi.getter(name="categoryAxisDisplayOptions")
    def category_axis_display_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis_display_options")

    @category_axis_display_options.setter
    def category_axis_display_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis_display_options", value)

    @property
    @pulumi.getter(name="categoryAxisLabelOptions")
    def category_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_axis_label_options")

    @category_axis_label_options.setter
    def category_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_axis_label_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DataLabelsOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DataLabelsOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['LegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['LegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['AxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['AxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['VisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['VisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="waterfallChartOptions")
    def waterfall_chart_options(self) -> Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationWaterfallChartOptionsArgs']]:
        return pulumi.get(self, "waterfall_chart_options")

    @waterfall_chart_options.setter
    def waterfall_chart_options(self, value: Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationWaterfallChartOptionsArgs']]):
        pulumi.set(self, "waterfall_chart_options", value)


if not MYPY:
    class VisualsWaterfallVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        waterfall_chart_aggregated_field_wells: NotRequired[pulumi.Input['VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWellsArgsDict']]
elif False:
    VisualsWaterfallVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWaterfallVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 waterfall_chart_aggregated_field_wells: Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWellsArgs']] = None):
        if waterfall_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "waterfall_chart_aggregated_field_wells", waterfall_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="waterfallChartAggregatedFieldWells")
    def waterfall_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "waterfall_chart_aggregated_field_wells")

    @waterfall_chart_aggregated_field_wells.setter
    def waterfall_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "waterfall_chart_aggregated_field_wells", value)


if not MYPY:
    class VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWellsArgsDict(TypedDict):
        breakdowns: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        categories: NotRequired[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgsDict']]]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgsDict']]]]
elif False:
    VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]] = None):
        if breakdowns is not None:
            pulumi.set(__self__, "breakdowns", breakdowns)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def breakdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "breakdowns")

    @breakdowns.setter
    def breakdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "breakdowns", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DimensionFieldSchemaArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MeasureFieldSchemaArgs']]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class VisualsWaterfallVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        breakdown_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        category_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsWaterfallVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWaterfallVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 breakdown_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 category_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if breakdown_items_limit is not None:
            pulumi.set(__self__, "breakdown_items_limit", breakdown_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)

    @property
    @pulumi.getter(name="breakdownItemsLimit")
    def breakdown_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "breakdown_items_limit")

    @breakdown_items_limit.setter
    def breakdown_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "breakdown_items_limit", value)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sorts")

    @category_sorts.setter
    def category_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sorts", value)


if not MYPY:
    class VisualsWaterfallVisualChartConfigurationWaterfallChartOptionsArgsDict(TypedDict):
        total_bar_label: NotRequired[pulumi.Input[str]]
elif False:
    VisualsWaterfallVisualChartConfigurationWaterfallChartOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWaterfallVisualChartConfigurationWaterfallChartOptionsArgs:
    def __init__(__self__, *,
                 total_bar_label: Optional[pulumi.Input[str]] = None):
        if total_bar_label is not None:
            pulumi.set(__self__, "total_bar_label", total_bar_label)

    @property
    @pulumi.getter(name="totalBarLabel")
    def total_bar_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "total_bar_label")

    @total_bar_label.setter
    def total_bar_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "total_bar_label", value)


if not MYPY:
    class VisualsWordCloudVisualArgsDict(TypedDict):
        visual_id: pulumi.Input[str]
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgsDict']]]]
        """
        List of IAM actions to grant or revoke permissions on.
        """
        chart_configuration: NotRequired[pulumi.Input['VisualsWordCloudVisualChartConfigurationArgsDict']]
        column_hierarchies: NotRequired[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgsDict']]]]
        subtitle: NotRequired[pulumi.Input['SubtitleArgsDict']]
        title: NotRequired[pulumi.Input['SubtitleArgsDict']]
elif False:
    VisualsWordCloudVisualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWordCloudVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['SubtitleArgs']] = None,
                 title: Optional[pulumi.Input['SubtitleArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualCustomActionsArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ColumnHierarchiesArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['SubtitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['SubtitleArgs']]):
        pulumi.set(self, "title", value)


if not MYPY:
    class VisualsWordCloudVisualChartConfigurationArgsDict(TypedDict):
        category_label_options: NotRequired[pulumi.Input['ChartAxisLabelOptionsArgsDict']]
        field_wells: NotRequired[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsArgsDict']]
        sort_configuration: NotRequired[pulumi.Input['VisualsWordCloudVisualChartConfigurationSortConfigurationArgsDict']]
        word_cloud_options: NotRequired[pulumi.Input['VisualsWordCloudVisualChartConfigurationWordCloudOptionsArgsDict']]
elif False:
    VisualsWordCloudVisualChartConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWordCloudVisualChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationSortConfigurationArgs']] = None,
                 word_cloud_options: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationWordCloudOptionsArgs']] = None):
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if word_cloud_options is not None:
            pulumi.set(__self__, "word_cloud_options", word_cloud_options)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['ChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="wordCloudOptions")
    def word_cloud_options(self) -> Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationWordCloudOptionsArgs']]:
        return pulumi.get(self, "word_cloud_options")

    @word_cloud_options.setter
    def word_cloud_options(self, value: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationWordCloudOptionsArgs']]):
        pulumi.set(self, "word_cloud_options", value)


if not MYPY:
    class VisualsWordCloudVisualChartConfigurationFieldWellsArgsDict(TypedDict):
        word_cloud_aggregated_field_wells: NotRequired[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsArgsDict']]
elif False:
    VisualsWordCloudVisualChartConfigurationFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWordCloudVisualChartConfigurationFieldWellsArgs:
    def __init__(__self__, *,
                 word_cloud_aggregated_field_wells: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsArgs']] = None):
        if word_cloud_aggregated_field_wells is not None:
            pulumi.set(__self__, "word_cloud_aggregated_field_wells", word_cloud_aggregated_field_wells)

    @property
    @pulumi.getter(name="wordCloudAggregatedFieldWells")
    def word_cloud_aggregated_field_wells(self) -> Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "word_cloud_aggregated_field_wells")

    @word_cloud_aggregated_field_wells.setter
    def word_cloud_aggregated_field_wells(self, value: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsArgs']]):
        pulumi.set(self, "word_cloud_aggregated_field_wells", value)


if not MYPY:
    class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsArgsDict(TypedDict):
        group_bies: NotRequired[pulumi.Input[Sequence[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByArgsDict']]]]
        size: NotRequired[pulumi.Input['MeasureFieldSchema2ArgsDict']]
elif False:
    VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByArgs']]]] = None,
                 size: Optional[pulumi.Input['MeasureFieldSchema2Args']] = None):
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByArgs']]]]:
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input['MeasureFieldSchema2Args']]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input['MeasureFieldSchema2Args']]):
        pulumi.set(self, "size", value)


if not MYPY:
    class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByArgsDict(TypedDict):
        categorical_dimension_field: NotRequired[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionFieldArgsDict']]
        date_dimension_field: NotRequired[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionFieldArgsDict']]
        numerical_dimension_field: NotRequired[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionFieldArgsDict']]
elif False:
    VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByArgs:
    def __init__(__self__, *,
                 categorical_dimension_field: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionFieldArgs']] = None,
                 date_dimension_field: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionFieldArgs']] = None,
                 numerical_dimension_field: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionFieldArgs']] = None):
        if categorical_dimension_field is not None:
            pulumi.set(__self__, "categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            pulumi.set(__self__, "date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            pulumi.set(__self__, "numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionFieldArgs']]:
        return pulumi.get(self, "categorical_dimension_field")

    @categorical_dimension_field.setter
    def categorical_dimension_field(self, value: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionFieldArgs']]):
        pulumi.set(self, "categorical_dimension_field", value)

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionFieldArgs']]:
        return pulumi.get(self, "date_dimension_field")

    @date_dimension_field.setter
    def date_dimension_field(self, value: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionFieldArgs']]):
        pulumi.set(self, "date_dimension_field", value)

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionFieldArgs']]:
        return pulumi.get(self, "numerical_dimension_field")

    @numerical_dimension_field.setter
    def numerical_dimension_field(self, value: Optional[pulumi.Input['VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionFieldArgs']]):
        pulumi.set(self, "numerical_dimension_field", value)


if not MYPY:
    class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        format_configuration: NotRequired[pulumi.Input['StringFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['StringFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['StringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['StringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        date_granularity: NotRequired[pulumi.Input[str]]
        format_configuration: NotRequired[pulumi.Input['DateTimeFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 date_granularity: Optional[pulumi.Input[str]] = None,
                 format_configuration: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if date_granularity is not None:
            pulumi.set(__self__, "date_granularity", date_granularity)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_granularity")

    @date_granularity.setter
    def date_granularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_granularity", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionFieldArgsDict(TypedDict):
        column: pulumi.Input['ColumnArgsDict']
        field_id: pulumi.Input[str]
        format_configuration: NotRequired[pulumi.Input['NumberFormatConfigurationArgsDict']]
        hierarchy_id: NotRequired[pulumi.Input[str]]
elif False:
    VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['ColumnArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['NumberFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['ColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['ColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['NumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['NumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


if not MYPY:
    class VisualsWordCloudVisualChartConfigurationSortConfigurationArgsDict(TypedDict):
        category_items_limit: NotRequired[pulumi.Input['ItemsLimitConfigurationArgsDict']]
        category_sorts: NotRequired[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgsDict']]]]
elif False:
    VisualsWordCloudVisualChartConfigurationSortConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWordCloudVisualChartConfigurationSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['ItemsLimitConfigurationArgs']] = None,
                 category_sorts: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['ItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['ItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sorts")

    @category_sorts.setter
    def category_sorts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sorts", value)


if not MYPY:
    class VisualsWordCloudVisualChartConfigurationWordCloudOptionsArgsDict(TypedDict):
        cloud_layout: NotRequired[pulumi.Input[str]]
        maximum_string_length: NotRequired[pulumi.Input[int]]
        word_casing: NotRequired[pulumi.Input[str]]
        word_orientation: NotRequired[pulumi.Input[str]]
        word_padding: NotRequired[pulumi.Input[str]]
        word_scaling: NotRequired[pulumi.Input[str]]
elif False:
    VisualsWordCloudVisualChartConfigurationWordCloudOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VisualsWordCloudVisualChartConfigurationWordCloudOptionsArgs:
    def __init__(__self__, *,
                 cloud_layout: Optional[pulumi.Input[str]] = None,
                 maximum_string_length: Optional[pulumi.Input[int]] = None,
                 word_casing: Optional[pulumi.Input[str]] = None,
                 word_orientation: Optional[pulumi.Input[str]] = None,
                 word_padding: Optional[pulumi.Input[str]] = None,
                 word_scaling: Optional[pulumi.Input[str]] = None):
        if cloud_layout is not None:
            pulumi.set(__self__, "cloud_layout", cloud_layout)
        if maximum_string_length is not None:
            pulumi.set(__self__, "maximum_string_length", maximum_string_length)
        if word_casing is not None:
            pulumi.set(__self__, "word_casing", word_casing)
        if word_orientation is not None:
            pulumi.set(__self__, "word_orientation", word_orientation)
        if word_padding is not None:
            pulumi.set(__self__, "word_padding", word_padding)
        if word_scaling is not None:
            pulumi.set(__self__, "word_scaling", word_scaling)

    @property
    @pulumi.getter(name="cloudLayout")
    def cloud_layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_layout")

    @cloud_layout.setter
    def cloud_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_layout", value)

    @property
    @pulumi.getter(name="maximumStringLength")
    def maximum_string_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_string_length")

    @maximum_string_length.setter
    def maximum_string_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_string_length", value)

    @property
    @pulumi.getter(name="wordCasing")
    def word_casing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "word_casing")

    @word_casing.setter
    def word_casing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "word_casing", value)

    @property
    @pulumi.getter(name="wordOrientation")
    def word_orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "word_orientation")

    @word_orientation.setter
    def word_orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "word_orientation", value)

    @property
    @pulumi.getter(name="wordPadding")
    def word_padding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "word_padding")

    @word_padding.setter
    def word_padding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "word_padding", value)

    @property
    @pulumi.getter(name="wordScaling")
    def word_scaling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "word_scaling")

    @word_scaling.setter
    def word_scaling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "word_scaling", value)


if not MYPY:
    class VpcConnectionTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        update: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    VpcConnectionTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpcConnectionTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class GetDataSetColumnLevelPermissionRuleArgsDict(TypedDict):
        column_names: Sequence[str]
        principals: Sequence[str]
elif False:
    GetDataSetColumnLevelPermissionRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDataSetColumnLevelPermissionRuleArgs:
    def __init__(__self__, *,
                 column_names: Sequence[str],
                 principals: Sequence[str]):
        pulumi.set(__self__, "column_names", column_names)
        pulumi.set(__self__, "principals", principals)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Sequence[str]:
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: Sequence[str]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter
    def principals(self) -> Sequence[str]:
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: Sequence[str]):
        pulumi.set(self, "principals", value)


