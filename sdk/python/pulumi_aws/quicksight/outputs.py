# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AggregationFunction',
    'AnalysisDefinition',
    'AnalysisDefinitionAnalysisDefaults',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfiguration',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions',
    'AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions',
    'AnalysisDefinitionCalculatedField',
    'AnalysisDefinitionColumnConfiguration',
    'AnalysisDefinitionColumnConfigurationFormatConfiguration',
    'AnalysisDefinitionDataSetIdentifiersDeclaration',
    'AnalysisDefinitionFilterGroup',
    'AnalysisDefinitionFilterGroupScopeConfiguration',
    'AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheets',
    'AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration',
    'AnalysisDefinitionParameterDeclaration',
    'AnalysisDefinitionSheet',
    'AnalysisDefinitionSheetParameterControl',
    'AnalysisDefinitionSheetParameterControlDateTimePicker',
    'AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptions',
    'AnalysisDefinitionSheetParameterControlDropdown',
    'AnalysisDefinitionSheetParameterControlDropdownDisplayOptions',
    'AnalysisDefinitionSheetParameterControlDropdownSelectableValues',
    'AnalysisDefinitionSheetParameterControlList',
    'AnalysisDefinitionSheetParameterControlListDisplayOptions',
    'AnalysisDefinitionSheetParameterControlListSelectableValues',
    'AnalysisDefinitionSheetParameterControlSlider',
    'AnalysisDefinitionSheetParameterControlSliderDisplayOptions',
    'AnalysisDefinitionSheetParameterControlTextArea',
    'AnalysisDefinitionSheetParameterControlTextField',
    'AnalysisDefinitionSheetSheetControlLayouts',
    'AnalysisDefinitionSheetSheetControlLayoutsConfiguration',
    'AnalysisDefinitionSheetTextBox',
    'AnalysisParameters',
    'AnalysisParametersDateTimeParameter',
    'AnalysisParametersDecimalParameter',
    'AnalysisParametersIntegerParameter',
    'AnalysisParametersStringParameter',
    'AnalysisPermission',
    'AnalysisSourceEntity',
    'AnalysisSourceEntitySourceTemplate',
    'AnalysisSourceEntitySourceTemplateDataSetReference',
    'AxisDisplayOptions',
    'AxisDisplayOptionsDataOptions',
    'AxisDisplayOptionsDataOptionsDateAxisOptions',
    'AxisDisplayOptionsDataOptionsNumericAxisOptions',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsRange',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDriven',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMax',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsScale',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinear',
    'AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmic',
    'AxisDisplayOptionsScrollbarOptions',
    'AxisDisplayOptionsScrollbarOptionsVisibleRange',
    'AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRange',
    'AxisDisplayOptionsTickLabelOptions',
    'CascadingControlConfiguration',
    'CascadingControlConfigurationSourceControl',
    'CategoryFilter',
    'CellStyle',
    'CellStyleBorder',
    'CellStyleBorderSideSpecificBorder',
    'ChartAxisLabelOptions',
    'ChartAxisLabelOptionsAxisLabelOptions',
    'ChartAxisLabelOptionsAxisLabelOptionsApplyTo',
    'ColorScale',
    'ColorScaleColor',
    'ColorScaleNullValueColor',
    'Column',
    'ColumnHierarchies',
    'ColumnHierarchiesDateTimeHierarchy',
    'ColumnHierarchiesExplicitHierarchy',
    'ColumnHierarchiesExplicitHierarchyColumn',
    'ColumnHierarchiesPredefinedHierarchy',
    'ColumnSort',
    'ConditionalFormattingColor',
    'ConditionalFormattingColorGradient',
    'ConditionalFormattingColorGradientColor',
    'ConditionalFormattingColorGradientColorStop',
    'ConditionalFormattingColorSolid',
    'ConditionalFormattingIcon',
    'ConditionalFormattingIconCustomCondition',
    'ConditionalFormattingIconCustomConditionDisplayConfiguration',
    'ConditionalFormattingIconCustomConditionIconOptions',
    'ConditionalFormattingIconIconSet',
    'ContributionAnalysisDefaults',
    'ContributionAnalysisDefaultsContributorDimension',
    'DashboardDashboardPublishOptions',
    'DashboardDashboardPublishOptionsAdHocFilteringOption',
    'DashboardDashboardPublishOptionsDataPointDrillUpDownOption',
    'DashboardDashboardPublishOptionsDataPointMenuLabelOption',
    'DashboardDashboardPublishOptionsDataPointTooltipOption',
    'DashboardDashboardPublishOptionsExportToCsvOption',
    'DashboardDashboardPublishOptionsExportWithHiddenFieldsOption',
    'DashboardDashboardPublishOptionsSheetControlsOption',
    'DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption',
    'DashboardDashboardPublishOptionsVisualAxisSortOption',
    'DashboardDashboardPublishOptionsVisualMenuOption',
    'DashboardDefinition',
    'DashboardDefinitionAnalysisDefaults',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfiguration',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions',
    'DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions',
    'DashboardDefinitionCalculatedField',
    'DashboardDefinitionColumnConfiguration',
    'DashboardDefinitionColumnConfigurationFormatConfiguration',
    'DashboardDefinitionDataSetIdentifiersDeclaration',
    'DashboardDefinitionFilterGroup',
    'DashboardDefinitionFilterGroupScopeConfiguration',
    'DashboardDefinitionFilterGroupScopeConfigurationSelectedSheets',
    'DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration',
    'DashboardDefinitionParameterDeclaration',
    'DashboardDefinitionSheet',
    'DashboardDefinitionSheetParameterControl',
    'DashboardDefinitionSheetParameterControlDateTimePicker',
    'DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptions',
    'DashboardDefinitionSheetParameterControlDropdown',
    'DashboardDefinitionSheetParameterControlDropdownDisplayOptions',
    'DashboardDefinitionSheetParameterControlDropdownSelectableValues',
    'DashboardDefinitionSheetParameterControlList',
    'DashboardDefinitionSheetParameterControlListDisplayOptions',
    'DashboardDefinitionSheetParameterControlListSelectableValues',
    'DashboardDefinitionSheetParameterControlSlider',
    'DashboardDefinitionSheetParameterControlSliderDisplayOptions',
    'DashboardDefinitionSheetParameterControlTextArea',
    'DashboardDefinitionSheetParameterControlTextField',
    'DashboardDefinitionSheetSheetControlLayouts',
    'DashboardDefinitionSheetSheetControlLayoutsConfiguration',
    'DashboardDefinitionSheetTextBox',
    'DashboardParameters',
    'DashboardParametersDateTimeParameter',
    'DashboardParametersDecimalParameter',
    'DashboardParametersIntegerParameter',
    'DashboardParametersStringParameter',
    'DashboardPermission',
    'DashboardSourceEntity',
    'DashboardSourceEntitySourceTemplate',
    'DashboardSourceEntitySourceTemplateDataSetReference',
    'DataLabelsOptions',
    'DataLabelsOptionsDataLabelType',
    'DataLabelsOptionsDataLabelTypeDataPathLabelType',
    'DataLabelsOptionsDataLabelTypeFieldLabelType',
    'DataPathValue',
    'DataSetColumnGroup',
    'DataSetColumnGroupGeoSpatialColumnGroup',
    'DataSetColumnLevelPermissionRule',
    'DataSetDataSetUsageConfiguration',
    'DataSetFieldFolder',
    'DataSetLogicalTableMap',
    'DataSetLogicalTableMapDataTransform',
    'DataSetLogicalTableMapDataTransformCastColumnTypeOperation',
    'DataSetLogicalTableMapDataTransformCreateColumnsOperation',
    'DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn',
    'DataSetLogicalTableMapDataTransformFilterOperation',
    'DataSetLogicalTableMapDataTransformProjectOperation',
    'DataSetLogicalTableMapDataTransformRenameColumnOperation',
    'DataSetLogicalTableMapDataTransformTagColumnOperation',
    'DataSetLogicalTableMapDataTransformTagColumnOperationTag',
    'DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription',
    'DataSetLogicalTableMapDataTransformUntagColumnOperation',
    'DataSetLogicalTableMapSource',
    'DataSetLogicalTableMapSourceJoinInstruction',
    'DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties',
    'DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties',
    'DataSetOutputColumn',
    'DataSetPermission',
    'DataSetPhysicalTableMap',
    'DataSetPhysicalTableMapCustomSql',
    'DataSetPhysicalTableMapCustomSqlColumn',
    'DataSetPhysicalTableMapRelationalTable',
    'DataSetPhysicalTableMapRelationalTableInputColumn',
    'DataSetPhysicalTableMapS3Source',
    'DataSetPhysicalTableMapS3SourceInputColumn',
    'DataSetPhysicalTableMapS3SourceUploadSettings',
    'DataSetRefreshProperties',
    'DataSetRefreshPropertiesRefreshConfiguration',
    'DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh',
    'DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow',
    'DataSetRowLevelPermissionDataSet',
    'DataSetRowLevelPermissionTagConfiguration',
    'DataSetRowLevelPermissionTagConfigurationTagRule',
    'DataSourceCredentials',
    'DataSourceCredentialsCredentialPair',
    'DataSourceParameters',
    'DataSourceParametersAmazonElasticsearch',
    'DataSourceParametersAthena',
    'DataSourceParametersAurora',
    'DataSourceParametersAuroraPostgresql',
    'DataSourceParametersAwsIotAnalytics',
    'DataSourceParametersJira',
    'DataSourceParametersMariaDb',
    'DataSourceParametersMysql',
    'DataSourceParametersOracle',
    'DataSourceParametersPostgresql',
    'DataSourceParametersPresto',
    'DataSourceParametersRds',
    'DataSourceParametersRedshift',
    'DataSourceParametersS3',
    'DataSourceParametersS3ManifestFileLocation',
    'DataSourceParametersServiceNow',
    'DataSourceParametersSnowflake',
    'DataSourceParametersSpark',
    'DataSourceParametersSqlServer',
    'DataSourceParametersTeradata',
    'DataSourceParametersTwitter',
    'DataSourcePermission',
    'DataSourceSslProperties',
    'DataSourceVpcConnectionProperties',
    'DateTimeFormatConfiguration',
    'DateTimeParameterDeclaration',
    'DateTimeParameterDeclarationDefaultValues',
    'DateTimeParameterDeclarationDefaultValuesRollingDate',
    'DateTimeParameterDeclarationValuesWhenUnset',
    'DecimalParameterDeclaration',
    'DecimalParameterDeclarationDefaultValues',
    'DecimalParameterDeclarationValuesWhenUnset',
    'DecimalPlacesConfiguration',
    'DimensionFieldSchema2',
    'DimensionFieldSchema',
    'DimensionFieldSchemaCategoricalDimensionField',
    'DimensionFieldSchemaDateDimensionField',
    'DimensionFieldSchemaNumericalDimensionField',
    'DrillDownFilters',
    'DynamicValue',
    'FieldSort',
    'FieldSortOptions',
    'FilterControls',
    'FilterControlsDateTimePicker',
    'FilterControlsDateTimePickerDisplayOptions',
    'FilterControlsDropdown',
    'FilterControlsDropdownDisplayOptions',
    'FilterControlsDropdownSelectableValues',
    'FilterControlsList',
    'FilterControlsListDisplayOptions',
    'FilterControlsListSelectableValues',
    'FilterControlsRelativeDateTime',
    'FilterControlsRelativeDateTimeDisplayOptions',
    'FilterControlsSlider',
    'FilterControlsSliderDisplayOptions',
    'FilterControlsTextArea',
    'FilterControlsTextField',
    'Filters',
    'FiltersCategoryFilter',
    'FiltersCategoryFilterConfiguration',
    'FiltersCategoryFilterConfigurationCustomFilterConfiguration',
    'FiltersCategoryFilterConfigurationCustomFilterListConfiguration',
    'FiltersCategoryFilterConfigurationFilterListConfiguration',
    'FiltersNumericEqualityFilter',
    'FiltersNumericRangeFilter',
    'FiltersNumericRangeFilterRangeMaximum',
    'FiltersNumericRangeFilterRangeMinimum',
    'FiltersRelativeDatesFilter',
    'FiltersRelativeDatesFilterAnchorDateConfiguration',
    'FiltersRelativeDatesFilterExcludePeriodConfiguration',
    'FiltersTimeEqualityFilter',
    'FiltersTimeRangeFilter',
    'FiltersTimeRangeFilterExcludePeriodConfiguration',
    'FiltersTimeRangeFilterRangeMaximumValue',
    'FiltersTimeRangeFilterRangeMaximumValueRollingDate',
    'FiltersTimeRangeFilterRangeMinimumValue',
    'FiltersTimeRangeFilterRangeMinimumValueRollingDate',
    'FiltersTopBottomFilter',
    'FiltersTopBottomFilterAggregationSortConfiguration',
    'FolderPermission',
    'FontConfiguration',
    'FontConfigurationFontSize',
    'FontConfigurationFontWeight',
    'FreeFormLayoutElements',
    'FreeFormLayoutElementsBackgroundStyle',
    'FreeFormLayoutElementsBorderStyle',
    'FreeFormLayoutElementsRenderingRule',
    'FreeFormLayoutElementsSelectedBorderStyle',
    'GridLayout',
    'GridLayoutCanvasSizeOptions',
    'GridLayoutCanvasSizeOptionsScreenCanvasSizeOptions',
    'GridLayoutElement',
    'IamPolicyAssignmentIdentities',
    'IntegerParameterDeclaration',
    'IntegerParameterDeclarationDefaultValues',
    'IntegerParameterDeclarationValuesWhenUnset',
    'ItemsLimitConfiguration',
    'LabelOptions',
    'Layouts',
    'LayoutsConfiguration',
    'LayoutsConfigurationFreeFormLayout',
    'LayoutsConfigurationFreeFormLayoutCanvasSizeOptions',
    'LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptions',
    'LayoutsConfigurationSectionBasedLayout',
    'LayoutsConfigurationSectionBasedLayoutBodySection',
    'LayoutsConfigurationSectionBasedLayoutBodySectionContent',
    'LayoutsConfigurationSectionBasedLayoutBodySectionContentLayout',
    'LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayout',
    'LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfiguration',
    'LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfter',
    'LayoutsConfigurationSectionBasedLayoutBodySectionStyle',
    'LayoutsConfigurationSectionBasedLayoutCanvasSizeOptions',
    'LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptions',
    'LayoutsConfigurationSectionBasedLayoutFooterSections',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsLayout',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayout',
    'LayoutsConfigurationSectionBasedLayoutFooterSectionsStyle',
    'LayoutsConfigurationSectionBasedLayoutHeaderSections',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayout',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayout',
    'LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyle',
    'LegendOptions',
    'LineChartLineStyleSettings',
    'LineChartMarkerStyleSettings',
    'MeasureFieldSchema2',
    'MeasureFieldSchema2CalculatedMeasureField',
    'MeasureFieldSchema2CategoricalMeasureField',
    'MeasureFieldSchema2DateMeasureField',
    'MeasureFieldSchema2NumericalMeasureField',
    'MeasureFieldSchema',
    'MeasureFieldSchemaCalculatedMeasureField',
    'MeasureFieldSchemaCategoricalMeasureField',
    'MeasureFieldSchemaDateMeasureField',
    'MeasureFieldSchemaNumericalMeasureField',
    'NamespaceTimeouts',
    'NegativeValueConfiguration',
    'NullValueFormatConfiguration',
    'NumberDisplayFormatConfiguration',
    'NumberFormatConfiguration',
    'NumericEqualityFilter',
    'NumericFormatConfiguration',
    'NumericFormatConfigurationCurrencyDisplayFormatConfiguration',
    'NumericalAggregation',
    'NumericalAggregationPercentileAggregation',
    'PercentageDisplayFormatConfiguration',
    'ReferenceLine',
    'ReferenceLineDataConfiguration',
    'ReferenceLineDataConfigurationDynamicConfiguration',
    'ReferenceLineDataConfigurationStaticConfiguration',
    'ReferenceLineLabelConfiguration',
    'ReferenceLineLabelConfigurationCustomLabelConfiguration',
    'ReferenceLineLabelConfigurationValueLabelConfiguration',
    'ReferenceLineStyleConfiguration',
    'RefreshScheduleSchedule',
    'RefreshScheduleScheduleScheduleFrequency',
    'RefreshScheduleScheduleScheduleFrequencyRefreshOnDay',
    'SelectAllOptions',
    'SeparatorConfiguration',
    'SeparatorConfigurationThousandsSeparator',
    'SmallMultiplesOptions',
    'SmallMultiplesOptionsPanelConfiguration',
    'SmallMultiplesOptionsPanelConfigurationTitle',
    'Spacing',
    'StringFormatConfiguration',
    'StringParameterDeclaration',
    'StringParameterDeclarationDefaultValues',
    'StringParameterDeclarationValuesWhenUnset',
    'Subtitle',
    'SubtitleFormatText',
    'TableBorderOptions',
    'TemplateDefinition',
    'TemplateDefinitionAnalysisDefaults',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfiguration',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions',
    'TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions',
    'TemplateDefinitionCalculatedField',
    'TemplateDefinitionColumnConfiguration',
    'TemplateDefinitionColumnConfigurationFormatConfiguration',
    'TemplateDefinitionDataSetConfiguration',
    'TemplateDefinitionDataSetConfigurationColumnGroupSchemaList',
    'TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaList',
    'TemplateDefinitionDataSetConfigurationDataSetSchema',
    'TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaList',
    'TemplateDefinitionFilterGroup',
    'TemplateDefinitionFilterGroupScopeConfiguration',
    'TemplateDefinitionFilterGroupScopeConfigurationSelectedSheets',
    'TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration',
    'TemplateDefinitionParametersDeclaration',
    'TemplateDefinitionSheet',
    'TemplateDefinitionSheetParameterControl',
    'TemplateDefinitionSheetParameterControlDateTimePicker',
    'TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptions',
    'TemplateDefinitionSheetParameterControlDropdown',
    'TemplateDefinitionSheetParameterControlDropdownDisplayOptions',
    'TemplateDefinitionSheetParameterControlDropdownSelectableValues',
    'TemplateDefinitionSheetParameterControlList',
    'TemplateDefinitionSheetParameterControlListDisplayOptions',
    'TemplateDefinitionSheetParameterControlListSelectableValues',
    'TemplateDefinitionSheetParameterControlSlider',
    'TemplateDefinitionSheetParameterControlSliderDisplayOptions',
    'TemplateDefinitionSheetParameterControlTextArea',
    'TemplateDefinitionSheetParameterControlTextField',
    'TemplateDefinitionSheetSheetControlLayouts',
    'TemplateDefinitionSheetSheetControlLayoutsConfiguration',
    'TemplateDefinitionSheetTextBox',
    'TemplatePermission',
    'TemplateSourceEntity',
    'TemplateSourceEntitySourceAnalysis',
    'TemplateSourceEntitySourceAnalysisDataSetReference',
    'TemplateSourceEntitySourceTemplate',
    'TextAreaControlDisplayOptions',
    'ThemeConfiguration',
    'ThemeConfigurationDataColorPalette',
    'ThemeConfigurationSheet',
    'ThemeConfigurationSheetTile',
    'ThemeConfigurationSheetTileBorder',
    'ThemeConfigurationSheetTileLayout',
    'ThemeConfigurationSheetTileLayoutGutter',
    'ThemeConfigurationSheetTileLayoutMargin',
    'ThemeConfigurationTypography',
    'ThemeConfigurationTypographyFontFamily',
    'ThemeConfigurationUiColorPalette',
    'ThemePermission',
    'TimeRangeFilter',
    'TooltipOptions',
    'TooltipOptionsFieldBaseTooltip',
    'TooltipOptionsFieldBaseTooltipTooltipField',
    'TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItem',
    'TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItem',
    'VisualCustomActions',
    'VisualCustomActionsActionOperation',
    'VisualCustomActionsActionOperationFilterOperation',
    'VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfiguration',
    'VisualCustomActionsActionOperationFilterOperationTargetVisualsConfiguration',
    'VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfiguration',
    'VisualCustomActionsActionOperationNavigationOperation',
    'VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfiguration',
    'VisualCustomActionsActionOperationSetParametersOperation',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfiguration',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValue',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfiguration',
    'VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValues',
    'VisualCustomActionsActionOperationUrlOperation',
    'VisualPalette',
    'VisualPaletteColorMap',
    'Visuals',
    'VisualsBarChartVisual',
    'VisualsBarChartVisualChartConfiguration',
    'VisualsBarChartVisualChartConfigurationFieldWells',
    'VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWells',
    'VisualsBarChartVisualChartConfigurationSortConfiguration',
    'VisualsBoxPlotVisual',
    'VisualsBoxPlotVisualChartConfiguration',
    'VisualsBoxPlotVisualChartConfigurationBoxPlotOptions',
    'VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptions',
    'VisualsBoxPlotVisualChartConfigurationFieldWells',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWells',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValue',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureField',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureField',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureField',
    'VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureField',
    'VisualsBoxPlotVisualChartConfigurationSortConfiguration',
    'VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfiguration',
    'VisualsComboChartVisual',
    'VisualsComboChartVisualChartConfiguration',
    'VisualsComboChartVisualChartConfigurationFieldWells',
    'VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWells',
    'VisualsComboChartVisualChartConfigurationSortConfiguration',
    'VisualsCustomContentVisual',
    'VisualsCustomContentVisualChartConfiguration',
    'VisualsEmptyVisual',
    'VisualsFilledMapVisual',
    'VisualsFilledMapVisualChartConfiguration',
    'VisualsFilledMapVisualChartConfigurationFieldWells',
    'VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWells',
    'VisualsFilledMapVisualChartConfigurationMapStyleOptions',
    'VisualsFilledMapVisualChartConfigurationSortConfiguration',
    'VisualsFilledMapVisualChartConfigurationWindowOptions',
    'VisualsFilledMapVisualChartConfigurationWindowOptionsBounds',
    'VisualsFilledMapVisualConditionalFormatting',
    'VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption',
    'VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape',
    'VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormat',
    'VisualsFunnelChartVisual',
    'VisualsFunnelChartVisualChartConfiguration',
    'VisualsFunnelChartVisualChartConfigurationDataLabelOptions',
    'VisualsFunnelChartVisualChartConfigurationFieldWells',
    'VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWells',
    'VisualsFunnelChartVisualChartConfigurationSortConfiguration',
    'VisualsGaugeChartVisual',
    'VisualsGaugeChartVisualChartConfiguration',
    'VisualsGaugeChartVisualChartConfigurationFieldWells',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptions',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArc',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxis',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRange',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparison',
    'VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormat',
    'VisualsGaugeChartVisualConditionalFormatting',
    'VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOption',
    'VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArc',
    'VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValue',
    'VisualsGeospatialMapVisual',
    'VisualsGeospatialMapVisualChartConfiguration',
    'VisualsGeospatialMapVisualChartConfigurationFieldWells',
    'VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWells',
    'VisualsGeospatialMapVisualChartConfigurationMapStyleOptions',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptions',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfiguration',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarker',
    'VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarker',
    'VisualsGeospatialMapVisualChartConfigurationWindowOptions',
    'VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds',
    'VisualsHeatMapVisual',
    'VisualsHeatMapVisualChartConfiguration',
    'VisualsHeatMapVisualChartConfigurationFieldWells',
    'VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWells',
    'VisualsHeatMapVisualChartConfigurationSortConfiguration',
    'VisualsHistogramVisual',
    'VisualsHistogramVisualChartConfiguration',
    'VisualsHistogramVisualChartConfigurationBinOptions',
    'VisualsHistogramVisualChartConfigurationBinOptionsBinCount',
    'VisualsHistogramVisualChartConfigurationBinOptionsBinWidth',
    'VisualsHistogramVisualChartConfigurationFieldWells',
    'VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWells',
    'VisualsInsightVisual',
    'VisualsInsightVisualInsightConfiguration',
    'VisualsInsightVisualInsightConfigurationComputation',
    'VisualsInsightVisualInsightConfigurationComputationForecast',
    'VisualsInsightVisualInsightConfigurationComputationGrowthRate',
    'VisualsInsightVisualInsightConfigurationComputationMaximumMinimum',
    'VisualsInsightVisualInsightConfigurationComputationMetricComparison',
    'VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriod',
    'VisualsInsightVisualInsightConfigurationComputationPeriodToDate',
    'VisualsInsightVisualInsightConfigurationComputationTopBottomMovers',
    'VisualsInsightVisualInsightConfigurationComputationTopBottomRanked',
    'VisualsInsightVisualInsightConfigurationComputationTotalAggregation',
    'VisualsInsightVisualInsightConfigurationComputationUniqueValues',
    'VisualsInsightVisualInsightConfigurationCustomNarrative',
    'VisualsKpiVisual',
    'VisualsKpiVisualChartConfiguration',
    'VisualsKpiVisualChartConfigurationFieldWells',
    'VisualsKpiVisualChartConfigurationKpiOptions',
    'VisualsKpiVisualChartConfigurationKpiOptionsComparison',
    'VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormat',
    'VisualsKpiVisualChartConfigurationKpiOptionsSparkline',
    'VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptions',
    'VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayout',
    'VisualsKpiVisualChartConfigurationSortConfiguration',
    'VisualsKpiVisualConditionalFormatting',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOption',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValue',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValue',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValue',
    'VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBar',
    'VisualsLineChartVisual',
    'VisualsLineChartVisualChartConfiguration',
    'VisualsLineChartVisualChartConfigurationDefaultSeriesSettings',
    'VisualsLineChartVisualChartConfigurationFieldWells',
    'VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWells',
    'VisualsLineChartVisualChartConfigurationForecastConfiguration',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationScenario',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenario',
    'VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenario',
    'VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptions',
    'VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfiguration',
    'VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptions',
    'VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfiguration',
    'VisualsLineChartVisualChartConfigurationSeries',
    'VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItem',
    'VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettings',
    'VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItem',
    'VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettings',
    'VisualsLineChartVisualChartConfigurationSortConfiguration',
    'VisualsPieChartVisual',
    'VisualsPieChartVisualChartConfiguration',
    'VisualsPieChartVisualChartConfigurationDonutOptions',
    'VisualsPieChartVisualChartConfigurationDonutOptionsArcOptions',
    'VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptions',
    'VisualsPieChartVisualChartConfigurationFieldWells',
    'VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWells',
    'VisualsPieChartVisualChartConfigurationSortConfiguration',
    'VisualsPivotTableVisual',
    'VisualsPivotTableVisualChartConfiguration',
    'VisualsPivotTableVisualChartConfigurationFieldOptions',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOption',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathList',
    'VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOption',
    'VisualsPivotTableVisualChartConfigurationFieldWells',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWells',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumn',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionField',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionField',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionField',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRow',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionField',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionField',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionField',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValue',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureField',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureField',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureField',
    'VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureField',
    'VisualsPivotTableVisualChartConfigurationPaginatedReportOptions',
    'VisualsPivotTableVisualChartConfigurationSortConfiguration',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOption',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortBy',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPath',
    'VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPath',
    'VisualsPivotTableVisualChartConfigurationTableOptions',
    'VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions',
    'VisualsPivotTableVisualChartConfigurationTotalOptions',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptions',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOption',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptions',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptions',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOption',
    'VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptions',
    'VisualsPivotTableVisualConditionalFormatting',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOption',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCell',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScope',
    'VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat',
    'VisualsRadarChartVisual',
    'VisualsRadarChartVisualChartConfiguration',
    'VisualsRadarChartVisualChartConfigurationBaseSeriesSettings',
    'VisualsRadarChartVisualChartConfigurationFieldWells',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWells',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValue',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureField',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureField',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureField',
    'VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureField',
    'VisualsRadarChartVisualChartConfigurationSortConfiguration',
    'VisualsSankeyDiagramVisual',
    'VisualsSankeyDiagramVisualChartConfiguration',
    'VisualsSankeyDiagramVisualChartConfigurationFieldWells',
    'VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWells',
    'VisualsSankeyDiagramVisualChartConfigurationSortConfiguration',
    'VisualsScatterPlotVisual',
    'VisualsScatterPlotVisualChartConfiguration',
    'VisualsScatterPlotVisualChartConfigurationFieldWells',
    'VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWells',
    'VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWells',
    'VisualsTableVisual',
    'VisualsTableVisualChartConfiguration',
    'VisualsTableVisualChartConfigurationFieldOptions',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOption',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStyling',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfiguration',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptions',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfiguration',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContent',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContent',
    'VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContent',
    'VisualsTableVisualChartConfigurationFieldWells',
    'VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWells',
    'VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWells',
    'VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValue',
    'VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfiguration',
    'VisualsTableVisualChartConfigurationPaginatedReportOptions',
    'VisualsTableVisualChartConfigurationSortConfiguration',
    'VisualsTableVisualChartConfigurationSortConfigurationPaginationConfiguration',
    'VisualsTableVisualChartConfigurationTableInlineVisualization',
    'VisualsTableVisualChartConfigurationTableInlineVisualizationDataBars',
    'VisualsTableVisualChartConfigurationTableOptions',
    'VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptions',
    'VisualsTableVisualChartConfigurationTotalOptions',
    'VisualsTableVisualConditionalFormatting',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOption',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionCell',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat',
    'VisualsTableVisualConditionalFormattingConditionalFormattingOptionRow',
    'VisualsTreeMapVisual',
    'VisualsTreeMapVisualChartConfiguration',
    'VisualsTreeMapVisualChartConfigurationFieldWells',
    'VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWells',
    'VisualsTreeMapVisualChartConfigurationSortConfiguration',
    'VisualsWaterfallVisual',
    'VisualsWaterfallVisualChartConfiguration',
    'VisualsWaterfallVisualChartConfigurationFieldWells',
    'VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWells',
    'VisualsWaterfallVisualChartConfigurationSortConfiguration',
    'VisualsWaterfallVisualChartConfigurationWaterfallChartOptions',
    'VisualsWordCloudVisual',
    'VisualsWordCloudVisualChartConfiguration',
    'VisualsWordCloudVisualChartConfigurationFieldWells',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWells',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupBy',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionField',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionField',
    'VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionField',
    'VisualsWordCloudVisualChartConfigurationSortConfiguration',
    'VisualsWordCloudVisualChartConfigurationWordCloudOptions',
    'VpcConnectionTimeouts',
    'GetDataSetColumnGroupResult',
    'GetDataSetColumnGroupGeoSpatialColumnGroupResult',
    'GetDataSetColumnLevelPermissionRuleResult',
    'GetDataSetDataSetUsageConfigurationResult',
    'GetDataSetFieldFolderResult',
    'GetDataSetLogicalTableMapResult',
    'GetDataSetLogicalTableMapDataTransformResult',
    'GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationResult',
    'GetDataSetLogicalTableMapDataTransformCreateColumnsOperationResult',
    'GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnResult',
    'GetDataSetLogicalTableMapDataTransformFilterOperationResult',
    'GetDataSetLogicalTableMapDataTransformProjectOperationResult',
    'GetDataSetLogicalTableMapDataTransformRenameColumnOperationResult',
    'GetDataSetLogicalTableMapDataTransformTagColumnOperationResult',
    'GetDataSetLogicalTableMapDataTransformTagColumnOperationTagResult',
    'GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionResult',
    'GetDataSetLogicalTableMapDataTransformUntagColumnOperationResult',
    'GetDataSetLogicalTableMapSourceResult',
    'GetDataSetLogicalTableMapSourceJoinInstructionResult',
    'GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyResult',
    'GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyResult',
    'GetDataSetPermissionResult',
    'GetDataSetPhysicalTableMapResult',
    'GetDataSetPhysicalTableMapCustomSqlResult',
    'GetDataSetPhysicalTableMapCustomSqlColumnResult',
    'GetDataSetPhysicalTableMapRelationalTableResult',
    'GetDataSetPhysicalTableMapRelationalTableInputColumnResult',
    'GetDataSetPhysicalTableMapS3SourceResult',
    'GetDataSetPhysicalTableMapS3SourceInputColumnResult',
    'GetDataSetPhysicalTableMapS3SourceUploadSettingResult',
    'GetDataSetRowLevelPermissionDataSetResult',
    'GetDataSetRowLevelPermissionTagConfigurationResult',
    'GetDataSetRowLevelPermissionTagConfigurationTagRuleResult',
    'GetThemeConfigurationResult',
    'GetThemeConfigurationDataColorPaletteResult',
    'GetThemeConfigurationSheetResult',
    'GetThemeConfigurationSheetTileResult',
    'GetThemeConfigurationSheetTileBorderResult',
    'GetThemeConfigurationSheetTileLayoutResult',
    'GetThemeConfigurationSheetTileLayoutGutterResult',
    'GetThemeConfigurationSheetTileLayoutMarginResult',
    'GetThemeConfigurationTypographyResult',
    'GetThemeConfigurationTypographyFontFamilyResult',
    'GetThemeConfigurationUiColorPaletteResult',
    'GetThemePermissionResult',
]

@pulumi.output_type
class AggregationFunction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoricalAggregationFunction":
            suggest = "categorical_aggregation_function"
        elif key == "dateAggregationFunction":
            suggest = "date_aggregation_function"
        elif key == "numericalAggregationFunction":
            suggest = "numerical_aggregation_function"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregationFunction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregationFunction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregationFunction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categorical_aggregation_function: Optional[str] = None,
                 date_aggregation_function: Optional[str] = None,
                 numerical_aggregation_function: Optional['outputs.NumericalAggregation'] = None):
        if categorical_aggregation_function is not None:
            pulumi.set(__self__, "categorical_aggregation_function", categorical_aggregation_function)
        if date_aggregation_function is not None:
            pulumi.set(__self__, "date_aggregation_function", date_aggregation_function)
        if numerical_aggregation_function is not None:
            pulumi.set(__self__, "numerical_aggregation_function", numerical_aggregation_function)

    @property
    @pulumi.getter(name="categoricalAggregationFunction")
    def categorical_aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "categorical_aggregation_function")

    @property
    @pulumi.getter(name="dateAggregationFunction")
    def date_aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "date_aggregation_function")

    @property
    @pulumi.getter(name="numericalAggregationFunction")
    def numerical_aggregation_function(self) -> Optional['outputs.NumericalAggregation']:
        return pulumi.get(self, "numerical_aggregation_function")


@pulumi.output_type
class AnalysisDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifiersDeclarations":
            suggest = "data_set_identifiers_declarations"
        elif key == "analysisDefaults":
            suggest = "analysis_defaults"
        elif key == "calculatedFields":
            suggest = "calculated_fields"
        elif key == "columnConfigurations":
            suggest = "column_configurations"
        elif key == "filterGroups":
            suggest = "filter_groups"
        elif key == "parameterDeclarations":
            suggest = "parameter_declarations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_identifiers_declarations: Sequence['outputs.AnalysisDefinitionDataSetIdentifiersDeclaration'],
                 analysis_defaults: Optional['outputs.AnalysisDefinitionAnalysisDefaults'] = None,
                 calculated_fields: Optional[Sequence['outputs.AnalysisDefinitionCalculatedField']] = None,
                 column_configurations: Optional[Sequence['outputs.AnalysisDefinitionColumnConfiguration']] = None,
                 filter_groups: Optional[Sequence['outputs.AnalysisDefinitionFilterGroup']] = None,
                 parameter_declarations: Optional[Sequence['outputs.AnalysisDefinitionParameterDeclaration']] = None,
                 sheets: Optional[Sequence['outputs.AnalysisDefinitionSheet']] = None):
        """
        :param Sequence['AnalysisDefinitionDataSetIdentifiersDeclarationArgs'] data_set_identifiers_declarations: A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the analysis sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
        :param 'AnalysisDefinitionAnalysisDefaultsArgs' analysis_defaults: The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        :param Sequence['AnalysisDefinitionCalculatedFieldArgs'] calculated_fields: A list of calculated field definitions for the analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        :param Sequence['AnalysisDefinitionColumnConfigurationArgs'] column_configurations: A list of analysis-level column configurations. Column configurations are used to set default formatting for a column that's used throughout an analysis. See AWS API Documentation for complete description.
        :param Sequence['AnalysisDefinitionFilterGroupArgs'] filter_groups: A list of filter definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        :param Sequence['AnalysisDefinitionSheetArgs'] sheets: A list of sheet definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        pulumi.set(__self__, "data_set_identifiers_declarations", data_set_identifiers_declarations)
        if analysis_defaults is not None:
            pulumi.set(__self__, "analysis_defaults", analysis_defaults)
        if calculated_fields is not None:
            pulumi.set(__self__, "calculated_fields", calculated_fields)
        if column_configurations is not None:
            pulumi.set(__self__, "column_configurations", column_configurations)
        if filter_groups is not None:
            pulumi.set(__self__, "filter_groups", filter_groups)
        if parameter_declarations is not None:
            pulumi.set(__self__, "parameter_declarations", parameter_declarations)
        if sheets is not None:
            pulumi.set(__self__, "sheets", sheets)

    @property
    @pulumi.getter(name="dataSetIdentifiersDeclarations")
    def data_set_identifiers_declarations(self) -> Sequence['outputs.AnalysisDefinitionDataSetIdentifiersDeclaration']:
        """
        A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the analysis sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
        """
        return pulumi.get(self, "data_set_identifiers_declarations")

    @property
    @pulumi.getter(name="analysisDefaults")
    def analysis_defaults(self) -> Optional['outputs.AnalysisDefinitionAnalysisDefaults']:
        """
        The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        """
        return pulumi.get(self, "analysis_defaults")

    @property
    @pulumi.getter(name="calculatedFields")
    def calculated_fields(self) -> Optional[Sequence['outputs.AnalysisDefinitionCalculatedField']]:
        """
        A list of calculated field definitions for the analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        """
        return pulumi.get(self, "calculated_fields")

    @property
    @pulumi.getter(name="columnConfigurations")
    def column_configurations(self) -> Optional[Sequence['outputs.AnalysisDefinitionColumnConfiguration']]:
        """
        A list of analysis-level column configurations. Column configurations are used to set default formatting for a column that's used throughout an analysis. See AWS API Documentation for complete description.
        """
        return pulumi.get(self, "column_configurations")

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Optional[Sequence['outputs.AnalysisDefinitionFilterGroup']]:
        """
        A list of filter definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        """
        return pulumi.get(self, "filter_groups")

    @property
    @pulumi.getter(name="parameterDeclarations")
    def parameter_declarations(self) -> Optional[Sequence['outputs.AnalysisDefinitionParameterDeclaration']]:
        return pulumi.get(self, "parameter_declarations")

    @property
    @pulumi.getter
    def sheets(self) -> Optional[Sequence['outputs.AnalysisDefinitionSheet']]:
        """
        A list of sheet definitions for an analysis. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        return pulumi.get(self, "sheets")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaults(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultNewSheetConfiguration":
            suggest = "default_new_sheet_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaults. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaults.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaults.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_new_sheet_configuration: 'outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfiguration'):
        pulumi.set(__self__, "default_new_sheet_configuration", default_new_sheet_configuration)

    @property
    @pulumi.getter(name="defaultNewSheetConfiguration")
    def default_new_sheet_configuration(self) -> 'outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfiguration':
        return pulumi.get(self, "default_new_sheet_configuration")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interactiveLayoutConfiguration":
            suggest = "interactive_layout_configuration"
        elif key == "paginatedLayoutConfiguration":
            suggest = "paginated_layout_configuration"
        elif key == "sheetContentType":
            suggest = "sheet_content_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interactive_layout_configuration: Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration'] = None,
                 paginated_layout_configuration: Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration'] = None,
                 sheet_content_type: Optional[str] = None):
        if interactive_layout_configuration is not None:
            pulumi.set(__self__, "interactive_layout_configuration", interactive_layout_configuration)
        if paginated_layout_configuration is not None:
            pulumi.set(__self__, "paginated_layout_configuration", paginated_layout_configuration)
        if sheet_content_type is not None:
            pulumi.set(__self__, "sheet_content_type", sheet_content_type)

    @property
    @pulumi.getter(name="interactiveLayoutConfiguration")
    def interactive_layout_configuration(self) -> Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration']:
        return pulumi.get(self, "interactive_layout_configuration")

    @property
    @pulumi.getter(name="paginatedLayoutConfiguration")
    def paginated_layout_configuration(self) -> Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration']:
        return pulumi.get(self, "paginated_layout_configuration")

    @property
    @pulumi.getter(name="sheetContentType")
    def sheet_content_type(self) -> Optional[str]:
        return pulumi.get(self, "sheet_content_type")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "freeForm":
            suggest = "free_form"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 free_form: Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm'] = None,
                 grid: Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid'] = None):
        if free_form is not None:
            pulumi.set(__self__, "free_form", free_form)
        if grid is not None:
            pulumi.set(__self__, "grid", grid)

    @property
    @pulumi.getter(name="freeForm")
    def free_form(self) -> Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm']:
        return pulumi.get(self, "free_form")

    @property
    @pulumi.getter
    def grid(self) -> Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid']:
        return pulumi.get(self, "grid")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canvas_size_options: 'outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions'):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> 'outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions':
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "screenCanvasSizeOptions":
            suggest = "screen_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 screen_canvas_size_options: Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions'] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions']:
        return pulumi.get(self, "screen_canvas_size_options")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optimizedViewPortWidth":
            suggest = "optimized_view_port_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optimized_view_port_width: str):
        pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> str:
        return pulumi.get(self, "optimized_view_port_width")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canvas_size_options: 'outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions'):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> 'outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions':
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "screenCanvasSizeOptions":
            suggest = "screen_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 screen_canvas_size_options: Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions'] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions']:
        return pulumi.get(self, "screen_canvas_size_options")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resizeOption":
            suggest = "resize_option"
        elif key == "optimizedViewPortWidth":
            suggest = "optimized_view_port_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resize_option: str,
                 optimized_view_port_width: Optional[str] = None):
        pulumi.set(__self__, "resize_option", resize_option)
        if optimized_view_port_width is not None:
            pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> str:
        return pulumi.get(self, "resize_option")

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[str]:
        return pulumi.get(self, "optimized_view_port_width")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionBased":
            suggest = "section_based"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 section_based: Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased'] = None):
        if section_based is not None:
            pulumi.set(__self__, "section_based", section_based)

    @property
    @pulumi.getter(name="sectionBased")
    def section_based(self) -> Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased']:
        return pulumi.get(self, "section_based")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canvas_size_options: 'outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions'):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> 'outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions':
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paperCanvasSizeOptions":
            suggest = "paper_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 paper_canvas_size_options: Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions'] = None):
        if paper_canvas_size_options is not None:
            pulumi.set(__self__, "paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional['outputs.AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions']:
        return pulumi.get(self, "paper_canvas_size_options")


@pulumi.output_type
class AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paperMargin":
            suggest = "paper_margin"
        elif key == "paperOrientation":
            suggest = "paper_orientation"
        elif key == "paperSize":
            suggest = "paper_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 paper_margin: Optional['outputs.Spacing'] = None,
                 paper_orientation: Optional[str] = None,
                 paper_size: Optional[str] = None):
        if paper_margin is not None:
            pulumi.set(__self__, "paper_margin", paper_margin)
        if paper_orientation is not None:
            pulumi.set(__self__, "paper_orientation", paper_orientation)
        if paper_size is not None:
            pulumi.set(__self__, "paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional['outputs.Spacing']:
        return pulumi.get(self, "paper_margin")

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[str]:
        return pulumi.get(self, "paper_orientation")

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[str]:
        return pulumi.get(self, "paper_size")


@pulumi.output_type
class AnalysisDefinitionCalculatedField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifier":
            suggest = "data_set_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionCalculatedField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionCalculatedField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionCalculatedField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_identifier: str,
                 expression: str,
                 name: str):
        """
        :param str name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> str:
        return pulumi.get(self, "data_set_identifier")

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AnalysisDefinitionColumnConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionColumnConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionColumnConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionColumnConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 format_configuration: Optional['outputs.AnalysisDefinitionColumnConfigurationFormatConfiguration'] = None,
                 role: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.AnalysisDefinitionColumnConfigurationFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")


@pulumi.output_type
class AnalysisDefinitionColumnConfigurationFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeFormatConfiguration":
            suggest = "date_time_format_configuration"
        elif key == "numberFormatConfiguration":
            suggest = "number_format_configuration"
        elif key == "stringFormatConfiguration":
            suggest = "string_format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionColumnConfigurationFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionColumnConfigurationFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionColumnConfigurationFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None,
                 number_format_configuration: Optional['outputs.NumberFormatConfiguration'] = None,
                 string_format_configuration: Optional['outputs.StringFormatConfiguration'] = None):
        if date_time_format_configuration is not None:
            pulumi.set(__self__, "date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            pulumi.set(__self__, "number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            pulumi.set(__self__, "string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "date_time_format_configuration")

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "number_format_configuration")

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "string_format_configuration")


@pulumi.output_type
class AnalysisDefinitionDataSetIdentifiersDeclaration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetArn":
            suggest = "data_set_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionDataSetIdentifiersDeclaration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionDataSetIdentifiersDeclaration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionDataSetIdentifiersDeclaration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_arn: Optional[str] = None,
                 identifier: Optional[str] = None):
        """
        :param str data_set_arn: Dataset Amazon Resource Name (ARN).
        """
        if data_set_arn is not None:
            pulumi.set(__self__, "data_set_arn", data_set_arn)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> Optional[str]:
        """
        Dataset Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "data_set_arn")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class AnalysisDefinitionFilterGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crossDataset":
            suggest = "cross_dataset"
        elif key == "filterGroupId":
            suggest = "filter_group_id"
        elif key == "scopeConfiguration":
            suggest = "scope_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionFilterGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionFilterGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionFilterGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cross_dataset: str,
                 filter_group_id: str,
                 filters: Sequence['outputs.Filters'],
                 scope_configuration: 'outputs.AnalysisDefinitionFilterGroupScopeConfiguration',
                 status: Optional[str] = None):
        """
        :param str status: The analysis creation status.
        """
        pulumi.set(__self__, "cross_dataset", cross_dataset)
        pulumi.set(__self__, "filter_group_id", filter_group_id)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "scope_configuration", scope_configuration)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="crossDataset")
    def cross_dataset(self) -> str:
        return pulumi.get(self, "cross_dataset")

    @property
    @pulumi.getter(name="filterGroupId")
    def filter_group_id(self) -> str:
        return pulumi.get(self, "filter_group_id")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.Filters']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="scopeConfiguration")
    def scope_configuration(self) -> 'outputs.AnalysisDefinitionFilterGroupScopeConfiguration':
        return pulumi.get(self, "scope_configuration")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The analysis creation status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class AnalysisDefinitionFilterGroupScopeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectedSheets":
            suggest = "selected_sheets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionFilterGroupScopeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionFilterGroupScopeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionFilterGroupScopeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 selected_sheets: Optional['outputs.AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheets'] = None):
        if selected_sheets is not None:
            pulumi.set(__self__, "selected_sheets", selected_sheets)

    @property
    @pulumi.getter(name="selectedSheets")
    def selected_sheets(self) -> Optional['outputs.AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheets']:
        return pulumi.get(self, "selected_sheets")


@pulumi.output_type
class AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheets(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetVisualScopingConfigurations":
            suggest = "sheet_visual_scoping_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sheet_visual_scoping_configurations: Optional[Sequence['outputs.AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration']] = None):
        if sheet_visual_scoping_configurations is not None:
            pulumi.set(__self__, "sheet_visual_scoping_configurations", sheet_visual_scoping_configurations)

    @property
    @pulumi.getter(name="sheetVisualScopingConfigurations")
    def sheet_visual_scoping_configurations(self) -> Optional[Sequence['outputs.AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration']]:
        return pulumi.get(self, "sheet_visual_scoping_configurations")


@pulumi.output_type
class AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetId":
            suggest = "sheet_id"
        elif key == "visualIds":
            suggest = "visual_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope: str,
                 sheet_id: str,
                 visual_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sheet_id", sheet_id)
        if visual_ids is not None:
            pulumi.set(__self__, "visual_ids", visual_ids)

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> str:
        return pulumi.get(self, "sheet_id")

    @property
    @pulumi.getter(name="visualIds")
    def visual_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "visual_ids")


@pulumi.output_type
class AnalysisDefinitionParameterDeclaration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeParameterDeclaration":
            suggest = "date_time_parameter_declaration"
        elif key == "decimalParameterDeclaration":
            suggest = "decimal_parameter_declaration"
        elif key == "integerParameterDeclaration":
            suggest = "integer_parameter_declaration"
        elif key == "stringParameterDeclaration":
            suggest = "string_parameter_declaration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionParameterDeclaration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionParameterDeclaration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionParameterDeclaration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_parameter_declaration: Optional['outputs.DateTimeParameterDeclaration'] = None,
                 decimal_parameter_declaration: Optional['outputs.DecimalParameterDeclaration'] = None,
                 integer_parameter_declaration: Optional['outputs.IntegerParameterDeclaration'] = None,
                 string_parameter_declaration: Optional['outputs.StringParameterDeclaration'] = None):
        if date_time_parameter_declaration is not None:
            pulumi.set(__self__, "date_time_parameter_declaration", date_time_parameter_declaration)
        if decimal_parameter_declaration is not None:
            pulumi.set(__self__, "decimal_parameter_declaration", decimal_parameter_declaration)
        if integer_parameter_declaration is not None:
            pulumi.set(__self__, "integer_parameter_declaration", integer_parameter_declaration)
        if string_parameter_declaration is not None:
            pulumi.set(__self__, "string_parameter_declaration", string_parameter_declaration)

    @property
    @pulumi.getter(name="dateTimeParameterDeclaration")
    def date_time_parameter_declaration(self) -> Optional['outputs.DateTimeParameterDeclaration']:
        return pulumi.get(self, "date_time_parameter_declaration")

    @property
    @pulumi.getter(name="decimalParameterDeclaration")
    def decimal_parameter_declaration(self) -> Optional['outputs.DecimalParameterDeclaration']:
        return pulumi.get(self, "decimal_parameter_declaration")

    @property
    @pulumi.getter(name="integerParameterDeclaration")
    def integer_parameter_declaration(self) -> Optional['outputs.IntegerParameterDeclaration']:
        return pulumi.get(self, "integer_parameter_declaration")

    @property
    @pulumi.getter(name="stringParameterDeclaration")
    def string_parameter_declaration(self) -> Optional['outputs.StringParameterDeclaration']:
        return pulumi.get(self, "string_parameter_declaration")


@pulumi.output_type
class AnalysisDefinitionSheet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetId":
            suggest = "sheet_id"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "filterControls":
            suggest = "filter_controls"
        elif key == "parameterControls":
            suggest = "parameter_controls"
        elif key == "sheetControlLayouts":
            suggest = "sheet_control_layouts"
        elif key == "textBoxes":
            suggest = "text_boxes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sheet_id: str,
                 content_type: Optional[str] = None,
                 description: Optional[str] = None,
                 filter_controls: Optional[Sequence['outputs.FilterControls']] = None,
                 layouts: Optional['outputs.Layouts'] = None,
                 name: Optional[str] = None,
                 parameter_controls: Optional[Sequence['outputs.AnalysisDefinitionSheetParameterControl']] = None,
                 sheet_control_layouts: Optional['outputs.AnalysisDefinitionSheetSheetControlLayouts'] = None,
                 text_boxes: Optional[Sequence['outputs.AnalysisDefinitionSheetTextBox']] = None,
                 title: Optional[str] = None,
                 visuals: Optional[Sequence['outputs.Visuals']] = None):
        """
        :param str name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "sheet_id", sheet_id)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter_controls is not None:
            pulumi.set(__self__, "filter_controls", filter_controls)
        if layouts is not None:
            pulumi.set(__self__, "layouts", layouts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_controls is not None:
            pulumi.set(__self__, "parameter_controls", parameter_controls)
        if sheet_control_layouts is not None:
            pulumi.set(__self__, "sheet_control_layouts", sheet_control_layouts)
        if text_boxes is not None:
            pulumi.set(__self__, "text_boxes", text_boxes)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visuals is not None:
            pulumi.set(__self__, "visuals", visuals)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> str:
        return pulumi.get(self, "sheet_id")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="filterControls")
    def filter_controls(self) -> Optional[Sequence['outputs.FilterControls']]:
        return pulumi.get(self, "filter_controls")

    @property
    @pulumi.getter
    def layouts(self) -> Optional['outputs.Layouts']:
        return pulumi.get(self, "layouts")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parameterControls")
    def parameter_controls(self) -> Optional[Sequence['outputs.AnalysisDefinitionSheetParameterControl']]:
        return pulumi.get(self, "parameter_controls")

    @property
    @pulumi.getter(name="sheetControlLayouts")
    def sheet_control_layouts(self) -> Optional['outputs.AnalysisDefinitionSheetSheetControlLayouts']:
        return pulumi.get(self, "sheet_control_layouts")

    @property
    @pulumi.getter(name="textBoxes")
    def text_boxes(self) -> Optional[Sequence['outputs.AnalysisDefinitionSheetTextBox']]:
        return pulumi.get(self, "text_boxes")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visuals(self) -> Optional[Sequence['outputs.Visuals']]:
        return pulumi.get(self, "visuals")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimePicker":
            suggest = "date_time_picker"
        elif key == "textArea":
            suggest = "text_area"
        elif key == "textField":
            suggest = "text_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_picker: Optional['outputs.AnalysisDefinitionSheetParameterControlDateTimePicker'] = None,
                 dropdown: Optional['outputs.AnalysisDefinitionSheetParameterControlDropdown'] = None,
                 list: Optional['outputs.AnalysisDefinitionSheetParameterControlList'] = None,
                 slider: Optional['outputs.AnalysisDefinitionSheetParameterControlSlider'] = None,
                 text_area: Optional['outputs.AnalysisDefinitionSheetParameterControlTextArea'] = None,
                 text_field: Optional['outputs.AnalysisDefinitionSheetParameterControlTextField'] = None):
        if date_time_picker is not None:
            pulumi.set(__self__, "date_time_picker", date_time_picker)
        if dropdown is not None:
            pulumi.set(__self__, "dropdown", dropdown)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if slider is not None:
            pulumi.set(__self__, "slider", slider)
        if text_area is not None:
            pulumi.set(__self__, "text_area", text_area)
        if text_field is not None:
            pulumi.set(__self__, "text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlDateTimePicker']:
        return pulumi.get(self, "date_time_picker")

    @property
    @pulumi.getter
    def dropdown(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlDropdown']:
        return pulumi.get(self, "dropdown")

    @property
    @pulumi.getter
    def list(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlList']:
        return pulumi.get(self, "list")

    @property
    @pulumi.getter
    def slider(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlSlider']:
        return pulumi.get(self, "slider")

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlTextArea']:
        return pulumi.get(self, "text_area")

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlTextField']:
        return pulumi.get(self, "text_field")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlDateTimePicker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlDateTimePicker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlDateTimePicker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlDateTimePicker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 display_options: Optional['outputs.AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptions'] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeFormat":
            suggest = "date_time_format"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlDateTimePickerDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_format: Optional[str] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[str]:
        return pulumi.get(self, "date_time_format")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlDropdown(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "cascadingControlConfiguration":
            suggest = "cascading_control_configuration"
        elif key == "displayOptions":
            suggest = "display_options"
        elif key == "selectableValues":
            suggest = "selectable_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlDropdown. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlDropdown.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlDropdown.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 cascading_control_configuration: Optional['outputs.CascadingControlConfiguration'] = None,
                 display_options: Optional['outputs.AnalysisDefinitionSheetParameterControlDropdownDisplayOptions'] = None,
                 selectable_values: Optional['outputs.AnalysisDefinitionSheetParameterControlDropdownSelectableValues'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional['outputs.CascadingControlConfiguration']:
        return pulumi.get(self, "cascading_control_configuration")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlDropdownDisplayOptions']:
        return pulumi.get(self, "display_options")

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlDropdownSelectableValues']:
        return pulumi.get(self, "selectable_values")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlDropdownDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectAllOptions":
            suggest = "select_all_options"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlDropdownDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlDropdownDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlDropdownDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 select_all_options: Optional['outputs.SelectAllOptions'] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "select_all_options")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlDropdownSelectableValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkToDataSetColumn":
            suggest = "link_to_data_set_column"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlDropdownSelectableValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlDropdownSelectableValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlDropdownSelectableValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_to_data_set_column: Optional['outputs.Column'] = None,
                 values: Optional[Sequence[str]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional['outputs.Column']:
        return pulumi.get(self, "link_to_data_set_column")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "cascadingControlConfiguration":
            suggest = "cascading_control_configuration"
        elif key == "displayOptions":
            suggest = "display_options"
        elif key == "selectableValues":
            suggest = "selectable_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 cascading_control_configuration: Optional['outputs.CascadingControlConfiguration'] = None,
                 display_options: Optional['outputs.AnalysisDefinitionSheetParameterControlListDisplayOptions'] = None,
                 selectable_values: Optional['outputs.AnalysisDefinitionSheetParameterControlListSelectableValues'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional['outputs.CascadingControlConfiguration']:
        return pulumi.get(self, "cascading_control_configuration")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlListDisplayOptions']:
        return pulumi.get(self, "display_options")

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlListSelectableValues']:
        return pulumi.get(self, "selectable_values")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlListDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "searchOptions":
            suggest = "search_options"
        elif key == "selectAllOptions":
            suggest = "select_all_options"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlListDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlListDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlListDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 search_options: Optional['outputs.SelectAllOptions'] = None,
                 select_all_options: Optional['outputs.SelectAllOptions'] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if search_options is not None:
            pulumi.set(__self__, "search_options", search_options)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "search_options")

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "select_all_options")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlListSelectableValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkToDataSetColumn":
            suggest = "link_to_data_set_column"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlListSelectableValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlListSelectableValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlListSelectableValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_to_data_set_column: Optional['outputs.Column'] = None,
                 values: Optional[Sequence[str]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional['outputs.Column']:
        return pulumi.get(self, "link_to_data_set_column")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlSlider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumValue":
            suggest = "maximum_value"
        elif key == "minimumValue":
            suggest = "minimum_value"
        elif key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "stepSize":
            suggest = "step_size"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlSlider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlSlider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlSlider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_value: float,
                 minimum_value: float,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 step_size: float,
                 title: str,
                 display_options: Optional['outputs.AnalysisDefinitionSheetParameterControlSliderDisplayOptions'] = None):
        pulumi.set(__self__, "maximum_value", maximum_value)
        pulumi.set(__self__, "minimum_value", minimum_value)
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "step_size", step_size)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> float:
        return pulumi.get(self, "maximum_value")

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> float:
        return pulumi.get(self, "minimum_value")

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> float:
        return pulumi.get(self, "step_size")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.AnalysisDefinitionSheetParameterControlSliderDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlSliderDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlSliderDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlSliderDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlSliderDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlTextArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlTextArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlTextArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlTextArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 delimiter: Optional[str] = None,
                 display_options: Optional['outputs.TextAreaControlDisplayOptions'] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TextAreaControlDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class AnalysisDefinitionSheetParameterControlTextField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetParameterControlTextField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetParameterControlTextField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetParameterControlTextField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 display_options: Optional['outputs.TextAreaControlDisplayOptions'] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TextAreaControlDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class AnalysisDefinitionSheetSheetControlLayouts(dict):
    def __init__(__self__, *,
                 configuration: 'outputs.AnalysisDefinitionSheetSheetControlLayoutsConfiguration'):
        pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> 'outputs.AnalysisDefinitionSheetSheetControlLayoutsConfiguration':
        return pulumi.get(self, "configuration")


@pulumi.output_type
class AnalysisDefinitionSheetSheetControlLayoutsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gridLayout":
            suggest = "grid_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetSheetControlLayoutsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetSheetControlLayoutsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetSheetControlLayoutsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grid_layout: Optional['outputs.GridLayout'] = None):
        if grid_layout is not None:
            pulumi.set(__self__, "grid_layout", grid_layout)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional['outputs.GridLayout']:
        return pulumi.get(self, "grid_layout")


@pulumi.output_type
class AnalysisDefinitionSheetTextBox(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetTextBoxId":
            suggest = "sheet_text_box_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisDefinitionSheetTextBox. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisDefinitionSheetTextBox.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisDefinitionSheetTextBox.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sheet_text_box_id: str,
                 content: Optional[str] = None):
        pulumi.set(__self__, "sheet_text_box_id", sheet_text_box_id)
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter(name="sheetTextBoxId")
    def sheet_text_box_id(self) -> str:
        return pulumi.get(self, "sheet_text_box_id")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")


@pulumi.output_type
class AnalysisParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeParameters":
            suggest = "date_time_parameters"
        elif key == "decimalParameters":
            suggest = "decimal_parameters"
        elif key == "integerParameters":
            suggest = "integer_parameters"
        elif key == "stringParameters":
            suggest = "string_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_parameters: Optional[Sequence['outputs.AnalysisParametersDateTimeParameter']] = None,
                 decimal_parameters: Optional[Sequence['outputs.AnalysisParametersDecimalParameter']] = None,
                 integer_parameters: Optional[Sequence['outputs.AnalysisParametersIntegerParameter']] = None,
                 string_parameters: Optional[Sequence['outputs.AnalysisParametersStringParameter']] = None):
        """
        :param Sequence['AnalysisParametersDateTimeParameterArgs'] date_time_parameters: A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
        :param Sequence['AnalysisParametersDecimalParameterArgs'] decimal_parameters: A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
        :param Sequence['AnalysisParametersIntegerParameterArgs'] integer_parameters: A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
        :param Sequence['AnalysisParametersStringParameterArgs'] string_parameters: A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
        """
        if date_time_parameters is not None:
            pulumi.set(__self__, "date_time_parameters", date_time_parameters)
        if decimal_parameters is not None:
            pulumi.set(__self__, "decimal_parameters", decimal_parameters)
        if integer_parameters is not None:
            pulumi.set(__self__, "integer_parameters", integer_parameters)
        if string_parameters is not None:
            pulumi.set(__self__, "string_parameters", string_parameters)

    @property
    @pulumi.getter(name="dateTimeParameters")
    def date_time_parameters(self) -> Optional[Sequence['outputs.AnalysisParametersDateTimeParameter']]:
        """
        A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
        """
        return pulumi.get(self, "date_time_parameters")

    @property
    @pulumi.getter(name="decimalParameters")
    def decimal_parameters(self) -> Optional[Sequence['outputs.AnalysisParametersDecimalParameter']]:
        """
        A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
        """
        return pulumi.get(self, "decimal_parameters")

    @property
    @pulumi.getter(name="integerParameters")
    def integer_parameters(self) -> Optional[Sequence['outputs.AnalysisParametersIntegerParameter']]:
        """
        A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
        """
        return pulumi.get(self, "integer_parameters")

    @property
    @pulumi.getter(name="stringParameters")
    def string_parameters(self) -> Optional[Sequence['outputs.AnalysisParametersStringParameter']]:
        """
        A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
        """
        return pulumi.get(self, "string_parameters")


@pulumi.output_type
class AnalysisParametersDateTimeParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class AnalysisParametersDecimalParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[float]):
        """
        :param str name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[float]:
        return pulumi.get(self, "values")


@pulumi.output_type
class AnalysisParametersIntegerParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[int]):
        """
        :param str name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[int]:
        return pulumi.get(self, "values")


@pulumi.output_type
class AnalysisParametersStringParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Display name for the analysis.
               
               The following arguments are optional:
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the analysis.

        The following arguments are optional:
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class AnalysisPermission(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 principal: str):
        """
        :param Sequence[str] actions: List of IAM actions to grant or revoke permissions on.
        :param str principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def principal(self) -> str:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")


@pulumi.output_type
class AnalysisSourceEntity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceTemplate":
            suggest = "source_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisSourceEntity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisSourceEntity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisSourceEntity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_template: Optional['outputs.AnalysisSourceEntitySourceTemplate'] = None):
        """
        :param 'AnalysisSourceEntitySourceTemplateArgs' source_template: The source template. See source_template.
        """
        if source_template is not None:
            pulumi.set(__self__, "source_template", source_template)

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional['outputs.AnalysisSourceEntitySourceTemplate']:
        """
        The source template. See source_template.
        """
        return pulumi.get(self, "source_template")


@pulumi.output_type
class AnalysisSourceEntitySourceTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetReferences":
            suggest = "data_set_references"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisSourceEntitySourceTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisSourceEntitySourceTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisSourceEntitySourceTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: str,
                 data_set_references: Sequence['outputs.AnalysisSourceEntitySourceTemplateDataSetReference']):
        """
        :param str arn: The Amazon Resource Name (ARN) of the resource.
        :param Sequence['AnalysisSourceEntitySourceTemplateDataSetReferenceArgs'] data_set_references: List of dataset references. See data_set_references.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "data_set_references", data_set_references)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="dataSetReferences")
    def data_set_references(self) -> Sequence['outputs.AnalysisSourceEntitySourceTemplateDataSetReference']:
        """
        List of dataset references. See data_set_references.
        """
        return pulumi.get(self, "data_set_references")


@pulumi.output_type
class AnalysisSourceEntitySourceTemplateDataSetReference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetArn":
            suggest = "data_set_arn"
        elif key == "dataSetPlaceholder":
            suggest = "data_set_placeholder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisSourceEntitySourceTemplateDataSetReference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisSourceEntitySourceTemplateDataSetReference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisSourceEntitySourceTemplateDataSetReference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_arn: str,
                 data_set_placeholder: str):
        """
        :param str data_set_arn: Dataset Amazon Resource Name (ARN).
        :param str data_set_placeholder: Dataset placeholder.
        """
        pulumi.set(__self__, "data_set_arn", data_set_arn)
        pulumi.set(__self__, "data_set_placeholder", data_set_placeholder)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> str:
        """
        Dataset Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "data_set_arn")

    @property
    @pulumi.getter(name="dataSetPlaceholder")
    def data_set_placeholder(self) -> str:
        """
        Dataset placeholder.
        """
        return pulumi.get(self, "data_set_placeholder")


@pulumi.output_type
class AxisDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "axisLineVisibility":
            suggest = "axis_line_visibility"
        elif key == "axisOffset":
            suggest = "axis_offset"
        elif key == "dataOptions":
            suggest = "data_options"
        elif key == "gridLineVisibility":
            suggest = "grid_line_visibility"
        elif key == "scrollbarOptions":
            suggest = "scrollbar_options"
        elif key == "tickLabelOptions":
            suggest = "tick_label_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AxisDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AxisDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AxisDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 axis_line_visibility: Optional[str] = None,
                 axis_offset: Optional[str] = None,
                 data_options: Optional['outputs.AxisDisplayOptionsDataOptions'] = None,
                 grid_line_visibility: Optional[str] = None,
                 scrollbar_options: Optional['outputs.AxisDisplayOptionsScrollbarOptions'] = None,
                 tick_label_options: Optional['outputs.AxisDisplayOptionsTickLabelOptions'] = None):
        if axis_line_visibility is not None:
            pulumi.set(__self__, "axis_line_visibility", axis_line_visibility)
        if axis_offset is not None:
            pulumi.set(__self__, "axis_offset", axis_offset)
        if data_options is not None:
            pulumi.set(__self__, "data_options", data_options)
        if grid_line_visibility is not None:
            pulumi.set(__self__, "grid_line_visibility", grid_line_visibility)
        if scrollbar_options is not None:
            pulumi.set(__self__, "scrollbar_options", scrollbar_options)
        if tick_label_options is not None:
            pulumi.set(__self__, "tick_label_options", tick_label_options)

    @property
    @pulumi.getter(name="axisLineVisibility")
    def axis_line_visibility(self) -> Optional[str]:
        return pulumi.get(self, "axis_line_visibility")

    @property
    @pulumi.getter(name="axisOffset")
    def axis_offset(self) -> Optional[str]:
        return pulumi.get(self, "axis_offset")

    @property
    @pulumi.getter(name="dataOptions")
    def data_options(self) -> Optional['outputs.AxisDisplayOptionsDataOptions']:
        return pulumi.get(self, "data_options")

    @property
    @pulumi.getter(name="gridLineVisibility")
    def grid_line_visibility(self) -> Optional[str]:
        return pulumi.get(self, "grid_line_visibility")

    @property
    @pulumi.getter(name="scrollbarOptions")
    def scrollbar_options(self) -> Optional['outputs.AxisDisplayOptionsScrollbarOptions']:
        return pulumi.get(self, "scrollbar_options")

    @property
    @pulumi.getter(name="tickLabelOptions")
    def tick_label_options(self) -> Optional['outputs.AxisDisplayOptionsTickLabelOptions']:
        return pulumi.get(self, "tick_label_options")


@pulumi.output_type
class AxisDisplayOptionsDataOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateAxisOptions":
            suggest = "date_axis_options"
        elif key == "numericAxisOptions":
            suggest = "numeric_axis_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AxisDisplayOptionsDataOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AxisDisplayOptionsDataOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AxisDisplayOptionsDataOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_axis_options: Optional['outputs.AxisDisplayOptionsDataOptionsDateAxisOptions'] = None,
                 numeric_axis_options: Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptions'] = None):
        if date_axis_options is not None:
            pulumi.set(__self__, "date_axis_options", date_axis_options)
        if numeric_axis_options is not None:
            pulumi.set(__self__, "numeric_axis_options", numeric_axis_options)

    @property
    @pulumi.getter(name="dateAxisOptions")
    def date_axis_options(self) -> Optional['outputs.AxisDisplayOptionsDataOptionsDateAxisOptions']:
        return pulumi.get(self, "date_axis_options")

    @property
    @pulumi.getter(name="numericAxisOptions")
    def numeric_axis_options(self) -> Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptions']:
        return pulumi.get(self, "numeric_axis_options")


@pulumi.output_type
class AxisDisplayOptionsDataOptionsDateAxisOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "missingDateVisibility":
            suggest = "missing_date_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AxisDisplayOptionsDataOptionsDateAxisOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AxisDisplayOptionsDataOptionsDateAxisOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AxisDisplayOptionsDataOptionsDateAxisOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 missing_date_visibility: Optional[str] = None):
        if missing_date_visibility is not None:
            pulumi.set(__self__, "missing_date_visibility", missing_date_visibility)

    @property
    @pulumi.getter(name="missingDateVisibility")
    def missing_date_visibility(self) -> Optional[str]:
        return pulumi.get(self, "missing_date_visibility")


@pulumi.output_type
class AxisDisplayOptionsDataOptionsNumericAxisOptions(dict):
    def __init__(__self__, *,
                 range: Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsRange'] = None,
                 scale: Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsScale'] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter
    def range(self) -> Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsRange']:
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def scale(self) -> Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsScale']:
        return pulumi.get(self, "scale")


@pulumi.output_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataDriven":
            suggest = "data_driven"
        elif key == "minMax":
            suggest = "min_max"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AxisDisplayOptionsDataOptionsNumericAxisOptionsRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AxisDisplayOptionsDataOptionsNumericAxisOptionsRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AxisDisplayOptionsDataOptionsNumericAxisOptionsRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_driven: Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDriven'] = None,
                 min_max: Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMax'] = None):
        if data_driven is not None:
            pulumi.set(__self__, "data_driven", data_driven)
        if min_max is not None:
            pulumi.set(__self__, "min_max", min_max)

    @property
    @pulumi.getter(name="dataDriven")
    def data_driven(self) -> Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDriven']:
        return pulumi.get(self, "data_driven")

    @property
    @pulumi.getter(name="minMax")
    def min_max(self) -> Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMax']:
        return pulumi.get(self, "min_max")


@pulumi.output_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeDataDriven(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsRangeMinMax(dict):
    def __init__(__self__, *,
                 maximum: Optional[float] = None,
                 minimum: Optional[float] = None):
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[float]:
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[float]:
        return pulumi.get(self, "minimum")


@pulumi.output_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsScale(dict):
    def __init__(__self__, *,
                 linear: Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinear'] = None,
                 logarithmic: Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmic'] = None):
        if linear is not None:
            pulumi.set(__self__, "linear", linear)
        if logarithmic is not None:
            pulumi.set(__self__, "logarithmic", logarithmic)

    @property
    @pulumi.getter
    def linear(self) -> Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinear']:
        return pulumi.get(self, "linear")

    @property
    @pulumi.getter
    def logarithmic(self) -> Optional['outputs.AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmic']:
        return pulumi.get(self, "logarithmic")


@pulumi.output_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinear(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepCount":
            suggest = "step_count"
        elif key == "stepSize":
            suggest = "step_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinear. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinear.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLinear.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_count: Optional[int] = None,
                 step_size: Optional[float] = None):
        if step_count is not None:
            pulumi.set(__self__, "step_count", step_count)
        if step_size is not None:
            pulumi.set(__self__, "step_size", step_size)

    @property
    @pulumi.getter(name="stepCount")
    def step_count(self) -> Optional[int]:
        return pulumi.get(self, "step_count")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[float]:
        return pulumi.get(self, "step_size")


@pulumi.output_type
class AxisDisplayOptionsDataOptionsNumericAxisOptionsScaleLogarithmic(dict):
    def __init__(__self__, *,
                 base: Optional[float] = None):
        if base is not None:
            pulumi.set(__self__, "base", base)

    @property
    @pulumi.getter
    def base(self) -> Optional[float]:
        return pulumi.get(self, "base")


@pulumi.output_type
class AxisDisplayOptionsScrollbarOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visibleRange":
            suggest = "visible_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AxisDisplayOptionsScrollbarOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AxisDisplayOptionsScrollbarOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AxisDisplayOptionsScrollbarOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visibility: Optional[str] = None,
                 visible_range: Optional['outputs.AxisDisplayOptionsScrollbarOptionsVisibleRange'] = None):
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if visible_range is not None:
            pulumi.set(__self__, "visible_range", visible_range)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")

    @property
    @pulumi.getter(name="visibleRange")
    def visible_range(self) -> Optional['outputs.AxisDisplayOptionsScrollbarOptionsVisibleRange']:
        return pulumi.get(self, "visible_range")


@pulumi.output_type
class AxisDisplayOptionsScrollbarOptionsVisibleRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "percentRange":
            suggest = "percent_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AxisDisplayOptionsScrollbarOptionsVisibleRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AxisDisplayOptionsScrollbarOptionsVisibleRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AxisDisplayOptionsScrollbarOptionsVisibleRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 percent_range: Optional['outputs.AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRange'] = None):
        if percent_range is not None:
            pulumi.set(__self__, "percent_range", percent_range)

    @property
    @pulumi.getter(name="percentRange")
    def percent_range(self) -> Optional['outputs.AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRange']:
        return pulumi.get(self, "percent_range")


@pulumi.output_type
class AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AxisDisplayOptionsScrollbarOptionsVisibleRangePercentRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: Optional[float] = None,
                 to: Optional[float] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[float]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[float]:
        return pulumi.get(self, "to")


@pulumi.output_type
class AxisDisplayOptionsTickLabelOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelOptions":
            suggest = "label_options"
        elif key == "rotationAngle":
            suggest = "rotation_angle"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AxisDisplayOptionsTickLabelOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AxisDisplayOptionsTickLabelOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AxisDisplayOptionsTickLabelOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label_options: Optional['outputs.LabelOptions'] = None,
                 rotation_angle: Optional[float] = None):
        if label_options is not None:
            pulumi.set(__self__, "label_options", label_options)
        if rotation_angle is not None:
            pulumi.set(__self__, "rotation_angle", rotation_angle)

    @property
    @pulumi.getter(name="labelOptions")
    def label_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "label_options")

    @property
    @pulumi.getter(name="rotationAngle")
    def rotation_angle(self) -> Optional[float]:
        return pulumi.get(self, "rotation_angle")


@pulumi.output_type
class CascadingControlConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceControls":
            suggest = "source_controls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CascadingControlConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CascadingControlConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CascadingControlConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_controls: Optional[Sequence['outputs.CascadingControlConfigurationSourceControl']] = None):
        if source_controls is not None:
            pulumi.set(__self__, "source_controls", source_controls)

    @property
    @pulumi.getter(name="sourceControls")
    def source_controls(self) -> Optional[Sequence['outputs.CascadingControlConfigurationSourceControl']]:
        return pulumi.get(self, "source_controls")


@pulumi.output_type
class CascadingControlConfigurationSourceControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnToMatch":
            suggest = "column_to_match"
        elif key == "sourceSheetControlId":
            suggest = "source_sheet_control_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CascadingControlConfigurationSourceControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CascadingControlConfigurationSourceControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CascadingControlConfigurationSourceControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_to_match: 'outputs.Column',
                 source_sheet_control_id: Optional[str] = None):
        pulumi.set(__self__, "column_to_match", column_to_match)
        if source_sheet_control_id is not None:
            pulumi.set(__self__, "source_sheet_control_id", source_sheet_control_id)

    @property
    @pulumi.getter(name="columnToMatch")
    def column_to_match(self) -> 'outputs.Column':
        return pulumi.get(self, "column_to_match")

    @property
    @pulumi.getter(name="sourceSheetControlId")
    def source_sheet_control_id(self) -> Optional[str]:
        return pulumi.get(self, "source_sheet_control_id")


@pulumi.output_type
class CategoryFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryValues":
            suggest = "category_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CategoryFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CategoryFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CategoryFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_values: Sequence[str],
                 column: 'outputs.Column'):
        pulumi.set(__self__, "category_values", category_values)
        pulumi.set(__self__, "column", column)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Sequence[str]:
        return pulumi.get(self, "category_values")

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")


@pulumi.output_type
class CellStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "fontConfiguration":
            suggest = "font_configuration"
        elif key == "horizontalTextAlignment":
            suggest = "horizontal_text_alignment"
        elif key == "textWrap":
            suggest = "text_wrap"
        elif key == "verticalTextAlignment":
            suggest = "vertical_text_alignment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CellStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CellStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CellStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: Optional[str] = None,
                 border: Optional['outputs.CellStyleBorder'] = None,
                 font_configuration: Optional['outputs.FontConfiguration'] = None,
                 height: Optional[int] = None,
                 horizontal_text_alignment: Optional[str] = None,
                 text_wrap: Optional[str] = None,
                 vertical_text_alignment: Optional[str] = None,
                 visibility: Optional[str] = None):
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if border is not None:
            pulumi.set(__self__, "border", border)
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if horizontal_text_alignment is not None:
            pulumi.set(__self__, "horizontal_text_alignment", horizontal_text_alignment)
        if text_wrap is not None:
            pulumi.set(__self__, "text_wrap", text_wrap)
        if vertical_text_alignment is not None:
            pulumi.set(__self__, "vertical_text_alignment", vertical_text_alignment)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter
    def border(self) -> Optional['outputs.CellStyleBorder']:
        return pulumi.get(self, "border")

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "font_configuration")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="horizontalTextAlignment")
    def horizontal_text_alignment(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_text_alignment")

    @property
    @pulumi.getter(name="textWrap")
    def text_wrap(self) -> Optional[str]:
        return pulumi.get(self, "text_wrap")

    @property
    @pulumi.getter(name="verticalTextAlignment")
    def vertical_text_alignment(self) -> Optional[str]:
        return pulumi.get(self, "vertical_text_alignment")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class CellStyleBorder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uniformBorder":
            suggest = "uniform_border"
        elif key == "sideSpecificBorder":
            suggest = "side_specific_border"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CellStyleBorder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CellStyleBorder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CellStyleBorder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uniform_border: 'outputs.TableBorderOptions',
                 side_specific_border: Optional['outputs.CellStyleBorderSideSpecificBorder'] = None):
        pulumi.set(__self__, "uniform_border", uniform_border)
        if side_specific_border is not None:
            pulumi.set(__self__, "side_specific_border", side_specific_border)

    @property
    @pulumi.getter(name="uniformBorder")
    def uniform_border(self) -> 'outputs.TableBorderOptions':
        return pulumi.get(self, "uniform_border")

    @property
    @pulumi.getter(name="sideSpecificBorder")
    def side_specific_border(self) -> Optional['outputs.CellStyleBorderSideSpecificBorder']:
        return pulumi.get(self, "side_specific_border")


@pulumi.output_type
class CellStyleBorderSideSpecificBorder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "innerHorizontal":
            suggest = "inner_horizontal"
        elif key == "innerVertical":
            suggest = "inner_vertical"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CellStyleBorderSideSpecificBorder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CellStyleBorderSideSpecificBorder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CellStyleBorderSideSpecificBorder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bottom: 'outputs.TableBorderOptions',
                 inner_horizontal: 'outputs.TableBorderOptions',
                 inner_vertical: 'outputs.TableBorderOptions',
                 left: 'outputs.TableBorderOptions',
                 right: 'outputs.TableBorderOptions',
                 top: 'outputs.TableBorderOptions'):
        pulumi.set(__self__, "bottom", bottom)
        pulumi.set(__self__, "inner_horizontal", inner_horizontal)
        pulumi.set(__self__, "inner_vertical", inner_vertical)
        pulumi.set(__self__, "left", left)
        pulumi.set(__self__, "right", right)
        pulumi.set(__self__, "top", top)

    @property
    @pulumi.getter
    def bottom(self) -> 'outputs.TableBorderOptions':
        return pulumi.get(self, "bottom")

    @property
    @pulumi.getter(name="innerHorizontal")
    def inner_horizontal(self) -> 'outputs.TableBorderOptions':
        return pulumi.get(self, "inner_horizontal")

    @property
    @pulumi.getter(name="innerVertical")
    def inner_vertical(self) -> 'outputs.TableBorderOptions':
        return pulumi.get(self, "inner_vertical")

    @property
    @pulumi.getter
    def left(self) -> 'outputs.TableBorderOptions':
        return pulumi.get(self, "left")

    @property
    @pulumi.getter
    def right(self) -> 'outputs.TableBorderOptions':
        return pulumi.get(self, "right")

    @property
    @pulumi.getter
    def top(self) -> 'outputs.TableBorderOptions':
        return pulumi.get(self, "top")


@pulumi.output_type
class ChartAxisLabelOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "axisLabelOptions":
            suggest = "axis_label_options"
        elif key == "sortIconVisibility":
            suggest = "sort_icon_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChartAxisLabelOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChartAxisLabelOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChartAxisLabelOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 axis_label_options: Optional['outputs.ChartAxisLabelOptionsAxisLabelOptions'] = None,
                 sort_icon_visibility: Optional[str] = None,
                 visibility: Optional[str] = None):
        if axis_label_options is not None:
            pulumi.set(__self__, "axis_label_options", axis_label_options)
        if sort_icon_visibility is not None:
            pulumi.set(__self__, "sort_icon_visibility", sort_icon_visibility)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="axisLabelOptions")
    def axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptionsAxisLabelOptions']:
        return pulumi.get(self, "axis_label_options")

    @property
    @pulumi.getter(name="sortIconVisibility")
    def sort_icon_visibility(self) -> Optional[str]:
        return pulumi.get(self, "sort_icon_visibility")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class ChartAxisLabelOptionsAxisLabelOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyTo":
            suggest = "apply_to"
        elif key == "customLabel":
            suggest = "custom_label"
        elif key == "fontConfiguration":
            suggest = "font_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChartAxisLabelOptionsAxisLabelOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChartAxisLabelOptionsAxisLabelOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChartAxisLabelOptionsAxisLabelOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_to: Optional['outputs.ChartAxisLabelOptionsAxisLabelOptionsApplyTo'] = None,
                 custom_label: Optional[str] = None,
                 font_configuration: Optional['outputs.FontConfiguration'] = None):
        if apply_to is not None:
            pulumi.set(__self__, "apply_to", apply_to)
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)

    @property
    @pulumi.getter(name="applyTo")
    def apply_to(self) -> Optional['outputs.ChartAxisLabelOptionsAxisLabelOptionsApplyTo']:
        return pulumi.get(self, "apply_to")

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[str]:
        return pulumi.get(self, "custom_label")

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "font_configuration")


@pulumi.output_type
class ChartAxisLabelOptionsAxisLabelOptionsApplyTo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChartAxisLabelOptionsAxisLabelOptionsApplyTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChartAxisLabelOptionsAxisLabelOptionsApplyTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChartAxisLabelOptionsAxisLabelOptionsApplyTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class ColorScale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorFillType":
            suggest = "color_fill_type"
        elif key == "nullValueColor":
            suggest = "null_value_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ColorScale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ColorScale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ColorScale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color_fill_type: str,
                 colors: Sequence['outputs.ColorScaleColor'],
                 null_value_color: Optional['outputs.ColorScaleNullValueColor'] = None):
        pulumi.set(__self__, "color_fill_type", color_fill_type)
        pulumi.set(__self__, "colors", colors)
        if null_value_color is not None:
            pulumi.set(__self__, "null_value_color", null_value_color)

    @property
    @pulumi.getter(name="colorFillType")
    def color_fill_type(self) -> str:
        return pulumi.get(self, "color_fill_type")

    @property
    @pulumi.getter
    def colors(self) -> Sequence['outputs.ColorScaleColor']:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="nullValueColor")
    def null_value_color(self) -> Optional['outputs.ColorScaleNullValueColor']:
        return pulumi.get(self, "null_value_color")


@pulumi.output_type
class ColorScaleColor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataValue":
            suggest = "data_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ColorScaleColor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ColorScaleColor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ColorScaleColor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: Optional[str] = None,
                 data_value: Optional[float] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if data_value is not None:
            pulumi.set(__self__, "data_value", data_value)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[float]:
        return pulumi.get(self, "data_value")


@pulumi.output_type
class ColorScaleNullValueColor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataValue":
            suggest = "data_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ColorScaleNullValueColor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ColorScaleNullValueColor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ColorScaleNullValueColor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: Optional[str] = None,
                 data_value: Optional[float] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if data_value is not None:
            pulumi.set(__self__, "data_value", data_value)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[float]:
        return pulumi.get(self, "data_value")


@pulumi.output_type
class Column(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "dataSetIdentifier":
            suggest = "data_set_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Column. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Column.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Column.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 data_set_identifier: str):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> str:
        return pulumi.get(self, "data_set_identifier")


@pulumi.output_type
class ColumnHierarchies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeHierarchy":
            suggest = "date_time_hierarchy"
        elif key == "explicitHierarchy":
            suggest = "explicit_hierarchy"
        elif key == "predefinedHierarchy":
            suggest = "predefined_hierarchy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ColumnHierarchies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ColumnHierarchies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ColumnHierarchies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_hierarchy: Optional['outputs.ColumnHierarchiesDateTimeHierarchy'] = None,
                 explicit_hierarchy: Optional['outputs.ColumnHierarchiesExplicitHierarchy'] = None,
                 predefined_hierarchy: Optional['outputs.ColumnHierarchiesPredefinedHierarchy'] = None):
        if date_time_hierarchy is not None:
            pulumi.set(__self__, "date_time_hierarchy", date_time_hierarchy)
        if explicit_hierarchy is not None:
            pulumi.set(__self__, "explicit_hierarchy", explicit_hierarchy)
        if predefined_hierarchy is not None:
            pulumi.set(__self__, "predefined_hierarchy", predefined_hierarchy)

    @property
    @pulumi.getter(name="dateTimeHierarchy")
    def date_time_hierarchy(self) -> Optional['outputs.ColumnHierarchiesDateTimeHierarchy']:
        return pulumi.get(self, "date_time_hierarchy")

    @property
    @pulumi.getter(name="explicitHierarchy")
    def explicit_hierarchy(self) -> Optional['outputs.ColumnHierarchiesExplicitHierarchy']:
        return pulumi.get(self, "explicit_hierarchy")

    @property
    @pulumi.getter(name="predefinedHierarchy")
    def predefined_hierarchy(self) -> Optional['outputs.ColumnHierarchiesPredefinedHierarchy']:
        return pulumi.get(self, "predefined_hierarchy")


@pulumi.output_type
class ColumnHierarchiesDateTimeHierarchy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hierarchyId":
            suggest = "hierarchy_id"
        elif key == "drillDownFilters":
            suggest = "drill_down_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ColumnHierarchiesDateTimeHierarchy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ColumnHierarchiesDateTimeHierarchy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ColumnHierarchiesDateTimeHierarchy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hierarchy_id: str,
                 drill_down_filters: Optional[Sequence['outputs.DrillDownFilters']] = None):
        pulumi.set(__self__, "hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            pulumi.set(__self__, "drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> str:
        return pulumi.get(self, "hierarchy_id")

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[Sequence['outputs.DrillDownFilters']]:
        return pulumi.get(self, "drill_down_filters")


@pulumi.output_type
class ColumnHierarchiesExplicitHierarchy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hierarchyId":
            suggest = "hierarchy_id"
        elif key == "drillDownFilters":
            suggest = "drill_down_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ColumnHierarchiesExplicitHierarchy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ColumnHierarchiesExplicitHierarchy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ColumnHierarchiesExplicitHierarchy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Sequence['outputs.ColumnHierarchiesExplicitHierarchyColumn'],
                 hierarchy_id: str,
                 drill_down_filters: Optional[Sequence['outputs.DrillDownFilters']] = None):
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            pulumi.set(__self__, "drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.ColumnHierarchiesExplicitHierarchyColumn']:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> str:
        return pulumi.get(self, "hierarchy_id")

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[Sequence['outputs.DrillDownFilters']]:
        return pulumi.get(self, "drill_down_filters")


@pulumi.output_type
class ColumnHierarchiesExplicitHierarchyColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "dataSetIdentifier":
            suggest = "data_set_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ColumnHierarchiesExplicitHierarchyColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ColumnHierarchiesExplicitHierarchyColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ColumnHierarchiesExplicitHierarchyColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 data_set_identifier: str):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> str:
        return pulumi.get(self, "data_set_identifier")


@pulumi.output_type
class ColumnHierarchiesPredefinedHierarchy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hierarchyId":
            suggest = "hierarchy_id"
        elif key == "drillDownFilters":
            suggest = "drill_down_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ColumnHierarchiesPredefinedHierarchy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ColumnHierarchiesPredefinedHierarchy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ColumnHierarchiesPredefinedHierarchy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Sequence['outputs.DimensionFieldSchema2'],
                 hierarchy_id: str,
                 drill_down_filters: Optional[Sequence['outputs.DrillDownFilters']] = None):
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            pulumi.set(__self__, "drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.DimensionFieldSchema2']:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> str:
        return pulumi.get(self, "hierarchy_id")

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[Sequence['outputs.DrillDownFilters']]:
        return pulumi.get(self, "drill_down_filters")


@pulumi.output_type
class ColumnSort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortBy":
            suggest = "sort_by"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ColumnSort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ColumnSort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ColumnSort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: str,
                 sort_by: 'outputs.Column',
                 aggregation_function: Optional['outputs.AggregationFunction'] = None):
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "sort_by", sort_by)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> 'outputs.Column':
        return pulumi.get(self, "sort_by")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional['outputs.AggregationFunction']:
        return pulumi.get(self, "aggregation_function")


@pulumi.output_type
class ConditionalFormattingColor(dict):
    def __init__(__self__, *,
                 gradient: Optional['outputs.ConditionalFormattingColorGradient'] = None,
                 solid: Optional['outputs.ConditionalFormattingColorSolid'] = None):
        if gradient is not None:
            pulumi.set(__self__, "gradient", gradient)
        if solid is not None:
            pulumi.set(__self__, "solid", solid)

    @property
    @pulumi.getter
    def gradient(self) -> Optional['outputs.ConditionalFormattingColorGradient']:
        return pulumi.get(self, "gradient")

    @property
    @pulumi.getter
    def solid(self) -> Optional['outputs.ConditionalFormattingColorSolid']:
        return pulumi.get(self, "solid")


@pulumi.output_type
class ConditionalFormattingColorGradient(dict):
    def __init__(__self__, *,
                 color: 'outputs.ConditionalFormattingColorGradientColor',
                 expression: str):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter
    def color(self) -> 'outputs.ConditionalFormattingColorGradientColor':
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")


@pulumi.output_type
class ConditionalFormattingColorGradientColor(dict):
    def __init__(__self__, *,
                 stops: Optional[Sequence['outputs.ConditionalFormattingColorGradientColorStop']] = None):
        if stops is not None:
            pulumi.set(__self__, "stops", stops)

    @property
    @pulumi.getter
    def stops(self) -> Optional[Sequence['outputs.ConditionalFormattingColorGradientColorStop']]:
        return pulumi.get(self, "stops")


@pulumi.output_type
class ConditionalFormattingColorGradientColorStop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gradientOffset":
            suggest = "gradient_offset"
        elif key == "dataValue":
            suggest = "data_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConditionalFormattingColorGradientColorStop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConditionalFormattingColorGradientColorStop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConditionalFormattingColorGradientColorStop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gradient_offset: float,
                 color: Optional[str] = None,
                 data_value: Optional[float] = None):
        pulumi.set(__self__, "gradient_offset", gradient_offset)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if data_value is not None:
            pulumi.set(__self__, "data_value", data_value)

    @property
    @pulumi.getter(name="gradientOffset")
    def gradient_offset(self) -> float:
        return pulumi.get(self, "gradient_offset")

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[float]:
        return pulumi.get(self, "data_value")


@pulumi.output_type
class ConditionalFormattingColorSolid(dict):
    def __init__(__self__, *,
                 expression: str,
                 color: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        if color is not None:
            pulumi.set(__self__, "color", color)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")


@pulumi.output_type
class ConditionalFormattingIcon(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customCondition":
            suggest = "custom_condition"
        elif key == "iconSet":
            suggest = "icon_set"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConditionalFormattingIcon. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConditionalFormattingIcon.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConditionalFormattingIcon.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_condition: Optional['outputs.ConditionalFormattingIconCustomCondition'] = None,
                 icon_set: Optional['outputs.ConditionalFormattingIconIconSet'] = None):
        if custom_condition is not None:
            pulumi.set(__self__, "custom_condition", custom_condition)
        if icon_set is not None:
            pulumi.set(__self__, "icon_set", icon_set)

    @property
    @pulumi.getter(name="customCondition")
    def custom_condition(self) -> Optional['outputs.ConditionalFormattingIconCustomCondition']:
        return pulumi.get(self, "custom_condition")

    @property
    @pulumi.getter(name="iconSet")
    def icon_set(self) -> Optional['outputs.ConditionalFormattingIconIconSet']:
        return pulumi.get(self, "icon_set")


@pulumi.output_type
class ConditionalFormattingIconCustomCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iconOptions":
            suggest = "icon_options"
        elif key == "displayConfiguration":
            suggest = "display_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConditionalFormattingIconCustomCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConditionalFormattingIconCustomCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConditionalFormattingIconCustomCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 icon_options: 'outputs.ConditionalFormattingIconCustomConditionIconOptions',
                 color: Optional[str] = None,
                 display_configuration: Optional['outputs.ConditionalFormattingIconCustomConditionDisplayConfiguration'] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "icon_options", icon_options)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if display_configuration is not None:
            pulumi.set(__self__, "display_configuration", display_configuration)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="iconOptions")
    def icon_options(self) -> 'outputs.ConditionalFormattingIconCustomConditionIconOptions':
        return pulumi.get(self, "icon_options")

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="displayConfiguration")
    def display_configuration(self) -> Optional['outputs.ConditionalFormattingIconCustomConditionDisplayConfiguration']:
        return pulumi.get(self, "display_configuration")


@pulumi.output_type
class ConditionalFormattingIconCustomConditionDisplayConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iconDisplayOption":
            suggest = "icon_display_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConditionalFormattingIconCustomConditionDisplayConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConditionalFormattingIconCustomConditionDisplayConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConditionalFormattingIconCustomConditionDisplayConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icon_display_option: Optional[str] = None):
        if icon_display_option is not None:
            pulumi.set(__self__, "icon_display_option", icon_display_option)

    @property
    @pulumi.getter(name="iconDisplayOption")
    def icon_display_option(self) -> Optional[str]:
        return pulumi.get(self, "icon_display_option")


@pulumi.output_type
class ConditionalFormattingIconCustomConditionIconOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unicodeIcon":
            suggest = "unicode_icon"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConditionalFormattingIconCustomConditionIconOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConditionalFormattingIconCustomConditionIconOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConditionalFormattingIconCustomConditionIconOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icon: Optional[str] = None,
                 unicode_icon: Optional[str] = None):
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if unicode_icon is not None:
            pulumi.set(__self__, "unicode_icon", unicode_icon)

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="unicodeIcon")
    def unicode_icon(self) -> Optional[str]:
        return pulumi.get(self, "unicode_icon")


@pulumi.output_type
class ConditionalFormattingIconIconSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iconSetType":
            suggest = "icon_set_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConditionalFormattingIconIconSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConditionalFormattingIconIconSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConditionalFormattingIconIconSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 icon_set_type: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        if icon_set_type is not None:
            pulumi.set(__self__, "icon_set_type", icon_set_type)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="iconSetType")
    def icon_set_type(self) -> Optional[str]:
        return pulumi.get(self, "icon_set_type")


@pulumi.output_type
class ContributionAnalysisDefaults(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contributorDimensions":
            suggest = "contributor_dimensions"
        elif key == "measureFieldId":
            suggest = "measure_field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContributionAnalysisDefaults. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContributionAnalysisDefaults.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContributionAnalysisDefaults.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contributor_dimensions: Sequence['outputs.ContributionAnalysisDefaultsContributorDimension'],
                 measure_field_id: str):
        pulumi.set(__self__, "contributor_dimensions", contributor_dimensions)
        pulumi.set(__self__, "measure_field_id", measure_field_id)

    @property
    @pulumi.getter(name="contributorDimensions")
    def contributor_dimensions(self) -> Sequence['outputs.ContributionAnalysisDefaultsContributorDimension']:
        return pulumi.get(self, "contributor_dimensions")

    @property
    @pulumi.getter(name="measureFieldId")
    def measure_field_id(self) -> str:
        return pulumi.get(self, "measure_field_id")


@pulumi.output_type
class ContributionAnalysisDefaultsContributorDimension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "dataSetIdentifier":
            suggest = "data_set_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContributionAnalysisDefaultsContributorDimension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContributionAnalysisDefaultsContributorDimension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContributionAnalysisDefaultsContributorDimension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 data_set_identifier: str):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> str:
        return pulumi.get(self, "data_set_identifier")


@pulumi.output_type
class DashboardDashboardPublishOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adHocFilteringOption":
            suggest = "ad_hoc_filtering_option"
        elif key == "dataPointDrillUpDownOption":
            suggest = "data_point_drill_up_down_option"
        elif key == "dataPointMenuLabelOption":
            suggest = "data_point_menu_label_option"
        elif key == "dataPointTooltipOption":
            suggest = "data_point_tooltip_option"
        elif key == "exportToCsvOption":
            suggest = "export_to_csv_option"
        elif key == "exportWithHiddenFieldsOption":
            suggest = "export_with_hidden_fields_option"
        elif key == "sheetControlsOption":
            suggest = "sheet_controls_option"
        elif key == "sheetLayoutElementMaximizationOption":
            suggest = "sheet_layout_element_maximization_option"
        elif key == "visualAxisSortOption":
            suggest = "visual_axis_sort_option"
        elif key == "visualMenuOption":
            suggest = "visual_menu_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad_hoc_filtering_option: Optional['outputs.DashboardDashboardPublishOptionsAdHocFilteringOption'] = None,
                 data_point_drill_up_down_option: Optional['outputs.DashboardDashboardPublishOptionsDataPointDrillUpDownOption'] = None,
                 data_point_menu_label_option: Optional['outputs.DashboardDashboardPublishOptionsDataPointMenuLabelOption'] = None,
                 data_point_tooltip_option: Optional['outputs.DashboardDashboardPublishOptionsDataPointTooltipOption'] = None,
                 export_to_csv_option: Optional['outputs.DashboardDashboardPublishOptionsExportToCsvOption'] = None,
                 export_with_hidden_fields_option: Optional['outputs.DashboardDashboardPublishOptionsExportWithHiddenFieldsOption'] = None,
                 sheet_controls_option: Optional['outputs.DashboardDashboardPublishOptionsSheetControlsOption'] = None,
                 sheet_layout_element_maximization_option: Optional['outputs.DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption'] = None,
                 visual_axis_sort_option: Optional['outputs.DashboardDashboardPublishOptionsVisualAxisSortOption'] = None,
                 visual_menu_option: Optional['outputs.DashboardDashboardPublishOptionsVisualMenuOption'] = None):
        """
        :param 'DashboardDashboardPublishOptionsAdHocFilteringOptionArgs' ad_hoc_filtering_option: Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
        :param 'DashboardDashboardPublishOptionsDataPointDrillUpDownOptionArgs' data_point_drill_up_down_option: The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
        :param 'DashboardDashboardPublishOptionsDataPointMenuLabelOptionArgs' data_point_menu_label_option: The data point menu label options of a dashboard. See data_point_menu_label_option.
        :param 'DashboardDashboardPublishOptionsDataPointTooltipOptionArgs' data_point_tooltip_option: The data point tool tip options of a dashboard. See data_point_tooltip_option.
        :param 'DashboardDashboardPublishOptionsExportToCsvOptionArgs' export_to_csv_option: Export to .csv option. See export_to_csv_option.
        :param 'DashboardDashboardPublishOptionsExportWithHiddenFieldsOptionArgs' export_with_hidden_fields_option: Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
        :param 'DashboardDashboardPublishOptionsSheetControlsOptionArgs' sheet_controls_option: Sheet controls option. See sheet_controls_option.
        :param 'DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOptionArgs' sheet_layout_element_maximization_option: The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
        :param 'DashboardDashboardPublishOptionsVisualAxisSortOptionArgs' visual_axis_sort_option: The axis sort options of a dashboard. See visual_axis_sort_option.
        :param 'DashboardDashboardPublishOptionsVisualMenuOptionArgs' visual_menu_option: The menu options of a visual in a dashboard. See visual_menu_option.
        """
        if ad_hoc_filtering_option is not None:
            pulumi.set(__self__, "ad_hoc_filtering_option", ad_hoc_filtering_option)
        if data_point_drill_up_down_option is not None:
            pulumi.set(__self__, "data_point_drill_up_down_option", data_point_drill_up_down_option)
        if data_point_menu_label_option is not None:
            pulumi.set(__self__, "data_point_menu_label_option", data_point_menu_label_option)
        if data_point_tooltip_option is not None:
            pulumi.set(__self__, "data_point_tooltip_option", data_point_tooltip_option)
        if export_to_csv_option is not None:
            pulumi.set(__self__, "export_to_csv_option", export_to_csv_option)
        if export_with_hidden_fields_option is not None:
            pulumi.set(__self__, "export_with_hidden_fields_option", export_with_hidden_fields_option)
        if sheet_controls_option is not None:
            pulumi.set(__self__, "sheet_controls_option", sheet_controls_option)
        if sheet_layout_element_maximization_option is not None:
            pulumi.set(__self__, "sheet_layout_element_maximization_option", sheet_layout_element_maximization_option)
        if visual_axis_sort_option is not None:
            pulumi.set(__self__, "visual_axis_sort_option", visual_axis_sort_option)
        if visual_menu_option is not None:
            pulumi.set(__self__, "visual_menu_option", visual_menu_option)

    @property
    @pulumi.getter(name="adHocFilteringOption")
    def ad_hoc_filtering_option(self) -> Optional['outputs.DashboardDashboardPublishOptionsAdHocFilteringOption']:
        """
        Ad hoc (one-time) filtering option. See ad_hoc_filtering_option.
        """
        return pulumi.get(self, "ad_hoc_filtering_option")

    @property
    @pulumi.getter(name="dataPointDrillUpDownOption")
    def data_point_drill_up_down_option(self) -> Optional['outputs.DashboardDashboardPublishOptionsDataPointDrillUpDownOption']:
        """
        The drill-down options of data points in a dashboard. See data_point_drill_up_down_option.
        """
        return pulumi.get(self, "data_point_drill_up_down_option")

    @property
    @pulumi.getter(name="dataPointMenuLabelOption")
    def data_point_menu_label_option(self) -> Optional['outputs.DashboardDashboardPublishOptionsDataPointMenuLabelOption']:
        """
        The data point menu label options of a dashboard. See data_point_menu_label_option.
        """
        return pulumi.get(self, "data_point_menu_label_option")

    @property
    @pulumi.getter(name="dataPointTooltipOption")
    def data_point_tooltip_option(self) -> Optional['outputs.DashboardDashboardPublishOptionsDataPointTooltipOption']:
        """
        The data point tool tip options of a dashboard. See data_point_tooltip_option.
        """
        return pulumi.get(self, "data_point_tooltip_option")

    @property
    @pulumi.getter(name="exportToCsvOption")
    def export_to_csv_option(self) -> Optional['outputs.DashboardDashboardPublishOptionsExportToCsvOption']:
        """
        Export to .csv option. See export_to_csv_option.
        """
        return pulumi.get(self, "export_to_csv_option")

    @property
    @pulumi.getter(name="exportWithHiddenFieldsOption")
    def export_with_hidden_fields_option(self) -> Optional['outputs.DashboardDashboardPublishOptionsExportWithHiddenFieldsOption']:
        """
        Determines if hidden fields are exported with a dashboard. See export_with_hidden_fields_option.
        """
        return pulumi.get(self, "export_with_hidden_fields_option")

    @property
    @pulumi.getter(name="sheetControlsOption")
    def sheet_controls_option(self) -> Optional['outputs.DashboardDashboardPublishOptionsSheetControlsOption']:
        """
        Sheet controls option. See sheet_controls_option.
        """
        return pulumi.get(self, "sheet_controls_option")

    @property
    @pulumi.getter(name="sheetLayoutElementMaximizationOption")
    def sheet_layout_element_maximization_option(self) -> Optional['outputs.DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption']:
        """
        The sheet layout maximization options of a dashboard. See sheet_layout_element_maximization_option.
        """
        return pulumi.get(self, "sheet_layout_element_maximization_option")

    @property
    @pulumi.getter(name="visualAxisSortOption")
    def visual_axis_sort_option(self) -> Optional['outputs.DashboardDashboardPublishOptionsVisualAxisSortOption']:
        """
        The axis sort options of a dashboard. See visual_axis_sort_option.
        """
        return pulumi.get(self, "visual_axis_sort_option")

    @property
    @pulumi.getter(name="visualMenuOption")
    def visual_menu_option(self) -> Optional['outputs.DashboardDashboardPublishOptionsVisualMenuOption']:
        """
        The menu options of a visual in a dashboard. See visual_menu_option.
        """
        return pulumi.get(self, "visual_menu_option")


@pulumi.output_type
class DashboardDashboardPublishOptionsAdHocFilteringOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityStatus":
            suggest = "availability_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptionsAdHocFilteringOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptionsAdHocFilteringOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptionsAdHocFilteringOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_status: Optional[str] = None):
        """
        :param str availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")


@pulumi.output_type
class DashboardDashboardPublishOptionsDataPointDrillUpDownOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityStatus":
            suggest = "availability_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptionsDataPointDrillUpDownOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptionsDataPointDrillUpDownOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptionsDataPointDrillUpDownOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_status: Optional[str] = None):
        """
        :param str availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")


@pulumi.output_type
class DashboardDashboardPublishOptionsDataPointMenuLabelOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityStatus":
            suggest = "availability_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptionsDataPointMenuLabelOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptionsDataPointMenuLabelOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptionsDataPointMenuLabelOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_status: Optional[str] = None):
        """
        :param str availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")


@pulumi.output_type
class DashboardDashboardPublishOptionsDataPointTooltipOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityStatus":
            suggest = "availability_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptionsDataPointTooltipOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptionsDataPointTooltipOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptionsDataPointTooltipOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_status: Optional[str] = None):
        """
        :param str availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")


@pulumi.output_type
class DashboardDashboardPublishOptionsExportToCsvOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityStatus":
            suggest = "availability_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptionsExportToCsvOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptionsExportToCsvOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptionsExportToCsvOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_status: Optional[str] = None):
        """
        :param str availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")


@pulumi.output_type
class DashboardDashboardPublishOptionsExportWithHiddenFieldsOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityStatus":
            suggest = "availability_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptionsExportWithHiddenFieldsOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptionsExportWithHiddenFieldsOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptionsExportWithHiddenFieldsOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_status: Optional[str] = None):
        """
        :param str availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")


@pulumi.output_type
class DashboardDashboardPublishOptionsSheetControlsOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visibilityState":
            suggest = "visibility_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptionsSheetControlsOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptionsSheetControlsOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptionsSheetControlsOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visibility_state: Optional[str] = None):
        """
        :param str visibility_state: Visibility state. Possibles values: EXPANDED, COLLAPSED.
        """
        if visibility_state is not None:
            pulumi.set(__self__, "visibility_state", visibility_state)

    @property
    @pulumi.getter(name="visibilityState")
    def visibility_state(self) -> Optional[str]:
        """
        Visibility state. Possibles values: EXPANDED, COLLAPSED.
        """
        return pulumi.get(self, "visibility_state")


@pulumi.output_type
class DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityStatus":
            suggest = "availability_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptionsSheetLayoutElementMaximizationOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_status: Optional[str] = None):
        """
        :param str availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")


@pulumi.output_type
class DashboardDashboardPublishOptionsVisualAxisSortOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityStatus":
            suggest = "availability_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptionsVisualAxisSortOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptionsVisualAxisSortOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptionsVisualAxisSortOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_status: Optional[str] = None):
        """
        :param str availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")


@pulumi.output_type
class DashboardDashboardPublishOptionsVisualMenuOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityStatus":
            suggest = "availability_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDashboardPublishOptionsVisualMenuOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDashboardPublishOptionsVisualMenuOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDashboardPublishOptionsVisualMenuOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_status: Optional[str] = None):
        """
        :param str availability_status: Availability status. Possibles values: ENABLED, DISABLED.
        """
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        """
        Availability status. Possibles values: ENABLED, DISABLED.
        """
        return pulumi.get(self, "availability_status")


@pulumi.output_type
class DashboardDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifiersDeclarations":
            suggest = "data_set_identifiers_declarations"
        elif key == "analysisDefaults":
            suggest = "analysis_defaults"
        elif key == "calculatedFields":
            suggest = "calculated_fields"
        elif key == "columnConfigurations":
            suggest = "column_configurations"
        elif key == "filterGroups":
            suggest = "filter_groups"
        elif key == "parameterDeclarations":
            suggest = "parameter_declarations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_identifiers_declarations: Sequence['outputs.DashboardDefinitionDataSetIdentifiersDeclaration'],
                 analysis_defaults: Optional['outputs.DashboardDefinitionAnalysisDefaults'] = None,
                 calculated_fields: Optional[Sequence['outputs.DashboardDefinitionCalculatedField']] = None,
                 column_configurations: Optional[Sequence['outputs.DashboardDefinitionColumnConfiguration']] = None,
                 filter_groups: Optional[Sequence['outputs.DashboardDefinitionFilterGroup']] = None,
                 parameter_declarations: Optional[Sequence['outputs.DashboardDefinitionParameterDeclaration']] = None,
                 sheets: Optional[Sequence['outputs.DashboardDefinitionSheet']] = None):
        """
        :param Sequence['DashboardDefinitionDataSetIdentifiersDeclarationArgs'] data_set_identifiers_declarations: A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
        :param 'DashboardDefinitionAnalysisDefaultsArgs' analysis_defaults: The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        :param Sequence['DashboardDefinitionCalculatedFieldArgs'] calculated_fields: A list of calculated field definitions for the dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        :param Sequence['DashboardDefinitionColumnConfigurationArgs'] column_configurations: A list of dashboard-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a dashboard. See AWS API Documentation for complete description.
        :param Sequence['DashboardDefinitionFilterGroupArgs'] filter_groups: A list of filter definitions for a dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        :param Sequence['DashboardDefinitionSheetArgs'] sheets: A list of sheet definitions for a dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        pulumi.set(__self__, "data_set_identifiers_declarations", data_set_identifiers_declarations)
        if analysis_defaults is not None:
            pulumi.set(__self__, "analysis_defaults", analysis_defaults)
        if calculated_fields is not None:
            pulumi.set(__self__, "calculated_fields", calculated_fields)
        if column_configurations is not None:
            pulumi.set(__self__, "column_configurations", column_configurations)
        if filter_groups is not None:
            pulumi.set(__self__, "filter_groups", filter_groups)
        if parameter_declarations is not None:
            pulumi.set(__self__, "parameter_declarations", parameter_declarations)
        if sheets is not None:
            pulumi.set(__self__, "sheets", sheets)

    @property
    @pulumi.getter(name="dataSetIdentifiersDeclarations")
    def data_set_identifiers_declarations(self) -> Sequence['outputs.DashboardDefinitionDataSetIdentifiersDeclaration']:
        """
        A list dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetIdentifierDeclaration.html).
        """
        return pulumi.get(self, "data_set_identifiers_declarations")

    @property
    @pulumi.getter(name="analysisDefaults")
    def analysis_defaults(self) -> Optional['outputs.DashboardDefinitionAnalysisDefaults']:
        """
        The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        """
        return pulumi.get(self, "analysis_defaults")

    @property
    @pulumi.getter(name="calculatedFields")
    def calculated_fields(self) -> Optional[Sequence['outputs.DashboardDefinitionCalculatedField']]:
        """
        A list of calculated field definitions for the dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        """
        return pulumi.get(self, "calculated_fields")

    @property
    @pulumi.getter(name="columnConfigurations")
    def column_configurations(self) -> Optional[Sequence['outputs.DashboardDefinitionColumnConfiguration']]:
        """
        A list of dashboard-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a dashboard. See AWS API Documentation for complete description.
        """
        return pulumi.get(self, "column_configurations")

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Optional[Sequence['outputs.DashboardDefinitionFilterGroup']]:
        """
        A list of filter definitions for a dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        """
        return pulumi.get(self, "filter_groups")

    @property
    @pulumi.getter(name="parameterDeclarations")
    def parameter_declarations(self) -> Optional[Sequence['outputs.DashboardDefinitionParameterDeclaration']]:
        return pulumi.get(self, "parameter_declarations")

    @property
    @pulumi.getter
    def sheets(self) -> Optional[Sequence['outputs.DashboardDefinitionSheet']]:
        """
        A list of sheet definitions for a dashboard. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        return pulumi.get(self, "sheets")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaults(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultNewSheetConfiguration":
            suggest = "default_new_sheet_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaults. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaults.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaults.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_new_sheet_configuration: 'outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfiguration'):
        pulumi.set(__self__, "default_new_sheet_configuration", default_new_sheet_configuration)

    @property
    @pulumi.getter(name="defaultNewSheetConfiguration")
    def default_new_sheet_configuration(self) -> 'outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfiguration':
        return pulumi.get(self, "default_new_sheet_configuration")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interactiveLayoutConfiguration":
            suggest = "interactive_layout_configuration"
        elif key == "paginatedLayoutConfiguration":
            suggest = "paginated_layout_configuration"
        elif key == "sheetContentType":
            suggest = "sheet_content_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interactive_layout_configuration: Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration'] = None,
                 paginated_layout_configuration: Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration'] = None,
                 sheet_content_type: Optional[str] = None):
        if interactive_layout_configuration is not None:
            pulumi.set(__self__, "interactive_layout_configuration", interactive_layout_configuration)
        if paginated_layout_configuration is not None:
            pulumi.set(__self__, "paginated_layout_configuration", paginated_layout_configuration)
        if sheet_content_type is not None:
            pulumi.set(__self__, "sheet_content_type", sheet_content_type)

    @property
    @pulumi.getter(name="interactiveLayoutConfiguration")
    def interactive_layout_configuration(self) -> Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration']:
        return pulumi.get(self, "interactive_layout_configuration")

    @property
    @pulumi.getter(name="paginatedLayoutConfiguration")
    def paginated_layout_configuration(self) -> Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration']:
        return pulumi.get(self, "paginated_layout_configuration")

    @property
    @pulumi.getter(name="sheetContentType")
    def sheet_content_type(self) -> Optional[str]:
        return pulumi.get(self, "sheet_content_type")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "freeForm":
            suggest = "free_form"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 free_form: Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm'] = None,
                 grid: Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid'] = None):
        if free_form is not None:
            pulumi.set(__self__, "free_form", free_form)
        if grid is not None:
            pulumi.set(__self__, "grid", grid)

    @property
    @pulumi.getter(name="freeForm")
    def free_form(self) -> Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm']:
        return pulumi.get(self, "free_form")

    @property
    @pulumi.getter
    def grid(self) -> Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid']:
        return pulumi.get(self, "grid")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canvas_size_options: 'outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions'):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> 'outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions':
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "screenCanvasSizeOptions":
            suggest = "screen_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 screen_canvas_size_options: Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions'] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions']:
        return pulumi.get(self, "screen_canvas_size_options")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optimizedViewPortWidth":
            suggest = "optimized_view_port_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optimized_view_port_width: str):
        pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> str:
        return pulumi.get(self, "optimized_view_port_width")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canvas_size_options: 'outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions'):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> 'outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions':
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "screenCanvasSizeOptions":
            suggest = "screen_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 screen_canvas_size_options: Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions'] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions']:
        return pulumi.get(self, "screen_canvas_size_options")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resizeOption":
            suggest = "resize_option"
        elif key == "optimizedViewPortWidth":
            suggest = "optimized_view_port_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resize_option: str,
                 optimized_view_port_width: Optional[str] = None):
        pulumi.set(__self__, "resize_option", resize_option)
        if optimized_view_port_width is not None:
            pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> str:
        return pulumi.get(self, "resize_option")

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[str]:
        return pulumi.get(self, "optimized_view_port_width")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionBased":
            suggest = "section_based"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 section_based: Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased'] = None):
        if section_based is not None:
            pulumi.set(__self__, "section_based", section_based)

    @property
    @pulumi.getter(name="sectionBased")
    def section_based(self) -> Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased']:
        return pulumi.get(self, "section_based")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canvas_size_options: 'outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions'):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> 'outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions':
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paperCanvasSizeOptions":
            suggest = "paper_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 paper_canvas_size_options: Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions'] = None):
        if paper_canvas_size_options is not None:
            pulumi.set(__self__, "paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional['outputs.DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions']:
        return pulumi.get(self, "paper_canvas_size_options")


@pulumi.output_type
class DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paperMargin":
            suggest = "paper_margin"
        elif key == "paperOrientation":
            suggest = "paper_orientation"
        elif key == "paperSize":
            suggest = "paper_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 paper_margin: Optional['outputs.Spacing'] = None,
                 paper_orientation: Optional[str] = None,
                 paper_size: Optional[str] = None):
        if paper_margin is not None:
            pulumi.set(__self__, "paper_margin", paper_margin)
        if paper_orientation is not None:
            pulumi.set(__self__, "paper_orientation", paper_orientation)
        if paper_size is not None:
            pulumi.set(__self__, "paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional['outputs.Spacing']:
        return pulumi.get(self, "paper_margin")

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[str]:
        return pulumi.get(self, "paper_orientation")

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[str]:
        return pulumi.get(self, "paper_size")


@pulumi.output_type
class DashboardDefinitionCalculatedField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifier":
            suggest = "data_set_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionCalculatedField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionCalculatedField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionCalculatedField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_identifier: str,
                 expression: str,
                 name: str):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> str:
        return pulumi.get(self, "data_set_identifier")

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DashboardDefinitionColumnConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionColumnConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionColumnConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionColumnConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 format_configuration: Optional['outputs.DashboardDefinitionColumnConfigurationFormatConfiguration'] = None,
                 role: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.DashboardDefinitionColumnConfigurationFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")


@pulumi.output_type
class DashboardDefinitionColumnConfigurationFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeFormatConfiguration":
            suggest = "date_time_format_configuration"
        elif key == "numberFormatConfiguration":
            suggest = "number_format_configuration"
        elif key == "stringFormatConfiguration":
            suggest = "string_format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionColumnConfigurationFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionColumnConfigurationFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionColumnConfigurationFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None,
                 number_format_configuration: Optional['outputs.NumberFormatConfiguration'] = None,
                 string_format_configuration: Optional['outputs.StringFormatConfiguration'] = None):
        if date_time_format_configuration is not None:
            pulumi.set(__self__, "date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            pulumi.set(__self__, "number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            pulumi.set(__self__, "string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "date_time_format_configuration")

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "number_format_configuration")

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "string_format_configuration")


@pulumi.output_type
class DashboardDefinitionDataSetIdentifiersDeclaration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetArn":
            suggest = "data_set_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionDataSetIdentifiersDeclaration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionDataSetIdentifiersDeclaration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionDataSetIdentifiersDeclaration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_arn: Optional[str] = None,
                 identifier: Optional[str] = None):
        """
        :param str data_set_arn: Dataset Amazon Resource Name (ARN).
        """
        if data_set_arn is not None:
            pulumi.set(__self__, "data_set_arn", data_set_arn)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> Optional[str]:
        """
        Dataset Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "data_set_arn")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class DashboardDefinitionFilterGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crossDataset":
            suggest = "cross_dataset"
        elif key == "filterGroupId":
            suggest = "filter_group_id"
        elif key == "scopeConfiguration":
            suggest = "scope_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionFilterGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionFilterGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionFilterGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cross_dataset: str,
                 filter_group_id: str,
                 filters: Sequence['outputs.Filters'],
                 scope_configuration: 'outputs.DashboardDefinitionFilterGroupScopeConfiguration',
                 status: Optional[str] = None):
        """
        :param str status: The dashboard creation status.
        """
        pulumi.set(__self__, "cross_dataset", cross_dataset)
        pulumi.set(__self__, "filter_group_id", filter_group_id)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "scope_configuration", scope_configuration)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="crossDataset")
    def cross_dataset(self) -> str:
        return pulumi.get(self, "cross_dataset")

    @property
    @pulumi.getter(name="filterGroupId")
    def filter_group_id(self) -> str:
        return pulumi.get(self, "filter_group_id")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.Filters']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="scopeConfiguration")
    def scope_configuration(self) -> 'outputs.DashboardDefinitionFilterGroupScopeConfiguration':
        return pulumi.get(self, "scope_configuration")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DashboardDefinitionFilterGroupScopeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectedSheets":
            suggest = "selected_sheets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionFilterGroupScopeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionFilterGroupScopeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionFilterGroupScopeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 selected_sheets: Optional['outputs.DashboardDefinitionFilterGroupScopeConfigurationSelectedSheets'] = None):
        if selected_sheets is not None:
            pulumi.set(__self__, "selected_sheets", selected_sheets)

    @property
    @pulumi.getter(name="selectedSheets")
    def selected_sheets(self) -> Optional['outputs.DashboardDefinitionFilterGroupScopeConfigurationSelectedSheets']:
        return pulumi.get(self, "selected_sheets")


@pulumi.output_type
class DashboardDefinitionFilterGroupScopeConfigurationSelectedSheets(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetVisualScopingConfigurations":
            suggest = "sheet_visual_scoping_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionFilterGroupScopeConfigurationSelectedSheets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionFilterGroupScopeConfigurationSelectedSheets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionFilterGroupScopeConfigurationSelectedSheets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sheet_visual_scoping_configurations: Optional[Sequence['outputs.DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration']] = None):
        if sheet_visual_scoping_configurations is not None:
            pulumi.set(__self__, "sheet_visual_scoping_configurations", sheet_visual_scoping_configurations)

    @property
    @pulumi.getter(name="sheetVisualScopingConfigurations")
    def sheet_visual_scoping_configurations(self) -> Optional[Sequence['outputs.DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration']]:
        return pulumi.get(self, "sheet_visual_scoping_configurations")


@pulumi.output_type
class DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetId":
            suggest = "sheet_id"
        elif key == "visualIds":
            suggest = "visual_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope: str,
                 sheet_id: str,
                 visual_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sheet_id", sheet_id)
        if visual_ids is not None:
            pulumi.set(__self__, "visual_ids", visual_ids)

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> str:
        return pulumi.get(self, "sheet_id")

    @property
    @pulumi.getter(name="visualIds")
    def visual_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "visual_ids")


@pulumi.output_type
class DashboardDefinitionParameterDeclaration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeParameterDeclaration":
            suggest = "date_time_parameter_declaration"
        elif key == "decimalParameterDeclaration":
            suggest = "decimal_parameter_declaration"
        elif key == "integerParameterDeclaration":
            suggest = "integer_parameter_declaration"
        elif key == "stringParameterDeclaration":
            suggest = "string_parameter_declaration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionParameterDeclaration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionParameterDeclaration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionParameterDeclaration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_parameter_declaration: Optional['outputs.DateTimeParameterDeclaration'] = None,
                 decimal_parameter_declaration: Optional['outputs.DecimalParameterDeclaration'] = None,
                 integer_parameter_declaration: Optional['outputs.IntegerParameterDeclaration'] = None,
                 string_parameter_declaration: Optional['outputs.StringParameterDeclaration'] = None):
        if date_time_parameter_declaration is not None:
            pulumi.set(__self__, "date_time_parameter_declaration", date_time_parameter_declaration)
        if decimal_parameter_declaration is not None:
            pulumi.set(__self__, "decimal_parameter_declaration", decimal_parameter_declaration)
        if integer_parameter_declaration is not None:
            pulumi.set(__self__, "integer_parameter_declaration", integer_parameter_declaration)
        if string_parameter_declaration is not None:
            pulumi.set(__self__, "string_parameter_declaration", string_parameter_declaration)

    @property
    @pulumi.getter(name="dateTimeParameterDeclaration")
    def date_time_parameter_declaration(self) -> Optional['outputs.DateTimeParameterDeclaration']:
        return pulumi.get(self, "date_time_parameter_declaration")

    @property
    @pulumi.getter(name="decimalParameterDeclaration")
    def decimal_parameter_declaration(self) -> Optional['outputs.DecimalParameterDeclaration']:
        return pulumi.get(self, "decimal_parameter_declaration")

    @property
    @pulumi.getter(name="integerParameterDeclaration")
    def integer_parameter_declaration(self) -> Optional['outputs.IntegerParameterDeclaration']:
        return pulumi.get(self, "integer_parameter_declaration")

    @property
    @pulumi.getter(name="stringParameterDeclaration")
    def string_parameter_declaration(self) -> Optional['outputs.StringParameterDeclaration']:
        return pulumi.get(self, "string_parameter_declaration")


@pulumi.output_type
class DashboardDefinitionSheet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetId":
            suggest = "sheet_id"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "filterControls":
            suggest = "filter_controls"
        elif key == "parameterControls":
            suggest = "parameter_controls"
        elif key == "sheetControlLayouts":
            suggest = "sheet_control_layouts"
        elif key == "textBoxes":
            suggest = "text_boxes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sheet_id: str,
                 content_type: Optional[str] = None,
                 description: Optional[str] = None,
                 filter_controls: Optional[Sequence['outputs.FilterControls']] = None,
                 layouts: Optional['outputs.Layouts'] = None,
                 name: Optional[str] = None,
                 parameter_controls: Optional[Sequence['outputs.DashboardDefinitionSheetParameterControl']] = None,
                 sheet_control_layouts: Optional['outputs.DashboardDefinitionSheetSheetControlLayouts'] = None,
                 text_boxes: Optional[Sequence['outputs.DashboardDefinitionSheetTextBox']] = None,
                 title: Optional[str] = None,
                 visuals: Optional[Sequence['outputs.Visuals']] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "sheet_id", sheet_id)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter_controls is not None:
            pulumi.set(__self__, "filter_controls", filter_controls)
        if layouts is not None:
            pulumi.set(__self__, "layouts", layouts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_controls is not None:
            pulumi.set(__self__, "parameter_controls", parameter_controls)
        if sheet_control_layouts is not None:
            pulumi.set(__self__, "sheet_control_layouts", sheet_control_layouts)
        if text_boxes is not None:
            pulumi.set(__self__, "text_boxes", text_boxes)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visuals is not None:
            pulumi.set(__self__, "visuals", visuals)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> str:
        return pulumi.get(self, "sheet_id")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="filterControls")
    def filter_controls(self) -> Optional[Sequence['outputs.FilterControls']]:
        return pulumi.get(self, "filter_controls")

    @property
    @pulumi.getter
    def layouts(self) -> Optional['outputs.Layouts']:
        return pulumi.get(self, "layouts")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parameterControls")
    def parameter_controls(self) -> Optional[Sequence['outputs.DashboardDefinitionSheetParameterControl']]:
        return pulumi.get(self, "parameter_controls")

    @property
    @pulumi.getter(name="sheetControlLayouts")
    def sheet_control_layouts(self) -> Optional['outputs.DashboardDefinitionSheetSheetControlLayouts']:
        return pulumi.get(self, "sheet_control_layouts")

    @property
    @pulumi.getter(name="textBoxes")
    def text_boxes(self) -> Optional[Sequence['outputs.DashboardDefinitionSheetTextBox']]:
        return pulumi.get(self, "text_boxes")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visuals(self) -> Optional[Sequence['outputs.Visuals']]:
        return pulumi.get(self, "visuals")


@pulumi.output_type
class DashboardDefinitionSheetParameterControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimePicker":
            suggest = "date_time_picker"
        elif key == "textArea":
            suggest = "text_area"
        elif key == "textField":
            suggest = "text_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_picker: Optional['outputs.DashboardDefinitionSheetParameterControlDateTimePicker'] = None,
                 dropdown: Optional['outputs.DashboardDefinitionSheetParameterControlDropdown'] = None,
                 list: Optional['outputs.DashboardDefinitionSheetParameterControlList'] = None,
                 slider: Optional['outputs.DashboardDefinitionSheetParameterControlSlider'] = None,
                 text_area: Optional['outputs.DashboardDefinitionSheetParameterControlTextArea'] = None,
                 text_field: Optional['outputs.DashboardDefinitionSheetParameterControlTextField'] = None):
        if date_time_picker is not None:
            pulumi.set(__self__, "date_time_picker", date_time_picker)
        if dropdown is not None:
            pulumi.set(__self__, "dropdown", dropdown)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if slider is not None:
            pulumi.set(__self__, "slider", slider)
        if text_area is not None:
            pulumi.set(__self__, "text_area", text_area)
        if text_field is not None:
            pulumi.set(__self__, "text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlDateTimePicker']:
        return pulumi.get(self, "date_time_picker")

    @property
    @pulumi.getter
    def dropdown(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlDropdown']:
        return pulumi.get(self, "dropdown")

    @property
    @pulumi.getter
    def list(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlList']:
        return pulumi.get(self, "list")

    @property
    @pulumi.getter
    def slider(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlSlider']:
        return pulumi.get(self, "slider")

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlTextArea']:
        return pulumi.get(self, "text_area")

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlTextField']:
        return pulumi.get(self, "text_field")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlDateTimePicker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlDateTimePicker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlDateTimePicker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlDateTimePicker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 display_options: Optional['outputs.DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptions'] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeFormat":
            suggest = "date_time_format"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlDateTimePickerDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_format: Optional[str] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[str]:
        return pulumi.get(self, "date_time_format")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlDropdown(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "cascadingControlConfiguration":
            suggest = "cascading_control_configuration"
        elif key == "displayOptions":
            suggest = "display_options"
        elif key == "selectableValues":
            suggest = "selectable_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlDropdown. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlDropdown.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlDropdown.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 cascading_control_configuration: Optional['outputs.CascadingControlConfiguration'] = None,
                 display_options: Optional['outputs.DashboardDefinitionSheetParameterControlDropdownDisplayOptions'] = None,
                 selectable_values: Optional['outputs.DashboardDefinitionSheetParameterControlDropdownSelectableValues'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional['outputs.CascadingControlConfiguration']:
        return pulumi.get(self, "cascading_control_configuration")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlDropdownDisplayOptions']:
        return pulumi.get(self, "display_options")

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlDropdownSelectableValues']:
        return pulumi.get(self, "selectable_values")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlDropdownDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectAllOptions":
            suggest = "select_all_options"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlDropdownDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlDropdownDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlDropdownDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 select_all_options: Optional['outputs.SelectAllOptions'] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "select_all_options")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlDropdownSelectableValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkToDataSetColumn":
            suggest = "link_to_data_set_column"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlDropdownSelectableValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlDropdownSelectableValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlDropdownSelectableValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_to_data_set_column: Optional['outputs.Column'] = None,
                 values: Optional[Sequence[str]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional['outputs.Column']:
        return pulumi.get(self, "link_to_data_set_column")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "cascadingControlConfiguration":
            suggest = "cascading_control_configuration"
        elif key == "displayOptions":
            suggest = "display_options"
        elif key == "selectableValues":
            suggest = "selectable_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 cascading_control_configuration: Optional['outputs.CascadingControlConfiguration'] = None,
                 display_options: Optional['outputs.DashboardDefinitionSheetParameterControlListDisplayOptions'] = None,
                 selectable_values: Optional['outputs.DashboardDefinitionSheetParameterControlListSelectableValues'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional['outputs.CascadingControlConfiguration']:
        return pulumi.get(self, "cascading_control_configuration")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlListDisplayOptions']:
        return pulumi.get(self, "display_options")

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlListSelectableValues']:
        return pulumi.get(self, "selectable_values")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlListDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "searchOptions":
            suggest = "search_options"
        elif key == "selectAllOptions":
            suggest = "select_all_options"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlListDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlListDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlListDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 search_options: Optional['outputs.SelectAllOptions'] = None,
                 select_all_options: Optional['outputs.SelectAllOptions'] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if search_options is not None:
            pulumi.set(__self__, "search_options", search_options)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "search_options")

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "select_all_options")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlListSelectableValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkToDataSetColumn":
            suggest = "link_to_data_set_column"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlListSelectableValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlListSelectableValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlListSelectableValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_to_data_set_column: Optional['outputs.Column'] = None,
                 values: Optional[Sequence[str]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional['outputs.Column']:
        return pulumi.get(self, "link_to_data_set_column")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlSlider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumValue":
            suggest = "maximum_value"
        elif key == "minimumValue":
            suggest = "minimum_value"
        elif key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "stepSize":
            suggest = "step_size"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlSlider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlSlider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlSlider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_value: float,
                 minimum_value: float,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 step_size: float,
                 title: str,
                 display_options: Optional['outputs.DashboardDefinitionSheetParameterControlSliderDisplayOptions'] = None):
        pulumi.set(__self__, "maximum_value", maximum_value)
        pulumi.set(__self__, "minimum_value", minimum_value)
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "step_size", step_size)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> float:
        return pulumi.get(self, "maximum_value")

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> float:
        return pulumi.get(self, "minimum_value")

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> float:
        return pulumi.get(self, "step_size")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.DashboardDefinitionSheetParameterControlSliderDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlSliderDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlSliderDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlSliderDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlSliderDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlTextArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlTextArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlTextArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlTextArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 delimiter: Optional[str] = None,
                 display_options: Optional['outputs.TextAreaControlDisplayOptions'] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TextAreaControlDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class DashboardDefinitionSheetParameterControlTextField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetParameterControlTextField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetParameterControlTextField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetParameterControlTextField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 display_options: Optional['outputs.TextAreaControlDisplayOptions'] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TextAreaControlDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class DashboardDefinitionSheetSheetControlLayouts(dict):
    def __init__(__self__, *,
                 configuration: 'outputs.DashboardDefinitionSheetSheetControlLayoutsConfiguration'):
        pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> 'outputs.DashboardDefinitionSheetSheetControlLayoutsConfiguration':
        return pulumi.get(self, "configuration")


@pulumi.output_type
class DashboardDefinitionSheetSheetControlLayoutsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gridLayout":
            suggest = "grid_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetSheetControlLayoutsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetSheetControlLayoutsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetSheetControlLayoutsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grid_layout: Optional['outputs.GridLayout'] = None):
        if grid_layout is not None:
            pulumi.set(__self__, "grid_layout", grid_layout)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional['outputs.GridLayout']:
        return pulumi.get(self, "grid_layout")


@pulumi.output_type
class DashboardDefinitionSheetTextBox(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetTextBoxId":
            suggest = "sheet_text_box_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardDefinitionSheetTextBox. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardDefinitionSheetTextBox.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardDefinitionSheetTextBox.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sheet_text_box_id: str,
                 content: Optional[str] = None):
        pulumi.set(__self__, "sheet_text_box_id", sheet_text_box_id)
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter(name="sheetTextBoxId")
    def sheet_text_box_id(self) -> str:
        return pulumi.get(self, "sheet_text_box_id")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")


@pulumi.output_type
class DashboardParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeParameters":
            suggest = "date_time_parameters"
        elif key == "decimalParameters":
            suggest = "decimal_parameters"
        elif key == "integerParameters":
            suggest = "integer_parameters"
        elif key == "stringParameters":
            suggest = "string_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_parameters: Optional[Sequence['outputs.DashboardParametersDateTimeParameter']] = None,
                 decimal_parameters: Optional[Sequence['outputs.DashboardParametersDecimalParameter']] = None,
                 integer_parameters: Optional[Sequence['outputs.DashboardParametersIntegerParameter']] = None,
                 string_parameters: Optional[Sequence['outputs.DashboardParametersStringParameter']] = None):
        """
        :param Sequence['DashboardParametersDateTimeParameterArgs'] date_time_parameters: A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
        :param Sequence['DashboardParametersDecimalParameterArgs'] decimal_parameters: A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
        :param Sequence['DashboardParametersIntegerParameterArgs'] integer_parameters: A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
        :param Sequence['DashboardParametersStringParameterArgs'] string_parameters: A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
        """
        if date_time_parameters is not None:
            pulumi.set(__self__, "date_time_parameters", date_time_parameters)
        if decimal_parameters is not None:
            pulumi.set(__self__, "decimal_parameters", decimal_parameters)
        if integer_parameters is not None:
            pulumi.set(__self__, "integer_parameters", integer_parameters)
        if string_parameters is not None:
            pulumi.set(__self__, "string_parameters", string_parameters)

    @property
    @pulumi.getter(name="dateTimeParameters")
    def date_time_parameters(self) -> Optional[Sequence['outputs.DashboardParametersDateTimeParameter']]:
        """
        A list of parameters that have a data type of date-time. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeParameter.html).
        """
        return pulumi.get(self, "date_time_parameters")

    @property
    @pulumi.getter(name="decimalParameters")
    def decimal_parameters(self) -> Optional[Sequence['outputs.DashboardParametersDecimalParameter']]:
        """
        A list of parameters that have a data type of decimal. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DecimalParameter.html).
        """
        return pulumi.get(self, "decimal_parameters")

    @property
    @pulumi.getter(name="integerParameters")
    def integer_parameters(self) -> Optional[Sequence['outputs.DashboardParametersIntegerParameter']]:
        """
        A list of parameters that have a data type of integer. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_IntegerParameter.html).
        """
        return pulumi.get(self, "integer_parameters")

    @property
    @pulumi.getter(name="stringParameters")
    def string_parameters(self) -> Optional[Sequence['outputs.DashboardParametersStringParameter']]:
        """
        A list of parameters that have a data type of string. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringParameter.html).
        """
        return pulumi.get(self, "string_parameters")


@pulumi.output_type
class DashboardParametersDateTimeParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DashboardParametersDecimalParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[float]):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[float]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DashboardParametersIntegerParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[int]):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[int]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DashboardParametersStringParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DashboardPermission(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 principal: str):
        """
        :param Sequence[str] actions: List of IAM actions to grant or revoke permissions on.
        :param str principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def principal(self) -> str:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")


@pulumi.output_type
class DashboardSourceEntity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceTemplate":
            suggest = "source_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardSourceEntity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardSourceEntity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardSourceEntity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_template: Optional['outputs.DashboardSourceEntitySourceTemplate'] = None):
        """
        :param 'DashboardSourceEntitySourceTemplateArgs' source_template: The source template. See source_template.
        """
        if source_template is not None:
            pulumi.set(__self__, "source_template", source_template)

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional['outputs.DashboardSourceEntitySourceTemplate']:
        """
        The source template. See source_template.
        """
        return pulumi.get(self, "source_template")


@pulumi.output_type
class DashboardSourceEntitySourceTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetReferences":
            suggest = "data_set_references"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardSourceEntitySourceTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardSourceEntitySourceTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardSourceEntitySourceTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: str,
                 data_set_references: Sequence['outputs.DashboardSourceEntitySourceTemplateDataSetReference']):
        """
        :param str arn: The Amazon Resource Name (ARN) of the resource.
        :param Sequence['DashboardSourceEntitySourceTemplateDataSetReferenceArgs'] data_set_references: List of dataset references. See data_set_references.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "data_set_references", data_set_references)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="dataSetReferences")
    def data_set_references(self) -> Sequence['outputs.DashboardSourceEntitySourceTemplateDataSetReference']:
        """
        List of dataset references. See data_set_references.
        """
        return pulumi.get(self, "data_set_references")


@pulumi.output_type
class DashboardSourceEntitySourceTemplateDataSetReference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetArn":
            suggest = "data_set_arn"
        elif key == "dataSetPlaceholder":
            suggest = "data_set_placeholder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardSourceEntitySourceTemplateDataSetReference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardSourceEntitySourceTemplateDataSetReference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardSourceEntitySourceTemplateDataSetReference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_arn: str,
                 data_set_placeholder: str):
        """
        :param str data_set_arn: Dataset Amazon Resource Name (ARN).
        :param str data_set_placeholder: Dataset placeholder.
        """
        pulumi.set(__self__, "data_set_arn", data_set_arn)
        pulumi.set(__self__, "data_set_placeholder", data_set_placeholder)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> str:
        """
        Dataset Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "data_set_arn")

    @property
    @pulumi.getter(name="dataSetPlaceholder")
    def data_set_placeholder(self) -> str:
        """
        Dataset placeholder.
        """
        return pulumi.get(self, "data_set_placeholder")


@pulumi.output_type
class DataLabelsOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryLabelVisibility":
            suggest = "category_label_visibility"
        elif key == "dataLabelTypes":
            suggest = "data_label_types"
        elif key == "labelColor":
            suggest = "label_color"
        elif key == "labelContent":
            suggest = "label_content"
        elif key == "labelFontConfiguration":
            suggest = "label_font_configuration"
        elif key == "measureLabelVisibility":
            suggest = "measure_label_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataLabelsOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataLabelsOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataLabelsOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_label_visibility: Optional[str] = None,
                 data_label_types: Optional[Sequence['outputs.DataLabelsOptionsDataLabelType']] = None,
                 label_color: Optional[str] = None,
                 label_content: Optional[str] = None,
                 label_font_configuration: Optional['outputs.FontConfiguration'] = None,
                 measure_label_visibility: Optional[str] = None,
                 overlap: Optional[str] = None,
                 position: Optional[str] = None,
                 visibility: Optional[str] = None):
        if category_label_visibility is not None:
            pulumi.set(__self__, "category_label_visibility", category_label_visibility)
        if data_label_types is not None:
            pulumi.set(__self__, "data_label_types", data_label_types)
        if label_color is not None:
            pulumi.set(__self__, "label_color", label_color)
        if label_content is not None:
            pulumi.set(__self__, "label_content", label_content)
        if label_font_configuration is not None:
            pulumi.set(__self__, "label_font_configuration", label_font_configuration)
        if measure_label_visibility is not None:
            pulumi.set(__self__, "measure_label_visibility", measure_label_visibility)
        if overlap is not None:
            pulumi.set(__self__, "overlap", overlap)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="categoryLabelVisibility")
    def category_label_visibility(self) -> Optional[str]:
        return pulumi.get(self, "category_label_visibility")

    @property
    @pulumi.getter(name="dataLabelTypes")
    def data_label_types(self) -> Optional[Sequence['outputs.DataLabelsOptionsDataLabelType']]:
        return pulumi.get(self, "data_label_types")

    @property
    @pulumi.getter(name="labelColor")
    def label_color(self) -> Optional[str]:
        return pulumi.get(self, "label_color")

    @property
    @pulumi.getter(name="labelContent")
    def label_content(self) -> Optional[str]:
        return pulumi.get(self, "label_content")

    @property
    @pulumi.getter(name="labelFontConfiguration")
    def label_font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "label_font_configuration")

    @property
    @pulumi.getter(name="measureLabelVisibility")
    def measure_label_visibility(self) -> Optional[str]:
        return pulumi.get(self, "measure_label_visibility")

    @property
    @pulumi.getter
    def overlap(self) -> Optional[str]:
        return pulumi.get(self, "overlap")

    @property
    @pulumi.getter
    def position(self) -> Optional[str]:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class DataLabelsOptionsDataLabelType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataPathLabelType":
            suggest = "data_path_label_type"
        elif key == "fieldLabelType":
            suggest = "field_label_type"
        elif key == "maximumLabelType":
            suggest = "maximum_label_type"
        elif key == "minimumLabelType":
            suggest = "minimum_label_type"
        elif key == "rangeEndsLabelType":
            suggest = "range_ends_label_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataLabelsOptionsDataLabelType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataLabelsOptionsDataLabelType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataLabelsOptionsDataLabelType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_path_label_type: Optional['outputs.DataLabelsOptionsDataLabelTypeDataPathLabelType'] = None,
                 field_label_type: Optional['outputs.DataLabelsOptionsDataLabelTypeFieldLabelType'] = None,
                 maximum_label_type: Optional['outputs.SelectAllOptions'] = None,
                 minimum_label_type: Optional['outputs.SelectAllOptions'] = None,
                 range_ends_label_type: Optional['outputs.SelectAllOptions'] = None):
        if data_path_label_type is not None:
            pulumi.set(__self__, "data_path_label_type", data_path_label_type)
        if field_label_type is not None:
            pulumi.set(__self__, "field_label_type", field_label_type)
        if maximum_label_type is not None:
            pulumi.set(__self__, "maximum_label_type", maximum_label_type)
        if minimum_label_type is not None:
            pulumi.set(__self__, "minimum_label_type", minimum_label_type)
        if range_ends_label_type is not None:
            pulumi.set(__self__, "range_ends_label_type", range_ends_label_type)

    @property
    @pulumi.getter(name="dataPathLabelType")
    def data_path_label_type(self) -> Optional['outputs.DataLabelsOptionsDataLabelTypeDataPathLabelType']:
        return pulumi.get(self, "data_path_label_type")

    @property
    @pulumi.getter(name="fieldLabelType")
    def field_label_type(self) -> Optional['outputs.DataLabelsOptionsDataLabelTypeFieldLabelType']:
        return pulumi.get(self, "field_label_type")

    @property
    @pulumi.getter(name="maximumLabelType")
    def maximum_label_type(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "maximum_label_type")

    @property
    @pulumi.getter(name="minimumLabelType")
    def minimum_label_type(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "minimum_label_type")

    @property
    @pulumi.getter(name="rangeEndsLabelType")
    def range_ends_label_type(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "range_ends_label_type")


@pulumi.output_type
class DataLabelsOptionsDataLabelTypeDataPathLabelType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "fieldValue":
            suggest = "field_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataLabelsOptionsDataLabelTypeDataPathLabelType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataLabelsOptionsDataLabelTypeDataPathLabelType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataLabelsOptionsDataLabelTypeDataPathLabelType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: Optional[str] = None,
                 field_value: Optional[str] = None,
                 visibility: Optional[str] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)
        if field_value is not None:
            pulumi.set(__self__, "field_value", field_value)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[str]:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[str]:
        return pulumi.get(self, "field_value")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class DataLabelsOptionsDataLabelTypeFieldLabelType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataLabelsOptionsDataLabelTypeFieldLabelType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataLabelsOptionsDataLabelTypeFieldLabelType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataLabelsOptionsDataLabelTypeFieldLabelType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: Optional[str] = None,
                 visibility: Optional[str] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[str]:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class DataPathValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "fieldValue":
            suggest = "field_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataPathValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataPathValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataPathValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 field_value: str):
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "field_value", field_value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> str:
        return pulumi.get(self, "field_value")


@pulumi.output_type
class DataSetColumnGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "geoSpatialColumnGroup":
            suggest = "geo_spatial_column_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetColumnGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetColumnGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetColumnGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geo_spatial_column_group: Optional['outputs.DataSetColumnGroupGeoSpatialColumnGroup'] = None):
        """
        :param 'DataSetColumnGroupGeoSpatialColumnGroupArgs' geo_spatial_column_group: Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
        """
        if geo_spatial_column_group is not None:
            pulumi.set(__self__, "geo_spatial_column_group", geo_spatial_column_group)

    @property
    @pulumi.getter(name="geoSpatialColumnGroup")
    def geo_spatial_column_group(self) -> Optional['outputs.DataSetColumnGroupGeoSpatialColumnGroup']:
        """
        Geospatial column group that denotes a hierarchy. See geo_spatial_column_group.
        """
        return pulumi.get(self, "geo_spatial_column_group")


@pulumi.output_type
class DataSetColumnGroupGeoSpatialColumnGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetColumnGroupGeoSpatialColumnGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetColumnGroupGeoSpatialColumnGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetColumnGroupGeoSpatialColumnGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Sequence[str],
                 country_code: str,
                 name: str):
        """
        :param Sequence[str] columns: Columns in this hierarchy.
        :param str country_code: Country code. Valid values are `US`.
        :param str name: A display name for the hierarchy.
        """
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def columns(self) -> Sequence[str]:
        """
        Columns in this hierarchy.
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        Country code. Valid values are `US`.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A display name for the hierarchy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DataSetColumnLevelPermissionRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnNames":
            suggest = "column_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetColumnLevelPermissionRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetColumnLevelPermissionRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetColumnLevelPermissionRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_names: Optional[Sequence[str]] = None,
                 principals: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] column_names: An array of column names.
        :param Sequence[str] principals: An array of ARNs for Amazon QuickSight users or groups.
        """
        if column_names is not None:
            pulumi.set(__self__, "column_names", column_names)
        if principals is not None:
            pulumi.set(__self__, "principals", principals)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[Sequence[str]]:
        """
        An array of column names.
        """
        return pulumi.get(self, "column_names")

    @property
    @pulumi.getter
    def principals(self) -> Optional[Sequence[str]]:
        """
        An array of ARNs for Amazon QuickSight users or groups.
        """
        return pulumi.get(self, "principals")


@pulumi.output_type
class DataSetDataSetUsageConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableUseAsDirectQuerySource":
            suggest = "disable_use_as_direct_query_source"
        elif key == "disableUseAsImportedSource":
            suggest = "disable_use_as_imported_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetDataSetUsageConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetDataSetUsageConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetDataSetUsageConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_use_as_direct_query_source: Optional[bool] = None,
                 disable_use_as_imported_source: Optional[bool] = None):
        """
        :param bool disable_use_as_direct_query_source: Controls whether a child dataset of a direct query can use this dataset as a source.
        :param bool disable_use_as_imported_source: Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
        """
        if disable_use_as_direct_query_source is not None:
            pulumi.set(__self__, "disable_use_as_direct_query_source", disable_use_as_direct_query_source)
        if disable_use_as_imported_source is not None:
            pulumi.set(__self__, "disable_use_as_imported_source", disable_use_as_imported_source)

    @property
    @pulumi.getter(name="disableUseAsDirectQuerySource")
    def disable_use_as_direct_query_source(self) -> Optional[bool]:
        """
        Controls whether a child dataset of a direct query can use this dataset as a source.
        """
        return pulumi.get(self, "disable_use_as_direct_query_source")

    @property
    @pulumi.getter(name="disableUseAsImportedSource")
    def disable_use_as_imported_source(self) -> Optional[bool]:
        """
        Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.
        """
        return pulumi.get(self, "disable_use_as_imported_source")


@pulumi.output_type
class DataSetFieldFolder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldFoldersId":
            suggest = "field_folders_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetFieldFolder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetFieldFolder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetFieldFolder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_folders_id: str,
                 columns: Optional[Sequence[str]] = None,
                 description: Optional[str] = None):
        """
        :param str field_folders_id: Key of the field folder map.
        :param Sequence[str] columns: An array of column names to add to the folder. A column can only be in one folder.
        :param str description: Field folder description.
        """
        pulumi.set(__self__, "field_folders_id", field_folders_id)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="fieldFoldersId")
    def field_folders_id(self) -> str:
        """
        Key of the field folder map.
        """
        return pulumi.get(self, "field_folders_id")

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence[str]]:
        """
        An array of column names to add to the folder. A column can only be in one folder.
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Field folder description.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class DataSetLogicalTableMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logicalTableMapId":
            suggest = "logical_table_map_id"
        elif key == "dataTransforms":
            suggest = "data_transforms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alias: str,
                 logical_table_map_id: str,
                 source: 'outputs.DataSetLogicalTableMapSource',
                 data_transforms: Optional[Sequence['outputs.DataSetLogicalTableMapDataTransform']] = None):
        """
        :param str alias: A display name for the logical table.
        :param str logical_table_map_id: Key of the logical table map.
        :param 'DataSetLogicalTableMapSourceArgs' source: Source of this logical table. See source.
        :param Sequence['DataSetLogicalTableMapDataTransformArgs'] data_transforms: Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "logical_table_map_id", logical_table_map_id)
        pulumi.set(__self__, "source", source)
        if data_transforms is not None:
            pulumi.set(__self__, "data_transforms", data_transforms)

    @property
    @pulumi.getter
    def alias(self) -> str:
        """
        A display name for the logical table.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="logicalTableMapId")
    def logical_table_map_id(self) -> str:
        """
        Key of the logical table map.
        """
        return pulumi.get(self, "logical_table_map_id")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.DataSetLogicalTableMapSource':
        """
        Source of this logical table. See source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="dataTransforms")
    def data_transforms(self) -> Optional[Sequence['outputs.DataSetLogicalTableMapDataTransform']]:
        """
        Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See data_transforms.
        """
        return pulumi.get(self, "data_transforms")


@pulumi.output_type
class DataSetLogicalTableMapDataTransform(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "castColumnTypeOperation":
            suggest = "cast_column_type_operation"
        elif key == "createColumnsOperation":
            suggest = "create_columns_operation"
        elif key == "filterOperation":
            suggest = "filter_operation"
        elif key == "projectOperation":
            suggest = "project_operation"
        elif key == "renameColumnOperation":
            suggest = "rename_column_operation"
        elif key == "tagColumnOperation":
            suggest = "tag_column_operation"
        elif key == "untagColumnOperation":
            suggest = "untag_column_operation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapDataTransform. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapDataTransform.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapDataTransform.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cast_column_type_operation: Optional['outputs.DataSetLogicalTableMapDataTransformCastColumnTypeOperation'] = None,
                 create_columns_operation: Optional['outputs.DataSetLogicalTableMapDataTransformCreateColumnsOperation'] = None,
                 filter_operation: Optional['outputs.DataSetLogicalTableMapDataTransformFilterOperation'] = None,
                 project_operation: Optional['outputs.DataSetLogicalTableMapDataTransformProjectOperation'] = None,
                 rename_column_operation: Optional['outputs.DataSetLogicalTableMapDataTransformRenameColumnOperation'] = None,
                 tag_column_operation: Optional['outputs.DataSetLogicalTableMapDataTransformTagColumnOperation'] = None,
                 untag_column_operation: Optional['outputs.DataSetLogicalTableMapDataTransformUntagColumnOperation'] = None):
        """
        :param 'DataSetLogicalTableMapDataTransformCastColumnTypeOperationArgs' cast_column_type_operation: A transform operation that casts a column to a different type. See cast_column_type_operation.
        :param 'DataSetLogicalTableMapDataTransformCreateColumnsOperationArgs' create_columns_operation: An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
        :param 'DataSetLogicalTableMapDataTransformFilterOperationArgs' filter_operation: An operation that filters rows based on some condition. See filter_operation.
        :param 'DataSetLogicalTableMapDataTransformProjectOperationArgs' project_operation: An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
        :param 'DataSetLogicalTableMapDataTransformRenameColumnOperationArgs' rename_column_operation: An operation that renames a column. See rename_column_operation.
        :param 'DataSetLogicalTableMapDataTransformTagColumnOperationArgs' tag_column_operation: An operation that tags a column with additional information. See tag_column_operation.
        :param 'DataSetLogicalTableMapDataTransformUntagColumnOperationArgs' untag_column_operation: A transform operation that removes tags associated with a column. See untag_column_operation.
        """
        if cast_column_type_operation is not None:
            pulumi.set(__self__, "cast_column_type_operation", cast_column_type_operation)
        if create_columns_operation is not None:
            pulumi.set(__self__, "create_columns_operation", create_columns_operation)
        if filter_operation is not None:
            pulumi.set(__self__, "filter_operation", filter_operation)
        if project_operation is not None:
            pulumi.set(__self__, "project_operation", project_operation)
        if rename_column_operation is not None:
            pulumi.set(__self__, "rename_column_operation", rename_column_operation)
        if tag_column_operation is not None:
            pulumi.set(__self__, "tag_column_operation", tag_column_operation)
        if untag_column_operation is not None:
            pulumi.set(__self__, "untag_column_operation", untag_column_operation)

    @property
    @pulumi.getter(name="castColumnTypeOperation")
    def cast_column_type_operation(self) -> Optional['outputs.DataSetLogicalTableMapDataTransformCastColumnTypeOperation']:
        """
        A transform operation that casts a column to a different type. See cast_column_type_operation.
        """
        return pulumi.get(self, "cast_column_type_operation")

    @property
    @pulumi.getter(name="createColumnsOperation")
    def create_columns_operation(self) -> Optional['outputs.DataSetLogicalTableMapDataTransformCreateColumnsOperation']:
        """
        An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See create_columns_operation.
        """
        return pulumi.get(self, "create_columns_operation")

    @property
    @pulumi.getter(name="filterOperation")
    def filter_operation(self) -> Optional['outputs.DataSetLogicalTableMapDataTransformFilterOperation']:
        """
        An operation that filters rows based on some condition. See filter_operation.
        """
        return pulumi.get(self, "filter_operation")

    @property
    @pulumi.getter(name="projectOperation")
    def project_operation(self) -> Optional['outputs.DataSetLogicalTableMapDataTransformProjectOperation']:
        """
        An operation that projects columns. Operations that come after a projection can only refer to projected columns. See project_operation.
        """
        return pulumi.get(self, "project_operation")

    @property
    @pulumi.getter(name="renameColumnOperation")
    def rename_column_operation(self) -> Optional['outputs.DataSetLogicalTableMapDataTransformRenameColumnOperation']:
        """
        An operation that renames a column. See rename_column_operation.
        """
        return pulumi.get(self, "rename_column_operation")

    @property
    @pulumi.getter(name="tagColumnOperation")
    def tag_column_operation(self) -> Optional['outputs.DataSetLogicalTableMapDataTransformTagColumnOperation']:
        """
        An operation that tags a column with additional information. See tag_column_operation.
        """
        return pulumi.get(self, "tag_column_operation")

    @property
    @pulumi.getter(name="untagColumnOperation")
    def untag_column_operation(self) -> Optional['outputs.DataSetLogicalTableMapDataTransformUntagColumnOperation']:
        """
        A transform operation that removes tags associated with a column. See untag_column_operation.
        """
        return pulumi.get(self, "untag_column_operation")


@pulumi.output_type
class DataSetLogicalTableMapDataTransformCastColumnTypeOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "newColumnType":
            suggest = "new_column_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapDataTransformCastColumnTypeOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapDataTransformCastColumnTypeOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapDataTransformCastColumnTypeOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 new_column_type: str,
                 format: Optional[str] = None):
        """
        :param str column_name: Column name.
        :param str new_column_type: New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
        :param str format: When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "new_column_type", new_column_type)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        Column name.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="newColumnType")
    def new_column_type(self) -> str:
        """
        New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
        """
        return pulumi.get(self, "new_column_type")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.
        """
        return pulumi.get(self, "format")


@pulumi.output_type
class DataSetLogicalTableMapDataTransformCreateColumnsOperation(dict):
    def __init__(__self__, *,
                 columns: Sequence['outputs.DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn']):
        """
        :param Sequence['DataSetLogicalTableMapDataTransformCreateColumnsOperationColumnArgs'] columns: Calculated columns to create. See columns.
        """
        pulumi.set(__self__, "columns", columns)

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn']:
        """
        Calculated columns to create. See columns.
        """
        return pulumi.get(self, "columns")


@pulumi.output_type
class DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnId":
            suggest = "column_id"
        elif key == "columnName":
            suggest = "column_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapDataTransformCreateColumnsOperationColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_id: str,
                 column_name: str,
                 expression: str):
        """
        :param str column_id: A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
        :param str column_name: Column name.
        :param str expression: An expression that defines the calculated column.
        """
        pulumi.set(__self__, "column_id", column_id)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="columnId")
    def column_id(self) -> str:
        """
        A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
        """
        return pulumi.get(self, "column_id")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        Column name.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        An expression that defines the calculated column.
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class DataSetLogicalTableMapDataTransformFilterOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionExpression":
            suggest = "condition_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapDataTransformFilterOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapDataTransformFilterOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapDataTransformFilterOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition_expression: str):
        """
        :param str condition_expression: An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
        """
        pulumi.set(__self__, "condition_expression", condition_expression)

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> str:
        """
        An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.
        """
        return pulumi.get(self, "condition_expression")


@pulumi.output_type
class DataSetLogicalTableMapDataTransformProjectOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectedColumns":
            suggest = "projected_columns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapDataTransformProjectOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapDataTransformProjectOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapDataTransformProjectOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 projected_columns: Sequence[str]):
        """
        :param Sequence[str] projected_columns: Projected columns.
        """
        pulumi.set(__self__, "projected_columns", projected_columns)

    @property
    @pulumi.getter(name="projectedColumns")
    def projected_columns(self) -> Sequence[str]:
        """
        Projected columns.
        """
        return pulumi.get(self, "projected_columns")


@pulumi.output_type
class DataSetLogicalTableMapDataTransformRenameColumnOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "newColumnName":
            suggest = "new_column_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapDataTransformRenameColumnOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapDataTransformRenameColumnOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapDataTransformRenameColumnOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 new_column_name: str):
        """
        :param str column_name: Column to be renamed.
        :param str new_column_name: New name for the column.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "new_column_name", new_column_name)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        Column to be renamed.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="newColumnName")
    def new_column_name(self) -> str:
        """
        New name for the column.
        """
        return pulumi.get(self, "new_column_name")


@pulumi.output_type
class DataSetLogicalTableMapDataTransformTagColumnOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapDataTransformTagColumnOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapDataTransformTagColumnOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapDataTransformTagColumnOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 tags: Sequence['outputs.DataSetLogicalTableMapDataTransformTagColumnOperationTag']):
        """
        :param str column_name: Column name.
        :param Sequence['DataSetLogicalTableMapDataTransformTagColumnOperationTagArgs'] tags: The dataset column tag, currently only used for geospatial type tagging. See tags.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        Column name.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.DataSetLogicalTableMapDataTransformTagColumnOperationTag']:
        """
        The dataset column tag, currently only used for geospatial type tagging. See tags.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class DataSetLogicalTableMapDataTransformTagColumnOperationTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnDescription":
            suggest = "column_description"
        elif key == "columnGeographicRole":
            suggest = "column_geographic_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapDataTransformTagColumnOperationTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapDataTransformTagColumnOperationTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapDataTransformTagColumnOperationTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_description: Optional['outputs.DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription'] = None,
                 column_geographic_role: Optional[str] = None):
        """
        :param 'DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionArgs' column_description: A description for a column. See column_description.
        :param str column_geographic_role: A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
        """
        if column_description is not None:
            pulumi.set(__self__, "column_description", column_description)
        if column_geographic_role is not None:
            pulumi.set(__self__, "column_geographic_role", column_geographic_role)

    @property
    @pulumi.getter(name="columnDescription")
    def column_description(self) -> Optional['outputs.DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription']:
        """
        A description for a column. See column_description.
        """
        return pulumi.get(self, "column_description")

    @property
    @pulumi.getter(name="columnGeographicRole")
    def column_geographic_role(self) -> Optional[str]:
        """
        A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.
        """
        return pulumi.get(self, "column_geographic_role")


@pulumi.output_type
class DataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescription(dict):
    def __init__(__self__, *,
                 text: Optional[str] = None):
        """
        :param str text: The text of a description for a column.
        """
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        """
        The text of a description for a column.
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class DataSetLogicalTableMapDataTransformUntagColumnOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "tagNames":
            suggest = "tag_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapDataTransformUntagColumnOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapDataTransformUntagColumnOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapDataTransformUntagColumnOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 tag_names: Sequence[str]):
        """
        :param str column_name: Column name.
        :param Sequence[str] tag_names: The column tags to remove from this column.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "tag_names", tag_names)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        Column name.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="tagNames")
    def tag_names(self) -> Sequence[str]:
        """
        The column tags to remove from this column.
        """
        return pulumi.get(self, "tag_names")


@pulumi.output_type
class DataSetLogicalTableMapSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetArn":
            suggest = "data_set_arn"
        elif key == "joinInstruction":
            suggest = "join_instruction"
        elif key == "physicalTableId":
            suggest = "physical_table_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_arn: Optional[str] = None,
                 join_instruction: Optional['outputs.DataSetLogicalTableMapSourceJoinInstruction'] = None,
                 physical_table_id: Optional[str] = None):
        """
        :param str data_set_arn: ARN of the parent data set.
        :param 'DataSetLogicalTableMapSourceJoinInstructionArgs' join_instruction: Specifies the result of a join of two logical tables. See join_instruction.
        :param str physical_table_id: Physical table ID.
        """
        if data_set_arn is not None:
            pulumi.set(__self__, "data_set_arn", data_set_arn)
        if join_instruction is not None:
            pulumi.set(__self__, "join_instruction", join_instruction)
        if physical_table_id is not None:
            pulumi.set(__self__, "physical_table_id", physical_table_id)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> Optional[str]:
        """
        ARN of the parent data set.
        """
        return pulumi.get(self, "data_set_arn")

    @property
    @pulumi.getter(name="joinInstruction")
    def join_instruction(self) -> Optional['outputs.DataSetLogicalTableMapSourceJoinInstruction']:
        """
        Specifies the result of a join of two logical tables. See join_instruction.
        """
        return pulumi.get(self, "join_instruction")

    @property
    @pulumi.getter(name="physicalTableId")
    def physical_table_id(self) -> Optional[str]:
        """
        Physical table ID.
        """
        return pulumi.get(self, "physical_table_id")


@pulumi.output_type
class DataSetLogicalTableMapSourceJoinInstruction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "leftOperand":
            suggest = "left_operand"
        elif key == "onClause":
            suggest = "on_clause"
        elif key == "rightOperand":
            suggest = "right_operand"
        elif key == "leftJoinKeyProperties":
            suggest = "left_join_key_properties"
        elif key == "rightJoinKeyProperties":
            suggest = "right_join_key_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapSourceJoinInstruction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapSourceJoinInstruction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapSourceJoinInstruction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 left_operand: str,
                 on_clause: str,
                 right_operand: str,
                 type: str,
                 left_join_key_properties: Optional['outputs.DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties'] = None,
                 right_join_key_properties: Optional['outputs.DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties'] = None):
        """
        :param str left_operand: Operand on the left side of a join.
        :param str on_clause: Join instructions provided in the ON clause of a join.
        :param str right_operand: Operand on the right side of a join.
        :param str type: Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
        :param 'DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesArgs' left_join_key_properties: Join key properties of the left operand. See left_join_key_properties.
        :param 'DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesArgs' right_join_key_properties: Join key properties of the right operand. See right_join_key_properties.
        """
        pulumi.set(__self__, "left_operand", left_operand)
        pulumi.set(__self__, "on_clause", on_clause)
        pulumi.set(__self__, "right_operand", right_operand)
        pulumi.set(__self__, "type", type)
        if left_join_key_properties is not None:
            pulumi.set(__self__, "left_join_key_properties", left_join_key_properties)
        if right_join_key_properties is not None:
            pulumi.set(__self__, "right_join_key_properties", right_join_key_properties)

    @property
    @pulumi.getter(name="leftOperand")
    def left_operand(self) -> str:
        """
        Operand on the left side of a join.
        """
        return pulumi.get(self, "left_operand")

    @property
    @pulumi.getter(name="onClause")
    def on_clause(self) -> str:
        """
        Join instructions provided in the ON clause of a join.
        """
        return pulumi.get(self, "on_clause")

    @property
    @pulumi.getter(name="rightOperand")
    def right_operand(self) -> str:
        """
        Operand on the right side of a join.
        """
        return pulumi.get(self, "right_operand")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="leftJoinKeyProperties")
    def left_join_key_properties(self) -> Optional['outputs.DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties']:
        """
        Join key properties of the left operand. See left_join_key_properties.
        """
        return pulumi.get(self, "left_join_key_properties")

    @property
    @pulumi.getter(name="rightJoinKeyProperties")
    def right_join_key_properties(self) -> Optional['outputs.DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties']:
        """
        Join key properties of the right operand. See right_join_key_properties.
        """
        return pulumi.get(self, "right_join_key_properties")


@pulumi.output_type
class DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uniqueKey":
            suggest = "unique_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 unique_key: Optional[bool] = None):
        """
        :param bool unique_key: A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
        """
        if unique_key is not None:
            pulumi.set(__self__, "unique_key", unique_key)

    @property
    @pulumi.getter(name="uniqueKey")
    def unique_key(self) -> Optional[bool]:
        """
        A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
        """
        return pulumi.get(self, "unique_key")


@pulumi.output_type
class DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uniqueKey":
            suggest = "unique_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetLogicalTableMapSourceJoinInstructionRightJoinKeyProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 unique_key: Optional[bool] = None):
        """
        :param bool unique_key: A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
        """
        if unique_key is not None:
            pulumi.set(__self__, "unique_key", unique_key)

    @property
    @pulumi.getter(name="uniqueKey")
    def unique_key(self) -> Optional[bool]:
        """
        A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.
        """
        return pulumi.get(self, "unique_key")


@pulumi.output_type
class DataSetOutputColumn(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: Field folder description.
        :param str name: Display name for the dataset.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Field folder description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dataset.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DataSetPermission(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 principal: str):
        """
        :param Sequence[str] actions: List of IAM actions to grant or revoke permissions on.
        :param str principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def principal(self) -> str:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")


@pulumi.output_type
class DataSetPhysicalTableMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "physicalTableMapId":
            suggest = "physical_table_map_id"
        elif key == "customSql":
            suggest = "custom_sql"
        elif key == "relationalTable":
            suggest = "relational_table"
        elif key == "s3Source":
            suggest = "s3_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetPhysicalTableMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetPhysicalTableMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetPhysicalTableMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 physical_table_map_id: str,
                 custom_sql: Optional['outputs.DataSetPhysicalTableMapCustomSql'] = None,
                 relational_table: Optional['outputs.DataSetPhysicalTableMapRelationalTable'] = None,
                 s3_source: Optional['outputs.DataSetPhysicalTableMapS3Source'] = None):
        """
        :param str physical_table_map_id: Key of the physical table map.
        :param 'DataSetPhysicalTableMapCustomSqlArgs' custom_sql: A physical table type built from the results of the custom SQL query. See custom_sql.
        :param 'DataSetPhysicalTableMapRelationalTableArgs' relational_table: A physical table type for relational data sources. See relational_table.
        :param 'DataSetPhysicalTableMapS3SourceArgs' s3_source: A physical table type for as S3 data source. See s3_source.
        """
        pulumi.set(__self__, "physical_table_map_id", physical_table_map_id)
        if custom_sql is not None:
            pulumi.set(__self__, "custom_sql", custom_sql)
        if relational_table is not None:
            pulumi.set(__self__, "relational_table", relational_table)
        if s3_source is not None:
            pulumi.set(__self__, "s3_source", s3_source)

    @property
    @pulumi.getter(name="physicalTableMapId")
    def physical_table_map_id(self) -> str:
        """
        Key of the physical table map.
        """
        return pulumi.get(self, "physical_table_map_id")

    @property
    @pulumi.getter(name="customSql")
    def custom_sql(self) -> Optional['outputs.DataSetPhysicalTableMapCustomSql']:
        """
        A physical table type built from the results of the custom SQL query. See custom_sql.
        """
        return pulumi.get(self, "custom_sql")

    @property
    @pulumi.getter(name="relationalTable")
    def relational_table(self) -> Optional['outputs.DataSetPhysicalTableMapRelationalTable']:
        """
        A physical table type for relational data sources. See relational_table.
        """
        return pulumi.get(self, "relational_table")

    @property
    @pulumi.getter(name="s3Source")
    def s3_source(self) -> Optional['outputs.DataSetPhysicalTableMapS3Source']:
        """
        A physical table type for as S3 data source. See s3_source.
        """
        return pulumi.get(self, "s3_source")


@pulumi.output_type
class DataSetPhysicalTableMapCustomSql(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceArn":
            suggest = "data_source_arn"
        elif key == "sqlQuery":
            suggest = "sql_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetPhysicalTableMapCustomSql. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetPhysicalTableMapCustomSql.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetPhysicalTableMapCustomSql.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_arn: str,
                 name: str,
                 sql_query: str,
                 columns: Optional[Sequence['outputs.DataSetPhysicalTableMapCustomSqlColumn']] = None):
        """
        :param str data_source_arn: ARN of the data source.
        :param str name: Display name for the SQL query result.
        :param str sql_query: SQL query.
        :param Sequence['DataSetPhysicalTableMapCustomSqlColumnArgs'] columns: Column schema from the SQL query result set. See columns.
        """
        pulumi.set(__self__, "data_source_arn", data_source_arn)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sql_query", sql_query)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)

    @property
    @pulumi.getter(name="dataSourceArn")
    def data_source_arn(self) -> str:
        """
        ARN of the data source.
        """
        return pulumi.get(self, "data_source_arn")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the SQL query result.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sqlQuery")
    def sql_query(self) -> str:
        """
        SQL query.
        """
        return pulumi.get(self, "sql_query")

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence['outputs.DataSetPhysicalTableMapCustomSqlColumn']]:
        """
        Column schema from the SQL query result set. See columns.
        """
        return pulumi.get(self, "columns")


@pulumi.output_type
class DataSetPhysicalTableMapCustomSqlColumn(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: Name of this column in the underlying data source.
        :param str type: Data type of the column.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this column in the underlying data source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Data type of the column.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DataSetPhysicalTableMapRelationalTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceArn":
            suggest = "data_source_arn"
        elif key == "inputColumns":
            suggest = "input_columns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetPhysicalTableMapRelationalTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetPhysicalTableMapRelationalTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetPhysicalTableMapRelationalTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_arn: str,
                 input_columns: Sequence['outputs.DataSetPhysicalTableMapRelationalTableInputColumn'],
                 name: str,
                 catalog: Optional[str] = None,
                 schema: Optional[str] = None):
        """
        :param str data_source_arn: ARN of the data source.
        :param Sequence['DataSetPhysicalTableMapRelationalTableInputColumnArgs'] input_columns: Column schema of the table. See input_columns.
        :param str name: Name of the relational table.
        :param str catalog: Catalog associated with the table.
        :param str schema: Schema name. This name applies to certain relational database engines.
        """
        pulumi.set(__self__, "data_source_arn", data_source_arn)
        pulumi.set(__self__, "input_columns", input_columns)
        pulumi.set(__self__, "name", name)
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="dataSourceArn")
    def data_source_arn(self) -> str:
        """
        ARN of the data source.
        """
        return pulumi.get(self, "data_source_arn")

    @property
    @pulumi.getter(name="inputColumns")
    def input_columns(self) -> Sequence['outputs.DataSetPhysicalTableMapRelationalTableInputColumn']:
        """
        Column schema of the table. See input_columns.
        """
        return pulumi.get(self, "input_columns")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the relational table.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def catalog(self) -> Optional[str]:
        """
        Catalog associated with the table.
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Schema name. This name applies to certain relational database engines.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class DataSetPhysicalTableMapRelationalTableInputColumn(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: Name of this column in the underlying data source.
        :param str type: Data type of the column.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this column in the underlying data source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Data type of the column.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DataSetPhysicalTableMapS3Source(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceArn":
            suggest = "data_source_arn"
        elif key == "inputColumns":
            suggest = "input_columns"
        elif key == "uploadSettings":
            suggest = "upload_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetPhysicalTableMapS3Source. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetPhysicalTableMapS3Source.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetPhysicalTableMapS3Source.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_arn: str,
                 input_columns: Sequence['outputs.DataSetPhysicalTableMapS3SourceInputColumn'],
                 upload_settings: 'outputs.DataSetPhysicalTableMapS3SourceUploadSettings'):
        """
        :param str data_source_arn: ARN of the data source.
        :param Sequence['DataSetPhysicalTableMapS3SourceInputColumnArgs'] input_columns: Column schema of the table. See input_columns.
        :param 'DataSetPhysicalTableMapS3SourceUploadSettingsArgs' upload_settings: Information about the format for the S3 source file or files. See upload_settings.
        """
        pulumi.set(__self__, "data_source_arn", data_source_arn)
        pulumi.set(__self__, "input_columns", input_columns)
        pulumi.set(__self__, "upload_settings", upload_settings)

    @property
    @pulumi.getter(name="dataSourceArn")
    def data_source_arn(self) -> str:
        """
        ARN of the data source.
        """
        return pulumi.get(self, "data_source_arn")

    @property
    @pulumi.getter(name="inputColumns")
    def input_columns(self) -> Sequence['outputs.DataSetPhysicalTableMapS3SourceInputColumn']:
        """
        Column schema of the table. See input_columns.
        """
        return pulumi.get(self, "input_columns")

    @property
    @pulumi.getter(name="uploadSettings")
    def upload_settings(self) -> 'outputs.DataSetPhysicalTableMapS3SourceUploadSettings':
        """
        Information about the format for the S3 source file or files. See upload_settings.
        """
        return pulumi.get(self, "upload_settings")


@pulumi.output_type
class DataSetPhysicalTableMapS3SourceInputColumn(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        """
        :param str name: Name of this column in the underlying data source.
        :param str type: Data type of the column.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this column in the underlying data source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Data type of the column.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DataSetPhysicalTableMapS3SourceUploadSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containsHeader":
            suggest = "contains_header"
        elif key == "startFromRow":
            suggest = "start_from_row"
        elif key == "textQualifier":
            suggest = "text_qualifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetPhysicalTableMapS3SourceUploadSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetPhysicalTableMapS3SourceUploadSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetPhysicalTableMapS3SourceUploadSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contains_header: Optional[bool] = None,
                 delimiter: Optional[str] = None,
                 format: Optional[str] = None,
                 start_from_row: Optional[int] = None,
                 text_qualifier: Optional[str] = None):
        """
        :param bool contains_header: Whether the file has a header row, or the files each have a header row.
        :param str delimiter: Delimiter between values in the file.
        :param str format: File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
        :param int start_from_row: A row number to start reading data from.
        :param str text_qualifier: Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
        """
        if contains_header is not None:
            pulumi.set(__self__, "contains_header", contains_header)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if start_from_row is not None:
            pulumi.set(__self__, "start_from_row", start_from_row)
        if text_qualifier is not None:
            pulumi.set(__self__, "text_qualifier", text_qualifier)

    @property
    @pulumi.getter(name="containsHeader")
    def contains_header(self) -> Optional[bool]:
        """
        Whether the file has a header row, or the files each have a header row.
        """
        return pulumi.get(self, "contains_header")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        """
        Delimiter between values in the file.
        """
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="startFromRow")
    def start_from_row(self) -> Optional[int]:
        """
        A row number to start reading data from.
        """
        return pulumi.get(self, "start_from_row")

    @property
    @pulumi.getter(name="textQualifier")
    def text_qualifier(self) -> Optional[str]:
        """
        Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.
        """
        return pulumi.get(self, "text_qualifier")


@pulumi.output_type
class DataSetRefreshProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refreshConfiguration":
            suggest = "refresh_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetRefreshProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetRefreshProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetRefreshProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 refresh_configuration: 'outputs.DataSetRefreshPropertiesRefreshConfiguration'):
        """
        :param 'DataSetRefreshPropertiesRefreshConfigurationArgs' refresh_configuration: The refresh configuration for the data set. See refresh_configuration.
        """
        pulumi.set(__self__, "refresh_configuration", refresh_configuration)

    @property
    @pulumi.getter(name="refreshConfiguration")
    def refresh_configuration(self) -> 'outputs.DataSetRefreshPropertiesRefreshConfiguration':
        """
        The refresh configuration for the data set. See refresh_configuration.
        """
        return pulumi.get(self, "refresh_configuration")


@pulumi.output_type
class DataSetRefreshPropertiesRefreshConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "incrementalRefresh":
            suggest = "incremental_refresh"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetRefreshPropertiesRefreshConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetRefreshPropertiesRefreshConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetRefreshPropertiesRefreshConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 incremental_refresh: 'outputs.DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh'):
        """
        :param 'DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshArgs' incremental_refresh: The incremental refresh for the data set. See incremental_refresh.
        """
        pulumi.set(__self__, "incremental_refresh", incremental_refresh)

    @property
    @pulumi.getter(name="incrementalRefresh")
    def incremental_refresh(self) -> 'outputs.DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh':
        """
        The incremental refresh for the data set. See incremental_refresh.
        """
        return pulumi.get(self, "incremental_refresh")


@pulumi.output_type
class DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lookbackWindow":
            suggest = "lookback_window"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetRefreshPropertiesRefreshConfigurationIncrementalRefresh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lookback_window: 'outputs.DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow'):
        """
        :param 'DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowArgs' lookback_window: The lookback window setup for an incremental refresh configuration. See lookback_window.
        """
        pulumi.set(__self__, "lookback_window", lookback_window)

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> 'outputs.DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow':
        """
        The lookback window setup for an incremental refresh configuration. See lookback_window.
        """
        return pulumi.get(self, "lookback_window")


@pulumi.output_type
class DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "sizeUnit":
            suggest = "size_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetRefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 size: int,
                 size_unit: str):
        """
        :param str column_name: The name of the lookback window column.
        :param int size: The lookback window column size.
        :param str size_unit: The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_unit", size_unit)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        The name of the lookback window column.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The lookback window column size.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeUnit")
    def size_unit(self) -> str:
        """
        The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.
        """
        return pulumi.get(self, "size_unit")


@pulumi.output_type
class DataSetRowLevelPermissionDataSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "permissionPolicy":
            suggest = "permission_policy"
        elif key == "formatVersion":
            suggest = "format_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetRowLevelPermissionDataSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetRowLevelPermissionDataSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetRowLevelPermissionDataSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: str,
                 permission_policy: str,
                 format_version: Optional[str] = None,
                 namespace: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str arn: ARN of the dataset that contains permissions for RLS.
        :param str permission_policy: Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
        :param str format_version: User or group rules associated with the dataset that contains permissions for RLS.
        :param str namespace: Namespace associated with the dataset that contains permissions for RLS.
        :param str status: Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "permission_policy", permission_policy)
        if format_version is not None:
            pulumi.set(__self__, "format_version", format_version)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        ARN of the dataset that contains permissions for RLS.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="permissionPolicy")
    def permission_policy(self) -> str:
        """
        Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
        """
        return pulumi.get(self, "permission_policy")

    @property
    @pulumi.getter(name="formatVersion")
    def format_version(self) -> Optional[str]:
        """
        User or group rules associated with the dataset that contains permissions for RLS.
        """
        return pulumi.get(self, "format_version")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace associated with the dataset that contains permissions for RLS.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DataSetRowLevelPermissionTagConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagRules":
            suggest = "tag_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetRowLevelPermissionTagConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetRowLevelPermissionTagConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetRowLevelPermissionTagConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_rules: Sequence['outputs.DataSetRowLevelPermissionTagConfigurationTagRule'],
                 status: Optional[str] = None):
        """
        :param Sequence['DataSetRowLevelPermissionTagConfigurationTagRuleArgs'] tag_rules: A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
        :param str status: The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
        """
        pulumi.set(__self__, "tag_rules", tag_rules)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="tagRules")
    def tag_rules(self) -> Sequence['outputs.DataSetRowLevelPermissionTagConfigurationTagRule']:
        """
        A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See tag_rules.
        """
        return pulumi.get(self, "tag_rules")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class DataSetRowLevelPermissionTagConfigurationTagRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "tagKey":
            suggest = "tag_key"
        elif key == "matchAllValue":
            suggest = "match_all_value"
        elif key == "tagMultiValueDelimiter":
            suggest = "tag_multi_value_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSetRowLevelPermissionTagConfigurationTagRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSetRowLevelPermissionTagConfigurationTagRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSetRowLevelPermissionTagConfigurationTagRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 tag_key: str,
                 match_all_value: Optional[str] = None,
                 tag_multi_value_delimiter: Optional[str] = None):
        """
        :param str column_name: Column name that a tag key is assigned to.
        :param str tag_key: Unique key for a tag.
        :param str match_all_value: A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
        :param str tag_multi_value_delimiter: A string that you want to use to delimit the values when you pass the values at run time.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "tag_key", tag_key)
        if match_all_value is not None:
            pulumi.set(__self__, "match_all_value", match_all_value)
        if tag_multi_value_delimiter is not None:
            pulumi.set(__self__, "tag_multi_value_delimiter", tag_multi_value_delimiter)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        Column name that a tag key is assigned to.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Unique key for a tag.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="matchAllValue")
    def match_all_value(self) -> Optional[str]:
        """
        A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
        """
        return pulumi.get(self, "match_all_value")

    @property
    @pulumi.getter(name="tagMultiValueDelimiter")
    def tag_multi_value_delimiter(self) -> Optional[str]:
        """
        A string that you want to use to delimit the values when you pass the values at run time.
        """
        return pulumi.get(self, "tag_multi_value_delimiter")


@pulumi.output_type
class DataSourceCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "copySourceArn":
            suggest = "copy_source_arn"
        elif key == "credentialPair":
            suggest = "credential_pair"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 copy_source_arn: Optional[str] = None,
                 credential_pair: Optional['outputs.DataSourceCredentialsCredentialPair'] = None):
        """
        :param str copy_source_arn: The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
               When the value is not null, the `credential_pair` from the data source in the ARN is used.
        :param 'DataSourceCredentialsCredentialPairArgs' credential_pair: Credential pair. See Credential Pair below for more details.
        """
        if copy_source_arn is not None:
            pulumi.set(__self__, "copy_source_arn", copy_source_arn)
        if credential_pair is not None:
            pulumi.set(__self__, "credential_pair", credential_pair)

    @property
    @pulumi.getter(name="copySourceArn")
    def copy_source_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
        When the value is not null, the `credential_pair` from the data source in the ARN is used.
        """
        return pulumi.get(self, "copy_source_arn")

    @property
    @pulumi.getter(name="credentialPair")
    def credential_pair(self) -> Optional['outputs.DataSourceCredentialsCredentialPair']:
        """
        Credential pair. See Credential Pair below for more details.
        """
        return pulumi.get(self, "credential_pair")


@pulumi.output_type
class DataSourceCredentialsCredentialPair(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: Password, maximum length of 1024 characters.
        :param str username: User name, maximum length of 64 characters.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password, maximum length of 1024 characters.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        User name, maximum length of 64 characters.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class DataSourceParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "amazonElasticsearch":
            suggest = "amazon_elasticsearch"
        elif key == "auroraPostgresql":
            suggest = "aurora_postgresql"
        elif key == "awsIotAnalytics":
            suggest = "aws_iot_analytics"
        elif key == "mariaDb":
            suggest = "maria_db"
        elif key == "serviceNow":
            suggest = "service_now"
        elif key == "sqlServer":
            suggest = "sql_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 amazon_elasticsearch: Optional['outputs.DataSourceParametersAmazonElasticsearch'] = None,
                 athena: Optional['outputs.DataSourceParametersAthena'] = None,
                 aurora: Optional['outputs.DataSourceParametersAurora'] = None,
                 aurora_postgresql: Optional['outputs.DataSourceParametersAuroraPostgresql'] = None,
                 aws_iot_analytics: Optional['outputs.DataSourceParametersAwsIotAnalytics'] = None,
                 jira: Optional['outputs.DataSourceParametersJira'] = None,
                 maria_db: Optional['outputs.DataSourceParametersMariaDb'] = None,
                 mysql: Optional['outputs.DataSourceParametersMysql'] = None,
                 oracle: Optional['outputs.DataSourceParametersOracle'] = None,
                 postgresql: Optional['outputs.DataSourceParametersPostgresql'] = None,
                 presto: Optional['outputs.DataSourceParametersPresto'] = None,
                 rds: Optional['outputs.DataSourceParametersRds'] = None,
                 redshift: Optional['outputs.DataSourceParametersRedshift'] = None,
                 s3: Optional['outputs.DataSourceParametersS3'] = None,
                 service_now: Optional['outputs.DataSourceParametersServiceNow'] = None,
                 snowflake: Optional['outputs.DataSourceParametersSnowflake'] = None,
                 spark: Optional['outputs.DataSourceParametersSpark'] = None,
                 sql_server: Optional['outputs.DataSourceParametersSqlServer'] = None,
                 teradata: Optional['outputs.DataSourceParametersTeradata'] = None,
                 twitter: Optional['outputs.DataSourceParametersTwitter'] = None):
        """
        :param 'DataSourceParametersAmazonElasticsearchArgs' amazon_elasticsearch: Parameters for connecting to Amazon Elasticsearch.
        :param 'DataSourceParametersAthenaArgs' athena: Parameters for connecting to Athena.
        :param 'DataSourceParametersAuroraArgs' aurora: Parameters for connecting to Aurora MySQL.
        :param 'DataSourceParametersAuroraPostgresqlArgs' aurora_postgresql: Parameters for connecting to Aurora Postgresql.
        :param 'DataSourceParametersAwsIotAnalyticsArgs' aws_iot_analytics: Parameters for connecting to AWS IOT Analytics.
        :param 'DataSourceParametersJiraArgs' jira: Parameters for connecting to Jira.
        :param 'DataSourceParametersMariaDbArgs' maria_db: Parameters for connecting to MariaDB.
        :param 'DataSourceParametersMysqlArgs' mysql: Parameters for connecting to MySQL.
        :param 'DataSourceParametersOracleArgs' oracle: Parameters for connecting to Oracle.
        :param 'DataSourceParametersPostgresqlArgs' postgresql: Parameters for connecting to Postgresql.
        :param 'DataSourceParametersPrestoArgs' presto: Parameters for connecting to Presto.
        :param 'DataSourceParametersRdsArgs' rds: Parameters for connecting to RDS.
        :param 'DataSourceParametersRedshiftArgs' redshift: Parameters for connecting to Redshift.
        :param 'DataSourceParametersS3Args' s3: Parameters for connecting to S3.
        :param 'DataSourceParametersServiceNowArgs' service_now: Parameters for connecting to ServiceNow.
        :param 'DataSourceParametersSnowflakeArgs' snowflake: Parameters for connecting to Snowflake.
        :param 'DataSourceParametersSparkArgs' spark: Parameters for connecting to Spark.
        :param 'DataSourceParametersSqlServerArgs' sql_server: Parameters for connecting to SQL Server.
        :param 'DataSourceParametersTeradataArgs' teradata: Parameters for connecting to Teradata.
        :param 'DataSourceParametersTwitterArgs' twitter: Parameters for connecting to Twitter.
        """
        if amazon_elasticsearch is not None:
            pulumi.set(__self__, "amazon_elasticsearch", amazon_elasticsearch)
        if athena is not None:
            pulumi.set(__self__, "athena", athena)
        if aurora is not None:
            pulumi.set(__self__, "aurora", aurora)
        if aurora_postgresql is not None:
            pulumi.set(__self__, "aurora_postgresql", aurora_postgresql)
        if aws_iot_analytics is not None:
            pulumi.set(__self__, "aws_iot_analytics", aws_iot_analytics)
        if jira is not None:
            pulumi.set(__self__, "jira", jira)
        if maria_db is not None:
            pulumi.set(__self__, "maria_db", maria_db)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if oracle is not None:
            pulumi.set(__self__, "oracle", oracle)
        if postgresql is not None:
            pulumi.set(__self__, "postgresql", postgresql)
        if presto is not None:
            pulumi.set(__self__, "presto", presto)
        if rds is not None:
            pulumi.set(__self__, "rds", rds)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if spark is not None:
            pulumi.set(__self__, "spark", spark)
        if sql_server is not None:
            pulumi.set(__self__, "sql_server", sql_server)
        if teradata is not None:
            pulumi.set(__self__, "teradata", teradata)
        if twitter is not None:
            pulumi.set(__self__, "twitter", twitter)

    @property
    @pulumi.getter(name="amazonElasticsearch")
    def amazon_elasticsearch(self) -> Optional['outputs.DataSourceParametersAmazonElasticsearch']:
        """
        Parameters for connecting to Amazon Elasticsearch.
        """
        return pulumi.get(self, "amazon_elasticsearch")

    @property
    @pulumi.getter
    def athena(self) -> Optional['outputs.DataSourceParametersAthena']:
        """
        Parameters for connecting to Athena.
        """
        return pulumi.get(self, "athena")

    @property
    @pulumi.getter
    def aurora(self) -> Optional['outputs.DataSourceParametersAurora']:
        """
        Parameters for connecting to Aurora MySQL.
        """
        return pulumi.get(self, "aurora")

    @property
    @pulumi.getter(name="auroraPostgresql")
    def aurora_postgresql(self) -> Optional['outputs.DataSourceParametersAuroraPostgresql']:
        """
        Parameters for connecting to Aurora Postgresql.
        """
        return pulumi.get(self, "aurora_postgresql")

    @property
    @pulumi.getter(name="awsIotAnalytics")
    def aws_iot_analytics(self) -> Optional['outputs.DataSourceParametersAwsIotAnalytics']:
        """
        Parameters for connecting to AWS IOT Analytics.
        """
        return pulumi.get(self, "aws_iot_analytics")

    @property
    @pulumi.getter
    def jira(self) -> Optional['outputs.DataSourceParametersJira']:
        """
        Parameters for connecting to Jira.
        """
        return pulumi.get(self, "jira")

    @property
    @pulumi.getter(name="mariaDb")
    def maria_db(self) -> Optional['outputs.DataSourceParametersMariaDb']:
        """
        Parameters for connecting to MariaDB.
        """
        return pulumi.get(self, "maria_db")

    @property
    @pulumi.getter
    def mysql(self) -> Optional['outputs.DataSourceParametersMysql']:
        """
        Parameters for connecting to MySQL.
        """
        return pulumi.get(self, "mysql")

    @property
    @pulumi.getter
    def oracle(self) -> Optional['outputs.DataSourceParametersOracle']:
        """
        Parameters for connecting to Oracle.
        """
        return pulumi.get(self, "oracle")

    @property
    @pulumi.getter
    def postgresql(self) -> Optional['outputs.DataSourceParametersPostgresql']:
        """
        Parameters for connecting to Postgresql.
        """
        return pulumi.get(self, "postgresql")

    @property
    @pulumi.getter
    def presto(self) -> Optional['outputs.DataSourceParametersPresto']:
        """
        Parameters for connecting to Presto.
        """
        return pulumi.get(self, "presto")

    @property
    @pulumi.getter
    def rds(self) -> Optional['outputs.DataSourceParametersRds']:
        """
        Parameters for connecting to RDS.
        """
        return pulumi.get(self, "rds")

    @property
    @pulumi.getter
    def redshift(self) -> Optional['outputs.DataSourceParametersRedshift']:
        """
        Parameters for connecting to Redshift.
        """
        return pulumi.get(self, "redshift")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.DataSourceParametersS3']:
        """
        Parameters for connecting to S3.
        """
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional['outputs.DataSourceParametersServiceNow']:
        """
        Parameters for connecting to ServiceNow.
        """
        return pulumi.get(self, "service_now")

    @property
    @pulumi.getter
    def snowflake(self) -> Optional['outputs.DataSourceParametersSnowflake']:
        """
        Parameters for connecting to Snowflake.
        """
        return pulumi.get(self, "snowflake")

    @property
    @pulumi.getter
    def spark(self) -> Optional['outputs.DataSourceParametersSpark']:
        """
        Parameters for connecting to Spark.
        """
        return pulumi.get(self, "spark")

    @property
    @pulumi.getter(name="sqlServer")
    def sql_server(self) -> Optional['outputs.DataSourceParametersSqlServer']:
        """
        Parameters for connecting to SQL Server.
        """
        return pulumi.get(self, "sql_server")

    @property
    @pulumi.getter
    def teradata(self) -> Optional['outputs.DataSourceParametersTeradata']:
        """
        Parameters for connecting to Teradata.
        """
        return pulumi.get(self, "teradata")

    @property
    @pulumi.getter
    def twitter(self) -> Optional['outputs.DataSourceParametersTwitter']:
        """
        Parameters for connecting to Twitter.
        """
        return pulumi.get(self, "twitter")


@pulumi.output_type
class DataSourceParametersAmazonElasticsearch(dict):
    def __init__(__self__, *,
                 domain: str):
        """
        :param str domain: The OpenSearch domain.
        """
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The OpenSearch domain.
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class DataSourceParametersAthena(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workGroup":
            suggest = "work_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceParametersAthena. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceParametersAthena.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceParametersAthena.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 work_group: Optional[str] = None):
        """
        :param str work_group: The work-group to which to connect.
        """
        if work_group is not None:
            pulumi.set(__self__, "work_group", work_group)

    @property
    @pulumi.getter(name="workGroup")
    def work_group(self) -> Optional[str]:
        """
        The work-group to which to connect.
        """
        return pulumi.get(self, "work_group")


@pulumi.output_type
class DataSourceParametersAurora(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int):
        """
        :param str database: The database to which to connect.
        :param str host: The host to which to connect.
        :param int port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersAuroraPostgresql(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int):
        """
        :param str database: The database to which to connect.
        :param str host: The host to which to connect.
        :param int port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersAwsIotAnalytics(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetName":
            suggest = "data_set_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceParametersAwsIotAnalytics. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceParametersAwsIotAnalytics.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceParametersAwsIotAnalytics.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_name: str):
        """
        :param str data_set_name: The name of the data set to which to connect.
        """
        pulumi.set(__self__, "data_set_name", data_set_name)

    @property
    @pulumi.getter(name="dataSetName")
    def data_set_name(self) -> str:
        """
        The name of the data set to which to connect.
        """
        return pulumi.get(self, "data_set_name")


@pulumi.output_type
class DataSourceParametersJira(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "siteBaseUrl":
            suggest = "site_base_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceParametersJira. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceParametersJira.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceParametersJira.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 site_base_url: str):
        """
        :param str site_base_url: The base URL of the Jira instance's site to which to connect.
        """
        pulumi.set(__self__, "site_base_url", site_base_url)

    @property
    @pulumi.getter(name="siteBaseUrl")
    def site_base_url(self) -> str:
        """
        The base URL of the Jira instance's site to which to connect.
        """
        return pulumi.get(self, "site_base_url")


@pulumi.output_type
class DataSourceParametersMariaDb(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int):
        """
        :param str database: The database to which to connect.
        :param str host: The host to which to connect.
        :param int port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersMysql(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int):
        """
        :param str database: The database to which to connect.
        :param str host: The host to which to connect.
        :param int port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersOracle(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int):
        """
        :param str database: The database to which to connect.
        :param str host: The host to which to connect.
        :param int port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersPostgresql(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int):
        """
        :param str database: The database to which to connect.
        :param str host: The host to which to connect.
        :param int port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersPresto(dict):
    def __init__(__self__, *,
                 catalog: str,
                 host: str,
                 port: int):
        """
        :param str catalog: The catalog to which to connect.
        :param str host: The host to which to connect.
        :param int port: The port to which to connect.
        """
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        """
        The catalog to which to connect.
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersRds(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceParametersRds. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceParametersRds.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceParametersRds.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 instance_id: str):
        """
        :param str database: The database to which to connect.
        :param str instance_id: The instance ID to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The instance ID to which to connect.
        """
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class DataSourceParametersRedshift(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceParametersRedshift. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceParametersRedshift.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceParametersRedshift.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 cluster_id: Optional[str] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str database: The database to which to connect.
        :param str cluster_id: The ID of the cluster to which to connect.
        :param str host: The host to which to connect.
        :param int port: The port to which to connect.
        """
        pulumi.set(__self__, "database", database)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        The ID of the cluster to which to connect.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manifestFileLocation":
            suggest = "manifest_file_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceParametersS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceParametersS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceParametersS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 manifest_file_location: 'outputs.DataSourceParametersS3ManifestFileLocation'):
        """
        :param 'DataSourceParametersS3ManifestFileLocationArgs' manifest_file_location: An object containing the S3 location of the S3 manifest file.
        """
        pulumi.set(__self__, "manifest_file_location", manifest_file_location)

    @property
    @pulumi.getter(name="manifestFileLocation")
    def manifest_file_location(self) -> 'outputs.DataSourceParametersS3ManifestFileLocation':
        """
        An object containing the S3 location of the S3 manifest file.
        """
        return pulumi.get(self, "manifest_file_location")


@pulumi.output_type
class DataSourceParametersS3ManifestFileLocation(dict):
    def __init__(__self__, *,
                 bucket: str,
                 key: str):
        """
        :param str bucket: The name of the bucket that contains the manifest file.
        :param str key: The key of the manifest file within the bucket.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the bucket that contains the manifest file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the manifest file within the bucket.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class DataSourceParametersServiceNow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "siteBaseUrl":
            suggest = "site_base_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceParametersServiceNow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceParametersServiceNow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceParametersServiceNow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 site_base_url: str):
        """
        :param str site_base_url: The base URL of the Jira instance's site to which to connect.
        """
        pulumi.set(__self__, "site_base_url", site_base_url)

    @property
    @pulumi.getter(name="siteBaseUrl")
    def site_base_url(self) -> str:
        """
        The base URL of the Jira instance's site to which to connect.
        """
        return pulumi.get(self, "site_base_url")


@pulumi.output_type
class DataSourceParametersSnowflake(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 warehouse: str):
        """
        :param str database: The database to which to connect.
        :param str host: The host to which to connect.
        :param str warehouse: The warehouse to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def warehouse(self) -> str:
        """
        The warehouse to which to connect.
        """
        return pulumi.get(self, "warehouse")


@pulumi.output_type
class DataSourceParametersSpark(dict):
    def __init__(__self__, *,
                 host: str,
                 port: int):
        """
        :param str host: The host to which to connect.
        :param int port: The warehouse to which to connect.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The warehouse to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersSqlServer(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int):
        """
        :param str database: The database to which to connect.
        :param str host: The host to which to connect.
        :param int port: The warehouse to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The warehouse to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersTeradata(dict):
    def __init__(__self__, *,
                 database: str,
                 host: str,
                 port: int):
        """
        :param str database: The database to which to connect.
        :param str host: The host to which to connect.
        :param int port: The warehouse to which to connect.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database to which to connect.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host to which to connect.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The warehouse to which to connect.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class DataSourceParametersTwitter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRows":
            suggest = "max_rows"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceParametersTwitter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceParametersTwitter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceParametersTwitter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_rows: int,
                 query: str):
        """
        :param int max_rows: The maximum number of rows to query.
        :param str query: The Twitter query to retrieve the data.
        """
        pulumi.set(__self__, "max_rows", max_rows)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="maxRows")
    def max_rows(self) -> int:
        """
        The maximum number of rows to query.
        """
        return pulumi.get(self, "max_rows")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        The Twitter query to retrieve the data.
        """
        return pulumi.get(self, "query")


@pulumi.output_type
class DataSourcePermission(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 principal: str):
        """
        :param Sequence[str] actions: Set of IAM actions to grant or revoke permissions on. Max of 16 items.
        :param str principal: The Amazon Resource Name (ARN) of the principal.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        Set of IAM actions to grant or revoke permissions on. Max of 16 items.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def principal(self) -> str:
        """
        The Amazon Resource Name (ARN) of the principal.
        """
        return pulumi.get(self, "principal")


@pulumi.output_type
class DataSourceSslProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableSsl":
            suggest = "disable_ssl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceSslProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceSslProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceSslProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_ssl: bool):
        """
        :param bool disable_ssl: A Boolean option to control whether SSL should be disabled.
        """
        pulumi.set(__self__, "disable_ssl", disable_ssl)

    @property
    @pulumi.getter(name="disableSsl")
    def disable_ssl(self) -> bool:
        """
        A Boolean option to control whether SSL should be disabled.
        """
        return pulumi.get(self, "disable_ssl")


@pulumi.output_type
class DataSourceVpcConnectionProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcConnectionArn":
            suggest = "vpc_connection_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceVpcConnectionProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceVpcConnectionProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceVpcConnectionProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_connection_arn: str):
        """
        :param str vpc_connection_arn: The Amazon Resource Name (ARN) for the VPC connection.
        """
        pulumi.set(__self__, "vpc_connection_arn", vpc_connection_arn)

    @property
    @pulumi.getter(name="vpcConnectionArn")
    def vpc_connection_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) for the VPC connection.
        """
        return pulumi.get(self, "vpc_connection_arn")


@pulumi.output_type
class DateTimeFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeFormat":
            suggest = "date_time_format"
        elif key == "nullValueFormatConfiguration":
            suggest = "null_value_format_configuration"
        elif key == "numericFormatConfiguration":
            suggest = "numeric_format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DateTimeFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DateTimeFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DateTimeFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_format: Optional[str] = None,
                 null_value_format_configuration: Optional['outputs.NullValueFormatConfiguration'] = None,
                 numeric_format_configuration: Optional['outputs.NumericFormatConfiguration'] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if null_value_format_configuration is not None:
            pulumi.set(__self__, "null_value_format_configuration", null_value_format_configuration)
        if numeric_format_configuration is not None:
            pulumi.set(__self__, "numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[str]:
        return pulumi.get(self, "date_time_format")

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional['outputs.NullValueFormatConfiguration']:
        return pulumi.get(self, "null_value_format_configuration")

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional['outputs.NumericFormatConfiguration']:
        return pulumi.get(self, "numeric_format_configuration")


@pulumi.output_type
class DateTimeParameterDeclaration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValues":
            suggest = "default_values"
        elif key == "timeGranularity":
            suggest = "time_granularity"
        elif key == "valuesWhenUnset":
            suggest = "values_when_unset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DateTimeParameterDeclaration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DateTimeParameterDeclaration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DateTimeParameterDeclaration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 default_values: Optional['outputs.DateTimeParameterDeclarationDefaultValues'] = None,
                 time_granularity: Optional[str] = None,
                 values_when_unset: Optional['outputs.DateTimeParameterDeclarationValuesWhenUnset'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if time_granularity is not None:
            pulumi.set(__self__, "time_granularity", time_granularity)
        if values_when_unset is not None:
            pulumi.set(__self__, "values_when_unset", values_when_unset)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional['outputs.DateTimeParameterDeclarationDefaultValues']:
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[str]:
        return pulumi.get(self, "time_granularity")

    @property
    @pulumi.getter(name="valuesWhenUnset")
    def values_when_unset(self) -> Optional['outputs.DateTimeParameterDeclarationValuesWhenUnset']:
        return pulumi.get(self, "values_when_unset")


@pulumi.output_type
class DateTimeParameterDeclarationDefaultValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamicValue":
            suggest = "dynamic_value"
        elif key == "rollingDate":
            suggest = "rolling_date"
        elif key == "staticValues":
            suggest = "static_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DateTimeParameterDeclarationDefaultValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DateTimeParameterDeclarationDefaultValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DateTimeParameterDeclarationDefaultValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dynamic_value: Optional['outputs.DynamicValue'] = None,
                 rolling_date: Optional['outputs.DateTimeParameterDeclarationDefaultValuesRollingDate'] = None,
                 static_values: Optional[Sequence[str]] = None):
        if dynamic_value is not None:
            pulumi.set(__self__, "dynamic_value", dynamic_value)
        if rolling_date is not None:
            pulumi.set(__self__, "rolling_date", rolling_date)
        if static_values is not None:
            pulumi.set(__self__, "static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional['outputs.DynamicValue']:
        return pulumi.get(self, "dynamic_value")

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional['outputs.DateTimeParameterDeclarationDefaultValuesRollingDate']:
        return pulumi.get(self, "rolling_date")

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "static_values")


@pulumi.output_type
class DateTimeParameterDeclarationDefaultValuesRollingDate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifier":
            suggest = "data_set_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DateTimeParameterDeclarationDefaultValuesRollingDate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DateTimeParameterDeclarationDefaultValuesRollingDate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DateTimeParameterDeclarationDefaultValuesRollingDate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 data_set_identifier: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        if data_set_identifier is not None:
            pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> Optional[str]:
        return pulumi.get(self, "data_set_identifier")


@pulumi.output_type
class DateTimeParameterDeclarationValuesWhenUnset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customValue":
            suggest = "custom_value"
        elif key == "valueWhenUnsetOption":
            suggest = "value_when_unset_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DateTimeParameterDeclarationValuesWhenUnset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DateTimeParameterDeclarationValuesWhenUnset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DateTimeParameterDeclarationValuesWhenUnset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_value: Optional[str] = None,
                 value_when_unset_option: Optional[str] = None):
        if custom_value is not None:
            pulumi.set(__self__, "custom_value", custom_value)
        if value_when_unset_option is not None:
            pulumi.set(__self__, "value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_value")

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[str]:
        return pulumi.get(self, "value_when_unset_option")


@pulumi.output_type
class DecimalParameterDeclaration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterValueType":
            suggest = "parameter_value_type"
        elif key == "defaultValues":
            suggest = "default_values"
        elif key == "valuesWhenUnset":
            suggest = "values_when_unset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DecimalParameterDeclaration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DecimalParameterDeclaration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DecimalParameterDeclaration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 parameter_value_type: str,
                 default_values: Optional['outputs.DecimalParameterDeclarationDefaultValues'] = None,
                 values_when_unset: Optional['outputs.DecimalParameterDeclarationValuesWhenUnset'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameter_value_type", parameter_value_type)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if values_when_unset is not None:
            pulumi.set(__self__, "values_when_unset", values_when_unset)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> str:
        return pulumi.get(self, "parameter_value_type")

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional['outputs.DecimalParameterDeclarationDefaultValues']:
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter(name="valuesWhenUnset")
    def values_when_unset(self) -> Optional['outputs.DecimalParameterDeclarationValuesWhenUnset']:
        return pulumi.get(self, "values_when_unset")


@pulumi.output_type
class DecimalParameterDeclarationDefaultValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamicValue":
            suggest = "dynamic_value"
        elif key == "staticValues":
            suggest = "static_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DecimalParameterDeclarationDefaultValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DecimalParameterDeclarationDefaultValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DecimalParameterDeclarationDefaultValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dynamic_value: Optional['outputs.DynamicValue'] = None,
                 static_values: Optional[Sequence[float]] = None):
        if dynamic_value is not None:
            pulumi.set(__self__, "dynamic_value", dynamic_value)
        if static_values is not None:
            pulumi.set(__self__, "static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional['outputs.DynamicValue']:
        return pulumi.get(self, "dynamic_value")

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "static_values")


@pulumi.output_type
class DecimalParameterDeclarationValuesWhenUnset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customValue":
            suggest = "custom_value"
        elif key == "valueWhenUnsetOption":
            suggest = "value_when_unset_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DecimalParameterDeclarationValuesWhenUnset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DecimalParameterDeclarationValuesWhenUnset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DecimalParameterDeclarationValuesWhenUnset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_value: Optional[float] = None,
                 value_when_unset_option: Optional[str] = None):
        if custom_value is not None:
            pulumi.set(__self__, "custom_value", custom_value)
        if value_when_unset_option is not None:
            pulumi.set(__self__, "value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[float]:
        return pulumi.get(self, "custom_value")

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[str]:
        return pulumi.get(self, "value_when_unset_option")


@pulumi.output_type
class DecimalPlacesConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "decimalPlaces":
            suggest = "decimal_places"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DecimalPlacesConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DecimalPlacesConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DecimalPlacesConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decimal_places: int):
        pulumi.set(__self__, "decimal_places", decimal_places)

    @property
    @pulumi.getter(name="decimalPlaces")
    def decimal_places(self) -> int:
        return pulumi.get(self, "decimal_places")


@pulumi.output_type
class DimensionFieldSchema2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "dataSetIdentifier":
            suggest = "data_set_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DimensionFieldSchema2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DimensionFieldSchema2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DimensionFieldSchema2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 data_set_identifier: str):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> str:
        return pulumi.get(self, "data_set_identifier")


@pulumi.output_type
class DimensionFieldSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoricalDimensionField":
            suggest = "categorical_dimension_field"
        elif key == "dateDimensionField":
            suggest = "date_dimension_field"
        elif key == "numericalDimensionField":
            suggest = "numerical_dimension_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DimensionFieldSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DimensionFieldSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DimensionFieldSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categorical_dimension_field: Optional['outputs.DimensionFieldSchemaCategoricalDimensionField'] = None,
                 date_dimension_field: Optional['outputs.DimensionFieldSchemaDateDimensionField'] = None,
                 numerical_dimension_field: Optional['outputs.DimensionFieldSchemaNumericalDimensionField'] = None):
        if categorical_dimension_field is not None:
            pulumi.set(__self__, "categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            pulumi.set(__self__, "date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            pulumi.set(__self__, "numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional['outputs.DimensionFieldSchemaCategoricalDimensionField']:
        return pulumi.get(self, "categorical_dimension_field")

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional['outputs.DimensionFieldSchemaDateDimensionField']:
        return pulumi.get(self, "date_dimension_field")

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional['outputs.DimensionFieldSchemaNumericalDimensionField']:
        return pulumi.get(self, "numerical_dimension_field")


@pulumi.output_type
class DimensionFieldSchemaCategoricalDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DimensionFieldSchemaCategoricalDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DimensionFieldSchemaCategoricalDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DimensionFieldSchemaCategoricalDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 format_configuration: Optional['outputs.StringFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class DimensionFieldSchemaDateDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "dateGranularity":
            suggest = "date_granularity"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DimensionFieldSchemaDateDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DimensionFieldSchemaDateDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DimensionFieldSchemaDateDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 date_granularity: Optional[str] = None,
                 format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if date_granularity is not None:
            pulumi.set(__self__, "date_granularity", date_granularity)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[str]:
        return pulumi.get(self, "date_granularity")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class DimensionFieldSchemaNumericalDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DimensionFieldSchemaNumericalDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DimensionFieldSchemaNumericalDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DimensionFieldSchemaNumericalDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 format_configuration: Optional['outputs.NumberFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class DrillDownFilters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryFilter":
            suggest = "category_filter"
        elif key == "numericEqualityFilter":
            suggest = "numeric_equality_filter"
        elif key == "timeRangeFilter":
            suggest = "time_range_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrillDownFilters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrillDownFilters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrillDownFilters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_filter: Optional['outputs.CategoryFilter'] = None,
                 numeric_equality_filter: Optional['outputs.NumericEqualityFilter'] = None,
                 time_range_filter: Optional['outputs.TimeRangeFilter'] = None):
        if category_filter is not None:
            pulumi.set(__self__, "category_filter", category_filter)
        if numeric_equality_filter is not None:
            pulumi.set(__self__, "numeric_equality_filter", numeric_equality_filter)
        if time_range_filter is not None:
            pulumi.set(__self__, "time_range_filter", time_range_filter)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional['outputs.CategoryFilter']:
        return pulumi.get(self, "category_filter")

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional['outputs.NumericEqualityFilter']:
        return pulumi.get(self, "numeric_equality_filter")

    @property
    @pulumi.getter(name="timeRangeFilter")
    def time_range_filter(self) -> Optional['outputs.TimeRangeFilter']:
        return pulumi.get(self, "time_range_filter")


@pulumi.output_type
class DynamicValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValueColumn":
            suggest = "default_value_column"
        elif key == "groupNameColumn":
            suggest = "group_name_column"
        elif key == "userNameColumn":
            suggest = "user_name_column"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DynamicValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DynamicValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DynamicValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value_column: 'outputs.Column',
                 group_name_column: Optional['outputs.Column'] = None,
                 user_name_column: Optional['outputs.Column'] = None):
        pulumi.set(__self__, "default_value_column", default_value_column)
        if group_name_column is not None:
            pulumi.set(__self__, "group_name_column", group_name_column)
        if user_name_column is not None:
            pulumi.set(__self__, "user_name_column", user_name_column)

    @property
    @pulumi.getter(name="defaultValueColumn")
    def default_value_column(self) -> 'outputs.Column':
        return pulumi.get(self, "default_value_column")

    @property
    @pulumi.getter(name="groupNameColumn")
    def group_name_column(self) -> Optional['outputs.Column']:
        return pulumi.get(self, "group_name_column")

    @property
    @pulumi.getter(name="userNameColumn")
    def user_name_column(self) -> Optional['outputs.Column']:
        return pulumi.get(self, "user_name_column")


@pulumi.output_type
class FieldSort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FieldSort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FieldSort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FieldSort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: str,
                 field_id: str):
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class FieldSortOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnSort":
            suggest = "column_sort"
        elif key == "fieldSort":
            suggest = "field_sort"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FieldSortOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FieldSortOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FieldSortOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_sort: Optional['outputs.ColumnSort'] = None,
                 field_sort: Optional['outputs.FieldSort'] = None):
        if column_sort is not None:
            pulumi.set(__self__, "column_sort", column_sort)
        if field_sort is not None:
            pulumi.set(__self__, "field_sort", field_sort)

    @property
    @pulumi.getter(name="columnSort")
    def column_sort(self) -> Optional['outputs.ColumnSort']:
        return pulumi.get(self, "column_sort")

    @property
    @pulumi.getter(name="fieldSort")
    def field_sort(self) -> Optional['outputs.FieldSort']:
        return pulumi.get(self, "field_sort")


@pulumi.output_type
class FilterControls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimePicker":
            suggest = "date_time_picker"
        elif key == "relativeDateTime":
            suggest = "relative_date_time"
        elif key == "textArea":
            suggest = "text_area"
        elif key == "textField":
            suggest = "text_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_picker: Optional['outputs.FilterControlsDateTimePicker'] = None,
                 dropdown: Optional['outputs.FilterControlsDropdown'] = None,
                 list: Optional['outputs.FilterControlsList'] = None,
                 relative_date_time: Optional['outputs.FilterControlsRelativeDateTime'] = None,
                 slider: Optional['outputs.FilterControlsSlider'] = None,
                 text_area: Optional['outputs.FilterControlsTextArea'] = None,
                 text_field: Optional['outputs.FilterControlsTextField'] = None):
        if date_time_picker is not None:
            pulumi.set(__self__, "date_time_picker", date_time_picker)
        if dropdown is not None:
            pulumi.set(__self__, "dropdown", dropdown)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if relative_date_time is not None:
            pulumi.set(__self__, "relative_date_time", relative_date_time)
        if slider is not None:
            pulumi.set(__self__, "slider", slider)
        if text_area is not None:
            pulumi.set(__self__, "text_area", text_area)
        if text_field is not None:
            pulumi.set(__self__, "text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional['outputs.FilterControlsDateTimePicker']:
        return pulumi.get(self, "date_time_picker")

    @property
    @pulumi.getter
    def dropdown(self) -> Optional['outputs.FilterControlsDropdown']:
        return pulumi.get(self, "dropdown")

    @property
    @pulumi.getter
    def list(self) -> Optional['outputs.FilterControlsList']:
        return pulumi.get(self, "list")

    @property
    @pulumi.getter(name="relativeDateTime")
    def relative_date_time(self) -> Optional['outputs.FilterControlsRelativeDateTime']:
        return pulumi.get(self, "relative_date_time")

    @property
    @pulumi.getter
    def slider(self) -> Optional['outputs.FilterControlsSlider']:
        return pulumi.get(self, "slider")

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional['outputs.FilterControlsTextArea']:
        return pulumi.get(self, "text_area")

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional['outputs.FilterControlsTextField']:
        return pulumi.get(self, "text_field")


@pulumi.output_type
class FilterControlsDateTimePicker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterControlId":
            suggest = "filter_control_id"
        elif key == "sourceFilterId":
            suggest = "source_filter_id"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsDateTimePicker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsDateTimePicker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsDateTimePicker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_control_id: str,
                 source_filter_id: str,
                 title: str,
                 display_options: Optional['outputs.FilterControlsDateTimePickerDisplayOptions'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> str:
        return pulumi.get(self, "filter_control_id")

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> str:
        return pulumi.get(self, "source_filter_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.FilterControlsDateTimePickerDisplayOptions']:
        return pulumi.get(self, "display_options")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class FilterControlsDateTimePickerDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeFormat":
            suggest = "date_time_format"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsDateTimePickerDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsDateTimePickerDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsDateTimePickerDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_format: Optional[str] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[str]:
        return pulumi.get(self, "date_time_format")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class FilterControlsDropdown(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterControlId":
            suggest = "filter_control_id"
        elif key == "sourceFilterId":
            suggest = "source_filter_id"
        elif key == "cascadingControlConfiguration":
            suggest = "cascading_control_configuration"
        elif key == "displayOptions":
            suggest = "display_options"
        elif key == "selectableValues":
            suggest = "selectable_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsDropdown. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsDropdown.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsDropdown.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_control_id: str,
                 source_filter_id: str,
                 title: str,
                 cascading_control_configuration: Optional['outputs.CascadingControlConfiguration'] = None,
                 display_options: Optional['outputs.FilterControlsDropdownDisplayOptions'] = None,
                 selectable_values: Optional['outputs.FilterControlsDropdownSelectableValues'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> str:
        return pulumi.get(self, "filter_control_id")

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> str:
        return pulumi.get(self, "source_filter_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional['outputs.CascadingControlConfiguration']:
        return pulumi.get(self, "cascading_control_configuration")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.FilterControlsDropdownDisplayOptions']:
        return pulumi.get(self, "display_options")

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional['outputs.FilterControlsDropdownSelectableValues']:
        return pulumi.get(self, "selectable_values")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class FilterControlsDropdownDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectAllOptions":
            suggest = "select_all_options"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsDropdownDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsDropdownDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsDropdownDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 select_all_options: Optional['outputs.SelectAllOptions'] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "select_all_options")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class FilterControlsDropdownSelectableValues(dict):
    def __init__(__self__, *,
                 values: Optional[Sequence[str]] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class FilterControlsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterControlId":
            suggest = "filter_control_id"
        elif key == "sourceFilterId":
            suggest = "source_filter_id"
        elif key == "cascadingControlConfiguration":
            suggest = "cascading_control_configuration"
        elif key == "displayOptions":
            suggest = "display_options"
        elif key == "selectableValues":
            suggest = "selectable_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_control_id: str,
                 source_filter_id: str,
                 title: str,
                 cascading_control_configuration: Optional['outputs.CascadingControlConfiguration'] = None,
                 display_options: Optional['outputs.FilterControlsListDisplayOptions'] = None,
                 selectable_values: Optional['outputs.FilterControlsListSelectableValues'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> str:
        return pulumi.get(self, "filter_control_id")

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> str:
        return pulumi.get(self, "source_filter_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional['outputs.CascadingControlConfiguration']:
        return pulumi.get(self, "cascading_control_configuration")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.FilterControlsListDisplayOptions']:
        return pulumi.get(self, "display_options")

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional['outputs.FilterControlsListSelectableValues']:
        return pulumi.get(self, "selectable_values")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class FilterControlsListDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "searchOptions":
            suggest = "search_options"
        elif key == "selectAllOptions":
            suggest = "select_all_options"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsListDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsListDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsListDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 search_options: Optional['outputs.SelectAllOptions'] = None,
                 select_all_options: Optional['outputs.SelectAllOptions'] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if search_options is not None:
            pulumi.set(__self__, "search_options", search_options)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "search_options")

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "select_all_options")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class FilterControlsListSelectableValues(dict):
    def __init__(__self__, *,
                 values: Optional[Sequence[str]] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class FilterControlsRelativeDateTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterControlId":
            suggest = "filter_control_id"
        elif key == "sourceFilterId":
            suggest = "source_filter_id"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsRelativeDateTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsRelativeDateTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsRelativeDateTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_control_id: str,
                 source_filter_id: str,
                 title: str,
                 display_options: Optional['outputs.FilterControlsRelativeDateTimeDisplayOptions'] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> str:
        return pulumi.get(self, "filter_control_id")

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> str:
        return pulumi.get(self, "source_filter_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.FilterControlsRelativeDateTimeDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class FilterControlsRelativeDateTimeDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeFormat":
            suggest = "date_time_format"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsRelativeDateTimeDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsRelativeDateTimeDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsRelativeDateTimeDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_format: Optional[str] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[str]:
        return pulumi.get(self, "date_time_format")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class FilterControlsSlider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterControlId":
            suggest = "filter_control_id"
        elif key == "maximumValue":
            suggest = "maximum_value"
        elif key == "minimumValue":
            suggest = "minimum_value"
        elif key == "sourceFilterId":
            suggest = "source_filter_id"
        elif key == "stepSize":
            suggest = "step_size"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsSlider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsSlider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsSlider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_control_id: str,
                 maximum_value: float,
                 minimum_value: float,
                 source_filter_id: str,
                 step_size: float,
                 title: str,
                 display_options: Optional['outputs.FilterControlsSliderDisplayOptions'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "maximum_value", maximum_value)
        pulumi.set(__self__, "minimum_value", minimum_value)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "step_size", step_size)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> str:
        return pulumi.get(self, "filter_control_id")

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> float:
        return pulumi.get(self, "maximum_value")

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> float:
        return pulumi.get(self, "minimum_value")

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> str:
        return pulumi.get(self, "source_filter_id")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> float:
        return pulumi.get(self, "step_size")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.FilterControlsSliderDisplayOptions']:
        return pulumi.get(self, "display_options")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class FilterControlsSliderDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsSliderDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsSliderDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsSliderDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class FilterControlsTextArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterControlId":
            suggest = "filter_control_id"
        elif key == "sourceFilterId":
            suggest = "source_filter_id"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsTextArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsTextArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsTextArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_control_id: str,
                 source_filter_id: str,
                 title: str,
                 delimiter: Optional[str] = None,
                 display_options: Optional['outputs.TextAreaControlDisplayOptions'] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> str:
        return pulumi.get(self, "filter_control_id")

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> str:
        return pulumi.get(self, "source_filter_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TextAreaControlDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class FilterControlsTextField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterControlId":
            suggest = "filter_control_id"
        elif key == "sourceFilterId":
            suggest = "source_filter_id"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterControlsTextField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterControlsTextField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterControlsTextField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_control_id: str,
                 source_filter_id: str,
                 title: str,
                 display_options: Optional['outputs.TextAreaControlDisplayOptions'] = None):
        pulumi.set(__self__, "filter_control_id", filter_control_id)
        pulumi.set(__self__, "source_filter_id", source_filter_id)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> str:
        return pulumi.get(self, "filter_control_id")

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> str:
        return pulumi.get(self, "source_filter_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TextAreaControlDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class Filters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryFilter":
            suggest = "category_filter"
        elif key == "numericEqualityFilter":
            suggest = "numeric_equality_filter"
        elif key == "numericRangeFilter":
            suggest = "numeric_range_filter"
        elif key == "relativeDatesFilter":
            suggest = "relative_dates_filter"
        elif key == "timeEqualityFilter":
            suggest = "time_equality_filter"
        elif key == "timeRangeFilter":
            suggest = "time_range_filter"
        elif key == "topBottomFilter":
            suggest = "top_bottom_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Filters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Filters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Filters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_filter: Optional['outputs.FiltersCategoryFilter'] = None,
                 numeric_equality_filter: Optional['outputs.FiltersNumericEqualityFilter'] = None,
                 numeric_range_filter: Optional['outputs.FiltersNumericRangeFilter'] = None,
                 relative_dates_filter: Optional['outputs.FiltersRelativeDatesFilter'] = None,
                 time_equality_filter: Optional['outputs.FiltersTimeEqualityFilter'] = None,
                 time_range_filter: Optional['outputs.FiltersTimeRangeFilter'] = None,
                 top_bottom_filter: Optional['outputs.FiltersTopBottomFilter'] = None):
        if category_filter is not None:
            pulumi.set(__self__, "category_filter", category_filter)
        if numeric_equality_filter is not None:
            pulumi.set(__self__, "numeric_equality_filter", numeric_equality_filter)
        if numeric_range_filter is not None:
            pulumi.set(__self__, "numeric_range_filter", numeric_range_filter)
        if relative_dates_filter is not None:
            pulumi.set(__self__, "relative_dates_filter", relative_dates_filter)
        if time_equality_filter is not None:
            pulumi.set(__self__, "time_equality_filter", time_equality_filter)
        if time_range_filter is not None:
            pulumi.set(__self__, "time_range_filter", time_range_filter)
        if top_bottom_filter is not None:
            pulumi.set(__self__, "top_bottom_filter", top_bottom_filter)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional['outputs.FiltersCategoryFilter']:
        return pulumi.get(self, "category_filter")

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional['outputs.FiltersNumericEqualityFilter']:
        return pulumi.get(self, "numeric_equality_filter")

    @property
    @pulumi.getter(name="numericRangeFilter")
    def numeric_range_filter(self) -> Optional['outputs.FiltersNumericRangeFilter']:
        return pulumi.get(self, "numeric_range_filter")

    @property
    @pulumi.getter(name="relativeDatesFilter")
    def relative_dates_filter(self) -> Optional['outputs.FiltersRelativeDatesFilter']:
        return pulumi.get(self, "relative_dates_filter")

    @property
    @pulumi.getter(name="timeEqualityFilter")
    def time_equality_filter(self) -> Optional['outputs.FiltersTimeEqualityFilter']:
        return pulumi.get(self, "time_equality_filter")

    @property
    @pulumi.getter(name="timeRangeFilter")
    def time_range_filter(self) -> Optional['outputs.FiltersTimeRangeFilter']:
        return pulumi.get(self, "time_range_filter")

    @property
    @pulumi.getter(name="topBottomFilter")
    def top_bottom_filter(self) -> Optional['outputs.FiltersTopBottomFilter']:
        return pulumi.get(self, "top_bottom_filter")


@pulumi.output_type
class FiltersCategoryFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterId":
            suggest = "filter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersCategoryFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersCategoryFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersCategoryFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 configuration: 'outputs.FiltersCategoryFilterConfiguration',
                 filter_id: str):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "filter_id", filter_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def configuration(self) -> 'outputs.FiltersCategoryFilterConfiguration':
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> str:
        return pulumi.get(self, "filter_id")


@pulumi.output_type
class FiltersCategoryFilterConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customFilterConfiguration":
            suggest = "custom_filter_configuration"
        elif key == "customFilterListConfiguration":
            suggest = "custom_filter_list_configuration"
        elif key == "filterListConfiguration":
            suggest = "filter_list_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersCategoryFilterConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersCategoryFilterConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersCategoryFilterConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_filter_configuration: Optional['outputs.FiltersCategoryFilterConfigurationCustomFilterConfiguration'] = None,
                 custom_filter_list_configuration: Optional['outputs.FiltersCategoryFilterConfigurationCustomFilterListConfiguration'] = None,
                 filter_list_configuration: Optional['outputs.FiltersCategoryFilterConfigurationFilterListConfiguration'] = None):
        if custom_filter_configuration is not None:
            pulumi.set(__self__, "custom_filter_configuration", custom_filter_configuration)
        if custom_filter_list_configuration is not None:
            pulumi.set(__self__, "custom_filter_list_configuration", custom_filter_list_configuration)
        if filter_list_configuration is not None:
            pulumi.set(__self__, "filter_list_configuration", filter_list_configuration)

    @property
    @pulumi.getter(name="customFilterConfiguration")
    def custom_filter_configuration(self) -> Optional['outputs.FiltersCategoryFilterConfigurationCustomFilterConfiguration']:
        return pulumi.get(self, "custom_filter_configuration")

    @property
    @pulumi.getter(name="customFilterListConfiguration")
    def custom_filter_list_configuration(self) -> Optional['outputs.FiltersCategoryFilterConfigurationCustomFilterListConfiguration']:
        return pulumi.get(self, "custom_filter_list_configuration")

    @property
    @pulumi.getter(name="filterListConfiguration")
    def filter_list_configuration(self) -> Optional['outputs.FiltersCategoryFilterConfigurationFilterListConfiguration']:
        return pulumi.get(self, "filter_list_configuration")


@pulumi.output_type
class FiltersCategoryFilterConfigurationCustomFilterConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchOperator":
            suggest = "match_operator"
        elif key == "nullOption":
            suggest = "null_option"
        elif key == "categoryValue":
            suggest = "category_value"
        elif key == "parameterName":
            suggest = "parameter_name"
        elif key == "selectAllOptions":
            suggest = "select_all_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersCategoryFilterConfigurationCustomFilterConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersCategoryFilterConfigurationCustomFilterConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersCategoryFilterConfigurationCustomFilterConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_operator: str,
                 null_option: str,
                 category_value: Optional[str] = None,
                 parameter_name: Optional[str] = None,
                 select_all_options: Optional[str] = None):
        pulumi.set(__self__, "match_operator", match_operator)
        pulumi.set(__self__, "null_option", null_option)
        if category_value is not None:
            pulumi.set(__self__, "category_value", category_value)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> str:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> str:
        return pulumi.get(self, "null_option")

    @property
    @pulumi.getter(name="categoryValue")
    def category_value(self) -> Optional[str]:
        return pulumi.get(self, "category_value")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[str]:
        return pulumi.get(self, "select_all_options")


@pulumi.output_type
class FiltersCategoryFilterConfigurationCustomFilterListConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchOperator":
            suggest = "match_operator"
        elif key == "nullOption":
            suggest = "null_option"
        elif key == "categoryValues":
            suggest = "category_values"
        elif key == "selectAllOptions":
            suggest = "select_all_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersCategoryFilterConfigurationCustomFilterListConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersCategoryFilterConfigurationCustomFilterListConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersCategoryFilterConfigurationCustomFilterListConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_operator: str,
                 null_option: str,
                 category_values: Optional[Sequence[str]] = None,
                 select_all_options: Optional[str] = None):
        pulumi.set(__self__, "match_operator", match_operator)
        pulumi.set(__self__, "null_option", null_option)
        if category_values is not None:
            pulumi.set(__self__, "category_values", category_values)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> str:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> str:
        return pulumi.get(self, "null_option")

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "category_values")

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[str]:
        return pulumi.get(self, "select_all_options")


@pulumi.output_type
class FiltersCategoryFilterConfigurationFilterListConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchOperator":
            suggest = "match_operator"
        elif key == "categoryValues":
            suggest = "category_values"
        elif key == "selectAllOptions":
            suggest = "select_all_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersCategoryFilterConfigurationFilterListConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersCategoryFilterConfigurationFilterListConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersCategoryFilterConfigurationFilterListConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_operator: str,
                 category_values: Optional[Sequence[str]] = None,
                 select_all_options: Optional[str] = None):
        pulumi.set(__self__, "match_operator", match_operator)
        if category_values is not None:
            pulumi.set(__self__, "category_values", category_values)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> str:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "category_values")

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[str]:
        return pulumi.get(self, "select_all_options")


@pulumi.output_type
class FiltersNumericEqualityFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterId":
            suggest = "filter_id"
        elif key == "matchOperator":
            suggest = "match_operator"
        elif key == "nullOption":
            suggest = "null_option"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "parameterName":
            suggest = "parameter_name"
        elif key == "selectAllOptions":
            suggest = "select_all_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersNumericEqualityFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersNumericEqualityFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersNumericEqualityFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 filter_id: str,
                 match_operator: str,
                 null_option: str,
                 aggregation_function: Optional['outputs.AggregationFunction'] = None,
                 parameter_name: Optional[str] = None,
                 select_all_options: Optional[str] = None,
                 value: Optional[float] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "match_operator", match_operator)
        pulumi.set(__self__, "null_option", null_option)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> str:
        return pulumi.get(self, "filter_id")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> str:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> str:
        return pulumi.get(self, "null_option")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional['outputs.AggregationFunction']:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[str]:
        return pulumi.get(self, "select_all_options")

    @property
    @pulumi.getter
    def value(self) -> Optional[float]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FiltersNumericRangeFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterId":
            suggest = "filter_id"
        elif key == "nullOption":
            suggest = "null_option"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "includeMaximum":
            suggest = "include_maximum"
        elif key == "includeMinimum":
            suggest = "include_minimum"
        elif key == "rangeMaximum":
            suggest = "range_maximum"
        elif key == "rangeMinimum":
            suggest = "range_minimum"
        elif key == "selectAllOptions":
            suggest = "select_all_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersNumericRangeFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersNumericRangeFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersNumericRangeFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 filter_id: str,
                 null_option: str,
                 aggregation_function: Optional['outputs.AggregationFunction'] = None,
                 include_maximum: Optional[bool] = None,
                 include_minimum: Optional[bool] = None,
                 range_maximum: Optional['outputs.FiltersNumericRangeFilterRangeMaximum'] = None,
                 range_minimum: Optional['outputs.FiltersNumericRangeFilterRangeMinimum'] = None,
                 select_all_options: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "null_option", null_option)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if include_maximum is not None:
            pulumi.set(__self__, "include_maximum", include_maximum)
        if include_minimum is not None:
            pulumi.set(__self__, "include_minimum", include_minimum)
        if range_maximum is not None:
            pulumi.set(__self__, "range_maximum", range_maximum)
        if range_minimum is not None:
            pulumi.set(__self__, "range_minimum", range_minimum)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> str:
        return pulumi.get(self, "filter_id")

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> str:
        return pulumi.get(self, "null_option")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional['outputs.AggregationFunction']:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="includeMaximum")
    def include_maximum(self) -> Optional[bool]:
        return pulumi.get(self, "include_maximum")

    @property
    @pulumi.getter(name="includeMinimum")
    def include_minimum(self) -> Optional[bool]:
        return pulumi.get(self, "include_minimum")

    @property
    @pulumi.getter(name="rangeMaximum")
    def range_maximum(self) -> Optional['outputs.FiltersNumericRangeFilterRangeMaximum']:
        return pulumi.get(self, "range_maximum")

    @property
    @pulumi.getter(name="rangeMinimum")
    def range_minimum(self) -> Optional['outputs.FiltersNumericRangeFilterRangeMinimum']:
        return pulumi.get(self, "range_minimum")

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[str]:
        return pulumi.get(self, "select_all_options")


@pulumi.output_type
class FiltersNumericRangeFilterRangeMaximum(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "staticValue":
            suggest = "static_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersNumericRangeFilterRangeMaximum. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersNumericRangeFilterRangeMaximum.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersNumericRangeFilterRangeMaximum.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter: Optional[str] = None,
                 static_value: Optional[float] = None):
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if static_value is not None:
            pulumi.set(__self__, "static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[str]:
        return pulumi.get(self, "parameter")

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[float]:
        return pulumi.get(self, "static_value")


@pulumi.output_type
class FiltersNumericRangeFilterRangeMinimum(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "staticValue":
            suggest = "static_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersNumericRangeFilterRangeMinimum. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersNumericRangeFilterRangeMinimum.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersNumericRangeFilterRangeMinimum.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter: Optional[str] = None,
                 static_value: Optional[float] = None):
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if static_value is not None:
            pulumi.set(__self__, "static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[str]:
        return pulumi.get(self, "parameter")

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[float]:
        return pulumi.get(self, "static_value")


@pulumi.output_type
class FiltersRelativeDatesFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anchorDateConfiguration":
            suggest = "anchor_date_configuration"
        elif key == "filterId":
            suggest = "filter_id"
        elif key == "minimumGranularity":
            suggest = "minimum_granularity"
        elif key == "nullOption":
            suggest = "null_option"
        elif key == "relativeDateType":
            suggest = "relative_date_type"
        elif key == "timeGranularity":
            suggest = "time_granularity"
        elif key == "excludePeriodConfiguration":
            suggest = "exclude_period_configuration"
        elif key == "parameterName":
            suggest = "parameter_name"
        elif key == "relativeDateValue":
            suggest = "relative_date_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersRelativeDatesFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersRelativeDatesFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersRelativeDatesFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 anchor_date_configuration: 'outputs.FiltersRelativeDatesFilterAnchorDateConfiguration',
                 column: 'outputs.Column',
                 filter_id: str,
                 minimum_granularity: str,
                 null_option: str,
                 relative_date_type: str,
                 time_granularity: str,
                 exclude_period_configuration: Optional['outputs.FiltersRelativeDatesFilterExcludePeriodConfiguration'] = None,
                 parameter_name: Optional[str] = None,
                 relative_date_value: Optional[int] = None):
        pulumi.set(__self__, "anchor_date_configuration", anchor_date_configuration)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "minimum_granularity", minimum_granularity)
        pulumi.set(__self__, "null_option", null_option)
        pulumi.set(__self__, "relative_date_type", relative_date_type)
        pulumi.set(__self__, "time_granularity", time_granularity)
        if exclude_period_configuration is not None:
            pulumi.set(__self__, "exclude_period_configuration", exclude_period_configuration)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if relative_date_value is not None:
            pulumi.set(__self__, "relative_date_value", relative_date_value)

    @property
    @pulumi.getter(name="anchorDateConfiguration")
    def anchor_date_configuration(self) -> 'outputs.FiltersRelativeDatesFilterAnchorDateConfiguration':
        return pulumi.get(self, "anchor_date_configuration")

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> str:
        return pulumi.get(self, "filter_id")

    @property
    @pulumi.getter(name="minimumGranularity")
    def minimum_granularity(self) -> str:
        return pulumi.get(self, "minimum_granularity")

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> str:
        return pulumi.get(self, "null_option")

    @property
    @pulumi.getter(name="relativeDateType")
    def relative_date_type(self) -> str:
        return pulumi.get(self, "relative_date_type")

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> str:
        return pulumi.get(self, "time_granularity")

    @property
    @pulumi.getter(name="excludePeriodConfiguration")
    def exclude_period_configuration(self) -> Optional['outputs.FiltersRelativeDatesFilterExcludePeriodConfiguration']:
        return pulumi.get(self, "exclude_period_configuration")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="relativeDateValue")
    def relative_date_value(self) -> Optional[int]:
        return pulumi.get(self, "relative_date_value")


@pulumi.output_type
class FiltersRelativeDatesFilterAnchorDateConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anchorOption":
            suggest = "anchor_option"
        elif key == "parameterName":
            suggest = "parameter_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersRelativeDatesFilterAnchorDateConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersRelativeDatesFilterAnchorDateConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersRelativeDatesFilterAnchorDateConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 anchor_option: Optional[str] = None,
                 parameter_name: Optional[str] = None):
        if anchor_option is not None:
            pulumi.set(__self__, "anchor_option", anchor_option)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)

    @property
    @pulumi.getter(name="anchorOption")
    def anchor_option(self) -> Optional[str]:
        return pulumi.get(self, "anchor_option")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")


@pulumi.output_type
class FiltersRelativeDatesFilterExcludePeriodConfiguration(dict):
    def __init__(__self__, *,
                 amount: int,
                 granularity: str,
                 status: Optional[str] = None):
        """
        :param str status: The dashboard creation status.
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "granularity", granularity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def amount(self) -> int:
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter
    def granularity(self) -> str:
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class FiltersTimeEqualityFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterId":
            suggest = "filter_id"
        elif key == "timeGranularity":
            suggest = "time_granularity"
        elif key == "parameterName":
            suggest = "parameter_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersTimeEqualityFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersTimeEqualityFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersTimeEqualityFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 filter_id: str,
                 time_granularity: str,
                 parameter_name: Optional[str] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "time_granularity", time_granularity)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> str:
        return pulumi.get(self, "filter_id")

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> str:
        return pulumi.get(self, "time_granularity")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FiltersTimeRangeFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterId":
            suggest = "filter_id"
        elif key == "nullOption":
            suggest = "null_option"
        elif key == "timeGranularity":
            suggest = "time_granularity"
        elif key == "excludePeriodConfiguration":
            suggest = "exclude_period_configuration"
        elif key == "includeMaximum":
            suggest = "include_maximum"
        elif key == "includeMinimum":
            suggest = "include_minimum"
        elif key == "rangeMaximumValue":
            suggest = "range_maximum_value"
        elif key == "rangeMinimumValue":
            suggest = "range_minimum_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersTimeRangeFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersTimeRangeFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersTimeRangeFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 filter_id: str,
                 null_option: str,
                 time_granularity: str,
                 exclude_period_configuration: Optional['outputs.FiltersTimeRangeFilterExcludePeriodConfiguration'] = None,
                 include_maximum: Optional[bool] = None,
                 include_minimum: Optional[bool] = None,
                 range_maximum_value: Optional['outputs.FiltersTimeRangeFilterRangeMaximumValue'] = None,
                 range_minimum_value: Optional['outputs.FiltersTimeRangeFilterRangeMinimumValue'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "null_option", null_option)
        pulumi.set(__self__, "time_granularity", time_granularity)
        if exclude_period_configuration is not None:
            pulumi.set(__self__, "exclude_period_configuration", exclude_period_configuration)
        if include_maximum is not None:
            pulumi.set(__self__, "include_maximum", include_maximum)
        if include_minimum is not None:
            pulumi.set(__self__, "include_minimum", include_minimum)
        if range_maximum_value is not None:
            pulumi.set(__self__, "range_maximum_value", range_maximum_value)
        if range_minimum_value is not None:
            pulumi.set(__self__, "range_minimum_value", range_minimum_value)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> str:
        return pulumi.get(self, "filter_id")

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> str:
        return pulumi.get(self, "null_option")

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> str:
        return pulumi.get(self, "time_granularity")

    @property
    @pulumi.getter(name="excludePeriodConfiguration")
    def exclude_period_configuration(self) -> Optional['outputs.FiltersTimeRangeFilterExcludePeriodConfiguration']:
        return pulumi.get(self, "exclude_period_configuration")

    @property
    @pulumi.getter(name="includeMaximum")
    def include_maximum(self) -> Optional[bool]:
        return pulumi.get(self, "include_maximum")

    @property
    @pulumi.getter(name="includeMinimum")
    def include_minimum(self) -> Optional[bool]:
        return pulumi.get(self, "include_minimum")

    @property
    @pulumi.getter(name="rangeMaximumValue")
    def range_maximum_value(self) -> Optional['outputs.FiltersTimeRangeFilterRangeMaximumValue']:
        return pulumi.get(self, "range_maximum_value")

    @property
    @pulumi.getter(name="rangeMinimumValue")
    def range_minimum_value(self) -> Optional['outputs.FiltersTimeRangeFilterRangeMinimumValue']:
        return pulumi.get(self, "range_minimum_value")


@pulumi.output_type
class FiltersTimeRangeFilterExcludePeriodConfiguration(dict):
    def __init__(__self__, *,
                 amount: int,
                 granularity: str,
                 status: Optional[str] = None):
        """
        :param str status: The dashboard creation status.
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "granularity", granularity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def amount(self) -> int:
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter
    def granularity(self) -> str:
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class FiltersTimeRangeFilterRangeMaximumValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rollingDate":
            suggest = "rolling_date"
        elif key == "staticValue":
            suggest = "static_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersTimeRangeFilterRangeMaximumValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersTimeRangeFilterRangeMaximumValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersTimeRangeFilterRangeMaximumValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter: Optional[str] = None,
                 rolling_date: Optional['outputs.FiltersTimeRangeFilterRangeMaximumValueRollingDate'] = None,
                 static_value: Optional[str] = None):
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if rolling_date is not None:
            pulumi.set(__self__, "rolling_date", rolling_date)
        if static_value is not None:
            pulumi.set(__self__, "static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[str]:
        return pulumi.get(self, "parameter")

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional['outputs.FiltersTimeRangeFilterRangeMaximumValueRollingDate']:
        return pulumi.get(self, "rolling_date")

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[str]:
        return pulumi.get(self, "static_value")


@pulumi.output_type
class FiltersTimeRangeFilterRangeMaximumValueRollingDate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifier":
            suggest = "data_set_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersTimeRangeFilterRangeMaximumValueRollingDate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersTimeRangeFilterRangeMaximumValueRollingDate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersTimeRangeFilterRangeMaximumValueRollingDate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 data_set_identifier: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        if data_set_identifier is not None:
            pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> Optional[str]:
        return pulumi.get(self, "data_set_identifier")


@pulumi.output_type
class FiltersTimeRangeFilterRangeMinimumValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rollingDate":
            suggest = "rolling_date"
        elif key == "staticValue":
            suggest = "static_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersTimeRangeFilterRangeMinimumValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersTimeRangeFilterRangeMinimumValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersTimeRangeFilterRangeMinimumValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter: Optional[str] = None,
                 rolling_date: Optional['outputs.FiltersTimeRangeFilterRangeMinimumValueRollingDate'] = None,
                 static_value: Optional[str] = None):
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if rolling_date is not None:
            pulumi.set(__self__, "rolling_date", rolling_date)
        if static_value is not None:
            pulumi.set(__self__, "static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[str]:
        return pulumi.get(self, "parameter")

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional['outputs.FiltersTimeRangeFilterRangeMinimumValueRollingDate']:
        return pulumi.get(self, "rolling_date")

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[str]:
        return pulumi.get(self, "static_value")


@pulumi.output_type
class FiltersTimeRangeFilterRangeMinimumValueRollingDate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifier":
            suggest = "data_set_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersTimeRangeFilterRangeMinimumValueRollingDate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersTimeRangeFilterRangeMinimumValueRollingDate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersTimeRangeFilterRangeMinimumValueRollingDate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 data_set_identifier: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        if data_set_identifier is not None:
            pulumi.set(__self__, "data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> Optional[str]:
        return pulumi.get(self, "data_set_identifier")


@pulumi.output_type
class FiltersTopBottomFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregationSortConfigurations":
            suggest = "aggregation_sort_configurations"
        elif key == "filterId":
            suggest = "filter_id"
        elif key == "timeGranularity":
            suggest = "time_granularity"
        elif key == "parameterName":
            suggest = "parameter_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersTopBottomFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersTopBottomFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersTopBottomFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation_sort_configurations: Sequence['outputs.FiltersTopBottomFilterAggregationSortConfiguration'],
                 column: 'outputs.Column',
                 filter_id: str,
                 time_granularity: str,
                 limit: Optional[int] = None,
                 parameter_name: Optional[str] = None):
        pulumi.set(__self__, "aggregation_sort_configurations", aggregation_sort_configurations)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "time_granularity", time_granularity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)

    @property
    @pulumi.getter(name="aggregationSortConfigurations")
    def aggregation_sort_configurations(self) -> Sequence['outputs.FiltersTopBottomFilterAggregationSortConfiguration']:
        return pulumi.get(self, "aggregation_sort_configurations")

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> str:
        return pulumi.get(self, "filter_id")

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> str:
        return pulumi.get(self, "time_granularity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")


@pulumi.output_type
class FiltersTopBottomFilterAggregationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "sortDirection":
            suggest = "sort_direction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FiltersTopBottomFilterAggregationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FiltersTopBottomFilterAggregationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FiltersTopBottomFilterAggregationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation_function: 'outputs.AggregationFunction',
                 column: 'outputs.Column',
                 sort_direction: str):
        pulumi.set(__self__, "aggregation_function", aggregation_function)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "sort_direction", sort_direction)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> 'outputs.AggregationFunction':
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="sortDirection")
    def sort_direction(self) -> str:
        return pulumi.get(self, "sort_direction")


@pulumi.output_type
class FolderPermission(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 principal: str):
        """
        :param Sequence[str] actions: List of IAM actions to grant or revoke permissions on.
        :param str principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def principal(self) -> str:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")


@pulumi.output_type
class FontConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontColor":
            suggest = "font_color"
        elif key == "fontDecoration":
            suggest = "font_decoration"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontStyle":
            suggest = "font_style"
        elif key == "fontWeight":
            suggest = "font_weight"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FontConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FontConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FontConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_color: Optional[str] = None,
                 font_decoration: Optional[str] = None,
                 font_size: Optional['outputs.FontConfigurationFontSize'] = None,
                 font_style: Optional[str] = None,
                 font_weight: Optional['outputs.FontConfigurationFontWeight'] = None):
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_decoration is not None:
            pulumi.set(__self__, "font_decoration", font_decoration)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_style is not None:
            pulumi.set(__self__, "font_style", font_style)
        if font_weight is not None:
            pulumi.set(__self__, "font_weight", font_weight)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[str]:
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontDecoration")
    def font_decoration(self) -> Optional[str]:
        return pulumi.get(self, "font_decoration")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional['outputs.FontConfigurationFontSize']:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontStyle")
    def font_style(self) -> Optional[str]:
        return pulumi.get(self, "font_style")

    @property
    @pulumi.getter(name="fontWeight")
    def font_weight(self) -> Optional['outputs.FontConfigurationFontWeight']:
        return pulumi.get(self, "font_weight")


@pulumi.output_type
class FontConfigurationFontSize(dict):
    def __init__(__self__, *,
                 relative: Optional[str] = None):
        if relative is not None:
            pulumi.set(__self__, "relative", relative)

    @property
    @pulumi.getter
    def relative(self) -> Optional[str]:
        return pulumi.get(self, "relative")


@pulumi.output_type
class FontConfigurationFontWeight(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Display name for the dashboard.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FreeFormLayoutElements(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elementId":
            suggest = "element_id"
        elif key == "elementType":
            suggest = "element_type"
        elif key == "xAxisLocation":
            suggest = "x_axis_location"
        elif key == "yAxisLocation":
            suggest = "y_axis_location"
        elif key == "backgroundStyle":
            suggest = "background_style"
        elif key == "borderStyle":
            suggest = "border_style"
        elif key == "loadingAnimation":
            suggest = "loading_animation"
        elif key == "renderingRules":
            suggest = "rendering_rules"
        elif key == "selectedBorderStyle":
            suggest = "selected_border_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FreeFormLayoutElements. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FreeFormLayoutElements.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FreeFormLayoutElements.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 element_id: str,
                 element_type: str,
                 height: str,
                 width: str,
                 x_axis_location: str,
                 y_axis_location: str,
                 background_style: Optional['outputs.FreeFormLayoutElementsBackgroundStyle'] = None,
                 border_style: Optional['outputs.FreeFormLayoutElementsBorderStyle'] = None,
                 loading_animation: Optional['outputs.SelectAllOptions'] = None,
                 rendering_rules: Optional[Sequence['outputs.FreeFormLayoutElementsRenderingRule']] = None,
                 selected_border_style: Optional['outputs.FreeFormLayoutElementsSelectedBorderStyle'] = None,
                 visibility: Optional[str] = None):
        pulumi.set(__self__, "element_id", element_id)
        pulumi.set(__self__, "element_type", element_type)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x_axis_location", x_axis_location)
        pulumi.set(__self__, "y_axis_location", y_axis_location)
        if background_style is not None:
            pulumi.set(__self__, "background_style", background_style)
        if border_style is not None:
            pulumi.set(__self__, "border_style", border_style)
        if loading_animation is not None:
            pulumi.set(__self__, "loading_animation", loading_animation)
        if rendering_rules is not None:
            pulumi.set(__self__, "rendering_rules", rendering_rules)
        if selected_border_style is not None:
            pulumi.set(__self__, "selected_border_style", selected_border_style)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="elementId")
    def element_id(self) -> str:
        return pulumi.get(self, "element_id")

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> str:
        return pulumi.get(self, "element_type")

    @property
    @pulumi.getter
    def height(self) -> str:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> str:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xAxisLocation")
    def x_axis_location(self) -> str:
        return pulumi.get(self, "x_axis_location")

    @property
    @pulumi.getter(name="yAxisLocation")
    def y_axis_location(self) -> str:
        return pulumi.get(self, "y_axis_location")

    @property
    @pulumi.getter(name="backgroundStyle")
    def background_style(self) -> Optional['outputs.FreeFormLayoutElementsBackgroundStyle']:
        return pulumi.get(self, "background_style")

    @property
    @pulumi.getter(name="borderStyle")
    def border_style(self) -> Optional['outputs.FreeFormLayoutElementsBorderStyle']:
        return pulumi.get(self, "border_style")

    @property
    @pulumi.getter(name="loadingAnimation")
    def loading_animation(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "loading_animation")

    @property
    @pulumi.getter(name="renderingRules")
    def rendering_rules(self) -> Optional[Sequence['outputs.FreeFormLayoutElementsRenderingRule']]:
        return pulumi.get(self, "rendering_rules")

    @property
    @pulumi.getter(name="selectedBorderStyle")
    def selected_border_style(self) -> Optional['outputs.FreeFormLayoutElementsSelectedBorderStyle']:
        return pulumi.get(self, "selected_border_style")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class FreeFormLayoutElementsBackgroundStyle(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 visibility: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class FreeFormLayoutElementsBorderStyle(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 visibility: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class FreeFormLayoutElementsRenderingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationOverrides":
            suggest = "configuration_overrides"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FreeFormLayoutElementsRenderingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FreeFormLayoutElementsRenderingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FreeFormLayoutElementsRenderingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_overrides: 'outputs.SelectAllOptions',
                 expression: str):
        pulumi.set(__self__, "configuration_overrides", configuration_overrides)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="configurationOverrides")
    def configuration_overrides(self) -> 'outputs.SelectAllOptions':
        return pulumi.get(self, "configuration_overrides")

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")


@pulumi.output_type
class FreeFormLayoutElementsSelectedBorderStyle(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 visibility: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class GridLayout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GridLayout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GridLayout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GridLayout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 elements: Sequence['outputs.GridLayoutElement'],
                 canvas_size_options: Optional['outputs.GridLayoutCanvasSizeOptions'] = None):
        pulumi.set(__self__, "elements", elements)
        if canvas_size_options is not None:
            pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter
    def elements(self) -> Sequence['outputs.GridLayoutElement']:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional['outputs.GridLayoutCanvasSizeOptions']:
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class GridLayoutCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "screenCanvasSizeOptions":
            suggest = "screen_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GridLayoutCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GridLayoutCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GridLayoutCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 screen_canvas_size_options: Optional['outputs.GridLayoutCanvasSizeOptionsScreenCanvasSizeOptions'] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional['outputs.GridLayoutCanvasSizeOptionsScreenCanvasSizeOptions']:
        return pulumi.get(self, "screen_canvas_size_options")


@pulumi.output_type
class GridLayoutCanvasSizeOptionsScreenCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resizeOption":
            suggest = "resize_option"
        elif key == "optimizedViewPortWidth":
            suggest = "optimized_view_port_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GridLayoutCanvasSizeOptionsScreenCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GridLayoutCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GridLayoutCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resize_option: str,
                 optimized_view_port_width: Optional[str] = None):
        pulumi.set(__self__, "resize_option", resize_option)
        if optimized_view_port_width is not None:
            pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> str:
        return pulumi.get(self, "resize_option")

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[str]:
        return pulumi.get(self, "optimized_view_port_width")


@pulumi.output_type
class GridLayoutElement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnSpan":
            suggest = "column_span"
        elif key == "elementId":
            suggest = "element_id"
        elif key == "elementType":
            suggest = "element_type"
        elif key == "rowSpan":
            suggest = "row_span"
        elif key == "columnIndex":
            suggest = "column_index"
        elif key == "rowIndex":
            suggest = "row_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GridLayoutElement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GridLayoutElement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GridLayoutElement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_span: int,
                 element_id: str,
                 element_type: str,
                 row_span: int,
                 column_index: Optional[str] = None,
                 row_index: Optional[str] = None):
        pulumi.set(__self__, "column_span", column_span)
        pulumi.set(__self__, "element_id", element_id)
        pulumi.set(__self__, "element_type", element_type)
        pulumi.set(__self__, "row_span", row_span)
        if column_index is not None:
            pulumi.set(__self__, "column_index", column_index)
        if row_index is not None:
            pulumi.set(__self__, "row_index", row_index)

    @property
    @pulumi.getter(name="columnSpan")
    def column_span(self) -> int:
        return pulumi.get(self, "column_span")

    @property
    @pulumi.getter(name="elementId")
    def element_id(self) -> str:
        return pulumi.get(self, "element_id")

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> str:
        return pulumi.get(self, "element_type")

    @property
    @pulumi.getter(name="rowSpan")
    def row_span(self) -> int:
        return pulumi.get(self, "row_span")

    @property
    @pulumi.getter(name="columnIndex")
    def column_index(self) -> Optional[str]:
        return pulumi.get(self, "column_index")

    @property
    @pulumi.getter(name="rowIndex")
    def row_index(self) -> Optional[str]:
        return pulumi.get(self, "row_index")


@pulumi.output_type
class IamPolicyAssignmentIdentities(dict):
    def __init__(__self__, *,
                 groups: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] groups: Array of Quicksight group names to assign the policy to.
        :param Sequence[str] users: Array of Quicksight user names to assign the policy to.
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        """
        Array of Quicksight group names to assign the policy to.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Array of Quicksight user names to assign the policy to.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class IntegerParameterDeclaration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterValueType":
            suggest = "parameter_value_type"
        elif key == "defaultValues":
            suggest = "default_values"
        elif key == "valuesWhenUnset":
            suggest = "values_when_unset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegerParameterDeclaration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegerParameterDeclaration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegerParameterDeclaration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 parameter_value_type: str,
                 default_values: Optional['outputs.IntegerParameterDeclarationDefaultValues'] = None,
                 values_when_unset: Optional['outputs.IntegerParameterDeclarationValuesWhenUnset'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameter_value_type", parameter_value_type)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if values_when_unset is not None:
            pulumi.set(__self__, "values_when_unset", values_when_unset)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> str:
        return pulumi.get(self, "parameter_value_type")

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional['outputs.IntegerParameterDeclarationDefaultValues']:
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter(name="valuesWhenUnset")
    def values_when_unset(self) -> Optional['outputs.IntegerParameterDeclarationValuesWhenUnset']:
        return pulumi.get(self, "values_when_unset")


@pulumi.output_type
class IntegerParameterDeclarationDefaultValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamicValue":
            suggest = "dynamic_value"
        elif key == "staticValues":
            suggest = "static_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegerParameterDeclarationDefaultValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegerParameterDeclarationDefaultValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegerParameterDeclarationDefaultValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dynamic_value: Optional['outputs.DynamicValue'] = None,
                 static_values: Optional[Sequence[int]] = None):
        if dynamic_value is not None:
            pulumi.set(__self__, "dynamic_value", dynamic_value)
        if static_values is not None:
            pulumi.set(__self__, "static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional['outputs.DynamicValue']:
        return pulumi.get(self, "dynamic_value")

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "static_values")


@pulumi.output_type
class IntegerParameterDeclarationValuesWhenUnset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customValue":
            suggest = "custom_value"
        elif key == "valueWhenUnsetOption":
            suggest = "value_when_unset_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegerParameterDeclarationValuesWhenUnset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegerParameterDeclarationValuesWhenUnset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegerParameterDeclarationValuesWhenUnset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_value: Optional[int] = None,
                 value_when_unset_option: Optional[str] = None):
        if custom_value is not None:
            pulumi.set(__self__, "custom_value", custom_value)
        if value_when_unset_option is not None:
            pulumi.set(__self__, "value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[int]:
        return pulumi.get(self, "custom_value")

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[str]:
        return pulumi.get(self, "value_when_unset_option")


@pulumi.output_type
class ItemsLimitConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "otherCategories":
            suggest = "other_categories"
        elif key == "itemsLimit":
            suggest = "items_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ItemsLimitConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ItemsLimitConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ItemsLimitConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 other_categories: str,
                 items_limit: Optional[int] = None):
        pulumi.set(__self__, "other_categories", other_categories)
        if items_limit is not None:
            pulumi.set(__self__, "items_limit", items_limit)

    @property
    @pulumi.getter(name="otherCategories")
    def other_categories(self) -> str:
        return pulumi.get(self, "other_categories")

    @property
    @pulumi.getter(name="itemsLimit")
    def items_limit(self) -> Optional[int]:
        return pulumi.get(self, "items_limit")


@pulumi.output_type
class LabelOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLabel":
            suggest = "custom_label"
        elif key == "fontConfiguration":
            suggest = "font_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LabelOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LabelOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LabelOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_label: Optional[str] = None,
                 font_configuration: Optional['outputs.FontConfiguration'] = None,
                 visibility: Optional[str] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[str]:
        return pulumi.get(self, "custom_label")

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "font_configuration")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class Layouts(dict):
    def __init__(__self__, *,
                 configuration: 'outputs.LayoutsConfiguration'):
        pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> 'outputs.LayoutsConfiguration':
        return pulumi.get(self, "configuration")


@pulumi.output_type
class LayoutsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "freeFormLayout":
            suggest = "free_form_layout"
        elif key == "gridLayout":
            suggest = "grid_layout"
        elif key == "sectionBasedLayout":
            suggest = "section_based_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 free_form_layout: Optional['outputs.LayoutsConfigurationFreeFormLayout'] = None,
                 grid_layout: Optional['outputs.GridLayout'] = None,
                 section_based_layout: Optional['outputs.LayoutsConfigurationSectionBasedLayout'] = None):
        if free_form_layout is not None:
            pulumi.set(__self__, "free_form_layout", free_form_layout)
        if grid_layout is not None:
            pulumi.set(__self__, "grid_layout", grid_layout)
        if section_based_layout is not None:
            pulumi.set(__self__, "section_based_layout", section_based_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> Optional['outputs.LayoutsConfigurationFreeFormLayout']:
        return pulumi.get(self, "free_form_layout")

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional['outputs.GridLayout']:
        return pulumi.get(self, "grid_layout")

    @property
    @pulumi.getter(name="sectionBasedLayout")
    def section_based_layout(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayout']:
        return pulumi.get(self, "section_based_layout")


@pulumi.output_type
class LayoutsConfigurationFreeFormLayout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationFreeFormLayout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationFreeFormLayout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationFreeFormLayout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 elements: Sequence['outputs.FreeFormLayoutElements'],
                 canvas_size_options: Optional['outputs.LayoutsConfigurationFreeFormLayoutCanvasSizeOptions'] = None):
        pulumi.set(__self__, "elements", elements)
        if canvas_size_options is not None:
            pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter
    def elements(self) -> Sequence['outputs.FreeFormLayoutElements']:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional['outputs.LayoutsConfigurationFreeFormLayoutCanvasSizeOptions']:
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class LayoutsConfigurationFreeFormLayoutCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "screenCanvasSizeOptions":
            suggest = "screen_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationFreeFormLayoutCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationFreeFormLayoutCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationFreeFormLayoutCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 screen_canvas_size_options: Optional['outputs.LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptions'] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional['outputs.LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptions']:
        return pulumi.get(self, "screen_canvas_size_options")


@pulumi.output_type
class LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optimizedViewPortWidth":
            suggest = "optimized_view_port_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationFreeFormLayoutCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optimized_view_port_width: str):
        pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> str:
        return pulumi.get(self, "optimized_view_port_width")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bodySections":
            suggest = "body_sections"
        elif key == "footerSections":
            suggest = "footer_sections"
        elif key == "headerSections":
            suggest = "header_sections"
        elif key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationSectionBasedLayout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationSectionBasedLayout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationSectionBasedLayout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body_sections: Sequence['outputs.LayoutsConfigurationSectionBasedLayoutBodySection'],
                 footer_sections: 'outputs.LayoutsConfigurationSectionBasedLayoutFooterSections',
                 header_sections: 'outputs.LayoutsConfigurationSectionBasedLayoutHeaderSections',
                 canvas_size_options: Optional['outputs.LayoutsConfigurationSectionBasedLayoutCanvasSizeOptions'] = None):
        pulumi.set(__self__, "body_sections", body_sections)
        pulumi.set(__self__, "footer_sections", footer_sections)
        pulumi.set(__self__, "header_sections", header_sections)
        if canvas_size_options is not None:
            pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="bodySections")
    def body_sections(self) -> Sequence['outputs.LayoutsConfigurationSectionBasedLayoutBodySection']:
        return pulumi.get(self, "body_sections")

    @property
    @pulumi.getter(name="footerSections")
    def footer_sections(self) -> 'outputs.LayoutsConfigurationSectionBasedLayoutFooterSections':
        return pulumi.get(self, "footer_sections")

    @property
    @pulumi.getter(name="headerSections")
    def header_sections(self) -> 'outputs.LayoutsConfigurationSectionBasedLayoutHeaderSections':
        return pulumi.get(self, "header_sections")

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayoutCanvasSizeOptions']:
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutBodySection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionId":
            suggest = "section_id"
        elif key == "pageBreakConfiguration":
            suggest = "page_break_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationSectionBasedLayoutBodySection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationSectionBasedLayoutBodySection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationSectionBasedLayoutBodySection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: 'outputs.LayoutsConfigurationSectionBasedLayoutBodySectionContent',
                 section_id: str,
                 page_break_configuration: Optional['outputs.LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfiguration'] = None,
                 style: Optional['outputs.LayoutsConfigurationSectionBasedLayoutBodySectionStyle'] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "section_id", section_id)
        if page_break_configuration is not None:
            pulumi.set(__self__, "page_break_configuration", page_break_configuration)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter
    def content(self) -> 'outputs.LayoutsConfigurationSectionBasedLayoutBodySectionContent':
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> str:
        return pulumi.get(self, "section_id")

    @property
    @pulumi.getter(name="pageBreakConfiguration")
    def page_break_configuration(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfiguration']:
        return pulumi.get(self, "page_break_configuration")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayoutBodySectionStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutBodySectionContent(dict):
    def __init__(__self__, *,
                 layout: Optional['outputs.LayoutsConfigurationSectionBasedLayoutBodySectionContentLayout'] = None):
        if layout is not None:
            pulumi.set(__self__, "layout", layout)

    @property
    @pulumi.getter
    def layout(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayoutBodySectionContentLayout']:
        return pulumi.get(self, "layout")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutBodySectionContentLayout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "freeFormLayout":
            suggest = "free_form_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationSectionBasedLayoutBodySectionContentLayout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationSectionBasedLayoutBodySectionContentLayout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationSectionBasedLayoutBodySectionContentLayout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 free_form_layout: 'outputs.LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayout'):
        pulumi.set(__self__, "free_form_layout", free_form_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> 'outputs.LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayout':
        return pulumi.get(self, "free_form_layout")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutBodySectionContentLayoutFreeFormLayout(dict):
    def __init__(__self__, *,
                 elements: Sequence['outputs.FreeFormLayoutElements']):
        pulumi.set(__self__, "elements", elements)

    @property
    @pulumi.getter
    def elements(self) -> Sequence['outputs.FreeFormLayoutElements']:
        return pulumi.get(self, "elements")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfiguration(dict):
    def __init__(__self__, *,
                 after: Optional['outputs.LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfter'] = None):
        if after is not None:
            pulumi.set(__self__, "after", after)

    @property
    @pulumi.getter
    def after(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfter']:
        return pulumi.get(self, "after")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutBodySectionPageBreakConfigurationAfter(dict):
    def __init__(__self__, *,
                 status: Optional[str] = None):
        """
        :param str status: The dashboard creation status.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutBodySectionStyle(dict):
    def __init__(__self__, *,
                 height: Optional[str] = None,
                 padding: Optional['outputs.Spacing'] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def padding(self) -> Optional['outputs.Spacing']:
        return pulumi.get(self, "padding")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paperCanvasSizeOptions":
            suggest = "paper_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationSectionBasedLayoutCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationSectionBasedLayoutCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationSectionBasedLayoutCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 paper_canvas_size_options: Optional['outputs.LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptions'] = None):
        if paper_canvas_size_options is not None:
            pulumi.set(__self__, "paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptions']:
        return pulumi.get(self, "paper_canvas_size_options")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paperMargin":
            suggest = "paper_margin"
        elif key == "paperOrientation":
            suggest = "paper_orientation"
        elif key == "paperSize":
            suggest = "paper_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationSectionBasedLayoutCanvasSizeOptionsPaperCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 paper_margin: Optional['outputs.Spacing'] = None,
                 paper_orientation: Optional[str] = None,
                 paper_size: Optional[str] = None):
        if paper_margin is not None:
            pulumi.set(__self__, "paper_margin", paper_margin)
        if paper_orientation is not None:
            pulumi.set(__self__, "paper_orientation", paper_orientation)
        if paper_size is not None:
            pulumi.set(__self__, "paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional['outputs.Spacing']:
        return pulumi.get(self, "paper_margin")

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[str]:
        return pulumi.get(self, "paper_orientation")

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[str]:
        return pulumi.get(self, "paper_size")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutFooterSections(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionId":
            suggest = "section_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationSectionBasedLayoutFooterSections. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationSectionBasedLayoutFooterSections.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationSectionBasedLayoutFooterSections.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 section_id: str,
                 layout: Optional['outputs.LayoutsConfigurationSectionBasedLayoutFooterSectionsLayout'] = None,
                 style: Optional['outputs.LayoutsConfigurationSectionBasedLayoutFooterSectionsStyle'] = None):
        pulumi.set(__self__, "section_id", section_id)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> str:
        return pulumi.get(self, "section_id")

    @property
    @pulumi.getter
    def layout(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayoutFooterSectionsLayout']:
        return pulumi.get(self, "layout")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayoutFooterSectionsStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutFooterSectionsLayout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "freeFormLayout":
            suggest = "free_form_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationSectionBasedLayoutFooterSectionsLayout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationSectionBasedLayoutFooterSectionsLayout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationSectionBasedLayoutFooterSectionsLayout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 free_form_layout: 'outputs.LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayout'):
        pulumi.set(__self__, "free_form_layout", free_form_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> 'outputs.LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayout':
        return pulumi.get(self, "free_form_layout")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutFooterSectionsLayoutFreeFormLayout(dict):
    def __init__(__self__, *,
                 elements: Sequence['outputs.FreeFormLayoutElements']):
        pulumi.set(__self__, "elements", elements)

    @property
    @pulumi.getter
    def elements(self) -> Sequence['outputs.FreeFormLayoutElements']:
        return pulumi.get(self, "elements")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutFooterSectionsStyle(dict):
    def __init__(__self__, *,
                 height: Optional[str] = None,
                 padding: Optional['outputs.Spacing'] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def padding(self) -> Optional['outputs.Spacing']:
        return pulumi.get(self, "padding")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutHeaderSections(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionId":
            suggest = "section_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationSectionBasedLayoutHeaderSections. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationSectionBasedLayoutHeaderSections.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationSectionBasedLayoutHeaderSections.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 section_id: str,
                 layout: Optional['outputs.LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayout'] = None,
                 style: Optional['outputs.LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyle'] = None):
        pulumi.set(__self__, "section_id", section_id)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> str:
        return pulumi.get(self, "section_id")

    @property
    @pulumi.getter
    def layout(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayout']:
        return pulumi.get(self, "layout")

    @property
    @pulumi.getter
    def style(self) -> Optional['outputs.LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyle']:
        return pulumi.get(self, "style")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "freeFormLayout":
            suggest = "free_form_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 free_form_layout: 'outputs.LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayout'):
        pulumi.set(__self__, "free_form_layout", free_form_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> 'outputs.LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayout':
        return pulumi.get(self, "free_form_layout")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutHeaderSectionsLayoutFreeFormLayout(dict):
    def __init__(__self__, *,
                 elements: Sequence['outputs.FreeFormLayoutElements']):
        pulumi.set(__self__, "elements", elements)

    @property
    @pulumi.getter
    def elements(self) -> Sequence['outputs.FreeFormLayoutElements']:
        return pulumi.get(self, "elements")


@pulumi.output_type
class LayoutsConfigurationSectionBasedLayoutHeaderSectionsStyle(dict):
    def __init__(__self__, *,
                 height: Optional[str] = None,
                 padding: Optional['outputs.Spacing'] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def padding(self) -> Optional['outputs.Spacing']:
        return pulumi.get(self, "padding")


@pulumi.output_type
class LegendOptions(dict):
    def __init__(__self__, *,
                 height: Optional[str] = None,
                 position: Optional[str] = None,
                 title: Optional['outputs.LabelOptions'] = None,
                 visibility: Optional[str] = None,
                 width: Optional[str] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def position(self) -> Optional[str]:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class LineChartLineStyleSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lineInterpolation":
            suggest = "line_interpolation"
        elif key == "lineStyle":
            suggest = "line_style"
        elif key == "lineVisibility":
            suggest = "line_visibility"
        elif key == "lineWidth":
            suggest = "line_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LineChartLineStyleSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LineChartLineStyleSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LineChartLineStyleSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 line_interpolation: Optional[str] = None,
                 line_style: Optional[str] = None,
                 line_visibility: Optional[str] = None,
                 line_width: Optional[str] = None):
        if line_interpolation is not None:
            pulumi.set(__self__, "line_interpolation", line_interpolation)
        if line_style is not None:
            pulumi.set(__self__, "line_style", line_style)
        if line_visibility is not None:
            pulumi.set(__self__, "line_visibility", line_visibility)
        if line_width is not None:
            pulumi.set(__self__, "line_width", line_width)

    @property
    @pulumi.getter(name="lineInterpolation")
    def line_interpolation(self) -> Optional[str]:
        return pulumi.get(self, "line_interpolation")

    @property
    @pulumi.getter(name="lineStyle")
    def line_style(self) -> Optional[str]:
        return pulumi.get(self, "line_style")

    @property
    @pulumi.getter(name="lineVisibility")
    def line_visibility(self) -> Optional[str]:
        return pulumi.get(self, "line_visibility")

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[str]:
        return pulumi.get(self, "line_width")


@pulumi.output_type
class LineChartMarkerStyleSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "markerColor":
            suggest = "marker_color"
        elif key == "markerShape":
            suggest = "marker_shape"
        elif key == "markerSize":
            suggest = "marker_size"
        elif key == "markerVisibility":
            suggest = "marker_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LineChartMarkerStyleSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LineChartMarkerStyleSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LineChartMarkerStyleSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 marker_color: Optional[str] = None,
                 marker_shape: Optional[str] = None,
                 marker_size: Optional[str] = None,
                 marker_visibility: Optional[str] = None):
        if marker_color is not None:
            pulumi.set(__self__, "marker_color", marker_color)
        if marker_shape is not None:
            pulumi.set(__self__, "marker_shape", marker_shape)
        if marker_size is not None:
            pulumi.set(__self__, "marker_size", marker_size)
        if marker_visibility is not None:
            pulumi.set(__self__, "marker_visibility", marker_visibility)

    @property
    @pulumi.getter(name="markerColor")
    def marker_color(self) -> Optional[str]:
        return pulumi.get(self, "marker_color")

    @property
    @pulumi.getter(name="markerShape")
    def marker_shape(self) -> Optional[str]:
        return pulumi.get(self, "marker_shape")

    @property
    @pulumi.getter(name="markerSize")
    def marker_size(self) -> Optional[str]:
        return pulumi.get(self, "marker_size")

    @property
    @pulumi.getter(name="markerVisibility")
    def marker_visibility(self) -> Optional[str]:
        return pulumi.get(self, "marker_visibility")


@pulumi.output_type
class MeasureFieldSchema2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "calculatedMeasureField":
            suggest = "calculated_measure_field"
        elif key == "categoricalMeasureField":
            suggest = "categorical_measure_field"
        elif key == "dateMeasureField":
            suggest = "date_measure_field"
        elif key == "numericalMeasureField":
            suggest = "numerical_measure_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeasureFieldSchema2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeasureFieldSchema2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeasureFieldSchema2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calculated_measure_field: Optional['outputs.MeasureFieldSchema2CalculatedMeasureField'] = None,
                 categorical_measure_field: Optional['outputs.MeasureFieldSchema2CategoricalMeasureField'] = None,
                 date_measure_field: Optional['outputs.MeasureFieldSchema2DateMeasureField'] = None,
                 numerical_measure_field: Optional['outputs.MeasureFieldSchema2NumericalMeasureField'] = None):
        if calculated_measure_field is not None:
            pulumi.set(__self__, "calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            pulumi.set(__self__, "categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            pulumi.set(__self__, "date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            pulumi.set(__self__, "numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional['outputs.MeasureFieldSchema2CalculatedMeasureField']:
        return pulumi.get(self, "calculated_measure_field")

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional['outputs.MeasureFieldSchema2CategoricalMeasureField']:
        return pulumi.get(self, "categorical_measure_field")

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional['outputs.MeasureFieldSchema2DateMeasureField']:
        return pulumi.get(self, "date_measure_field")

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional['outputs.MeasureFieldSchema2NumericalMeasureField']:
        return pulumi.get(self, "numerical_measure_field")


@pulumi.output_type
class MeasureFieldSchema2CalculatedMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeasureFieldSchema2CalculatedMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeasureFieldSchema2CalculatedMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeasureFieldSchema2CalculatedMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 field_id: str):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class MeasureFieldSchema2CategoricalMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeasureFieldSchema2CategoricalMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeasureFieldSchema2CategoricalMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeasureFieldSchema2CategoricalMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional[str] = None,
                 format_configuration: Optional['outputs.StringFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class MeasureFieldSchema2DateMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeasureFieldSchema2DateMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeasureFieldSchema2DateMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeasureFieldSchema2DateMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional[str] = None,
                 format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class MeasureFieldSchema2NumericalMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeasureFieldSchema2NumericalMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeasureFieldSchema2NumericalMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeasureFieldSchema2NumericalMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional['outputs.NumericalAggregation'] = None,
                 format_configuration: Optional['outputs.NumberFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional['outputs.NumericalAggregation']:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class MeasureFieldSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "calculatedMeasureField":
            suggest = "calculated_measure_field"
        elif key == "categoricalMeasureField":
            suggest = "categorical_measure_field"
        elif key == "dateMeasureField":
            suggest = "date_measure_field"
        elif key == "numericalMeasureField":
            suggest = "numerical_measure_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeasureFieldSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeasureFieldSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeasureFieldSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calculated_measure_field: Optional['outputs.MeasureFieldSchemaCalculatedMeasureField'] = None,
                 categorical_measure_field: Optional['outputs.MeasureFieldSchemaCategoricalMeasureField'] = None,
                 date_measure_field: Optional['outputs.MeasureFieldSchemaDateMeasureField'] = None,
                 numerical_measure_field: Optional['outputs.MeasureFieldSchemaNumericalMeasureField'] = None):
        if calculated_measure_field is not None:
            pulumi.set(__self__, "calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            pulumi.set(__self__, "categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            pulumi.set(__self__, "date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            pulumi.set(__self__, "numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional['outputs.MeasureFieldSchemaCalculatedMeasureField']:
        return pulumi.get(self, "calculated_measure_field")

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional['outputs.MeasureFieldSchemaCategoricalMeasureField']:
        return pulumi.get(self, "categorical_measure_field")

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional['outputs.MeasureFieldSchemaDateMeasureField']:
        return pulumi.get(self, "date_measure_field")

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional['outputs.MeasureFieldSchemaNumericalMeasureField']:
        return pulumi.get(self, "numerical_measure_field")


@pulumi.output_type
class MeasureFieldSchemaCalculatedMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeasureFieldSchemaCalculatedMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeasureFieldSchemaCalculatedMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeasureFieldSchemaCalculatedMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 field_id: str):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class MeasureFieldSchemaCategoricalMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeasureFieldSchemaCategoricalMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeasureFieldSchemaCategoricalMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeasureFieldSchemaCategoricalMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional[str] = None,
                 format_configuration: Optional['outputs.StringFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class MeasureFieldSchemaDateMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeasureFieldSchemaDateMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeasureFieldSchemaDateMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeasureFieldSchemaDateMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional[str] = None,
                 format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class MeasureFieldSchemaNumericalMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeasureFieldSchemaNumericalMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeasureFieldSchemaNumericalMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeasureFieldSchemaNumericalMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional['outputs.NumericalAggregation'] = None,
                 format_configuration: Optional['outputs.NumberFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional['outputs.NumericalAggregation']:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class NamespaceTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")


@pulumi.output_type
class NegativeValueConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayMode":
            suggest = "display_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NegativeValueConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NegativeValueConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NegativeValueConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_mode: str):
        pulumi.set(__self__, "display_mode", display_mode)

    @property
    @pulumi.getter(name="displayMode")
    def display_mode(self) -> str:
        return pulumi.get(self, "display_mode")


@pulumi.output_type
class NullValueFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nullString":
            suggest = "null_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NullValueFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NullValueFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NullValueFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 null_string: str):
        pulumi.set(__self__, "null_string", null_string)

    @property
    @pulumi.getter(name="nullString")
    def null_string(self) -> str:
        return pulumi.get(self, "null_string")


@pulumi.output_type
class NumberDisplayFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "decimalPlacesConfiguration":
            suggest = "decimal_places_configuration"
        elif key == "negativeValueConfiguration":
            suggest = "negative_value_configuration"
        elif key == "nullValueFormatConfiguration":
            suggest = "null_value_format_configuration"
        elif key == "numberScale":
            suggest = "number_scale"
        elif key == "separatorConfiguration":
            suggest = "separator_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NumberDisplayFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NumberDisplayFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NumberDisplayFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decimal_places_configuration: Optional['outputs.DecimalPlacesConfiguration'] = None,
                 negative_value_configuration: Optional['outputs.NegativeValueConfiguration'] = None,
                 null_value_format_configuration: Optional['outputs.NullValueFormatConfiguration'] = None,
                 number_scale: Optional[str] = None,
                 prefix: Optional[str] = None,
                 separator_configuration: Optional['outputs.SeparatorConfiguration'] = None,
                 suffix: Optional[str] = None):
        if decimal_places_configuration is not None:
            pulumi.set(__self__, "decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            pulumi.set(__self__, "negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            pulumi.set(__self__, "null_value_format_configuration", null_value_format_configuration)
        if number_scale is not None:
            pulumi.set(__self__, "number_scale", number_scale)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if separator_configuration is not None:
            pulumi.set(__self__, "separator_configuration", separator_configuration)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional['outputs.DecimalPlacesConfiguration']:
        return pulumi.get(self, "decimal_places_configuration")

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional['outputs.NegativeValueConfiguration']:
        return pulumi.get(self, "negative_value_configuration")

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional['outputs.NullValueFormatConfiguration']:
        return pulumi.get(self, "null_value_format_configuration")

    @property
    @pulumi.getter(name="numberScale")
    def number_scale(self) -> Optional[str]:
        return pulumi.get(self, "number_scale")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional['outputs.SeparatorConfiguration']:
        return pulumi.get(self, "separator_configuration")

    @property
    @pulumi.getter
    def suffix(self) -> Optional[str]:
        return pulumi.get(self, "suffix")


@pulumi.output_type
class NumberFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numericFormatConfiguration":
            suggest = "numeric_format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NumberFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NumberFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NumberFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 numeric_format_configuration: Optional['outputs.NumericFormatConfiguration'] = None):
        if numeric_format_configuration is not None:
            pulumi.set(__self__, "numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional['outputs.NumericFormatConfiguration']:
        return pulumi.get(self, "numeric_format_configuration")


@pulumi.output_type
class NumericEqualityFilter(dict):
    def __init__(__self__, *,
                 column: 'outputs.Column',
                 value: float):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class NumericFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currencyDisplayFormatConfiguration":
            suggest = "currency_display_format_configuration"
        elif key == "numberDisplayFormatConfiguration":
            suggest = "number_display_format_configuration"
        elif key == "percentageDisplayFormatConfiguration":
            suggest = "percentage_display_format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NumericFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NumericFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NumericFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 currency_display_format_configuration: Optional['outputs.NumericFormatConfigurationCurrencyDisplayFormatConfiguration'] = None,
                 number_display_format_configuration: Optional['outputs.NumberDisplayFormatConfiguration'] = None,
                 percentage_display_format_configuration: Optional['outputs.PercentageDisplayFormatConfiguration'] = None):
        if currency_display_format_configuration is not None:
            pulumi.set(__self__, "currency_display_format_configuration", currency_display_format_configuration)
        if number_display_format_configuration is not None:
            pulumi.set(__self__, "number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            pulumi.set(__self__, "percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="currencyDisplayFormatConfiguration")
    def currency_display_format_configuration(self) -> Optional['outputs.NumericFormatConfigurationCurrencyDisplayFormatConfiguration']:
        return pulumi.get(self, "currency_display_format_configuration")

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional['outputs.NumberDisplayFormatConfiguration']:
        return pulumi.get(self, "number_display_format_configuration")

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional['outputs.PercentageDisplayFormatConfiguration']:
        return pulumi.get(self, "percentage_display_format_configuration")


@pulumi.output_type
class NumericFormatConfigurationCurrencyDisplayFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "decimalPlacesConfiguration":
            suggest = "decimal_places_configuration"
        elif key == "negativeValueConfiguration":
            suggest = "negative_value_configuration"
        elif key == "nullValueFormatConfiguration":
            suggest = "null_value_format_configuration"
        elif key == "numberScale":
            suggest = "number_scale"
        elif key == "separatorConfiguration":
            suggest = "separator_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NumericFormatConfigurationCurrencyDisplayFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NumericFormatConfigurationCurrencyDisplayFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NumericFormatConfigurationCurrencyDisplayFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decimal_places_configuration: Optional['outputs.DecimalPlacesConfiguration'] = None,
                 negative_value_configuration: Optional['outputs.NegativeValueConfiguration'] = None,
                 null_value_format_configuration: Optional['outputs.NullValueFormatConfiguration'] = None,
                 number_scale: Optional[str] = None,
                 prefix: Optional[str] = None,
                 separator_configuration: Optional['outputs.SeparatorConfiguration'] = None,
                 suffix: Optional[str] = None,
                 symbol: Optional[str] = None):
        if decimal_places_configuration is not None:
            pulumi.set(__self__, "decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            pulumi.set(__self__, "negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            pulumi.set(__self__, "null_value_format_configuration", null_value_format_configuration)
        if number_scale is not None:
            pulumi.set(__self__, "number_scale", number_scale)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if separator_configuration is not None:
            pulumi.set(__self__, "separator_configuration", separator_configuration)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if symbol is not None:
            pulumi.set(__self__, "symbol", symbol)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional['outputs.DecimalPlacesConfiguration']:
        return pulumi.get(self, "decimal_places_configuration")

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional['outputs.NegativeValueConfiguration']:
        return pulumi.get(self, "negative_value_configuration")

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional['outputs.NullValueFormatConfiguration']:
        return pulumi.get(self, "null_value_format_configuration")

    @property
    @pulumi.getter(name="numberScale")
    def number_scale(self) -> Optional[str]:
        return pulumi.get(self, "number_scale")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional['outputs.SeparatorConfiguration']:
        return pulumi.get(self, "separator_configuration")

    @property
    @pulumi.getter
    def suffix(self) -> Optional[str]:
        return pulumi.get(self, "suffix")

    @property
    @pulumi.getter
    def symbol(self) -> Optional[str]:
        return pulumi.get(self, "symbol")


@pulumi.output_type
class NumericalAggregation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "percentileAggregation":
            suggest = "percentile_aggregation"
        elif key == "simpleNumericalAggregation":
            suggest = "simple_numerical_aggregation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NumericalAggregation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NumericalAggregation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NumericalAggregation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 percentile_aggregation: Optional['outputs.NumericalAggregationPercentileAggregation'] = None,
                 simple_numerical_aggregation: Optional[str] = None):
        if percentile_aggregation is not None:
            pulumi.set(__self__, "percentile_aggregation", percentile_aggregation)
        if simple_numerical_aggregation is not None:
            pulumi.set(__self__, "simple_numerical_aggregation", simple_numerical_aggregation)

    @property
    @pulumi.getter(name="percentileAggregation")
    def percentile_aggregation(self) -> Optional['outputs.NumericalAggregationPercentileAggregation']:
        return pulumi.get(self, "percentile_aggregation")

    @property
    @pulumi.getter(name="simpleNumericalAggregation")
    def simple_numerical_aggregation(self) -> Optional[str]:
        return pulumi.get(self, "simple_numerical_aggregation")


@pulumi.output_type
class NumericalAggregationPercentileAggregation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "percentileValue":
            suggest = "percentile_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NumericalAggregationPercentileAggregation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NumericalAggregationPercentileAggregation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NumericalAggregationPercentileAggregation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 percentile_value: Optional[float] = None):
        if percentile_value is not None:
            pulumi.set(__self__, "percentile_value", percentile_value)

    @property
    @pulumi.getter(name="percentileValue")
    def percentile_value(self) -> Optional[float]:
        return pulumi.get(self, "percentile_value")


@pulumi.output_type
class PercentageDisplayFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "decimalPlacesConfiguration":
            suggest = "decimal_places_configuration"
        elif key == "negativeValueConfiguration":
            suggest = "negative_value_configuration"
        elif key == "nullValueFormatConfiguration":
            suggest = "null_value_format_configuration"
        elif key == "separatorConfiguration":
            suggest = "separator_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PercentageDisplayFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PercentageDisplayFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PercentageDisplayFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decimal_places_configuration: Optional['outputs.DecimalPlacesConfiguration'] = None,
                 negative_value_configuration: Optional['outputs.NegativeValueConfiguration'] = None,
                 null_value_format_configuration: Optional['outputs.NullValueFormatConfiguration'] = None,
                 prefix: Optional[str] = None,
                 separator_configuration: Optional['outputs.SeparatorConfiguration'] = None,
                 suffix: Optional[str] = None):
        if decimal_places_configuration is not None:
            pulumi.set(__self__, "decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            pulumi.set(__self__, "negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            pulumi.set(__self__, "null_value_format_configuration", null_value_format_configuration)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if separator_configuration is not None:
            pulumi.set(__self__, "separator_configuration", separator_configuration)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional['outputs.DecimalPlacesConfiguration']:
        return pulumi.get(self, "decimal_places_configuration")

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional['outputs.NegativeValueConfiguration']:
        return pulumi.get(self, "negative_value_configuration")

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional['outputs.NullValueFormatConfiguration']:
        return pulumi.get(self, "null_value_format_configuration")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional['outputs.SeparatorConfiguration']:
        return pulumi.get(self, "separator_configuration")

    @property
    @pulumi.getter
    def suffix(self) -> Optional[str]:
        return pulumi.get(self, "suffix")


@pulumi.output_type
class ReferenceLine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataConfiguration":
            suggest = "data_configuration"
        elif key == "labelConfiguration":
            suggest = "label_configuration"
        elif key == "styleConfiguration":
            suggest = "style_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceLine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceLine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceLine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_configuration: 'outputs.ReferenceLineDataConfiguration',
                 label_configuration: Optional['outputs.ReferenceLineLabelConfiguration'] = None,
                 status: Optional[str] = None,
                 style_configuration: Optional['outputs.ReferenceLineStyleConfiguration'] = None):
        """
        :param str status: The dashboard creation status.
        """
        pulumi.set(__self__, "data_configuration", data_configuration)
        if label_configuration is not None:
            pulumi.set(__self__, "label_configuration", label_configuration)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if style_configuration is not None:
            pulumi.set(__self__, "style_configuration", style_configuration)

    @property
    @pulumi.getter(name="dataConfiguration")
    def data_configuration(self) -> 'outputs.ReferenceLineDataConfiguration':
        return pulumi.get(self, "data_configuration")

    @property
    @pulumi.getter(name="labelConfiguration")
    def label_configuration(self) -> Optional['outputs.ReferenceLineLabelConfiguration']:
        return pulumi.get(self, "label_configuration")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="styleConfiguration")
    def style_configuration(self) -> Optional['outputs.ReferenceLineStyleConfiguration']:
        return pulumi.get(self, "style_configuration")


@pulumi.output_type
class ReferenceLineDataConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "axisBinding":
            suggest = "axis_binding"
        elif key == "dynamicConfiguration":
            suggest = "dynamic_configuration"
        elif key == "staticConfiguration":
            suggest = "static_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceLineDataConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceLineDataConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceLineDataConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 axis_binding: Optional[str] = None,
                 dynamic_configuration: Optional['outputs.ReferenceLineDataConfigurationDynamicConfiguration'] = None,
                 static_configuration: Optional['outputs.ReferenceLineDataConfigurationStaticConfiguration'] = None):
        if axis_binding is not None:
            pulumi.set(__self__, "axis_binding", axis_binding)
        if dynamic_configuration is not None:
            pulumi.set(__self__, "dynamic_configuration", dynamic_configuration)
        if static_configuration is not None:
            pulumi.set(__self__, "static_configuration", static_configuration)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> Optional[str]:
        return pulumi.get(self, "axis_binding")

    @property
    @pulumi.getter(name="dynamicConfiguration")
    def dynamic_configuration(self) -> Optional['outputs.ReferenceLineDataConfigurationDynamicConfiguration']:
        return pulumi.get(self, "dynamic_configuration")

    @property
    @pulumi.getter(name="staticConfiguration")
    def static_configuration(self) -> Optional['outputs.ReferenceLineDataConfigurationStaticConfiguration']:
        return pulumi.get(self, "static_configuration")


@pulumi.output_type
class ReferenceLineDataConfigurationDynamicConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "measureAggregationFunction":
            suggest = "measure_aggregation_function"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceLineDataConfigurationDynamicConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceLineDataConfigurationDynamicConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceLineDataConfigurationDynamicConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calculation: 'outputs.NumericalAggregation',
                 column: 'outputs.Column',
                 measure_aggregation_function: 'outputs.AggregationFunction'):
        pulumi.set(__self__, "calculation", calculation)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "measure_aggregation_function", measure_aggregation_function)

    @property
    @pulumi.getter
    def calculation(self) -> 'outputs.NumericalAggregation':
        return pulumi.get(self, "calculation")

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="measureAggregationFunction")
    def measure_aggregation_function(self) -> 'outputs.AggregationFunction':
        return pulumi.get(self, "measure_aggregation_function")


@pulumi.output_type
class ReferenceLineDataConfigurationStaticConfiguration(dict):
    def __init__(__self__, *,
                 value: float):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class ReferenceLineLabelConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLabelConfiguration":
            suggest = "custom_label_configuration"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontConfiguration":
            suggest = "font_configuration"
        elif key == "horizontalPosition":
            suggest = "horizontal_position"
        elif key == "valueLabelConfiguration":
            suggest = "value_label_configuration"
        elif key == "verticalPosition":
            suggest = "vertical_position"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceLineLabelConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceLineLabelConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceLineLabelConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_label_configuration: Optional['outputs.ReferenceLineLabelConfigurationCustomLabelConfiguration'] = None,
                 font_color: Optional[str] = None,
                 font_configuration: Optional['outputs.FontConfiguration'] = None,
                 horizontal_position: Optional[str] = None,
                 value_label_configuration: Optional['outputs.ReferenceLineLabelConfigurationValueLabelConfiguration'] = None,
                 vertical_position: Optional[str] = None):
        if custom_label_configuration is not None:
            pulumi.set(__self__, "custom_label_configuration", custom_label_configuration)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)
        if horizontal_position is not None:
            pulumi.set(__self__, "horizontal_position", horizontal_position)
        if value_label_configuration is not None:
            pulumi.set(__self__, "value_label_configuration", value_label_configuration)
        if vertical_position is not None:
            pulumi.set(__self__, "vertical_position", vertical_position)

    @property
    @pulumi.getter(name="customLabelConfiguration")
    def custom_label_configuration(self) -> Optional['outputs.ReferenceLineLabelConfigurationCustomLabelConfiguration']:
        return pulumi.get(self, "custom_label_configuration")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[str]:
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "font_configuration")

    @property
    @pulumi.getter(name="horizontalPosition")
    def horizontal_position(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_position")

    @property
    @pulumi.getter(name="valueLabelConfiguration")
    def value_label_configuration(self) -> Optional['outputs.ReferenceLineLabelConfigurationValueLabelConfiguration']:
        return pulumi.get(self, "value_label_configuration")

    @property
    @pulumi.getter(name="verticalPosition")
    def vertical_position(self) -> Optional[str]:
        return pulumi.get(self, "vertical_position")


@pulumi.output_type
class ReferenceLineLabelConfigurationCustomLabelConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLabel":
            suggest = "custom_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceLineLabelConfigurationCustomLabelConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceLineLabelConfigurationCustomLabelConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceLineLabelConfigurationCustomLabelConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_label: str):
        pulumi.set(__self__, "custom_label", custom_label)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> str:
        return pulumi.get(self, "custom_label")


@pulumi.output_type
class ReferenceLineLabelConfigurationValueLabelConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "relativePosition":
            suggest = "relative_position"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceLineLabelConfigurationValueLabelConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceLineLabelConfigurationValueLabelConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceLineLabelConfigurationValueLabelConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_configuration: Optional['outputs.NumericFormatConfiguration'] = None,
                 relative_position: Optional[str] = None):
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if relative_position is not None:
            pulumi.set(__self__, "relative_position", relative_position)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.NumericFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="relativePosition")
    def relative_position(self) -> Optional[str]:
        return pulumi.get(self, "relative_position")


@pulumi.output_type
class ReferenceLineStyleConfiguration(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 pattern: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")


@pulumi.output_type
class RefreshScheduleSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refreshType":
            suggest = "refresh_type"
        elif key == "scheduleFrequency":
            suggest = "schedule_frequency"
        elif key == "startAfterDateTime":
            suggest = "start_after_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RefreshScheduleSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RefreshScheduleSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RefreshScheduleSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 refresh_type: str,
                 schedule_frequency: Optional['outputs.RefreshScheduleScheduleScheduleFrequency'] = None,
                 start_after_date_time: Optional[str] = None):
        """
        :param str refresh_type: The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
        :param 'RefreshScheduleScheduleScheduleFrequencyArgs' schedule_frequency: The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
        :param str start_after_date_time: Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
        """
        pulumi.set(__self__, "refresh_type", refresh_type)
        if schedule_frequency is not None:
            pulumi.set(__self__, "schedule_frequency", schedule_frequency)
        if start_after_date_time is not None:
            pulumi.set(__self__, "start_after_date_time", start_after_date_time)

    @property
    @pulumi.getter(name="refreshType")
    def refresh_type(self) -> str:
        """
        The type of refresh that the dataset undergoes. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
        """
        return pulumi.get(self, "refresh_type")

    @property
    @pulumi.getter(name="scheduleFrequency")
    def schedule_frequency(self) -> Optional['outputs.RefreshScheduleScheduleScheduleFrequency']:
        """
        The configuration of the [schedule frequency](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RefreshFrequency.html). See schedule_frequency.
        """
        return pulumi.get(self, "schedule_frequency")

    @property
    @pulumi.getter(name="startAfterDateTime")
    def start_after_date_time(self) -> Optional[str]:
        """
        Time after which the refresh schedule can be started, expressed in `YYYY-MM-DDTHH:MM:SS` format.
        """
        return pulumi.get(self, "start_after_date_time")


@pulumi.output_type
class RefreshScheduleScheduleScheduleFrequency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refreshOnDay":
            suggest = "refresh_on_day"
        elif key == "timeOfTheDay":
            suggest = "time_of_the_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RefreshScheduleScheduleScheduleFrequency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RefreshScheduleScheduleScheduleFrequency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RefreshScheduleScheduleScheduleFrequency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: str,
                 refresh_on_day: Optional['outputs.RefreshScheduleScheduleScheduleFrequencyRefreshOnDay'] = None,
                 time_of_the_day: Optional[str] = None,
                 timezone: Optional[str] = None):
        """
        :param str interval: The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
        :param 'RefreshScheduleScheduleScheduleFrequencyRefreshOnDayArgs' refresh_on_day: The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
        :param str time_of_the_day: The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
        :param str timezone: The timezone that you want the refresh schedule to use.
        """
        pulumi.set(__self__, "interval", interval)
        if refresh_on_day is not None:
            pulumi.set(__self__, "refresh_on_day", refresh_on_day)
        if time_of_the_day is not None:
            pulumi.set(__self__, "time_of_the_day", time_of_the_day)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def interval(self) -> str:
        """
        The interval between scheduled refreshes. Valid values are `MINUTE15`, `MINUTE30`, `HOURLY`, `DAILY`, `WEEKLY` and `MONTHLY`.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="refreshOnDay")
    def refresh_on_day(self) -> Optional['outputs.RefreshScheduleScheduleScheduleFrequencyRefreshOnDay']:
        """
        The [refresh on entity](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ScheduleRefreshOnEntity.html) configuration for weekly or monthly schedules. See refresh_on_day.
        """
        return pulumi.get(self, "refresh_on_day")

    @property
    @pulumi.getter(name="timeOfTheDay")
    def time_of_the_day(self) -> Optional[str]:
        """
        The time of day that you want the dataset to refresh. This value is expressed in `HH:MM` format. This field is not required for schedules that refresh hourly.
        """
        return pulumi.get(self, "time_of_the_day")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        The timezone that you want the refresh schedule to use.
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class RefreshScheduleScheduleScheduleFrequencyRefreshOnDay(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "dayOfWeek":
            suggest = "day_of_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RefreshScheduleScheduleScheduleFrequencyRefreshOnDay. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RefreshScheduleScheduleScheduleFrequencyRefreshOnDay.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RefreshScheduleScheduleScheduleFrequencyRefreshOnDay.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_month: Optional[str] = None,
                 day_of_week: Optional[str] = None):
        """
        :param str day_of_month: The day of the month that you want to schedule refresh on.
        :param str day_of_week: The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
        """
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[str]:
        """
        The day of the month that you want to schedule refresh on.
        """
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        """
        The day of the week that you want to schedule a refresh on. Valid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY` and `SATURDAY`.
        """
        return pulumi.get(self, "day_of_week")


@pulumi.output_type
class SelectAllOptions(dict):
    def __init__(__self__, *,
                 visibility: Optional[str] = None):
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class SeparatorConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "decimalSeparator":
            suggest = "decimal_separator"
        elif key == "thousandsSeparator":
            suggest = "thousands_separator"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SeparatorConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SeparatorConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SeparatorConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decimal_separator: Optional[str] = None,
                 thousands_separator: Optional['outputs.SeparatorConfigurationThousandsSeparator'] = None):
        if decimal_separator is not None:
            pulumi.set(__self__, "decimal_separator", decimal_separator)
        if thousands_separator is not None:
            pulumi.set(__self__, "thousands_separator", thousands_separator)

    @property
    @pulumi.getter(name="decimalSeparator")
    def decimal_separator(self) -> Optional[str]:
        return pulumi.get(self, "decimal_separator")

    @property
    @pulumi.getter(name="thousandsSeparator")
    def thousands_separator(self) -> Optional['outputs.SeparatorConfigurationThousandsSeparator']:
        return pulumi.get(self, "thousands_separator")


@pulumi.output_type
class SeparatorConfigurationThousandsSeparator(dict):
    def __init__(__self__, *,
                 symbol: Optional[str] = None,
                 visibility: Optional[str] = None):
        if symbol is not None:
            pulumi.set(__self__, "symbol", symbol)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[str]:
        return pulumi.get(self, "symbol")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class SmallMultiplesOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVisibleColumns":
            suggest = "max_visible_columns"
        elif key == "maxVisibleRows":
            suggest = "max_visible_rows"
        elif key == "panelConfiguration":
            suggest = "panel_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmallMultiplesOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmallMultiplesOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmallMultiplesOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_visible_columns: Optional[int] = None,
                 max_visible_rows: Optional[int] = None,
                 panel_configuration: Optional['outputs.SmallMultiplesOptionsPanelConfiguration'] = None):
        if max_visible_columns is not None:
            pulumi.set(__self__, "max_visible_columns", max_visible_columns)
        if max_visible_rows is not None:
            pulumi.set(__self__, "max_visible_rows", max_visible_rows)
        if panel_configuration is not None:
            pulumi.set(__self__, "panel_configuration", panel_configuration)

    @property
    @pulumi.getter(name="maxVisibleColumns")
    def max_visible_columns(self) -> Optional[int]:
        return pulumi.get(self, "max_visible_columns")

    @property
    @pulumi.getter(name="maxVisibleRows")
    def max_visible_rows(self) -> Optional[int]:
        return pulumi.get(self, "max_visible_rows")

    @property
    @pulumi.getter(name="panelConfiguration")
    def panel_configuration(self) -> Optional['outputs.SmallMultiplesOptionsPanelConfiguration']:
        return pulumi.get(self, "panel_configuration")


@pulumi.output_type
class SmallMultiplesOptionsPanelConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "backgroundVisibility":
            suggest = "background_visibility"
        elif key == "borderColor":
            suggest = "border_color"
        elif key == "borderStyle":
            suggest = "border_style"
        elif key == "borderThickness":
            suggest = "border_thickness"
        elif key == "borderVisibility":
            suggest = "border_visibility"
        elif key == "gutterSpacing":
            suggest = "gutter_spacing"
        elif key == "gutterVisibility":
            suggest = "gutter_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmallMultiplesOptionsPanelConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmallMultiplesOptionsPanelConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmallMultiplesOptionsPanelConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: Optional[str] = None,
                 background_visibility: Optional[str] = None,
                 border_color: Optional[str] = None,
                 border_style: Optional[str] = None,
                 border_thickness: Optional[str] = None,
                 border_visibility: Optional[str] = None,
                 gutter_spacing: Optional[str] = None,
                 gutter_visibility: Optional[str] = None,
                 title: Optional['outputs.SmallMultiplesOptionsPanelConfigurationTitle'] = None):
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if background_visibility is not None:
            pulumi.set(__self__, "background_visibility", background_visibility)
        if border_color is not None:
            pulumi.set(__self__, "border_color", border_color)
        if border_style is not None:
            pulumi.set(__self__, "border_style", border_style)
        if border_thickness is not None:
            pulumi.set(__self__, "border_thickness", border_thickness)
        if border_visibility is not None:
            pulumi.set(__self__, "border_visibility", border_visibility)
        if gutter_spacing is not None:
            pulumi.set(__self__, "gutter_spacing", gutter_spacing)
        if gutter_visibility is not None:
            pulumi.set(__self__, "gutter_visibility", gutter_visibility)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="backgroundVisibility")
    def background_visibility(self) -> Optional[str]:
        return pulumi.get(self, "background_visibility")

    @property
    @pulumi.getter(name="borderColor")
    def border_color(self) -> Optional[str]:
        return pulumi.get(self, "border_color")

    @property
    @pulumi.getter(name="borderStyle")
    def border_style(self) -> Optional[str]:
        return pulumi.get(self, "border_style")

    @property
    @pulumi.getter(name="borderThickness")
    def border_thickness(self) -> Optional[str]:
        return pulumi.get(self, "border_thickness")

    @property
    @pulumi.getter(name="borderVisibility")
    def border_visibility(self) -> Optional[str]:
        return pulumi.get(self, "border_visibility")

    @property
    @pulumi.getter(name="gutterSpacing")
    def gutter_spacing(self) -> Optional[str]:
        return pulumi.get(self, "gutter_spacing")

    @property
    @pulumi.getter(name="gutterVisibility")
    def gutter_visibility(self) -> Optional[str]:
        return pulumi.get(self, "gutter_visibility")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.SmallMultiplesOptionsPanelConfigurationTitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class SmallMultiplesOptionsPanelConfigurationTitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontConfiguration":
            suggest = "font_configuration"
        elif key == "horizontalTextAlignment":
            suggest = "horizontal_text_alignment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmallMultiplesOptionsPanelConfigurationTitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmallMultiplesOptionsPanelConfigurationTitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmallMultiplesOptionsPanelConfigurationTitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_configuration: Optional['outputs.FontConfiguration'] = None,
                 horizontal_text_alignment: Optional[str] = None,
                 visibility: Optional[str] = None):
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)
        if horizontal_text_alignment is not None:
            pulumi.set(__self__, "horizontal_text_alignment", horizontal_text_alignment)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "font_configuration")

    @property
    @pulumi.getter(name="horizontalTextAlignment")
    def horizontal_text_alignment(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_text_alignment")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class Spacing(dict):
    def __init__(__self__, *,
                 bottom: Optional[str] = None,
                 left: Optional[str] = None,
                 right: Optional[str] = None,
                 top: Optional[str] = None):
        if bottom is not None:
            pulumi.set(__self__, "bottom", bottom)
        if left is not None:
            pulumi.set(__self__, "left", left)
        if right is not None:
            pulumi.set(__self__, "right", right)
        if top is not None:
            pulumi.set(__self__, "top", top)

    @property
    @pulumi.getter
    def bottom(self) -> Optional[str]:
        return pulumi.get(self, "bottom")

    @property
    @pulumi.getter
    def left(self) -> Optional[str]:
        return pulumi.get(self, "left")

    @property
    @pulumi.getter
    def right(self) -> Optional[str]:
        return pulumi.get(self, "right")

    @property
    @pulumi.getter
    def top(self) -> Optional[str]:
        return pulumi.get(self, "top")


@pulumi.output_type
class StringFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nullValueFormatConfiguration":
            suggest = "null_value_format_configuration"
        elif key == "numericFormatConfiguration":
            suggest = "numeric_format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StringFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StringFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StringFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 null_value_format_configuration: Optional['outputs.NullValueFormatConfiguration'] = None,
                 numeric_format_configuration: Optional['outputs.NumericFormatConfiguration'] = None):
        if null_value_format_configuration is not None:
            pulumi.set(__self__, "null_value_format_configuration", null_value_format_configuration)
        if numeric_format_configuration is not None:
            pulumi.set(__self__, "numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional['outputs.NullValueFormatConfiguration']:
        return pulumi.get(self, "null_value_format_configuration")

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional['outputs.NumericFormatConfiguration']:
        return pulumi.get(self, "numeric_format_configuration")


@pulumi.output_type
class StringParameterDeclaration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterValueType":
            suggest = "parameter_value_type"
        elif key == "defaultValues":
            suggest = "default_values"
        elif key == "valuesWhenUnset":
            suggest = "values_when_unset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StringParameterDeclaration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StringParameterDeclaration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StringParameterDeclaration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 parameter_value_type: str,
                 default_values: Optional['outputs.StringParameterDeclarationDefaultValues'] = None,
                 values_when_unset: Optional['outputs.StringParameterDeclarationValuesWhenUnset'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameter_value_type", parameter_value_type)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if values_when_unset is not None:
            pulumi.set(__self__, "values_when_unset", values_when_unset)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> str:
        return pulumi.get(self, "parameter_value_type")

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional['outputs.StringParameterDeclarationDefaultValues']:
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter(name="valuesWhenUnset")
    def values_when_unset(self) -> Optional['outputs.StringParameterDeclarationValuesWhenUnset']:
        return pulumi.get(self, "values_when_unset")


@pulumi.output_type
class StringParameterDeclarationDefaultValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamicValue":
            suggest = "dynamic_value"
        elif key == "staticValues":
            suggest = "static_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StringParameterDeclarationDefaultValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StringParameterDeclarationDefaultValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StringParameterDeclarationDefaultValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dynamic_value: Optional['outputs.DynamicValue'] = None,
                 static_values: Optional[Sequence[str]] = None):
        if dynamic_value is not None:
            pulumi.set(__self__, "dynamic_value", dynamic_value)
        if static_values is not None:
            pulumi.set(__self__, "static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional['outputs.DynamicValue']:
        return pulumi.get(self, "dynamic_value")

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "static_values")


@pulumi.output_type
class StringParameterDeclarationValuesWhenUnset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customValue":
            suggest = "custom_value"
        elif key == "valueWhenUnsetOption":
            suggest = "value_when_unset_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StringParameterDeclarationValuesWhenUnset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StringParameterDeclarationValuesWhenUnset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StringParameterDeclarationValuesWhenUnset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_value: Optional[str] = None,
                 value_when_unset_option: Optional[str] = None):
        if custom_value is not None:
            pulumi.set(__self__, "custom_value", custom_value)
        if value_when_unset_option is not None:
            pulumi.set(__self__, "value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_value")

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[str]:
        return pulumi.get(self, "value_when_unset_option")


@pulumi.output_type
class Subtitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatText":
            suggest = "format_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Subtitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Subtitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Subtitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_text: Optional['outputs.SubtitleFormatText'] = None,
                 visibility: Optional[str] = None):
        if format_text is not None:
            pulumi.set(__self__, "format_text", format_text)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="formatText")
    def format_text(self) -> Optional['outputs.SubtitleFormatText']:
        return pulumi.get(self, "format_text")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class SubtitleFormatText(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "plainText":
            suggest = "plain_text"
        elif key == "richText":
            suggest = "rich_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubtitleFormatText. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubtitleFormatText.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubtitleFormatText.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plain_text: Optional[str] = None,
                 rich_text: Optional[str] = None):
        if plain_text is not None:
            pulumi.set(__self__, "plain_text", plain_text)
        if rich_text is not None:
            pulumi.set(__self__, "rich_text", rich_text)

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[str]:
        return pulumi.get(self, "plain_text")

    @property
    @pulumi.getter(name="richText")
    def rich_text(self) -> Optional[str]:
        return pulumi.get(self, "rich_text")


@pulumi.output_type
class TableBorderOptions(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 style: Optional[str] = None,
                 thickness: Optional[int] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if thickness is not None:
            pulumi.set(__self__, "thickness", thickness)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter
    def thickness(self) -> Optional[int]:
        return pulumi.get(self, "thickness")


@pulumi.output_type
class TemplateDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetConfigurations":
            suggest = "data_set_configurations"
        elif key == "analysisDefaults":
            suggest = "analysis_defaults"
        elif key == "calculatedFields":
            suggest = "calculated_fields"
        elif key == "columnConfigurations":
            suggest = "column_configurations"
        elif key == "filterGroups":
            suggest = "filter_groups"
        elif key == "parametersDeclarations":
            suggest = "parameters_declarations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_configurations: Sequence['outputs.TemplateDefinitionDataSetConfiguration'],
                 analysis_defaults: Optional['outputs.TemplateDefinitionAnalysisDefaults'] = None,
                 calculated_fields: Optional[Sequence['outputs.TemplateDefinitionCalculatedField']] = None,
                 column_configurations: Optional[Sequence['outputs.TemplateDefinitionColumnConfiguration']] = None,
                 filter_groups: Optional[Sequence['outputs.TemplateDefinitionFilterGroup']] = None,
                 parameters_declarations: Optional[Sequence['outputs.TemplateDefinitionParametersDeclaration']] = None,
                 sheets: Optional[Sequence['outputs.TemplateDefinitionSheet']] = None):
        """
        :param Sequence['TemplateDefinitionDataSetConfigurationArgs'] data_set_configurations: A list of dataset configurations. These configurations define the required columns for each dataset used within a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetConfiguration.html).
        :param 'TemplateDefinitionAnalysisDefaultsArgs' analysis_defaults: The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        :param Sequence['TemplateDefinitionCalculatedFieldArgs'] calculated_fields: A list of calculated field definitions for the template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        :param Sequence['TemplateDefinitionColumnConfigurationArgs'] column_configurations: A list of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template. See AWS API Documentation for complete description.
        :param Sequence['TemplateDefinitionFilterGroupArgs'] filter_groups: A list of filter definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        :param Sequence['TemplateDefinitionParametersDeclarationArgs'] parameters_declarations: A list of parameter declarations for a template. Parameters are named variables that can transfer a value for use by an action or an object. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ParameterDeclaration.html). For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the Amazon QuickSight User Guide.
        :param Sequence['TemplateDefinitionSheetArgs'] sheets: A list of sheet definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        pulumi.set(__self__, "data_set_configurations", data_set_configurations)
        if analysis_defaults is not None:
            pulumi.set(__self__, "analysis_defaults", analysis_defaults)
        if calculated_fields is not None:
            pulumi.set(__self__, "calculated_fields", calculated_fields)
        if column_configurations is not None:
            pulumi.set(__self__, "column_configurations", column_configurations)
        if filter_groups is not None:
            pulumi.set(__self__, "filter_groups", filter_groups)
        if parameters_declarations is not None:
            pulumi.set(__self__, "parameters_declarations", parameters_declarations)
        if sheets is not None:
            pulumi.set(__self__, "sheets", sheets)

    @property
    @pulumi.getter(name="dataSetConfigurations")
    def data_set_configurations(self) -> Sequence['outputs.TemplateDefinitionDataSetConfiguration']:
        """
        A list of dataset configurations. These configurations define the required columns for each dataset used within a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DataSetConfiguration.html).
        """
        return pulumi.get(self, "data_set_configurations")

    @property
    @pulumi.getter(name="analysisDefaults")
    def analysis_defaults(self) -> Optional['outputs.TemplateDefinitionAnalysisDefaults']:
        """
        The configuration for default analysis settings. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_AnalysisDefaults.html).
        """
        return pulumi.get(self, "analysis_defaults")

    @property
    @pulumi.getter(name="calculatedFields")
    def calculated_fields(self) -> Optional[Sequence['outputs.TemplateDefinitionCalculatedField']]:
        """
        A list of calculated field definitions for the template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedField.html).
        """
        return pulumi.get(self, "calculated_fields")

    @property
    @pulumi.getter(name="columnConfigurations")
    def column_configurations(self) -> Optional[Sequence['outputs.TemplateDefinitionColumnConfiguration']]:
        """
        A list of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template. See AWS API Documentation for complete description.
        """
        return pulumi.get(self, "column_configurations")

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Optional[Sequence['outputs.TemplateDefinitionFilterGroup']]:
        """
        A list of filter definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_FilterGroup.html). For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in Amazon QuickSight User Guide.
        """
        return pulumi.get(self, "filter_groups")

    @property
    @pulumi.getter(name="parametersDeclarations")
    def parameters_declarations(self) -> Optional[Sequence['outputs.TemplateDefinitionParametersDeclaration']]:
        """
        A list of parameter declarations for a template. Parameters are named variables that can transfer a value for use by an action or an object. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ParameterDeclaration.html). For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the Amazon QuickSight User Guide.
        """
        return pulumi.get(self, "parameters_declarations")

    @property
    @pulumi.getter
    def sheets(self) -> Optional[Sequence['outputs.TemplateDefinitionSheet']]:
        """
        A list of sheet definitions for a template. See [AWS API Documentation for complete description](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_SheetDefinition.html).
        """
        return pulumi.get(self, "sheets")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaults(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultNewSheetConfiguration":
            suggest = "default_new_sheet_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaults. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaults.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaults.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_new_sheet_configuration: 'outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfiguration'):
        pulumi.set(__self__, "default_new_sheet_configuration", default_new_sheet_configuration)

    @property
    @pulumi.getter(name="defaultNewSheetConfiguration")
    def default_new_sheet_configuration(self) -> 'outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfiguration':
        return pulumi.get(self, "default_new_sheet_configuration")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interactiveLayoutConfiguration":
            suggest = "interactive_layout_configuration"
        elif key == "paginatedLayoutConfiguration":
            suggest = "paginated_layout_configuration"
        elif key == "sheetContentType":
            suggest = "sheet_content_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interactive_layout_configuration: Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration'] = None,
                 paginated_layout_configuration: Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration'] = None,
                 sheet_content_type: Optional[str] = None):
        if interactive_layout_configuration is not None:
            pulumi.set(__self__, "interactive_layout_configuration", interactive_layout_configuration)
        if paginated_layout_configuration is not None:
            pulumi.set(__self__, "paginated_layout_configuration", paginated_layout_configuration)
        if sheet_content_type is not None:
            pulumi.set(__self__, "sheet_content_type", sheet_content_type)

    @property
    @pulumi.getter(name="interactiveLayoutConfiguration")
    def interactive_layout_configuration(self) -> Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration']:
        return pulumi.get(self, "interactive_layout_configuration")

    @property
    @pulumi.getter(name="paginatedLayoutConfiguration")
    def paginated_layout_configuration(self) -> Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration']:
        return pulumi.get(self, "paginated_layout_configuration")

    @property
    @pulumi.getter(name="sheetContentType")
    def sheet_content_type(self) -> Optional[str]:
        return pulumi.get(self, "sheet_content_type")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "freeForm":
            suggest = "free_form"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 free_form: Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm'] = None,
                 grid: Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid'] = None):
        if free_form is not None:
            pulumi.set(__self__, "free_form", free_form)
        if grid is not None:
            pulumi.set(__self__, "grid", grid)

    @property
    @pulumi.getter(name="freeForm")
    def free_form(self) -> Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm']:
        return pulumi.get(self, "free_form")

    @property
    @pulumi.getter
    def grid(self) -> Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid']:
        return pulumi.get(self, "grid")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeForm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canvas_size_options: 'outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions'):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> 'outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions':
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "screenCanvasSizeOptions":
            suggest = "screen_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 screen_canvas_size_options: Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions'] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions']:
        return pulumi.get(self, "screen_canvas_size_options")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optimizedViewPortWidth":
            suggest = "optimized_view_port_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationFreeFormCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optimized_view_port_width: str):
        pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> str:
        return pulumi.get(self, "optimized_view_port_width")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGrid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canvas_size_options: 'outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions'):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> 'outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions':
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "screenCanvasSizeOptions":
            suggest = "screen_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 screen_canvas_size_options: Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions'] = None):
        if screen_canvas_size_options is not None:
            pulumi.set(__self__, "screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions']:
        return pulumi.get(self, "screen_canvas_size_options")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resizeOption":
            suggest = "resize_option"
        elif key == "optimizedViewPortWidth":
            suggest = "optimized_view_port_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationInteractiveLayoutConfigurationGridCanvasSizeOptionsScreenCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resize_option: str,
                 optimized_view_port_width: Optional[str] = None):
        pulumi.set(__self__, "resize_option", resize_option)
        if optimized_view_port_width is not None:
            pulumi.set(__self__, "optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> str:
        return pulumi.get(self, "resize_option")

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[str]:
        return pulumi.get(self, "optimized_view_port_width")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionBased":
            suggest = "section_based"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 section_based: Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased'] = None):
        if section_based is not None:
            pulumi.set(__self__, "section_based", section_based)

    @property
    @pulumi.getter(name="sectionBased")
    def section_based(self) -> Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased']:
        return pulumi.get(self, "section_based")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canvasSizeOptions":
            suggest = "canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBased.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canvas_size_options: 'outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions'):
        pulumi.set(__self__, "canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> 'outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions':
        return pulumi.get(self, "canvas_size_options")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paperCanvasSizeOptions":
            suggest = "paper_canvas_size_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 paper_canvas_size_options: Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions'] = None):
        if paper_canvas_size_options is not None:
            pulumi.set(__self__, "paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional['outputs.TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions']:
        return pulumi.get(self, "paper_canvas_size_options")


@pulumi.output_type
class TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paperMargin":
            suggest = "paper_margin"
        elif key == "paperOrientation":
            suggest = "paper_orientation"
        elif key == "paperSize":
            suggest = "paper_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionAnalysisDefaultsDefaultNewSheetConfigurationPaginatedLayoutConfigurationSectionBasedCanvasSizeOptionsPaperCanvasSizeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 paper_margin: Optional['outputs.Spacing'] = None,
                 paper_orientation: Optional[str] = None,
                 paper_size: Optional[str] = None):
        if paper_margin is not None:
            pulumi.set(__self__, "paper_margin", paper_margin)
        if paper_orientation is not None:
            pulumi.set(__self__, "paper_orientation", paper_orientation)
        if paper_size is not None:
            pulumi.set(__self__, "paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional['outputs.Spacing']:
        return pulumi.get(self, "paper_margin")

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[str]:
        return pulumi.get(self, "paper_orientation")

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[str]:
        return pulumi.get(self, "paper_size")


@pulumi.output_type
class TemplateDefinitionCalculatedField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifier":
            suggest = "data_set_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionCalculatedField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionCalculatedField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionCalculatedField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_identifier: str,
                 expression: str,
                 name: str):
        """
        :param str name: Display name for the template.
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> str:
        return pulumi.get(self, "data_set_identifier")

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the template.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TemplateDefinitionColumnConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionColumnConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionColumnConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionColumnConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 format_configuration: Optional['outputs.TemplateDefinitionColumnConfigurationFormatConfiguration'] = None,
                 role: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.TemplateDefinitionColumnConfigurationFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")


@pulumi.output_type
class TemplateDefinitionColumnConfigurationFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeFormatConfiguration":
            suggest = "date_time_format_configuration"
        elif key == "numberFormatConfiguration":
            suggest = "number_format_configuration"
        elif key == "stringFormatConfiguration":
            suggest = "string_format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionColumnConfigurationFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionColumnConfigurationFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionColumnConfigurationFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None,
                 number_format_configuration: Optional['outputs.NumberFormatConfiguration'] = None,
                 string_format_configuration: Optional['outputs.StringFormatConfiguration'] = None):
        if date_time_format_configuration is not None:
            pulumi.set(__self__, "date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            pulumi.set(__self__, "number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            pulumi.set(__self__, "string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "date_time_format_configuration")

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "number_format_configuration")

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "string_format_configuration")


@pulumi.output_type
class TemplateDefinitionDataSetConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnGroupSchemaLists":
            suggest = "column_group_schema_lists"
        elif key == "dataSetSchema":
            suggest = "data_set_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionDataSetConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionDataSetConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionDataSetConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_group_schema_lists: Optional[Sequence['outputs.TemplateDefinitionDataSetConfigurationColumnGroupSchemaList']] = None,
                 data_set_schema: Optional['outputs.TemplateDefinitionDataSetConfigurationDataSetSchema'] = None,
                 placeholder: Optional[str] = None):
        if column_group_schema_lists is not None:
            pulumi.set(__self__, "column_group_schema_lists", column_group_schema_lists)
        if data_set_schema is not None:
            pulumi.set(__self__, "data_set_schema", data_set_schema)
        if placeholder is not None:
            pulumi.set(__self__, "placeholder", placeholder)

    @property
    @pulumi.getter(name="columnGroupSchemaLists")
    def column_group_schema_lists(self) -> Optional[Sequence['outputs.TemplateDefinitionDataSetConfigurationColumnGroupSchemaList']]:
        return pulumi.get(self, "column_group_schema_lists")

    @property
    @pulumi.getter(name="dataSetSchema")
    def data_set_schema(self) -> Optional['outputs.TemplateDefinitionDataSetConfigurationDataSetSchema']:
        return pulumi.get(self, "data_set_schema")

    @property
    @pulumi.getter
    def placeholder(self) -> Optional[str]:
        return pulumi.get(self, "placeholder")


@pulumi.output_type
class TemplateDefinitionDataSetConfigurationColumnGroupSchemaList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnGroupColumnSchemaLists":
            suggest = "column_group_column_schema_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionDataSetConfigurationColumnGroupSchemaList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionDataSetConfigurationColumnGroupSchemaList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionDataSetConfigurationColumnGroupSchemaList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_group_column_schema_lists: Optional[Sequence['outputs.TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaList']] = None,
                 name: Optional[str] = None):
        """
        :param str name: Display name for the template.
        """
        if column_group_column_schema_lists is not None:
            pulumi.set(__self__, "column_group_column_schema_lists", column_group_column_schema_lists)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="columnGroupColumnSchemaLists")
    def column_group_column_schema_lists(self) -> Optional[Sequence['outputs.TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaList']]:
        return pulumi.get(self, "column_group_column_schema_lists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the template.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TemplateDefinitionDataSetConfigurationColumnGroupSchemaListColumnGroupColumnSchemaList(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Display name for the template.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the template.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TemplateDefinitionDataSetConfigurationDataSetSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnSchemaLists":
            suggest = "column_schema_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionDataSetConfigurationDataSetSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionDataSetConfigurationDataSetSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionDataSetConfigurationDataSetSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_schema_lists: Optional[Sequence['outputs.TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaList']] = None):
        if column_schema_lists is not None:
            pulumi.set(__self__, "column_schema_lists", column_schema_lists)

    @property
    @pulumi.getter(name="columnSchemaLists")
    def column_schema_lists(self) -> Optional[Sequence['outputs.TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaList']]:
        return pulumi.get(self, "column_schema_lists")


@pulumi.output_type
class TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"
        elif key == "geographicRole":
            suggest = "geographic_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionDataSetConfigurationDataSetSchemaColumnSchemaList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: Optional[str] = None,
                 geographic_role: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str name: Display name for the template.
        """
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if geographic_role is not None:
            pulumi.set(__self__, "geographic_role", geographic_role)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="geographicRole")
    def geographic_role(self) -> Optional[str]:
        return pulumi.get(self, "geographic_role")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the template.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TemplateDefinitionFilterGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crossDataset":
            suggest = "cross_dataset"
        elif key == "filterGroupId":
            suggest = "filter_group_id"
        elif key == "scopeConfiguration":
            suggest = "scope_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionFilterGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionFilterGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionFilterGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cross_dataset: str,
                 filter_group_id: str,
                 filters: Sequence['outputs.Filters'],
                 scope_configuration: 'outputs.TemplateDefinitionFilterGroupScopeConfiguration',
                 status: Optional[str] = None):
        """
        :param str status: The template creation status.
        """
        pulumi.set(__self__, "cross_dataset", cross_dataset)
        pulumi.set(__self__, "filter_group_id", filter_group_id)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "scope_configuration", scope_configuration)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="crossDataset")
    def cross_dataset(self) -> str:
        return pulumi.get(self, "cross_dataset")

    @property
    @pulumi.getter(name="filterGroupId")
    def filter_group_id(self) -> str:
        return pulumi.get(self, "filter_group_id")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.Filters']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="scopeConfiguration")
    def scope_configuration(self) -> 'outputs.TemplateDefinitionFilterGroupScopeConfiguration':
        return pulumi.get(self, "scope_configuration")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The template creation status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class TemplateDefinitionFilterGroupScopeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectedSheets":
            suggest = "selected_sheets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionFilterGroupScopeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionFilterGroupScopeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionFilterGroupScopeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 selected_sheets: Optional['outputs.TemplateDefinitionFilterGroupScopeConfigurationSelectedSheets'] = None):
        if selected_sheets is not None:
            pulumi.set(__self__, "selected_sheets", selected_sheets)

    @property
    @pulumi.getter(name="selectedSheets")
    def selected_sheets(self) -> Optional['outputs.TemplateDefinitionFilterGroupScopeConfigurationSelectedSheets']:
        return pulumi.get(self, "selected_sheets")


@pulumi.output_type
class TemplateDefinitionFilterGroupScopeConfigurationSelectedSheets(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetVisualScopingConfigurations":
            suggest = "sheet_visual_scoping_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionFilterGroupScopeConfigurationSelectedSheets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionFilterGroupScopeConfigurationSelectedSheets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionFilterGroupScopeConfigurationSelectedSheets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sheet_visual_scoping_configurations: Optional[Sequence['outputs.TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration']] = None):
        if sheet_visual_scoping_configurations is not None:
            pulumi.set(__self__, "sheet_visual_scoping_configurations", sheet_visual_scoping_configurations)

    @property
    @pulumi.getter(name="sheetVisualScopingConfigurations")
    def sheet_visual_scoping_configurations(self) -> Optional[Sequence['outputs.TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration']]:
        return pulumi.get(self, "sheet_visual_scoping_configurations")


@pulumi.output_type
class TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetId":
            suggest = "sheet_id"
        elif key == "visualIds":
            suggest = "visual_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionFilterGroupScopeConfigurationSelectedSheetsSheetVisualScopingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope: str,
                 sheet_id: str,
                 visual_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sheet_id", sheet_id)
        if visual_ids is not None:
            pulumi.set(__self__, "visual_ids", visual_ids)

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> str:
        return pulumi.get(self, "sheet_id")

    @property
    @pulumi.getter(name="visualIds")
    def visual_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "visual_ids")


@pulumi.output_type
class TemplateDefinitionParametersDeclaration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeParameterDeclaration":
            suggest = "date_time_parameter_declaration"
        elif key == "decimalParameterDeclaration":
            suggest = "decimal_parameter_declaration"
        elif key == "integerParameterDeclaration":
            suggest = "integer_parameter_declaration"
        elif key == "stringParameterDeclaration":
            suggest = "string_parameter_declaration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionParametersDeclaration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionParametersDeclaration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionParametersDeclaration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_parameter_declaration: Optional['outputs.DateTimeParameterDeclaration'] = None,
                 decimal_parameter_declaration: Optional['outputs.DecimalParameterDeclaration'] = None,
                 integer_parameter_declaration: Optional['outputs.IntegerParameterDeclaration'] = None,
                 string_parameter_declaration: Optional['outputs.StringParameterDeclaration'] = None):
        if date_time_parameter_declaration is not None:
            pulumi.set(__self__, "date_time_parameter_declaration", date_time_parameter_declaration)
        if decimal_parameter_declaration is not None:
            pulumi.set(__self__, "decimal_parameter_declaration", decimal_parameter_declaration)
        if integer_parameter_declaration is not None:
            pulumi.set(__self__, "integer_parameter_declaration", integer_parameter_declaration)
        if string_parameter_declaration is not None:
            pulumi.set(__self__, "string_parameter_declaration", string_parameter_declaration)

    @property
    @pulumi.getter(name="dateTimeParameterDeclaration")
    def date_time_parameter_declaration(self) -> Optional['outputs.DateTimeParameterDeclaration']:
        return pulumi.get(self, "date_time_parameter_declaration")

    @property
    @pulumi.getter(name="decimalParameterDeclaration")
    def decimal_parameter_declaration(self) -> Optional['outputs.DecimalParameterDeclaration']:
        return pulumi.get(self, "decimal_parameter_declaration")

    @property
    @pulumi.getter(name="integerParameterDeclaration")
    def integer_parameter_declaration(self) -> Optional['outputs.IntegerParameterDeclaration']:
        return pulumi.get(self, "integer_parameter_declaration")

    @property
    @pulumi.getter(name="stringParameterDeclaration")
    def string_parameter_declaration(self) -> Optional['outputs.StringParameterDeclaration']:
        return pulumi.get(self, "string_parameter_declaration")


@pulumi.output_type
class TemplateDefinitionSheet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetId":
            suggest = "sheet_id"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "filterControls":
            suggest = "filter_controls"
        elif key == "parameterControls":
            suggest = "parameter_controls"
        elif key == "sheetControlLayouts":
            suggest = "sheet_control_layouts"
        elif key == "textBoxes":
            suggest = "text_boxes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sheet_id: str,
                 content_type: Optional[str] = None,
                 description: Optional[str] = None,
                 filter_controls: Optional[Sequence['outputs.FilterControls']] = None,
                 layouts: Optional['outputs.Layouts'] = None,
                 name: Optional[str] = None,
                 parameter_controls: Optional[Sequence['outputs.TemplateDefinitionSheetParameterControl']] = None,
                 sheet_control_layouts: Optional['outputs.TemplateDefinitionSheetSheetControlLayouts'] = None,
                 text_boxes: Optional[Sequence['outputs.TemplateDefinitionSheetTextBox']] = None,
                 title: Optional[str] = None,
                 visuals: Optional[Sequence['outputs.Visuals']] = None):
        """
        :param str name: Display name for the template.
        """
        pulumi.set(__self__, "sheet_id", sheet_id)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter_controls is not None:
            pulumi.set(__self__, "filter_controls", filter_controls)
        if layouts is not None:
            pulumi.set(__self__, "layouts", layouts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_controls is not None:
            pulumi.set(__self__, "parameter_controls", parameter_controls)
        if sheet_control_layouts is not None:
            pulumi.set(__self__, "sheet_control_layouts", sheet_control_layouts)
        if text_boxes is not None:
            pulumi.set(__self__, "text_boxes", text_boxes)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visuals is not None:
            pulumi.set(__self__, "visuals", visuals)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> str:
        return pulumi.get(self, "sheet_id")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="filterControls")
    def filter_controls(self) -> Optional[Sequence['outputs.FilterControls']]:
        return pulumi.get(self, "filter_controls")

    @property
    @pulumi.getter
    def layouts(self) -> Optional['outputs.Layouts']:
        return pulumi.get(self, "layouts")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parameterControls")
    def parameter_controls(self) -> Optional[Sequence['outputs.TemplateDefinitionSheetParameterControl']]:
        return pulumi.get(self, "parameter_controls")

    @property
    @pulumi.getter(name="sheetControlLayouts")
    def sheet_control_layouts(self) -> Optional['outputs.TemplateDefinitionSheetSheetControlLayouts']:
        return pulumi.get(self, "sheet_control_layouts")

    @property
    @pulumi.getter(name="textBoxes")
    def text_boxes(self) -> Optional[Sequence['outputs.TemplateDefinitionSheetTextBox']]:
        return pulumi.get(self, "text_boxes")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visuals(self) -> Optional[Sequence['outputs.Visuals']]:
        return pulumi.get(self, "visuals")


@pulumi.output_type
class TemplateDefinitionSheetParameterControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimePicker":
            suggest = "date_time_picker"
        elif key == "textArea":
            suggest = "text_area"
        elif key == "textField":
            suggest = "text_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_picker: Optional['outputs.TemplateDefinitionSheetParameterControlDateTimePicker'] = None,
                 dropdown: Optional['outputs.TemplateDefinitionSheetParameterControlDropdown'] = None,
                 list: Optional['outputs.TemplateDefinitionSheetParameterControlList'] = None,
                 slider: Optional['outputs.TemplateDefinitionSheetParameterControlSlider'] = None,
                 text_area: Optional['outputs.TemplateDefinitionSheetParameterControlTextArea'] = None,
                 text_field: Optional['outputs.TemplateDefinitionSheetParameterControlTextField'] = None):
        if date_time_picker is not None:
            pulumi.set(__self__, "date_time_picker", date_time_picker)
        if dropdown is not None:
            pulumi.set(__self__, "dropdown", dropdown)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if slider is not None:
            pulumi.set(__self__, "slider", slider)
        if text_area is not None:
            pulumi.set(__self__, "text_area", text_area)
        if text_field is not None:
            pulumi.set(__self__, "text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlDateTimePicker']:
        return pulumi.get(self, "date_time_picker")

    @property
    @pulumi.getter
    def dropdown(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlDropdown']:
        return pulumi.get(self, "dropdown")

    @property
    @pulumi.getter
    def list(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlList']:
        return pulumi.get(self, "list")

    @property
    @pulumi.getter
    def slider(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlSlider']:
        return pulumi.get(self, "slider")

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlTextArea']:
        return pulumi.get(self, "text_area")

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlTextField']:
        return pulumi.get(self, "text_field")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlDateTimePicker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlDateTimePicker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlDateTimePicker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlDateTimePicker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 display_options: Optional['outputs.TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptions'] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeFormat":
            suggest = "date_time_format"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlDateTimePickerDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_format: Optional[str] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if date_time_format is not None:
            pulumi.set(__self__, "date_time_format", date_time_format)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[str]:
        return pulumi.get(self, "date_time_format")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlDropdown(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "cascadingControlConfiguration":
            suggest = "cascading_control_configuration"
        elif key == "displayOptions":
            suggest = "display_options"
        elif key == "selectableValues":
            suggest = "selectable_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlDropdown. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlDropdown.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlDropdown.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 cascading_control_configuration: Optional['outputs.CascadingControlConfiguration'] = None,
                 display_options: Optional['outputs.TemplateDefinitionSheetParameterControlDropdownDisplayOptions'] = None,
                 selectable_values: Optional['outputs.TemplateDefinitionSheetParameterControlDropdownSelectableValues'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional['outputs.CascadingControlConfiguration']:
        return pulumi.get(self, "cascading_control_configuration")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlDropdownDisplayOptions']:
        return pulumi.get(self, "display_options")

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlDropdownSelectableValues']:
        return pulumi.get(self, "selectable_values")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlDropdownDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectAllOptions":
            suggest = "select_all_options"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlDropdownDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlDropdownDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlDropdownDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 select_all_options: Optional['outputs.SelectAllOptions'] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "select_all_options")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlDropdownSelectableValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkToDataSetColumn":
            suggest = "link_to_data_set_column"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlDropdownSelectableValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlDropdownSelectableValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlDropdownSelectableValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_to_data_set_column: Optional['outputs.Column'] = None,
                 values: Optional[Sequence[str]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional['outputs.Column']:
        return pulumi.get(self, "link_to_data_set_column")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "cascadingControlConfiguration":
            suggest = "cascading_control_configuration"
        elif key == "displayOptions":
            suggest = "display_options"
        elif key == "selectableValues":
            suggest = "selectable_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 cascading_control_configuration: Optional['outputs.CascadingControlConfiguration'] = None,
                 display_options: Optional['outputs.TemplateDefinitionSheetParameterControlListDisplayOptions'] = None,
                 selectable_values: Optional['outputs.TemplateDefinitionSheetParameterControlListSelectableValues'] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if cascading_control_configuration is not None:
            pulumi.set(__self__, "cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)
        if selectable_values is not None:
            pulumi.set(__self__, "selectable_values", selectable_values)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional['outputs.CascadingControlConfiguration']:
        return pulumi.get(self, "cascading_control_configuration")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlListDisplayOptions']:
        return pulumi.get(self, "display_options")

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlListSelectableValues']:
        return pulumi.get(self, "selectable_values")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlListDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "searchOptions":
            suggest = "search_options"
        elif key == "selectAllOptions":
            suggest = "select_all_options"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlListDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlListDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlListDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 search_options: Optional['outputs.SelectAllOptions'] = None,
                 select_all_options: Optional['outputs.SelectAllOptions'] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if search_options is not None:
            pulumi.set(__self__, "search_options", search_options)
        if select_all_options is not None:
            pulumi.set(__self__, "select_all_options", select_all_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "search_options")

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "select_all_options")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlListSelectableValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkToDataSetColumn":
            suggest = "link_to_data_set_column"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlListSelectableValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlListSelectableValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlListSelectableValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_to_data_set_column: Optional['outputs.Column'] = None,
                 values: Optional[Sequence[str]] = None):
        if link_to_data_set_column is not None:
            pulumi.set(__self__, "link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional['outputs.Column']:
        return pulumi.get(self, "link_to_data_set_column")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlSlider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumValue":
            suggest = "maximum_value"
        elif key == "minimumValue":
            suggest = "minimum_value"
        elif key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "stepSize":
            suggest = "step_size"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlSlider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlSlider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlSlider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_value: float,
                 minimum_value: float,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 step_size: float,
                 title: str,
                 display_options: Optional['outputs.TemplateDefinitionSheetParameterControlSliderDisplayOptions'] = None):
        pulumi.set(__self__, "maximum_value", maximum_value)
        pulumi.set(__self__, "minimum_value", minimum_value)
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "step_size", step_size)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> float:
        return pulumi.get(self, "maximum_value")

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> float:
        return pulumi.get(self, "minimum_value")

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> float:
        return pulumi.get(self, "step_size")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TemplateDefinitionSheetParameterControlSliderDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlSliderDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlSliderDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlSliderDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlSliderDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlTextArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlTextArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlTextArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlTextArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 delimiter: Optional[str] = None,
                 display_options: Optional['outputs.TextAreaControlDisplayOptions'] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TextAreaControlDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class TemplateDefinitionSheetParameterControlTextField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterControlId":
            suggest = "parameter_control_id"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"
        elif key == "displayOptions":
            suggest = "display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetParameterControlTextField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetParameterControlTextField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetParameterControlTextField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_control_id: str,
                 source_parameter_name: str,
                 title: str,
                 display_options: Optional['outputs.TextAreaControlDisplayOptions'] = None):
        pulumi.set(__self__, "parameter_control_id", parameter_control_id)
        pulumi.set(__self__, "source_parameter_name", source_parameter_name)
        pulumi.set(__self__, "title", title)
        if display_options is not None:
            pulumi.set(__self__, "display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> str:
        return pulumi.get(self, "parameter_control_id")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> str:
        return pulumi.get(self, "source_parameter_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional['outputs.TextAreaControlDisplayOptions']:
        return pulumi.get(self, "display_options")


@pulumi.output_type
class TemplateDefinitionSheetSheetControlLayouts(dict):
    def __init__(__self__, *,
                 configuration: 'outputs.TemplateDefinitionSheetSheetControlLayoutsConfiguration'):
        pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> 'outputs.TemplateDefinitionSheetSheetControlLayoutsConfiguration':
        return pulumi.get(self, "configuration")


@pulumi.output_type
class TemplateDefinitionSheetSheetControlLayoutsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gridLayout":
            suggest = "grid_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetSheetControlLayoutsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetSheetControlLayoutsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetSheetControlLayoutsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grid_layout: Optional['outputs.GridLayout'] = None):
        if grid_layout is not None:
            pulumi.set(__self__, "grid_layout", grid_layout)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional['outputs.GridLayout']:
        return pulumi.get(self, "grid_layout")


@pulumi.output_type
class TemplateDefinitionSheetTextBox(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sheetTextBoxId":
            suggest = "sheet_text_box_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinitionSheetTextBox. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinitionSheetTextBox.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinitionSheetTextBox.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sheet_text_box_id: str,
                 content: Optional[str] = None):
        pulumi.set(__self__, "sheet_text_box_id", sheet_text_box_id)
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter(name="sheetTextBoxId")
    def sheet_text_box_id(self) -> str:
        return pulumi.get(self, "sheet_text_box_id")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")


@pulumi.output_type
class TemplatePermission(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 principal: str):
        """
        :param Sequence[str] actions: List of IAM actions to grant or revoke permissions on.
        :param str principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def principal(self) -> str:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")


@pulumi.output_type
class TemplateSourceEntity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAnalysis":
            suggest = "source_analysis"
        elif key == "sourceTemplate":
            suggest = "source_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateSourceEntity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateSourceEntity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateSourceEntity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_analysis: Optional['outputs.TemplateSourceEntitySourceAnalysis'] = None,
                 source_template: Optional['outputs.TemplateSourceEntitySourceTemplate'] = None):
        """
        :param 'TemplateSourceEntitySourceAnalysisArgs' source_analysis: The source analysis, if it is based on an analysis.. Only one of `source_analysis` or `source_template` should be configured. See source_analysis.
        :param 'TemplateSourceEntitySourceTemplateArgs' source_template: The source template, if it is based on an template.. Only one of `source_analysis` or `source_template` should be configured. See source_template.
        """
        if source_analysis is not None:
            pulumi.set(__self__, "source_analysis", source_analysis)
        if source_template is not None:
            pulumi.set(__self__, "source_template", source_template)

    @property
    @pulumi.getter(name="sourceAnalysis")
    def source_analysis(self) -> Optional['outputs.TemplateSourceEntitySourceAnalysis']:
        """
        The source analysis, if it is based on an analysis.. Only one of `source_analysis` or `source_template` should be configured. See source_analysis.
        """
        return pulumi.get(self, "source_analysis")

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional['outputs.TemplateSourceEntitySourceTemplate']:
        """
        The source template, if it is based on an template.. Only one of `source_analysis` or `source_template` should be configured. See source_template.
        """
        return pulumi.get(self, "source_template")


@pulumi.output_type
class TemplateSourceEntitySourceAnalysis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetReferences":
            suggest = "data_set_references"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateSourceEntitySourceAnalysis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateSourceEntitySourceAnalysis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateSourceEntitySourceAnalysis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: str,
                 data_set_references: Sequence['outputs.TemplateSourceEntitySourceAnalysisDataSetReference']):
        """
        :param str arn: The Amazon Resource Name (ARN) of the resource.
        :param Sequence['TemplateSourceEntitySourceAnalysisDataSetReferenceArgs'] data_set_references: A list of dataset references used as placeholders in the template. See data_set_references.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "data_set_references", data_set_references)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="dataSetReferences")
    def data_set_references(self) -> Sequence['outputs.TemplateSourceEntitySourceAnalysisDataSetReference']:
        """
        A list of dataset references used as placeholders in the template. See data_set_references.
        """
        return pulumi.get(self, "data_set_references")


@pulumi.output_type
class TemplateSourceEntitySourceAnalysisDataSetReference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetArn":
            suggest = "data_set_arn"
        elif key == "dataSetPlaceholder":
            suggest = "data_set_placeholder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateSourceEntitySourceAnalysisDataSetReference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateSourceEntitySourceAnalysisDataSetReference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateSourceEntitySourceAnalysisDataSetReference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_arn: str,
                 data_set_placeholder: str):
        """
        :param str data_set_arn: Dataset Amazon Resource Name (ARN).
        :param str data_set_placeholder: Dataset placeholder.
        """
        pulumi.set(__self__, "data_set_arn", data_set_arn)
        pulumi.set(__self__, "data_set_placeholder", data_set_placeholder)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> str:
        """
        Dataset Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "data_set_arn")

    @property
    @pulumi.getter(name="dataSetPlaceholder")
    def data_set_placeholder(self) -> str:
        """
        Dataset placeholder.
        """
        return pulumi.get(self, "data_set_placeholder")


@pulumi.output_type
class TemplateSourceEntitySourceTemplate(dict):
    def __init__(__self__, *,
                 arn: str):
        """
        :param str arn: The Amazon Resource Name (ARN) of the resource.
        """
        pulumi.set(__self__, "arn", arn)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the resource.
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class TextAreaControlDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "placeholderOptions":
            suggest = "placeholder_options"
        elif key == "titleOptions":
            suggest = "title_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TextAreaControlDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TextAreaControlDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TextAreaControlDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 placeholder_options: Optional['outputs.SelectAllOptions'] = None,
                 title_options: Optional['outputs.LabelOptions'] = None):
        if placeholder_options is not None:
            pulumi.set(__self__, "placeholder_options", placeholder_options)
        if title_options is not None:
            pulumi.set(__self__, "title_options", title_options)

    @property
    @pulumi.getter(name="placeholderOptions")
    def placeholder_options(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "placeholder_options")

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional['outputs.LabelOptions']:
        return pulumi.get(self, "title_options")


@pulumi.output_type
class ThemeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataColorPalette":
            suggest = "data_color_palette"
        elif key == "uiColorPalette":
            suggest = "ui_color_palette"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThemeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThemeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThemeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_color_palette: Optional['outputs.ThemeConfigurationDataColorPalette'] = None,
                 sheet: Optional['outputs.ThemeConfigurationSheet'] = None,
                 typography: Optional['outputs.ThemeConfigurationTypography'] = None,
                 ui_color_palette: Optional['outputs.ThemeConfigurationUiColorPalette'] = None):
        """
        :param 'ThemeConfigurationDataColorPaletteArgs' data_color_palette: Color properties that apply to chart data colors. See data_color_palette.
        :param 'ThemeConfigurationSheetArgs' sheet: Display options related to sheets. See sheet.
        :param 'ThemeConfigurationTypographyArgs' typography: Determines the typography options. See typography.
        :param 'ThemeConfigurationUiColorPaletteArgs' ui_color_palette: Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
        """
        if data_color_palette is not None:
            pulumi.set(__self__, "data_color_palette", data_color_palette)
        if sheet is not None:
            pulumi.set(__self__, "sheet", sheet)
        if typography is not None:
            pulumi.set(__self__, "typography", typography)
        if ui_color_palette is not None:
            pulumi.set(__self__, "ui_color_palette", ui_color_palette)

    @property
    @pulumi.getter(name="dataColorPalette")
    def data_color_palette(self) -> Optional['outputs.ThemeConfigurationDataColorPalette']:
        """
        Color properties that apply to chart data colors. See data_color_palette.
        """
        return pulumi.get(self, "data_color_palette")

    @property
    @pulumi.getter
    def sheet(self) -> Optional['outputs.ThemeConfigurationSheet']:
        """
        Display options related to sheets. See sheet.
        """
        return pulumi.get(self, "sheet")

    @property
    @pulumi.getter
    def typography(self) -> Optional['outputs.ThemeConfigurationTypography']:
        """
        Determines the typography options. See typography.
        """
        return pulumi.get(self, "typography")

    @property
    @pulumi.getter(name="uiColorPalette")
    def ui_color_palette(self) -> Optional['outputs.ThemeConfigurationUiColorPalette']:
        """
        Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
        """
        return pulumi.get(self, "ui_color_palette")


@pulumi.output_type
class ThemeConfigurationDataColorPalette(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emptyFillColor":
            suggest = "empty_fill_color"
        elif key == "minMaxGradients":
            suggest = "min_max_gradients"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThemeConfigurationDataColorPalette. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThemeConfigurationDataColorPalette.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThemeConfigurationDataColorPalette.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 colors: Optional[Sequence[str]] = None,
                 empty_fill_color: Optional[str] = None,
                 min_max_gradients: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] colors: List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
        :param str empty_fill_color: The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
        :param Sequence[str] min_max_gradients: The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
        """
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if empty_fill_color is not None:
            pulumi.set(__self__, "empty_fill_color", empty_fill_color)
        if min_max_gradients is not None:
            pulumi.set(__self__, "min_max_gradients", min_max_gradients)

    @property
    @pulumi.getter
    def colors(self) -> Optional[Sequence[str]]:
        """
        List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
        """
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="emptyFillColor")
    def empty_fill_color(self) -> Optional[str]:
        """
        The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
        """
        return pulumi.get(self, "empty_fill_color")

    @property
    @pulumi.getter(name="minMaxGradients")
    def min_max_gradients(self) -> Optional[Sequence[str]]:
        """
        The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
        """
        return pulumi.get(self, "min_max_gradients")


@pulumi.output_type
class ThemeConfigurationSheet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tileLayout":
            suggest = "tile_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThemeConfigurationSheet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThemeConfigurationSheet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThemeConfigurationSheet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tile: Optional['outputs.ThemeConfigurationSheetTile'] = None,
                 tile_layout: Optional['outputs.ThemeConfigurationSheetTileLayout'] = None):
        """
        :param 'ThemeConfigurationSheetTileArgs' tile: The display options for tiles. See tile.
        :param 'ThemeConfigurationSheetTileLayoutArgs' tile_layout: The layout options for tiles. See tile_layout.
        """
        if tile is not None:
            pulumi.set(__self__, "tile", tile)
        if tile_layout is not None:
            pulumi.set(__self__, "tile_layout", tile_layout)

    @property
    @pulumi.getter
    def tile(self) -> Optional['outputs.ThemeConfigurationSheetTile']:
        """
        The display options for tiles. See tile.
        """
        return pulumi.get(self, "tile")

    @property
    @pulumi.getter(name="tileLayout")
    def tile_layout(self) -> Optional['outputs.ThemeConfigurationSheetTileLayout']:
        """
        The layout options for tiles. See tile_layout.
        """
        return pulumi.get(self, "tile_layout")


@pulumi.output_type
class ThemeConfigurationSheetTile(dict):
    def __init__(__self__, *,
                 border: Optional['outputs.ThemeConfigurationSheetTileBorder'] = None):
        """
        :param 'ThemeConfigurationSheetTileBorderArgs' border: The border around a tile. See border.
        """
        if border is not None:
            pulumi.set(__self__, "border", border)

    @property
    @pulumi.getter
    def border(self) -> Optional['outputs.ThemeConfigurationSheetTileBorder']:
        """
        The border around a tile. See border.
        """
        return pulumi.get(self, "border")


@pulumi.output_type
class ThemeConfigurationSheetTileBorder(dict):
    def __init__(__self__, *,
                 show: Optional[bool] = None):
        """
        :param bool show: The option to enable display of borders for visuals.
        """
        if show is not None:
            pulumi.set(__self__, "show", show)

    @property
    @pulumi.getter
    def show(self) -> Optional[bool]:
        """
        The option to enable display of borders for visuals.
        """
        return pulumi.get(self, "show")


@pulumi.output_type
class ThemeConfigurationSheetTileLayout(dict):
    def __init__(__self__, *,
                 gutter: Optional['outputs.ThemeConfigurationSheetTileLayoutGutter'] = None,
                 margin: Optional['outputs.ThemeConfigurationSheetTileLayoutMargin'] = None):
        """
        :param 'ThemeConfigurationSheetTileLayoutGutterArgs' gutter: The gutter settings that apply between tiles. See gutter.
        :param 'ThemeConfigurationSheetTileLayoutMarginArgs' margin: The margin settings that apply around the outside edge of sheets. See margin.
        """
        if gutter is not None:
            pulumi.set(__self__, "gutter", gutter)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)

    @property
    @pulumi.getter
    def gutter(self) -> Optional['outputs.ThemeConfigurationSheetTileLayoutGutter']:
        """
        The gutter settings that apply between tiles. See gutter.
        """
        return pulumi.get(self, "gutter")

    @property
    @pulumi.getter
    def margin(self) -> Optional['outputs.ThemeConfigurationSheetTileLayoutMargin']:
        """
        The margin settings that apply around the outside edge of sheets. See margin.
        """
        return pulumi.get(self, "margin")


@pulumi.output_type
class ThemeConfigurationSheetTileLayoutGutter(dict):
    def __init__(__self__, *,
                 show: Optional[bool] = None):
        """
        :param bool show: This Boolean value controls whether to display a gutter space between sheet tiles.
        """
        if show is not None:
            pulumi.set(__self__, "show", show)

    @property
    @pulumi.getter
    def show(self) -> Optional[bool]:
        """
        This Boolean value controls whether to display a gutter space between sheet tiles.
        """
        return pulumi.get(self, "show")


@pulumi.output_type
class ThemeConfigurationSheetTileLayoutMargin(dict):
    def __init__(__self__, *,
                 show: Optional[bool] = None):
        """
        :param bool show: This Boolean value controls whether to display sheet margins.
        """
        if show is not None:
            pulumi.set(__self__, "show", show)

    @property
    @pulumi.getter
    def show(self) -> Optional[bool]:
        """
        This Boolean value controls whether to display sheet margins.
        """
        return pulumi.get(self, "show")


@pulumi.output_type
class ThemeConfigurationTypography(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontFamilies":
            suggest = "font_families"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThemeConfigurationTypography. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThemeConfigurationTypography.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThemeConfigurationTypography.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_families: Optional[Sequence['outputs.ThemeConfigurationTypographyFontFamily']] = None):
        """
        :param Sequence['ThemeConfigurationTypographyFontFamilyArgs'] font_families: Determines the list of font families. Maximum number of 5 items. See font_families.
        """
        if font_families is not None:
            pulumi.set(__self__, "font_families", font_families)

    @property
    @pulumi.getter(name="fontFamilies")
    def font_families(self) -> Optional[Sequence['outputs.ThemeConfigurationTypographyFontFamily']]:
        """
        Determines the list of font families. Maximum number of 5 items. See font_families.
        """
        return pulumi.get(self, "font_families")


@pulumi.output_type
class ThemeConfigurationTypographyFontFamily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontFamily":
            suggest = "font_family"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThemeConfigurationTypographyFontFamily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThemeConfigurationTypographyFontFamily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThemeConfigurationTypographyFontFamily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_family: Optional[str] = None):
        """
        :param str font_family: Font family name.
        """
        if font_family is not None:
            pulumi.set(__self__, "font_family", font_family)

    @property
    @pulumi.getter(name="fontFamily")
    def font_family(self) -> Optional[str]:
        """
        Font family name.
        """
        return pulumi.get(self, "font_family")


@pulumi.output_type
class ThemeConfigurationUiColorPalette(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accentForeground":
            suggest = "accent_foreground"
        elif key == "dangerForeground":
            suggest = "danger_foreground"
        elif key == "dimensionForeground":
            suggest = "dimension_foreground"
        elif key == "measureForeground":
            suggest = "measure_foreground"
        elif key == "primaryBackground":
            suggest = "primary_background"
        elif key == "primaryForeground":
            suggest = "primary_foreground"
        elif key == "secondaryBackground":
            suggest = "secondary_background"
        elif key == "secondaryForeground":
            suggest = "secondary_foreground"
        elif key == "successForeground":
            suggest = "success_foreground"
        elif key == "warningForeground":
            suggest = "warning_foreground"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThemeConfigurationUiColorPalette. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThemeConfigurationUiColorPalette.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThemeConfigurationUiColorPalette.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accent: Optional[str] = None,
                 accent_foreground: Optional[str] = None,
                 danger: Optional[str] = None,
                 danger_foreground: Optional[str] = None,
                 dimension: Optional[str] = None,
                 dimension_foreground: Optional[str] = None,
                 measure: Optional[str] = None,
                 measure_foreground: Optional[str] = None,
                 primary_background: Optional[str] = None,
                 primary_foreground: Optional[str] = None,
                 secondary_background: Optional[str] = None,
                 secondary_foreground: Optional[str] = None,
                 success: Optional[str] = None,
                 success_foreground: Optional[str] = None,
                 warning: Optional[str] = None,
                 warning_foreground: Optional[str] = None):
        """
        :param str accent: Color (hexadecimal) that applies to selected states and buttons.
        :param str accent_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
        :param str danger: Color (hexadecimal) that applies to error messages.
        :param str danger_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the error color.
        :param str dimension: Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
        :param str dimension_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
        :param str measure: Color (hexadecimal) that applies to the names of fields that are identified as measures.
        :param str measure_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
        :param str primary_background: Color (hexadecimal) that applies to visuals and other high emphasis UI.
        :param str primary_foreground: Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
        :param str secondary_background: Color (hexadecimal) that applies to the sheet background and sheet controls.
        :param str secondary_foreground: Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
        :param str success: Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
        :param str success_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the success color.
        :param str warning: Color (hexadecimal) that applies to warning and informational messages.
        :param str warning_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
        """
        if accent is not None:
            pulumi.set(__self__, "accent", accent)
        if accent_foreground is not None:
            pulumi.set(__self__, "accent_foreground", accent_foreground)
        if danger is not None:
            pulumi.set(__self__, "danger", danger)
        if danger_foreground is not None:
            pulumi.set(__self__, "danger_foreground", danger_foreground)
        if dimension is not None:
            pulumi.set(__self__, "dimension", dimension)
        if dimension_foreground is not None:
            pulumi.set(__self__, "dimension_foreground", dimension_foreground)
        if measure is not None:
            pulumi.set(__self__, "measure", measure)
        if measure_foreground is not None:
            pulumi.set(__self__, "measure_foreground", measure_foreground)
        if primary_background is not None:
            pulumi.set(__self__, "primary_background", primary_background)
        if primary_foreground is not None:
            pulumi.set(__self__, "primary_foreground", primary_foreground)
        if secondary_background is not None:
            pulumi.set(__self__, "secondary_background", secondary_background)
        if secondary_foreground is not None:
            pulumi.set(__self__, "secondary_foreground", secondary_foreground)
        if success is not None:
            pulumi.set(__self__, "success", success)
        if success_foreground is not None:
            pulumi.set(__self__, "success_foreground", success_foreground)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if warning_foreground is not None:
            pulumi.set(__self__, "warning_foreground", warning_foreground)

    @property
    @pulumi.getter
    def accent(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to selected states and buttons.
        """
        return pulumi.get(self, "accent")

    @property
    @pulumi.getter(name="accentForeground")
    def accent_foreground(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
        """
        return pulumi.get(self, "accent_foreground")

    @property
    @pulumi.getter
    def danger(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to error messages.
        """
        return pulumi.get(self, "danger")

    @property
    @pulumi.getter(name="dangerForeground")
    def danger_foreground(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the error color.
        """
        return pulumi.get(self, "danger_foreground")

    @property
    @pulumi.getter
    def dimension(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
        """
        return pulumi.get(self, "dimension")

    @property
    @pulumi.getter(name="dimensionForeground")
    def dimension_foreground(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
        """
        return pulumi.get(self, "dimension_foreground")

    @property
    @pulumi.getter
    def measure(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to the names of fields that are identified as measures.
        """
        return pulumi.get(self, "measure")

    @property
    @pulumi.getter(name="measureForeground")
    def measure_foreground(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
        """
        return pulumi.get(self, "measure_foreground")

    @property
    @pulumi.getter(name="primaryBackground")
    def primary_background(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to visuals and other high emphasis UI.
        """
        return pulumi.get(self, "primary_background")

    @property
    @pulumi.getter(name="primaryForeground")
    def primary_foreground(self) -> Optional[str]:
        """
        Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
        """
        return pulumi.get(self, "primary_foreground")

    @property
    @pulumi.getter(name="secondaryBackground")
    def secondary_background(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to the sheet background and sheet controls.
        """
        return pulumi.get(self, "secondary_background")

    @property
    @pulumi.getter(name="secondaryForeground")
    def secondary_foreground(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
        """
        return pulumi.get(self, "secondary_foreground")

    @property
    @pulumi.getter
    def success(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
        """
        return pulumi.get(self, "success")

    @property
    @pulumi.getter(name="successForeground")
    def success_foreground(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the success color.
        """
        return pulumi.get(self, "success_foreground")

    @property
    @pulumi.getter
    def warning(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to warning and informational messages.
        """
        return pulumi.get(self, "warning")

    @property
    @pulumi.getter(name="warningForeground")
    def warning_foreground(self) -> Optional[str]:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
        """
        return pulumi.get(self, "warning_foreground")


@pulumi.output_type
class ThemePermission(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 principal: str):
        """
        :param Sequence[str] actions: List of IAM actions to grant or revoke permissions on.
        :param str principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def principal(self) -> str:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")


@pulumi.output_type
class TimeRangeFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeMaximum":
            suggest = "range_maximum"
        elif key == "rangeMinimum":
            suggest = "range_minimum"
        elif key == "timeGranularity":
            suggest = "time_granularity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TimeRangeFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TimeRangeFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TimeRangeFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 range_maximum: str,
                 range_minimum: str,
                 time_granularity: str):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "range_maximum", range_maximum)
        pulumi.set(__self__, "range_minimum", range_minimum)
        pulumi.set(__self__, "time_granularity", time_granularity)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="rangeMaximum")
    def range_maximum(self) -> str:
        return pulumi.get(self, "range_maximum")

    @property
    @pulumi.getter(name="rangeMinimum")
    def range_minimum(self) -> str:
        return pulumi.get(self, "range_minimum")

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> str:
        return pulumi.get(self, "time_granularity")


@pulumi.output_type
class TooltipOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldBaseTooltip":
            suggest = "field_base_tooltip"
        elif key == "selectedTooltipType":
            suggest = "selected_tooltip_type"
        elif key == "tooltipVisibility":
            suggest = "tooltip_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TooltipOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TooltipOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TooltipOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_base_tooltip: Optional['outputs.TooltipOptionsFieldBaseTooltip'] = None,
                 selected_tooltip_type: Optional[str] = None,
                 tooltip_visibility: Optional[str] = None):
        if field_base_tooltip is not None:
            pulumi.set(__self__, "field_base_tooltip", field_base_tooltip)
        if selected_tooltip_type is not None:
            pulumi.set(__self__, "selected_tooltip_type", selected_tooltip_type)
        if tooltip_visibility is not None:
            pulumi.set(__self__, "tooltip_visibility", tooltip_visibility)

    @property
    @pulumi.getter(name="fieldBaseTooltip")
    def field_base_tooltip(self) -> Optional['outputs.TooltipOptionsFieldBaseTooltip']:
        return pulumi.get(self, "field_base_tooltip")

    @property
    @pulumi.getter(name="selectedTooltipType")
    def selected_tooltip_type(self) -> Optional[str]:
        return pulumi.get(self, "selected_tooltip_type")

    @property
    @pulumi.getter(name="tooltipVisibility")
    def tooltip_visibility(self) -> Optional[str]:
        return pulumi.get(self, "tooltip_visibility")


@pulumi.output_type
class TooltipOptionsFieldBaseTooltip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregationVisibility":
            suggest = "aggregation_visibility"
        elif key == "tooltipFields":
            suggest = "tooltip_fields"
        elif key == "tooltipTitleType":
            suggest = "tooltip_title_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TooltipOptionsFieldBaseTooltip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TooltipOptionsFieldBaseTooltip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TooltipOptionsFieldBaseTooltip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation_visibility: Optional[str] = None,
                 tooltip_fields: Optional[Sequence['outputs.TooltipOptionsFieldBaseTooltipTooltipField']] = None,
                 tooltip_title_type: Optional[str] = None):
        if aggregation_visibility is not None:
            pulumi.set(__self__, "aggregation_visibility", aggregation_visibility)
        if tooltip_fields is not None:
            pulumi.set(__self__, "tooltip_fields", tooltip_fields)
        if tooltip_title_type is not None:
            pulumi.set(__self__, "tooltip_title_type", tooltip_title_type)

    @property
    @pulumi.getter(name="aggregationVisibility")
    def aggregation_visibility(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_visibility")

    @property
    @pulumi.getter(name="tooltipFields")
    def tooltip_fields(self) -> Optional[Sequence['outputs.TooltipOptionsFieldBaseTooltipTooltipField']]:
        return pulumi.get(self, "tooltip_fields")

    @property
    @pulumi.getter(name="tooltipTitleType")
    def tooltip_title_type(self) -> Optional[str]:
        return pulumi.get(self, "tooltip_title_type")


@pulumi.output_type
class TooltipOptionsFieldBaseTooltipTooltipField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnTooltipItem":
            suggest = "column_tooltip_item"
        elif key == "fieldTooltipItem":
            suggest = "field_tooltip_item"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TooltipOptionsFieldBaseTooltipTooltipField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TooltipOptionsFieldBaseTooltipTooltipField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TooltipOptionsFieldBaseTooltipTooltipField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_tooltip_item: Optional['outputs.TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItem'] = None,
                 field_tooltip_item: Optional['outputs.TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItem'] = None):
        if column_tooltip_item is not None:
            pulumi.set(__self__, "column_tooltip_item", column_tooltip_item)
        if field_tooltip_item is not None:
            pulumi.set(__self__, "field_tooltip_item", field_tooltip_item)

    @property
    @pulumi.getter(name="columnTooltipItem")
    def column_tooltip_item(self) -> Optional['outputs.TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItem']:
        return pulumi.get(self, "column_tooltip_item")

    @property
    @pulumi.getter(name="fieldTooltipItem")
    def field_tooltip_item(self) -> Optional['outputs.TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItem']:
        return pulumi.get(self, "field_tooltip_item")


@pulumi.output_type
class TooltipOptionsFieldBaseTooltipTooltipFieldColumnTooltipItem(dict):
    def __init__(__self__, *,
                 column: 'outputs.Column',
                 aggregation: Optional['outputs.AggregationFunction'] = None,
                 label: Optional[str] = None,
                 visibility: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def aggregation(self) -> Optional['outputs.AggregationFunction']:
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TooltipOptionsFieldBaseTooltipTooltipFieldFieldTooltipItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 label: Optional[str] = None,
                 visibility: Optional[str] = None):
        pulumi.set(__self__, "field_id", field_id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class VisualCustomActions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionOperations":
            suggest = "action_operations"
        elif key == "customActionId":
            suggest = "custom_action_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_operations: Sequence['outputs.VisualCustomActionsActionOperation'],
                 custom_action_id: str,
                 name: str,
                 status: str,
                 trigger: str):
        """
        :param str name: Display name for the dashboard.
        :param str status: The dashboard creation status.
        """
        pulumi.set(__self__, "action_operations", action_operations)
        pulumi.set(__self__, "custom_action_id", custom_action_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter(name="actionOperations")
    def action_operations(self) -> Sequence['outputs.VisualCustomActionsActionOperation']:
        return pulumi.get(self, "action_operations")

    @property
    @pulumi.getter(name="customActionId")
    def custom_action_id(self) -> str:
        return pulumi.get(self, "custom_action_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def trigger(self) -> str:
        return pulumi.get(self, "trigger")


@pulumi.output_type
class VisualCustomActionsActionOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterOperation":
            suggest = "filter_operation"
        elif key == "navigationOperation":
            suggest = "navigation_operation"
        elif key == "setParametersOperation":
            suggest = "set_parameters_operation"
        elif key == "urlOperation":
            suggest = "url_operation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_operation: Optional['outputs.VisualCustomActionsActionOperationFilterOperation'] = None,
                 navigation_operation: Optional['outputs.VisualCustomActionsActionOperationNavigationOperation'] = None,
                 set_parameters_operation: Optional['outputs.VisualCustomActionsActionOperationSetParametersOperation'] = None,
                 url_operation: Optional['outputs.VisualCustomActionsActionOperationUrlOperation'] = None):
        if filter_operation is not None:
            pulumi.set(__self__, "filter_operation", filter_operation)
        if navigation_operation is not None:
            pulumi.set(__self__, "navigation_operation", navigation_operation)
        if set_parameters_operation is not None:
            pulumi.set(__self__, "set_parameters_operation", set_parameters_operation)
        if url_operation is not None:
            pulumi.set(__self__, "url_operation", url_operation)

    @property
    @pulumi.getter(name="filterOperation")
    def filter_operation(self) -> Optional['outputs.VisualCustomActionsActionOperationFilterOperation']:
        return pulumi.get(self, "filter_operation")

    @property
    @pulumi.getter(name="navigationOperation")
    def navigation_operation(self) -> Optional['outputs.VisualCustomActionsActionOperationNavigationOperation']:
        return pulumi.get(self, "navigation_operation")

    @property
    @pulumi.getter(name="setParametersOperation")
    def set_parameters_operation(self) -> Optional['outputs.VisualCustomActionsActionOperationSetParametersOperation']:
        return pulumi.get(self, "set_parameters_operation")

    @property
    @pulumi.getter(name="urlOperation")
    def url_operation(self) -> Optional['outputs.VisualCustomActionsActionOperationUrlOperation']:
        return pulumi.get(self, "url_operation")


@pulumi.output_type
class VisualCustomActionsActionOperationFilterOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectedFieldsConfiguration":
            suggest = "selected_fields_configuration"
        elif key == "targetVisualsConfiguration":
            suggest = "target_visuals_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationFilterOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationFilterOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationFilterOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 selected_fields_configuration: 'outputs.VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfiguration',
                 target_visuals_configuration: 'outputs.VisualCustomActionsActionOperationFilterOperationTargetVisualsConfiguration'):
        pulumi.set(__self__, "selected_fields_configuration", selected_fields_configuration)
        pulumi.set(__self__, "target_visuals_configuration", target_visuals_configuration)

    @property
    @pulumi.getter(name="selectedFieldsConfiguration")
    def selected_fields_configuration(self) -> 'outputs.VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfiguration':
        return pulumi.get(self, "selected_fields_configuration")

    @property
    @pulumi.getter(name="targetVisualsConfiguration")
    def target_visuals_configuration(self) -> 'outputs.VisualCustomActionsActionOperationFilterOperationTargetVisualsConfiguration':
        return pulumi.get(self, "target_visuals_configuration")


@pulumi.output_type
class VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectedFieldOption":
            suggest = "selected_field_option"
        elif key == "selectedFields":
            suggest = "selected_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationFilterOperationSelectedFieldsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 selected_field_option: Optional[str] = None,
                 selected_fields: Optional[Sequence[str]] = None):
        if selected_field_option is not None:
            pulumi.set(__self__, "selected_field_option", selected_field_option)
        if selected_fields is not None:
            pulumi.set(__self__, "selected_fields", selected_fields)

    @property
    @pulumi.getter(name="selectedFieldOption")
    def selected_field_option(self) -> Optional[str]:
        return pulumi.get(self, "selected_field_option")

    @property
    @pulumi.getter(name="selectedFields")
    def selected_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "selected_fields")


@pulumi.output_type
class VisualCustomActionsActionOperationFilterOperationTargetVisualsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sameSheetTargetVisualConfiguration":
            suggest = "same_sheet_target_visual_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationFilterOperationTargetVisualsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationFilterOperationTargetVisualsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationFilterOperationTargetVisualsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 same_sheet_target_visual_configuration: Optional['outputs.VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfiguration'] = None):
        if same_sheet_target_visual_configuration is not None:
            pulumi.set(__self__, "same_sheet_target_visual_configuration", same_sheet_target_visual_configuration)

    @property
    @pulumi.getter(name="sameSheetTargetVisualConfiguration")
    def same_sheet_target_visual_configuration(self) -> Optional['outputs.VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfiguration']:
        return pulumi.get(self, "same_sheet_target_visual_configuration")


@pulumi.output_type
class VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetVisualOption":
            suggest = "target_visual_option"
        elif key == "targetVisuals":
            suggest = "target_visuals"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationFilterOperationTargetVisualsConfigurationSameSheetTargetVisualConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_visual_option: Optional[str] = None,
                 target_visuals: Optional[Sequence[str]] = None):
        if target_visual_option is not None:
            pulumi.set(__self__, "target_visual_option", target_visual_option)
        if target_visuals is not None:
            pulumi.set(__self__, "target_visuals", target_visuals)

    @property
    @pulumi.getter(name="targetVisualOption")
    def target_visual_option(self) -> Optional[str]:
        return pulumi.get(self, "target_visual_option")

    @property
    @pulumi.getter(name="targetVisuals")
    def target_visuals(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_visuals")


@pulumi.output_type
class VisualCustomActionsActionOperationNavigationOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localNavigationConfiguration":
            suggest = "local_navigation_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationNavigationOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationNavigationOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationNavigationOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_navigation_configuration: Optional['outputs.VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfiguration'] = None):
        if local_navigation_configuration is not None:
            pulumi.set(__self__, "local_navigation_configuration", local_navigation_configuration)

    @property
    @pulumi.getter(name="localNavigationConfiguration")
    def local_navigation_configuration(self) -> Optional['outputs.VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfiguration']:
        return pulumi.get(self, "local_navigation_configuration")


@pulumi.output_type
class VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetSheetId":
            suggest = "target_sheet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationNavigationOperationLocalNavigationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_sheet_id: str):
        pulumi.set(__self__, "target_sheet_id", target_sheet_id)

    @property
    @pulumi.getter(name="targetSheetId")
    def target_sheet_id(self) -> str:
        return pulumi.get(self, "target_sheet_id")


@pulumi.output_type
class VisualCustomActionsActionOperationSetParametersOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterValueConfigurations":
            suggest = "parameter_value_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationSetParametersOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationSetParametersOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationSetParametersOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_value_configurations: Sequence['outputs.VisualCustomActionsActionOperationSetParametersOperationParameterValueConfiguration']):
        pulumi.set(__self__, "parameter_value_configurations", parameter_value_configurations)

    @property
    @pulumi.getter(name="parameterValueConfigurations")
    def parameter_value_configurations(self) -> Sequence['outputs.VisualCustomActionsActionOperationSetParametersOperationParameterValueConfiguration']:
        return pulumi.get(self, "parameter_value_configurations")


@pulumi.output_type
class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationParameterName":
            suggest = "destination_parameter_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationSetParametersOperationParameterValueConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationSetParametersOperationParameterValueConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationSetParametersOperationParameterValueConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_parameter_name: str,
                 value: 'outputs.VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValue'):
        pulumi.set(__self__, "destination_parameter_name", destination_parameter_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="destinationParameterName")
    def destination_parameter_name(self) -> str:
        return pulumi.get(self, "destination_parameter_name")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValue':
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customValuesConfiguration":
            suggest = "custom_values_configuration"
        elif key == "selectAllValueOptions":
            suggest = "select_all_value_options"
        elif key == "sourceField":
            suggest = "source_field"
        elif key == "sourceParameterName":
            suggest = "source_parameter_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_values_configuration: Optional['outputs.VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfiguration'] = None,
                 select_all_value_options: Optional[str] = None,
                 source_field: Optional[str] = None,
                 source_parameter_name: Optional[str] = None):
        if custom_values_configuration is not None:
            pulumi.set(__self__, "custom_values_configuration", custom_values_configuration)
        if select_all_value_options is not None:
            pulumi.set(__self__, "select_all_value_options", select_all_value_options)
        if source_field is not None:
            pulumi.set(__self__, "source_field", source_field)
        if source_parameter_name is not None:
            pulumi.set(__self__, "source_parameter_name", source_parameter_name)

    @property
    @pulumi.getter(name="customValuesConfiguration")
    def custom_values_configuration(self) -> Optional['outputs.VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfiguration']:
        return pulumi.get(self, "custom_values_configuration")

    @property
    @pulumi.getter(name="selectAllValueOptions")
    def select_all_value_options(self) -> Optional[str]:
        return pulumi.get(self, "select_all_value_options")

    @property
    @pulumi.getter(name="sourceField")
    def source_field(self) -> Optional[str]:
        return pulumi.get(self, "source_field")

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "source_parameter_name")


@pulumi.output_type
class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customValues":
            suggest = "custom_values"
        elif key == "includeNullValue":
            suggest = "include_null_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_values: 'outputs.VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValues',
                 include_null_value: Optional[bool] = None):
        pulumi.set(__self__, "custom_values", custom_values)
        if include_null_value is not None:
            pulumi.set(__self__, "include_null_value", include_null_value)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> 'outputs.VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValues':
        return pulumi.get(self, "custom_values")

    @property
    @pulumi.getter(name="includeNullValue")
    def include_null_value(self) -> Optional[bool]:
        return pulumi.get(self, "include_null_value")


@pulumi.output_type
class VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeValues":
            suggest = "date_time_values"
        elif key == "decimalValues":
            suggest = "decimal_values"
        elif key == "integerValues":
            suggest = "integer_values"
        elif key == "stringValues":
            suggest = "string_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationSetParametersOperationParameterValueConfigurationValueCustomValuesConfigurationCustomValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_values: Optional[Sequence[str]] = None,
                 decimal_values: Optional[Sequence[float]] = None,
                 integer_values: Optional[Sequence[int]] = None,
                 string_values: Optional[Sequence[str]] = None):
        if date_time_values is not None:
            pulumi.set(__self__, "date_time_values", date_time_values)
        if decimal_values is not None:
            pulumi.set(__self__, "decimal_values", decimal_values)
        if integer_values is not None:
            pulumi.set(__self__, "integer_values", integer_values)
        if string_values is not None:
            pulumi.set(__self__, "string_values", string_values)

    @property
    @pulumi.getter(name="dateTimeValues")
    def date_time_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "date_time_values")

    @property
    @pulumi.getter(name="decimalValues")
    def decimal_values(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "decimal_values")

    @property
    @pulumi.getter(name="integerValues")
    def integer_values(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "integer_values")

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "string_values")


@pulumi.output_type
class VisualCustomActionsActionOperationUrlOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "urlTarget":
            suggest = "url_target"
        elif key == "urlTemplate":
            suggest = "url_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualCustomActionsActionOperationUrlOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualCustomActionsActionOperationUrlOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualCustomActionsActionOperationUrlOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url_target: str,
                 url_template: str):
        pulumi.set(__self__, "url_target", url_target)
        pulumi.set(__self__, "url_template", url_template)

    @property
    @pulumi.getter(name="urlTarget")
    def url_target(self) -> str:
        return pulumi.get(self, "url_target")

    @property
    @pulumi.getter(name="urlTemplate")
    def url_template(self) -> str:
        return pulumi.get(self, "url_template")


@pulumi.output_type
class VisualPalette(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chartColor":
            suggest = "chart_color"
        elif key == "colorMaps":
            suggest = "color_maps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualPalette. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualPalette.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualPalette.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart_color: Optional[str] = None,
                 color_maps: Optional[Sequence['outputs.VisualPaletteColorMap']] = None):
        if chart_color is not None:
            pulumi.set(__self__, "chart_color", chart_color)
        if color_maps is not None:
            pulumi.set(__self__, "color_maps", color_maps)

    @property
    @pulumi.getter(name="chartColor")
    def chart_color(self) -> Optional[str]:
        return pulumi.get(self, "chart_color")

    @property
    @pulumi.getter(name="colorMaps")
    def color_maps(self) -> Optional[Sequence['outputs.VisualPaletteColorMap']]:
        return pulumi.get(self, "color_maps")


@pulumi.output_type
class VisualPaletteColorMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeGranularity":
            suggest = "time_granularity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualPaletteColorMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualPaletteColorMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualPaletteColorMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 element: 'outputs.DataPathValue',
                 time_granularity: Optional[str] = None):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "element", element)
        if time_granularity is not None:
            pulumi.set(__self__, "time_granularity", time_granularity)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def element(self) -> 'outputs.DataPathValue':
        return pulumi.get(self, "element")

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[str]:
        return pulumi.get(self, "time_granularity")


@pulumi.output_type
class Visuals(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "barChartVisual":
            suggest = "bar_chart_visual"
        elif key == "boxPlotVisual":
            suggest = "box_plot_visual"
        elif key == "comboChartVisual":
            suggest = "combo_chart_visual"
        elif key == "customContentVisual":
            suggest = "custom_content_visual"
        elif key == "emptyVisual":
            suggest = "empty_visual"
        elif key == "filledMapVisual":
            suggest = "filled_map_visual"
        elif key == "funnelChartVisual":
            suggest = "funnel_chart_visual"
        elif key == "gaugeChartVisual":
            suggest = "gauge_chart_visual"
        elif key == "geospatialMapVisual":
            suggest = "geospatial_map_visual"
        elif key == "heatMapVisual":
            suggest = "heat_map_visual"
        elif key == "histogramVisual":
            suggest = "histogram_visual"
        elif key == "insightVisual":
            suggest = "insight_visual"
        elif key == "kpiVisual":
            suggest = "kpi_visual"
        elif key == "lineChartVisual":
            suggest = "line_chart_visual"
        elif key == "pieChartVisual":
            suggest = "pie_chart_visual"
        elif key == "pivotTableVisual":
            suggest = "pivot_table_visual"
        elif key == "radarChartVisual":
            suggest = "radar_chart_visual"
        elif key == "sankeyDiagramVisual":
            suggest = "sankey_diagram_visual"
        elif key == "scatterPlotVisual":
            suggest = "scatter_plot_visual"
        elif key == "tableVisual":
            suggest = "table_visual"
        elif key == "treeMapVisual":
            suggest = "tree_map_visual"
        elif key == "waterfallVisual":
            suggest = "waterfall_visual"
        elif key == "wordCloudVisual":
            suggest = "word_cloud_visual"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Visuals. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Visuals.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Visuals.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bar_chart_visual: Optional['outputs.VisualsBarChartVisual'] = None,
                 box_plot_visual: Optional['outputs.VisualsBoxPlotVisual'] = None,
                 combo_chart_visual: Optional['outputs.VisualsComboChartVisual'] = None,
                 custom_content_visual: Optional['outputs.VisualsCustomContentVisual'] = None,
                 empty_visual: Optional['outputs.VisualsEmptyVisual'] = None,
                 filled_map_visual: Optional['outputs.VisualsFilledMapVisual'] = None,
                 funnel_chart_visual: Optional['outputs.VisualsFunnelChartVisual'] = None,
                 gauge_chart_visual: Optional['outputs.VisualsGaugeChartVisual'] = None,
                 geospatial_map_visual: Optional['outputs.VisualsGeospatialMapVisual'] = None,
                 heat_map_visual: Optional['outputs.VisualsHeatMapVisual'] = None,
                 histogram_visual: Optional['outputs.VisualsHistogramVisual'] = None,
                 insight_visual: Optional['outputs.VisualsInsightVisual'] = None,
                 kpi_visual: Optional['outputs.VisualsKpiVisual'] = None,
                 line_chart_visual: Optional['outputs.VisualsLineChartVisual'] = None,
                 pie_chart_visual: Optional['outputs.VisualsPieChartVisual'] = None,
                 pivot_table_visual: Optional['outputs.VisualsPivotTableVisual'] = None,
                 radar_chart_visual: Optional['outputs.VisualsRadarChartVisual'] = None,
                 sankey_diagram_visual: Optional['outputs.VisualsSankeyDiagramVisual'] = None,
                 scatter_plot_visual: Optional['outputs.VisualsScatterPlotVisual'] = None,
                 table_visual: Optional['outputs.VisualsTableVisual'] = None,
                 tree_map_visual: Optional['outputs.VisualsTreeMapVisual'] = None,
                 waterfall_visual: Optional['outputs.VisualsWaterfallVisual'] = None,
                 word_cloud_visual: Optional['outputs.VisualsWordCloudVisual'] = None):
        if bar_chart_visual is not None:
            pulumi.set(__self__, "bar_chart_visual", bar_chart_visual)
        if box_plot_visual is not None:
            pulumi.set(__self__, "box_plot_visual", box_plot_visual)
        if combo_chart_visual is not None:
            pulumi.set(__self__, "combo_chart_visual", combo_chart_visual)
        if custom_content_visual is not None:
            pulumi.set(__self__, "custom_content_visual", custom_content_visual)
        if empty_visual is not None:
            pulumi.set(__self__, "empty_visual", empty_visual)
        if filled_map_visual is not None:
            pulumi.set(__self__, "filled_map_visual", filled_map_visual)
        if funnel_chart_visual is not None:
            pulumi.set(__self__, "funnel_chart_visual", funnel_chart_visual)
        if gauge_chart_visual is not None:
            pulumi.set(__self__, "gauge_chart_visual", gauge_chart_visual)
        if geospatial_map_visual is not None:
            pulumi.set(__self__, "geospatial_map_visual", geospatial_map_visual)
        if heat_map_visual is not None:
            pulumi.set(__self__, "heat_map_visual", heat_map_visual)
        if histogram_visual is not None:
            pulumi.set(__self__, "histogram_visual", histogram_visual)
        if insight_visual is not None:
            pulumi.set(__self__, "insight_visual", insight_visual)
        if kpi_visual is not None:
            pulumi.set(__self__, "kpi_visual", kpi_visual)
        if line_chart_visual is not None:
            pulumi.set(__self__, "line_chart_visual", line_chart_visual)
        if pie_chart_visual is not None:
            pulumi.set(__self__, "pie_chart_visual", pie_chart_visual)
        if pivot_table_visual is not None:
            pulumi.set(__self__, "pivot_table_visual", pivot_table_visual)
        if radar_chart_visual is not None:
            pulumi.set(__self__, "radar_chart_visual", radar_chart_visual)
        if sankey_diagram_visual is not None:
            pulumi.set(__self__, "sankey_diagram_visual", sankey_diagram_visual)
        if scatter_plot_visual is not None:
            pulumi.set(__self__, "scatter_plot_visual", scatter_plot_visual)
        if table_visual is not None:
            pulumi.set(__self__, "table_visual", table_visual)
        if tree_map_visual is not None:
            pulumi.set(__self__, "tree_map_visual", tree_map_visual)
        if waterfall_visual is not None:
            pulumi.set(__self__, "waterfall_visual", waterfall_visual)
        if word_cloud_visual is not None:
            pulumi.set(__self__, "word_cloud_visual", word_cloud_visual)

    @property
    @pulumi.getter(name="barChartVisual")
    def bar_chart_visual(self) -> Optional['outputs.VisualsBarChartVisual']:
        return pulumi.get(self, "bar_chart_visual")

    @property
    @pulumi.getter(name="boxPlotVisual")
    def box_plot_visual(self) -> Optional['outputs.VisualsBoxPlotVisual']:
        return pulumi.get(self, "box_plot_visual")

    @property
    @pulumi.getter(name="comboChartVisual")
    def combo_chart_visual(self) -> Optional['outputs.VisualsComboChartVisual']:
        return pulumi.get(self, "combo_chart_visual")

    @property
    @pulumi.getter(name="customContentVisual")
    def custom_content_visual(self) -> Optional['outputs.VisualsCustomContentVisual']:
        return pulumi.get(self, "custom_content_visual")

    @property
    @pulumi.getter(name="emptyVisual")
    def empty_visual(self) -> Optional['outputs.VisualsEmptyVisual']:
        return pulumi.get(self, "empty_visual")

    @property
    @pulumi.getter(name="filledMapVisual")
    def filled_map_visual(self) -> Optional['outputs.VisualsFilledMapVisual']:
        return pulumi.get(self, "filled_map_visual")

    @property
    @pulumi.getter(name="funnelChartVisual")
    def funnel_chart_visual(self) -> Optional['outputs.VisualsFunnelChartVisual']:
        return pulumi.get(self, "funnel_chart_visual")

    @property
    @pulumi.getter(name="gaugeChartVisual")
    def gauge_chart_visual(self) -> Optional['outputs.VisualsGaugeChartVisual']:
        return pulumi.get(self, "gauge_chart_visual")

    @property
    @pulumi.getter(name="geospatialMapVisual")
    def geospatial_map_visual(self) -> Optional['outputs.VisualsGeospatialMapVisual']:
        return pulumi.get(self, "geospatial_map_visual")

    @property
    @pulumi.getter(name="heatMapVisual")
    def heat_map_visual(self) -> Optional['outputs.VisualsHeatMapVisual']:
        return pulumi.get(self, "heat_map_visual")

    @property
    @pulumi.getter(name="histogramVisual")
    def histogram_visual(self) -> Optional['outputs.VisualsHistogramVisual']:
        return pulumi.get(self, "histogram_visual")

    @property
    @pulumi.getter(name="insightVisual")
    def insight_visual(self) -> Optional['outputs.VisualsInsightVisual']:
        return pulumi.get(self, "insight_visual")

    @property
    @pulumi.getter(name="kpiVisual")
    def kpi_visual(self) -> Optional['outputs.VisualsKpiVisual']:
        return pulumi.get(self, "kpi_visual")

    @property
    @pulumi.getter(name="lineChartVisual")
    def line_chart_visual(self) -> Optional['outputs.VisualsLineChartVisual']:
        return pulumi.get(self, "line_chart_visual")

    @property
    @pulumi.getter(name="pieChartVisual")
    def pie_chart_visual(self) -> Optional['outputs.VisualsPieChartVisual']:
        return pulumi.get(self, "pie_chart_visual")

    @property
    @pulumi.getter(name="pivotTableVisual")
    def pivot_table_visual(self) -> Optional['outputs.VisualsPivotTableVisual']:
        return pulumi.get(self, "pivot_table_visual")

    @property
    @pulumi.getter(name="radarChartVisual")
    def radar_chart_visual(self) -> Optional['outputs.VisualsRadarChartVisual']:
        return pulumi.get(self, "radar_chart_visual")

    @property
    @pulumi.getter(name="sankeyDiagramVisual")
    def sankey_diagram_visual(self) -> Optional['outputs.VisualsSankeyDiagramVisual']:
        return pulumi.get(self, "sankey_diagram_visual")

    @property
    @pulumi.getter(name="scatterPlotVisual")
    def scatter_plot_visual(self) -> Optional['outputs.VisualsScatterPlotVisual']:
        return pulumi.get(self, "scatter_plot_visual")

    @property
    @pulumi.getter(name="tableVisual")
    def table_visual(self) -> Optional['outputs.VisualsTableVisual']:
        return pulumi.get(self, "table_visual")

    @property
    @pulumi.getter(name="treeMapVisual")
    def tree_map_visual(self) -> Optional['outputs.VisualsTreeMapVisual']:
        return pulumi.get(self, "tree_map_visual")

    @property
    @pulumi.getter(name="waterfallVisual")
    def waterfall_visual(self) -> Optional['outputs.VisualsWaterfallVisual']:
        return pulumi.get(self, "waterfall_visual")

    @property
    @pulumi.getter(name="wordCloudVisual")
    def word_cloud_visual(self) -> Optional['outputs.VisualsWordCloudVisual']:
        return pulumi.get(self, "word_cloud_visual")


@pulumi.output_type
class VisualsBarChartVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBarChartVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBarChartVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBarChartVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsBarChartVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsBarChartVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsBarChartVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "barsArrangement":
            suggest = "bars_arrangement"
        elif key == "categoryAxis":
            suggest = "category_axis"
        elif key == "categoryLabelOptions":
            suggest = "category_label_options"
        elif key == "colorLabelOptions":
            suggest = "color_label_options"
        elif key == "contributionAnalysisDefaults":
            suggest = "contribution_analysis_defaults"
        elif key == "dataLabels":
            suggest = "data_labels"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "referenceLines":
            suggest = "reference_lines"
        elif key == "smallMultiplesOptions":
            suggest = "small_multiples_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "valueAxis":
            suggest = "value_axis"
        elif key == "valueLabelOptions":
            suggest = "value_label_options"
        elif key == "visualPalette":
            suggest = "visual_palette"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBarChartVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBarChartVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBarChartVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bars_arrangement: Optional[str] = None,
                 category_axis: Optional['outputs.AxisDisplayOptions'] = None,
                 category_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 color_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 contribution_analysis_defaults: Optional[Sequence['outputs.ContributionAnalysisDefaults']] = None,
                 data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 field_wells: Optional['outputs.VisualsBarChartVisualChartConfigurationFieldWells'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 orientation: Optional[str] = None,
                 reference_lines: Optional[Sequence['outputs.ReferenceLine']] = None,
                 small_multiples_options: Optional['outputs.SmallMultiplesOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsBarChartVisualChartConfigurationSortConfiguration'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 value_axis: Optional['outputs.AxisDisplayOptions'] = None,
                 value_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None):
        if bars_arrangement is not None:
            pulumi.set(__self__, "bars_arrangement", bars_arrangement)
        if category_axis is not None:
            pulumi.set(__self__, "category_axis", category_axis)
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if color_label_options is not None:
            pulumi.set(__self__, "color_label_options", color_label_options)
        if contribution_analysis_defaults is not None:
            pulumi.set(__self__, "contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if orientation is not None:
            pulumi.set(__self__, "orientation", orientation)
        if reference_lines is not None:
            pulumi.set(__self__, "reference_lines", reference_lines)
        if small_multiples_options is not None:
            pulumi.set(__self__, "small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if value_axis is not None:
            pulumi.set(__self__, "value_axis", value_axis)
        if value_label_options is not None:
            pulumi.set(__self__, "value_label_options", value_label_options)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="barsArrangement")
    def bars_arrangement(self) -> Optional[str]:
        return pulumi.get(self, "bars_arrangement")

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "category_axis")

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "category_label_options")

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "color_label_options")

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[Sequence['outputs.ContributionAnalysisDefaults']]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "data_labels")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsBarChartVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter
    def orientation(self) -> Optional[str]:
        return pulumi.get(self, "orientation")

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[Sequence['outputs.ReferenceLine']]:
        return pulumi.get(self, "reference_lines")

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "small_multiples_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsBarChartVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter(name="valueAxis")
    def value_axis(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "value_axis")

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "value_label_options")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")


@pulumi.output_type
class VisualsBarChartVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "barChartAggregatedFieldWells":
            suggest = "bar_chart_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBarChartVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBarChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBarChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bar_chart_aggregated_field_wells: Optional['outputs.VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWells'] = None):
        if bar_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "bar_chart_aggregated_field_wells", bar_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="barChartAggregatedFieldWells")
    def bar_chart_aggregated_field_wells(self) -> Optional['outputs.VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWells']:
        return pulumi.get(self, "bar_chart_aggregated_field_wells")


@pulumi.output_type
class VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "smallMultiples":
            suggest = "small_multiples"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBarChartVisualChartConfigurationFieldWellsBarChartAggregatedFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 colors: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 small_multiples: Optional['outputs.SmallMultiplesOptions'] = None,
                 values: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if small_multiples is not None:
            pulumi.set(__self__, "small_multiples", small_multiples)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def colors(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "small_multiples")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsBarChartVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryItemsLimit":
            suggest = "category_items_limit"
        elif key == "categorySorts":
            suggest = "category_sorts"
        elif key == "colorItemsLimit":
            suggest = "color_items_limit"
        elif key == "colorSorts":
            suggest = "color_sorts"
        elif key == "smallMultiplesLimitConfiguration":
            suggest = "small_multiples_limit_configuration"
        elif key == "smallMultiplesSorts":
            suggest = "small_multiples_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBarChartVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBarChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBarChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 category_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None,
                 color_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 color_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None,
                 small_multiples_limit_configuration: Optional['outputs.ItemsLimitConfiguration'] = None,
                 small_multiples_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if color_items_limit is not None:
            pulumi.set(__self__, "color_items_limit", color_items_limit)
        if color_sorts is not None:
            pulumi.set(__self__, "color_sorts", color_sorts)
        if small_multiples_limit_configuration is not None:
            pulumi.set(__self__, "small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sorts is not None:
            pulumi.set(__self__, "small_multiples_sorts", small_multiples_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "category_items_limit")

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "category_sorts")

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "color_items_limit")

    @property
    @pulumi.getter(name="colorSorts")
    def color_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "color_sorts")

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @property
    @pulumi.getter(name="smallMultiplesSorts")
    def small_multiples_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "small_multiples_sorts")


@pulumi.output_type
class VisualsBoxPlotVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsBoxPlotVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "boxPlotOptions":
            suggest = "box_plot_options"
        elif key == "categoryAxis":
            suggest = "category_axis"
        elif key == "categoryLabelOptions":
            suggest = "category_label_options"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "primaryYAxisDisplayOptions":
            suggest = "primary_y_axis_display_options"
        elif key == "primaryYAxisLabelOptions":
            suggest = "primary_y_axis_label_options"
        elif key == "referenceLines":
            suggest = "reference_lines"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "visualPalette":
            suggest = "visual_palette"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 box_plot_options: Optional['outputs.VisualsBoxPlotVisualChartConfigurationBoxPlotOptions'] = None,
                 category_axis: Optional['outputs.AxisDisplayOptions'] = None,
                 category_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 field_wells: Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWells'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 primary_y_axis_display_options: Optional['outputs.AxisDisplayOptions'] = None,
                 primary_y_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 reference_lines: Optional[Sequence['outputs.ReferenceLine']] = None,
                 sort_configuration: Optional['outputs.VisualsBoxPlotVisualChartConfigurationSortConfiguration'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None):
        if box_plot_options is not None:
            pulumi.set(__self__, "box_plot_options", box_plot_options)
        if category_axis is not None:
            pulumi.set(__self__, "category_axis", category_axis)
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if primary_y_axis_display_options is not None:
            pulumi.set(__self__, "primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            pulumi.set(__self__, "primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            pulumi.set(__self__, "reference_lines", reference_lines)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="boxPlotOptions")
    def box_plot_options(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfigurationBoxPlotOptions']:
        return pulumi.get(self, "box_plot_options")

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "category_axis")

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "category_label_options")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "primary_y_axis_display_options")

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "primary_y_axis_label_options")

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[Sequence['outputs.ReferenceLine']]:
        return pulumi.get(self, "reference_lines")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationBoxPlotOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allDataPointsVisibility":
            suggest = "all_data_points_visibility"
        elif key == "outlierVisibility":
            suggest = "outlier_visibility"
        elif key == "styleOptions":
            suggest = "style_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationBoxPlotOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationBoxPlotOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationBoxPlotOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_data_points_visibility: Optional[str] = None,
                 outlier_visibility: Optional[str] = None,
                 style_options: Optional['outputs.VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptions'] = None):
        if all_data_points_visibility is not None:
            pulumi.set(__self__, "all_data_points_visibility", all_data_points_visibility)
        if outlier_visibility is not None:
            pulumi.set(__self__, "outlier_visibility", outlier_visibility)
        if style_options is not None:
            pulumi.set(__self__, "style_options", style_options)

    @property
    @pulumi.getter(name="allDataPointsVisibility")
    def all_data_points_visibility(self) -> Optional[str]:
        return pulumi.get(self, "all_data_points_visibility")

    @property
    @pulumi.getter(name="outlierVisibility")
    def outlier_visibility(self) -> Optional[str]:
        return pulumi.get(self, "outlier_visibility")

    @property
    @pulumi.getter(name="styleOptions")
    def style_options(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptions']:
        return pulumi.get(self, "style_options")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillStyle":
            suggest = "fill_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationBoxPlotOptionsStyleOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fill_style: Optional[str] = None):
        if fill_style is not None:
            pulumi.set(__self__, "fill_style", fill_style)

    @property
    @pulumi.getter(name="fillStyle")
    def fill_style(self) -> Optional[str]:
        return pulumi.get(self, "fill_style")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "boxPlotAggregatedFieldWells":
            suggest = "box_plot_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 box_plot_aggregated_field_wells: Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWells'] = None):
        if box_plot_aggregated_field_wells is not None:
            pulumi.set(__self__, "box_plot_aggregated_field_wells", box_plot_aggregated_field_wells)

    @property
    @pulumi.getter(name="boxPlotAggregatedFieldWells")
    def box_plot_aggregated_field_wells(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWells']:
        return pulumi.get(self, "box_plot_aggregated_field_wells")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupBy":
            suggest = "group_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_by: Optional['outputs.SmallMultiplesOptions'] = None,
                 values: Optional[Sequence['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValue']] = None):
        if group_by is not None:
            pulumi.set(__self__, "group_by", group_by)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "group_by")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "calculatedMeasureField":
            suggest = "calculated_measure_field"
        elif key == "categoricalMeasureField":
            suggest = "categorical_measure_field"
        elif key == "dateMeasureField":
            suggest = "date_measure_field"
        elif key == "numericalMeasureField":
            suggest = "numerical_measure_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calculated_measure_field: Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureField'] = None,
                 categorical_measure_field: Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureField'] = None,
                 date_measure_field: Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureField'] = None,
                 numerical_measure_field: Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureField'] = None):
        if calculated_measure_field is not None:
            pulumi.set(__self__, "calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            pulumi.set(__self__, "categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            pulumi.set(__self__, "date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            pulumi.set(__self__, "numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureField']:
        return pulumi.get(self, "calculated_measure_field")

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureField']:
        return pulumi.get(self, "categorical_measure_field")

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureField']:
        return pulumi.get(self, "date_measure_field")

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureField']:
        return pulumi.get(self, "numerical_measure_field")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCalculatedMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 field_id: str):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueCategoricalMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional[str] = None,
                 format_configuration: Optional['outputs.StringFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueDateMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional[str] = None,
                 format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationFieldWellsBoxPlotAggregatedFieldWellsValueNumericalMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional['outputs.NumericalAggregation'] = None,
                 format_configuration: Optional['outputs.NumberFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional['outputs.NumericalAggregation']:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categorySorts":
            suggest = "category_sorts"
        elif key == "paginationConfiguration":
            suggest = "pagination_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None,
                 pagination_configuration: Optional['outputs.VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfiguration'] = None):
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if pagination_configuration is not None:
            pulumi.set(__self__, "pagination_configuration", pagination_configuration)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "category_sorts")

    @property
    @pulumi.getter(name="paginationConfiguration")
    def pagination_configuration(self) -> Optional['outputs.VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfiguration']:
        return pulumi.get(self, "pagination_configuration")


@pulumi.output_type
class VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pageNumber":
            suggest = "page_number"
        elif key == "pageSize":
            suggest = "page_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsBoxPlotVisualChartConfigurationSortConfigurationPaginationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 page_number: int,
                 page_size: int):
        pulumi.set(__self__, "page_number", page_number)
        pulumi.set(__self__, "page_size", page_size)

    @property
    @pulumi.getter(name="pageNumber")
    def page_number(self) -> int:
        return pulumi.get(self, "page_number")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> int:
        return pulumi.get(self, "page_size")


@pulumi.output_type
class VisualsComboChartVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsComboChartVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsComboChartVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsComboChartVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsComboChartVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsComboChartVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsComboChartVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "barDataLabels":
            suggest = "bar_data_labels"
        elif key == "barsArrangement":
            suggest = "bars_arrangement"
        elif key == "categoryAxis":
            suggest = "category_axis"
        elif key == "categoryLabelOptions":
            suggest = "category_label_options"
        elif key == "colorLabelOptions":
            suggest = "color_label_options"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "lineDataLabels":
            suggest = "line_data_labels"
        elif key == "primaryYAxisDisplayOptions":
            suggest = "primary_y_axis_display_options"
        elif key == "primaryYAxisLabelOptions":
            suggest = "primary_y_axis_label_options"
        elif key == "referenceLines":
            suggest = "reference_lines"
        elif key == "secondaryYAxisDisplayOptions":
            suggest = "secondary_y_axis_display_options"
        elif key == "secondaryYAxisLabelOptions":
            suggest = "secondary_y_axis_label_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "visualPalette":
            suggest = "visual_palette"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsComboChartVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsComboChartVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsComboChartVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bar_data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 bars_arrangement: Optional[str] = None,
                 category_axis: Optional['outputs.AxisDisplayOptions'] = None,
                 category_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 color_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 field_wells: Optional['outputs.VisualsComboChartVisualChartConfigurationFieldWells'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 line_data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 primary_y_axis_display_options: Optional['outputs.AxisDisplayOptions'] = None,
                 primary_y_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 reference_lines: Optional[Sequence['outputs.ReferenceLine']] = None,
                 secondary_y_axis_display_options: Optional['outputs.AxisDisplayOptions'] = None,
                 secondary_y_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsComboChartVisualChartConfigurationSortConfiguration'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None):
        if bar_data_labels is not None:
            pulumi.set(__self__, "bar_data_labels", bar_data_labels)
        if bars_arrangement is not None:
            pulumi.set(__self__, "bars_arrangement", bars_arrangement)
        if category_axis is not None:
            pulumi.set(__self__, "category_axis", category_axis)
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if color_label_options is not None:
            pulumi.set(__self__, "color_label_options", color_label_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if line_data_labels is not None:
            pulumi.set(__self__, "line_data_labels", line_data_labels)
        if primary_y_axis_display_options is not None:
            pulumi.set(__self__, "primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            pulumi.set(__self__, "primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            pulumi.set(__self__, "reference_lines", reference_lines)
        if secondary_y_axis_display_options is not None:
            pulumi.set(__self__, "secondary_y_axis_display_options", secondary_y_axis_display_options)
        if secondary_y_axis_label_options is not None:
            pulumi.set(__self__, "secondary_y_axis_label_options", secondary_y_axis_label_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="barDataLabels")
    def bar_data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "bar_data_labels")

    @property
    @pulumi.getter(name="barsArrangement")
    def bars_arrangement(self) -> Optional[str]:
        return pulumi.get(self, "bars_arrangement")

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "category_axis")

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "category_label_options")

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "color_label_options")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsComboChartVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter(name="lineDataLabels")
    def line_data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "line_data_labels")

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "primary_y_axis_display_options")

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "primary_y_axis_label_options")

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[Sequence['outputs.ReferenceLine']]:
        return pulumi.get(self, "reference_lines")

    @property
    @pulumi.getter(name="secondaryYAxisDisplayOptions")
    def secondary_y_axis_display_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "secondary_y_axis_display_options")

    @property
    @pulumi.getter(name="secondaryYAxisLabelOptions")
    def secondary_y_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "secondary_y_axis_label_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsComboChartVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")


@pulumi.output_type
class VisualsComboChartVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comboChartAggregatedFieldWells":
            suggest = "combo_chart_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsComboChartVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsComboChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsComboChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 combo_chart_aggregated_field_wells: Optional['outputs.VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWells'] = None):
        if combo_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "combo_chart_aggregated_field_wells", combo_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="comboChartAggregatedFieldWells")
    def combo_chart_aggregated_field_wells(self) -> Optional['outputs.VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWells']:
        return pulumi.get(self, "combo_chart_aggregated_field_wells")


@pulumi.output_type
class VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "barValues":
            suggest = "bar_values"
        elif key == "lineValues":
            suggest = "line_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsComboChartVisualChartConfigurationFieldWellsComboChartAggregatedFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bar_values: Optional[Sequence['outputs.MeasureFieldSchema']] = None,
                 categories: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 colors: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 line_values: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if bar_values is not None:
            pulumi.set(__self__, "bar_values", bar_values)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if line_values is not None:
            pulumi.set(__self__, "line_values", line_values)

    @property
    @pulumi.getter(name="barValues")
    def bar_values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "bar_values")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def colors(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="lineValues")
    def line_values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "line_values")


@pulumi.output_type
class VisualsComboChartVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryItemsLimit":
            suggest = "category_items_limit"
        elif key == "categorySorts":
            suggest = "category_sorts"
        elif key == "colorItemsLimit":
            suggest = "color_items_limit"
        elif key == "colorSorts":
            suggest = "color_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsComboChartVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsComboChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsComboChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 category_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None,
                 color_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 color_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if color_items_limit is not None:
            pulumi.set(__self__, "color_items_limit", color_items_limit)
        if color_sorts is not None:
            pulumi.set(__self__, "color_sorts", color_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "category_items_limit")

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "category_sorts")

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "color_items_limit")

    @property
    @pulumi.getter(name="colorSorts")
    def color_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "color_sorts")


@pulumi.output_type
class VisualsCustomContentVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifier":
            suggest = "data_set_identifier"
        elif key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsCustomContentVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsCustomContentVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsCustomContentVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_identifier: str,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsCustomContentVisualChartConfiguration'] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> str:
        return pulumi.get(self, "data_set_identifier")

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsCustomContentVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsCustomContentVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "contentUrl":
            suggest = "content_url"
        elif key == "imageScaling":
            suggest = "image_scaling"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsCustomContentVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsCustomContentVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsCustomContentVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_type: Optional[str] = None,
                 content_url: Optional[str] = None,
                 image_scaling: Optional[str] = None):
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if content_url is not None:
            pulumi.set(__self__, "content_url", content_url)
        if image_scaling is not None:
            pulumi.set(__self__, "image_scaling", image_scaling)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="contentUrl")
    def content_url(self) -> Optional[str]:
        return pulumi.get(self, "content_url")

    @property
    @pulumi.getter(name="imageScaling")
    def image_scaling(self) -> Optional[str]:
        return pulumi.get(self, "image_scaling")


@pulumi.output_type
class VisualsEmptyVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifier":
            suggest = "data_set_identifier"
        elif key == "visualId":
            suggest = "visual_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsEmptyVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsEmptyVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsEmptyVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_identifier: str,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> str:
        return pulumi.get(self, "data_set_identifier")

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")


@pulumi.output_type
class VisualsFilledMapVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"
        elif key == "conditionalFormatting":
            suggest = "conditional_formatting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFilledMapVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFilledMapVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFilledMapVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsFilledMapVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 conditional_formatting: Optional['outputs.VisualsFilledMapVisualConditionalFormatting'] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if conditional_formatting is not None:
            pulumi.set(__self__, "conditional_formatting", conditional_formatting)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsFilledMapVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional['outputs.VisualsFilledMapVisualConditionalFormatting']:
        return pulumi.get(self, "conditional_formatting")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsFilledMapVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldWells":
            suggest = "field_wells"
        elif key == "mapStyleOptions":
            suggest = "map_style_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "windowOptions":
            suggest = "window_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFilledMapVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFilledMapVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFilledMapVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_wells: Optional['outputs.VisualsFilledMapVisualChartConfigurationFieldWells'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 map_style_options: Optional['outputs.VisualsFilledMapVisualChartConfigurationMapStyleOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsFilledMapVisualChartConfigurationSortConfiguration'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 window_options: Optional['outputs.VisualsFilledMapVisualChartConfigurationWindowOptions'] = None):
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if map_style_options is not None:
            pulumi.set(__self__, "map_style_options", map_style_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if window_options is not None:
            pulumi.set(__self__, "window_options", window_options)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsFilledMapVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter(name="mapStyleOptions")
    def map_style_options(self) -> Optional['outputs.VisualsFilledMapVisualChartConfigurationMapStyleOptions']:
        return pulumi.get(self, "map_style_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsFilledMapVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter(name="windowOptions")
    def window_options(self) -> Optional['outputs.VisualsFilledMapVisualChartConfigurationWindowOptions']:
        return pulumi.get(self, "window_options")


@pulumi.output_type
class VisualsFilledMapVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filledMapAggregatedFieldWells":
            suggest = "filled_map_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFilledMapVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFilledMapVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFilledMapVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filled_map_aggregated_field_wells: Optional['outputs.VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWells'] = None):
        if filled_map_aggregated_field_wells is not None:
            pulumi.set(__self__, "filled_map_aggregated_field_wells", filled_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="filledMapAggregatedFieldWells")
    def filled_map_aggregated_field_wells(self) -> Optional['outputs.VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWells']:
        return pulumi.get(self, "filled_map_aggregated_field_wells")


@pulumi.output_type
class VisualsFilledMapVisualChartConfigurationFieldWellsFilledMapAggregatedFieldWells(dict):
    def __init__(__self__, *,
                 geospatial: Optional['outputs.SmallMultiplesOptions'] = None,
                 values: Optional['outputs.MeasureFieldSchema2'] = None):
        if geospatial is not None:
            pulumi.set(__self__, "geospatial", geospatial)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def geospatial(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "geospatial")

    @property
    @pulumi.getter
    def values(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsFilledMapVisualChartConfigurationMapStyleOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseMapStyle":
            suggest = "base_map_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFilledMapVisualChartConfigurationMapStyleOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFilledMapVisualChartConfigurationMapStyleOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFilledMapVisualChartConfigurationMapStyleOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_map_style: Optional[str] = None):
        if base_map_style is not None:
            pulumi.set(__self__, "base_map_style", base_map_style)

    @property
    @pulumi.getter(name="baseMapStyle")
    def base_map_style(self) -> Optional[str]:
        return pulumi.get(self, "base_map_style")


@pulumi.output_type
class VisualsFilledMapVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categorySorts":
            suggest = "category_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFilledMapVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFilledMapVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFilledMapVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "category_sorts")


@pulumi.output_type
class VisualsFilledMapVisualChartConfigurationWindowOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapZoomMode":
            suggest = "map_zoom_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFilledMapVisualChartConfigurationWindowOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFilledMapVisualChartConfigurationWindowOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFilledMapVisualChartConfigurationWindowOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bounds: Optional['outputs.VisualsFilledMapVisualChartConfigurationWindowOptionsBounds'] = None,
                 map_zoom_mode: Optional[str] = None):
        if bounds is not None:
            pulumi.set(__self__, "bounds", bounds)
        if map_zoom_mode is not None:
            pulumi.set(__self__, "map_zoom_mode", map_zoom_mode)

    @property
    @pulumi.getter
    def bounds(self) -> Optional['outputs.VisualsFilledMapVisualChartConfigurationWindowOptionsBounds']:
        return pulumi.get(self, "bounds")

    @property
    @pulumi.getter(name="mapZoomMode")
    def map_zoom_mode(self) -> Optional[str]:
        return pulumi.get(self, "map_zoom_mode")


@pulumi.output_type
class VisualsFilledMapVisualChartConfigurationWindowOptionsBounds(dict):
    def __init__(__self__, *,
                 east: float,
                 north: float,
                 south: float,
                 west: float):
        pulumi.set(__self__, "east", east)
        pulumi.set(__self__, "north", north)
        pulumi.set(__self__, "south", south)
        pulumi.set(__self__, "west", west)

    @property
    @pulumi.getter
    def east(self) -> float:
        return pulumi.get(self, "east")

    @property
    @pulumi.getter
    def north(self) -> float:
        return pulumi.get(self, "north")

    @property
    @pulumi.getter
    def south(self) -> float:
        return pulumi.get(self, "south")

    @property
    @pulumi.getter
    def west(self) -> float:
        return pulumi.get(self, "west")


@pulumi.output_type
class VisualsFilledMapVisualConditionalFormatting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionalFormattingOptions":
            suggest = "conditional_formatting_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFilledMapVisualConditionalFormatting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFilledMapVisualConditionalFormatting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFilledMapVisualConditionalFormatting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditional_formatting_options: Sequence['outputs.VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption']):
        pulumi.set(__self__, "conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Sequence['outputs.VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption']:
        return pulumi.get(self, "conditional_formatting_options")


@pulumi.output_type
class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOption(dict):
    def __init__(__self__, *,
                 shape: 'outputs.VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape'):
        pulumi.set(__self__, "shape", shape)

    @property
    @pulumi.getter
    def shape(self) -> 'outputs.VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape':
        return pulumi.get(self, "shape")


@pulumi.output_type
class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShape.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 format: Optional['outputs.VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormat'] = None):
        pulumi.set(__self__, "field_id", field_id)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter
    def format(self) -> Optional['outputs.VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormat']:
        return pulumi.get(self, "format")


@pulumi.output_type
class VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFilledMapVisualConditionalFormattingConditionalFormattingOptionShapeFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: 'outputs.ConditionalFormattingColor'):
        pulumi.set(__self__, "background_color", background_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "background_color")


@pulumi.output_type
class VisualsFunnelChartVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFunnelChartVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFunnelChartVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFunnelChartVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsFunnelChartVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsFunnelChartVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsFunnelChartVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryLabelOptions":
            suggest = "category_label_options"
        elif key == "dataLabelOptions":
            suggest = "data_label_options"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "valueLabelOptions":
            suggest = "value_label_options"
        elif key == "visualPalette":
            suggest = "visual_palette"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFunnelChartVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFunnelChartVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFunnelChartVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 data_label_options: Optional['outputs.VisualsFunnelChartVisualChartConfigurationDataLabelOptions'] = None,
                 field_wells: Optional['outputs.VisualsFunnelChartVisualChartConfigurationFieldWells'] = None,
                 sort_configuration: Optional['outputs.VisualsFunnelChartVisualChartConfigurationSortConfiguration'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 value_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None):
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if data_label_options is not None:
            pulumi.set(__self__, "data_label_options", data_label_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if value_label_options is not None:
            pulumi.set(__self__, "value_label_options", value_label_options)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "category_label_options")

    @property
    @pulumi.getter(name="dataLabelOptions")
    def data_label_options(self) -> Optional['outputs.VisualsFunnelChartVisualChartConfigurationDataLabelOptions']:
        return pulumi.get(self, "data_label_options")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsFunnelChartVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsFunnelChartVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "value_label_options")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")


@pulumi.output_type
class VisualsFunnelChartVisualChartConfigurationDataLabelOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryLabelVisibility":
            suggest = "category_label_visibility"
        elif key == "labelColor":
            suggest = "label_color"
        elif key == "labelFontConfiguration":
            suggest = "label_font_configuration"
        elif key == "measureDataLabelStyle":
            suggest = "measure_data_label_style"
        elif key == "measureLabelVisibility":
            suggest = "measure_label_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFunnelChartVisualChartConfigurationDataLabelOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFunnelChartVisualChartConfigurationDataLabelOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFunnelChartVisualChartConfigurationDataLabelOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_label_visibility: Optional[str] = None,
                 label_color: Optional[str] = None,
                 label_font_configuration: Optional['outputs.FontConfiguration'] = None,
                 measure_data_label_style: Optional[str] = None,
                 measure_label_visibility: Optional[str] = None,
                 position: Optional[str] = None,
                 visibility: Optional[str] = None):
        if category_label_visibility is not None:
            pulumi.set(__self__, "category_label_visibility", category_label_visibility)
        if label_color is not None:
            pulumi.set(__self__, "label_color", label_color)
        if label_font_configuration is not None:
            pulumi.set(__self__, "label_font_configuration", label_font_configuration)
        if measure_data_label_style is not None:
            pulumi.set(__self__, "measure_data_label_style", measure_data_label_style)
        if measure_label_visibility is not None:
            pulumi.set(__self__, "measure_label_visibility", measure_label_visibility)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="categoryLabelVisibility")
    def category_label_visibility(self) -> Optional[str]:
        return pulumi.get(self, "category_label_visibility")

    @property
    @pulumi.getter(name="labelColor")
    def label_color(self) -> Optional[str]:
        return pulumi.get(self, "label_color")

    @property
    @pulumi.getter(name="labelFontConfiguration")
    def label_font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "label_font_configuration")

    @property
    @pulumi.getter(name="measureDataLabelStyle")
    def measure_data_label_style(self) -> Optional[str]:
        return pulumi.get(self, "measure_data_label_style")

    @property
    @pulumi.getter(name="measureLabelVisibility")
    def measure_label_visibility(self) -> Optional[str]:
        return pulumi.get(self, "measure_label_visibility")

    @property
    @pulumi.getter
    def position(self) -> Optional[str]:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class VisualsFunnelChartVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "funnelChartAggregatedFieldWells":
            suggest = "funnel_chart_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFunnelChartVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFunnelChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFunnelChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 funnel_chart_aggregated_field_wells: Optional['outputs.VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWells'] = None):
        if funnel_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "funnel_chart_aggregated_field_wells", funnel_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="funnelChartAggregatedFieldWells")
    def funnel_chart_aggregated_field_wells(self) -> Optional['outputs.VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWells']:
        return pulumi.get(self, "funnel_chart_aggregated_field_wells")


@pulumi.output_type
class VisualsFunnelChartVisualChartConfigurationFieldWellsFunnelChartAggregatedFieldWells(dict):
    def __init__(__self__, *,
                 category: Optional['outputs.SmallMultiplesOptions'] = None,
                 values: Optional['outputs.MeasureFieldSchema2'] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def values(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsFunnelChartVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryItemsLimit":
            suggest = "category_items_limit"
        elif key == "categorySorts":
            suggest = "category_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsFunnelChartVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsFunnelChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsFunnelChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 category_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "category_items_limit")

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "category_sorts")


@pulumi.output_type
class VisualsGaugeChartVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "conditionalFormatting":
            suggest = "conditional_formatting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsGaugeChartVisualChartConfiguration'] = None,
                 conditional_formatting: Optional['outputs.VisualsGaugeChartVisualConditionalFormatting'] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            pulumi.set(__self__, "conditional_formatting", conditional_formatting)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsGaugeChartVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional['outputs.VisualsGaugeChartVisualConditionalFormatting']:
        return pulumi.get(self, "conditional_formatting")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsGaugeChartVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLabels":
            suggest = "data_labels"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "gaugeChartOptions":
            suggest = "gauge_chart_options"
        elif key == "visualPalette":
            suggest = "visual_palette"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 field_wells: Optional['outputs.VisualsGaugeChartVisualChartConfigurationFieldWells'] = None,
                 gauge_chart_options: Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptions'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None):
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if gauge_chart_options is not None:
            pulumi.set(__self__, "gauge_chart_options", gauge_chart_options)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "data_labels")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsGaugeChartVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter(name="gaugeChartOptions")
    def gauge_chart_options(self) -> Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptions']:
        return pulumi.get(self, "gauge_chart_options")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")


@pulumi.output_type
class VisualsGaugeChartVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetValues":
            suggest = "target_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_values: Optional[Sequence['outputs.MeasureFieldSchema']] = None,
                 values: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if target_values is not None:
            pulumi.set(__self__, "target_values", target_values)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="targetValues")
    def target_values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "target_values")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arcAxis":
            suggest = "arc_axis"
        elif key == "primaryValueDisplayType":
            suggest = "primary_value_display_type"
        elif key == "primaryValueFontConfiguration":
            suggest = "primary_value_font_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualChartConfigurationGaugeChartOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualChartConfigurationGaugeChartOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualChartConfigurationGaugeChartOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arc: Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArc'] = None,
                 arc_axis: Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxis'] = None,
                 comparison: Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparison'] = None,
                 primary_value_display_type: Optional[str] = None,
                 primary_value_font_configuration: Optional['outputs.FontConfiguration'] = None):
        if arc is not None:
            pulumi.set(__self__, "arc", arc)
        if arc_axis is not None:
            pulumi.set(__self__, "arc_axis", arc_axis)
        if comparison is not None:
            pulumi.set(__self__, "comparison", comparison)
        if primary_value_display_type is not None:
            pulumi.set(__self__, "primary_value_display_type", primary_value_display_type)
        if primary_value_font_configuration is not None:
            pulumi.set(__self__, "primary_value_font_configuration", primary_value_font_configuration)

    @property
    @pulumi.getter
    def arc(self) -> Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArc']:
        return pulumi.get(self, "arc")

    @property
    @pulumi.getter(name="arcAxis")
    def arc_axis(self) -> Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxis']:
        return pulumi.get(self, "arc_axis")

    @property
    @pulumi.getter
    def comparison(self) -> Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparison']:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter(name="primaryValueDisplayType")
    def primary_value_display_type(self) -> Optional[str]:
        return pulumi.get(self, "primary_value_display_type")

    @property
    @pulumi.getter(name="primaryValueFontConfiguration")
    def primary_value_font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "primary_value_font_configuration")


@pulumi.output_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arcAngle":
            suggest = "arc_angle"
        elif key == "arcThickness":
            suggest = "arc_thickness"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arc_angle: Optional[float] = None,
                 arc_thickness: Optional[str] = None):
        if arc_angle is not None:
            pulumi.set(__self__, "arc_angle", arc_angle)
        if arc_thickness is not None:
            pulumi.set(__self__, "arc_thickness", arc_thickness)

    @property
    @pulumi.getter(name="arcAngle")
    def arc_angle(self) -> Optional[float]:
        return pulumi.get(self, "arc_angle")

    @property
    @pulumi.getter(name="arcThickness")
    def arc_thickness(self) -> Optional[str]:
        return pulumi.get(self, "arc_thickness")


@pulumi.output_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reserveRange":
            suggest = "reserve_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range: Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRange'] = None,
                 reserve_range: Optional[int] = None):
        if range is not None:
            pulumi.set(__self__, "range", range)
        if reserve_range is not None:
            pulumi.set(__self__, "reserve_range", reserve_range)

    @property
    @pulumi.getter
    def range(self) -> Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRange']:
        return pulumi.get(self, "range")

    @property
    @pulumi.getter(name="reserveRange")
    def reserve_range(self) -> Optional[int]:
        return pulumi.get(self, "reserve_range")


@pulumi.output_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsArcAxisRange(dict):
    def __init__(__self__, *,
                 max: Optional[float] = None,
                 min: Optional[float] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        return pulumi.get(self, "min")


@pulumi.output_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparison(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonFormat":
            suggest = "comparison_format"
        elif key == "comparisonMethod":
            suggest = "comparison_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparison. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparison.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparison.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison_format: Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormat'] = None,
                 comparison_method: Optional[str] = None):
        if comparison_format is not None:
            pulumi.set(__self__, "comparison_format", comparison_format)
        if comparison_method is not None:
            pulumi.set(__self__, "comparison_method", comparison_method)

    @property
    @pulumi.getter(name="comparisonFormat")
    def comparison_format(self) -> Optional['outputs.VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormat']:
        return pulumi.get(self, "comparison_format")

    @property
    @pulumi.getter(name="comparisonMethod")
    def comparison_method(self) -> Optional[str]:
        return pulumi.get(self, "comparison_method")


@pulumi.output_type
class VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberDisplayFormatConfiguration":
            suggest = "number_display_format_configuration"
        elif key == "percentageDisplayFormatConfiguration":
            suggest = "percentage_display_format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualChartConfigurationGaugeChartOptionsComparisonComparisonFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number_display_format_configuration: Optional['outputs.NumberDisplayFormatConfiguration'] = None,
                 percentage_display_format_configuration: Optional['outputs.PercentageDisplayFormatConfiguration'] = None):
        if number_display_format_configuration is not None:
            pulumi.set(__self__, "number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            pulumi.set(__self__, "percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional['outputs.NumberDisplayFormatConfiguration']:
        return pulumi.get(self, "number_display_format_configuration")

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional['outputs.PercentageDisplayFormatConfiguration']:
        return pulumi.get(self, "percentage_display_format_configuration")


@pulumi.output_type
class VisualsGaugeChartVisualConditionalFormatting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionalFormattingOptions":
            suggest = "conditional_formatting_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualConditionalFormatting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualConditionalFormatting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualConditionalFormatting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditional_formatting_options: Optional[Sequence['outputs.VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOption']] = None):
        if conditional_formatting_options is not None:
            pulumi.set(__self__, "conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[Sequence['outputs.VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOption']]:
        return pulumi.get(self, "conditional_formatting_options")


@pulumi.output_type
class VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryValue":
            suggest = "primary_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arc: Optional['outputs.VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArc'] = None,
                 primary_value: Optional['outputs.VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValue'] = None):
        if arc is not None:
            pulumi.set(__self__, "arc", arc)
        if primary_value is not None:
            pulumi.set(__self__, "primary_value", primary_value)

    @property
    @pulumi.getter
    def arc(self) -> Optional['outputs.VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArc']:
        return pulumi.get(self, "arc")

    @property
    @pulumi.getter(name="primaryValue")
    def primary_value(self) -> Optional['outputs.VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValue']:
        return pulumi.get(self, "primary_value")


@pulumi.output_type
class VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "foregroundColor":
            suggest = "foreground_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionArc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 foreground_color: 'outputs.ConditionalFormattingColor'):
        pulumi.set(__self__, "foreground_color", foreground_color)

    @property
    @pulumi.getter(name="foregroundColor")
    def foreground_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "foreground_color")


@pulumi.output_type
class VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGaugeChartVisualConditionalFormattingConditionalFormattingOptionPrimaryValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 text_color: 'outputs.ConditionalFormattingColor',
                 icon: Optional['outputs.ConditionalFormattingIcon'] = None):
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "text_color")

    @property
    @pulumi.getter
    def icon(self) -> Optional['outputs.ConditionalFormattingIcon']:
        return pulumi.get(self, "icon")


@pulumi.output_type
class VisualsGeospatialMapVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGeospatialMapVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGeospatialMapVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGeospatialMapVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsGeospatialMapVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsGeospatialMapVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsGeospatialMapVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldWells":
            suggest = "field_wells"
        elif key == "mapStyleOptions":
            suggest = "map_style_options"
        elif key == "pointStyleOptions":
            suggest = "point_style_options"
        elif key == "visualPalette":
            suggest = "visual_palette"
        elif key == "windowOptions":
            suggest = "window_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGeospatialMapVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGeospatialMapVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGeospatialMapVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_wells: Optional['outputs.VisualsGeospatialMapVisualChartConfigurationFieldWells'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 map_style_options: Optional['outputs.VisualsGeospatialMapVisualChartConfigurationMapStyleOptions'] = None,
                 point_style_options: Optional['outputs.VisualsGeospatialMapVisualChartConfigurationPointStyleOptions'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None,
                 window_options: Optional['outputs.VisualsGeospatialMapVisualChartConfigurationWindowOptions'] = None):
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if map_style_options is not None:
            pulumi.set(__self__, "map_style_options", map_style_options)
        if point_style_options is not None:
            pulumi.set(__self__, "point_style_options", point_style_options)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)
        if window_options is not None:
            pulumi.set(__self__, "window_options", window_options)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsGeospatialMapVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter(name="mapStyleOptions")
    def map_style_options(self) -> Optional['outputs.VisualsGeospatialMapVisualChartConfigurationMapStyleOptions']:
        return pulumi.get(self, "map_style_options")

    @property
    @pulumi.getter(name="pointStyleOptions")
    def point_style_options(self) -> Optional['outputs.VisualsGeospatialMapVisualChartConfigurationPointStyleOptions']:
        return pulumi.get(self, "point_style_options")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")

    @property
    @pulumi.getter(name="windowOptions")
    def window_options(self) -> Optional['outputs.VisualsGeospatialMapVisualChartConfigurationWindowOptions']:
        return pulumi.get(self, "window_options")


@pulumi.output_type
class VisualsGeospatialMapVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "geospatialMapAggregatedFieldWells":
            suggest = "geospatial_map_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGeospatialMapVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGeospatialMapVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGeospatialMapVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geospatial_map_aggregated_field_wells: Optional['outputs.VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWells'] = None):
        if geospatial_map_aggregated_field_wells is not None:
            pulumi.set(__self__, "geospatial_map_aggregated_field_wells", geospatial_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="geospatialMapAggregatedFieldWells")
    def geospatial_map_aggregated_field_wells(self) -> Optional['outputs.VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWells']:
        return pulumi.get(self, "geospatial_map_aggregated_field_wells")


@pulumi.output_type
class VisualsGeospatialMapVisualChartConfigurationFieldWellsGeospatialMapAggregatedFieldWells(dict):
    def __init__(__self__, *,
                 colors: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 geospatials: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 values: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if geospatials is not None:
            pulumi.set(__self__, "geospatials", geospatials)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def colors(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter
    def geospatials(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "geospatials")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsGeospatialMapVisualChartConfigurationMapStyleOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseMapStyle":
            suggest = "base_map_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGeospatialMapVisualChartConfigurationMapStyleOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGeospatialMapVisualChartConfigurationMapStyleOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGeospatialMapVisualChartConfigurationMapStyleOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_map_style: Optional[str] = None):
        if base_map_style is not None:
            pulumi.set(__self__, "base_map_style", base_map_style)

    @property
    @pulumi.getter(name="baseMapStyle")
    def base_map_style(self) -> Optional[str]:
        return pulumi.get(self, "base_map_style")


@pulumi.output_type
class VisualsGeospatialMapVisualChartConfigurationPointStyleOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterMarkerConfiguration":
            suggest = "cluster_marker_configuration"
        elif key == "selectedPointStyle":
            suggest = "selected_point_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGeospatialMapVisualChartConfigurationPointStyleOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGeospatialMapVisualChartConfigurationPointStyleOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGeospatialMapVisualChartConfigurationPointStyleOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_marker_configuration: Optional['outputs.VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfiguration'] = None,
                 selected_point_style: Optional[str] = None):
        if cluster_marker_configuration is not None:
            pulumi.set(__self__, "cluster_marker_configuration", cluster_marker_configuration)
        if selected_point_style is not None:
            pulumi.set(__self__, "selected_point_style", selected_point_style)

    @property
    @pulumi.getter(name="clusterMarkerConfiguration")
    def cluster_marker_configuration(self) -> Optional['outputs.VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfiguration']:
        return pulumi.get(self, "cluster_marker_configuration")

    @property
    @pulumi.getter(name="selectedPointStyle")
    def selected_point_style(self) -> Optional[str]:
        return pulumi.get(self, "selected_point_style")


@pulumi.output_type
class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterMarker":
            suggest = "cluster_marker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_marker: Optional['outputs.VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarker'] = None):
        if cluster_marker is not None:
            pulumi.set(__self__, "cluster_marker", cluster_marker)

    @property
    @pulumi.getter(name="clusterMarker")
    def cluster_marker(self) -> Optional['outputs.VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarker']:
        return pulumi.get(self, "cluster_marker")


@pulumi.output_type
class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "simpleClusterMarker":
            suggest = "simple_cluster_marker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 simple_cluster_marker: Optional['outputs.VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarker'] = None):
        if simple_cluster_marker is not None:
            pulumi.set(__self__, "simple_cluster_marker", simple_cluster_marker)

    @property
    @pulumi.getter(name="simpleClusterMarker")
    def simple_cluster_marker(self) -> Optional['outputs.VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarker']:
        return pulumi.get(self, "simple_cluster_marker")


@pulumi.output_type
class VisualsGeospatialMapVisualChartConfigurationPointStyleOptionsClusterMarkerConfigurationClusterMarkerSimpleClusterMarker(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")


@pulumi.output_type
class VisualsGeospatialMapVisualChartConfigurationWindowOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapZoomMode":
            suggest = "map_zoom_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsGeospatialMapVisualChartConfigurationWindowOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsGeospatialMapVisualChartConfigurationWindowOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsGeospatialMapVisualChartConfigurationWindowOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bounds: Optional['outputs.VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds'] = None,
                 map_zoom_mode: Optional[str] = None):
        if bounds is not None:
            pulumi.set(__self__, "bounds", bounds)
        if map_zoom_mode is not None:
            pulumi.set(__self__, "map_zoom_mode", map_zoom_mode)

    @property
    @pulumi.getter
    def bounds(self) -> Optional['outputs.VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds']:
        return pulumi.get(self, "bounds")

    @property
    @pulumi.getter(name="mapZoomMode")
    def map_zoom_mode(self) -> Optional[str]:
        return pulumi.get(self, "map_zoom_mode")


@pulumi.output_type
class VisualsGeospatialMapVisualChartConfigurationWindowOptionsBounds(dict):
    def __init__(__self__, *,
                 east: float,
                 north: float,
                 south: float,
                 west: float):
        pulumi.set(__self__, "east", east)
        pulumi.set(__self__, "north", north)
        pulumi.set(__self__, "south", south)
        pulumi.set(__self__, "west", west)

    @property
    @pulumi.getter
    def east(self) -> float:
        return pulumi.get(self, "east")

    @property
    @pulumi.getter
    def north(self) -> float:
        return pulumi.get(self, "north")

    @property
    @pulumi.getter
    def south(self) -> float:
        return pulumi.get(self, "south")

    @property
    @pulumi.getter
    def west(self) -> float:
        return pulumi.get(self, "west")


@pulumi.output_type
class VisualsHeatMapVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsHeatMapVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsHeatMapVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsHeatMapVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsHeatMapVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsHeatMapVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsHeatMapVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorScale":
            suggest = "color_scale"
        elif key == "columnLabelOptions":
            suggest = "column_label_options"
        elif key == "dataLabels":
            suggest = "data_labels"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "rowLabelOptions":
            suggest = "row_label_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsHeatMapVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsHeatMapVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsHeatMapVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color_scale: Optional['outputs.ColorScale'] = None,
                 column_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 field_wells: Optional['outputs.VisualsHeatMapVisualChartConfigurationFieldWells'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 row_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsHeatMapVisualChartConfigurationSortConfiguration'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None):
        if color_scale is not None:
            pulumi.set(__self__, "color_scale", color_scale)
        if column_label_options is not None:
            pulumi.set(__self__, "column_label_options", column_label_options)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if row_label_options is not None:
            pulumi.set(__self__, "row_label_options", row_label_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)

    @property
    @pulumi.getter(name="colorScale")
    def color_scale(self) -> Optional['outputs.ColorScale']:
        return pulumi.get(self, "color_scale")

    @property
    @pulumi.getter(name="columnLabelOptions")
    def column_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "column_label_options")

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "data_labels")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsHeatMapVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter(name="rowLabelOptions")
    def row_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "row_label_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsHeatMapVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")


@pulumi.output_type
class VisualsHeatMapVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "heatMapAggregatedFieldWells":
            suggest = "heat_map_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsHeatMapVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsHeatMapVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsHeatMapVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 heat_map_aggregated_field_wells: Optional['outputs.VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWells'] = None):
        if heat_map_aggregated_field_wells is not None:
            pulumi.set(__self__, "heat_map_aggregated_field_wells", heat_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="heatMapAggregatedFieldWells")
    def heat_map_aggregated_field_wells(self) -> Optional['outputs.VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWells']:
        return pulumi.get(self, "heat_map_aggregated_field_wells")


@pulumi.output_type
class VisualsHeatMapVisualChartConfigurationFieldWellsHeatMapAggregatedFieldWells(dict):
    def __init__(__self__, *,
                 columns: Optional['outputs.SmallMultiplesOptions'] = None,
                 rows: Optional['outputs.SmallMultiplesOptions'] = None,
                 values: Optional['outputs.MeasureFieldSchema2'] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if rows is not None:
            pulumi.set(__self__, "rows", rows)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def columns(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def rows(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter
    def values(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsHeatMapVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "heatMapColumnItemsLimitConfiguration":
            suggest = "heat_map_column_items_limit_configuration"
        elif key == "heatMapColumnSorts":
            suggest = "heat_map_column_sorts"
        elif key == "heatMapRowItemsLimitConfiguration":
            suggest = "heat_map_row_items_limit_configuration"
        elif key == "heatMapRowSorts":
            suggest = "heat_map_row_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsHeatMapVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsHeatMapVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsHeatMapVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 heat_map_column_items_limit_configuration: Optional['outputs.ItemsLimitConfiguration'] = None,
                 heat_map_column_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None,
                 heat_map_row_items_limit_configuration: Optional['outputs.ItemsLimitConfiguration'] = None,
                 heat_map_row_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if heat_map_column_items_limit_configuration is not None:
            pulumi.set(__self__, "heat_map_column_items_limit_configuration", heat_map_column_items_limit_configuration)
        if heat_map_column_sorts is not None:
            pulumi.set(__self__, "heat_map_column_sorts", heat_map_column_sorts)
        if heat_map_row_items_limit_configuration is not None:
            pulumi.set(__self__, "heat_map_row_items_limit_configuration", heat_map_row_items_limit_configuration)
        if heat_map_row_sorts is not None:
            pulumi.set(__self__, "heat_map_row_sorts", heat_map_row_sorts)

    @property
    @pulumi.getter(name="heatMapColumnItemsLimitConfiguration")
    def heat_map_column_items_limit_configuration(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "heat_map_column_items_limit_configuration")

    @property
    @pulumi.getter(name="heatMapColumnSorts")
    def heat_map_column_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "heat_map_column_sorts")

    @property
    @pulumi.getter(name="heatMapRowItemsLimitConfiguration")
    def heat_map_row_items_limit_configuration(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "heat_map_row_items_limit_configuration")

    @property
    @pulumi.getter(name="heatMapRowSorts")
    def heat_map_row_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "heat_map_row_sorts")


@pulumi.output_type
class VisualsHistogramVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsHistogramVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsHistogramVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsHistogramVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsHistogramVisualChartConfiguration'] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsHistogramVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsHistogramVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "binOptions":
            suggest = "bin_options"
        elif key == "dataLabels":
            suggest = "data_labels"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "visualPalette":
            suggest = "visual_palette"
        elif key == "xAxisDisplayOptions":
            suggest = "x_axis_display_options"
        elif key == "xAxisLabelOptions":
            suggest = "x_axis_label_options"
        elif key == "yAxisDisplayOptions":
            suggest = "y_axis_display_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsHistogramVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsHistogramVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsHistogramVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bin_options: Optional['outputs.VisualsHistogramVisualChartConfigurationBinOptions'] = None,
                 data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 field_wells: Optional['outputs.VisualsHistogramVisualChartConfigurationFieldWells'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None,
                 x_axis_display_options: Optional['outputs.AxisDisplayOptions'] = None,
                 x_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 y_axis_display_options: Optional['outputs.AxisDisplayOptions'] = None):
        if bin_options is not None:
            pulumi.set(__self__, "bin_options", bin_options)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)
        if x_axis_display_options is not None:
            pulumi.set(__self__, "x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            pulumi.set(__self__, "x_axis_label_options", x_axis_label_options)
        if y_axis_display_options is not None:
            pulumi.set(__self__, "y_axis_display_options", y_axis_display_options)

    @property
    @pulumi.getter(name="binOptions")
    def bin_options(self) -> Optional['outputs.VisualsHistogramVisualChartConfigurationBinOptions']:
        return pulumi.get(self, "bin_options")

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "data_labels")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsHistogramVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "x_axis_display_options")

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "x_axis_label_options")

    @property
    @pulumi.getter(name="yAxisDisplayOptions")
    def y_axis_display_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "y_axis_display_options")


@pulumi.output_type
class VisualsHistogramVisualChartConfigurationBinOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "binCount":
            suggest = "bin_count"
        elif key == "binWidth":
            suggest = "bin_width"
        elif key == "selectedBinType":
            suggest = "selected_bin_type"
        elif key == "startValue":
            suggest = "start_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsHistogramVisualChartConfigurationBinOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsHistogramVisualChartConfigurationBinOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsHistogramVisualChartConfigurationBinOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bin_count: Optional['outputs.VisualsHistogramVisualChartConfigurationBinOptionsBinCount'] = None,
                 bin_width: Optional['outputs.VisualsHistogramVisualChartConfigurationBinOptionsBinWidth'] = None,
                 selected_bin_type: Optional[str] = None,
                 start_value: Optional[float] = None):
        if bin_count is not None:
            pulumi.set(__self__, "bin_count", bin_count)
        if bin_width is not None:
            pulumi.set(__self__, "bin_width", bin_width)
        if selected_bin_type is not None:
            pulumi.set(__self__, "selected_bin_type", selected_bin_type)
        if start_value is not None:
            pulumi.set(__self__, "start_value", start_value)

    @property
    @pulumi.getter(name="binCount")
    def bin_count(self) -> Optional['outputs.VisualsHistogramVisualChartConfigurationBinOptionsBinCount']:
        return pulumi.get(self, "bin_count")

    @property
    @pulumi.getter(name="binWidth")
    def bin_width(self) -> Optional['outputs.VisualsHistogramVisualChartConfigurationBinOptionsBinWidth']:
        return pulumi.get(self, "bin_width")

    @property
    @pulumi.getter(name="selectedBinType")
    def selected_bin_type(self) -> Optional[str]:
        return pulumi.get(self, "selected_bin_type")

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[float]:
        return pulumi.get(self, "start_value")


@pulumi.output_type
class VisualsHistogramVisualChartConfigurationBinOptionsBinCount(dict):
    def __init__(__self__, *,
                 value: Optional[int] = None):
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsHistogramVisualChartConfigurationBinOptionsBinWidth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "binCountLimit":
            suggest = "bin_count_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsHistogramVisualChartConfigurationBinOptionsBinWidth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsHistogramVisualChartConfigurationBinOptionsBinWidth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsHistogramVisualChartConfigurationBinOptionsBinWidth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bin_count_limit: Optional[int] = None,
                 value: Optional[float] = None):
        if bin_count_limit is not None:
            pulumi.set(__self__, "bin_count_limit", bin_count_limit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="binCountLimit")
    def bin_count_limit(self) -> Optional[int]:
        return pulumi.get(self, "bin_count_limit")

    @property
    @pulumi.getter
    def value(self) -> Optional[float]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsHistogramVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "histogramAggregatedFieldWells":
            suggest = "histogram_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsHistogramVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsHistogramVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsHistogramVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 histogram_aggregated_field_wells: Optional['outputs.VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWells'] = None):
        if histogram_aggregated_field_wells is not None:
            pulumi.set(__self__, "histogram_aggregated_field_wells", histogram_aggregated_field_wells)

    @property
    @pulumi.getter(name="histogramAggregatedFieldWells")
    def histogram_aggregated_field_wells(self) -> Optional['outputs.VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWells']:
        return pulumi.get(self, "histogram_aggregated_field_wells")


@pulumi.output_type
class VisualsHistogramVisualChartConfigurationFieldWellsHistogramAggregatedFieldWells(dict):
    def __init__(__self__, *,
                 values: Optional['outputs.MeasureFieldSchema2'] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsInsightVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSetIdentifier":
            suggest = "data_set_identifier"
        elif key == "visualId":
            suggest = "visual_id"
        elif key == "insightConfiguration":
            suggest = "insight_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_set_identifier: str,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 insight_configuration: Optional['outputs.VisualsInsightVisualInsightConfiguration'] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "data_set_identifier", data_set_identifier)
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if insight_configuration is not None:
            pulumi.set(__self__, "insight_configuration", insight_configuration)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> str:
        return pulumi.get(self, "data_set_identifier")

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="insightConfiguration")
    def insight_configuration(self) -> Optional['outputs.VisualsInsightVisualInsightConfiguration']:
        return pulumi.get(self, "insight_configuration")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsInsightVisualInsightConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customNarrative":
            suggest = "custom_narrative"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computations: Optional[Sequence['outputs.VisualsInsightVisualInsightConfigurationComputation']] = None,
                 custom_narrative: Optional['outputs.VisualsInsightVisualInsightConfigurationCustomNarrative'] = None):
        if computations is not None:
            pulumi.set(__self__, "computations", computations)
        if custom_narrative is not None:
            pulumi.set(__self__, "custom_narrative", custom_narrative)

    @property
    @pulumi.getter
    def computations(self) -> Optional[Sequence['outputs.VisualsInsightVisualInsightConfigurationComputation']]:
        return pulumi.get(self, "computations")

    @property
    @pulumi.getter(name="customNarrative")
    def custom_narrative(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationCustomNarrative']:
        return pulumi.get(self, "custom_narrative")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "growthRate":
            suggest = "growth_rate"
        elif key == "maximumMinimum":
            suggest = "maximum_minimum"
        elif key == "metricComparison":
            suggest = "metric_comparison"
        elif key == "periodOverPeriod":
            suggest = "period_over_period"
        elif key == "periodToDate":
            suggest = "period_to_date"
        elif key == "topBottomMovers":
            suggest = "top_bottom_movers"
        elif key == "topBottomRanked":
            suggest = "top_bottom_ranked"
        elif key == "totalAggregation":
            suggest = "total_aggregation"
        elif key == "uniqueValues":
            suggest = "unique_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forecast: Optional['outputs.VisualsInsightVisualInsightConfigurationComputationForecast'] = None,
                 growth_rate: Optional['outputs.VisualsInsightVisualInsightConfigurationComputationGrowthRate'] = None,
                 maximum_minimum: Optional['outputs.VisualsInsightVisualInsightConfigurationComputationMaximumMinimum'] = None,
                 metric_comparison: Optional['outputs.VisualsInsightVisualInsightConfigurationComputationMetricComparison'] = None,
                 period_over_period: Optional['outputs.VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriod'] = None,
                 period_to_date: Optional['outputs.VisualsInsightVisualInsightConfigurationComputationPeriodToDate'] = None,
                 top_bottom_movers: Optional['outputs.VisualsInsightVisualInsightConfigurationComputationTopBottomMovers'] = None,
                 top_bottom_ranked: Optional['outputs.VisualsInsightVisualInsightConfigurationComputationTopBottomRanked'] = None,
                 total_aggregation: Optional['outputs.VisualsInsightVisualInsightConfigurationComputationTotalAggregation'] = None,
                 unique_values: Optional['outputs.VisualsInsightVisualInsightConfigurationComputationUniqueValues'] = None):
        if forecast is not None:
            pulumi.set(__self__, "forecast", forecast)
        if growth_rate is not None:
            pulumi.set(__self__, "growth_rate", growth_rate)
        if maximum_minimum is not None:
            pulumi.set(__self__, "maximum_minimum", maximum_minimum)
        if metric_comparison is not None:
            pulumi.set(__self__, "metric_comparison", metric_comparison)
        if period_over_period is not None:
            pulumi.set(__self__, "period_over_period", period_over_period)
        if period_to_date is not None:
            pulumi.set(__self__, "period_to_date", period_to_date)
        if top_bottom_movers is not None:
            pulumi.set(__self__, "top_bottom_movers", top_bottom_movers)
        if top_bottom_ranked is not None:
            pulumi.set(__self__, "top_bottom_ranked", top_bottom_ranked)
        if total_aggregation is not None:
            pulumi.set(__self__, "total_aggregation", total_aggregation)
        if unique_values is not None:
            pulumi.set(__self__, "unique_values", unique_values)

    @property
    @pulumi.getter
    def forecast(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationComputationForecast']:
        return pulumi.get(self, "forecast")

    @property
    @pulumi.getter(name="growthRate")
    def growth_rate(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationComputationGrowthRate']:
        return pulumi.get(self, "growth_rate")

    @property
    @pulumi.getter(name="maximumMinimum")
    def maximum_minimum(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationComputationMaximumMinimum']:
        return pulumi.get(self, "maximum_minimum")

    @property
    @pulumi.getter(name="metricComparison")
    def metric_comparison(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationComputationMetricComparison']:
        return pulumi.get(self, "metric_comparison")

    @property
    @pulumi.getter(name="periodOverPeriod")
    def period_over_period(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriod']:
        return pulumi.get(self, "period_over_period")

    @property
    @pulumi.getter(name="periodToDate")
    def period_to_date(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationComputationPeriodToDate']:
        return pulumi.get(self, "period_to_date")

    @property
    @pulumi.getter(name="topBottomMovers")
    def top_bottom_movers(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationComputationTopBottomMovers']:
        return pulumi.get(self, "top_bottom_movers")

    @property
    @pulumi.getter(name="topBottomRanked")
    def top_bottom_ranked(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationComputationTopBottomRanked']:
        return pulumi.get(self, "top_bottom_ranked")

    @property
    @pulumi.getter(name="totalAggregation")
    def total_aggregation(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationComputationTotalAggregation']:
        return pulumi.get(self, "total_aggregation")

    @property
    @pulumi.getter(name="uniqueValues")
    def unique_values(self) -> Optional['outputs.VisualsInsightVisualInsightConfigurationComputationUniqueValues']:
        return pulumi.get(self, "unique_values")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputationForecast(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computationId":
            suggest = "computation_id"
        elif key == "customSeasonalityValue":
            suggest = "custom_seasonality_value"
        elif key == "lowerBoundary":
            suggest = "lower_boundary"
        elif key == "periodsBackward":
            suggest = "periods_backward"
        elif key == "periodsForward":
            suggest = "periods_forward"
        elif key == "predictionInterval":
            suggest = "prediction_interval"
        elif key == "upperBoundary":
            suggest = "upper_boundary"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputationForecast. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputationForecast.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputationForecast.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computation_id: str,
                 seasonality: str,
                 custom_seasonality_value: Optional[int] = None,
                 lower_boundary: Optional[float] = None,
                 name: Optional[str] = None,
                 periods_backward: Optional[int] = None,
                 periods_forward: Optional[int] = None,
                 prediction_interval: Optional[int] = None,
                 time: Optional['outputs.SmallMultiplesOptions'] = None,
                 upper_boundary: Optional[float] = None,
                 value: Optional['outputs.MeasureFieldSchema2'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        pulumi.set(__self__, "seasonality", seasonality)
        if custom_seasonality_value is not None:
            pulumi.set(__self__, "custom_seasonality_value", custom_seasonality_value)
        if lower_boundary is not None:
            pulumi.set(__self__, "lower_boundary", lower_boundary)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if periods_backward is not None:
            pulumi.set(__self__, "periods_backward", periods_backward)
        if periods_forward is not None:
            pulumi.set(__self__, "periods_forward", periods_forward)
        if prediction_interval is not None:
            pulumi.set(__self__, "prediction_interval", prediction_interval)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if upper_boundary is not None:
            pulumi.set(__self__, "upper_boundary", upper_boundary)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> str:
        return pulumi.get(self, "computation_id")

    @property
    @pulumi.getter
    def seasonality(self) -> str:
        return pulumi.get(self, "seasonality")

    @property
    @pulumi.getter(name="customSeasonalityValue")
    def custom_seasonality_value(self) -> Optional[int]:
        return pulumi.get(self, "custom_seasonality_value")

    @property
    @pulumi.getter(name="lowerBoundary")
    def lower_boundary(self) -> Optional[float]:
        return pulumi.get(self, "lower_boundary")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="periodsBackward")
    def periods_backward(self) -> Optional[int]:
        return pulumi.get(self, "periods_backward")

    @property
    @pulumi.getter(name="periodsForward")
    def periods_forward(self) -> Optional[int]:
        return pulumi.get(self, "periods_forward")

    @property
    @pulumi.getter(name="predictionInterval")
    def prediction_interval(self) -> Optional[int]:
        return pulumi.get(self, "prediction_interval")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="upperBoundary")
    def upper_boundary(self) -> Optional[float]:
        return pulumi.get(self, "upper_boundary")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputationGrowthRate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computationId":
            suggest = "computation_id"
        elif key == "periodSize":
            suggest = "period_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputationGrowthRate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputationGrowthRate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputationGrowthRate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computation_id: str,
                 name: Optional[str] = None,
                 period_size: Optional[int] = None,
                 time: Optional['outputs.SmallMultiplesOptions'] = None,
                 value: Optional['outputs.MeasureFieldSchema2'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period_size is not None:
            pulumi.set(__self__, "period_size", period_size)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> str:
        return pulumi.get(self, "computation_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="periodSize")
    def period_size(self) -> Optional[int]:
        return pulumi.get(self, "period_size")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputationMaximumMinimum(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computationId":
            suggest = "computation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputationMaximumMinimum. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputationMaximumMinimum.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputationMaximumMinimum.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computation_id: str,
                 type: str,
                 name: Optional[str] = None,
                 time: Optional['outputs.SmallMultiplesOptions'] = None,
                 value: Optional['outputs.MeasureFieldSchema2'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> str:
        return pulumi.get(self, "computation_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputationMetricComparison(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computationId":
            suggest = "computation_id"
        elif key == "fromValue":
            suggest = "from_value"
        elif key == "targetValue":
            suggest = "target_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputationMetricComparison. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputationMetricComparison.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputationMetricComparison.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computation_id: str,
                 from_value: Optional['outputs.MeasureFieldSchema2'] = None,
                 name: Optional[str] = None,
                 target_value: Optional['outputs.MeasureFieldSchema2'] = None,
                 time: Optional['outputs.SmallMultiplesOptions'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        if from_value is not None:
            pulumi.set(__self__, "from_value", from_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target_value is not None:
            pulumi.set(__self__, "target_value", target_value)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> str:
        return pulumi.get(self, "computation_id")

    @property
    @pulumi.getter(name="fromValue")
    def from_value(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "from_value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "target_value")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "time")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computationId":
            suggest = "computation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputationPeriodOverPeriod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computation_id: str,
                 name: Optional[str] = None,
                 time: Optional['outputs.SmallMultiplesOptions'] = None,
                 value: Optional['outputs.MeasureFieldSchema2'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> str:
        return pulumi.get(self, "computation_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputationPeriodToDate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computationId":
            suggest = "computation_id"
        elif key == "periodTimeGranularity":
            suggest = "period_time_granularity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputationPeriodToDate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputationPeriodToDate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputationPeriodToDate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computation_id: str,
                 period_time_granularity: str,
                 name: Optional[str] = None,
                 time: Optional['outputs.SmallMultiplesOptions'] = None,
                 value: Optional['outputs.MeasureFieldSchema2'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        pulumi.set(__self__, "period_time_granularity", period_time_granularity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> str:
        return pulumi.get(self, "computation_id")

    @property
    @pulumi.getter(name="periodTimeGranularity")
    def period_time_granularity(self) -> str:
        return pulumi.get(self, "period_time_granularity")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputationTopBottomMovers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computationId":
            suggest = "computation_id"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "moverSize":
            suggest = "mover_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputationTopBottomMovers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputationTopBottomMovers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputationTopBottomMovers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computation_id: str,
                 sort_order: str,
                 type: str,
                 category: Optional['outputs.SmallMultiplesOptions'] = None,
                 mover_size: Optional[int] = None,
                 name: Optional[str] = None,
                 time: Optional['outputs.SmallMultiplesOptions'] = None,
                 value: Optional['outputs.MeasureFieldSchema2'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "type", type)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if mover_size is not None:
            pulumi.set(__self__, "mover_size", mover_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> str:
        return pulumi.get(self, "computation_id")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> str:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def category(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="moverSize")
    def mover_size(self) -> Optional[int]:
        return pulumi.get(self, "mover_size")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputationTopBottomRanked(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computationId":
            suggest = "computation_id"
        elif key == "resultSize":
            suggest = "result_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputationTopBottomRanked. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputationTopBottomRanked.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputationTopBottomRanked.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computation_id: str,
                 type: str,
                 category: Optional['outputs.SmallMultiplesOptions'] = None,
                 name: Optional[str] = None,
                 result_size: Optional[int] = None,
                 value: Optional['outputs.MeasureFieldSchema2'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        pulumi.set(__self__, "type", type)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if result_size is not None:
            pulumi.set(__self__, "result_size", result_size)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> str:
        return pulumi.get(self, "computation_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def category(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultSize")
    def result_size(self) -> Optional[int]:
        return pulumi.get(self, "result_size")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputationTotalAggregation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computationId":
            suggest = "computation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputationTotalAggregation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputationTotalAggregation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputationTotalAggregation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computation_id: str,
                 name: Optional[str] = None,
                 value: Optional['outputs.MeasureFieldSchema2'] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> str:
        return pulumi.get(self, "computation_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationComputationUniqueValues(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computationId":
            suggest = "computation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsInsightVisualInsightConfigurationComputationUniqueValues. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsInsightVisualInsightConfigurationComputationUniqueValues.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsInsightVisualInsightConfigurationComputationUniqueValues.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computation_id: str,
                 category: Optional['outputs.SmallMultiplesOptions'] = None,
                 name: Optional[str] = None):
        """
        :param str name: Display name for the dashboard.
        """
        pulumi.set(__self__, "computation_id", computation_id)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> str:
        return pulumi.get(self, "computation_id")

    @property
    @pulumi.getter
    def category(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Display name for the dashboard.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VisualsInsightVisualInsightConfigurationCustomNarrative(dict):
    def __init__(__self__, *,
                 narrative: str):
        pulumi.set(__self__, "narrative", narrative)

    @property
    @pulumi.getter
    def narrative(self) -> str:
        return pulumi.get(self, "narrative")


@pulumi.output_type
class VisualsKpiVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"
        elif key == "conditionalFormatting":
            suggest = "conditional_formatting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsKpiVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 conditional_formatting: Optional['outputs.VisualsKpiVisualConditionalFormatting'] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if conditional_formatting is not None:
            pulumi.set(__self__, "conditional_formatting", conditional_formatting)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsKpiVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional['outputs.VisualsKpiVisualConditionalFormatting']:
        return pulumi.get(self, "conditional_formatting")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsKpiVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldWells":
            suggest = "field_wells"
        elif key == "kpiOptions":
            suggest = "kpi_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_wells: Optional['outputs.VisualsKpiVisualChartConfigurationFieldWells'] = None,
                 kpi_options: Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsKpiVisualChartConfigurationSortConfiguration'] = None):
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if kpi_options is not None:
            pulumi.set(__self__, "kpi_options", kpi_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsKpiVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter(name="kpiOptions")
    def kpi_options(self) -> Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptions']:
        return pulumi.get(self, "kpi_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsKpiVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")


@pulumi.output_type
class VisualsKpiVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetValues":
            suggest = "target_values"
        elif key == "trendGroups":
            suggest = "trend_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_values: Optional[Sequence['outputs.MeasureFieldSchema']] = None,
                 trend_groups: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 values: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if target_values is not None:
            pulumi.set(__self__, "target_values", target_values)
        if trend_groups is not None:
            pulumi.set(__self__, "trend_groups", trend_groups)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="targetValues")
    def target_values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "target_values")

    @property
    @pulumi.getter(name="trendGroups")
    def trend_groups(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "trend_groups")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsKpiVisualChartConfigurationKpiOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryValueDisplayType":
            suggest = "primary_value_display_type"
        elif key == "primaryValueFontConfiguration":
            suggest = "primary_value_font_configuration"
        elif key == "progressBar":
            suggest = "progress_bar"
        elif key == "secondaryValue":
            suggest = "secondary_value"
        elif key == "secondaryValueFontConfiguration":
            suggest = "secondary_value_font_configuration"
        elif key == "trendArrows":
            suggest = "trend_arrows"
        elif key == "visualLayoutOptions":
            suggest = "visual_layout_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualChartConfigurationKpiOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualChartConfigurationKpiOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualChartConfigurationKpiOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison: Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptionsComparison'] = None,
                 primary_value_display_type: Optional[str] = None,
                 primary_value_font_configuration: Optional['outputs.FontConfiguration'] = None,
                 progress_bar: Optional['outputs.SelectAllOptions'] = None,
                 secondary_value: Optional['outputs.SelectAllOptions'] = None,
                 secondary_value_font_configuration: Optional['outputs.FontConfiguration'] = None,
                 sparkline: Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptionsSparkline'] = None,
                 trend_arrows: Optional['outputs.SelectAllOptions'] = None,
                 visual_layout_options: Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptions'] = None):
        if comparison is not None:
            pulumi.set(__self__, "comparison", comparison)
        if primary_value_display_type is not None:
            pulumi.set(__self__, "primary_value_display_type", primary_value_display_type)
        if primary_value_font_configuration is not None:
            pulumi.set(__self__, "primary_value_font_configuration", primary_value_font_configuration)
        if progress_bar is not None:
            pulumi.set(__self__, "progress_bar", progress_bar)
        if secondary_value is not None:
            pulumi.set(__self__, "secondary_value", secondary_value)
        if secondary_value_font_configuration is not None:
            pulumi.set(__self__, "secondary_value_font_configuration", secondary_value_font_configuration)
        if sparkline is not None:
            pulumi.set(__self__, "sparkline", sparkline)
        if trend_arrows is not None:
            pulumi.set(__self__, "trend_arrows", trend_arrows)
        if visual_layout_options is not None:
            pulumi.set(__self__, "visual_layout_options", visual_layout_options)

    @property
    @pulumi.getter
    def comparison(self) -> Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptionsComparison']:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter(name="primaryValueDisplayType")
    def primary_value_display_type(self) -> Optional[str]:
        return pulumi.get(self, "primary_value_display_type")

    @property
    @pulumi.getter(name="primaryValueFontConfiguration")
    def primary_value_font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "primary_value_font_configuration")

    @property
    @pulumi.getter(name="progressBar")
    def progress_bar(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "progress_bar")

    @property
    @pulumi.getter(name="secondaryValue")
    def secondary_value(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "secondary_value")

    @property
    @pulumi.getter(name="secondaryValueFontConfiguration")
    def secondary_value_font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "secondary_value_font_configuration")

    @property
    @pulumi.getter
    def sparkline(self) -> Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptionsSparkline']:
        return pulumi.get(self, "sparkline")

    @property
    @pulumi.getter(name="trendArrows")
    def trend_arrows(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "trend_arrows")

    @property
    @pulumi.getter(name="visualLayoutOptions")
    def visual_layout_options(self) -> Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptions']:
        return pulumi.get(self, "visual_layout_options")


@pulumi.output_type
class VisualsKpiVisualChartConfigurationKpiOptionsComparison(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonFormat":
            suggest = "comparison_format"
        elif key == "comparisonMethod":
            suggest = "comparison_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualChartConfigurationKpiOptionsComparison. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualChartConfigurationKpiOptionsComparison.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualChartConfigurationKpiOptionsComparison.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison_format: Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormat'] = None,
                 comparison_method: Optional[str] = None):
        if comparison_format is not None:
            pulumi.set(__self__, "comparison_format", comparison_format)
        if comparison_method is not None:
            pulumi.set(__self__, "comparison_method", comparison_method)

    @property
    @pulumi.getter(name="comparisonFormat")
    def comparison_format(self) -> Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormat']:
        return pulumi.get(self, "comparison_format")

    @property
    @pulumi.getter(name="comparisonMethod")
    def comparison_method(self) -> Optional[str]:
        return pulumi.get(self, "comparison_method")


@pulumi.output_type
class VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberDisplayFormatConfiguration":
            suggest = "number_display_format_configuration"
        elif key == "percentageDisplayFormatConfiguration":
            suggest = "percentage_display_format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualChartConfigurationKpiOptionsComparisonComparisonFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number_display_format_configuration: Optional['outputs.NumberDisplayFormatConfiguration'] = None,
                 percentage_display_format_configuration: Optional['outputs.PercentageDisplayFormatConfiguration'] = None):
        if number_display_format_configuration is not None:
            pulumi.set(__self__, "number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            pulumi.set(__self__, "percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional['outputs.NumberDisplayFormatConfiguration']:
        return pulumi.get(self, "number_display_format_configuration")

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional['outputs.PercentageDisplayFormatConfiguration']:
        return pulumi.get(self, "percentage_display_format_configuration")


@pulumi.output_type
class VisualsKpiVisualChartConfigurationKpiOptionsSparkline(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tooltipVisibility":
            suggest = "tooltip_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualChartConfigurationKpiOptionsSparkline. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualChartConfigurationKpiOptionsSparkline.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualChartConfigurationKpiOptionsSparkline.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 color: Optional[str] = None,
                 tooltip_visibility: Optional[str] = None,
                 visibility: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if tooltip_visibility is not None:
            pulumi.set(__self__, "tooltip_visibility", tooltip_visibility)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="tooltipVisibility")
    def tooltip_visibility(self) -> Optional[str]:
        return pulumi.get(self, "tooltip_visibility")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "standardLayout":
            suggest = "standard_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 standard_layout: Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayout'] = None):
        if standard_layout is not None:
            pulumi.set(__self__, "standard_layout", standard_layout)

    @property
    @pulumi.getter(name="standardLayout")
    def standard_layout(self) -> Optional['outputs.VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayout']:
        return pulumi.get(self, "standard_layout")


@pulumi.output_type
class VisualsKpiVisualChartConfigurationKpiOptionsVisualLayoutOptionsStandardLayout(dict):
    def __init__(__self__, *,
                 type: str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class VisualsKpiVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trendGroupSorts":
            suggest = "trend_group_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trend_group_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if trend_group_sorts is not None:
            pulumi.set(__self__, "trend_group_sorts", trend_group_sorts)

    @property
    @pulumi.getter(name="trendGroupSorts")
    def trend_group_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "trend_group_sorts")


@pulumi.output_type
class VisualsKpiVisualConditionalFormatting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionalFormattingOptions":
            suggest = "conditional_formatting_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualConditionalFormatting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualConditionalFormatting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualConditionalFormatting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditional_formatting_options: Optional[Sequence['outputs.VisualsKpiVisualConditionalFormattingConditionalFormattingOption']] = None):
        if conditional_formatting_options is not None:
            pulumi.set(__self__, "conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[Sequence['outputs.VisualsKpiVisualConditionalFormattingConditionalFormattingOption']]:
        return pulumi.get(self, "conditional_formatting_options")


@pulumi.output_type
class VisualsKpiVisualConditionalFormattingConditionalFormattingOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actualValue":
            suggest = "actual_value"
        elif key == "comparisonValue":
            suggest = "comparison_value"
        elif key == "primaryValue":
            suggest = "primary_value"
        elif key == "progressBar":
            suggest = "progress_bar"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualConditionalFormattingConditionalFormattingOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualConditionalFormattingConditionalFormattingOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualConditionalFormattingConditionalFormattingOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actual_value: Optional['outputs.VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValue'] = None,
                 comparison_value: Optional['outputs.VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValue'] = None,
                 primary_value: Optional['outputs.VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValue'] = None,
                 progress_bar: Optional['outputs.VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBar'] = None):
        if actual_value is not None:
            pulumi.set(__self__, "actual_value", actual_value)
        if comparison_value is not None:
            pulumi.set(__self__, "comparison_value", comparison_value)
        if primary_value is not None:
            pulumi.set(__self__, "primary_value", primary_value)
        if progress_bar is not None:
            pulumi.set(__self__, "progress_bar", progress_bar)

    @property
    @pulumi.getter(name="actualValue")
    def actual_value(self) -> Optional['outputs.VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValue']:
        return pulumi.get(self, "actual_value")

    @property
    @pulumi.getter(name="comparisonValue")
    def comparison_value(self) -> Optional['outputs.VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValue']:
        return pulumi.get(self, "comparison_value")

    @property
    @pulumi.getter(name="primaryValue")
    def primary_value(self) -> Optional['outputs.VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValue']:
        return pulumi.get(self, "primary_value")

    @property
    @pulumi.getter(name="progressBar")
    def progress_bar(self) -> Optional['outputs.VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBar']:
        return pulumi.get(self, "progress_bar")


@pulumi.output_type
class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualConditionalFormattingConditionalFormattingOptionActualValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 text_color: 'outputs.ConditionalFormattingColor',
                 icon: Optional['outputs.ConditionalFormattingIcon'] = None):
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "text_color")

    @property
    @pulumi.getter
    def icon(self) -> Optional['outputs.ConditionalFormattingIcon']:
        return pulumi.get(self, "icon")


@pulumi.output_type
class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualConditionalFormattingConditionalFormattingOptionComparisonValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 text_color: 'outputs.ConditionalFormattingColor',
                 icon: Optional['outputs.ConditionalFormattingIcon'] = None):
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "text_color")

    @property
    @pulumi.getter
    def icon(self) -> Optional['outputs.ConditionalFormattingIcon']:
        return pulumi.get(self, "icon")


@pulumi.output_type
class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualConditionalFormattingConditionalFormattingOptionPrimaryValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 text_color: 'outputs.ConditionalFormattingColor',
                 icon: Optional['outputs.ConditionalFormattingIcon'] = None):
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "text_color")

    @property
    @pulumi.getter
    def icon(self) -> Optional['outputs.ConditionalFormattingIcon']:
        return pulumi.get(self, "icon")


@pulumi.output_type
class VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBar(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "foregroundColor":
            suggest = "foreground_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBar. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBar.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsKpiVisualConditionalFormattingConditionalFormattingOptionProgressBar.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 foreground_color: 'outputs.ConditionalFormattingColor'):
        pulumi.set(__self__, "foreground_color", foreground_color)

    @property
    @pulumi.getter(name="foregroundColor")
    def foreground_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "foreground_color")


@pulumi.output_type
class VisualsLineChartVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsLineChartVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsLineChartVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsLineChartVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contributionAnalysisDefaults":
            suggest = "contribution_analysis_defaults"
        elif key == "dataLabels":
            suggest = "data_labels"
        elif key == "defaultSeriesSettings":
            suggest = "default_series_settings"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "forecastConfigurations":
            suggest = "forecast_configurations"
        elif key == "primaryYAxisDisplayOptions":
            suggest = "primary_y_axis_display_options"
        elif key == "primaryYAxisLabelOptions":
            suggest = "primary_y_axis_label_options"
        elif key == "referenceLines":
            suggest = "reference_lines"
        elif key == "secondaryYAxisDisplayOptions":
            suggest = "secondary_y_axis_display_options"
        elif key == "secondaryYAxisLabelOptions":
            suggest = "secondary_y_axis_label_options"
        elif key == "smallMultiplesOptions":
            suggest = "small_multiples_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "visualPalette":
            suggest = "visual_palette"
        elif key == "xAxisDisplayOptions":
            suggest = "x_axis_display_options"
        elif key == "xAxisLabelOptions":
            suggest = "x_axis_label_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contribution_analysis_defaults: Optional[Sequence['outputs.ContributionAnalysisDefaults']] = None,
                 data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 default_series_settings: Optional['outputs.VisualsLineChartVisualChartConfigurationDefaultSeriesSettings'] = None,
                 field_wells: Optional['outputs.VisualsLineChartVisualChartConfigurationFieldWells'] = None,
                 forecast_configurations: Optional[Sequence['outputs.VisualsLineChartVisualChartConfigurationForecastConfiguration']] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 primary_y_axis_display_options: Optional['outputs.VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptions'] = None,
                 primary_y_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 reference_lines: Optional[Sequence['outputs.ReferenceLine']] = None,
                 secondary_y_axis_display_options: Optional['outputs.VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptions'] = None,
                 secondary_y_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 series: Optional[Sequence['outputs.VisualsLineChartVisualChartConfigurationSeries']] = None,
                 small_multiples_options: Optional['outputs.SmallMultiplesOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsLineChartVisualChartConfigurationSortConfiguration'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 type: Optional[str] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None,
                 x_axis_display_options: Optional['outputs.AxisDisplayOptions'] = None,
                 x_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None):
        if contribution_analysis_defaults is not None:
            pulumi.set(__self__, "contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if default_series_settings is not None:
            pulumi.set(__self__, "default_series_settings", default_series_settings)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if forecast_configurations is not None:
            pulumi.set(__self__, "forecast_configurations", forecast_configurations)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if primary_y_axis_display_options is not None:
            pulumi.set(__self__, "primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            pulumi.set(__self__, "primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            pulumi.set(__self__, "reference_lines", reference_lines)
        if secondary_y_axis_display_options is not None:
            pulumi.set(__self__, "secondary_y_axis_display_options", secondary_y_axis_display_options)
        if secondary_y_axis_label_options is not None:
            pulumi.set(__self__, "secondary_y_axis_label_options", secondary_y_axis_label_options)
        if series is not None:
            pulumi.set(__self__, "series", series)
        if small_multiples_options is not None:
            pulumi.set(__self__, "small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)
        if x_axis_display_options is not None:
            pulumi.set(__self__, "x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            pulumi.set(__self__, "x_axis_label_options", x_axis_label_options)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[Sequence['outputs.ContributionAnalysisDefaults']]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "data_labels")

    @property
    @pulumi.getter(name="defaultSeriesSettings")
    def default_series_settings(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationDefaultSeriesSettings']:
        return pulumi.get(self, "default_series_settings")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter(name="forecastConfigurations")
    def forecast_configurations(self) -> Optional[Sequence['outputs.VisualsLineChartVisualChartConfigurationForecastConfiguration']]:
        return pulumi.get(self, "forecast_configurations")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptions']:
        return pulumi.get(self, "primary_y_axis_display_options")

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "primary_y_axis_label_options")

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[Sequence['outputs.ReferenceLine']]:
        return pulumi.get(self, "reference_lines")

    @property
    @pulumi.getter(name="secondaryYAxisDisplayOptions")
    def secondary_y_axis_display_options(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptions']:
        return pulumi.get(self, "secondary_y_axis_display_options")

    @property
    @pulumi.getter(name="secondaryYAxisLabelOptions")
    def secondary_y_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "secondary_y_axis_label_options")

    @property
    @pulumi.getter
    def series(self) -> Optional[Sequence['outputs.VisualsLineChartVisualChartConfigurationSeries']]:
        return pulumi.get(self, "series")

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "small_multiples_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "x_axis_display_options")

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "x_axis_label_options")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationDefaultSeriesSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "axisBinding":
            suggest = "axis_binding"
        elif key == "lineStyleSettings":
            suggest = "line_style_settings"
        elif key == "markerStyleSettings":
            suggest = "marker_style_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationDefaultSeriesSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationDefaultSeriesSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationDefaultSeriesSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 axis_binding: Optional[str] = None,
                 line_style_settings: Optional['outputs.LineChartLineStyleSettings'] = None,
                 marker_style_settings: Optional['outputs.LineChartMarkerStyleSettings'] = None):
        if axis_binding is not None:
            pulumi.set(__self__, "axis_binding", axis_binding)
        if line_style_settings is not None:
            pulumi.set(__self__, "line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            pulumi.set(__self__, "marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> Optional[str]:
        return pulumi.get(self, "axis_binding")

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional['outputs.LineChartLineStyleSettings']:
        return pulumi.get(self, "line_style_settings")

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional['outputs.LineChartMarkerStyleSettings']:
        return pulumi.get(self, "marker_style_settings")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lineChartAggregatedFieldWells":
            suggest = "line_chart_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 line_chart_aggregated_field_wells: Optional['outputs.VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWells'] = None):
        if line_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "line_chart_aggregated_field_wells", line_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="lineChartAggregatedFieldWells")
    def line_chart_aggregated_field_wells(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWells']:
        return pulumi.get(self, "line_chart_aggregated_field_wells")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "smallMultiples":
            suggest = "small_multiples"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationFieldWellsLineChartAggregatedFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 colors: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 small_multiples: Optional['outputs.SmallMultiplesOptions'] = None,
                 values: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if small_multiples is not None:
            pulumi.set(__self__, "small_multiples", small_multiples)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def colors(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "small_multiples")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationForecastConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forecastProperties":
            suggest = "forecast_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationForecastConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationForecastConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationForecastConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forecast_properties: Optional['outputs.VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties'] = None,
                 scenario: Optional['outputs.VisualsLineChartVisualChartConfigurationForecastConfigurationScenario'] = None):
        if forecast_properties is not None:
            pulumi.set(__self__, "forecast_properties", forecast_properties)
        if scenario is not None:
            pulumi.set(__self__, "scenario", scenario)

    @property
    @pulumi.getter(name="forecastProperties")
    def forecast_properties(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties']:
        return pulumi.get(self, "forecast_properties")

    @property
    @pulumi.getter
    def scenario(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationForecastConfigurationScenario']:
        return pulumi.get(self, "scenario")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lowerBoundary":
            suggest = "lower_boundary"
        elif key == "periodsBackward":
            suggest = "periods_backward"
        elif key == "periodsForward":
            suggest = "periods_forward"
        elif key == "predictionInterval":
            suggest = "prediction_interval"
        elif key == "upperBoundary":
            suggest = "upper_boundary"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationForecastConfigurationForecastProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lower_boundary: Optional[float] = None,
                 periods_backward: Optional[int] = None,
                 periods_forward: Optional[int] = None,
                 prediction_interval: Optional[int] = None,
                 seasonality: Optional[int] = None,
                 upper_boundary: Optional[float] = None):
        if lower_boundary is not None:
            pulumi.set(__self__, "lower_boundary", lower_boundary)
        if periods_backward is not None:
            pulumi.set(__self__, "periods_backward", periods_backward)
        if periods_forward is not None:
            pulumi.set(__self__, "periods_forward", periods_forward)
        if prediction_interval is not None:
            pulumi.set(__self__, "prediction_interval", prediction_interval)
        if seasonality is not None:
            pulumi.set(__self__, "seasonality", seasonality)
        if upper_boundary is not None:
            pulumi.set(__self__, "upper_boundary", upper_boundary)

    @property
    @pulumi.getter(name="lowerBoundary")
    def lower_boundary(self) -> Optional[float]:
        return pulumi.get(self, "lower_boundary")

    @property
    @pulumi.getter(name="periodsBackward")
    def periods_backward(self) -> Optional[int]:
        return pulumi.get(self, "periods_backward")

    @property
    @pulumi.getter(name="periodsForward")
    def periods_forward(self) -> Optional[int]:
        return pulumi.get(self, "periods_forward")

    @property
    @pulumi.getter(name="predictionInterval")
    def prediction_interval(self) -> Optional[int]:
        return pulumi.get(self, "prediction_interval")

    @property
    @pulumi.getter
    def seasonality(self) -> Optional[int]:
        return pulumi.get(self, "seasonality")

    @property
    @pulumi.getter(name="upperBoundary")
    def upper_boundary(self) -> Optional[float]:
        return pulumi.get(self, "upper_boundary")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationForecastConfigurationScenario(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "whatIfPointScenario":
            suggest = "what_if_point_scenario"
        elif key == "whatIfRangeScenario":
            suggest = "what_if_range_scenario"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationForecastConfigurationScenario. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationForecastConfigurationScenario.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationForecastConfigurationScenario.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 what_if_point_scenario: Optional['outputs.VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenario'] = None,
                 what_if_range_scenario: Optional['outputs.VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenario'] = None):
        if what_if_point_scenario is not None:
            pulumi.set(__self__, "what_if_point_scenario", what_if_point_scenario)
        if what_if_range_scenario is not None:
            pulumi.set(__self__, "what_if_range_scenario", what_if_range_scenario)

    @property
    @pulumi.getter(name="whatIfPointScenario")
    def what_if_point_scenario(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenario']:
        return pulumi.get(self, "what_if_point_scenario")

    @property
    @pulumi.getter(name="whatIfRangeScenario")
    def what_if_range_scenario(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenario']:
        return pulumi.get(self, "what_if_range_scenario")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfPointScenario(dict):
    def __init__(__self__, *,
                 date: str,
                 value: float):
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def date(self) -> str:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenario(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenario. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenario.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationForecastConfigurationScenarioWhatIfRangeScenario.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_date: str,
                 start_date: str,
                 value: float):
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "axisOptions":
            suggest = "axis_options"
        elif key == "missingDataConfigurations":
            suggest = "missing_data_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 axis_options: Optional['outputs.AxisDisplayOptions'] = None,
                 missing_data_configurations: Optional[Sequence['outputs.VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfiguration']] = None):
        if axis_options is not None:
            pulumi.set(__self__, "axis_options", axis_options)
        if missing_data_configurations is not None:
            pulumi.set(__self__, "missing_data_configurations", missing_data_configurations)

    @property
    @pulumi.getter(name="axisOptions")
    def axis_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "axis_options")

    @property
    @pulumi.getter(name="missingDataConfigurations")
    def missing_data_configurations(self) -> Optional[Sequence['outputs.VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfiguration']]:
        return pulumi.get(self, "missing_data_configurations")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "treatmentOption":
            suggest = "treatment_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationPrimaryYAxisDisplayOptionsMissingDataConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 treatment_option: Optional[str] = None):
        if treatment_option is not None:
            pulumi.set(__self__, "treatment_option", treatment_option)

    @property
    @pulumi.getter(name="treatmentOption")
    def treatment_option(self) -> Optional[str]:
        return pulumi.get(self, "treatment_option")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "axisOptions":
            suggest = "axis_options"
        elif key == "missingDataConfigurations":
            suggest = "missing_data_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 axis_options: Optional['outputs.AxisDisplayOptions'] = None,
                 missing_data_configurations: Optional[Sequence['outputs.VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfiguration']] = None):
        if axis_options is not None:
            pulumi.set(__self__, "axis_options", axis_options)
        if missing_data_configurations is not None:
            pulumi.set(__self__, "missing_data_configurations", missing_data_configurations)

    @property
    @pulumi.getter(name="axisOptions")
    def axis_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "axis_options")

    @property
    @pulumi.getter(name="missingDataConfigurations")
    def missing_data_configurations(self) -> Optional[Sequence['outputs.VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfiguration']]:
        return pulumi.get(self, "missing_data_configurations")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "treatmentOption":
            suggest = "treatment_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationSecondaryYAxisDisplayOptionsMissingDataConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 treatment_option: Optional[str] = None):
        if treatment_option is not None:
            pulumi.set(__self__, "treatment_option", treatment_option)

    @property
    @pulumi.getter(name="treatmentOption")
    def treatment_option(self) -> Optional[str]:
        return pulumi.get(self, "treatment_option")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationSeries(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataFieldSeriesItem":
            suggest = "data_field_series_item"
        elif key == "fieldSeriesItem":
            suggest = "field_series_item"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationSeries. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationSeries.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationSeries.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_field_series_item: Optional['outputs.VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItem'] = None,
                 field_series_item: Optional['outputs.VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItem'] = None):
        if data_field_series_item is not None:
            pulumi.set(__self__, "data_field_series_item", data_field_series_item)
        if field_series_item is not None:
            pulumi.set(__self__, "field_series_item", field_series_item)

    @property
    @pulumi.getter(name="dataFieldSeriesItem")
    def data_field_series_item(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItem']:
        return pulumi.get(self, "data_field_series_item")

    @property
    @pulumi.getter(name="fieldSeriesItem")
    def field_series_item(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItem']:
        return pulumi.get(self, "field_series_item")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "axisBinding":
            suggest = "axis_binding"
        elif key == "fieldId":
            suggest = "field_id"
        elif key == "fieldValue":
            suggest = "field_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 axis_binding: str,
                 field_id: str,
                 field_value: Optional[str] = None,
                 settings: Optional['outputs.VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettings'] = None):
        pulumi.set(__self__, "axis_binding", axis_binding)
        pulumi.set(__self__, "field_id", field_id)
        if field_value is not None:
            pulumi.set(__self__, "field_value", field_value)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> str:
        return pulumi.get(self, "axis_binding")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[str]:
        return pulumi.get(self, "field_value")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettings']:
        return pulumi.get(self, "settings")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lineStyleSettings":
            suggest = "line_style_settings"
        elif key == "markerStyleSettings":
            suggest = "marker_style_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationSeriesDataFieldSeriesItemSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 line_style_settings: Optional['outputs.LineChartLineStyleSettings'] = None,
                 marker_style_settings: Optional['outputs.LineChartMarkerStyleSettings'] = None):
        if line_style_settings is not None:
            pulumi.set(__self__, "line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            pulumi.set(__self__, "marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional['outputs.LineChartLineStyleSettings']:
        return pulumi.get(self, "line_style_settings")

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional['outputs.LineChartMarkerStyleSettings']:
        return pulumi.get(self, "marker_style_settings")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "axisBinding":
            suggest = "axis_binding"
        elif key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 axis_binding: str,
                 field_id: str,
                 settings: Optional['outputs.VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettings'] = None):
        pulumi.set(__self__, "axis_binding", axis_binding)
        pulumi.set(__self__, "field_id", field_id)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> str:
        return pulumi.get(self, "axis_binding")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettings']:
        return pulumi.get(self, "settings")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lineStyleSettings":
            suggest = "line_style_settings"
        elif key == "markerStyleSettings":
            suggest = "marker_style_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationSeriesFieldSeriesItemSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 line_style_settings: Optional['outputs.LineChartLineStyleSettings'] = None,
                 marker_style_settings: Optional['outputs.LineChartMarkerStyleSettings'] = None):
        if line_style_settings is not None:
            pulumi.set(__self__, "line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            pulumi.set(__self__, "marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional['outputs.LineChartLineStyleSettings']:
        return pulumi.get(self, "line_style_settings")

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional['outputs.LineChartMarkerStyleSettings']:
        return pulumi.get(self, "marker_style_settings")


@pulumi.output_type
class VisualsLineChartVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryItemsLimitConfiguration":
            suggest = "category_items_limit_configuration"
        elif key == "categorySorts":
            suggest = "category_sorts"
        elif key == "colorItemsLimitConfiguration":
            suggest = "color_items_limit_configuration"
        elif key == "smallMultiplesLimitConfiguration":
            suggest = "small_multiples_limit_configuration"
        elif key == "smallMultiplesSorts":
            suggest = "small_multiples_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsLineChartVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsLineChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsLineChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_items_limit_configuration: Optional['outputs.ItemsLimitConfiguration'] = None,
                 category_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None,
                 color_items_limit_configuration: Optional['outputs.ItemsLimitConfiguration'] = None,
                 small_multiples_limit_configuration: Optional['outputs.ItemsLimitConfiguration'] = None,
                 small_multiples_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if category_items_limit_configuration is not None:
            pulumi.set(__self__, "category_items_limit_configuration", category_items_limit_configuration)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if color_items_limit_configuration is not None:
            pulumi.set(__self__, "color_items_limit_configuration", color_items_limit_configuration)
        if small_multiples_limit_configuration is not None:
            pulumi.set(__self__, "small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sorts is not None:
            pulumi.set(__self__, "small_multiples_sorts", small_multiples_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimitConfiguration")
    def category_items_limit_configuration(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "category_items_limit_configuration")

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "category_sorts")

    @property
    @pulumi.getter(name="colorItemsLimitConfiguration")
    def color_items_limit_configuration(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "color_items_limit_configuration")

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @property
    @pulumi.getter(name="smallMultiplesSorts")
    def small_multiples_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "small_multiples_sorts")


@pulumi.output_type
class VisualsPieChartVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPieChartVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPieChartVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPieChartVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsPieChartVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsPieChartVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsPieChartVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryLabelOptions":
            suggest = "category_label_options"
        elif key == "contributionAnalysisDefaults":
            suggest = "contribution_analysis_defaults"
        elif key == "dataLabels":
            suggest = "data_labels"
        elif key == "donutOptions":
            suggest = "donut_options"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "smallMultiplesOptions":
            suggest = "small_multiples_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "valueLabelOptions":
            suggest = "value_label_options"
        elif key == "visualPalette":
            suggest = "visual_palette"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPieChartVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPieChartVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPieChartVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 contribution_analysis_defaults: Optional[Sequence['outputs.ContributionAnalysisDefaults']] = None,
                 data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 donut_options: Optional['outputs.VisualsPieChartVisualChartConfigurationDonutOptions'] = None,
                 field_wells: Optional['outputs.VisualsPieChartVisualChartConfigurationFieldWells'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 small_multiples_options: Optional['outputs.SmallMultiplesOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsPieChartVisualChartConfigurationSortConfiguration'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 value_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None):
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if contribution_analysis_defaults is not None:
            pulumi.set(__self__, "contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if donut_options is not None:
            pulumi.set(__self__, "donut_options", donut_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if small_multiples_options is not None:
            pulumi.set(__self__, "small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if value_label_options is not None:
            pulumi.set(__self__, "value_label_options", value_label_options)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "category_label_options")

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[Sequence['outputs.ContributionAnalysisDefaults']]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "data_labels")

    @property
    @pulumi.getter(name="donutOptions")
    def donut_options(self) -> Optional['outputs.VisualsPieChartVisualChartConfigurationDonutOptions']:
        return pulumi.get(self, "donut_options")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsPieChartVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "small_multiples_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsPieChartVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "value_label_options")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")


@pulumi.output_type
class VisualsPieChartVisualChartConfigurationDonutOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arcOptions":
            suggest = "arc_options"
        elif key == "donutCenterOptions":
            suggest = "donut_center_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPieChartVisualChartConfigurationDonutOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPieChartVisualChartConfigurationDonutOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPieChartVisualChartConfigurationDonutOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arc_options: Optional['outputs.VisualsPieChartVisualChartConfigurationDonutOptionsArcOptions'] = None,
                 donut_center_options: Optional['outputs.VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptions'] = None):
        if arc_options is not None:
            pulumi.set(__self__, "arc_options", arc_options)
        if donut_center_options is not None:
            pulumi.set(__self__, "donut_center_options", donut_center_options)

    @property
    @pulumi.getter(name="arcOptions")
    def arc_options(self) -> Optional['outputs.VisualsPieChartVisualChartConfigurationDonutOptionsArcOptions']:
        return pulumi.get(self, "arc_options")

    @property
    @pulumi.getter(name="donutCenterOptions")
    def donut_center_options(self) -> Optional['outputs.VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptions']:
        return pulumi.get(self, "donut_center_options")


@pulumi.output_type
class VisualsPieChartVisualChartConfigurationDonutOptionsArcOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arcThickness":
            suggest = "arc_thickness"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPieChartVisualChartConfigurationDonutOptionsArcOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPieChartVisualChartConfigurationDonutOptionsArcOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPieChartVisualChartConfigurationDonutOptionsArcOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arc_thickness: Optional[str] = None):
        if arc_thickness is not None:
            pulumi.set(__self__, "arc_thickness", arc_thickness)

    @property
    @pulumi.getter(name="arcThickness")
    def arc_thickness(self) -> Optional[str]:
        return pulumi.get(self, "arc_thickness")


@pulumi.output_type
class VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelVisibility":
            suggest = "label_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPieChartVisualChartConfigurationDonutOptionsDonutCenterOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label_visibility: Optional[str] = None):
        if label_visibility is not None:
            pulumi.set(__self__, "label_visibility", label_visibility)

    @property
    @pulumi.getter(name="labelVisibility")
    def label_visibility(self) -> Optional[str]:
        return pulumi.get(self, "label_visibility")


@pulumi.output_type
class VisualsPieChartVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pieChartAggregatedFieldWells":
            suggest = "pie_chart_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPieChartVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPieChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPieChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pie_chart_aggregated_field_wells: Optional['outputs.VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWells'] = None):
        if pie_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "pie_chart_aggregated_field_wells", pie_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="pieChartAggregatedFieldWells")
    def pie_chart_aggregated_field_wells(self) -> Optional['outputs.VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWells']:
        return pulumi.get(self, "pie_chart_aggregated_field_wells")


@pulumi.output_type
class VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "smallMultiples":
            suggest = "small_multiples"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPieChartVisualChartConfigurationFieldWellsPieChartAggregatedFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 small_multiples: Optional['outputs.SmallMultiplesOptions'] = None,
                 values: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if small_multiples is not None:
            pulumi.set(__self__, "small_multiples", small_multiples)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "small_multiples")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsPieChartVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryItemsLimit":
            suggest = "category_items_limit"
        elif key == "categorySorts":
            suggest = "category_sorts"
        elif key == "smallMultiplesLimitConfiguration":
            suggest = "small_multiples_limit_configuration"
        elif key == "smallMultiplesSorts":
            suggest = "small_multiples_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPieChartVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPieChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPieChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 category_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None,
                 small_multiples_limit_configuration: Optional['outputs.ItemsLimitConfiguration'] = None,
                 small_multiples_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if small_multiples_limit_configuration is not None:
            pulumi.set(__self__, "small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sorts is not None:
            pulumi.set(__self__, "small_multiples_sorts", small_multiples_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "category_items_limit")

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "category_sorts")

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @property
    @pulumi.getter(name="smallMultiplesSorts")
    def small_multiples_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "small_multiples_sorts")


@pulumi.output_type
class VisualsPivotTableVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "conditionalFormatting":
            suggest = "conditional_formatting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsPivotTableVisualChartConfiguration'] = None,
                 conditional_formatting: Optional['outputs.VisualsPivotTableVisualConditionalFormatting'] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            pulumi.set(__self__, "conditional_formatting", conditional_formatting)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsPivotTableVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional['outputs.VisualsPivotTableVisualConditionalFormatting']:
        return pulumi.get(self, "conditional_formatting")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsPivotTableVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldOptions":
            suggest = "field_options"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "paginatedReportOptions":
            suggest = "paginated_report_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "tableOptions":
            suggest = "table_options"
        elif key == "totalOptions":
            suggest = "total_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_options: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldOptions'] = None,
                 field_wells: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWells'] = None,
                 paginated_report_options: Optional['outputs.VisualsPivotTableVisualChartConfigurationPaginatedReportOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsPivotTableVisualChartConfigurationSortConfiguration'] = None,
                 table_options: Optional['outputs.VisualsPivotTableVisualChartConfigurationTableOptions'] = None,
                 total_options: Optional['outputs.VisualsPivotTableVisualChartConfigurationTotalOptions'] = None):
        if field_options is not None:
            pulumi.set(__self__, "field_options", field_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if paginated_report_options is not None:
            pulumi.set(__self__, "paginated_report_options", paginated_report_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if table_options is not None:
            pulumi.set(__self__, "table_options", table_options)
        if total_options is not None:
            pulumi.set(__self__, "total_options", total_options)

    @property
    @pulumi.getter(name="fieldOptions")
    def field_options(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldOptions']:
        return pulumi.get(self, "field_options")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter(name="paginatedReportOptions")
    def paginated_report_options(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationPaginatedReportOptions']:
        return pulumi.get(self, "paginated_report_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationTableOptions']:
        return pulumi.get(self, "table_options")

    @property
    @pulumi.getter(name="totalOptions")
    def total_options(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationTotalOptions']:
        return pulumi.get(self, "total_options")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataPathOptions":
            suggest = "data_path_options"
        elif key == "selectedFieldOptions":
            suggest = "selected_field_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_path_options: Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOption']] = None,
                 selected_field_options: Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOption']] = None):
        if data_path_options is not None:
            pulumi.set(__self__, "data_path_options", data_path_options)
        if selected_field_options is not None:
            pulumi.set(__self__, "selected_field_options", selected_field_options)

    @property
    @pulumi.getter(name="dataPathOptions")
    def data_path_options(self) -> Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOption']]:
        return pulumi.get(self, "data_path_options")

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOption']]:
        return pulumi.get(self, "selected_field_options")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataPathLists":
            suggest = "data_path_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_path_lists: Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathList'],
                 width: Optional[str] = None):
        pulumi.set(__self__, "data_path_lists", data_path_lists)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="dataPathLists")
    def data_path_lists(self) -> Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathList']:
        return pulumi.get(self, "data_path_lists")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "fieldValue":
            suggest = "field_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldOptionsDataPathOptionDataPathList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 field_value: str):
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "field_value", field_value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> str:
        return pulumi.get(self, "field_value")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "customLabel":
            suggest = "custom_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldOptionsSelectedFieldOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 custom_label: Optional[str] = None,
                 visibility: Optional[str] = None):
        pulumi.set(__self__, "field_id", field_id)
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[str]:
        return pulumi.get(self, "custom_label")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pivotTableAggregatedFieldWells":
            suggest = "pivot_table_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pivot_table_aggregated_field_wells: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWells'] = None):
        if pivot_table_aggregated_field_wells is not None:
            pulumi.set(__self__, "pivot_table_aggregated_field_wells", pivot_table_aggregated_field_wells)

    @property
    @pulumi.getter(name="pivotTableAggregatedFieldWells")
    def pivot_table_aggregated_field_wells(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWells']:
        return pulumi.get(self, "pivot_table_aggregated_field_wells")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWells(dict):
    def __init__(__self__, *,
                 columns: Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumn']] = None,
                 rows: Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRow']] = None,
                 values: Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValue']] = None):
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if rows is not None:
            pulumi.set(__self__, "rows", rows)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumn']]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def rows(self) -> Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRow']]:
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoricalDimensionField":
            suggest = "categorical_dimension_field"
        elif key == "dateDimensionField":
            suggest = "date_dimension_field"
        elif key == "numericalDimensionField":
            suggest = "numerical_dimension_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categorical_dimension_field: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionField'] = None,
                 date_dimension_field: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionField'] = None,
                 numerical_dimension_field: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionField'] = None):
        if categorical_dimension_field is not None:
            pulumi.set(__self__, "categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            pulumi.set(__self__, "date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            pulumi.set(__self__, "numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionField']:
        return pulumi.get(self, "categorical_dimension_field")

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionField']:
        return pulumi.get(self, "date_dimension_field")

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionField']:
        return pulumi.get(self, "numerical_dimension_field")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnCategoricalDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 format_configuration: Optional['outputs.StringFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "dateGranularity":
            suggest = "date_granularity"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnDateDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 date_granularity: Optional[str] = None,
                 format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if date_granularity is not None:
            pulumi.set(__self__, "date_granularity", date_granularity)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[str]:
        return pulumi.get(self, "date_granularity")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsColumnNumericalDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 format_configuration: Optional['outputs.NumberFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoricalDimensionField":
            suggest = "categorical_dimension_field"
        elif key == "dateDimensionField":
            suggest = "date_dimension_field"
        elif key == "numericalDimensionField":
            suggest = "numerical_dimension_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categorical_dimension_field: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionField'] = None,
                 date_dimension_field: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionField'] = None,
                 numerical_dimension_field: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionField'] = None):
        if categorical_dimension_field is not None:
            pulumi.set(__self__, "categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            pulumi.set(__self__, "date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            pulumi.set(__self__, "numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionField']:
        return pulumi.get(self, "categorical_dimension_field")

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionField']:
        return pulumi.get(self, "date_dimension_field")

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionField']:
        return pulumi.get(self, "numerical_dimension_field")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowCategoricalDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 format_configuration: Optional['outputs.StringFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "dateGranularity":
            suggest = "date_granularity"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowDateDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 date_granularity: Optional[str] = None,
                 format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if date_granularity is not None:
            pulumi.set(__self__, "date_granularity", date_granularity)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[str]:
        return pulumi.get(self, "date_granularity")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsRowNumericalDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 format_configuration: Optional['outputs.NumberFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "calculatedMeasureField":
            suggest = "calculated_measure_field"
        elif key == "categoricalMeasureField":
            suggest = "categorical_measure_field"
        elif key == "dateMeasureField":
            suggest = "date_measure_field"
        elif key == "numericalMeasureField":
            suggest = "numerical_measure_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calculated_measure_field: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureField'] = None,
                 categorical_measure_field: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureField'] = None,
                 date_measure_field: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureField'] = None,
                 numerical_measure_field: Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureField'] = None):
        if calculated_measure_field is not None:
            pulumi.set(__self__, "calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            pulumi.set(__self__, "categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            pulumi.set(__self__, "date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            pulumi.set(__self__, "numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureField']:
        return pulumi.get(self, "calculated_measure_field")

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureField']:
        return pulumi.get(self, "categorical_measure_field")

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureField']:
        return pulumi.get(self, "date_measure_field")

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureField']:
        return pulumi.get(self, "numerical_measure_field")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCalculatedMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 field_id: str):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueCategoricalMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional[str] = None,
                 format_configuration: Optional['outputs.StringFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueDateMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional[str] = None,
                 format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationFieldWellsPivotTableAggregatedFieldWellsValueNumericalMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional['outputs.NumericalAggregation'] = None,
                 format_configuration: Optional['outputs.NumberFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional['outputs.NumericalAggregation']:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationPaginatedReportOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overflowColumnHeaderVisibility":
            suggest = "overflow_column_header_visibility"
        elif key == "verticalOverflowVisibility":
            suggest = "vertical_overflow_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationPaginatedReportOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationPaginatedReportOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationPaginatedReportOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 overflow_column_header_visibility: Optional[str] = None,
                 vertical_overflow_visibility: Optional[str] = None):
        if overflow_column_header_visibility is not None:
            pulumi.set(__self__, "overflow_column_header_visibility", overflow_column_header_visibility)
        if vertical_overflow_visibility is not None:
            pulumi.set(__self__, "vertical_overflow_visibility", vertical_overflow_visibility)

    @property
    @pulumi.getter(name="overflowColumnHeaderVisibility")
    def overflow_column_header_visibility(self) -> Optional[str]:
        return pulumi.get(self, "overflow_column_header_visibility")

    @property
    @pulumi.getter(name="verticalOverflowVisibility")
    def vertical_overflow_visibility(self) -> Optional[str]:
        return pulumi.get(self, "vertical_overflow_visibility")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldSortOptions":
            suggest = "field_sort_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_sort_options: Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOption']] = None):
        if field_sort_options is not None:
            pulumi.set(__self__, "field_sort_options", field_sort_options)

    @property
    @pulumi.getter(name="fieldSortOptions")
    def field_sort_options(self) -> Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOption']]:
        return pulumi.get(self, "field_sort_options")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "sortBy":
            suggest = "sort_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 sort_by: 'outputs.VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortBy'):
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "sort_by", sort_by)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> 'outputs.VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortBy':
        return pulumi.get(self, "sort_by")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataPath":
            suggest = "data_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: Optional['outputs.ColumnSort'] = None,
                 data_path: Optional['outputs.VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPath'] = None,
                 field: Optional['outputs.FieldSort'] = None):
        if column is not None:
            pulumi.set(__self__, "column", column)
        if data_path is not None:
            pulumi.set(__self__, "data_path", data_path)
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def column(self) -> Optional['outputs.ColumnSort']:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPath']:
        return pulumi.get(self, "data_path")

    @property
    @pulumi.getter
    def field(self) -> Optional['outputs.FieldSort']:
        return pulumi.get(self, "field")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sortPaths":
            suggest = "sort_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: str,
                 sort_paths: Sequence['outputs.VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPath']):
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "sort_paths", sort_paths)

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="sortPaths")
    def sort_paths(self) -> Sequence['outputs.VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPath']:
        return pulumi.get(self, "sort_paths")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "fieldValue":
            suggest = "field_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationSortConfigurationFieldSortOptionSortByDataPathSortPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 field_value: str):
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "field_value", field_value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> str:
        return pulumi.get(self, "field_value")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationTableOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cellStyle":
            suggest = "cell_style"
        elif key == "collapsedRowDimensionsVisibility":
            suggest = "collapsed_row_dimensions_visibility"
        elif key == "columnHeaderStyle":
            suggest = "column_header_style"
        elif key == "columnNamesVisibility":
            suggest = "column_names_visibility"
        elif key == "metricPlacement":
            suggest = "metric_placement"
        elif key == "rowAlternateColorOptions":
            suggest = "row_alternate_color_options"
        elif key == "rowFieldNamesStyle":
            suggest = "row_field_names_style"
        elif key == "rowHeaderStyle":
            suggest = "row_header_style"
        elif key == "singleMetricVisibility":
            suggest = "single_metric_visibility"
        elif key == "toggleButtonsVisibility":
            suggest = "toggle_buttons_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationTableOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationTableOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationTableOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cell_style: Optional['outputs.CellStyle'] = None,
                 collapsed_row_dimensions_visibility: Optional[str] = None,
                 column_header_style: Optional['outputs.CellStyle'] = None,
                 column_names_visibility: Optional[str] = None,
                 metric_placement: Optional[str] = None,
                 row_alternate_color_options: Optional['outputs.VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions'] = None,
                 row_field_names_style: Optional['outputs.CellStyle'] = None,
                 row_header_style: Optional['outputs.CellStyle'] = None,
                 single_metric_visibility: Optional[str] = None,
                 toggle_buttons_visibility: Optional[str] = None):
        if cell_style is not None:
            pulumi.set(__self__, "cell_style", cell_style)
        if collapsed_row_dimensions_visibility is not None:
            pulumi.set(__self__, "collapsed_row_dimensions_visibility", collapsed_row_dimensions_visibility)
        if column_header_style is not None:
            pulumi.set(__self__, "column_header_style", column_header_style)
        if column_names_visibility is not None:
            pulumi.set(__self__, "column_names_visibility", column_names_visibility)
        if metric_placement is not None:
            pulumi.set(__self__, "metric_placement", metric_placement)
        if row_alternate_color_options is not None:
            pulumi.set(__self__, "row_alternate_color_options", row_alternate_color_options)
        if row_field_names_style is not None:
            pulumi.set(__self__, "row_field_names_style", row_field_names_style)
        if row_header_style is not None:
            pulumi.set(__self__, "row_header_style", row_header_style)
        if single_metric_visibility is not None:
            pulumi.set(__self__, "single_metric_visibility", single_metric_visibility)
        if toggle_buttons_visibility is not None:
            pulumi.set(__self__, "toggle_buttons_visibility", toggle_buttons_visibility)

    @property
    @pulumi.getter(name="cellStyle")
    def cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "cell_style")

    @property
    @pulumi.getter(name="collapsedRowDimensionsVisibility")
    def collapsed_row_dimensions_visibility(self) -> Optional[str]:
        return pulumi.get(self, "collapsed_row_dimensions_visibility")

    @property
    @pulumi.getter(name="columnHeaderStyle")
    def column_header_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "column_header_style")

    @property
    @pulumi.getter(name="columnNamesVisibility")
    def column_names_visibility(self) -> Optional[str]:
        return pulumi.get(self, "column_names_visibility")

    @property
    @pulumi.getter(name="metricPlacement")
    def metric_placement(self) -> Optional[str]:
        return pulumi.get(self, "metric_placement")

    @property
    @pulumi.getter(name="rowAlternateColorOptions")
    def row_alternate_color_options(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions']:
        return pulumi.get(self, "row_alternate_color_options")

    @property
    @pulumi.getter(name="rowFieldNamesStyle")
    def row_field_names_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "row_field_names_style")

    @property
    @pulumi.getter(name="rowHeaderStyle")
    def row_header_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "row_header_style")

    @property
    @pulumi.getter(name="singleMetricVisibility")
    def single_metric_visibility(self) -> Optional[str]:
        return pulumi.get(self, "single_metric_visibility")

    @property
    @pulumi.getter(name="toggleButtonsVisibility")
    def toggle_buttons_visibility(self) -> Optional[str]:
        return pulumi.get(self, "toggle_buttons_visibility")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rowAlternateColors":
            suggest = "row_alternate_colors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationTableOptionsRowAlternateColorOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 row_alternate_colors: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str status: The dashboard creation status.
        """
        if row_alternate_colors is not None:
            pulumi.set(__self__, "row_alternate_colors", row_alternate_colors)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="rowAlternateColors")
    def row_alternate_colors(self) -> Optional[str]:
        return pulumi.get(self, "row_alternate_colors")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationTotalOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnSubtotalOptions":
            suggest = "column_subtotal_options"
        elif key == "columnTotalOptions":
            suggest = "column_total_options"
        elif key == "rowSubtotalOptions":
            suggest = "row_subtotal_options"
        elif key == "rowTotalOptions":
            suggest = "row_total_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationTotalOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_subtotal_options: Optional['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptions'] = None,
                 column_total_options: Optional['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptions'] = None,
                 row_subtotal_options: Optional['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptions'] = None,
                 row_total_options: Optional['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptions'] = None):
        if column_subtotal_options is not None:
            pulumi.set(__self__, "column_subtotal_options", column_subtotal_options)
        if column_total_options is not None:
            pulumi.set(__self__, "column_total_options", column_total_options)
        if row_subtotal_options is not None:
            pulumi.set(__self__, "row_subtotal_options", row_subtotal_options)
        if row_total_options is not None:
            pulumi.set(__self__, "row_total_options", row_total_options)

    @property
    @pulumi.getter(name="columnSubtotalOptions")
    def column_subtotal_options(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptions']:
        return pulumi.get(self, "column_subtotal_options")

    @property
    @pulumi.getter(name="columnTotalOptions")
    def column_total_options(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptions']:
        return pulumi.get(self, "column_total_options")

    @property
    @pulumi.getter(name="rowSubtotalOptions")
    def row_subtotal_options(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptions']:
        return pulumi.get(self, "row_subtotal_options")

    @property
    @pulumi.getter(name="rowTotalOptions")
    def row_total_options(self) -> Optional['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptions']:
        return pulumi.get(self, "row_total_options")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLabel":
            suggest = "custom_label"
        elif key == "fieldLevel":
            suggest = "field_level"
        elif key == "fieldLevelOptions":
            suggest = "field_level_options"
        elif key == "metricHeaderCellStyle":
            suggest = "metric_header_cell_style"
        elif key == "totalCellStyle":
            suggest = "total_cell_style"
        elif key == "totalsVisibility":
            suggest = "totals_visibility"
        elif key == "valueCellStyle":
            suggest = "value_cell_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_label: Optional[str] = None,
                 field_level: Optional[str] = None,
                 field_level_options: Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOption']] = None,
                 metric_header_cell_style: Optional['outputs.CellStyle'] = None,
                 total_cell_style: Optional['outputs.CellStyle'] = None,
                 totals_visibility: Optional[str] = None,
                 value_cell_style: Optional['outputs.CellStyle'] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if field_level is not None:
            pulumi.set(__self__, "field_level", field_level)
        if field_level_options is not None:
            pulumi.set(__self__, "field_level_options", field_level_options)
        if metric_header_cell_style is not None:
            pulumi.set(__self__, "metric_header_cell_style", metric_header_cell_style)
        if total_cell_style is not None:
            pulumi.set(__self__, "total_cell_style", total_cell_style)
        if totals_visibility is not None:
            pulumi.set(__self__, "totals_visibility", totals_visibility)
        if value_cell_style is not None:
            pulumi.set(__self__, "value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[str]:
        return pulumi.get(self, "custom_label")

    @property
    @pulumi.getter(name="fieldLevel")
    def field_level(self) -> Optional[str]:
        return pulumi.get(self, "field_level")

    @property
    @pulumi.getter(name="fieldLevelOptions")
    def field_level_options(self) -> Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOption']]:
        return pulumi.get(self, "field_level_options")

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "metric_header_cell_style")

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "total_cell_style")

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[str]:
        return pulumi.get(self, "totals_visibility")

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "value_cell_style")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsColumnSubtotalOptionsFieldLevelOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: Optional[str] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[str]:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLabel":
            suggest = "custom_label"
        elif key == "metricHeaderCellStyle":
            suggest = "metric_header_cell_style"
        elif key == "scrollStatus":
            suggest = "scroll_status"
        elif key == "totalCellStyle":
            suggest = "total_cell_style"
        elif key == "totalsVisibility":
            suggest = "totals_visibility"
        elif key == "valueCellStyle":
            suggest = "value_cell_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsColumnTotalOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_label: Optional[str] = None,
                 metric_header_cell_style: Optional['outputs.CellStyle'] = None,
                 placement: Optional[str] = None,
                 scroll_status: Optional[str] = None,
                 total_cell_style: Optional['outputs.CellStyle'] = None,
                 totals_visibility: Optional[str] = None,
                 value_cell_style: Optional['outputs.CellStyle'] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if metric_header_cell_style is not None:
            pulumi.set(__self__, "metric_header_cell_style", metric_header_cell_style)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if scroll_status is not None:
            pulumi.set(__self__, "scroll_status", scroll_status)
        if total_cell_style is not None:
            pulumi.set(__self__, "total_cell_style", total_cell_style)
        if totals_visibility is not None:
            pulumi.set(__self__, "totals_visibility", totals_visibility)
        if value_cell_style is not None:
            pulumi.set(__self__, "value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[str]:
        return pulumi.get(self, "custom_label")

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "metric_header_cell_style")

    @property
    @pulumi.getter
    def placement(self) -> Optional[str]:
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[str]:
        return pulumi.get(self, "scroll_status")

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "total_cell_style")

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[str]:
        return pulumi.get(self, "totals_visibility")

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "value_cell_style")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLabel":
            suggest = "custom_label"
        elif key == "fieldLevel":
            suggest = "field_level"
        elif key == "fieldLevelOptions":
            suggest = "field_level_options"
        elif key == "metricHeaderCellStyle":
            suggest = "metric_header_cell_style"
        elif key == "totalCellStyle":
            suggest = "total_cell_style"
        elif key == "totalsVisibility":
            suggest = "totals_visibility"
        elif key == "valueCellStyle":
            suggest = "value_cell_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_label: Optional[str] = None,
                 field_level: Optional[str] = None,
                 field_level_options: Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOption']] = None,
                 metric_header_cell_style: Optional['outputs.CellStyle'] = None,
                 total_cell_style: Optional['outputs.CellStyle'] = None,
                 totals_visibility: Optional[str] = None,
                 value_cell_style: Optional['outputs.CellStyle'] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if field_level is not None:
            pulumi.set(__self__, "field_level", field_level)
        if field_level_options is not None:
            pulumi.set(__self__, "field_level_options", field_level_options)
        if metric_header_cell_style is not None:
            pulumi.set(__self__, "metric_header_cell_style", metric_header_cell_style)
        if total_cell_style is not None:
            pulumi.set(__self__, "total_cell_style", total_cell_style)
        if totals_visibility is not None:
            pulumi.set(__self__, "totals_visibility", totals_visibility)
        if value_cell_style is not None:
            pulumi.set(__self__, "value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[str]:
        return pulumi.get(self, "custom_label")

    @property
    @pulumi.getter(name="fieldLevel")
    def field_level(self) -> Optional[str]:
        return pulumi.get(self, "field_level")

    @property
    @pulumi.getter(name="fieldLevelOptions")
    def field_level_options(self) -> Optional[Sequence['outputs.VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOption']]:
        return pulumi.get(self, "field_level_options")

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "metric_header_cell_style")

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "total_cell_style")

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[str]:
        return pulumi.get(self, "totals_visibility")

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "value_cell_style")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsRowSubtotalOptionsFieldLevelOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: Optional[str] = None):
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[str]:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLabel":
            suggest = "custom_label"
        elif key == "metricHeaderCellStyle":
            suggest = "metric_header_cell_style"
        elif key == "scrollStatus":
            suggest = "scroll_status"
        elif key == "totalCellStyle":
            suggest = "total_cell_style"
        elif key == "totalsVisibility":
            suggest = "totals_visibility"
        elif key == "valueCellStyle":
            suggest = "value_cell_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualChartConfigurationTotalOptionsRowTotalOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_label: Optional[str] = None,
                 metric_header_cell_style: Optional['outputs.CellStyle'] = None,
                 placement: Optional[str] = None,
                 scroll_status: Optional[str] = None,
                 total_cell_style: Optional['outputs.CellStyle'] = None,
                 totals_visibility: Optional[str] = None,
                 value_cell_style: Optional['outputs.CellStyle'] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if metric_header_cell_style is not None:
            pulumi.set(__self__, "metric_header_cell_style", metric_header_cell_style)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if scroll_status is not None:
            pulumi.set(__self__, "scroll_status", scroll_status)
        if total_cell_style is not None:
            pulumi.set(__self__, "total_cell_style", total_cell_style)
        if totals_visibility is not None:
            pulumi.set(__self__, "totals_visibility", totals_visibility)
        if value_cell_style is not None:
            pulumi.set(__self__, "value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[str]:
        return pulumi.get(self, "custom_label")

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "metric_header_cell_style")

    @property
    @pulumi.getter
    def placement(self) -> Optional[str]:
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[str]:
        return pulumi.get(self, "scroll_status")

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "total_cell_style")

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[str]:
        return pulumi.get(self, "totals_visibility")

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "value_cell_style")


@pulumi.output_type
class VisualsPivotTableVisualConditionalFormatting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionalFormattingOptions":
            suggest = "conditional_formatting_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualConditionalFormatting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualConditionalFormatting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualConditionalFormatting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditional_formatting_options: Optional[Sequence['outputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOption']] = None):
        if conditional_formatting_options is not None:
            pulumi.set(__self__, "conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[Sequence['outputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOption']]:
        return pulumi.get(self, "conditional_formatting_options")


@pulumi.output_type
class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOption(dict):
    def __init__(__self__, *,
                 cell: Optional['outputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCell'] = None):
        if cell is not None:
            pulumi.set(__self__, "cell", cell)

    @property
    @pulumi.getter
    def cell(self) -> Optional['outputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCell']:
        return pulumi.get(self, "cell")


@pulumi.output_type
class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCell(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "textFormat":
            suggest = "text_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCell. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCell.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCell.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 scope: Optional['outputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScope'] = None,
                 text_format: Optional['outputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat'] = None):
        pulumi.set(__self__, "field_id", field_id)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if text_format is not None:
            pulumi.set(__self__, "text_format", text_format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter
    def scope(self) -> Optional['outputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScope']:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="textFormat")
    def text_format(self) -> Optional['outputs.VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat']:
        return pulumi.get(self, "text_format")


@pulumi.output_type
class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellScope(dict):
    def __init__(__self__, *,
                 role: Optional[str] = None):
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")


@pulumi.output_type
class VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsPivotTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: 'outputs.ConditionalFormattingColor',
                 text_color: 'outputs.ConditionalFormattingColor',
                 icon: Optional['outputs.ConditionalFormattingIcon'] = None):
        pulumi.set(__self__, "background_color", background_color)
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "text_color")

    @property
    @pulumi.getter
    def icon(self) -> Optional['outputs.ConditionalFormattingIcon']:
        return pulumi.get(self, "icon")


@pulumi.output_type
class VisualsRadarChartVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsRadarChartVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsRadarChartVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsRadarChartVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsRadarChartVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsRadarChartVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsRadarChartVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alternateBandColorsVisibility":
            suggest = "alternate_band_colors_visibility"
        elif key == "alternateBandEvenColor":
            suggest = "alternate_band_even_color"
        elif key == "alternateBandOddColor":
            suggest = "alternate_band_odd_color"
        elif key == "baseSeriesSettings":
            suggest = "base_series_settings"
        elif key == "categoryAxis":
            suggest = "category_axis"
        elif key == "categoryLabelOptions":
            suggest = "category_label_options"
        elif key == "colorAxis":
            suggest = "color_axis"
        elif key == "colorLabelOptions":
            suggest = "color_label_options"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "startAngle":
            suggest = "start_angle"
        elif key == "visualPalette":
            suggest = "visual_palette"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsRadarChartVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsRadarChartVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsRadarChartVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alternate_band_colors_visibility: Optional[str] = None,
                 alternate_band_even_color: Optional[str] = None,
                 alternate_band_odd_color: Optional[str] = None,
                 base_series_settings: Optional['outputs.VisualsRadarChartVisualChartConfigurationBaseSeriesSettings'] = None,
                 category_axis: Optional['outputs.AxisDisplayOptions'] = None,
                 category_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 color_axis: Optional['outputs.AxisDisplayOptions'] = None,
                 color_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 field_wells: Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWells'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 shape: Optional[str] = None,
                 sort_configuration: Optional['outputs.VisualsRadarChartVisualChartConfigurationSortConfiguration'] = None,
                 start_angle: Optional[float] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None):
        if alternate_band_colors_visibility is not None:
            pulumi.set(__self__, "alternate_band_colors_visibility", alternate_band_colors_visibility)
        if alternate_band_even_color is not None:
            pulumi.set(__self__, "alternate_band_even_color", alternate_band_even_color)
        if alternate_band_odd_color is not None:
            pulumi.set(__self__, "alternate_band_odd_color", alternate_band_odd_color)
        if base_series_settings is not None:
            pulumi.set(__self__, "base_series_settings", base_series_settings)
        if category_axis is not None:
            pulumi.set(__self__, "category_axis", category_axis)
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if color_axis is not None:
            pulumi.set(__self__, "color_axis", color_axis)
        if color_label_options is not None:
            pulumi.set(__self__, "color_label_options", color_label_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if start_angle is not None:
            pulumi.set(__self__, "start_angle", start_angle)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)

    @property
    @pulumi.getter(name="alternateBandColorsVisibility")
    def alternate_band_colors_visibility(self) -> Optional[str]:
        return pulumi.get(self, "alternate_band_colors_visibility")

    @property
    @pulumi.getter(name="alternateBandEvenColor")
    def alternate_band_even_color(self) -> Optional[str]:
        return pulumi.get(self, "alternate_band_even_color")

    @property
    @pulumi.getter(name="alternateBandOddColor")
    def alternate_band_odd_color(self) -> Optional[str]:
        return pulumi.get(self, "alternate_band_odd_color")

    @property
    @pulumi.getter(name="baseSeriesSettings")
    def base_series_settings(self) -> Optional['outputs.VisualsRadarChartVisualChartConfigurationBaseSeriesSettings']:
        return pulumi.get(self, "base_series_settings")

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "category_axis")

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "category_label_options")

    @property
    @pulumi.getter(name="colorAxis")
    def color_axis(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "color_axis")

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "color_label_options")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsRadarChartVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter(name="startAngle")
    def start_angle(self) -> Optional[float]:
        return pulumi.get(self, "start_angle")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")


@pulumi.output_type
class VisualsRadarChartVisualChartConfigurationBaseSeriesSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaStyleSettings":
            suggest = "area_style_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsRadarChartVisualChartConfigurationBaseSeriesSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsRadarChartVisualChartConfigurationBaseSeriesSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsRadarChartVisualChartConfigurationBaseSeriesSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_style_settings: Optional['outputs.SelectAllOptions'] = None):
        if area_style_settings is not None:
            pulumi.set(__self__, "area_style_settings", area_style_settings)

    @property
    @pulumi.getter(name="areaStyleSettings")
    def area_style_settings(self) -> Optional['outputs.SelectAllOptions']:
        return pulumi.get(self, "area_style_settings")


@pulumi.output_type
class VisualsRadarChartVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "radarChartAggregatedFieldWells":
            suggest = "radar_chart_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsRadarChartVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 radar_chart_aggregated_field_wells: Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWells'] = None):
        if radar_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "radar_chart_aggregated_field_wells", radar_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="radarChartAggregatedFieldWells")
    def radar_chart_aggregated_field_wells(self) -> Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWells']:
        return pulumi.get(self, "radar_chart_aggregated_field_wells")


@pulumi.output_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWells(dict):
    def __init__(__self__, *,
                 category: Optional['outputs.SmallMultiplesOptions'] = None,
                 color: Optional['outputs.SmallMultiplesOptions'] = None,
                 values: Optional[Sequence['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValue']] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def color(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "calculatedMeasureField":
            suggest = "calculated_measure_field"
        elif key == "categoricalMeasureField":
            suggest = "categorical_measure_field"
        elif key == "dateMeasureField":
            suggest = "date_measure_field"
        elif key == "numericalMeasureField":
            suggest = "numerical_measure_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calculated_measure_field: Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureField'] = None,
                 categorical_measure_field: Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureField'] = None,
                 date_measure_field: Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureField'] = None,
                 numerical_measure_field: Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureField'] = None):
        if calculated_measure_field is not None:
            pulumi.set(__self__, "calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            pulumi.set(__self__, "categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            pulumi.set(__self__, "date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            pulumi.set(__self__, "numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureField']:
        return pulumi.get(self, "calculated_measure_field")

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureField']:
        return pulumi.get(self, "categorical_measure_field")

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureField']:
        return pulumi.get(self, "date_measure_field")

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional['outputs.VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureField']:
        return pulumi.get(self, "numerical_measure_field")


@pulumi.output_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCalculatedMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: str,
                 field_id: str):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")


@pulumi.output_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueCategoricalMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional[str] = None,
                 format_configuration: Optional['outputs.StringFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueDateMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional[str] = None,
                 format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "aggregationFunction":
            suggest = "aggregation_function"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsRadarChartVisualChartConfigurationFieldWellsRadarChartAggregatedFieldWellsValueNumericalMeasureField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 aggregation_function: Optional['outputs.NumericalAggregation'] = None,
                 format_configuration: Optional['outputs.NumberFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if aggregation_function is not None:
            pulumi.set(__self__, "aggregation_function", aggregation_function)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional['outputs.NumericalAggregation']:
        return pulumi.get(self, "aggregation_function")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class VisualsRadarChartVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryItemsLimit":
            suggest = "category_items_limit"
        elif key == "categorySorts":
            suggest = "category_sorts"
        elif key == "colorItemsLimit":
            suggest = "color_items_limit"
        elif key == "colorSorts":
            suggest = "color_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsRadarChartVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsRadarChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsRadarChartVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 category_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None,
                 color_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 color_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)
        if color_items_limit is not None:
            pulumi.set(__self__, "color_items_limit", color_items_limit)
        if color_sorts is not None:
            pulumi.set(__self__, "color_sorts", color_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "category_items_limit")

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "category_sorts")

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "color_items_limit")

    @property
    @pulumi.getter(name="colorSorts")
    def color_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "color_sorts")


@pulumi.output_type
class VisualsSankeyDiagramVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsSankeyDiagramVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsSankeyDiagramVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsSankeyDiagramVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsSankeyDiagramVisualChartConfiguration'] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsSankeyDiagramVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsSankeyDiagramVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLabels":
            suggest = "data_labels"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsSankeyDiagramVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsSankeyDiagramVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsSankeyDiagramVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 field_wells: Optional['outputs.VisualsSankeyDiagramVisualChartConfigurationFieldWells'] = None,
                 sort_configuration: Optional['outputs.VisualsSankeyDiagramVisualChartConfigurationSortConfiguration'] = None):
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "data_labels")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsSankeyDiagramVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsSankeyDiagramVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")


@pulumi.output_type
class VisualsSankeyDiagramVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sankeyDiagramAggregatedFieldWells":
            suggest = "sankey_diagram_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsSankeyDiagramVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsSankeyDiagramVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsSankeyDiagramVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sankey_diagram_aggregated_field_wells: Optional['outputs.VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWells'] = None):
        if sankey_diagram_aggregated_field_wells is not None:
            pulumi.set(__self__, "sankey_diagram_aggregated_field_wells", sankey_diagram_aggregated_field_wells)

    @property
    @pulumi.getter(name="sankeyDiagramAggregatedFieldWells")
    def sankey_diagram_aggregated_field_wells(self) -> Optional['outputs.VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWells']:
        return pulumi.get(self, "sankey_diagram_aggregated_field_wells")


@pulumi.output_type
class VisualsSankeyDiagramVisualChartConfigurationFieldWellsSankeyDiagramAggregatedFieldWells(dict):
    def __init__(__self__, *,
                 destinations: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 sources: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 weights: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if weights is not None:
            pulumi.set(__self__, "weights", weights)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def weights(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "weights")


@pulumi.output_type
class VisualsSankeyDiagramVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationItemsLimit":
            suggest = "destination_items_limit"
        elif key == "sourceItemsLimit":
            suggest = "source_items_limit"
        elif key == "weightSorts":
            suggest = "weight_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsSankeyDiagramVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsSankeyDiagramVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsSankeyDiagramVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 source_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 weight_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if destination_items_limit is not None:
            pulumi.set(__self__, "destination_items_limit", destination_items_limit)
        if source_items_limit is not None:
            pulumi.set(__self__, "source_items_limit", source_items_limit)
        if weight_sorts is not None:
            pulumi.set(__self__, "weight_sorts", weight_sorts)

    @property
    @pulumi.getter(name="destinationItemsLimit")
    def destination_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "destination_items_limit")

    @property
    @pulumi.getter(name="sourceItemsLimit")
    def source_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "source_items_limit")

    @property
    @pulumi.getter(name="weightSorts")
    def weight_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "weight_sorts")


@pulumi.output_type
class VisualsScatterPlotVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsScatterPlotVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsScatterPlotVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsScatterPlotVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsScatterPlotVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsScatterPlotVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsScatterPlotVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLabels":
            suggest = "data_labels"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "visualPalette":
            suggest = "visual_palette"
        elif key == "xAxisDisplayOptions":
            suggest = "x_axis_display_options"
        elif key == "xAxisLabelOptions":
            suggest = "x_axis_label_options"
        elif key == "yAxisDisplayOptions":
            suggest = "y_axis_display_options"
        elif key == "yAxisLabelOptions":
            suggest = "y_axis_label_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsScatterPlotVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsScatterPlotVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsScatterPlotVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 field_wells: Optional['outputs.VisualsScatterPlotVisualChartConfigurationFieldWells'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None,
                 x_axis_display_options: Optional['outputs.AxisDisplayOptions'] = None,
                 x_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 y_axis_display_options: Optional['outputs.AxisDisplayOptions'] = None,
                 y_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None):
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)
        if x_axis_display_options is not None:
            pulumi.set(__self__, "x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            pulumi.set(__self__, "x_axis_label_options", x_axis_label_options)
        if y_axis_display_options is not None:
            pulumi.set(__self__, "y_axis_display_options", y_axis_display_options)
        if y_axis_label_options is not None:
            pulumi.set(__self__, "y_axis_label_options", y_axis_label_options)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "data_labels")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsScatterPlotVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "x_axis_display_options")

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "x_axis_label_options")

    @property
    @pulumi.getter(name="yAxisDisplayOptions")
    def y_axis_display_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "y_axis_display_options")

    @property
    @pulumi.getter(name="yAxisLabelOptions")
    def y_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "y_axis_label_options")


@pulumi.output_type
class VisualsScatterPlotVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scatterPlotCategoricallyAggregatedFieldWells":
            suggest = "scatter_plot_categorically_aggregated_field_wells"
        elif key == "scatterPlotUnaggregatedFieldWells":
            suggest = "scatter_plot_unaggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsScatterPlotVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsScatterPlotVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsScatterPlotVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scatter_plot_categorically_aggregated_field_wells: Optional['outputs.VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWells'] = None,
                 scatter_plot_unaggregated_field_wells: Optional['outputs.VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWells'] = None):
        if scatter_plot_categorically_aggregated_field_wells is not None:
            pulumi.set(__self__, "scatter_plot_categorically_aggregated_field_wells", scatter_plot_categorically_aggregated_field_wells)
        if scatter_plot_unaggregated_field_wells is not None:
            pulumi.set(__self__, "scatter_plot_unaggregated_field_wells", scatter_plot_unaggregated_field_wells)

    @property
    @pulumi.getter(name="scatterPlotCategoricallyAggregatedFieldWells")
    def scatter_plot_categorically_aggregated_field_wells(self) -> Optional['outputs.VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWells']:
        return pulumi.get(self, "scatter_plot_categorically_aggregated_field_wells")

    @property
    @pulumi.getter(name="scatterPlotUnaggregatedFieldWells")
    def scatter_plot_unaggregated_field_wells(self) -> Optional['outputs.VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWells']:
        return pulumi.get(self, "scatter_plot_unaggregated_field_wells")


@pulumi.output_type
class VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xAxes":
            suggest = "x_axes"
        elif key == "yAxes":
            suggest = "y_axes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotCategoricallyAggregatedFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 sizes: Optional[Sequence['outputs.MeasureFieldSchema']] = None,
                 x_axes: Optional[Sequence['outputs.MeasureFieldSchema']] = None,
                 y_axes: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)
        if x_axes is not None:
            pulumi.set(__self__, "x_axes", x_axes)
        if y_axes is not None:
            pulumi.set(__self__, "y_axes", y_axes)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def sizes(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "sizes")

    @property
    @pulumi.getter(name="xAxes")
    def x_axes(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "x_axes")

    @property
    @pulumi.getter(name="yAxes")
    def y_axes(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "y_axes")


@pulumi.output_type
class VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xAxes":
            suggest = "x_axes"
        elif key == "yAxes":
            suggest = "y_axes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsScatterPlotVisualChartConfigurationFieldWellsScatterPlotUnaggregatedFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sizes: Optional[Sequence['outputs.MeasureFieldSchema']] = None,
                 x_axes: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 y_axes: Optional[Sequence['outputs.DimensionFieldSchema']] = None):
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)
        if x_axes is not None:
            pulumi.set(__self__, "x_axes", x_axes)
        if y_axes is not None:
            pulumi.set(__self__, "y_axes", y_axes)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "sizes")

    @property
    @pulumi.getter(name="xAxes")
    def x_axes(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "x_axes")

    @property
    @pulumi.getter(name="yAxes")
    def y_axes(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "y_axes")


@pulumi.output_type
class VisualsTableVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "conditionalFormatting":
            suggest = "conditional_formatting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsTableVisualChartConfiguration'] = None,
                 conditional_formatting: Optional['outputs.VisualsTableVisualConditionalFormatting'] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            pulumi.set(__self__, "conditional_formatting", conditional_formatting)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsTableVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional['outputs.VisualsTableVisualConditionalFormatting']:
        return pulumi.get(self, "conditional_formatting")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsTableVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldOptions":
            suggest = "field_options"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "paginatedReportOptions":
            suggest = "paginated_report_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "tableInlineVisualizations":
            suggest = "table_inline_visualizations"
        elif key == "tableOptions":
            suggest = "table_options"
        elif key == "totalOptions":
            suggest = "total_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_options: Optional['outputs.VisualsTableVisualChartConfigurationFieldOptions'] = None,
                 field_wells: Optional['outputs.VisualsTableVisualChartConfigurationFieldWells'] = None,
                 paginated_report_options: Optional['outputs.VisualsTableVisualChartConfigurationPaginatedReportOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsTableVisualChartConfigurationSortConfiguration'] = None,
                 table_inline_visualizations: Optional[Sequence['outputs.VisualsTableVisualChartConfigurationTableInlineVisualization']] = None,
                 table_options: Optional['outputs.VisualsTableVisualChartConfigurationTableOptions'] = None,
                 total_options: Optional['outputs.VisualsTableVisualChartConfigurationTotalOptions'] = None):
        if field_options is not None:
            pulumi.set(__self__, "field_options", field_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if paginated_report_options is not None:
            pulumi.set(__self__, "paginated_report_options", paginated_report_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if table_inline_visualizations is not None:
            pulumi.set(__self__, "table_inline_visualizations", table_inline_visualizations)
        if table_options is not None:
            pulumi.set(__self__, "table_options", table_options)
        if total_options is not None:
            pulumi.set(__self__, "total_options", total_options)

    @property
    @pulumi.getter(name="fieldOptions")
    def field_options(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldOptions']:
        return pulumi.get(self, "field_options")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter(name="paginatedReportOptions")
    def paginated_report_options(self) -> Optional['outputs.VisualsTableVisualChartConfigurationPaginatedReportOptions']:
        return pulumi.get(self, "paginated_report_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsTableVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter(name="tableInlineVisualizations")
    def table_inline_visualizations(self) -> Optional[Sequence['outputs.VisualsTableVisualChartConfigurationTableInlineVisualization']]:
        return pulumi.get(self, "table_inline_visualizations")

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional['outputs.VisualsTableVisualChartConfigurationTableOptions']:
        return pulumi.get(self, "table_options")

    @property
    @pulumi.getter(name="totalOptions")
    def total_options(self) -> Optional['outputs.VisualsTableVisualChartConfigurationTotalOptions']:
        return pulumi.get(self, "total_options")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectedFieldOptions":
            suggest = "selected_field_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 orders: Optional[Sequence[str]] = None,
                 selected_field_options: Optional[Sequence['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOption']] = None):
        if orders is not None:
            pulumi.set(__self__, "orders", orders)
        if selected_field_options is not None:
            pulumi.set(__self__, "selected_field_options", selected_field_options)

    @property
    @pulumi.getter
    def orders(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[Sequence['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOption']]:
        return pulumi.get(self, "selected_field_options")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "customLabel":
            suggest = "custom_label"
        elif key == "urlStyling":
            suggest = "url_styling"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 custom_label: Optional[str] = None,
                 url_styling: Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStyling'] = None,
                 visibility: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "field_id", field_id)
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if url_styling is not None:
            pulumi.set(__self__, "url_styling", url_styling)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[str]:
        return pulumi.get(self, "custom_label")

    @property
    @pulumi.getter(name="urlStyling")
    def url_styling(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStyling']:
        return pulumi.get(self, "url_styling")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStyling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageConfiguration":
            suggest = "image_configuration"
        elif key == "linkConfiguration":
            suggest = "link_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStyling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStyling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStyling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_configuration: Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfiguration'] = None,
                 link_configuration: Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfiguration'] = None):
        if image_configuration is not None:
            pulumi.set(__self__, "image_configuration", image_configuration)
        if link_configuration is not None:
            pulumi.set(__self__, "link_configuration", link_configuration)

    @property
    @pulumi.getter(name="imageConfiguration")
    def image_configuration(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfiguration']:
        return pulumi.get(self, "image_configuration")

    @property
    @pulumi.getter(name="linkConfiguration")
    def link_configuration(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfiguration']:
        return pulumi.get(self, "link_configuration")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizingOptions":
            suggest = "sizing_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sizing_options: Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptions'] = None):
        if sizing_options is not None:
            pulumi.set(__self__, "sizing_options", sizing_options)

    @property
    @pulumi.getter(name="sizingOptions")
    def sizing_options(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptions']:
        return pulumi.get(self, "sizing_options")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableCellImageScalingConfiguration":
            suggest = "table_cell_image_scaling_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingImageConfigurationSizingOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 table_cell_image_scaling_configuration: Optional[str] = None):
        if table_cell_image_scaling_configuration is not None:
            pulumi.set(__self__, "table_cell_image_scaling_configuration", table_cell_image_scaling_configuration)

    @property
    @pulumi.getter(name="tableCellImageScalingConfiguration")
    def table_cell_image_scaling_configuration(self) -> Optional[str]:
        return pulumi.get(self, "table_cell_image_scaling_configuration")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfiguration(dict):
    def __init__(__self__, *,
                 content: Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContent'] = None,
                 target: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def content(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContent']:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customIconContent":
            suggest = "custom_icon_content"
        elif key == "customTextContent":
            suggest = "custom_text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_icon_content: Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContent'] = None,
                 custom_text_content: Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContent'] = None):
        if custom_icon_content is not None:
            pulumi.set(__self__, "custom_icon_content", custom_icon_content)
        if custom_text_content is not None:
            pulumi.set(__self__, "custom_text_content", custom_text_content)

    @property
    @pulumi.getter(name="customIconContent")
    def custom_icon_content(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContent']:
        return pulumi.get(self, "custom_icon_content")

    @property
    @pulumi.getter(name="customTextContent")
    def custom_text_content(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContent']:
        return pulumi.get(self, "custom_text_content")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomIconContent(dict):
    def __init__(__self__, *,
                 icon: Optional[str] = None):
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontConfiguration":
            suggest = "font_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldOptionsSelectedFieldOptionUrlStylingLinkConfigurationContentCustomTextContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_configuration: Optional['outputs.FontConfiguration'] = None,
                 value: Optional[str] = None):
        if font_configuration is not None:
            pulumi.set(__self__, "font_configuration", font_configuration)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional['outputs.FontConfiguration']:
        return pulumi.get(self, "font_configuration")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableAggregatedFieldWells":
            suggest = "table_aggregated_field_wells"
        elif key == "tableUnaggregatedFieldWells":
            suggest = "table_unaggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 table_aggregated_field_wells: Optional['outputs.VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWells'] = None,
                 table_unaggregated_field_wells: Optional['outputs.VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWells'] = None):
        if table_aggregated_field_wells is not None:
            pulumi.set(__self__, "table_aggregated_field_wells", table_aggregated_field_wells)
        if table_unaggregated_field_wells is not None:
            pulumi.set(__self__, "table_unaggregated_field_wells", table_unaggregated_field_wells)

    @property
    @pulumi.getter(name="tableAggregatedFieldWells")
    def table_aggregated_field_wells(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWells']:
        return pulumi.get(self, "table_aggregated_field_wells")

    @property
    @pulumi.getter(name="tableUnaggregatedFieldWells")
    def table_unaggregated_field_wells(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWells']:
        return pulumi.get(self, "table_unaggregated_field_wells")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldWellsTableAggregatedFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_bies: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 values: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWells(dict):
    def __init__(__self__, *,
                 values: Optional[Sequence['outputs.VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValue']] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "formatConfiguration":
            suggest = "format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 format_configuration: Optional['outputs.VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfiguration'] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfiguration']:
        return pulumi.get(self, "format_configuration")


@pulumi.output_type
class VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeFormatConfiguration":
            suggest = "date_time_format_configuration"
        elif key == "numberFormatConfiguration":
            suggest = "number_format_configuration"
        elif key == "stringFormatConfiguration":
            suggest = "string_format_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationFieldWellsTableUnaggregatedFieldWellsValueFormatConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_time_format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None,
                 number_format_configuration: Optional['outputs.NumberFormatConfiguration'] = None,
                 string_format_configuration: Optional['outputs.StringFormatConfiguration'] = None):
        if date_time_format_configuration is not None:
            pulumi.set(__self__, "date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            pulumi.set(__self__, "number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            pulumi.set(__self__, "string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "date_time_format_configuration")

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "number_format_configuration")

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "string_format_configuration")


@pulumi.output_type
class VisualsTableVisualChartConfigurationPaginatedReportOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overflowColumnHeaderVisibility":
            suggest = "overflow_column_header_visibility"
        elif key == "verticalOverflowVisibility":
            suggest = "vertical_overflow_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationPaginatedReportOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationPaginatedReportOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationPaginatedReportOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 overflow_column_header_visibility: Optional[str] = None,
                 vertical_overflow_visibility: Optional[str] = None):
        if overflow_column_header_visibility is not None:
            pulumi.set(__self__, "overflow_column_header_visibility", overflow_column_header_visibility)
        if vertical_overflow_visibility is not None:
            pulumi.set(__self__, "vertical_overflow_visibility", vertical_overflow_visibility)

    @property
    @pulumi.getter(name="overflowColumnHeaderVisibility")
    def overflow_column_header_visibility(self) -> Optional[str]:
        return pulumi.get(self, "overflow_column_header_visibility")

    @property
    @pulumi.getter(name="verticalOverflowVisibility")
    def vertical_overflow_visibility(self) -> Optional[str]:
        return pulumi.get(self, "vertical_overflow_visibility")


@pulumi.output_type
class VisualsTableVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paginationConfiguration":
            suggest = "pagination_configuration"
        elif key == "rowSorts":
            suggest = "row_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pagination_configuration: Optional['outputs.VisualsTableVisualChartConfigurationSortConfigurationPaginationConfiguration'] = None,
                 row_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if pagination_configuration is not None:
            pulumi.set(__self__, "pagination_configuration", pagination_configuration)
        if row_sorts is not None:
            pulumi.set(__self__, "row_sorts", row_sorts)

    @property
    @pulumi.getter(name="paginationConfiguration")
    def pagination_configuration(self) -> Optional['outputs.VisualsTableVisualChartConfigurationSortConfigurationPaginationConfiguration']:
        return pulumi.get(self, "pagination_configuration")

    @property
    @pulumi.getter(name="rowSorts")
    def row_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "row_sorts")


@pulumi.output_type
class VisualsTableVisualChartConfigurationSortConfigurationPaginationConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pageNumber":
            suggest = "page_number"
        elif key == "pageSize":
            suggest = "page_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationSortConfigurationPaginationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationSortConfigurationPaginationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationSortConfigurationPaginationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 page_number: int,
                 page_size: int):
        pulumi.set(__self__, "page_number", page_number)
        pulumi.set(__self__, "page_size", page_size)

    @property
    @pulumi.getter(name="pageNumber")
    def page_number(self) -> int:
        return pulumi.get(self, "page_number")

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> int:
        return pulumi.get(self, "page_size")


@pulumi.output_type
class VisualsTableVisualChartConfigurationTableInlineVisualization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataBars":
            suggest = "data_bars"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationTableInlineVisualization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationTableInlineVisualization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationTableInlineVisualization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_bars: Optional['outputs.VisualsTableVisualChartConfigurationTableInlineVisualizationDataBars'] = None):
        if data_bars is not None:
            pulumi.set(__self__, "data_bars", data_bars)

    @property
    @pulumi.getter(name="dataBars")
    def data_bars(self) -> Optional['outputs.VisualsTableVisualChartConfigurationTableInlineVisualizationDataBars']:
        return pulumi.get(self, "data_bars")


@pulumi.output_type
class VisualsTableVisualChartConfigurationTableInlineVisualizationDataBars(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "negativeColor":
            suggest = "negative_color"
        elif key == "positiveColor":
            suggest = "positive_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationTableInlineVisualizationDataBars. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationTableInlineVisualizationDataBars.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationTableInlineVisualizationDataBars.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 negative_color: Optional[str] = None,
                 positive_color: Optional[str] = None):
        pulumi.set(__self__, "field_id", field_id)
        if negative_color is not None:
            pulumi.set(__self__, "negative_color", negative_color)
        if positive_color is not None:
            pulumi.set(__self__, "positive_color", positive_color)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="negativeColor")
    def negative_color(self) -> Optional[str]:
        return pulumi.get(self, "negative_color")

    @property
    @pulumi.getter(name="positiveColor")
    def positive_color(self) -> Optional[str]:
        return pulumi.get(self, "positive_color")


@pulumi.output_type
class VisualsTableVisualChartConfigurationTableOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cellStyle":
            suggest = "cell_style"
        elif key == "headerStyle":
            suggest = "header_style"
        elif key == "rowAlternateColorOptions":
            suggest = "row_alternate_color_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationTableOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationTableOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationTableOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cell_style: Optional['outputs.CellStyle'] = None,
                 header_style: Optional['outputs.CellStyle'] = None,
                 orientation: Optional[str] = None,
                 row_alternate_color_options: Optional['outputs.VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptions'] = None):
        if cell_style is not None:
            pulumi.set(__self__, "cell_style", cell_style)
        if header_style is not None:
            pulumi.set(__self__, "header_style", header_style)
        if orientation is not None:
            pulumi.set(__self__, "orientation", orientation)
        if row_alternate_color_options is not None:
            pulumi.set(__self__, "row_alternate_color_options", row_alternate_color_options)

    @property
    @pulumi.getter(name="cellStyle")
    def cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "cell_style")

    @property
    @pulumi.getter(name="headerStyle")
    def header_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "header_style")

    @property
    @pulumi.getter
    def orientation(self) -> Optional[str]:
        return pulumi.get(self, "orientation")

    @property
    @pulumi.getter(name="rowAlternateColorOptions")
    def row_alternate_color_options(self) -> Optional['outputs.VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptions']:
        return pulumi.get(self, "row_alternate_color_options")


@pulumi.output_type
class VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rowAlternateColors":
            suggest = "row_alternate_colors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationTableOptionsRowAlternateColorOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 row_alternate_colors: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str status: The dashboard creation status.
        """
        if row_alternate_colors is not None:
            pulumi.set(__self__, "row_alternate_colors", row_alternate_colors)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="rowAlternateColors")
    def row_alternate_colors(self) -> Optional[str]:
        return pulumi.get(self, "row_alternate_colors")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The dashboard creation status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class VisualsTableVisualChartConfigurationTotalOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLabel":
            suggest = "custom_label"
        elif key == "scrollStatus":
            suggest = "scroll_status"
        elif key == "totalCellStyle":
            suggest = "total_cell_style"
        elif key == "totalsVisibility":
            suggest = "totals_visibility"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualChartConfigurationTotalOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualChartConfigurationTotalOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualChartConfigurationTotalOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_label: Optional[str] = None,
                 placement: Optional[str] = None,
                 scroll_status: Optional[str] = None,
                 total_cell_style: Optional['outputs.CellStyle'] = None,
                 totals_visibility: Optional[str] = None):
        if custom_label is not None:
            pulumi.set(__self__, "custom_label", custom_label)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if scroll_status is not None:
            pulumi.set(__self__, "scroll_status", scroll_status)
        if total_cell_style is not None:
            pulumi.set(__self__, "total_cell_style", total_cell_style)
        if totals_visibility is not None:
            pulumi.set(__self__, "totals_visibility", totals_visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[str]:
        return pulumi.get(self, "custom_label")

    @property
    @pulumi.getter
    def placement(self) -> Optional[str]:
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[str]:
        return pulumi.get(self, "scroll_status")

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional['outputs.CellStyle']:
        return pulumi.get(self, "total_cell_style")

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[str]:
        return pulumi.get(self, "totals_visibility")


@pulumi.output_type
class VisualsTableVisualConditionalFormatting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionalFormattingOptions":
            suggest = "conditional_formatting_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualConditionalFormatting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualConditionalFormatting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualConditionalFormatting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditional_formatting_options: Optional[Sequence['outputs.VisualsTableVisualConditionalFormattingConditionalFormattingOption']] = None):
        if conditional_formatting_options is not None:
            pulumi.set(__self__, "conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[Sequence['outputs.VisualsTableVisualConditionalFormattingConditionalFormattingOption']]:
        return pulumi.get(self, "conditional_formatting_options")


@pulumi.output_type
class VisualsTableVisualConditionalFormattingConditionalFormattingOption(dict):
    def __init__(__self__, *,
                 cell: Optional['outputs.VisualsTableVisualConditionalFormattingConditionalFormattingOptionCell'] = None,
                 row: Optional['outputs.VisualsTableVisualConditionalFormattingConditionalFormattingOptionRow'] = None):
        if cell is not None:
            pulumi.set(__self__, "cell", cell)
        if row is not None:
            pulumi.set(__self__, "row", row)

    @property
    @pulumi.getter
    def cell(self) -> Optional['outputs.VisualsTableVisualConditionalFormattingConditionalFormattingOptionCell']:
        return pulumi.get(self, "cell")

    @property
    @pulumi.getter
    def row(self) -> Optional['outputs.VisualsTableVisualConditionalFormattingConditionalFormattingOptionRow']:
        return pulumi.get(self, "row")


@pulumi.output_type
class VisualsTableVisualConditionalFormattingConditionalFormattingOptionCell(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "textFormat":
            suggest = "text_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualConditionalFormattingConditionalFormattingOptionCell. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualConditionalFormattingConditionalFormattingOptionCell.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualConditionalFormattingConditionalFormattingOptionCell.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_id: str,
                 text_format: Optional['outputs.VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat'] = None):
        pulumi.set(__self__, "field_id", field_id)
        if text_format is not None:
            pulumi.set(__self__, "text_format", text_format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="textFormat")
    def text_format(self) -> Optional['outputs.VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat']:
        return pulumi.get(self, "text_format")


@pulumi.output_type
class VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualConditionalFormattingConditionalFormattingOptionCellTextFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: 'outputs.ConditionalFormattingColor',
                 text_color: 'outputs.ConditionalFormattingColor',
                 icon: Optional['outputs.ConditionalFormattingIcon'] = None):
        pulumi.set(__self__, "background_color", background_color)
        pulumi.set(__self__, "text_color", text_color)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "text_color")

    @property
    @pulumi.getter
    def icon(self) -> Optional['outputs.ConditionalFormattingIcon']:
        return pulumi.get(self, "icon")


@pulumi.output_type
class VisualsTableVisualConditionalFormattingConditionalFormattingOptionRow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTableVisualConditionalFormattingConditionalFormattingOptionRow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTableVisualConditionalFormattingConditionalFormattingOptionRow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTableVisualConditionalFormattingConditionalFormattingOptionRow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: 'outputs.ConditionalFormattingColor',
                 text_color: 'outputs.ConditionalFormattingColor'):
        pulumi.set(__self__, "background_color", background_color)
        pulumi.set(__self__, "text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> 'outputs.ConditionalFormattingColor':
        return pulumi.get(self, "text_color")


@pulumi.output_type
class VisualsTreeMapVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTreeMapVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTreeMapVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTreeMapVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsTreeMapVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsTreeMapVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsTreeMapVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorLabelOptions":
            suggest = "color_label_options"
        elif key == "colorScale":
            suggest = "color_scale"
        elif key == "dataLabels":
            suggest = "data_labels"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "groupLabelOptions":
            suggest = "group_label_options"
        elif key == "sizeLabelOptions":
            suggest = "size_label_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTreeMapVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTreeMapVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTreeMapVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 color_scale: Optional['outputs.ColorScale'] = None,
                 data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 field_wells: Optional['outputs.VisualsTreeMapVisualChartConfigurationFieldWells'] = None,
                 group_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 size_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsTreeMapVisualChartConfigurationSortConfiguration'] = None,
                 tooltip: Optional['outputs.TooltipOptions'] = None):
        if color_label_options is not None:
            pulumi.set(__self__, "color_label_options", color_label_options)
        if color_scale is not None:
            pulumi.set(__self__, "color_scale", color_scale)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if group_label_options is not None:
            pulumi.set(__self__, "group_label_options", group_label_options)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if size_label_options is not None:
            pulumi.set(__self__, "size_label_options", size_label_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if tooltip is not None:
            pulumi.set(__self__, "tooltip", tooltip)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "color_label_options")

    @property
    @pulumi.getter(name="colorScale")
    def color_scale(self) -> Optional['outputs.ColorScale']:
        return pulumi.get(self, "color_scale")

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "data_labels")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsTreeMapVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter(name="groupLabelOptions")
    def group_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "group_label_options")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter(name="sizeLabelOptions")
    def size_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "size_label_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsTreeMapVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter
    def tooltip(self) -> Optional['outputs.TooltipOptions']:
        return pulumi.get(self, "tooltip")


@pulumi.output_type
class VisualsTreeMapVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "treeMapAggregatedFieldWells":
            suggest = "tree_map_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTreeMapVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTreeMapVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTreeMapVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tree_map_aggregated_field_wells: Optional['outputs.VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWells'] = None):
        if tree_map_aggregated_field_wells is not None:
            pulumi.set(__self__, "tree_map_aggregated_field_wells", tree_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="treeMapAggregatedFieldWells")
    def tree_map_aggregated_field_wells(self) -> Optional['outputs.VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWells']:
        return pulumi.get(self, "tree_map_aggregated_field_wells")


@pulumi.output_type
class VisualsTreeMapVisualChartConfigurationFieldWellsTreeMapAggregatedFieldWells(dict):
    def __init__(__self__, *,
                 colors: Optional['outputs.MeasureFieldSchema2'] = None,
                 groups: Optional['outputs.SmallMultiplesOptions'] = None,
                 sizes: Optional['outputs.MeasureFieldSchema2'] = None):
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)

    @property
    @pulumi.getter
    def colors(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter
    def groups(self) -> Optional['outputs.SmallMultiplesOptions']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def sizes(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "sizes")


@pulumi.output_type
class VisualsTreeMapVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "treeMapGroupItemsLimitConfiguration":
            suggest = "tree_map_group_items_limit_configuration"
        elif key == "treeMapSorts":
            suggest = "tree_map_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsTreeMapVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsTreeMapVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsTreeMapVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tree_map_group_items_limit_configuration: Optional['outputs.ItemsLimitConfiguration'] = None,
                 tree_map_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if tree_map_group_items_limit_configuration is not None:
            pulumi.set(__self__, "tree_map_group_items_limit_configuration", tree_map_group_items_limit_configuration)
        if tree_map_sorts is not None:
            pulumi.set(__self__, "tree_map_sorts", tree_map_sorts)

    @property
    @pulumi.getter(name="treeMapGroupItemsLimitConfiguration")
    def tree_map_group_items_limit_configuration(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "tree_map_group_items_limit_configuration")

    @property
    @pulumi.getter(name="treeMapSorts")
    def tree_map_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "tree_map_sorts")


@pulumi.output_type
class VisualsWaterfallVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWaterfallVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWaterfallVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWaterfallVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsWaterfallVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsWaterfallVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsWaterfallVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryAxisDisplayOptions":
            suggest = "category_axis_display_options"
        elif key == "categoryAxisLabelOptions":
            suggest = "category_axis_label_options"
        elif key == "dataLabels":
            suggest = "data_labels"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "primaryYAxisDisplayOptions":
            suggest = "primary_y_axis_display_options"
        elif key == "primaryYAxisLabelOptions":
            suggest = "primary_y_axis_label_options"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "visualPalette":
            suggest = "visual_palette"
        elif key == "waterfallChartOptions":
            suggest = "waterfall_chart_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWaterfallVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWaterfallVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWaterfallVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_axis_display_options: Optional['outputs.AxisDisplayOptions'] = None,
                 category_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 data_labels: Optional['outputs.DataLabelsOptions'] = None,
                 field_wells: Optional['outputs.VisualsWaterfallVisualChartConfigurationFieldWells'] = None,
                 legend: Optional['outputs.LegendOptions'] = None,
                 primary_y_axis_display_options: Optional['outputs.AxisDisplayOptions'] = None,
                 primary_y_axis_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 sort_configuration: Optional['outputs.VisualsWaterfallVisualChartConfigurationSortConfiguration'] = None,
                 visual_palette: Optional['outputs.VisualPalette'] = None,
                 waterfall_chart_options: Optional['outputs.VisualsWaterfallVisualChartConfigurationWaterfallChartOptions'] = None):
        if category_axis_display_options is not None:
            pulumi.set(__self__, "category_axis_display_options", category_axis_display_options)
        if category_axis_label_options is not None:
            pulumi.set(__self__, "category_axis_label_options", category_axis_label_options)
        if data_labels is not None:
            pulumi.set(__self__, "data_labels", data_labels)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if primary_y_axis_display_options is not None:
            pulumi.set(__self__, "primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            pulumi.set(__self__, "primary_y_axis_label_options", primary_y_axis_label_options)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if visual_palette is not None:
            pulumi.set(__self__, "visual_palette", visual_palette)
        if waterfall_chart_options is not None:
            pulumi.set(__self__, "waterfall_chart_options", waterfall_chart_options)

    @property
    @pulumi.getter(name="categoryAxisDisplayOptions")
    def category_axis_display_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "category_axis_display_options")

    @property
    @pulumi.getter(name="categoryAxisLabelOptions")
    def category_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "category_axis_label_options")

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional['outputs.DataLabelsOptions']:
        return pulumi.get(self, "data_labels")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsWaterfallVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter
    def legend(self) -> Optional['outputs.LegendOptions']:
        return pulumi.get(self, "legend")

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional['outputs.AxisDisplayOptions']:
        return pulumi.get(self, "primary_y_axis_display_options")

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "primary_y_axis_label_options")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsWaterfallVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional['outputs.VisualPalette']:
        return pulumi.get(self, "visual_palette")

    @property
    @pulumi.getter(name="waterfallChartOptions")
    def waterfall_chart_options(self) -> Optional['outputs.VisualsWaterfallVisualChartConfigurationWaterfallChartOptions']:
        return pulumi.get(self, "waterfall_chart_options")


@pulumi.output_type
class VisualsWaterfallVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waterfallChartAggregatedFieldWells":
            suggest = "waterfall_chart_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWaterfallVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWaterfallVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWaterfallVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 waterfall_chart_aggregated_field_wells: Optional['outputs.VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWells'] = None):
        if waterfall_chart_aggregated_field_wells is not None:
            pulumi.set(__self__, "waterfall_chart_aggregated_field_wells", waterfall_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="waterfallChartAggregatedFieldWells")
    def waterfall_chart_aggregated_field_wells(self) -> Optional['outputs.VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWells']:
        return pulumi.get(self, "waterfall_chart_aggregated_field_wells")


@pulumi.output_type
class VisualsWaterfallVisualChartConfigurationFieldWellsWaterfallChartAggregatedFieldWells(dict):
    def __init__(__self__, *,
                 breakdowns: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 categories: Optional[Sequence['outputs.DimensionFieldSchema']] = None,
                 values: Optional[Sequence['outputs.MeasureFieldSchema']] = None):
        if breakdowns is not None:
            pulumi.set(__self__, "breakdowns", breakdowns)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def breakdowns(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "breakdowns")

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence['outputs.DimensionFieldSchema']]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.MeasureFieldSchema']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class VisualsWaterfallVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "breakdownItemsLimit":
            suggest = "breakdown_items_limit"
        elif key == "categorySorts":
            suggest = "category_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWaterfallVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWaterfallVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWaterfallVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 breakdown_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 category_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if breakdown_items_limit is not None:
            pulumi.set(__self__, "breakdown_items_limit", breakdown_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)

    @property
    @pulumi.getter(name="breakdownItemsLimit")
    def breakdown_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "breakdown_items_limit")

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "category_sorts")


@pulumi.output_type
class VisualsWaterfallVisualChartConfigurationWaterfallChartOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalBarLabel":
            suggest = "total_bar_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWaterfallVisualChartConfigurationWaterfallChartOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWaterfallVisualChartConfigurationWaterfallChartOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWaterfallVisualChartConfigurationWaterfallChartOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 total_bar_label: Optional[str] = None):
        if total_bar_label is not None:
            pulumi.set(__self__, "total_bar_label", total_bar_label)

    @property
    @pulumi.getter(name="totalBarLabel")
    def total_bar_label(self) -> Optional[str]:
        return pulumi.get(self, "total_bar_label")


@pulumi.output_type
class VisualsWordCloudVisual(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "visualId":
            suggest = "visual_id"
        elif key == "chartConfiguration":
            suggest = "chart_configuration"
        elif key == "columnHierarchies":
            suggest = "column_hierarchies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWordCloudVisual. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWordCloudVisual.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWordCloudVisual.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 visual_id: str,
                 actions: Optional[Sequence['outputs.VisualCustomActions']] = None,
                 chart_configuration: Optional['outputs.VisualsWordCloudVisualChartConfiguration'] = None,
                 column_hierarchies: Optional[Sequence['outputs.ColumnHierarchies']] = None,
                 subtitle: Optional['outputs.Subtitle'] = None,
                 title: Optional['outputs.Subtitle'] = None):
        """
        :param Sequence['VisualCustomActionsArgs'] actions: List of IAM actions to grant or revoke permissions on.
        """
        pulumi.set(__self__, "visual_id", visual_id)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if chart_configuration is not None:
            pulumi.set(__self__, "chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            pulumi.set(__self__, "column_hierarchies", column_hierarchies)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> str:
        return pulumi.get(self, "visual_id")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.VisualCustomActions']]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional['outputs.VisualsWordCloudVisualChartConfiguration']:
        return pulumi.get(self, "chart_configuration")

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[Sequence['outputs.ColumnHierarchies']]:
        return pulumi.get(self, "column_hierarchies")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def title(self) -> Optional['outputs.Subtitle']:
        return pulumi.get(self, "title")


@pulumi.output_type
class VisualsWordCloudVisualChartConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryLabelOptions":
            suggest = "category_label_options"
        elif key == "fieldWells":
            suggest = "field_wells"
        elif key == "sortConfiguration":
            suggest = "sort_configuration"
        elif key == "wordCloudOptions":
            suggest = "word_cloud_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWordCloudVisualChartConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWordCloudVisualChartConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWordCloudVisualChartConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_label_options: Optional['outputs.ChartAxisLabelOptions'] = None,
                 field_wells: Optional['outputs.VisualsWordCloudVisualChartConfigurationFieldWells'] = None,
                 sort_configuration: Optional['outputs.VisualsWordCloudVisualChartConfigurationSortConfiguration'] = None,
                 word_cloud_options: Optional['outputs.VisualsWordCloudVisualChartConfigurationWordCloudOptions'] = None):
        if category_label_options is not None:
            pulumi.set(__self__, "category_label_options", category_label_options)
        if field_wells is not None:
            pulumi.set(__self__, "field_wells", field_wells)
        if sort_configuration is not None:
            pulumi.set(__self__, "sort_configuration", sort_configuration)
        if word_cloud_options is not None:
            pulumi.set(__self__, "word_cloud_options", word_cloud_options)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional['outputs.ChartAxisLabelOptions']:
        return pulumi.get(self, "category_label_options")

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional['outputs.VisualsWordCloudVisualChartConfigurationFieldWells']:
        return pulumi.get(self, "field_wells")

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional['outputs.VisualsWordCloudVisualChartConfigurationSortConfiguration']:
        return pulumi.get(self, "sort_configuration")

    @property
    @pulumi.getter(name="wordCloudOptions")
    def word_cloud_options(self) -> Optional['outputs.VisualsWordCloudVisualChartConfigurationWordCloudOptions']:
        return pulumi.get(self, "word_cloud_options")


@pulumi.output_type
class VisualsWordCloudVisualChartConfigurationFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wordCloudAggregatedFieldWells":
            suggest = "word_cloud_aggregated_field_wells"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWordCloudVisualChartConfigurationFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 word_cloud_aggregated_field_wells: Optional['outputs.VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWells'] = None):
        if word_cloud_aggregated_field_wells is not None:
            pulumi.set(__self__, "word_cloud_aggregated_field_wells", word_cloud_aggregated_field_wells)

    @property
    @pulumi.getter(name="wordCloudAggregatedFieldWells")
    def word_cloud_aggregated_field_wells(self) -> Optional['outputs.VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWells']:
        return pulumi.get(self, "word_cloud_aggregated_field_wells")


@pulumi.output_type
class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWells(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupBies":
            suggest = "group_bies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWells. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWells.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWells.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_bies: Optional[Sequence['outputs.VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupBy']] = None,
                 size: Optional['outputs.MeasureFieldSchema2'] = None):
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[Sequence['outputs.VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupBy']]:
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter
    def size(self) -> Optional['outputs.MeasureFieldSchema2']:
        return pulumi.get(self, "size")


@pulumi.output_type
class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupBy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoricalDimensionField":
            suggest = "categorical_dimension_field"
        elif key == "dateDimensionField":
            suggest = "date_dimension_field"
        elif key == "numericalDimensionField":
            suggest = "numerical_dimension_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupBy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupBy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupBy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categorical_dimension_field: Optional['outputs.VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionField'] = None,
                 date_dimension_field: Optional['outputs.VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionField'] = None,
                 numerical_dimension_field: Optional['outputs.VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionField'] = None):
        if categorical_dimension_field is not None:
            pulumi.set(__self__, "categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            pulumi.set(__self__, "date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            pulumi.set(__self__, "numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional['outputs.VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionField']:
        return pulumi.get(self, "categorical_dimension_field")

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional['outputs.VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionField']:
        return pulumi.get(self, "date_dimension_field")

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional['outputs.VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionField']:
        return pulumi.get(self, "numerical_dimension_field")


@pulumi.output_type
class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByCategoricalDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 format_configuration: Optional['outputs.StringFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.StringFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "dateGranularity":
            suggest = "date_granularity"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByDateDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 date_granularity: Optional[str] = None,
                 format_configuration: Optional['outputs.DateTimeFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if date_granularity is not None:
            pulumi.set(__self__, "date_granularity", date_granularity)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[str]:
        return pulumi.get(self, "date_granularity")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.DateTimeFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldId":
            suggest = "field_id"
        elif key == "formatConfiguration":
            suggest = "format_configuration"
        elif key == "hierarchyId":
            suggest = "hierarchy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWordCloudVisualChartConfigurationFieldWellsWordCloudAggregatedFieldWellsGroupByNumericalDimensionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.Column',
                 field_id: str,
                 format_configuration: Optional['outputs.NumberFormatConfiguration'] = None,
                 hierarchy_id: Optional[str] = None):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "field_id", field_id)
        if format_configuration is not None:
            pulumi.set(__self__, "format_configuration", format_configuration)
        if hierarchy_id is not None:
            pulumi.set(__self__, "hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.Column':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional['outputs.NumberFormatConfiguration']:
        return pulumi.get(self, "format_configuration")

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy_id")


@pulumi.output_type
class VisualsWordCloudVisualChartConfigurationSortConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "categoryItemsLimit":
            suggest = "category_items_limit"
        elif key == "categorySorts":
            suggest = "category_sorts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWordCloudVisualChartConfigurationSortConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWordCloudVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWordCloudVisualChartConfigurationSortConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category_items_limit: Optional['outputs.ItemsLimitConfiguration'] = None,
                 category_sorts: Optional[Sequence['outputs.FieldSortOptions']] = None):
        if category_items_limit is not None:
            pulumi.set(__self__, "category_items_limit", category_items_limit)
        if category_sorts is not None:
            pulumi.set(__self__, "category_sorts", category_sorts)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional['outputs.ItemsLimitConfiguration']:
        return pulumi.get(self, "category_items_limit")

    @property
    @pulumi.getter(name="categorySorts")
    def category_sorts(self) -> Optional[Sequence['outputs.FieldSortOptions']]:
        return pulumi.get(self, "category_sorts")


@pulumi.output_type
class VisualsWordCloudVisualChartConfigurationWordCloudOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudLayout":
            suggest = "cloud_layout"
        elif key == "maximumStringLength":
            suggest = "maximum_string_length"
        elif key == "wordCasing":
            suggest = "word_casing"
        elif key == "wordOrientation":
            suggest = "word_orientation"
        elif key == "wordPadding":
            suggest = "word_padding"
        elif key == "wordScaling":
            suggest = "word_scaling"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VisualsWordCloudVisualChartConfigurationWordCloudOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VisualsWordCloudVisualChartConfigurationWordCloudOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VisualsWordCloudVisualChartConfigurationWordCloudOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_layout: Optional[str] = None,
                 maximum_string_length: Optional[int] = None,
                 word_casing: Optional[str] = None,
                 word_orientation: Optional[str] = None,
                 word_padding: Optional[str] = None,
                 word_scaling: Optional[str] = None):
        if cloud_layout is not None:
            pulumi.set(__self__, "cloud_layout", cloud_layout)
        if maximum_string_length is not None:
            pulumi.set(__self__, "maximum_string_length", maximum_string_length)
        if word_casing is not None:
            pulumi.set(__self__, "word_casing", word_casing)
        if word_orientation is not None:
            pulumi.set(__self__, "word_orientation", word_orientation)
        if word_padding is not None:
            pulumi.set(__self__, "word_padding", word_padding)
        if word_scaling is not None:
            pulumi.set(__self__, "word_scaling", word_scaling)

    @property
    @pulumi.getter(name="cloudLayout")
    def cloud_layout(self) -> Optional[str]:
        return pulumi.get(self, "cloud_layout")

    @property
    @pulumi.getter(name="maximumStringLength")
    def maximum_string_length(self) -> Optional[int]:
        return pulumi.get(self, "maximum_string_length")

    @property
    @pulumi.getter(name="wordCasing")
    def word_casing(self) -> Optional[str]:
        return pulumi.get(self, "word_casing")

    @property
    @pulumi.getter(name="wordOrientation")
    def word_orientation(self) -> Optional[str]:
        return pulumi.get(self, "word_orientation")

    @property
    @pulumi.getter(name="wordPadding")
    def word_padding(self) -> Optional[str]:
        return pulumi.get(self, "word_padding")

    @property
    @pulumi.getter(name="wordScaling")
    def word_scaling(self) -> Optional[str]:
        return pulumi.get(self, "word_scaling")


@pulumi.output_type
class VpcConnectionTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class GetDataSetColumnGroupResult(dict):
    def __init__(__self__, *,
                 geo_spatial_column_groups: Sequence['outputs.GetDataSetColumnGroupGeoSpatialColumnGroupResult']):
        pulumi.set(__self__, "geo_spatial_column_groups", geo_spatial_column_groups)

    @property
    @pulumi.getter(name="geoSpatialColumnGroups")
    def geo_spatial_column_groups(self) -> Sequence['outputs.GetDataSetColumnGroupGeoSpatialColumnGroupResult']:
        return pulumi.get(self, "geo_spatial_column_groups")


@pulumi.output_type
class GetDataSetColumnGroupGeoSpatialColumnGroupResult(dict):
    def __init__(__self__, *,
                 columns: Sequence[str],
                 country_code: str,
                 name: str):
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def columns(self) -> Sequence[str]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDataSetColumnLevelPermissionRuleResult(dict):
    def __init__(__self__, *,
                 column_names: Sequence[str],
                 principals: Sequence[str]):
        pulumi.set(__self__, "column_names", column_names)
        pulumi.set(__self__, "principals", principals)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Sequence[str]:
        return pulumi.get(self, "column_names")

    @property
    @pulumi.getter
    def principals(self) -> Sequence[str]:
        return pulumi.get(self, "principals")


@pulumi.output_type
class GetDataSetDataSetUsageConfigurationResult(dict):
    def __init__(__self__, *,
                 disable_use_as_direct_query_source: bool,
                 disable_use_as_imported_source: bool):
        pulumi.set(__self__, "disable_use_as_direct_query_source", disable_use_as_direct_query_source)
        pulumi.set(__self__, "disable_use_as_imported_source", disable_use_as_imported_source)

    @property
    @pulumi.getter(name="disableUseAsDirectQuerySource")
    def disable_use_as_direct_query_source(self) -> bool:
        return pulumi.get(self, "disable_use_as_direct_query_source")

    @property
    @pulumi.getter(name="disableUseAsImportedSource")
    def disable_use_as_imported_source(self) -> bool:
        return pulumi.get(self, "disable_use_as_imported_source")


@pulumi.output_type
class GetDataSetFieldFolderResult(dict):
    def __init__(__self__, *,
                 columns: Sequence[str],
                 description: str,
                 field_folders_id: str):
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "field_folders_id", field_folders_id)

    @property
    @pulumi.getter
    def columns(self) -> Sequence[str]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fieldFoldersId")
    def field_folders_id(self) -> str:
        return pulumi.get(self, "field_folders_id")


@pulumi.output_type
class GetDataSetLogicalTableMapResult(dict):
    def __init__(__self__, *,
                 alias: str,
                 data_transforms: Sequence['outputs.GetDataSetLogicalTableMapDataTransformResult'],
                 logical_table_map_id: str,
                 sources: Sequence['outputs.GetDataSetLogicalTableMapSourceResult']):
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "data_transforms", data_transforms)
        pulumi.set(__self__, "logical_table_map_id", logical_table_map_id)
        pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def alias(self) -> str:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="dataTransforms")
    def data_transforms(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformResult']:
        return pulumi.get(self, "data_transforms")

    @property
    @pulumi.getter(name="logicalTableMapId")
    def logical_table_map_id(self) -> str:
        return pulumi.get(self, "logical_table_map_id")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetDataSetLogicalTableMapSourceResult']:
        return pulumi.get(self, "sources")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformResult(dict):
    def __init__(__self__, *,
                 cast_column_type_operations: Sequence['outputs.GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationResult'],
                 create_columns_operations: Sequence['outputs.GetDataSetLogicalTableMapDataTransformCreateColumnsOperationResult'],
                 filter_operations: Sequence['outputs.GetDataSetLogicalTableMapDataTransformFilterOperationResult'],
                 project_operations: Sequence['outputs.GetDataSetLogicalTableMapDataTransformProjectOperationResult'],
                 rename_column_operations: Sequence['outputs.GetDataSetLogicalTableMapDataTransformRenameColumnOperationResult'],
                 tag_column_operations: Sequence['outputs.GetDataSetLogicalTableMapDataTransformTagColumnOperationResult'],
                 untag_column_operations: Sequence['outputs.GetDataSetLogicalTableMapDataTransformUntagColumnOperationResult']):
        pulumi.set(__self__, "cast_column_type_operations", cast_column_type_operations)
        pulumi.set(__self__, "create_columns_operations", create_columns_operations)
        pulumi.set(__self__, "filter_operations", filter_operations)
        pulumi.set(__self__, "project_operations", project_operations)
        pulumi.set(__self__, "rename_column_operations", rename_column_operations)
        pulumi.set(__self__, "tag_column_operations", tag_column_operations)
        pulumi.set(__self__, "untag_column_operations", untag_column_operations)

    @property
    @pulumi.getter(name="castColumnTypeOperations")
    def cast_column_type_operations(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationResult']:
        return pulumi.get(self, "cast_column_type_operations")

    @property
    @pulumi.getter(name="createColumnsOperations")
    def create_columns_operations(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformCreateColumnsOperationResult']:
        return pulumi.get(self, "create_columns_operations")

    @property
    @pulumi.getter(name="filterOperations")
    def filter_operations(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformFilterOperationResult']:
        return pulumi.get(self, "filter_operations")

    @property
    @pulumi.getter(name="projectOperations")
    def project_operations(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformProjectOperationResult']:
        return pulumi.get(self, "project_operations")

    @property
    @pulumi.getter(name="renameColumnOperations")
    def rename_column_operations(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformRenameColumnOperationResult']:
        return pulumi.get(self, "rename_column_operations")

    @property
    @pulumi.getter(name="tagColumnOperations")
    def tag_column_operations(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformTagColumnOperationResult']:
        return pulumi.get(self, "tag_column_operations")

    @property
    @pulumi.getter(name="untagColumnOperations")
    def untag_column_operations(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformUntagColumnOperationResult']:
        return pulumi.get(self, "untag_column_operations")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformCastColumnTypeOperationResult(dict):
    def __init__(__self__, *,
                 column_name: str,
                 format: str,
                 new_column_type: str):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "new_column_type", new_column_type)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="newColumnType")
    def new_column_type(self) -> str:
        return pulumi.get(self, "new_column_type")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformCreateColumnsOperationResult(dict):
    def __init__(__self__, *,
                 columns: Sequence['outputs.GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnResult']):
        pulumi.set(__self__, "columns", columns)

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnResult']:
        return pulumi.get(self, "columns")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformCreateColumnsOperationColumnResult(dict):
    def __init__(__self__, *,
                 column_id: str,
                 column_name: str,
                 expression: str):
        pulumi.set(__self__, "column_id", column_id)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="columnId")
    def column_id(self) -> str:
        return pulumi.get(self, "column_id")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformFilterOperationResult(dict):
    def __init__(__self__, *,
                 condition_expression: str):
        pulumi.set(__self__, "condition_expression", condition_expression)

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> str:
        return pulumi.get(self, "condition_expression")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformProjectOperationResult(dict):
    def __init__(__self__, *,
                 projected_columns: Sequence[str]):
        pulumi.set(__self__, "projected_columns", projected_columns)

    @property
    @pulumi.getter(name="projectedColumns")
    def projected_columns(self) -> Sequence[str]:
        return pulumi.get(self, "projected_columns")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformRenameColumnOperationResult(dict):
    def __init__(__self__, *,
                 column_name: str,
                 new_column_name: str):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "new_column_name", new_column_name)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="newColumnName")
    def new_column_name(self) -> str:
        return pulumi.get(self, "new_column_name")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformTagColumnOperationResult(dict):
    def __init__(__self__, *,
                 column_name: str,
                 tags: Sequence['outputs.GetDataSetLogicalTableMapDataTransformTagColumnOperationTagResult']):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformTagColumnOperationTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformTagColumnOperationTagResult(dict):
    def __init__(__self__, *,
                 column_descriptions: Sequence['outputs.GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionResult'],
                 column_geographic_role: str):
        pulumi.set(__self__, "column_descriptions", column_descriptions)
        pulumi.set(__self__, "column_geographic_role", column_geographic_role)

    @property
    @pulumi.getter(name="columnDescriptions")
    def column_descriptions(self) -> Sequence['outputs.GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionResult']:
        return pulumi.get(self, "column_descriptions")

    @property
    @pulumi.getter(name="columnGeographicRole")
    def column_geographic_role(self) -> str:
        return pulumi.get(self, "column_geographic_role")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformTagColumnOperationTagColumnDescriptionResult(dict):
    def __init__(__self__, *,
                 text: str):
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")


@pulumi.output_type
class GetDataSetLogicalTableMapDataTransformUntagColumnOperationResult(dict):
    def __init__(__self__, *,
                 column_name: str,
                 tag_names: Sequence[str]):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "tag_names", tag_names)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="tagNames")
    def tag_names(self) -> Sequence[str]:
        return pulumi.get(self, "tag_names")


@pulumi.output_type
class GetDataSetLogicalTableMapSourceResult(dict):
    def __init__(__self__, *,
                 data_set_arn: str,
                 join_instructions: Sequence['outputs.GetDataSetLogicalTableMapSourceJoinInstructionResult'],
                 physical_table_id: str):
        pulumi.set(__self__, "data_set_arn", data_set_arn)
        pulumi.set(__self__, "join_instructions", join_instructions)
        pulumi.set(__self__, "physical_table_id", physical_table_id)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> str:
        return pulumi.get(self, "data_set_arn")

    @property
    @pulumi.getter(name="joinInstructions")
    def join_instructions(self) -> Sequence['outputs.GetDataSetLogicalTableMapSourceJoinInstructionResult']:
        return pulumi.get(self, "join_instructions")

    @property
    @pulumi.getter(name="physicalTableId")
    def physical_table_id(self) -> str:
        return pulumi.get(self, "physical_table_id")


@pulumi.output_type
class GetDataSetLogicalTableMapSourceJoinInstructionResult(dict):
    def __init__(__self__, *,
                 left_join_key_properties: Sequence['outputs.GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyResult'],
                 left_operand: str,
                 on_clause: str,
                 right_join_key_properties: Sequence['outputs.GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyResult'],
                 right_operand: str,
                 type: str):
        pulumi.set(__self__, "left_join_key_properties", left_join_key_properties)
        pulumi.set(__self__, "left_operand", left_operand)
        pulumi.set(__self__, "on_clause", on_clause)
        pulumi.set(__self__, "right_join_key_properties", right_join_key_properties)
        pulumi.set(__self__, "right_operand", right_operand)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="leftJoinKeyProperties")
    def left_join_key_properties(self) -> Sequence['outputs.GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyResult']:
        return pulumi.get(self, "left_join_key_properties")

    @property
    @pulumi.getter(name="leftOperand")
    def left_operand(self) -> str:
        return pulumi.get(self, "left_operand")

    @property
    @pulumi.getter(name="onClause")
    def on_clause(self) -> str:
        return pulumi.get(self, "on_clause")

    @property
    @pulumi.getter(name="rightJoinKeyProperties")
    def right_join_key_properties(self) -> Sequence['outputs.GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyResult']:
        return pulumi.get(self, "right_join_key_properties")

    @property
    @pulumi.getter(name="rightOperand")
    def right_operand(self) -> str:
        return pulumi.get(self, "right_operand")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataSetLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertyResult(dict):
    def __init__(__self__, *,
                 unique_key: bool):
        pulumi.set(__self__, "unique_key", unique_key)

    @property
    @pulumi.getter(name="uniqueKey")
    def unique_key(self) -> bool:
        return pulumi.get(self, "unique_key")


@pulumi.output_type
class GetDataSetLogicalTableMapSourceJoinInstructionRightJoinKeyPropertyResult(dict):
    def __init__(__self__, *,
                 unique_key: bool):
        pulumi.set(__self__, "unique_key", unique_key)

    @property
    @pulumi.getter(name="uniqueKey")
    def unique_key(self) -> bool:
        return pulumi.get(self, "unique_key")


@pulumi.output_type
class GetDataSetPermissionResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 principal: str):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def principal(self) -> str:
        return pulumi.get(self, "principal")


@pulumi.output_type
class GetDataSetPhysicalTableMapResult(dict):
    def __init__(__self__, *,
                 custom_sqls: Sequence['outputs.GetDataSetPhysicalTableMapCustomSqlResult'],
                 physical_table_map_id: str,
                 relational_tables: Sequence['outputs.GetDataSetPhysicalTableMapRelationalTableResult'],
                 s3_sources: Sequence['outputs.GetDataSetPhysicalTableMapS3SourceResult']):
        pulumi.set(__self__, "custom_sqls", custom_sqls)
        pulumi.set(__self__, "physical_table_map_id", physical_table_map_id)
        pulumi.set(__self__, "relational_tables", relational_tables)
        pulumi.set(__self__, "s3_sources", s3_sources)

    @property
    @pulumi.getter(name="customSqls")
    def custom_sqls(self) -> Sequence['outputs.GetDataSetPhysicalTableMapCustomSqlResult']:
        return pulumi.get(self, "custom_sqls")

    @property
    @pulumi.getter(name="physicalTableMapId")
    def physical_table_map_id(self) -> str:
        return pulumi.get(self, "physical_table_map_id")

    @property
    @pulumi.getter(name="relationalTables")
    def relational_tables(self) -> Sequence['outputs.GetDataSetPhysicalTableMapRelationalTableResult']:
        return pulumi.get(self, "relational_tables")

    @property
    @pulumi.getter(name="s3Sources")
    def s3_sources(self) -> Sequence['outputs.GetDataSetPhysicalTableMapS3SourceResult']:
        return pulumi.get(self, "s3_sources")


@pulumi.output_type
class GetDataSetPhysicalTableMapCustomSqlResult(dict):
    def __init__(__self__, *,
                 columns: Sequence['outputs.GetDataSetPhysicalTableMapCustomSqlColumnResult'],
                 data_source_arn: str,
                 name: str,
                 sql_query: str):
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "data_source_arn", data_source_arn)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sql_query", sql_query)

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.GetDataSetPhysicalTableMapCustomSqlColumnResult']:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter(name="dataSourceArn")
    def data_source_arn(self) -> str:
        return pulumi.get(self, "data_source_arn")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sqlQuery")
    def sql_query(self) -> str:
        return pulumi.get(self, "sql_query")


@pulumi.output_type
class GetDataSetPhysicalTableMapCustomSqlColumnResult(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataSetPhysicalTableMapRelationalTableResult(dict):
    def __init__(__self__, *,
                 catalog: str,
                 data_source_arn: str,
                 input_columns: Sequence['outputs.GetDataSetPhysicalTableMapRelationalTableInputColumnResult'],
                 name: str,
                 schema: str):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "data_source_arn", data_source_arn)
        pulumi.set(__self__, "input_columns", input_columns)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="dataSourceArn")
    def data_source_arn(self) -> str:
        return pulumi.get(self, "data_source_arn")

    @property
    @pulumi.getter(name="inputColumns")
    def input_columns(self) -> Sequence['outputs.GetDataSetPhysicalTableMapRelationalTableInputColumnResult']:
        return pulumi.get(self, "input_columns")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetDataSetPhysicalTableMapRelationalTableInputColumnResult(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataSetPhysicalTableMapS3SourceResult(dict):
    def __init__(__self__, *,
                 data_source_arn: str,
                 input_columns: Sequence['outputs.GetDataSetPhysicalTableMapS3SourceInputColumnResult'],
                 upload_settings: Sequence['outputs.GetDataSetPhysicalTableMapS3SourceUploadSettingResult']):
        pulumi.set(__self__, "data_source_arn", data_source_arn)
        pulumi.set(__self__, "input_columns", input_columns)
        pulumi.set(__self__, "upload_settings", upload_settings)

    @property
    @pulumi.getter(name="dataSourceArn")
    def data_source_arn(self) -> str:
        return pulumi.get(self, "data_source_arn")

    @property
    @pulumi.getter(name="inputColumns")
    def input_columns(self) -> Sequence['outputs.GetDataSetPhysicalTableMapS3SourceInputColumnResult']:
        return pulumi.get(self, "input_columns")

    @property
    @pulumi.getter(name="uploadSettings")
    def upload_settings(self) -> Sequence['outputs.GetDataSetPhysicalTableMapS3SourceUploadSettingResult']:
        return pulumi.get(self, "upload_settings")


@pulumi.output_type
class GetDataSetPhysicalTableMapS3SourceInputColumnResult(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataSetPhysicalTableMapS3SourceUploadSettingResult(dict):
    def __init__(__self__, *,
                 contains_header: bool,
                 delimiter: str,
                 format: str,
                 start_from_row: int,
                 text_qualifier: str):
        pulumi.set(__self__, "contains_header", contains_header)
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "start_from_row", start_from_row)
        pulumi.set(__self__, "text_qualifier", text_qualifier)

    @property
    @pulumi.getter(name="containsHeader")
    def contains_header(self) -> bool:
        return pulumi.get(self, "contains_header")

    @property
    @pulumi.getter
    def delimiter(self) -> str:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="startFromRow")
    def start_from_row(self) -> int:
        return pulumi.get(self, "start_from_row")

    @property
    @pulumi.getter(name="textQualifier")
    def text_qualifier(self) -> str:
        return pulumi.get(self, "text_qualifier")


@pulumi.output_type
class GetDataSetRowLevelPermissionDataSetResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 format_version: str,
                 namespace: str,
                 permission_policy: str,
                 status: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "format_version", format_version)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "permission_policy", permission_policy)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="formatVersion")
    def format_version(self) -> str:
        return pulumi.get(self, "format_version")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="permissionPolicy")
    def permission_policy(self) -> str:
        return pulumi.get(self, "permission_policy")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDataSetRowLevelPermissionTagConfigurationResult(dict):
    def __init__(__self__, *,
                 status: str,
                 tag_rules: Sequence['outputs.GetDataSetRowLevelPermissionTagConfigurationTagRuleResult']):
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag_rules", tag_rules)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tagRules")
    def tag_rules(self) -> Sequence['outputs.GetDataSetRowLevelPermissionTagConfigurationTagRuleResult']:
        return pulumi.get(self, "tag_rules")


@pulumi.output_type
class GetDataSetRowLevelPermissionTagConfigurationTagRuleResult(dict):
    def __init__(__self__, *,
                 column_name: str,
                 match_all_value: str,
                 tag_key: str,
                 tag_multi_value_delimiter: str):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "match_all_value", match_all_value)
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_multi_value_delimiter", tag_multi_value_delimiter)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="matchAllValue")
    def match_all_value(self) -> str:
        return pulumi.get(self, "match_all_value")

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagMultiValueDelimiter")
    def tag_multi_value_delimiter(self) -> str:
        return pulumi.get(self, "tag_multi_value_delimiter")


@pulumi.output_type
class GetThemeConfigurationResult(dict):
    def __init__(__self__, *,
                 data_color_palettes: Sequence['outputs.GetThemeConfigurationDataColorPaletteResult'],
                 sheets: Sequence['outputs.GetThemeConfigurationSheetResult'],
                 typographies: Sequence['outputs.GetThemeConfigurationTypographyResult'],
                 ui_color_palettes: Sequence['outputs.GetThemeConfigurationUiColorPaletteResult']):
        """
        :param Sequence['GetThemeConfigurationDataColorPaletteArgs'] data_color_palettes: Color properties that apply to chart data colors. See data_color_palette.
        :param Sequence['GetThemeConfigurationSheetArgs'] sheets: Display options related to sheets. See sheet.
        :param Sequence['GetThemeConfigurationTypographyArgs'] typographies: Determines the typography options. See typography.
        :param Sequence['GetThemeConfigurationUiColorPaletteArgs'] ui_color_palettes: Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
        """
        pulumi.set(__self__, "data_color_palettes", data_color_palettes)
        pulumi.set(__self__, "sheets", sheets)
        pulumi.set(__self__, "typographies", typographies)
        pulumi.set(__self__, "ui_color_palettes", ui_color_palettes)

    @property
    @pulumi.getter(name="dataColorPalettes")
    def data_color_palettes(self) -> Sequence['outputs.GetThemeConfigurationDataColorPaletteResult']:
        """
        Color properties that apply to chart data colors. See data_color_palette.
        """
        return pulumi.get(self, "data_color_palettes")

    @property
    @pulumi.getter
    def sheets(self) -> Sequence['outputs.GetThemeConfigurationSheetResult']:
        """
        Display options related to sheets. See sheet.
        """
        return pulumi.get(self, "sheets")

    @property
    @pulumi.getter
    def typographies(self) -> Sequence['outputs.GetThemeConfigurationTypographyResult']:
        """
        Determines the typography options. See typography.
        """
        return pulumi.get(self, "typographies")

    @property
    @pulumi.getter(name="uiColorPalettes")
    def ui_color_palettes(self) -> Sequence['outputs.GetThemeConfigurationUiColorPaletteResult']:
        """
        Color properties that apply to the UI and to charts, excluding the colors that apply to data. See ui_color_palette.
        """
        return pulumi.get(self, "ui_color_palettes")


@pulumi.output_type
class GetThemeConfigurationDataColorPaletteResult(dict):
    def __init__(__self__, *,
                 colors: Sequence[str],
                 empty_fill_color: str,
                 min_max_gradients: Sequence[str]):
        """
        :param Sequence[str] colors: List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
        :param str empty_fill_color: The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
        :param Sequence[str] min_max_gradients: The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
        """
        pulumi.set(__self__, "colors", colors)
        pulumi.set(__self__, "empty_fill_color", empty_fill_color)
        pulumi.set(__self__, "min_max_gradients", min_max_gradients)

    @property
    @pulumi.getter
    def colors(self) -> Sequence[str]:
        """
        List of hexadecimal codes for the colors. Minimum of 8 items and maximum of 20 items.
        """
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="emptyFillColor")
    def empty_fill_color(self) -> str:
        """
        The hexadecimal code of a color that applies to charts where a lack of data is highlighted.
        """
        return pulumi.get(self, "empty_fill_color")

    @property
    @pulumi.getter(name="minMaxGradients")
    def min_max_gradients(self) -> Sequence[str]:
        """
        The minimum and maximum hexadecimal codes that describe a color gradient. List of exactly 2 items.
        """
        return pulumi.get(self, "min_max_gradients")


@pulumi.output_type
class GetThemeConfigurationSheetResult(dict):
    def __init__(__self__, *,
                 tile_layouts: Sequence['outputs.GetThemeConfigurationSheetTileLayoutResult'],
                 tiles: Sequence['outputs.GetThemeConfigurationSheetTileResult']):
        """
        :param Sequence['GetThemeConfigurationSheetTileLayoutArgs'] tile_layouts: The layout options for tiles. See tile_layout.
        :param Sequence['GetThemeConfigurationSheetTileArgs'] tiles: The display options for tiles. See tile.
        """
        pulumi.set(__self__, "tile_layouts", tile_layouts)
        pulumi.set(__self__, "tiles", tiles)

    @property
    @pulumi.getter(name="tileLayouts")
    def tile_layouts(self) -> Sequence['outputs.GetThemeConfigurationSheetTileLayoutResult']:
        """
        The layout options for tiles. See tile_layout.
        """
        return pulumi.get(self, "tile_layouts")

    @property
    @pulumi.getter
    def tiles(self) -> Sequence['outputs.GetThemeConfigurationSheetTileResult']:
        """
        The display options for tiles. See tile.
        """
        return pulumi.get(self, "tiles")


@pulumi.output_type
class GetThemeConfigurationSheetTileResult(dict):
    def __init__(__self__, *,
                 borders: Sequence['outputs.GetThemeConfigurationSheetTileBorderResult']):
        """
        :param Sequence['GetThemeConfigurationSheetTileBorderArgs'] borders: The border around a tile. See border.
        """
        pulumi.set(__self__, "borders", borders)

    @property
    @pulumi.getter
    def borders(self) -> Sequence['outputs.GetThemeConfigurationSheetTileBorderResult']:
        """
        The border around a tile. See border.
        """
        return pulumi.get(self, "borders")


@pulumi.output_type
class GetThemeConfigurationSheetTileBorderResult(dict):
    def __init__(__self__, *,
                 show: bool):
        """
        :param bool show: This Boolean value controls whether to display sheet margins.
        """
        pulumi.set(__self__, "show", show)

    @property
    @pulumi.getter
    def show(self) -> bool:
        """
        This Boolean value controls whether to display sheet margins.
        """
        return pulumi.get(self, "show")


@pulumi.output_type
class GetThemeConfigurationSheetTileLayoutResult(dict):
    def __init__(__self__, *,
                 gutters: Sequence['outputs.GetThemeConfigurationSheetTileLayoutGutterResult'],
                 margins: Sequence['outputs.GetThemeConfigurationSheetTileLayoutMarginResult']):
        """
        :param Sequence['GetThemeConfigurationSheetTileLayoutGutterArgs'] gutters: The gutter settings that apply between tiles. See gutter.
        :param Sequence['GetThemeConfigurationSheetTileLayoutMarginArgs'] margins: The margin settings that apply around the outside edge of sheets. See margin.
        """
        pulumi.set(__self__, "gutters", gutters)
        pulumi.set(__self__, "margins", margins)

    @property
    @pulumi.getter
    def gutters(self) -> Sequence['outputs.GetThemeConfigurationSheetTileLayoutGutterResult']:
        """
        The gutter settings that apply between tiles. See gutter.
        """
        return pulumi.get(self, "gutters")

    @property
    @pulumi.getter
    def margins(self) -> Sequence['outputs.GetThemeConfigurationSheetTileLayoutMarginResult']:
        """
        The margin settings that apply around the outside edge of sheets. See margin.
        """
        return pulumi.get(self, "margins")


@pulumi.output_type
class GetThemeConfigurationSheetTileLayoutGutterResult(dict):
    def __init__(__self__, *,
                 show: bool):
        """
        :param bool show: This Boolean value controls whether to display sheet margins.
        """
        pulumi.set(__self__, "show", show)

    @property
    @pulumi.getter
    def show(self) -> bool:
        """
        This Boolean value controls whether to display sheet margins.
        """
        return pulumi.get(self, "show")


@pulumi.output_type
class GetThemeConfigurationSheetTileLayoutMarginResult(dict):
    def __init__(__self__, *,
                 show: bool):
        """
        :param bool show: This Boolean value controls whether to display sheet margins.
        """
        pulumi.set(__self__, "show", show)

    @property
    @pulumi.getter
    def show(self) -> bool:
        """
        This Boolean value controls whether to display sheet margins.
        """
        return pulumi.get(self, "show")


@pulumi.output_type
class GetThemeConfigurationTypographyResult(dict):
    def __init__(__self__, *,
                 font_families: Sequence['outputs.GetThemeConfigurationTypographyFontFamilyResult']):
        """
        :param Sequence['GetThemeConfigurationTypographyFontFamilyArgs'] font_families: Determines the list of font families. Maximum number of 5 items. See font_families.
        """
        pulumi.set(__self__, "font_families", font_families)

    @property
    @pulumi.getter(name="fontFamilies")
    def font_families(self) -> Sequence['outputs.GetThemeConfigurationTypographyFontFamilyResult']:
        """
        Determines the list of font families. Maximum number of 5 items. See font_families.
        """
        return pulumi.get(self, "font_families")


@pulumi.output_type
class GetThemeConfigurationTypographyFontFamilyResult(dict):
    def __init__(__self__, *,
                 font_family: str):
        """
        :param str font_family: Font family name.
        """
        pulumi.set(__self__, "font_family", font_family)

    @property
    @pulumi.getter(name="fontFamily")
    def font_family(self) -> str:
        """
        Font family name.
        """
        return pulumi.get(self, "font_family")


@pulumi.output_type
class GetThemeConfigurationUiColorPaletteResult(dict):
    def __init__(__self__, *,
                 accent: str,
                 accent_foreground: str,
                 danger: str,
                 danger_foreground: str,
                 dimension: str,
                 dimension_foreground: str,
                 measure: str,
                 measure_foreground: str,
                 primary_background: str,
                 primary_foreground: str,
                 secondary_background: str,
                 secondary_foreground: str,
                 success: str,
                 success_foreground: str,
                 warning: str,
                 warning_foreground: str):
        """
        :param str accent: Color (hexadecimal) that applies to selected states and buttons.
        :param str accent_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
        :param str danger: Color (hexadecimal) that applies to error messages.
        :param str danger_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the error color.
        :param str dimension: Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
        :param str dimension_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
        :param str measure: Color (hexadecimal) that applies to the names of fields that are identified as measures.
        :param str measure_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
        :param str primary_background: Color (hexadecimal) that applies to visuals and other high emphasis UI.
        :param str primary_foreground: Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
        :param str secondary_background: Color (hexadecimal) that applies to the sheet background and sheet controls.
        :param str secondary_foreground: Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
        :param str success: Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
        :param str success_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the success color.
        :param str warning: Color (hexadecimal) that applies to warning and informational messages.
        :param str warning_foreground: Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
        """
        pulumi.set(__self__, "accent", accent)
        pulumi.set(__self__, "accent_foreground", accent_foreground)
        pulumi.set(__self__, "danger", danger)
        pulumi.set(__self__, "danger_foreground", danger_foreground)
        pulumi.set(__self__, "dimension", dimension)
        pulumi.set(__self__, "dimension_foreground", dimension_foreground)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "measure_foreground", measure_foreground)
        pulumi.set(__self__, "primary_background", primary_background)
        pulumi.set(__self__, "primary_foreground", primary_foreground)
        pulumi.set(__self__, "secondary_background", secondary_background)
        pulumi.set(__self__, "secondary_foreground", secondary_foreground)
        pulumi.set(__self__, "success", success)
        pulumi.set(__self__, "success_foreground", success_foreground)
        pulumi.set(__self__, "warning", warning)
        pulumi.set(__self__, "warning_foreground", warning_foreground)

    @property
    @pulumi.getter
    def accent(self) -> str:
        """
        Color (hexadecimal) that applies to selected states and buttons.
        """
        return pulumi.get(self, "accent")

    @property
    @pulumi.getter(name="accentForeground")
    def accent_foreground(self) -> str:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the accent color.
        """
        return pulumi.get(self, "accent_foreground")

    @property
    @pulumi.getter
    def danger(self) -> str:
        """
        Color (hexadecimal) that applies to error messages.
        """
        return pulumi.get(self, "danger")

    @property
    @pulumi.getter(name="dangerForeground")
    def danger_foreground(self) -> str:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the error color.
        """
        return pulumi.get(self, "danger_foreground")

    @property
    @pulumi.getter
    def dimension(self) -> str:
        """
        Color (hexadecimal) that applies to the names of fields that are identified as dimensions.
        """
        return pulumi.get(self, "dimension")

    @property
    @pulumi.getter(name="dimensionForeground")
    def dimension_foreground(self) -> str:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the dimension color.
        """
        return pulumi.get(self, "dimension_foreground")

    @property
    @pulumi.getter
    def measure(self) -> str:
        """
        Color (hexadecimal) that applies to the names of fields that are identified as measures.
        """
        return pulumi.get(self, "measure")

    @property
    @pulumi.getter(name="measureForeground")
    def measure_foreground(self) -> str:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the measure color.
        """
        return pulumi.get(self, "measure_foreground")

    @property
    @pulumi.getter(name="primaryBackground")
    def primary_background(self) -> str:
        """
        Color (hexadecimal) that applies to visuals and other high emphasis UI.
        """
        return pulumi.get(self, "primary_background")

    @property
    @pulumi.getter(name="primaryForeground")
    def primary_foreground(self) -> str:
        """
        Color (hexadecimal) of text and other foreground elements that appear over the primary background regions, such as grid lines, borders, table banding, icons, and so on.
        """
        return pulumi.get(self, "primary_foreground")

    @property
    @pulumi.getter(name="secondaryBackground")
    def secondary_background(self) -> str:
        """
        Color (hexadecimal) that applies to the sheet background and sheet controls.
        """
        return pulumi.get(self, "secondary_background")

    @property
    @pulumi.getter(name="secondaryForeground")
    def secondary_foreground(self) -> str:
        """
        Color (hexadecimal) that applies to any sheet title, sheet control text, or UI that appears over the secondary background.
        """
        return pulumi.get(self, "secondary_foreground")

    @property
    @pulumi.getter
    def success(self) -> str:
        """
        Color (hexadecimal) that applies to success messages, for example the check mark for a successful download.
        """
        return pulumi.get(self, "success")

    @property
    @pulumi.getter(name="successForeground")
    def success_foreground(self) -> str:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the success color.
        """
        return pulumi.get(self, "success_foreground")

    @property
    @pulumi.getter
    def warning(self) -> str:
        """
        Color (hexadecimal) that applies to warning and informational messages.
        """
        return pulumi.get(self, "warning")

    @property
    @pulumi.getter(name="warningForeground")
    def warning_foreground(self) -> str:
        """
        Color (hexadecimal) that applies to any text or other elements that appear over the warning color.
        """
        return pulumi.get(self, "warning_foreground")


@pulumi.output_type
class GetThemePermissionResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 principal: str):
        """
        :param Sequence[str] actions: List of IAM actions to grant or revoke permissions on.
        :param str principal: ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        List of IAM actions to grant or revoke permissions on.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def principal(self) -> str:
        """
        ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.
        """
        return pulumi.get(self, "principal")


