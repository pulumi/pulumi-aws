# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GroupConfiguration',
    'GroupConfigurationParameter',
    'GroupResourceQuery',
]

@pulumi.output_type
class GroupConfiguration(dict):
    def __init__(__self__, *,
                 type: str,
                 parameters: Optional[Sequence['outputs.GroupConfigurationParameter']] = None):
        """
        :param str type: Specifies the type of group configuration item.
        :param Sequence['GroupConfigurationParameterArgs'] parameters: A collection of parameters for this group configuration item. See below for details.
        """
        GroupConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             parameters: Optional[Sequence['outputs.GroupConfigurationParameter']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("type", type)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies the type of group configuration item.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.GroupConfigurationParameter']]:
        """
        A collection of parameters for this group configuration item. See below for details.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GroupConfigurationParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: The name of the group configuration parameter.
        :param Sequence[str] values: The value or values to be used for the specified parameter.
        """
        GroupConfigurationParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the group configuration parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The value or values to be used for the specified parameter.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GroupResourceQuery(dict):
    def __init__(__self__, *,
                 query: str,
                 type: Optional[str] = None):
        """
        :param str query: The resource query as a JSON string.
        :param str type: The type of the resource query. Defaults to `TAG_FILTERS_1_0`.
        """
        GroupResourceQuery._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            query=query,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             query: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if query is None:
            raise TypeError("Missing 'query' argument")

        _setter("query", query)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        The resource query as a JSON string.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the resource query. Defaults to `TAG_FILTERS_1_0`.
        """
        return pulumi.get(self, "type")


