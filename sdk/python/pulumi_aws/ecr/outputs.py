# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RegistryScanningConfigurationRule',
    'RegistryScanningConfigurationRuleRepositoryFilter',
    'ReplicationConfigurationReplicationConfiguration',
    'ReplicationConfigurationReplicationConfigurationRule',
    'ReplicationConfigurationReplicationConfigurationRuleDestination',
    'ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter',
    'RepositoryEncryptionConfiguration',
    'RepositoryImageScanningConfiguration',
    'GetRepositoryEncryptionConfigurationResult',
    'GetRepositoryImageScanningConfigurationResult',
]

@pulumi.output_type
class RegistryScanningConfigurationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryFilters":
            suggest = "repository_filters"
        elif key == "scanFrequency":
            suggest = "scan_frequency"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryScanningConfigurationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryScanningConfigurationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryScanningConfigurationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_filters: Sequence['outputs.RegistryScanningConfigurationRuleRepositoryFilter'],
                 scan_frequency: str):
        """
        :param Sequence['RegistryScanningConfigurationRuleRepositoryFilterArgs'] repository_filters: One or more repository filter blocks, containing a `filter` (required string filtering repositories, see pattern regex [here](https://docs.aws.amazon.com/AmazonECR/latest/APIReference/API_ScanningRepositoryFilter.html)) and a `filter_type` (required string, currently only `WILDCARD` is supported).
        :param str scan_frequency: The frequency that scans are performed at for a private registry. Can be `SCAN_ON_PUSH`, `CONTINUOUS_SCAN`, or `MANUAL`.
        """
        RegistryScanningConfigurationRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            repository_filters=repository_filters,
            scan_frequency=scan_frequency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             repository_filters: Optional[Sequence['outputs.RegistryScanningConfigurationRuleRepositoryFilter']] = None,
             scan_frequency: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if repository_filters is None and 'repositoryFilters' in kwargs:
            repository_filters = kwargs['repositoryFilters']
        if repository_filters is None:
            raise TypeError("Missing 'repository_filters' argument")
        if scan_frequency is None and 'scanFrequency' in kwargs:
            scan_frequency = kwargs['scanFrequency']
        if scan_frequency is None:
            raise TypeError("Missing 'scan_frequency' argument")

        _setter("repository_filters", repository_filters)
        _setter("scan_frequency", scan_frequency)

    @property
    @pulumi.getter(name="repositoryFilters")
    def repository_filters(self) -> Sequence['outputs.RegistryScanningConfigurationRuleRepositoryFilter']:
        """
        One or more repository filter blocks, containing a `filter` (required string filtering repositories, see pattern regex [here](https://docs.aws.amazon.com/AmazonECR/latest/APIReference/API_ScanningRepositoryFilter.html)) and a `filter_type` (required string, currently only `WILDCARD` is supported).
        """
        return pulumi.get(self, "repository_filters")

    @property
    @pulumi.getter(name="scanFrequency")
    def scan_frequency(self) -> str:
        """
        The frequency that scans are performed at for a private registry. Can be `SCAN_ON_PUSH`, `CONTINUOUS_SCAN`, or `MANUAL`.
        """
        return pulumi.get(self, "scan_frequency")


@pulumi.output_type
class RegistryScanningConfigurationRuleRepositoryFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryScanningConfigurationRuleRepositoryFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryScanningConfigurationRuleRepositoryFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryScanningConfigurationRuleRepositoryFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter: str,
                 filter_type: str):
        RegistryScanningConfigurationRuleRepositoryFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter=filter,
            filter_type=filter_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter: Optional[str] = None,
             filter_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if filter is None:
            raise TypeError("Missing 'filter' argument")
        if filter_type is None and 'filterType' in kwargs:
            filter_type = kwargs['filterType']
        if filter_type is None:
            raise TypeError("Missing 'filter_type' argument")

        _setter("filter", filter)
        _setter("filter_type", filter_type)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")


@pulumi.output_type
class ReplicationConfigurationReplicationConfiguration(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.ReplicationConfigurationReplicationConfigurationRule']):
        """
        :param Sequence['ReplicationConfigurationReplicationConfigurationRuleArgs'] rules: The replication rules for a replication configuration. A maximum of 10 are allowed per `replication_configuration`. See Rule
        """
        ReplicationConfigurationReplicationConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rules: Optional[Sequence['outputs.ReplicationConfigurationReplicationConfigurationRule']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if rules is None:
            raise TypeError("Missing 'rules' argument")

        _setter("rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ReplicationConfigurationReplicationConfigurationRule']:
        """
        The replication rules for a replication configuration. A maximum of 10 are allowed per `replication_configuration`. See Rule
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class ReplicationConfigurationReplicationConfigurationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryFilters":
            suggest = "repository_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationConfigurationReplicationConfigurationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationConfigurationReplicationConfigurationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationConfigurationReplicationConfigurationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence['outputs.ReplicationConfigurationReplicationConfigurationRuleDestination'],
                 repository_filters: Optional[Sequence['outputs.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter']] = None):
        """
        :param Sequence['ReplicationConfigurationReplicationConfigurationRuleDestinationArgs'] destinations: the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
        :param Sequence['ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterArgs'] repository_filters: filters for a replication rule. See Repository Filter.
        """
        ReplicationConfigurationReplicationConfigurationRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destinations=destinations,
            repository_filters=repository_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destinations: Optional[Sequence['outputs.ReplicationConfigurationReplicationConfigurationRuleDestination']] = None,
             repository_filters: Optional[Sequence['outputs.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destinations is None:
            raise TypeError("Missing 'destinations' argument")
        if repository_filters is None and 'repositoryFilters' in kwargs:
            repository_filters = kwargs['repositoryFilters']

        _setter("destinations", destinations)
        if repository_filters is not None:
            _setter("repository_filters", repository_filters)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.ReplicationConfigurationReplicationConfigurationRuleDestination']:
        """
        the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="repositoryFilters")
    def repository_filters(self) -> Optional[Sequence['outputs.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter']]:
        """
        filters for a replication rule. See Repository Filter.
        """
        return pulumi.get(self, "repository_filters")


@pulumi.output_type
class ReplicationConfigurationReplicationConfigurationRuleDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "registryId":
            suggest = "registry_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationConfigurationReplicationConfigurationRuleDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationConfigurationReplicationConfigurationRuleDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationConfigurationReplicationConfigurationRuleDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 registry_id: str):
        """
        :param str region: A Region to replicate to.
        :param str registry_id: The account ID of the destination registry to replicate to.
        """
        ReplicationConfigurationReplicationConfigurationRuleDestination._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            region=region,
            registry_id=registry_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             region: Optional[str] = None,
             registry_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if region is None:
            raise TypeError("Missing 'region' argument")
        if registry_id is None and 'registryId' in kwargs:
            registry_id = kwargs['registryId']
        if registry_id is None:
            raise TypeError("Missing 'registry_id' argument")

        _setter("region", region)
        _setter("registry_id", registry_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        A Region to replicate to.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        """
        The account ID of the destination registry to replicate to.
        """
        return pulumi.get(self, "registry_id")


@pulumi.output_type
class ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter: str,
                 filter_type: str):
        """
        :param str filter: The repository filter details.
        :param str filter_type: The repository filter type. The only supported value is `PREFIX_MATCH`, which is a repository name prefix specified with the filter parameter.
        """
        ReplicationConfigurationReplicationConfigurationRuleRepositoryFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter=filter,
            filter_type=filter_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter: Optional[str] = None,
             filter_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if filter is None:
            raise TypeError("Missing 'filter' argument")
        if filter_type is None and 'filterType' in kwargs:
            filter_type = kwargs['filterType']
        if filter_type is None:
            raise TypeError("Missing 'filter_type' argument")

        _setter("filter", filter)
        _setter("filter_type", filter_type)

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        The repository filter details.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        """
        The repository filter type. The only supported value is `PREFIX_MATCH`, which is a repository name prefix specified with the filter parameter.
        """
        return pulumi.get(self, "filter_type")


@pulumi.output_type
class RepositoryEncryptionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositoryEncryptionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositoryEncryptionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositoryEncryptionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: Optional[str] = None,
                 kms_key: Optional[str] = None):
        """
        :param str encryption_type: The encryption type to use for the repository. Valid values are `AES256` or `KMS`. Defaults to `AES256`.
        :param str kms_key: The ARN of the KMS key to use when `encryption_type` is `KMS`. If not specified, uses the default AWS managed key for ECR.
        """
        RepositoryEncryptionConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encryption_type=encryption_type,
            kms_key=kms_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encryption_type: Optional[str] = None,
             kms_key: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if encryption_type is None and 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if kms_key is None and 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']

        if encryption_type is not None:
            _setter("encryption_type", encryption_type)
        if kms_key is not None:
            _setter("kms_key", kms_key)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        """
        The encryption type to use for the repository. Valid values are `AES256` or `KMS`. Defaults to `AES256`.
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        """
        The ARN of the KMS key to use when `encryption_type` is `KMS`. If not specified, uses the default AWS managed key for ECR.
        """
        return pulumi.get(self, "kms_key")


@pulumi.output_type
class RepositoryImageScanningConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanOnPush":
            suggest = "scan_on_push"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositoryImageScanningConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositoryImageScanningConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositoryImageScanningConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_on_push: bool):
        """
        :param bool scan_on_push: Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
        """
        RepositoryImageScanningConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scan_on_push=scan_on_push,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scan_on_push: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if scan_on_push is None and 'scanOnPush' in kwargs:
            scan_on_push = kwargs['scanOnPush']
        if scan_on_push is None:
            raise TypeError("Missing 'scan_on_push' argument")

        _setter("scan_on_push", scan_on_push)

    @property
    @pulumi.getter(name="scanOnPush")
    def scan_on_push(self) -> bool:
        """
        Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
        """
        return pulumi.get(self, "scan_on_push")


@pulumi.output_type
class GetRepositoryEncryptionConfigurationResult(dict):
    def __init__(__self__, *,
                 encryption_type: str,
                 kms_key: str):
        """
        :param str encryption_type: Encryption type to use for the repository, either `AES256` or `KMS`.
        :param str kms_key: If `encryption_type` is `KMS`, the ARN of the KMS key used.
        """
        GetRepositoryEncryptionConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encryption_type=encryption_type,
            kms_key=kms_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encryption_type: Optional[str] = None,
             kms_key: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if encryption_type is None and 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if encryption_type is None:
            raise TypeError("Missing 'encryption_type' argument")
        if kms_key is None and 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']
        if kms_key is None:
            raise TypeError("Missing 'kms_key' argument")

        _setter("encryption_type", encryption_type)
        _setter("kms_key", kms_key)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        """
        Encryption type to use for the repository, either `AES256` or `KMS`.
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> str:
        """
        If `encryption_type` is `KMS`, the ARN of the KMS key used.
        """
        return pulumi.get(self, "kms_key")


@pulumi.output_type
class GetRepositoryImageScanningConfigurationResult(dict):
    def __init__(__self__, *,
                 scan_on_push: bool):
        """
        :param bool scan_on_push: Whether images are scanned after being pushed to the repository.
        """
        GetRepositoryImageScanningConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scan_on_push=scan_on_push,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scan_on_push: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if scan_on_push is None and 'scanOnPush' in kwargs:
            scan_on_push = kwargs['scanOnPush']
        if scan_on_push is None:
            raise TypeError("Missing 'scan_on_push' argument")

        _setter("scan_on_push", scan_on_push)

    @property
    @pulumi.getter(name="scanOnPush")
    def scan_on_push(self) -> bool:
        """
        Whether images are scanned after being pushed to the repository.
        """
        return pulumi.get(self, "scan_on_push")


