# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMapResult',
    'AwaitableGetMapResult',
    'get_map',
    'get_map_output',
]

@pulumi.output_type
class GetMapResult:
    """
    A collection of values returned by getMap.
    """
    def __init__(__self__, configurations=None, create_time=None, description=None, id=None, map_arn=None, map_name=None, tags=None, update_time=None):
        if configurations and not isinstance(configurations, list):
            raise TypeError("Expected argument 'configurations' to be a list")
        pulumi.set(__self__, "configurations", configurations)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if map_arn and not isinstance(map_arn, str):
            raise TypeError("Expected argument 'map_arn' to be a str")
        pulumi.set(__self__, "map_arn", map_arn)
        if map_name and not isinstance(map_name, str):
            raise TypeError("Expected argument 'map_name' to be a str")
        pulumi.set(__self__, "map_name", map_name)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetMapConfigurationResult']:
        """
        List of configurations that specify the map tile style selected from a partner data provider.
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Timestamp for when the map resource was created in ISO 8601 format.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description for the map resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mapArn")
    def map_arn(self) -> str:
        """
        ARN for the map resource.
        """
        return pulumi.get(self, "map_arn")

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> str:
        return pulumi.get(self, "map_name")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        Key-value map of resource tags for the map.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Timestamp for when the map resource was last updated in ISO 8601 format.
        """
        return pulumi.get(self, "update_time")


class AwaitableGetMapResult(GetMapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMapResult(
            configurations=self.configurations,
            create_time=self.create_time,
            description=self.description,
            id=self.id,
            map_arn=self.map_arn,
            map_name=self.map_name,
            tags=self.tags,
            update_time=self.update_time)


def get_map(map_name: Optional[str] = None,
            tags: Optional[Mapping[str, str]] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMapResult:
    """
    Retrieve information about a Location Service Map.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.location.get_map(map_name="example")
    ```


    :param str map_name: Name of the map resource.
    :param Mapping[str, str] tags: Key-value map of resource tags for the map.
    """
    __args__ = dict()
    __args__['mapName'] = map_name
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws:location/getMap:getMap', __args__, opts=opts, typ=GetMapResult).value

    return AwaitableGetMapResult(
        configurations=__ret__.configurations,
        create_time=__ret__.create_time,
        description=__ret__.description,
        id=__ret__.id,
        map_arn=__ret__.map_arn,
        map_name=__ret__.map_name,
        tags=__ret__.tags,
        update_time=__ret__.update_time)


@_utilities.lift_output_func(get_map)
def get_map_output(map_name: Optional[pulumi.Input[str]] = None,
                   tags: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMapResult]:
    """
    Retrieve information about a Location Service Map.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aws as aws

    example = aws.location.get_map(map_name="example")
    ```


    :param str map_name: Name of the map resource.
    :param Mapping[str, str] tags: Key-value map of resource tags for the map.
    """
    ...
