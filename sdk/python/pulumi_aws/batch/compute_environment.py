# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class ComputeEnvironment(pulumi.CustomResource):
    """
    Creates a AWS Batch compute environment. Compute environments contain the Amazon ECS container instances that are used to run containerized batch jobs.
    
    For information about AWS Batch, see [What is AWS Batch?][1] .
    For information about compute environment, see [Compute Environments][2] .
    
    ~> **Note:** To prevent a race condition during environment deletion, make sure to set `depends_on` to the related `aws_iam_role_policy_attachment`;
       otherwise, the policy may be destroyed too soon and the compute environment will then get stuck in the `DELETING` state, see [Troubleshooting AWS Batch][3] .
    """
    def __init__(__self__, __name__, __opts__=None, compute_environment_name=None, compute_resources=None, service_role=None, state=None, type=None):
        """Create a ComputeEnvironment resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not compute_environment_name:
            raise TypeError('Missing required property compute_environment_name')
        __props__['computeEnvironmentName'] = compute_environment_name

        __props__['computeResources'] = compute_resources

        if not service_role:
            raise TypeError('Missing required property service_role')
        __props__['serviceRole'] = service_role

        __props__['state'] = state

        if not type:
            raise TypeError('Missing required property type')
        __props__['type'] = type

        __props__['arn'] = None
        __props__['ecc_cluster_arn'] = None
        __props__['ecs_cluster_arn'] = None
        __props__['status'] = None
        __props__['status_reason'] = None

        super(ComputeEnvironment, __self__).__init__(
            'aws:batch/computeEnvironment:ComputeEnvironment',
            __name__,
            __props__,
            __opts__)

