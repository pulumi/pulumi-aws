# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'IndexTimeouts',
    'SearchResourceResult',
    'SearchResourceCountResult',
    'SearchResourceResourcePropertyResult',
    'ViewFilters',
    'ViewIncludedProperty',
]

@pulumi.output_type
class IndexTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class SearchResourceResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 last_reported_at: str,
                 owning_account_id: str,
                 region: str,
                 resource_type: str,
                 service: str,
                 resource_properties: Optional[Sequence['outputs.SearchResourceResourcePropertyResult']] = None):
        """
        :param str arn: Amazon resource name of resource.
        :param str last_reported_at: The date and time that the information about this resource property was last updated.
        :param str owning_account_id: Amazon Web Services account that owns the resource.
        :param str region: Amazon Web Services Region in which the resource was created and exists.
        :param str resource_type: Type of the resource.
        :param str service: Amazon Web Service that owns the resource and is responsible for creating and updating it.
        :param Sequence['SearchResourceResourcePropertyArgs'] resource_properties: Structure with additional type-specific details about the resource.  See `resource_property` below.
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "last_reported_at", last_reported_at)
        pulumi.set(__self__, "owning_account_id", owning_account_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "service", service)
        if resource_properties is not None:
            pulumi.set(__self__, "resource_properties", resource_properties)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        Amazon resource name of resource.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="lastReportedAt")
    def last_reported_at(self) -> str:
        """
        The date and time that the information about this resource property was last updated.
        """
        return pulumi.get(self, "last_reported_at")

    @property
    @pulumi.getter(name="owningAccountId")
    def owning_account_id(self) -> str:
        """
        Amazon Web Services account that owns the resource.
        """
        return pulumi.get(self, "owning_account_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Amazon Web Services Region in which the resource was created and exists.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        Amazon Web Service that owns the resource and is responsible for creating and updating it.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="resourceProperties")
    def resource_properties(self) -> Optional[Sequence['outputs.SearchResourceResourcePropertyResult']]:
        """
        Structure with additional type-specific details about the resource.  See `resource_property` below.
        """
        return pulumi.get(self, "resource_properties")


@pulumi.output_type
class SearchResourceCountResult(dict):
    def __init__(__self__, *,
                 completed: bool,
                 total_resources: int):
        """
        :param int total_resources: Number of resources that match the search query. This value can't exceed 1,000. If there are more than 1,000 resources that match the query, then only 1,000 are counted and the Complete field is set to false. We recommend that you refine your query to return a smaller number of results.
        """
        pulumi.set(__self__, "completed", completed)
        pulumi.set(__self__, "total_resources", total_resources)

    @property
    @pulumi.getter
    def completed(self) -> bool:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="totalResources")
    def total_resources(self) -> int:
        """
        Number of resources that match the search query. This value can't exceed 1,000. If there are more than 1,000 resources that match the query, then only 1,000 are counted and the Complete field is set to false. We recommend that you refine your query to return a smaller number of results.
        """
        return pulumi.get(self, "total_resources")


@pulumi.output_type
class SearchResourceResourcePropertyResult(dict):
    def __init__(__self__, *,
                 data: str,
                 last_reported_at: str,
                 name: str):
        """
        :param str data: Details about this property. The content of this field is a JSON object that varies based on the resource type.
        :param str last_reported_at: The date and time that the information about this resource property was last updated.
        :param str name: Name of this property of the resource.
        """
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "last_reported_at", last_reported_at)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def data(self) -> str:
        """
        Details about this property. The content of this field is a JSON object that varies based on the resource type.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="lastReportedAt")
    def last_reported_at(self) -> str:
        """
        The date and time that the information about this resource property was last updated.
        """
        return pulumi.get(self, "last_reported_at")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of this property of the resource.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ViewFilters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterString":
            suggest = "filter_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ViewFilters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ViewFilters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ViewFilters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_string: str):
        """
        :param str filter_string: The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a search operation. For more details, see [Search query syntax](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html).
        """
        pulumi.set(__self__, "filter_string", filter_string)

    @property
    @pulumi.getter(name="filterString")
    def filter_string(self) -> str:
        """
        The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a search operation. For more details, see [Search query syntax](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html).
        """
        return pulumi.get(self, "filter_string")


@pulumi.output_type
class ViewIncludedProperty(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The name of the property that is included in this view. Valid values: `tags`.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the property that is included in this view. Valid values: `tags`.
        """
        return pulumi.get(self, "name")


