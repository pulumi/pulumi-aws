# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Alias(pulumi.CustomResource):
    """
    Provides a Gamelift Alias resource.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, name=None, routing_strategy=None):
        """Create a Alias resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        Description of the alias.
        """
        __props__['description'] = description

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Name of the alias.
        """
        __props__['name'] = name

        if not routing_strategy:
            raise TypeError('Missing required property routing_strategy')
        elif not isinstance(routing_strategy, dict):
            raise TypeError('Expected property routing_strategy to be a dict')
        __self__.routing_strategy = routing_strategy
        """
        Specifies the fleet and/or routing type to use for the alias.
        """
        __props__['routingStrategy'] = routing_strategy

        __self__.arn = pulumi.runtime.UNKNOWN
        """
        Alias ARN.
        """

        super(Alias, __self__).__init__(
            'aws:glacier/alias:Alias',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'arn' in outs:
            self.arn = outs['arn']
        if 'description' in outs:
            self.description = outs['description']
        if 'name' in outs:
            self.name = outs['name']
        if 'routingStrategy' in outs:
            self.routing_strategy = outs['routingStrategy']
