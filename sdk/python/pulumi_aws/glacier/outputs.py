# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'VaultNotification',
]

@pulumi.output_type
class VaultNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "snsTopic":
            suggest = "sns_topic"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VaultNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VaultNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VaultNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 events: Sequence[str],
                 sns_topic: str):
        """
        :param Sequence[str] events: You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
        :param str sns_topic: The SNS Topic ARN.
        """
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "sns_topic", sns_topic)

    @property
    @pulumi.getter
    def events(self) -> Sequence[str]:
        """
        You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="snsTopic")
    def sns_topic(self) -> str:
        """
        The SNS Topic ARN.
        """
        return pulumi.get(self, "sns_topic")


