# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['ProvisionedConcurrencyConfig']


class ProvisionedConcurrencyConfig(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 provisioned_concurrent_executions: Optional[pulumi.Input[int]] = None,
                 qualifier: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a Lambda Provisioned Concurrency Configuration.

        ## Example Usage
        ### Alias Name

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.lambda_.ProvisionedConcurrencyConfig("example",
            function_name=aws_lambda_alias["example"]["function_name"],
            provisioned_concurrent_executions=1,
            qualifier=aws_lambda_alias["example"]["name"])
        ```
        ### Function Version

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.lambda_.ProvisionedConcurrencyConfig("example",
            function_name=aws_lambda_function["example"]["function_name"],
            provisioned_concurrent_executions=1,
            qualifier=aws_lambda_function["example"]["version"])
        ```

        ## Import

        Lambda Provisioned Concurrency Configs can be imported using the `function_name` and `qualifier` separated by a colon (`:`), e.g.

        ```sh
         $ pulumi import aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig example my_function:production
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] function_name: Name or Amazon Resource Name (ARN) of the Lambda Function.
        :param pulumi.Input[int] provisioned_concurrent_executions: Amount of capacity to allocate. Must be greater than or equal to `1`.
        :param pulumi.Input[str] qualifier: Lambda Function version or Lambda Alias name.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if function_name is None and not opts.urn:
                raise TypeError("Missing required property 'function_name'")
            __props__['function_name'] = function_name
            if provisioned_concurrent_executions is None and not opts.urn:
                raise TypeError("Missing required property 'provisioned_concurrent_executions'")
            __props__['provisioned_concurrent_executions'] = provisioned_concurrent_executions
            if qualifier is None and not opts.urn:
                raise TypeError("Missing required property 'qualifier'")
            __props__['qualifier'] = qualifier
        super(ProvisionedConcurrencyConfig, __self__).__init__(
            'aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            function_name: Optional[pulumi.Input[str]] = None,
            provisioned_concurrent_executions: Optional[pulumi.Input[int]] = None,
            qualifier: Optional[pulumi.Input[str]] = None) -> 'ProvisionedConcurrencyConfig':
        """
        Get an existing ProvisionedConcurrencyConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] function_name: Name or Amazon Resource Name (ARN) of the Lambda Function.
        :param pulumi.Input[int] provisioned_concurrent_executions: Amount of capacity to allocate. Must be greater than or equal to `1`.
        :param pulumi.Input[str] qualifier: Lambda Function version or Lambda Alias name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["function_name"] = function_name
        __props__["provisioned_concurrent_executions"] = provisioned_concurrent_executions
        __props__["qualifier"] = qualifier
        return ProvisionedConcurrencyConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Output[str]:
        """
        Name or Amazon Resource Name (ARN) of the Lambda Function.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="provisionedConcurrentExecutions")
    def provisioned_concurrent_executions(self) -> pulumi.Output[int]:
        """
        Amount of capacity to allocate. Must be greater than or equal to `1`.
        """
        return pulumi.get(self, "provisioned_concurrent_executions")

    @property
    @pulumi.getter
    def qualifier(self) -> pulumi.Output[str]:
        """
        Lambda Function version or Lambda Alias name.
        """
        return pulumi.get(self, "qualifier")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

