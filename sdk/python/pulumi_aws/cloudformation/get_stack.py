# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetStackResult(object):
    """
    A collection of values returned by getStack.
    """
    def __init__(__self__, capabilities=None, description=None, disable_rollback=None, iam_role_arn=None, notification_arns=None, outputs=None, parameters=None, tags=None, template_body=None, timeout_in_minutes=None):
        if not capabilities:
            raise TypeError('Missing required argument capabilities')
        elif not isinstance(capabilities, list):
            raise TypeError('Expected argument capabilities to be a list')
        __self__.capabilities = capabilities
        """
        A list of capabilities
        """
        if not description:
            raise TypeError('Missing required argument description')
        elif not isinstance(description, basestring):
            raise TypeError('Expected argument description to be a basestring')
        __self__.description = description
        """
        Description of the stack
        """
        if not disable_rollback:
            raise TypeError('Missing required argument disable_rollback')
        elif not isinstance(disable_rollback, bool):
            raise TypeError('Expected argument disable_rollback to be a bool')
        __self__.disable_rollback = disable_rollback
        """
        Whether the rollback of the stack is disabled when stack creation fails
        """
        if not iam_role_arn:
            raise TypeError('Missing required argument iam_role_arn')
        elif not isinstance(iam_role_arn, basestring):
            raise TypeError('Expected argument iam_role_arn to be a basestring')
        __self__.iam_role_arn = iam_role_arn
        """
        The ARN of the IAM role used to create the stack.
        """
        if not notification_arns:
            raise TypeError('Missing required argument notification_arns')
        elif not isinstance(notification_arns, list):
            raise TypeError('Expected argument notification_arns to be a list')
        __self__.notification_arns = notification_arns
        """
        A list of SNS topic ARNs to publish stack related events
        """
        if not outputs:
            raise TypeError('Missing required argument outputs')
        elif not isinstance(outputs, dict):
            raise TypeError('Expected argument outputs to be a dict')
        __self__.outputs = outputs
        """
        A map of outputs from the stack.
        """
        if not parameters:
            raise TypeError('Missing required argument parameters')
        elif not isinstance(parameters, dict):
            raise TypeError('Expected argument parameters to be a dict')
        __self__.parameters = parameters
        """
        A map of parameters that specify input parameters for the stack.
        """
        if not tags:
            raise TypeError('Missing required argument tags')
        elif not isinstance(tags, dict):
            raise TypeError('Expected argument tags to be a dict')
        __self__.tags = tags
        """
        A map of tags associated with this stack.
        """
        if not template_body:
            raise TypeError('Missing required argument template_body')
        elif not isinstance(template_body, basestring):
            raise TypeError('Expected argument template_body to be a basestring')
        __self__.template_body = template_body
        """
        Structure containing the template body.
        """
        if not timeout_in_minutes:
            raise TypeError('Missing required argument timeout_in_minutes')
        elif not isinstance(timeout_in_minutes, int):
            raise TypeError('Expected argument timeout_in_minutes to be a int')
        __self__.timeout_in_minutes = timeout_in_minutes
        """
        The amount of time that can pass before the stack status becomes `CREATE_FAILED`
        """

def get_stack(name=None):
    """
    The CloudFormation Stack data source allows access to stack
    outputs and other useful data including the template body.
    """
    __args__ = dict()

    __args__['name'] = name
    __ret__ = pulumi.runtime.invoke('aws:cloudformation/getStack:getStack', __args__)

    return GetStackResult(
        capabilities=__ret__['capabilities'],
        description=__ret__['description'],
        disable_rollback=__ret__['disableRollback'],
        iam_role_arn=__ret__['iamRoleArn'],
        notification_arns=__ret__['notificationArns'],
        outputs=__ret__['outputs'],
        parameters=__ret__['parameters'],
        tags=__ret__['tags'],
        template_body=__ret__['templateBody'],
        timeout_in_minutes=__ret__['timeoutInMinutes'])
