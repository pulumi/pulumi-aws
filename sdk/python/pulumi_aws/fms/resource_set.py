# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceSetArgs', 'ResourceSet']

@pulumi.input_type
class ResourceSetArgs:
    def __init__(__self__, *,
                 resource_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSetResourceSetArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input['ResourceSetTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ResourceSet resource.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceSetResourceSetArgs']]] resource_sets: Details about the resource set to be created or updated. See `resource_set` Attribute Reference below.
        """
        if resource_sets is not None:
            pulumi.set(__self__, "resource_sets", resource_sets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="resourceSets")
    def resource_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSetResourceSetArgs']]]]:
        """
        Details about the resource set to be created or updated. See `resource_set` Attribute Reference below.
        """
        return pulumi.get(self, "resource_sets")

    @resource_sets.setter
    def resource_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSetResourceSetArgs']]]]):
        pulumi.set(self, "resource_sets", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ResourceSetTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ResourceSetTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ResourceSetState:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 resource_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSetResourceSetArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input['ResourceSetTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering ResourceSet resources.
        :param pulumi.Input[str] arn: ARN of the Resource Set.
        :param pulumi.Input[Sequence[pulumi.Input['ResourceSetResourceSetArgs']]] resource_sets: Details about the resource set to be created or updated. See `resource_set` Attribute Reference below.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if resource_sets is not None:
            pulumi.set(__self__, "resource_sets", resource_sets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_all is not None:
            warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
            pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")
        if tags_all is not None:
            pulumi.set(__self__, "tags_all", tags_all)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of the Resource Set.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="resourceSets")
    def resource_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSetResourceSetArgs']]]]:
        """
        Details about the resource set to be created or updated. See `resource_set` Attribute Reference below.
        """
        return pulumi.get(self, "resource_sets")

    @resource_sets.setter
    def resource_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSetResourceSetArgs']]]]):
        pulumi.set(self, "resource_sets", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")

        return pulumi.get(self, "tags_all")

    @tags_all.setter
    def tags_all(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags_all", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ResourceSetTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ResourceSetTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


class ResourceSet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceSetResourceSetArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['ResourceSetTimeoutsArgs']]] = None,
                 __props__=None):
        """
        Resource for managing an AWS FMS (Firewall Manager) Resource Set.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.fms.ResourceSet("example", resource_sets=[aws.fms.ResourceSetResourceSetArgs(
            name="testing",
            resource_type_lists=["AWS::NetworkFirewall::Firewall"],
        )])
        ```

        ## Import

        Using `pulumi import`, import FMS (Firewall Manager) Resource Set using the `id`. For example:

        ```sh
        $ pulumi import aws:fms/resourceSet:ResourceSet example resource_set-id-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceSetResourceSetArgs']]]] resource_sets: Details about the resource set to be created or updated. See `resource_set` Attribute Reference below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ResourceSetArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource for managing an AWS FMS (Firewall Manager) Resource Set.

        ## Example Usage

        ### Basic Usage

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.fms.ResourceSet("example", resource_sets=[aws.fms.ResourceSetResourceSetArgs(
            name="testing",
            resource_type_lists=["AWS::NetworkFirewall::Firewall"],
        )])
        ```

        ## Import

        Using `pulumi import`, import FMS (Firewall Manager) Resource Set using the `id`. For example:

        ```sh
        $ pulumi import aws:fms/resourceSet:ResourceSet example resource_set-id-12345678
        ```

        :param str resource_name: The name of the resource.
        :param ResourceSetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceSetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceSetResourceSetArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['ResourceSetTimeoutsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceSetArgs.__new__(ResourceSetArgs)

            __props__.__dict__["resource_sets"] = resource_sets
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["arn"] = None
            __props__.__dict__["tags_all"] = None
        super(ResourceSet, __self__).__init__(
            'aws:fms/resourceSet:ResourceSet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            resource_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceSetResourceSetArgs']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            tags_all: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            timeouts: Optional[pulumi.Input[pulumi.InputType['ResourceSetTimeoutsArgs']]] = None) -> 'ResourceSet':
        """
        Get an existing ResourceSet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: ARN of the Resource Set.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceSetResourceSetArgs']]]] resource_sets: Details about the resource set to be created or updated. See `resource_set` Attribute Reference below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceSetState.__new__(_ResourceSetState)

        __props__.__dict__["arn"] = arn
        __props__.__dict__["resource_sets"] = resource_sets
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_all"] = tags_all
        __props__.__dict__["timeouts"] = timeouts
        return ResourceSet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        ARN of the Resource Set.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="resourceSets")
    def resource_sets(self) -> pulumi.Output[Optional[Sequence['outputs.ResourceSetResourceSet']]]:
        """
        Details about the resource set to be created or updated. See `resource_set` Attribute Reference below.
        """
        return pulumi.get(self, "resource_sets")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsAll")
    def tags_all(self) -> pulumi.Output[Mapping[str, str]]:
        warnings.warn("""Please use `tags` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags_all is deprecated: Please use `tags` instead.""")

        return pulumi.get(self, "tags_all")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ResourceSetTimeouts']]:
        return pulumi.get(self, "timeouts")

