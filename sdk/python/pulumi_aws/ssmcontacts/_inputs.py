# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ContactChannelDeliveryAddressArgs',
    'PlanStageArgs',
    'PlanStageTargetArgs',
    'PlanStageTargetChannelTargetInfoArgs',
    'PlanStageTargetContactTargetInfoArgs',
]

@pulumi.input_type
class ContactChannelDeliveryAddressArgs:
    def __init__(__self__, *,
                 simple_address: pulumi.Input[str]):
        """
        :param pulumi.Input[str] simple_address: Details to engage this contact channel. The expected format depends on the contact channel type and is described in the [`ContactChannelAddress` section of the SSM Contacts API Reference](https://docs.aws.amazon.com/incident-manager/latest/APIReference/API_SSMContacts_ContactChannelAddress.html).
        """
        ContactChannelDeliveryAddressArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            simple_address=simple_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             simple_address: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if simple_address is None and 'simpleAddress' in kwargs:
            simple_address = kwargs['simpleAddress']
        if simple_address is None:
            raise TypeError("Missing 'simple_address' argument")

        _setter("simple_address", simple_address)

    @property
    @pulumi.getter(name="simpleAddress")
    def simple_address(self) -> pulumi.Input[str]:
        """
        Details to engage this contact channel. The expected format depends on the contact channel type and is described in the [`ContactChannelAddress` section of the SSM Contacts API Reference](https://docs.aws.amazon.com/incident-manager/latest/APIReference/API_SSMContacts_ContactChannelAddress.html).
        """
        return pulumi.get(self, "simple_address")

    @simple_address.setter
    def simple_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "simple_address", value)


@pulumi.input_type
class PlanStageArgs:
    def __init__(__self__, *,
                 duration_in_minutes: pulumi.Input[int],
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['PlanStageTargetArgs']]]] = None):
        PlanStageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration_in_minutes=duration_in_minutes,
            targets=targets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration_in_minutes: Optional[pulumi.Input[int]] = None,
             targets: Optional[pulumi.Input[Sequence[pulumi.Input['PlanStageTargetArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if duration_in_minutes is None and 'durationInMinutes' in kwargs:
            duration_in_minutes = kwargs['durationInMinutes']
        if duration_in_minutes is None:
            raise TypeError("Missing 'duration_in_minutes' argument")

        _setter("duration_in_minutes", duration_in_minutes)
        if targets is not None:
            _setter("targets", targets)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "duration_in_minutes")

    @duration_in_minutes.setter
    def duration_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration_in_minutes", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PlanStageTargetArgs']]]]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PlanStageTargetArgs']]]]):
        pulumi.set(self, "targets", value)


@pulumi.input_type
class PlanStageTargetArgs:
    def __init__(__self__, *,
                 channel_target_info: Optional[pulumi.Input['PlanStageTargetChannelTargetInfoArgs']] = None,
                 contact_target_info: Optional[pulumi.Input['PlanStageTargetContactTargetInfoArgs']] = None):
        PlanStageTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            channel_target_info=channel_target_info,
            contact_target_info=contact_target_info,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             channel_target_info: Optional[pulumi.Input['PlanStageTargetChannelTargetInfoArgs']] = None,
             contact_target_info: Optional[pulumi.Input['PlanStageTargetContactTargetInfoArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if channel_target_info is None and 'channelTargetInfo' in kwargs:
            channel_target_info = kwargs['channelTargetInfo']
        if contact_target_info is None and 'contactTargetInfo' in kwargs:
            contact_target_info = kwargs['contactTargetInfo']

        if channel_target_info is not None:
            _setter("channel_target_info", channel_target_info)
        if contact_target_info is not None:
            _setter("contact_target_info", contact_target_info)

    @property
    @pulumi.getter(name="channelTargetInfo")
    def channel_target_info(self) -> Optional[pulumi.Input['PlanStageTargetChannelTargetInfoArgs']]:
        return pulumi.get(self, "channel_target_info")

    @channel_target_info.setter
    def channel_target_info(self, value: Optional[pulumi.Input['PlanStageTargetChannelTargetInfoArgs']]):
        pulumi.set(self, "channel_target_info", value)

    @property
    @pulumi.getter(name="contactTargetInfo")
    def contact_target_info(self) -> Optional[pulumi.Input['PlanStageTargetContactTargetInfoArgs']]:
        return pulumi.get(self, "contact_target_info")

    @contact_target_info.setter
    def contact_target_info(self, value: Optional[pulumi.Input['PlanStageTargetContactTargetInfoArgs']]):
        pulumi.set(self, "contact_target_info", value)


@pulumi.input_type
class PlanStageTargetChannelTargetInfoArgs:
    def __init__(__self__, *,
                 contact_channel_id: pulumi.Input[str],
                 retry_interval_in_minutes: Optional[pulumi.Input[int]] = None):
        PlanStageTargetChannelTargetInfoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contact_channel_id=contact_channel_id,
            retry_interval_in_minutes=retry_interval_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contact_channel_id: Optional[pulumi.Input[str]] = None,
             retry_interval_in_minutes: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if contact_channel_id is None and 'contactChannelId' in kwargs:
            contact_channel_id = kwargs['contactChannelId']
        if contact_channel_id is None:
            raise TypeError("Missing 'contact_channel_id' argument")
        if retry_interval_in_minutes is None and 'retryIntervalInMinutes' in kwargs:
            retry_interval_in_minutes = kwargs['retryIntervalInMinutes']

        _setter("contact_channel_id", contact_channel_id)
        if retry_interval_in_minutes is not None:
            _setter("retry_interval_in_minutes", retry_interval_in_minutes)

    @property
    @pulumi.getter(name="contactChannelId")
    def contact_channel_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contact_channel_id")

    @contact_channel_id.setter
    def contact_channel_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "contact_channel_id", value)

    @property
    @pulumi.getter(name="retryIntervalInMinutes")
    def retry_interval_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry_interval_in_minutes")

    @retry_interval_in_minutes.setter
    def retry_interval_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_interval_in_minutes", value)


@pulumi.input_type
class PlanStageTargetContactTargetInfoArgs:
    def __init__(__self__, *,
                 is_essential: pulumi.Input[bool],
                 contact_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] contact_id: The Amazon Resource Name (ARN) of the contact or escalation plan.
        """
        PlanStageTargetContactTargetInfoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_essential=is_essential,
            contact_id=contact_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_essential: Optional[pulumi.Input[bool]] = None,
             contact_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if is_essential is None and 'isEssential' in kwargs:
            is_essential = kwargs['isEssential']
        if is_essential is None:
            raise TypeError("Missing 'is_essential' argument")
        if contact_id is None and 'contactId' in kwargs:
            contact_id = kwargs['contactId']

        _setter("is_essential", is_essential)
        if contact_id is not None:
            _setter("contact_id", contact_id)

    @property
    @pulumi.getter(name="isEssential")
    def is_essential(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_essential")

    @is_essential.setter
    def is_essential(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_essential", value)

    @property
    @pulumi.getter(name="contactId")
    def contact_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the contact or escalation plan.
        """
        return pulumi.get(self, "contact_id")

    @contact_id.setter
    def contact_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_id", value)


