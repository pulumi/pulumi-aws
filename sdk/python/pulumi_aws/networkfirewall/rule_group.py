# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['RuleGroup']


class RuleGroup(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rule_group: Optional[pulumi.Input[pulumi.InputType['RuleGroupRuleGroupArgs']]] = None,
                 rules: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides an AWS Network Firewall Rule Group Resource

        ## Example Usage
        ### Stateful Inspection for denying access to a domain

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.networkfirewall.RuleGroup("example",
            capacity=100,
            rule_group=aws.networkfirewall.RuleGroupRuleGroupArgs(
                rules_source=aws.networkfirewall.RuleGroupRuleGroupRulesSourceArgs(
                    rules_source_list=aws.networkfirewall.RuleGroupRuleGroupRulesSourceRulesSourceListArgs(
                        generated_rules_type="DENYLIST",
                        target_types=["HTTP_HOST"],
                        targets=["test.example.com"],
                    ),
                ),
            ),
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2",
            },
            type="STATEFUL")
        ```
        ### Stateful Inspection for permitting packets from a source IP address

        ```python
        import pulumi
        import pulumi_aws as aws

        ips = [
            "1.1.1.1/32",
            "1.0.0.1/32",
        ]
        example = aws.networkfirewall.RuleGroup("example",
            capacity=50,
            description="Permits http traffic from source",
            type="STATEFUL",
            rule_group=aws.networkfirewall.RuleGroupRuleGroupArgs(
                rules_source=aws.networkfirewall.RuleGroupRuleGroupRulesSourceArgs(
                    dynamic=[{
                        "forEach": ips,
                        "content": [{
                            "action": "PASS",
                            "header": [{
                                "destination": "ANY",
                                "destinationPort": "ANY",
                                "protocol": "HTTP",
                                "direction": "ANY",
                                "sourcePort": "ANY",
                                "source": stateful_rule["value"],
                            }],
                            "ruleOption": [{
                                "keyword": "sid:1",
                            }],
                        }],
                    }],
                ),
            ),
            tags={
                "Name": "permit HTTP from source",
            })
        ```
        ### Stateful Inspection for blocking packets from going to an intended destination

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.networkfirewall.RuleGroup("example",
            capacity=100,
            rule_group=aws.networkfirewall.RuleGroupRuleGroupArgs(
                rules_source=aws.networkfirewall.RuleGroupRuleGroupRulesSourceArgs(
                    stateful_rule=[{
                        "action": "DROP",
                        "header": {
                            "destination": "124.1.1.24/32",
                            "destinationPort": 53,
                            "direction": "ANY",
                            "protocol": "TCP",
                            "source": "1.2.3.4/32",
                            "sourcePort": 53,
                        },
                        "ruleOption": [{
                            "keyword": "sid:1",
                        }],
                    }],
                ),
            ),
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2",
            },
            type="STATEFUL")
        ```
        ### Stateful Inspection from rules specifications defined in Suricata flat format

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.networkfirewall.RuleGroup("example",
            capacity=100,
            type="STATEFUL",
            rules=(lambda path: open(path).read())("example.rules"),
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2",
            })
        ```
        ### Stateless Inspection with a Custom Action

        ```python
        import pulumi
        import pulumi_aws as aws

        example = aws.networkfirewall.RuleGroup("example",
            capacity=100,
            description="Stateless Rate Limiting Rule",
            rule_group=aws.networkfirewall.RuleGroupRuleGroupArgs(
                rules_source=aws.networkfirewall.RuleGroupRuleGroupRulesSourceArgs(
                    stateless_rules_and_custom_actions=aws.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsArgs(
                        custom_action=[{
                            "actionDefinition": {
                                "publishMetricAction": {
                                    "dimension": [{
                                        "value": "2",
                                    }],
                                },
                            },
                            "actionName": "ExampleMetricsAction",
                        }],
                        stateless_rule=[{
                            "priority": 1,
                            "ruleDefinition": {
                                "actions": [
                                    "aws:pass",
                                    "ExampleMetricsAction",
                                ],
                                "matchAttributes": {
                                    "destination": [{
                                        "addressDefinition": "124.1.1.5/32",
                                    }],
                                    "destinationPort": [{
                                        "from_port": 443,
                                        "to_port": 443,
                                    }],
                                    "protocols": [6],
                                    "source": [{
                                        "addressDefinition": "1.2.3.4/32",
                                    }],
                                    "sourcePort": [{
                                        "from_port": 443,
                                        "to_port": 443,
                                    }],
                                    "tcpFlag": [{
                                        "flags": ["SYN"],
                                        "masks": [
                                            "SYN",
                                            "ACK",
                                        ],
                                    }],
                                },
                            },
                        }],
                    ),
                ),
            ),
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2",
            },
            type="STATELESS")
        ```

        ## Import

        Network Firewall Rule Groups can be imported using their `ARN`.

        ```sh
         $ pulumi import aws:networkfirewall/ruleGroup:RuleGroup example arn:aws:network-firewall:us-west-1:123456789012:stateful-rulegroup/example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] capacity: The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
        :param pulumi.Input[str] description: A friendly description of the rule group.
        :param pulumi.Input[str] name: A friendly name of the rule group.
        :param pulumi.Input[pulumi.InputType['RuleGroupRuleGroupArgs']] rule_group: A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
        :param pulumi.Input[str] rules: The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `rule_group` is specified.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of key:value pairs to associate with the resource.
        :param pulumi.Input[str] type: Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if capacity is None and not opts.urn:
                raise TypeError("Missing required property 'capacity'")
            __props__['capacity'] = capacity
            __props__['description'] = description
            __props__['name'] = name
            __props__['rule_group'] = rule_group
            __props__['rules'] = rules
            __props__['tags'] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['arn'] = None
            __props__['update_token'] = None
        super(RuleGroup, __self__).__init__(
            'aws:networkfirewall/ruleGroup:RuleGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arn: Optional[pulumi.Input[str]] = None,
            capacity: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rule_group: Optional[pulumi.Input[pulumi.InputType['RuleGroupRuleGroupArgs']]] = None,
            rules: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            update_token: Optional[pulumi.Input[str]] = None) -> 'RuleGroup':
        """
        Get an existing RuleGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arn: The Amazon Resource Name (ARN) that identifies the rule group.
        :param pulumi.Input[int] capacity: The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
        :param pulumi.Input[str] description: A friendly description of the rule group.
        :param pulumi.Input[str] name: A friendly name of the rule group.
        :param pulumi.Input[pulumi.InputType['RuleGroupRuleGroupArgs']] rule_group: A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
        :param pulumi.Input[str] rules: The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `rule_group` is specified.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of key:value pairs to associate with the resource.
        :param pulumi.Input[str] type: Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
        :param pulumi.Input[str] update_token: A string token used when updating the rule group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["arn"] = arn
        __props__["capacity"] = capacity
        __props__["description"] = description
        __props__["name"] = name
        __props__["rule_group"] = rule_group
        __props__["rules"] = rules
        __props__["tags"] = tags
        __props__["type"] = type
        __props__["update_token"] = update_token
        return RuleGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        The Amazon Resource Name (ARN) that identifies the rule group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[int]:
        """
        The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A friendly description of the rule group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A friendly name of the rule group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleGroup")
    def rule_group(self) -> pulumi.Output['outputs.RuleGroupRuleGroup']:
        """
        A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
        """
        return pulumi.get(self, "rule_group")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[str]]:
        """
        The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `rule_group` is specified.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of key:value pairs to associate with the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateToken")
    def update_token(self) -> pulumi.Output[str]:
        """
        A string token used when updating the rule group.
        """
        return pulumi.get(self, "update_token")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

