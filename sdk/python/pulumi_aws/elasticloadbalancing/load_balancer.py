# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class LoadBalancer(pulumi.CustomResource):
    """
    Provides an Elastic Load Balancer resource, also known as a "Classic
    Load Balancer" after the release of
    [Application/Network Load Balancers](/docs/providers/aws/r/lb.html).
    
    ~> **NOTE on ELB Instances and ELB Attachments:** Terraform currently
    provides both a standalone [ELB Attachment resource](elb_attachment.html)
    (describing an instance attached to an ELB), and an ELB resource with
    `instances` defined in-line. At this time you cannot use an ELB with in-line
    instances in conjunction with a ELB Attachment resources. Doing so will cause a
    conflict and will overwrite attachments.
    """
    def __init__(__self__, __name__, __opts__=None, access_logs=None, availability_zones=None, connection_draining=None, connection_draining_timeout=None, cross_zone_load_balancing=None, health_check=None, idle_timeout=None, instances=None, internal=None, listeners=None, name=None, name_prefix=None, security_groups=None, source_security_group=None, subnets=None, tags=None):
        """Create a LoadBalancer resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if access_logs and not isinstance(access_logs, dict):
            raise TypeError('Expected property access_logs to be a dict')
        __self__.access_logs = access_logs
        """
        An Access Logs block. Access Logs documented below.
        """
        __props__['accessLogs'] = access_logs

        if availability_zones and not isinstance(availability_zones, list):
            raise TypeError('Expected property availability_zones to be a list')
        __self__.availability_zones = availability_zones
        """
        The AZ's to serve traffic in.
        """
        __props__['availabilityZones'] = availability_zones

        if connection_draining and not isinstance(connection_draining, bool):
            raise TypeError('Expected property connection_draining to be a bool')
        __self__.connection_draining = connection_draining
        """
        Boolean to enable connection draining. Default: `false`
        """
        __props__['connectionDraining'] = connection_draining

        if connection_draining_timeout and not isinstance(connection_draining_timeout, int):
            raise TypeError('Expected property connection_draining_timeout to be a int')
        __self__.connection_draining_timeout = connection_draining_timeout
        """
        The time in seconds to allow for connections to drain. Default: `300`
        """
        __props__['connectionDrainingTimeout'] = connection_draining_timeout

        if cross_zone_load_balancing and not isinstance(cross_zone_load_balancing, bool):
            raise TypeError('Expected property cross_zone_load_balancing to be a bool')
        __self__.cross_zone_load_balancing = cross_zone_load_balancing
        """
        Enable cross-zone load balancing. Default: `true`
        """
        __props__['crossZoneLoadBalancing'] = cross_zone_load_balancing

        if health_check and not isinstance(health_check, dict):
            raise TypeError('Expected property health_check to be a dict')
        __self__.health_check = health_check
        """
        A health_check block. Health Check documented below.
        """
        __props__['healthCheck'] = health_check

        if idle_timeout and not isinstance(idle_timeout, int):
            raise TypeError('Expected property idle_timeout to be a int')
        __self__.idle_timeout = idle_timeout
        """
        The time in seconds that the connection is allowed to be idle. Default: `60`
        """
        __props__['idleTimeout'] = idle_timeout

        if instances and not isinstance(instances, list):
            raise TypeError('Expected property instances to be a list')
        __self__.instances = instances
        """
        A list of instance ids to place in the ELB pool.
        """
        __props__['instances'] = instances

        if internal and not isinstance(internal, bool):
            raise TypeError('Expected property internal to be a bool')
        __self__.internal = internal
        """
        If true, ELB will be an internal ELB.
        """
        __props__['internal'] = internal

        if not listeners:
            raise TypeError('Missing required property listeners')
        elif not isinstance(listeners, list):
            raise TypeError('Expected property listeners to be a list')
        __self__.listeners = listeners
        """
        A list of listener blocks. Listeners documented below.
        """
        __props__['listeners'] = listeners

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the ELB. By default generated by Terraform.
        """
        __props__['name'] = name

        if name_prefix and not isinstance(name_prefix, basestring):
            raise TypeError('Expected property name_prefix to be a basestring')
        __self__.name_prefix = name_prefix
        """
        Creates a unique name beginning with the specified
        prefix. Conflicts with `name`.
        """
        __props__['namePrefix'] = name_prefix

        if security_groups and not isinstance(security_groups, list):
            raise TypeError('Expected property security_groups to be a list')
        __self__.security_groups = security_groups
        """
        A list of security group IDs to assign to the ELB.
        Only valid if creating an ELB within a VPC
        """
        __props__['securityGroups'] = security_groups

        if source_security_group and not isinstance(source_security_group, basestring):
            raise TypeError('Expected property source_security_group to be a basestring')
        __self__.source_security_group = source_security_group
        """
        The name of the security group that you can use as
        part of your inbound rules for your load balancer's back-end application
        instances. Use this for Classic or Default VPC only.
        """
        __props__['sourceSecurityGroup'] = source_security_group

        if subnets and not isinstance(subnets, list):
            raise TypeError('Expected property subnets to be a list')
        __self__.subnets = subnets
        """
        A list of subnet IDs to attach to the ELB.
        """
        __props__['subnets'] = subnets

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        __self__.arn = pulumi.runtime.UNKNOWN
        """
        The ARN of the ELB
        """
        __self__.dns_name = pulumi.runtime.UNKNOWN
        """
        The DNS name of the ELB
        """
        __self__.source_security_group_id = pulumi.runtime.UNKNOWN
        """
        The ID of the security group that you can use as
        part of your inbound rules for your load balancer's back-end application
        instances. Only available on ELBs launched in a VPC.
        """
        __self__.zone_id = pulumi.runtime.UNKNOWN
        """
        The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
        """

        super(LoadBalancer, __self__).__init__(
            'aws:elasticloadbalancing/loadBalancer:LoadBalancer',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'accessLogs' in outs:
            self.access_logs = outs['accessLogs']
        if 'arn' in outs:
            self.arn = outs['arn']
        if 'availabilityZones' in outs:
            self.availability_zones = outs['availabilityZones']
        if 'connectionDraining' in outs:
            self.connection_draining = outs['connectionDraining']
        if 'connectionDrainingTimeout' in outs:
            self.connection_draining_timeout = outs['connectionDrainingTimeout']
        if 'crossZoneLoadBalancing' in outs:
            self.cross_zone_load_balancing = outs['crossZoneLoadBalancing']
        if 'dnsName' in outs:
            self.dns_name = outs['dnsName']
        if 'healthCheck' in outs:
            self.health_check = outs['healthCheck']
        if 'idleTimeout' in outs:
            self.idle_timeout = outs['idleTimeout']
        if 'instances' in outs:
            self.instances = outs['instances']
        if 'internal' in outs:
            self.internal = outs['internal']
        if 'listeners' in outs:
            self.listeners = outs['listeners']
        if 'name' in outs:
            self.name = outs['name']
        if 'namePrefix' in outs:
            self.name_prefix = outs['namePrefix']
        if 'securityGroups' in outs:
            self.security_groups = outs['securityGroups']
        if 'sourceSecurityGroup' in outs:
            self.source_security_group = outs['sourceSecurityGroup']
        if 'sourceSecurityGroupId' in outs:
            self.source_security_group_id = outs['sourceSecurityGroupId']
        if 'subnets' in outs:
            self.subnets = outs['subnets']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'zoneId' in outs:
            self.zone_id = outs['zoneId']
