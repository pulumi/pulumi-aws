# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class BucketMetric(pulumi.CustomResource):
    """
    Provides a S3 bucket [metrics configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html) resource.
    """
    def __init__(__self__, __name__, __opts__=None, bucket=None, filter=None, name=None):
        """Create a BucketMetric resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not bucket:
            raise TypeError('Missing required property bucket')
        elif not isinstance(bucket, basestring):
            raise TypeError('Expected property bucket to be a basestring')
        __self__.bucket = bucket
        """
        The name of the bucket to put metric configuration.
        """
        __props__['bucket'] = bucket

        if filter and not isinstance(filter, dict):
            raise TypeError('Expected property filter to be a dict')
        __self__.filter = filter
        """
        [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
        """
        __props__['filter'] = filter

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Unique identifier of the metrics configuration for the bucket.
        """
        __props__['name'] = name

        super(BucketMetric, __self__).__init__(
            'aws:s3/bucketMetric:BucketMetric',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'bucket' in outs:
            self.bucket = outs['bucket']
        if 'filter' in outs:
            self.filter = outs['filter']
        if 'name' in outs:
            self.name = outs['name']
