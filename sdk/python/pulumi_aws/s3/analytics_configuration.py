# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class AnalyticsConfiguration(pulumi.CustomResource):
    bucket: pulumi.Output[str]
    filter: pulumi.Output[dict]
    name: pulumi.Output[str]
    storage_class_analysis: pulumi.Output[dict]
    def __init__(__self__, resource_name, opts=None, bucket=None, filter=None, name=None, storage_class_analysis=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a AnalyticsConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **filter** object supports the following:

          * `prefix` (`pulumi.Input[str]`)
          * `tags` (`pulumi.Input[dict]`)

        The **storage_class_analysis** object supports the following:

          * `dataExport` (`pulumi.Input[dict]`)
            * `destination` (`pulumi.Input[dict]`)
              * `s3BucketDestination` (`pulumi.Input[dict]`)
                * `bucketAccountId` (`pulumi.Input[str]`)
                * `bucketArn` (`pulumi.Input[str]`)
                * `format` (`pulumi.Input[str]`)
                * `prefix` (`pulumi.Input[str]`)

            * `outputSchemaVersion` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if bucket is None:
                raise TypeError("Missing required property 'bucket'")
            __props__['bucket'] = bucket
            __props__['filter'] = filter
            __props__['name'] = name
            __props__['storage_class_analysis'] = storage_class_analysis
        super(AnalyticsConfiguration, __self__).__init__(
            'aws:s3/analyticsConfiguration:AnalyticsConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, bucket=None, filter=None, name=None, storage_class_analysis=None):
        """
        Get an existing AnalyticsConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **filter** object supports the following:

          * `prefix` (`pulumi.Input[str]`)
          * `tags` (`pulumi.Input[dict]`)

        The **storage_class_analysis** object supports the following:

          * `dataExport` (`pulumi.Input[dict]`)
            * `destination` (`pulumi.Input[dict]`)
              * `s3BucketDestination` (`pulumi.Input[dict]`)
                * `bucketAccountId` (`pulumi.Input[str]`)
                * `bucketArn` (`pulumi.Input[str]`)
                * `format` (`pulumi.Input[str]`)
                * `prefix` (`pulumi.Input[str]`)

            * `outputSchemaVersion` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["bucket"] = bucket
        __props__["filter"] = filter
        __props__["name"] = name
        __props__["storage_class_analysis"] = storage_class_analysis
        return AnalyticsConfiguration(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

