# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Bucket(pulumi.CustomResource):
    """
    Provides a S3 bucket resource.
    """
    def __init__(__self__, __name__, __opts__=None, acceleration_status=None, acl=None, arn=None, bucket=None, bucket_prefix=None, cors_rules=None, force_destroy=None, hosted_zone_id=None, lifecycle_rules=None, loggings=None, policy=None, region=None, replication_configuration=None, request_payer=None, server_side_encryption_configuration=None, tags=None, versioning=None, website=None, website_domain=None, website_endpoint=None):
        """Create a Bucket resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['accelerationStatus'] = acceleration_status

        __props__['acl'] = acl

        __props__['arn'] = arn

        __props__['bucket'] = bucket

        __props__['bucketPrefix'] = bucket_prefix

        __props__['corsRules'] = cors_rules

        __props__['forceDestroy'] = force_destroy

        __props__['hostedZoneId'] = hosted_zone_id

        __props__['lifecycleRules'] = lifecycle_rules

        __props__['loggings'] = loggings

        __props__['policy'] = policy

        __props__['region'] = region

        __props__['replicationConfiguration'] = replication_configuration

        __props__['requestPayer'] = request_payer

        __props__['serverSideEncryptionConfiguration'] = server_side_encryption_configuration

        __props__['tags'] = tags

        __props__['versioning'] = versioning

        __props__['website'] = website

        __props__['websiteDomain'] = website_domain

        __props__['websiteEndpoint'] = website_endpoint

        __props__['bucket_domain_name'] = None
        __props__['bucket_regional_domain_name'] = None

        super(Bucket, __self__).__init__(
            'aws:s3/bucket:Bucket',
            __name__,
            __props__,
            __opts__)

