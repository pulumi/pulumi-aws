# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BotAbortStatementArgs',
    'BotAbortStatementMessageArgs',
    'BotAliasConversationLogsArgs',
    'BotAliasConversationLogsLogSettingArgs',
    'BotClarificationPromptArgs',
    'BotClarificationPromptMessageArgs',
    'BotIntentArgs',
    'IntentConclusionStatementArgs',
    'IntentConclusionStatementMessageArgs',
    'IntentConfirmationPromptArgs',
    'IntentConfirmationPromptMessageArgs',
    'IntentDialogCodeHookArgs',
    'IntentFollowUpPromptArgs',
    'IntentFollowUpPromptPromptArgs',
    'IntentFollowUpPromptPromptMessageArgs',
    'IntentFollowUpPromptRejectionStatementArgs',
    'IntentFollowUpPromptRejectionStatementMessageArgs',
    'IntentFulfillmentActivityArgs',
    'IntentFulfillmentActivityCodeHookArgs',
    'IntentRejectionStatementArgs',
    'IntentRejectionStatementMessageArgs',
    'IntentSlotArgs',
    'IntentSlotValueElicitationPromptArgs',
    'IntentSlotValueElicitationPromptMessageArgs',
    'SlotTypeEnumerationValueArgs',
]

@pulumi.input_type
class BotAbortStatementArgs:
    def __init__(__self__, *,
                 messages: pulumi.Input[Sequence[pulumi.Input['BotAbortStatementMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['BotAbortStatementMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['BotAbortStatementMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


@pulumi.input_type
class BotAbortStatementMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


@pulumi.input_type
class BotAliasConversationLogsArgs:
    def __init__(__self__, *,
                 iam_role_arn: pulumi.Input[str],
                 log_settings: Optional[pulumi.Input[Sequence[pulumi.Input['BotAliasConversationLogsLogSettingArgs']]]] = None):
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)
        if log_settings is not None:
            pulumi.set(__self__, "log_settings", log_settings)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "iam_role_arn")

    @iam_role_arn.setter
    def iam_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iam_role_arn", value)

    @property
    @pulumi.getter(name="logSettings")
    def log_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BotAliasConversationLogsLogSettingArgs']]]]:
        return pulumi.get(self, "log_settings")

    @log_settings.setter
    def log_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BotAliasConversationLogsLogSettingArgs']]]]):
        pulumi.set(self, "log_settings", value)


@pulumi.input_type
class BotAliasConversationLogsLogSettingArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 log_type: pulumi.Input[str],
                 resource_arn: pulumi.Input[str],
                 kms_key_arn: Optional[pulumi.Input[str]] = None,
                 resource_prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "resource_arn", resource_arn)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if resource_prefix is not None:
            pulumi.set(__self__, "resource_prefix", resource_prefix)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_arn", value)

    @property
    @pulumi.getter(name="resourcePrefix")
    def resource_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_prefix")

    @resource_prefix.setter
    def resource_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_prefix", value)


@pulumi.input_type
class BotClarificationPromptArgs:
    def __init__(__self__, *,
                 max_attempts: pulumi.Input[int],
                 messages: pulumi.Input[Sequence[pulumi.Input['BotClarificationPromptMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_attempts", value)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['BotClarificationPromptMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['BotClarificationPromptMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


@pulumi.input_type
class BotClarificationPromptMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


@pulumi.input_type
class BotIntentArgs:
    def __init__(__self__, *,
                 intent_name: pulumi.Input[str],
                 intent_version: pulumi.Input[str]):
        pulumi.set(__self__, "intent_name", intent_name)
        pulumi.set(__self__, "intent_version", intent_version)

    @property
    @pulumi.getter(name="intentName")
    def intent_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "intent_name")

    @intent_name.setter
    def intent_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "intent_name", value)

    @property
    @pulumi.getter(name="intentVersion")
    def intent_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "intent_version")

    @intent_version.setter
    def intent_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "intent_version", value)


@pulumi.input_type
class IntentConclusionStatementArgs:
    def __init__(__self__, *,
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentConclusionStatementMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentConclusionStatementMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentConclusionStatementMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


@pulumi.input_type
class IntentConclusionStatementMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


@pulumi.input_type
class IntentConfirmationPromptArgs:
    def __init__(__self__, *,
                 max_attempts: pulumi.Input[int],
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentConfirmationPromptMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_attempts", value)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentConfirmationPromptMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentConfirmationPromptMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


@pulumi.input_type
class IntentConfirmationPromptMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


@pulumi.input_type
class IntentDialogCodeHookArgs:
    def __init__(__self__, *,
                 message_version: pulumi.Input[str],
                 uri: pulumi.Input[str]):
        pulumi.set(__self__, "message_version", message_version)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="messageVersion")
    def message_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "message_version")

    @message_version.setter
    def message_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "message_version", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class IntentFollowUpPromptArgs:
    def __init__(__self__, *,
                 prompt: pulumi.Input['IntentFollowUpPromptPromptArgs'],
                 rejection_statement: pulumi.Input['IntentFollowUpPromptRejectionStatementArgs']):
        pulumi.set(__self__, "prompt", prompt)
        pulumi.set(__self__, "rejection_statement", rejection_statement)

    @property
    @pulumi.getter
    def prompt(self) -> pulumi.Input['IntentFollowUpPromptPromptArgs']:
        return pulumi.get(self, "prompt")

    @prompt.setter
    def prompt(self, value: pulumi.Input['IntentFollowUpPromptPromptArgs']):
        pulumi.set(self, "prompt", value)

    @property
    @pulumi.getter(name="rejectionStatement")
    def rejection_statement(self) -> pulumi.Input['IntentFollowUpPromptRejectionStatementArgs']:
        return pulumi.get(self, "rejection_statement")

    @rejection_statement.setter
    def rejection_statement(self, value: pulumi.Input['IntentFollowUpPromptRejectionStatementArgs']):
        pulumi.set(self, "rejection_statement", value)


@pulumi.input_type
class IntentFollowUpPromptPromptArgs:
    def __init__(__self__, *,
                 max_attempts: pulumi.Input[int],
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptPromptMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_attempts", value)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptPromptMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptPromptMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


@pulumi.input_type
class IntentFollowUpPromptPromptMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


@pulumi.input_type
class IntentFollowUpPromptRejectionStatementArgs:
    def __init__(__self__, *,
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptRejectionStatementMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptRejectionStatementMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptRejectionStatementMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


@pulumi.input_type
class IntentFollowUpPromptRejectionStatementMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


@pulumi.input_type
class IntentFulfillmentActivityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 code_hook: Optional[pulumi.Input['IntentFulfillmentActivityCodeHookArgs']] = None):
        pulumi.set(__self__, "type", type)
        if code_hook is not None:
            pulumi.set(__self__, "code_hook", code_hook)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="codeHook")
    def code_hook(self) -> Optional[pulumi.Input['IntentFulfillmentActivityCodeHookArgs']]:
        return pulumi.get(self, "code_hook")

    @code_hook.setter
    def code_hook(self, value: Optional[pulumi.Input['IntentFulfillmentActivityCodeHookArgs']]):
        pulumi.set(self, "code_hook", value)


@pulumi.input_type
class IntentFulfillmentActivityCodeHookArgs:
    def __init__(__self__, *,
                 message_version: pulumi.Input[str],
                 uri: pulumi.Input[str]):
        pulumi.set(__self__, "message_version", message_version)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="messageVersion")
    def message_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "message_version")

    @message_version.setter
    def message_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "message_version", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class IntentRejectionStatementArgs:
    def __init__(__self__, *,
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentRejectionStatementMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentRejectionStatementMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentRejectionStatementMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


@pulumi.input_type
class IntentRejectionStatementMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


@pulumi.input_type
class IntentSlotArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 slot_constraint: pulumi.Input[str],
                 slot_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 response_card: Optional[pulumi.Input[str]] = None,
                 sample_utterances: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slot_type_version: Optional[pulumi.Input[str]] = None,
                 value_elicitation_prompt: Optional[pulumi.Input['IntentSlotValueElicitationPromptArgs']] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slot_constraint", slot_constraint)
        pulumi.set(__self__, "slot_type", slot_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)
        if sample_utterances is not None:
            pulumi.set(__self__, "sample_utterances", sample_utterances)
        if slot_type_version is not None:
            pulumi.set(__self__, "slot_type_version", slot_type_version)
        if value_elicitation_prompt is not None:
            pulumi.set(__self__, "value_elicitation_prompt", value_elicitation_prompt)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="slotConstraint")
    def slot_constraint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slot_constraint")

    @slot_constraint.setter
    def slot_constraint(self, value: pulumi.Input[str]):
        pulumi.set(self, "slot_constraint", value)

    @property
    @pulumi.getter(name="slotType")
    def slot_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slot_type")

    @slot_type.setter
    def slot_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "slot_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)

    @property
    @pulumi.getter(name="sampleUtterances")
    def sample_utterances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sample_utterances")

    @sample_utterances.setter
    def sample_utterances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sample_utterances", value)

    @property
    @pulumi.getter(name="slotTypeVersion")
    def slot_type_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot_type_version")

    @slot_type_version.setter
    def slot_type_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_type_version", value)

    @property
    @pulumi.getter(name="valueElicitationPrompt")
    def value_elicitation_prompt(self) -> Optional[pulumi.Input['IntentSlotValueElicitationPromptArgs']]:
        return pulumi.get(self, "value_elicitation_prompt")

    @value_elicitation_prompt.setter
    def value_elicitation_prompt(self, value: Optional[pulumi.Input['IntentSlotValueElicitationPromptArgs']]):
        pulumi.set(self, "value_elicitation_prompt", value)


@pulumi.input_type
class IntentSlotValueElicitationPromptArgs:
    def __init__(__self__, *,
                 max_attempts: pulumi.Input[int],
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentSlotValueElicitationPromptMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_attempts", value)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentSlotValueElicitationPromptMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentSlotValueElicitationPromptMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


@pulumi.input_type
class IntentSlotValueElicitationPromptMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


@pulumi.input_type
class SlotTypeEnumerationValueArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "value", value)
        if synonyms is not None:
            pulumi.set(__self__, "synonyms", synonyms)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "synonyms")

    @synonyms.setter
    def synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "synonyms", value)


