# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BotAbortStatementArgs',
    'BotAbortStatementArgsDict',
    'BotAbortStatementMessageArgs',
    'BotAbortStatementMessageArgsDict',
    'BotAliasConversationLogsArgs',
    'BotAliasConversationLogsArgsDict',
    'BotAliasConversationLogsLogSettingArgs',
    'BotAliasConversationLogsLogSettingArgsDict',
    'BotClarificationPromptArgs',
    'BotClarificationPromptArgsDict',
    'BotClarificationPromptMessageArgs',
    'BotClarificationPromptMessageArgsDict',
    'BotIntentArgs',
    'BotIntentArgsDict',
    'IntentConclusionStatementArgs',
    'IntentConclusionStatementArgsDict',
    'IntentConclusionStatementMessageArgs',
    'IntentConclusionStatementMessageArgsDict',
    'IntentConfirmationPromptArgs',
    'IntentConfirmationPromptArgsDict',
    'IntentConfirmationPromptMessageArgs',
    'IntentConfirmationPromptMessageArgsDict',
    'IntentDialogCodeHookArgs',
    'IntentDialogCodeHookArgsDict',
    'IntentFollowUpPromptArgs',
    'IntentFollowUpPromptArgsDict',
    'IntentFollowUpPromptPromptArgs',
    'IntentFollowUpPromptPromptArgsDict',
    'IntentFollowUpPromptPromptMessageArgs',
    'IntentFollowUpPromptPromptMessageArgsDict',
    'IntentFollowUpPromptRejectionStatementArgs',
    'IntentFollowUpPromptRejectionStatementArgsDict',
    'IntentFollowUpPromptRejectionStatementMessageArgs',
    'IntentFollowUpPromptRejectionStatementMessageArgsDict',
    'IntentFulfillmentActivityArgs',
    'IntentFulfillmentActivityArgsDict',
    'IntentFulfillmentActivityCodeHookArgs',
    'IntentFulfillmentActivityCodeHookArgsDict',
    'IntentRejectionStatementArgs',
    'IntentRejectionStatementArgsDict',
    'IntentRejectionStatementMessageArgs',
    'IntentRejectionStatementMessageArgsDict',
    'IntentSlotArgs',
    'IntentSlotArgsDict',
    'IntentSlotValueElicitationPromptArgs',
    'IntentSlotValueElicitationPromptArgsDict',
    'IntentSlotValueElicitationPromptMessageArgs',
    'IntentSlotValueElicitationPromptMessageArgsDict',
    'SlotTypeEnumerationValueArgs',
    'SlotTypeEnumerationValueArgsDict',
    'V2modelsBotDataPrivacyArgs',
    'V2modelsBotDataPrivacyArgsDict',
    'V2modelsBotLocaleTimeoutsArgs',
    'V2modelsBotLocaleTimeoutsArgsDict',
    'V2modelsBotLocaleVoiceSettingsArgs',
    'V2modelsBotLocaleVoiceSettingsArgsDict',
    'V2modelsBotMemberArgs',
    'V2modelsBotMemberArgsDict',
    'V2modelsBotTimeoutsArgs',
    'V2modelsBotTimeoutsArgsDict',
    'V2modelsBotVersionLocaleSpecificationArgs',
    'V2modelsBotVersionLocaleSpecificationArgsDict',
    'V2modelsBotVersionTimeoutsArgs',
    'V2modelsBotVersionTimeoutsArgsDict',
    'V2modelsIntentClosingSettingArgs',
    'V2modelsIntentClosingSettingArgsDict',
    'V2modelsIntentClosingSettingClosingResponseArgs',
    'V2modelsIntentClosingSettingClosingResponseArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentClosingSettingConditionalArgs',
    'V2modelsIntentClosingSettingConditionalArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentClosingSettingNextStepArgs',
    'V2modelsIntentClosingSettingNextStepArgsDict',
    'V2modelsIntentClosingSettingNextStepDialogActionArgs',
    'V2modelsIntentClosingSettingNextStepDialogActionArgsDict',
    'V2modelsIntentClosingSettingNextStepIntentArgs',
    'V2modelsIntentClosingSettingNextStepIntentArgsDict',
    'V2modelsIntentClosingSettingNextStepIntentSlotArgs',
    'V2modelsIntentClosingSettingNextStepIntentSlotArgsDict',
    'V2modelsIntentClosingSettingNextStepIntentSlotValueArgs',
    'V2modelsIntentClosingSettingNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingArgs',
    'V2modelsIntentConfirmationSettingArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookArgs',
    'V2modelsIntentConfirmationSettingCodeHookArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationNextStepArgs',
    'V2modelsIntentConfirmationSettingConfirmationNextStepArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationNextStepArgs',
    'V2modelsIntentConfirmationSettingDeclinationNextStepArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingElicitationCodeHookArgs',
    'V2modelsIntentConfirmationSettingElicitationCodeHookArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureNextStepArgs',
    'V2modelsIntentConfirmationSettingFailureNextStepArgsDict',
    'V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgs',
    'V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgsDict',
    'V2modelsIntentConfirmationSettingFailureNextStepIntentArgs',
    'V2modelsIntentConfirmationSettingFailureNextStepIntentArgsDict',
    'V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgs',
    'V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgsDict',
    'V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgs',
    'V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseArgs',
    'V2modelsIntentConfirmationSettingFailureResponseArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs',
    'V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict',
    'V2modelsIntentDialogCodeHookArgs',
    'V2modelsIntentDialogCodeHookArgsDict',
    'V2modelsIntentFulfillmentCodeHookArgs',
    'V2modelsIntentFulfillmentCodeHookArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingArgs',
    'V2modelsIntentInitialResponseSettingArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookArgs',
    'V2modelsIntentInitialResponseSettingCodeHookArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalArgs',
    'V2modelsIntentInitialResponseSettingConditionalArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsIntentInitialResponseSettingNextStepArgs',
    'V2modelsIntentInitialResponseSettingNextStepArgsDict',
    'V2modelsIntentInitialResponseSettingNextStepDialogActionArgs',
    'V2modelsIntentInitialResponseSettingNextStepDialogActionArgsDict',
    'V2modelsIntentInitialResponseSettingNextStepIntentArgs',
    'V2modelsIntentInitialResponseSettingNextStepIntentArgsDict',
    'V2modelsIntentInitialResponseSettingNextStepIntentSlotArgs',
    'V2modelsIntentInitialResponseSettingNextStepIntentSlotArgsDict',
    'V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgs',
    'V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgsDict',
    'V2modelsIntentInputContextArgs',
    'V2modelsIntentInputContextArgsDict',
    'V2modelsIntentKendraConfigurationArgs',
    'V2modelsIntentKendraConfigurationArgsDict',
    'V2modelsIntentOutputContextArgs',
    'V2modelsIntentOutputContextArgsDict',
    'V2modelsIntentSampleUtteranceArgs',
    'V2modelsIntentSampleUtteranceArgsDict',
    'V2modelsIntentSlotPriorityArgs',
    'V2modelsIntentSlotPriorityArgsDict',
    'V2modelsIntentTimeoutsArgs',
    'V2modelsIntentTimeoutsArgsDict',
    'V2modelsSlotMultipleValuesSettingArgs',
    'V2modelsSlotMultipleValuesSettingArgsDict',
    'V2modelsSlotObfuscationSettingArgs',
    'V2modelsSlotObfuscationSettingArgsDict',
    'V2modelsSlotSubSlotSettingArgs',
    'V2modelsSlotSubSlotSettingArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationDefaultValueListArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingSampleUtteranceArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingSampleUtteranceArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsSlotTimeoutsArgs',
    'V2modelsSlotTimeoutsArgsDict',
    'V2modelsSlotTypeCompositeSlotTypeSettingArgs',
    'V2modelsSlotTypeCompositeSlotTypeSettingArgsDict',
    'V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs',
    'V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgsDict',
    'V2modelsSlotTypeExternalSourceSettingArgs',
    'V2modelsSlotTypeExternalSourceSettingArgsDict',
    'V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgs',
    'V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgsDict',
    'V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgs',
    'V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgsDict',
    'V2modelsSlotTypeSlotTypeValuesArgs',
    'V2modelsSlotTypeSlotTypeValuesArgsDict',
    'V2modelsSlotTypeSlotTypeValuesSampleValueArgs',
    'V2modelsSlotTypeSlotTypeValuesSampleValueArgsDict',
    'V2modelsSlotTypeSlotTypeValuesSynonymArgs',
    'V2modelsSlotTypeSlotTypeValuesSynonymArgsDict',
    'V2modelsSlotTypeTimeoutsArgs',
    'V2modelsSlotTypeTimeoutsArgsDict',
    'V2modelsSlotTypeValueSelectionSettingArgs',
    'V2modelsSlotTypeValueSelectionSettingArgsDict',
    'V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs',
    'V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgsDict',
    'V2modelsSlotTypeValueSelectionSettingRegexFilterArgs',
    'V2modelsSlotTypeValueSelectionSettingRegexFilterArgsDict',
    'V2modelsSlotValueElicitationSettingArgs',
    'V2modelsSlotValueElicitationSettingArgsDict',
    'V2modelsSlotValueElicitationSettingDefaultValueSpecificationArgs',
    'V2modelsSlotValueElicitationSettingDefaultValueSpecificationArgsDict',
    'V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs',
    'V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueListArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs',
    'V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict',
    'V2modelsSlotValueElicitationSettingSampleUtteranceArgs',
    'V2modelsSlotValueElicitationSettingSampleUtteranceArgsDict',
    'V2modelsSlotValueElicitationSettingSlotResolutionSettingArgs',
    'V2modelsSlotValueElicitationSettingSlotResolutionSettingArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgsDict',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgs',
    'V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgsDict',
]

MYPY = False

if not MYPY:
    class BotAbortStatementArgsDict(TypedDict):
        messages: pulumi.Input[Sequence[pulumi.Input['BotAbortStatementMessageArgsDict']]]
        response_card: NotRequired[pulumi.Input[str]]
elif False:
    BotAbortStatementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BotAbortStatementArgs:
    def __init__(__self__, *,
                 messages: pulumi.Input[Sequence[pulumi.Input['BotAbortStatementMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['BotAbortStatementMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['BotAbortStatementMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


if not MYPY:
    class BotAbortStatementMessageArgsDict(TypedDict):
        content: pulumi.Input[str]
        """
        The text of the message.
        """
        content_type: pulumi.Input[str]
        """
        The content type of the message string.
        """
        group_number: NotRequired[pulumi.Input[int]]
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response.
        """
elif False:
    BotAbortStatementMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BotAbortStatementMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content: The text of the message.
        :param pulumi.Input[str] content_type: The content type of the message string.
        :param pulumi.Input[int] group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The text of the message.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response.
        """
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


if not MYPY:
    class BotAliasConversationLogsArgsDict(TypedDict):
        iam_role_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.
        """
        log_settings: NotRequired[pulumi.Input[Sequence[pulumi.Input['BotAliasConversationLogsLogSettingArgsDict']]]]
        """
        The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.
        """
elif False:
    BotAliasConversationLogsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BotAliasConversationLogsArgs:
    def __init__(__self__, *,
                 iam_role_arn: pulumi.Input[str],
                 log_settings: Optional[pulumi.Input[Sequence[pulumi.Input['BotAliasConversationLogsLogSettingArgs']]]] = None):
        """
        :param pulumi.Input[str] iam_role_arn: The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.
        :param pulumi.Input[Sequence[pulumi.Input['BotAliasConversationLogsLogSettingArgs']]] log_settings: The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.
        """
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)
        if log_settings is not None:
            pulumi.set(__self__, "log_settings", log_settings)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.
        """
        return pulumi.get(self, "iam_role_arn")

    @iam_role_arn.setter
    def iam_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iam_role_arn", value)

    @property
    @pulumi.getter(name="logSettings")
    def log_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BotAliasConversationLogsLogSettingArgs']]]]:
        """
        The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.
        """
        return pulumi.get(self, "log_settings")

    @log_settings.setter
    def log_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BotAliasConversationLogsLogSettingArgs']]]]):
        pulumi.set(self, "log_settings", value)


if not MYPY:
    class BotAliasConversationLogsLogSettingArgsDict(TypedDict):
        destination: pulumi.Input[str]
        """
        The destination where logs are delivered. Options are `CLOUDWATCH_LOGS` or `S3`.
        """
        log_type: pulumi.Input[str]
        """
        The type of logging that is enabled. Options are `AUDIO` or `TEXT`.
        """
        resource_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.
        """
        kms_key_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when `destination` is set to `S3`. Must be between 20 and 2048 characters in length.
        """
        resource_prefix: NotRequired[pulumi.Input[str]]
        """
        The prefix of the S3 object key for `AUDIO` logs or the log stream name for `TEXT` logs.
        """
elif False:
    BotAliasConversationLogsLogSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BotAliasConversationLogsLogSettingArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 log_type: pulumi.Input[str],
                 resource_arn: pulumi.Input[str],
                 kms_key_arn: Optional[pulumi.Input[str]] = None,
                 resource_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] destination: The destination where logs are delivered. Options are `CLOUDWATCH_LOGS` or `S3`.
        :param pulumi.Input[str] log_type: The type of logging that is enabled. Options are `AUDIO` or `TEXT`.
        :param pulumi.Input[str] resource_arn: The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.
        :param pulumi.Input[str] kms_key_arn: The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when `destination` is set to `S3`. Must be between 20 and 2048 characters in length.
        :param pulumi.Input[str] resource_prefix: The prefix of the S3 object key for `AUDIO` logs or the log stream name for `TEXT` logs.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "resource_arn", resource_arn)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if resource_prefix is not None:
            pulumi.set(__self__, "resource_prefix", resource_prefix)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        The destination where logs are delivered. Options are `CLOUDWATCH_LOGS` or `S3`.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        """
        The type of logging that is enabled. Options are `AUDIO` or `TEXT`.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.
        """
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when `destination` is set to `S3`. Must be between 20 and 2048 characters in length.
        """
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_arn", value)

    @property
    @pulumi.getter(name="resourcePrefix")
    def resource_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix of the S3 object key for `AUDIO` logs or the log stream name for `TEXT` logs.
        """
        return pulumi.get(self, "resource_prefix")

    @resource_prefix.setter
    def resource_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_prefix", value)


if not MYPY:
    class BotClarificationPromptArgsDict(TypedDict):
        max_attempts: pulumi.Input[int]
        """
        The number of times to prompt the user for information.
        """
        messages: pulumi.Input[Sequence[pulumi.Input['BotClarificationPromptMessageArgsDict']]]
        response_card: NotRequired[pulumi.Input[str]]
elif False:
    BotClarificationPromptArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BotClarificationPromptArgs:
    def __init__(__self__, *,
                 max_attempts: pulumi.Input[int],
                 messages: pulumi.Input[Sequence[pulumi.Input['BotClarificationPromptMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] max_attempts: The number of times to prompt the user for information.
        """
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> pulumi.Input[int]:
        """
        The number of times to prompt the user for information.
        """
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_attempts", value)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['BotClarificationPromptMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['BotClarificationPromptMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


if not MYPY:
    class BotClarificationPromptMessageArgsDict(TypedDict):
        content: pulumi.Input[str]
        """
        The text of the message.
        """
        content_type: pulumi.Input[str]
        """
        The content type of the message string.
        """
        group_number: NotRequired[pulumi.Input[int]]
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response.
        """
elif False:
    BotClarificationPromptMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BotClarificationPromptMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content: The text of the message.
        :param pulumi.Input[str] content_type: The content type of the message string.
        :param pulumi.Input[int] group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The text of the message.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response.
        """
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


if not MYPY:
    class BotIntentArgsDict(TypedDict):
        intent_name: pulumi.Input[str]
        """
        The name of the intent. Must be less than or equal to 100 characters in length.
        """
        intent_version: pulumi.Input[str]
        """
        The version of the intent. Must be less than or equal to 64 characters in length.
        """
elif False:
    BotIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BotIntentArgs:
    def __init__(__self__, *,
                 intent_name: pulumi.Input[str],
                 intent_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] intent_name: The name of the intent. Must be less than or equal to 100 characters in length.
        :param pulumi.Input[str] intent_version: The version of the intent. Must be less than or equal to 64 characters in length.
        """
        pulumi.set(__self__, "intent_name", intent_name)
        pulumi.set(__self__, "intent_version", intent_version)

    @property
    @pulumi.getter(name="intentName")
    def intent_name(self) -> pulumi.Input[str]:
        """
        The name of the intent. Must be less than or equal to 100 characters in length.
        """
        return pulumi.get(self, "intent_name")

    @intent_name.setter
    def intent_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "intent_name", value)

    @property
    @pulumi.getter(name="intentVersion")
    def intent_version(self) -> pulumi.Input[str]:
        """
        The version of the intent. Must be less than or equal to 64 characters in length.
        """
        return pulumi.get(self, "intent_version")

    @intent_version.setter
    def intent_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "intent_version", value)


if not MYPY:
    class IntentConclusionStatementArgsDict(TypedDict):
        messages: pulumi.Input[Sequence[pulumi.Input['IntentConclusionStatementMessageArgsDict']]]
        response_card: NotRequired[pulumi.Input[str]]
elif False:
    IntentConclusionStatementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentConclusionStatementArgs:
    def __init__(__self__, *,
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentConclusionStatementMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentConclusionStatementMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentConclusionStatementMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


if not MYPY:
    class IntentConclusionStatementMessageArgsDict(TypedDict):
        content: pulumi.Input[str]
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        content_type: pulumi.Input[str]
        """
        The content type of the message string.
        """
        group_number: NotRequired[pulumi.Input[int]]
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
elif False:
    IntentConclusionStatementMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentConclusionStatementMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param pulumi.Input[str] content_type: The content type of the message string.
        :param pulumi.Input[int] group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


if not MYPY:
    class IntentConfirmationPromptArgsDict(TypedDict):
        max_attempts: pulumi.Input[int]
        """
        The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        messages: pulumi.Input[Sequence[pulumi.Input['IntentConfirmationPromptMessageArgsDict']]]
        response_card: NotRequired[pulumi.Input[str]]
elif False:
    IntentConfirmationPromptArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentConfirmationPromptArgs:
    def __init__(__self__, *,
                 max_attempts: pulumi.Input[int],
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentConfirmationPromptMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] max_attempts: The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> pulumi.Input[int]:
        """
        The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_attempts", value)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentConfirmationPromptMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentConfirmationPromptMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


if not MYPY:
    class IntentConfirmationPromptMessageArgsDict(TypedDict):
        content: pulumi.Input[str]
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        content_type: pulumi.Input[str]
        """
        The content type of the message string.
        """
        group_number: NotRequired[pulumi.Input[int]]
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
elif False:
    IntentConfirmationPromptMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentConfirmationPromptMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param pulumi.Input[str] content_type: The content type of the message string.
        :param pulumi.Input[int] group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


if not MYPY:
    class IntentDialogCodeHookArgsDict(TypedDict):
        message_version: pulumi.Input[str]
        """
        The version of the request-response that you want Amazon Lex to use
        to invoke your Lambda function. For more information, see
        [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
        """
        uri: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the Lambda function.
        """
elif False:
    IntentDialogCodeHookArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentDialogCodeHookArgs:
    def __init__(__self__, *,
                 message_version: pulumi.Input[str],
                 uri: pulumi.Input[str]):
        """
        :param pulumi.Input[str] message_version: The version of the request-response that you want Amazon Lex to use
               to invoke your Lambda function. For more information, see
               [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
        :param pulumi.Input[str] uri: The Amazon Resource Name (ARN) of the Lambda function.
        """
        pulumi.set(__self__, "message_version", message_version)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="messageVersion")
    def message_version(self) -> pulumi.Input[str]:
        """
        The version of the request-response that you want Amazon Lex to use
        to invoke your Lambda function. For more information, see
        [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
        """
        return pulumi.get(self, "message_version")

    @message_version.setter
    def message_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "message_version", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the Lambda function.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class IntentFollowUpPromptArgsDict(TypedDict):
        prompt: pulumi.Input['IntentFollowUpPromptPromptArgsDict']
        """
        Prompts for information from the user. Attributes are documented under prompt.
        """
        rejection_statement: pulumi.Input['IntentFollowUpPromptRejectionStatementArgsDict']
        """
        If the user answers "no" to the question defined in the prompt field,
        Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
        documented below under statement.
        """
elif False:
    IntentFollowUpPromptArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentFollowUpPromptArgs:
    def __init__(__self__, *,
                 prompt: pulumi.Input['IntentFollowUpPromptPromptArgs'],
                 rejection_statement: pulumi.Input['IntentFollowUpPromptRejectionStatementArgs']):
        """
        :param pulumi.Input['IntentFollowUpPromptPromptArgs'] prompt: Prompts for information from the user. Attributes are documented under prompt.
        :param pulumi.Input['IntentFollowUpPromptRejectionStatementArgs'] rejection_statement: If the user answers "no" to the question defined in the prompt field,
               Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
               documented below under statement.
        """
        pulumi.set(__self__, "prompt", prompt)
        pulumi.set(__self__, "rejection_statement", rejection_statement)

    @property
    @pulumi.getter
    def prompt(self) -> pulumi.Input['IntentFollowUpPromptPromptArgs']:
        """
        Prompts for information from the user. Attributes are documented under prompt.
        """
        return pulumi.get(self, "prompt")

    @prompt.setter
    def prompt(self, value: pulumi.Input['IntentFollowUpPromptPromptArgs']):
        pulumi.set(self, "prompt", value)

    @property
    @pulumi.getter(name="rejectionStatement")
    def rejection_statement(self) -> pulumi.Input['IntentFollowUpPromptRejectionStatementArgs']:
        """
        If the user answers "no" to the question defined in the prompt field,
        Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
        documented below under statement.
        """
        return pulumi.get(self, "rejection_statement")

    @rejection_statement.setter
    def rejection_statement(self, value: pulumi.Input['IntentFollowUpPromptRejectionStatementArgs']):
        pulumi.set(self, "rejection_statement", value)


if not MYPY:
    class IntentFollowUpPromptPromptArgsDict(TypedDict):
        max_attempts: pulumi.Input[int]
        """
        The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        messages: pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptPromptMessageArgsDict']]]
        """
        A set of messages, each of which provides a message string and its type.
        You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        Attributes are documented under message. Must contain between 1 and 15 messages.
        """
        response_card: NotRequired[pulumi.Input[str]]
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
elif False:
    IntentFollowUpPromptPromptArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentFollowUpPromptPromptArgs:
    def __init__(__self__, *,
                 max_attempts: pulumi.Input[int],
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptPromptMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] max_attempts: The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        :param pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptPromptMessageArgs']]] messages: A set of messages, each of which provides a message string and its type.
               You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
               Attributes are documented under message. Must contain between 1 and 15 messages.
        :param pulumi.Input[str] response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> pulumi.Input[int]:
        """
        The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_attempts", value)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptPromptMessageArgs']]]:
        """
        A set of messages, each of which provides a message string and its type.
        You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
        Attributes are documented under message. Must contain between 1 and 15 messages.
        """
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptPromptMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


if not MYPY:
    class IntentFollowUpPromptPromptMessageArgsDict(TypedDict):
        content: pulumi.Input[str]
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        content_type: pulumi.Input[str]
        """
        The content type of the message string.
        """
        group_number: NotRequired[pulumi.Input[int]]
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
elif False:
    IntentFollowUpPromptPromptMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentFollowUpPromptPromptMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param pulumi.Input[str] content_type: The content type of the message string.
        :param pulumi.Input[int] group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


if not MYPY:
    class IntentFollowUpPromptRejectionStatementArgsDict(TypedDict):
        messages: pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptRejectionStatementMessageArgsDict']]]
        response_card: NotRequired[pulumi.Input[str]]
elif False:
    IntentFollowUpPromptRejectionStatementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentFollowUpPromptRejectionStatementArgs:
    def __init__(__self__, *,
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptRejectionStatementMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptRejectionStatementMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentFollowUpPromptRejectionStatementMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


if not MYPY:
    class IntentFollowUpPromptRejectionStatementMessageArgsDict(TypedDict):
        content: pulumi.Input[str]
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        content_type: pulumi.Input[str]
        """
        The content type of the message string.
        """
        group_number: NotRequired[pulumi.Input[int]]
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
elif False:
    IntentFollowUpPromptRejectionStatementMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentFollowUpPromptRejectionStatementMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param pulumi.Input[str] content_type: The content type of the message string.
        :param pulumi.Input[int] group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


if not MYPY:
    class IntentFulfillmentActivityArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        How the intent should be fulfilled, either by running a Lambda function or by
        returning the slot data to the client application. Type can be either `ReturnIntent` or `CodeHook`, as documented [here](https://docs.aws.amazon.com/lex/latest/dg/API_FulfillmentActivity.html).
        """
        code_hook: NotRequired[pulumi.Input['IntentFulfillmentActivityCodeHookArgsDict']]
        """
        A description of the Lambda function that is run to fulfill the intent.
        Required if type is CodeHook. Attributes are documented under code_hook.
        """
elif False:
    IntentFulfillmentActivityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentFulfillmentActivityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 code_hook: Optional[pulumi.Input['IntentFulfillmentActivityCodeHookArgs']] = None):
        """
        :param pulumi.Input[str] type: How the intent should be fulfilled, either by running a Lambda function or by
               returning the slot data to the client application. Type can be either `ReturnIntent` or `CodeHook`, as documented [here](https://docs.aws.amazon.com/lex/latest/dg/API_FulfillmentActivity.html).
        :param pulumi.Input['IntentFulfillmentActivityCodeHookArgs'] code_hook: A description of the Lambda function that is run to fulfill the intent.
               Required if type is CodeHook. Attributes are documented under code_hook.
        """
        pulumi.set(__self__, "type", type)
        if code_hook is not None:
            pulumi.set(__self__, "code_hook", code_hook)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        How the intent should be fulfilled, either by running a Lambda function or by
        returning the slot data to the client application. Type can be either `ReturnIntent` or `CodeHook`, as documented [here](https://docs.aws.amazon.com/lex/latest/dg/API_FulfillmentActivity.html).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="codeHook")
    def code_hook(self) -> Optional[pulumi.Input['IntentFulfillmentActivityCodeHookArgs']]:
        """
        A description of the Lambda function that is run to fulfill the intent.
        Required if type is CodeHook. Attributes are documented under code_hook.
        """
        return pulumi.get(self, "code_hook")

    @code_hook.setter
    def code_hook(self, value: Optional[pulumi.Input['IntentFulfillmentActivityCodeHookArgs']]):
        pulumi.set(self, "code_hook", value)


if not MYPY:
    class IntentFulfillmentActivityCodeHookArgsDict(TypedDict):
        message_version: pulumi.Input[str]
        """
        The version of the request-response that you want Amazon Lex to use
        to invoke your Lambda function. For more information, see
        [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
        """
        uri: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the Lambda function.
        """
elif False:
    IntentFulfillmentActivityCodeHookArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentFulfillmentActivityCodeHookArgs:
    def __init__(__self__, *,
                 message_version: pulumi.Input[str],
                 uri: pulumi.Input[str]):
        """
        :param pulumi.Input[str] message_version: The version of the request-response that you want Amazon Lex to use
               to invoke your Lambda function. For more information, see
               [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
        :param pulumi.Input[str] uri: The Amazon Resource Name (ARN) of the Lambda function.
        """
        pulumi.set(__self__, "message_version", message_version)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="messageVersion")
    def message_version(self) -> pulumi.Input[str]:
        """
        The version of the request-response that you want Amazon Lex to use
        to invoke your Lambda function. For more information, see
        [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
        """
        return pulumi.get(self, "message_version")

    @message_version.setter
    def message_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "message_version", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the Lambda function.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class IntentRejectionStatementArgsDict(TypedDict):
        messages: pulumi.Input[Sequence[pulumi.Input['IntentRejectionStatementMessageArgsDict']]]
        response_card: NotRequired[pulumi.Input[str]]
elif False:
    IntentRejectionStatementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentRejectionStatementArgs:
    def __init__(__self__, *,
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentRejectionStatementMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentRejectionStatementMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentRejectionStatementMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


if not MYPY:
    class IntentRejectionStatementMessageArgsDict(TypedDict):
        content: pulumi.Input[str]
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        content_type: pulumi.Input[str]
        """
        The content type of the message string.
        """
        group_number: NotRequired[pulumi.Input[int]]
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
elif False:
    IntentRejectionStatementMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentRejectionStatementMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param pulumi.Input[str] content_type: The content type of the message string.
        :param pulumi.Input[int] group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


if not MYPY:
    class IntentSlotArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
        """
        slot_constraint: pulumi.Input[str]
        """
        Specifies whether the slot is required or optional.
        """
        slot_type: pulumi.Input[str]
        """
        The type of the slot, either a custom slot type that you defined or one of
        the built-in slot types. Must be less than or equal to 100 characters in length.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        A description of the bot. Must be less than or equal to 200 characters in length.
        """
        priority: NotRequired[pulumi.Input[int]]
        """
        Directs Lex the order in which to elicit this slot value from the user.
        For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for
        the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits
        values is arbitrary. Must be between 1 and 100.
        """
        response_card: NotRequired[pulumi.Input[str]]
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        sample_utterances: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        If you know a specific pattern with which users might respond to
        an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
        is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
        """
        slot_type_version: NotRequired[pulumi.Input[str]]
        """
        The version of the slot type. Must be less than or equal to 64 characters in length.
        """
        value_elicitation_prompt: NotRequired[pulumi.Input['IntentSlotValueElicitationPromptArgsDict']]
        """
        The prompt that Amazon Lex uses to elicit the slot value
        from the user. Attributes are documented under prompt.
        """
elif False:
    IntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentSlotArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 slot_constraint: pulumi.Input[str],
                 slot_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 response_card: Optional[pulumi.Input[str]] = None,
                 sample_utterances: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slot_type_version: Optional[pulumi.Input[str]] = None,
                 value_elicitation_prompt: Optional[pulumi.Input['IntentSlotValueElicitationPromptArgs']] = None):
        """
        :param pulumi.Input[str] name: The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
        :param pulumi.Input[str] slot_constraint: Specifies whether the slot is required or optional.
        :param pulumi.Input[str] slot_type: The type of the slot, either a custom slot type that you defined or one of
               the built-in slot types. Must be less than or equal to 100 characters in length.
        :param pulumi.Input[str] description: A description of the bot. Must be less than or equal to 200 characters in length.
        :param pulumi.Input[int] priority: Directs Lex the order in which to elicit this slot value from the user.
               For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for
               the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits
               values is arbitrary. Must be between 1 and 100.
        :param pulumi.Input[str] response_card: The response card. Amazon Lex will substitute session attributes and
               slot values into the response card. For more information, see
               [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sample_utterances: If you know a specific pattern with which users might respond to
               an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
               is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
        :param pulumi.Input[str] slot_type_version: The version of the slot type. Must be less than or equal to 64 characters in length.
        :param pulumi.Input['IntentSlotValueElicitationPromptArgs'] value_elicitation_prompt: The prompt that Amazon Lex uses to elicit the slot value
               from the user. Attributes are documented under prompt.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slot_constraint", slot_constraint)
        pulumi.set(__self__, "slot_type", slot_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)
        if sample_utterances is not None:
            pulumi.set(__self__, "sample_utterances", sample_utterances)
        if slot_type_version is not None:
            pulumi.set(__self__, "slot_type_version", slot_type_version)
        if value_elicitation_prompt is not None:
            pulumi.set(__self__, "value_elicitation_prompt", value_elicitation_prompt)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="slotConstraint")
    def slot_constraint(self) -> pulumi.Input[str]:
        """
        Specifies whether the slot is required or optional.
        """
        return pulumi.get(self, "slot_constraint")

    @slot_constraint.setter
    def slot_constraint(self, value: pulumi.Input[str]):
        pulumi.set(self, "slot_constraint", value)

    @property
    @pulumi.getter(name="slotType")
    def slot_type(self) -> pulumi.Input[str]:
        """
        The type of the slot, either a custom slot type that you defined or one of
        the built-in slot types. Must be less than or equal to 100 characters in length.
        """
        return pulumi.get(self, "slot_type")

    @slot_type.setter
    def slot_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "slot_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the bot. Must be less than or equal to 200 characters in length.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Directs Lex the order in which to elicit this slot value from the user.
        For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for
        the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits
        values is arbitrary. Must be between 1 and 100.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        """
        The response card. Amazon Lex will substitute session attributes and
        slot values into the response card. For more information, see
        [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
        """
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)

    @property
    @pulumi.getter(name="sampleUtterances")
    def sample_utterances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If you know a specific pattern with which users might respond to
        an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
        is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
        """
        return pulumi.get(self, "sample_utterances")

    @sample_utterances.setter
    def sample_utterances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sample_utterances", value)

    @property
    @pulumi.getter(name="slotTypeVersion")
    def slot_type_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the slot type. Must be less than or equal to 64 characters in length.
        """
        return pulumi.get(self, "slot_type_version")

    @slot_type_version.setter
    def slot_type_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_type_version", value)

    @property
    @pulumi.getter(name="valueElicitationPrompt")
    def value_elicitation_prompt(self) -> Optional[pulumi.Input['IntentSlotValueElicitationPromptArgs']]:
        """
        The prompt that Amazon Lex uses to elicit the slot value
        from the user. Attributes are documented under prompt.
        """
        return pulumi.get(self, "value_elicitation_prompt")

    @value_elicitation_prompt.setter
    def value_elicitation_prompt(self, value: Optional[pulumi.Input['IntentSlotValueElicitationPromptArgs']]):
        pulumi.set(self, "value_elicitation_prompt", value)


if not MYPY:
    class IntentSlotValueElicitationPromptArgsDict(TypedDict):
        max_attempts: pulumi.Input[int]
        """
        The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        messages: pulumi.Input[Sequence[pulumi.Input['IntentSlotValueElicitationPromptMessageArgsDict']]]
        response_card: NotRequired[pulumi.Input[str]]
elif False:
    IntentSlotValueElicitationPromptArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentSlotValueElicitationPromptArgs:
    def __init__(__self__, *,
                 max_attempts: pulumi.Input[int],
                 messages: pulumi.Input[Sequence[pulumi.Input['IntentSlotValueElicitationPromptMessageArgs']]],
                 response_card: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] max_attempts: The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "max_attempts", max_attempts)
        pulumi.set(__self__, "messages", messages)
        if response_card is not None:
            pulumi.set(__self__, "response_card", response_card)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> pulumi.Input[int]:
        """
        The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_attempts", value)

    @property
    @pulumi.getter
    def messages(self) -> pulumi.Input[Sequence[pulumi.Input['IntentSlotValueElicitationPromptMessageArgs']]]:
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: pulumi.Input[Sequence[pulumi.Input['IntentSlotValueElicitationPromptMessageArgs']]]):
        pulumi.set(self, "messages", value)

    @property
    @pulumi.getter(name="responseCard")
    def response_card(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_card")

    @response_card.setter
    def response_card(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_card", value)


if not MYPY:
    class IntentSlotValueElicitationPromptMessageArgsDict(TypedDict):
        content: pulumi.Input[str]
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        content_type: pulumi.Input[str]
        """
        The content type of the message string.
        """
        group_number: NotRequired[pulumi.Input[int]]
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
elif False:
    IntentSlotValueElicitationPromptMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntentSlotValueElicitationPromptMessageArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input[str],
                 group_number: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content: The text of the message. Must be less than or equal to 1000 characters in length.
        :param pulumi.Input[str] content_type: The content type of the message string.
        :param pulumi.Input[int] group_number: Identifies the message group that the message belongs to. When a group
               is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The text of the message. Must be less than or equal to 1000 characters in length.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The content type of the message string.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[pulumi.Input[int]]:
        """
        Identifies the message group that the message belongs to. When a group
        is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
        """
        return pulumi.get(self, "group_number")

    @group_number.setter
    def group_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_number", value)


if not MYPY:
    class SlotTypeEnumerationValueArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        The value of the slot type. Must be less than or equal to 140 characters in length.
        """
        synonyms: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Additional values related to the slot type value. Each item must be less than or equal to 140 characters in length.
        """
elif False:
    SlotTypeEnumerationValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SlotTypeEnumerationValueArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] value: The value of the slot type. Must be less than or equal to 140 characters in length.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] synonyms: Additional values related to the slot type value. Each item must be less than or equal to 140 characters in length.
        """
        pulumi.set(__self__, "value", value)
        if synonyms is not None:
            pulumi.set(__self__, "synonyms", synonyms)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the slot type. Must be less than or equal to 140 characters in length.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional values related to the slot type value. Each item must be less than or equal to 140 characters in length.
        """
        return pulumi.get(self, "synonyms")

    @synonyms.setter
    def synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "synonyms", value)


if not MYPY:
    class V2modelsBotDataPrivacyArgsDict(TypedDict):
        child_directed: pulumi.Input[bool]
        """
        (Required) -  For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field.
        """
elif False:
    V2modelsBotDataPrivacyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsBotDataPrivacyArgs:
    def __init__(__self__, *,
                 child_directed: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] child_directed: (Required) -  For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field.
        """
        pulumi.set(__self__, "child_directed", child_directed)

    @property
    @pulumi.getter(name="childDirected")
    def child_directed(self) -> pulumi.Input[bool]:
        """
        (Required) -  For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field.
        """
        return pulumi.get(self, "child_directed")

    @child_directed.setter
    def child_directed(self, value: pulumi.Input[bool]):
        pulumi.set(self, "child_directed", value)


if not MYPY:
    class V2modelsBotLocaleTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        update: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    V2modelsBotLocaleTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsBotLocaleTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class V2modelsBotLocaleVoiceSettingsArgsDict(TypedDict):
        voice_id: pulumi.Input[str]
        """
        Identifier of the Amazon Polly voice to use.
        """
        engine: NotRequired[pulumi.Input[str]]
        """
        Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. Valid values are `standard` and `neural`. If not specified, the default is `standard`.
        """
elif False:
    V2modelsBotLocaleVoiceSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsBotLocaleVoiceSettingsArgs:
    def __init__(__self__, *,
                 voice_id: pulumi.Input[str],
                 engine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] voice_id: Identifier of the Amazon Polly voice to use.
        :param pulumi.Input[str] engine: Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. Valid values are `standard` and `neural`. If not specified, the default is `standard`.
        """
        pulumi.set(__self__, "voice_id", voice_id)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)

    @property
    @pulumi.getter(name="voiceId")
    def voice_id(self) -> pulumi.Input[str]:
        """
        Identifier of the Amazon Polly voice to use.
        """
        return pulumi.get(self, "voice_id")

    @voice_id.setter
    def voice_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "voice_id", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. Valid values are `standard` and `neural`. If not specified, the default is `standard`.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)


if not MYPY:
    class V2modelsBotMemberArgsDict(TypedDict):
        alias_id: pulumi.Input[str]
        """
        (Required) - Alias ID of a bot that is a member of this network of bots.
        """
        alias_name: pulumi.Input[str]
        """
        (Required) - Alias name of a bot that is a member of this network of bots.
        """
        id: pulumi.Input[str]
        """
        (Required) - Unique ID of a bot that is a member of this network of bots.
        """
        name: pulumi.Input[str]
        """
        Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
        """
        version: pulumi.Input[str]
        """
        (Required) - Version of a bot that is a member of this network of bots.
        """
elif False:
    V2modelsBotMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsBotMemberArgs:
    def __init__(__self__, *,
                 alias_id: pulumi.Input[str],
                 alias_name: pulumi.Input[str],
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] alias_id: (Required) - Alias ID of a bot that is a member of this network of bots.
        :param pulumi.Input[str] alias_name: (Required) - Alias name of a bot that is a member of this network of bots.
        :param pulumi.Input[str] id: (Required) - Unique ID of a bot that is a member of this network of bots.
        :param pulumi.Input[str] name: Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
        :param pulumi.Input[str] version: (Required) - Version of a bot that is a member of this network of bots.
        """
        pulumi.set(__self__, "alias_id", alias_id)
        pulumi.set(__self__, "alias_name", alias_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="aliasId")
    def alias_id(self) -> pulumi.Input[str]:
        """
        (Required) - Alias ID of a bot that is a member of this network of bots.
        """
        return pulumi.get(self, "alias_id")

    @alias_id.setter
    def alias_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "alias_id", value)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> pulumi.Input[str]:
        """
        (Required) - Alias name of a bot that is a member of this network of bots.
        """
        return pulumi.get(self, "alias_name")

    @alias_name.setter
    def alias_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "alias_name", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        (Required) - Unique ID of a bot that is a member of this network of bots.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the bot. The bot name must be unique in the account that creates the bot. Type String. Length Constraints: Minimum length of 1. Maximum length of 100.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        (Required) - Version of a bot that is a member of this network of bots.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


if not MYPY:
    class V2modelsBotTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        update: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    V2modelsBotTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsBotTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class V2modelsBotVersionLocaleSpecificationArgsDict(TypedDict):
        source_bot_version: pulumi.Input[str]
elif False:
    V2modelsBotVersionLocaleSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsBotVersionLocaleSpecificationArgs:
    def __init__(__self__, *,
                 source_bot_version: pulumi.Input[str]):
        pulumi.set(__self__, "source_bot_version", source_bot_version)

    @property
    @pulumi.getter(name="sourceBotVersion")
    def source_bot_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_bot_version")

    @source_bot_version.setter
    def source_bot_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_bot_version", value)


if not MYPY:
    class V2modelsBotVersionTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
elif False:
    V2modelsBotVersionTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsBotVersionTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)


if not MYPY:
    class V2modelsIntentClosingSettingArgsDict(TypedDict):
        active: NotRequired[pulumi.Input[bool]]
        """
        Whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
        """
        closing_response: NotRequired[pulumi.Input['V2modelsIntentClosingSettingClosingResponseArgsDict']]
        """
        Configuration block for response that Amazon Lex sends to the user when the intent is complete. See `closing_response`.
        """
        conditional: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalArgsDict']]
        """
        Configuration block for list of conditional branches associated with the intent's closing response. These branches are executed when the `next_step` attribute is set to `EvalutateConditional`. See `conditional`.
        """
        next_step: NotRequired[pulumi.Input['V2modelsIntentClosingSettingNextStepArgsDict']]
        """
        Next step that the bot executes after playing the intent's closing response. See `next_step`.
        """
elif False:
    V2modelsIntentClosingSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingArgs:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 closing_response: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseArgs']] = None,
                 conditional: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalArgs']] = None,
                 next_step: Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepArgs']] = None):
        """
        :param pulumi.Input[bool] active: Whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
        :param pulumi.Input['V2modelsIntentClosingSettingClosingResponseArgs'] closing_response: Configuration block for response that Amazon Lex sends to the user when the intent is complete. See `closing_response`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalArgs'] conditional: Configuration block for list of conditional branches associated with the intent's closing response. These branches are executed when the `next_step` attribute is set to `EvalutateConditional`. See `conditional`.
        :param pulumi.Input['V2modelsIntentClosingSettingNextStepArgs'] next_step: Next step that the bot executes after playing the intent's closing response. See `next_step`.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if closing_response is not None:
            pulumi.set(__self__, "closing_response", closing_response)
        if conditional is not None:
            pulumi.set(__self__, "conditional", conditional)
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="closingResponse")
    def closing_response(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseArgs']]:
        """
        Configuration block for response that Amazon Lex sends to the user when the intent is complete. See `closing_response`.
        """
        return pulumi.get(self, "closing_response")

    @closing_response.setter
    def closing_response(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseArgs']]):
        pulumi.set(self, "closing_response", value)

    @property
    @pulumi.getter
    def conditional(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalArgs']]:
        """
        Configuration block for list of conditional branches associated with the intent's closing response. These branches are executed when the `next_step` attribute is set to `EvalutateConditional`. See `conditional`.
        """
        return pulumi.get(self, "conditional")

    @conditional.setter
    def conditional(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalArgs']]):
        pulumi.set(self, "conditional", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepArgs']]:
        """
        Next step that the bot executes after playing the intent's closing response. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepArgs']]):
        pulumi.set(self, "next_step", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingClosingResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentClosingSettingNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentClosingSettingNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentClosingSettingNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentClosingSettingNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentClosingSettingNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentClosingSettingNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentClosingSettingNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentClosingSettingNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentClosingSettingNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentClosingSettingNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentClosingSettingNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentClosingSettingNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentClosingSettingNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentClosingSettingNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentClosingSettingNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingArgsDict(TypedDict):
        prompt_specification: pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationArgsDict']
        """
        Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
        """
        active: NotRequired[pulumi.Input[bool]]
        """
        Whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
        """
        code_hook: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookArgsDict']]
        """
        Configuration block for the intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
        """
        confirmation_conditional: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
        """
        confirmation_next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepArgsDict']]
        """
        Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
        """
        confirmation_response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseArgsDict']]
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
        """
        declination_conditional: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
        """
        declination_next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepArgsDict']]
        """
        Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
        """
        declination_response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseArgsDict']]
        """
        Configuration block for when the user answers "no" to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
        """
        elicitation_code_hook: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingElicitationCodeHookArgsDict']]
        """
        Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
        """
        failure_conditional: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalArgsDict']]
        """
        Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
        """
        failure_next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepArgsDict']]
        """
        Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
        """
        failure_response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseArgsDict']]
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
elif False:
    V2modelsIntentConfirmationSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingArgs:
    def __init__(__self__, *,
                 prompt_specification: pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationArgs'],
                 active: Optional[pulumi.Input[bool]] = None,
                 code_hook: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookArgs']] = None,
                 confirmation_conditional: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalArgs']] = None,
                 confirmation_next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepArgs']] = None,
                 confirmation_response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseArgs']] = None,
                 declination_conditional: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalArgs']] = None,
                 declination_next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepArgs']] = None,
                 declination_response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseArgs']] = None,
                 elicitation_code_hook: Optional[pulumi.Input['V2modelsIntentConfirmationSettingElicitationCodeHookArgs']] = None,
                 failure_conditional: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalArgs']] = None,
                 failure_next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepArgs']] = None,
                 failure_response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationArgs'] prompt_specification: Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
        :param pulumi.Input[bool] active: Whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookArgs'] code_hook: Configuration block for the intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalArgs'] confirmation_conditional: Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepArgs'] confirmation_next_step: Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseArgs'] confirmation_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalArgs'] declination_conditional: Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepArgs'] declination_next_step: Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseArgs'] declination_response: Configuration block for when the user answers "no" to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingElicitationCodeHookArgs'] elicitation_code_hook: Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalArgs'] failure_conditional: Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepArgs'] failure_next_step: Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseArgs'] failure_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        pulumi.set(__self__, "prompt_specification", prompt_specification)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if code_hook is not None:
            pulumi.set(__self__, "code_hook", code_hook)
        if confirmation_conditional is not None:
            pulumi.set(__self__, "confirmation_conditional", confirmation_conditional)
        if confirmation_next_step is not None:
            pulumi.set(__self__, "confirmation_next_step", confirmation_next_step)
        if confirmation_response is not None:
            pulumi.set(__self__, "confirmation_response", confirmation_response)
        if declination_conditional is not None:
            pulumi.set(__self__, "declination_conditional", declination_conditional)
        if declination_next_step is not None:
            pulumi.set(__self__, "declination_next_step", declination_next_step)
        if declination_response is not None:
            pulumi.set(__self__, "declination_response", declination_response)
        if elicitation_code_hook is not None:
            pulumi.set(__self__, "elicitation_code_hook", elicitation_code_hook)
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)

    @property
    @pulumi.getter(name="promptSpecification")
    def prompt_specification(self) -> pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationArgs']:
        """
        Configuration block for prompting the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. See `prompt_specification`.
        """
        return pulumi.get(self, "prompt_specification")

    @prompt_specification.setter
    def prompt_specification(self, value: pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationArgs']):
        pulumi.set(self, "prompt_specification", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="codeHook")
    def code_hook(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookArgs']]:
        """
        Configuration block for the intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `invoke_dialog_code_hook`.  See `code_hook`.
        """
        return pulumi.get(self, "code_hook")

    @code_hook.setter
    def code_hook(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookArgs']]):
        pulumi.set(self, "code_hook", value)

    @property
    @pulumi.getter(name="confirmationConditional")
    def confirmation_conditional(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate after the intent is closed. See `confirmation_conditional`.
        """
        return pulumi.get(self, "confirmation_conditional")

    @confirmation_conditional.setter
    def confirmation_conditional(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalArgs']]):
        pulumi.set(self, "confirmation_conditional", value)

    @property
    @pulumi.getter(name="confirmationNextStep")
    def confirmation_next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepArgs']]:
        """
        Configuration block for the next step that the bot executes when the customer confirms the intent. See `confirmation_next_step`.
        """
        return pulumi.get(self, "confirmation_next_step")

    @confirmation_next_step.setter
    def confirmation_next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepArgs']]):
        pulumi.set(self, "confirmation_next_step", value)

    @property
    @pulumi.getter(name="confirmationResponse")
    def confirmation_response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseArgs']]:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `confirmation_response`.
        """
        return pulumi.get(self, "confirmation_response")

    @confirmation_response.setter
    def confirmation_response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseArgs']]):
        pulumi.set(self, "confirmation_response", value)

    @property
    @pulumi.getter(name="declinationConditional")
    def declination_conditional(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate after the intent is declined. See `declination_conditional`.
        """
        return pulumi.get(self, "declination_conditional")

    @declination_conditional.setter
    def declination_conditional(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalArgs']]):
        pulumi.set(self, "declination_conditional", value)

    @property
    @pulumi.getter(name="declinationNextStep")
    def declination_next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepArgs']]:
        """
        Configuration block for the next step that the bot executes when the customer declines the intent. See `declination_next_step`.
        """
        return pulumi.get(self, "declination_next_step")

    @declination_next_step.setter
    def declination_next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepArgs']]):
        pulumi.set(self, "declination_next_step", value)

    @property
    @pulumi.getter(name="declinationResponse")
    def declination_response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseArgs']]:
        """
        Configuration block for when the user answers "no" to the question defined in `prompt_specification`, Amazon Lex responds with this response to acknowledge that the intent was canceled. See `declination_response`.
        """
        return pulumi.get(self, "declination_response")

    @declination_response.setter
    def declination_response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseArgs']]):
        pulumi.set(self, "declination_response", value)

    @property
    @pulumi.getter(name="elicitationCodeHook")
    def elicitation_code_hook(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingElicitationCodeHookArgs']]:
        """
        Configuration block for when the code hook is invoked during confirmation prompt retries. See `elicitation_code_hook`.
        """
        return pulumi.get(self, "elicitation_code_hook")

    @elicitation_code_hook.setter
    def elicitation_code_hook(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingElicitationCodeHookArgs']]):
        pulumi.set(self, "elicitation_code_hook", value)

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalArgs']]:
        """
        Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `failure_conditional`.
        """
        return pulumi.get(self, "failure_conditional")

    @failure_conditional.setter
    def failure_conditional(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalArgs']]):
        pulumi.set(self, "failure_conditional", value)

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepArgs']]:
        """
        Configuration block for the next step to take in the conversation if the confirmation step fails. See `failure_next_step`.
        """
        return pulumi.get(self, "failure_next_step")

    @failure_next_step.setter
    def failure_next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepArgs']]):
        pulumi.set(self, "failure_next_step", value)

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseArgs']]:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        return pulumi.get(self, "failure_response")

    @failure_response.setter
    def failure_response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseArgs']]):
        pulumi.set(self, "failure_response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a dialog code hook is used when the intent is activated.
        """
        enable_code_hook_invocation: pulumi.Input[bool]
        """
        Whether a Lambda function should be invoked for the dialog.
        """
        post_code_hook_specification: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgsDict']
        """
        Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `post_code_hook_specification`.
        """
        invocation_label: NotRequired[pulumi.Input[str]]
        """
        Label that indicates the dialog step from which the dialog code hook is happening.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 enable_code_hook_invocation: pulumi.Input[bool],
                 post_code_hook_specification: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgs'],
                 invocation_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: Whether a dialog code hook is used when the intent is activated.
        :param pulumi.Input[bool] enable_code_hook_invocation: Whether a Lambda function should be invoked for the dialog.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgs'] post_code_hook_specification: Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `post_code_hook_specification`.
        :param pulumi.Input[str] invocation_label: Label that indicates the dialog step from which the dialog code hook is happening.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "enable_code_hook_invocation", enable_code_hook_invocation)
        pulumi.set(__self__, "post_code_hook_specification", post_code_hook_specification)
        if invocation_label is not None:
            pulumi.set(__self__, "invocation_label", invocation_label)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a dialog code hook is used when the intent is activated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="enableCodeHookInvocation")
    def enable_code_hook_invocation(self) -> pulumi.Input[bool]:
        """
        Whether a Lambda function should be invoked for the dialog.
        """
        return pulumi.get(self, "enable_code_hook_invocation")

    @enable_code_hook_invocation.setter
    def enable_code_hook_invocation(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_code_hook_invocation", value)

    @property
    @pulumi.getter(name="postCodeHookSpecification")
    def post_code_hook_specification(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgs']:
        """
        Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `post_code_hook_specification`.
        """
        return pulumi.get(self, "post_code_hook_specification")

    @post_code_hook_specification.setter
    def post_code_hook_specification(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgs']):
        pulumi.set(self, "post_code_hook_specification", value)

    @property
    @pulumi.getter(name="invocationLabel")
    def invocation_label(self) -> Optional[pulumi.Input[str]]:
        """
        Label that indicates the dialog step from which the dialog code hook is happening.
        """
        return pulumi.get(self, "invocation_label")

    @invocation_label.setter
    def invocation_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invocation_label", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgsDict(TypedDict):
        failure_conditional: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        """
        failure_next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgsDict']]
        """
        Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failure_next_step`.
        """
        failure_response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgsDict']]
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        success_conditional: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        """
        success_next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgsDict']]
        """
        Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        """
        success_response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgsDict']]
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        """
        timeout_conditional: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        """
        timeout_next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgsDict']]
        """
        Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        """
        timeout_response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationArgs:
    def __init__(__self__, *,
                 failure_conditional: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs']] = None,
                 failure_next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs']] = None,
                 failure_response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgs']] = None,
                 success_conditional: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs']] = None,
                 success_next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs']] = None,
                 success_response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs']] = None,
                 timeout_conditional: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs']] = None,
                 timeout_next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs']] = None,
                 timeout_response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs'] failure_conditional: Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs'] failure_next_step: Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failure_next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgs'] failure_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs'] success_conditional: Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs'] success_next_step: Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs'] success_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs'] timeout_conditional: Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs'] timeout_next_step: Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs'] timeout_response: Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if success_conditional is not None:
            pulumi.set(__self__, "success_conditional", success_conditional)
        if success_next_step is not None:
            pulumi.set(__self__, "success_next_step", success_next_step)
        if success_response is not None:
            pulumi.set(__self__, "success_response", success_response)
        if timeout_conditional is not None:
            pulumi.set(__self__, "timeout_conditional", timeout_conditional)
        if timeout_next_step is not None:
            pulumi.set(__self__, "timeout_next_step", timeout_next_step)
        if timeout_response is not None:
            pulumi.set(__self__, "timeout_response", timeout_response)

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        """
        return pulumi.get(self, "failure_conditional")

    @failure_conditional.setter
    def failure_conditional(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs']]):
        pulumi.set(self, "failure_conditional", value)

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs']]:
        """
        Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failure_next_step`.
        """
        return pulumi.get(self, "failure_next_step")

    @failure_next_step.setter
    def failure_next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs']]):
        pulumi.set(self, "failure_next_step", value)

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgs']]:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        return pulumi.get(self, "failure_response")

    @failure_response.setter
    def failure_response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgs']]):
        pulumi.set(self, "failure_response", value)

    @property
    @pulumi.getter(name="successConditional")
    def success_conditional(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        """
        return pulumi.get(self, "success_conditional")

    @success_conditional.setter
    def success_conditional(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs']]):
        pulumi.set(self, "success_conditional", value)

    @property
    @pulumi.getter(name="successNextStep")
    def success_next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs']]:
        """
        Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        """
        return pulumi.get(self, "success_next_step")

    @success_next_step.setter
    def success_next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs']]):
        pulumi.set(self, "success_next_step", value)

    @property
    @pulumi.getter(name="successResponse")
    def success_response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs']]:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        """
        return pulumi.get(self, "success_response")

    @success_response.setter
    def success_response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs']]):
        pulumi.set(self, "success_response", value)

    @property
    @pulumi.getter(name="timeoutConditional")
    def timeout_conditional(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        """
        return pulumi.get(self, "timeout_conditional")

    @timeout_conditional.setter
    def timeout_conditional(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs']]):
        pulumi.set(self, "timeout_conditional", value)

    @property
    @pulumi.getter(name="timeoutNextStep")
    def timeout_next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs']]:
        """
        Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        """
        return pulumi.get(self, "timeout_next_step")

    @timeout_next_step.setter
    def timeout_next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs']]):
        pulumi.set(self, "timeout_next_step", value)

    @property
    @pulumi.getter(name="timeoutResponse")
    def timeout_response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        return pulumi.get(self, "timeout_response")

    @timeout_response.setter
    def timeout_response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs']]):
        pulumi.set(self, "timeout_response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingConfirmationResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingDeclinationResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingElicitationCodeHookArgsDict(TypedDict):
        enable_code_hook_invocation: NotRequired[pulumi.Input[bool]]
        """
        Whether a Lambda function should be invoked for the dialog.
        """
        invocation_label: NotRequired[pulumi.Input[str]]
        """
        Label that indicates the dialog step from which the dialog code hook is happening.
        """
elif False:
    V2modelsIntentConfirmationSettingElicitationCodeHookArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingElicitationCodeHookArgs:
    def __init__(__self__, *,
                 enable_code_hook_invocation: Optional[pulumi.Input[bool]] = None,
                 invocation_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable_code_hook_invocation: Whether a Lambda function should be invoked for the dialog.
        :param pulumi.Input[str] invocation_label: Label that indicates the dialog step from which the dialog code hook is happening.
        """
        if enable_code_hook_invocation is not None:
            pulumi.set(__self__, "enable_code_hook_invocation", enable_code_hook_invocation)
        if invocation_label is not None:
            pulumi.set(__self__, "invocation_label", invocation_label)

    @property
    @pulumi.getter(name="enableCodeHookInvocation")
    def enable_code_hook_invocation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a Lambda function should be invoked for the dialog.
        """
        return pulumi.get(self, "enable_code_hook_invocation")

    @enable_code_hook_invocation.setter
    def enable_code_hook_invocation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_code_hook_invocation", value)

    @property
    @pulumi.getter(name="invocationLabel")
    def invocation_label(self) -> Optional[pulumi.Input[str]]:
        """
        Label that indicates the dialog step from which the dialog code hook is happening.
        """
        return pulumi.get(self, "invocation_label")

    @invocation_label.setter
    def invocation_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invocation_label", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingFailureResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationArgsDict(TypedDict):
        max_retries: pulumi.Input[int]
        """
        Maximum number of times the bot tries to elicit a response from the user using this prompt.
        """
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech prompt from the bot.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgsDict']]]]
        """
        Configuration block for messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime. See `message_group`.
        """
        message_selection_strategy: NotRequired[pulumi.Input[str]]
        """
        How a message is selected from a message group among retries. Valid values are `Random` and `Ordered`.
        """
        prompt_attempts_specifications: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict']]]]
        """
        Configuration block for advanced settings on each attempt of the prompt. See `prompt_attempts_specification`.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationArgs:
    def __init__(__self__, *,
                 max_retries: pulumi.Input[int],
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgs']]]] = None,
                 message_selection_strategy: Optional[pulumi.Input[str]] = None,
                 prompt_attempts_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgs']]]] = None):
        """
        :param pulumi.Input[int] max_retries: Maximum number of times the bot tries to elicit a response from the user using this prompt.
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech prompt from the bot.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgs']]] message_groups: Configuration block for messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime. See `message_group`.
        :param pulumi.Input[str] message_selection_strategy: How a message is selected from a message group among retries. Valid values are `Random` and `Ordered`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgs']]] prompt_attempts_specifications: Configuration block for advanced settings on each attempt of the prompt. See `prompt_attempts_specification`.
        """
        pulumi.set(__self__, "max_retries", max_retries)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)
        if message_selection_strategy is not None:
            pulumi.set(__self__, "message_selection_strategy", message_selection_strategy)
        if prompt_attempts_specifications is not None:
            pulumi.set(__self__, "prompt_attempts_specifications", prompt_attempts_specifications)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Input[int]:
        """
        Maximum number of times the bot tries to elicit a response from the user using this prompt.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech prompt from the bot.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgs']]]]:
        """
        Configuration block for messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)

    @property
    @pulumi.getter(name="messageSelectionStrategy")
    def message_selection_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        How a message is selected from a message group among retries. Valid values are `Random` and `Ordered`.
        """
        return pulumi.get(self, "message_selection_strategy")

    @message_selection_strategy.setter
    def message_selection_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_selection_strategy", value)

    @property
    @pulumi.getter(name="promptAttemptsSpecifications")
    def prompt_attempts_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgs']]]]:
        """
        Configuration block for advanced settings on each attempt of the prompt. See `prompt_attempts_specification`.
        """
        return pulumi.get(self, "prompt_attempts_specifications")

    @prompt_attempts_specifications.setter
    def prompt_attempts_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgs']]]]):
        pulumi.set(self, "prompt_attempts_specifications", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict(TypedDict):
        allowed_input_types: pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict']
        """
        Configuration block for the allowed input types of the prompt attempt. See `allowed_input_types`.
        """
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech prompt attempt from the bot.
        """
        audio_and_dtmf_input_specification: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict']]
        """
        Configuration block for settings on audio and DTMF input. See `audio_and_dtmf_input_specification`.
        """
        text_input_specification: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict']]
        """
        Configuration block for the settings on text input. See `text_input_specification`.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationArgs:
    def __init__(__self__, *,
                 allowed_input_types: pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs'],
                 map_block_key: pulumi.Input[str],
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 audio_and_dtmf_input_specification: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs']] = None,
                 text_input_specification: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs'] allowed_input_types: Configuration block for the allowed input types of the prompt attempt. See `allowed_input_types`.
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech prompt attempt from the bot.
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs'] audio_and_dtmf_input_specification: Configuration block for settings on audio and DTMF input. See `audio_and_dtmf_input_specification`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs'] text_input_specification: Configuration block for the settings on text input. See `text_input_specification`.
        """
        pulumi.set(__self__, "allowed_input_types", allowed_input_types)
        pulumi.set(__self__, "map_block_key", map_block_key)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if audio_and_dtmf_input_specification is not None:
            pulumi.set(__self__, "audio_and_dtmf_input_specification", audio_and_dtmf_input_specification)
        if text_input_specification is not None:
            pulumi.set(__self__, "text_input_specification", text_input_specification)

    @property
    @pulumi.getter(name="allowedInputTypes")
    def allowed_input_types(self) -> pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs']:
        """
        Configuration block for the allowed input types of the prompt attempt. See `allowed_input_types`.
        """
        return pulumi.get(self, "allowed_input_types")

    @allowed_input_types.setter
    def allowed_input_types(self, value: pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs']):
        pulumi.set(self, "allowed_input_types", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech prompt attempt from the bot.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="audioAndDtmfInputSpecification")
    def audio_and_dtmf_input_specification(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs']]:
        """
        Configuration block for settings on audio and DTMF input. See `audio_and_dtmf_input_specification`.
        """
        return pulumi.get(self, "audio_and_dtmf_input_specification")

    @audio_and_dtmf_input_specification.setter
    def audio_and_dtmf_input_specification(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs']]):
        pulumi.set(self, "audio_and_dtmf_input_specification", value)

    @property
    @pulumi.getter(name="textInputSpecification")
    def text_input_specification(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs']]:
        """
        Configuration block for the settings on text input. See `text_input_specification`.
        """
        return pulumi.get(self, "text_input_specification")

    @text_input_specification.setter
    def text_input_specification(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs']]):
        pulumi.set(self, "text_input_specification", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict(TypedDict):
        allow_audio_input: pulumi.Input[bool]
        """
        Whether audio input is allowed.
        """
        allow_dtmf_input: pulumi.Input[bool]
        """
        Whether DTMF input is allowed.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs:
    def __init__(__self__, *,
                 allow_audio_input: pulumi.Input[bool],
                 allow_dtmf_input: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] allow_audio_input: Whether audio input is allowed.
        :param pulumi.Input[bool] allow_dtmf_input: Whether DTMF input is allowed.
        """
        pulumi.set(__self__, "allow_audio_input", allow_audio_input)
        pulumi.set(__self__, "allow_dtmf_input", allow_dtmf_input)

    @property
    @pulumi.getter(name="allowAudioInput")
    def allow_audio_input(self) -> pulumi.Input[bool]:
        """
        Whether audio input is allowed.
        """
        return pulumi.get(self, "allow_audio_input")

    @allow_audio_input.setter
    def allow_audio_input(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_audio_input", value)

    @property
    @pulumi.getter(name="allowDtmfInput")
    def allow_dtmf_input(self) -> pulumi.Input[bool]:
        """
        Whether DTMF input is allowed.
        """
        return pulumi.get(self, "allow_dtmf_input")

    @allow_dtmf_input.setter
    def allow_dtmf_input(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_dtmf_input", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict(TypedDict):
        start_timeout_ms: pulumi.Input[int]
        """
        Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
        """
        audio_specification: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict']]
        """
        Configuration block for the settings on audio input. See `audio_specification`.
        """
        dtmf_specification: NotRequired[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict']]
        """
        Configuration block for the settings on DTMF input. See `dtmf_specification`.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs:
    def __init__(__self__, *,
                 start_timeout_ms: pulumi.Input[int],
                 audio_specification: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs']] = None,
                 dtmf_specification: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs']] = None):
        """
        :param pulumi.Input[int] start_timeout_ms: Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs'] audio_specification: Configuration block for the settings on audio input. See `audio_specification`.
        :param pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs'] dtmf_specification: Configuration block for the settings on DTMF input. See `dtmf_specification`.
        """
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)
        if audio_specification is not None:
            pulumi.set(__self__, "audio_specification", audio_specification)
        if dtmf_specification is not None:
            pulumi.set(__self__, "dtmf_specification", dtmf_specification)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> pulumi.Input[int]:
        """
        Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
        """
        return pulumi.get(self, "start_timeout_ms")

    @start_timeout_ms.setter
    def start_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_timeout_ms", value)

    @property
    @pulumi.getter(name="audioSpecification")
    def audio_specification(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs']]:
        """
        Configuration block for the settings on audio input. See `audio_specification`.
        """
        return pulumi.get(self, "audio_specification")

    @audio_specification.setter
    def audio_specification(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs']]):
        pulumi.set(self, "audio_specification", value)

    @property
    @pulumi.getter(name="dtmfSpecification")
    def dtmf_specification(self) -> Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs']]:
        """
        Configuration block for the settings on DTMF input. See `dtmf_specification`.
        """
        return pulumi.get(self, "dtmf_specification")

    @dtmf_specification.setter
    def dtmf_specification(self, value: Optional[pulumi.Input['V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs']]):
        pulumi.set(self, "dtmf_specification", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict(TypedDict):
        end_timeout_ms: pulumi.Input[int]
        """
        Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
        """
        max_length_ms: pulumi.Input[int]
        """
        Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs:
    def __init__(__self__, *,
                 end_timeout_ms: pulumi.Input[int],
                 max_length_ms: pulumi.Input[int]):
        """
        :param pulumi.Input[int] end_timeout_ms: Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
        :param pulumi.Input[int] max_length_ms: Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
        """
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length_ms", max_length_ms)

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> pulumi.Input[int]:
        """
        Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
        """
        return pulumi.get(self, "end_timeout_ms")

    @end_timeout_ms.setter
    def end_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "end_timeout_ms", value)

    @property
    @pulumi.getter(name="maxLengthMs")
    def max_length_ms(self) -> pulumi.Input[int]:
        """
        Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
        """
        return pulumi.get(self, "max_length_ms")

    @max_length_ms.setter
    def max_length_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_length_ms", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict(TypedDict):
        deletion_character: pulumi.Input[str]
        """
        DTMF character that clears the accumulated DTMF digits and immediately ends the input.
        """
        end_character: pulumi.Input[str]
        """
        DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
        """
        end_timeout_ms: pulumi.Input[int]
        """
        How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
        """
        max_length: pulumi.Input[int]
        """
        Maximum number of DTMF digits allowed in an utterance.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs:
    def __init__(__self__, *,
                 deletion_character: pulumi.Input[str],
                 end_character: pulumi.Input[str],
                 end_timeout_ms: pulumi.Input[int],
                 max_length: pulumi.Input[int]):
        """
        :param pulumi.Input[str] deletion_character: DTMF character that clears the accumulated DTMF digits and immediately ends the input.
        :param pulumi.Input[str] end_character: DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
        :param pulumi.Input[int] end_timeout_ms: How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
        :param pulumi.Input[int] max_length: Maximum number of DTMF digits allowed in an utterance.
        """
        pulumi.set(__self__, "deletion_character", deletion_character)
        pulumi.set(__self__, "end_character", end_character)
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length", max_length)

    @property
    @pulumi.getter(name="deletionCharacter")
    def deletion_character(self) -> pulumi.Input[str]:
        """
        DTMF character that clears the accumulated DTMF digits and immediately ends the input.
        """
        return pulumi.get(self, "deletion_character")

    @deletion_character.setter
    def deletion_character(self, value: pulumi.Input[str]):
        pulumi.set(self, "deletion_character", value)

    @property
    @pulumi.getter(name="endCharacter")
    def end_character(self) -> pulumi.Input[str]:
        """
        DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
        """
        return pulumi.get(self, "end_character")

    @end_character.setter
    def end_character(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_character", value)

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> pulumi.Input[int]:
        """
        How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
        """
        return pulumi.get(self, "end_timeout_ms")

    @end_timeout_ms.setter
    def end_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "end_timeout_ms", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> pulumi.Input[int]:
        """
        Maximum number of DTMF digits allowed in an utterance.
        """
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_length", value)


if not MYPY:
    class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict(TypedDict):
        start_timeout_ms: pulumi.Input[int]
        """
        Time for which a bot waits before re-prompting a customer for text input.
        """
elif False:
    V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentConfirmationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs:
    def __init__(__self__, *,
                 start_timeout_ms: pulumi.Input[int]):
        """
        :param pulumi.Input[int] start_timeout_ms: Time for which a bot waits before re-prompting a customer for text input.
        """
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> pulumi.Input[int]:
        """
        Time for which a bot waits before re-prompting a customer for text input.
        """
        return pulumi.get(self, "start_timeout_ms")

    @start_timeout_ms.setter
    def start_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_timeout_ms", value)


if not MYPY:
    class V2modelsIntentDialogCodeHookArgsDict(TypedDict):
        enabled: pulumi.Input[bool]
        """
        Enables the dialog code hook so that it processes user requests.
        """
elif False:
    V2modelsIntentDialogCodeHookArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentDialogCodeHookArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enabled: Enables the dialog code hook so that it processes user requests.
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enables the dialog code hook so that it processes user requests.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookArgsDict(TypedDict):
        enabled: pulumi.Input[bool]
        """
        Whether a Lambda function should be invoked to fulfill a specific intent.
        """
        active: NotRequired[pulumi.Input[bool]]
        """
        Whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
        """
        fulfillment_updates_specification: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgsDict']]
        """
        Configuration block for settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations. See `fulfillment_updates_specification`.
        """
        post_fulfillment_status_specification: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgsDict']]
        """
        Configuration block for settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations. See `post_fulfillment_status_specification`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 active: Optional[pulumi.Input[bool]] = None,
                 fulfillment_updates_specification: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgs']] = None,
                 post_fulfillment_status_specification: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Whether a Lambda function should be invoked to fulfill a specific intent.
        :param pulumi.Input[bool] active: Whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgs'] fulfillment_updates_specification: Configuration block for settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations. See `fulfillment_updates_specification`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgs'] post_fulfillment_status_specification: Configuration block for settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations. See `post_fulfillment_status_specification`.
        """
        pulumi.set(__self__, "enabled", enabled)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if fulfillment_updates_specification is not None:
            pulumi.set(__self__, "fulfillment_updates_specification", fulfillment_updates_specification)
        if post_fulfillment_status_specification is not None:
            pulumi.set(__self__, "post_fulfillment_status_specification", post_fulfillment_status_specification)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether a Lambda function should be invoked to fulfill a specific intent.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="fulfillmentUpdatesSpecification")
    def fulfillment_updates_specification(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgs']]:
        """
        Configuration block for settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations. See `fulfillment_updates_specification`.
        """
        return pulumi.get(self, "fulfillment_updates_specification")

    @fulfillment_updates_specification.setter
    def fulfillment_updates_specification(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgs']]):
        pulumi.set(self, "fulfillment_updates_specification", value)

    @property
    @pulumi.getter(name="postFulfillmentStatusSpecification")
    def post_fulfillment_status_specification(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgs']]:
        """
        Configuration block for settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations. See `post_fulfillment_status_specification`.
        """
        return pulumi.get(self, "post_fulfillment_status_specification")

    @post_fulfillment_status_specification.setter
    def post_fulfillment_status_specification(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgs']]):
        pulumi.set(self, "post_fulfillment_status_specification", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether fulfillment updates are sent to the user. When this field is true, updates are sent. If the active field is set to true, the `start_response`, `update_response`, and `timeout_in_seconds` fields are required.
        """
        start_response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgsDict']]
        """
        Configuration block for the message sent to users when the fulfillment Lambda functions starts running.
        """
        timeout_in_seconds: NotRequired[pulumi.Input[int]]
        """
        Length of time that the fulfillment Lambda function should run before it times out.
        """
        update_response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgsDict']]
        """
        Configuration block for messages sent periodically to the user while the fulfillment Lambda function is running.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 start_response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgs']] = None,
                 timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 update_response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgs']] = None):
        """
        :param pulumi.Input[bool] active: Whether fulfillment updates are sent to the user. When this field is true, updates are sent. If the active field is set to true, the `start_response`, `update_response`, and `timeout_in_seconds` fields are required.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgs'] start_response: Configuration block for the message sent to users when the fulfillment Lambda functions starts running.
        :param pulumi.Input[int] timeout_in_seconds: Length of time that the fulfillment Lambda function should run before it times out.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgs'] update_response: Configuration block for messages sent periodically to the user while the fulfillment Lambda function is running.
        """
        pulumi.set(__self__, "active", active)
        if start_response is not None:
            pulumi.set(__self__, "start_response", start_response)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if update_response is not None:
            pulumi.set(__self__, "update_response", update_response)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether fulfillment updates are sent to the user. When this field is true, updates are sent. If the active field is set to true, the `start_response`, `update_response`, and `timeout_in_seconds` fields are required.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="startResponse")
    def start_response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgs']]:
        """
        Configuration block for the message sent to users when the fulfillment Lambda functions starts running.
        """
        return pulumi.get(self, "start_response")

    @start_response.setter
    def start_response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgs']]):
        pulumi.set(self, "start_response", value)

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Length of time that the fulfillment Lambda function should run before it times out.
        """
        return pulumi.get(self, "timeout_in_seconds")

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_in_seconds", value)

    @property
    @pulumi.getter(name="updateResponse")
    def update_response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgs']]:
        """
        Configuration block for messages sent periodically to the user while the fulfillment Lambda function is running.
        """
        return pulumi.get(self, "update_response")

    @update_response.setter
    def update_response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgs']]):
        pulumi.set(self, "update_response", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt the start message while it is playing.
        """
        delay_in_seconds: NotRequired[pulumi.Input[int]]
        """
        Delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgsDict']]]]
        """
        Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 delay_in_seconds: Optional[pulumi.Input[int]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt the start message while it is playing.
        :param pulumi.Input[int] delay_in_seconds: Delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgs']]] message_groups: Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if delay_in_seconds is not None:
            pulumi.set(__self__, "delay_in_seconds", delay_in_seconds)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt the start message while it is playing.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="delayInSeconds")
    def delay_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
        """
        return pulumi.get(self, "delay_in_seconds")

    @delay_in_seconds.setter
    def delay_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay_in_seconds", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgs']]]]:
        """
        Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationStartResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgsDict(TypedDict):
        frequency_in_seconds: pulumi.Input[int]
        """
        Frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
        """
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt the start message while it is playing.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgsDict']]]]
        """
        Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseArgs:
    def __init__(__self__, *,
                 frequency_in_seconds: pulumi.Input[int],
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[int] frequency_in_seconds: Frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt the start message while it is playing.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgs']]] message_groups: Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `message_group`.
        """
        pulumi.set(__self__, "frequency_in_seconds", frequency_in_seconds)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="frequencyInSeconds")
    def frequency_in_seconds(self) -> pulumi.Input[int]:
        """
        Frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
        """
        return pulumi.get(self, "frequency_in_seconds")

    @frequency_in_seconds.setter
    def frequency_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency_in_seconds", value)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt the start message while it is playing.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgs']]]]:
        """
        Between 1-5 configuration block message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookFulfillmentUpdatesSpecificationUpdateResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgsDict(TypedDict):
        failure_conditional: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failure_conditional`.
        """
        failure_next_step: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgsDict']]
        """
        Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failure_next_step`.
        """
        failure_response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgsDict']]
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        success_conditional: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        """
        success_next_step: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgsDict']]
        """
        Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        """
        success_response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgsDict']]
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        """
        timeout_conditional: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        """
        timeout_next_step: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgsDict']]
        """
        Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        """
        timeout_response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationArgs:
    def __init__(__self__, *,
                 failure_conditional: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgs']] = None,
                 failure_next_step: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgs']] = None,
                 failure_response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgs']] = None,
                 success_conditional: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgs']] = None,
                 success_next_step: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgs']] = None,
                 success_response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgs']] = None,
                 timeout_conditional: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgs']] = None,
                 timeout_next_step: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgs']] = None,
                 timeout_response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgs'] failure_conditional: Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failure_conditional`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgs'] failure_next_step: Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failure_next_step`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgs'] failure_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgs'] success_conditional: Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgs'] success_next_step: Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgs'] success_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgs'] timeout_conditional: Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgs'] timeout_next_step: Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgs'] timeout_response: Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if success_conditional is not None:
            pulumi.set(__self__, "success_conditional", success_conditional)
        if success_next_step is not None:
            pulumi.set(__self__, "success_next_step", success_next_step)
        if success_response is not None:
            pulumi.set(__self__, "success_response", success_response)
        if timeout_conditional is not None:
            pulumi.set(__self__, "timeout_conditional", timeout_conditional)
        if timeout_next_step is not None:
            pulumi.set(__self__, "timeout_next_step", timeout_next_step)
        if timeout_response is not None:
            pulumi.set(__self__, "timeout_response", timeout_response)

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failure_conditional`.
        """
        return pulumi.get(self, "failure_conditional")

    @failure_conditional.setter
    def failure_conditional(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgs']]):
        pulumi.set(self, "failure_conditional", value)

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgs']]:
        """
        Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed. See `failure_next_step`.
        """
        return pulumi.get(self, "failure_next_step")

    @failure_next_step.setter
    def failure_next_step(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgs']]):
        pulumi.set(self, "failure_next_step", value)

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgs']]:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        return pulumi.get(self, "failure_response")

    @failure_response.setter
    def failure_response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgs']]):
        pulumi.set(self, "failure_response", value)

    @property
    @pulumi.getter(name="successConditional")
    def success_conditional(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        """
        return pulumi.get(self, "success_conditional")

    @success_conditional.setter
    def success_conditional(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgs']]):
        pulumi.set(self, "success_conditional", value)

    @property
    @pulumi.getter(name="successNextStep")
    def success_next_step(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgs']]:
        """
        Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        """
        return pulumi.get(self, "success_next_step")

    @success_next_step.setter
    def success_next_step(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgs']]):
        pulumi.set(self, "success_next_step", value)

    @property
    @pulumi.getter(name="successResponse")
    def success_response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgs']]:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        """
        return pulumi.get(self, "success_response")

    @success_response.setter
    def success_response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgs']]):
        pulumi.set(self, "success_response", value)

    @property
    @pulumi.getter(name="timeoutConditional")
    def timeout_conditional(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        """
        return pulumi.get(self, "timeout_conditional")

    @timeout_conditional.setter
    def timeout_conditional(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgs']]):
        pulumi.set(self, "timeout_conditional", value)

    @property
    @pulumi.getter(name="timeoutNextStep")
    def timeout_next_step(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgs']]:
        """
        Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        """
        return pulumi.get(self, "timeout_next_step")

    @timeout_next_step.setter
    def timeout_next_step(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgs']]):
        pulumi.set(self, "timeout_next_step", value)

    @property
    @pulumi.getter(name="timeoutResponse")
    def timeout_response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        return pulumi.get(self, "timeout_response")

    @timeout_response.setter
    def timeout_response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgs']]):
        pulumi.set(self, "timeout_response", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentFulfillmentCodeHookPostFulfillmentStatusSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingArgsDict(TypedDict):
        code_hook: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookArgsDict']]
        """
        Configuration block for the dialog code hook that is called by Amazon Lex at a step of the conversation. See `code_hook`.
        """
        conditional: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalArgsDict']]
        """
        Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `conditional`.
        """
        initial_response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseArgsDict']]
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `initial_response`.
        """
        next_step: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
elif False:
    V2modelsIntentInitialResponseSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingArgs:
    def __init__(__self__, *,
                 code_hook: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookArgs']] = None,
                 conditional: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalArgs']] = None,
                 initial_response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseArgs']] = None,
                 next_step: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookArgs'] code_hook: Configuration block for the dialog code hook that is called by Amazon Lex at a step of the conversation. See `code_hook`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalArgs'] conditional: Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `conditional`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseArgs'] initial_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `initial_response`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        """
        if code_hook is not None:
            pulumi.set(__self__, "code_hook", code_hook)
        if conditional is not None:
            pulumi.set(__self__, "conditional", conditional)
        if initial_response is not None:
            pulumi.set(__self__, "initial_response", initial_response)
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)

    @property
    @pulumi.getter(name="codeHook")
    def code_hook(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookArgs']]:
        """
        Configuration block for the dialog code hook that is called by Amazon Lex at a step of the conversation. See `code_hook`.
        """
        return pulumi.get(self, "code_hook")

    @code_hook.setter
    def code_hook(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookArgs']]):
        pulumi.set(self, "code_hook", value)

    @property
    @pulumi.getter
    def conditional(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalArgs']]:
        """
        Configuration block for conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition. See `conditional`.
        """
        return pulumi.get(self, "conditional")

    @conditional.setter
    def conditional(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalArgs']]):
        pulumi.set(self, "conditional", value)

    @property
    @pulumi.getter(name="initialResponse")
    def initial_response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseArgs']]:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `initial_response`.
        """
        return pulumi.get(self, "initial_response")

    @initial_response.setter
    def initial_response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseArgs']]):
        pulumi.set(self, "initial_response", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepArgs']]):
        pulumi.set(self, "next_step", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a dialog code hook is used when the intent is activated.
        """
        enable_code_hook_invocation: pulumi.Input[bool]
        """
        Whether a Lambda function should be invoked for the dialog.
        """
        post_code_hook_specification: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgsDict']
        """
        Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `post_code_hook_specification`.
        """
        invocation_label: NotRequired[pulumi.Input[str]]
        """
        Label that indicates the dialog step from which the dialog code hook is happening.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 enable_code_hook_invocation: pulumi.Input[bool],
                 post_code_hook_specification: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgs'],
                 invocation_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: Whether a dialog code hook is used when the intent is activated.
        :param pulumi.Input[bool] enable_code_hook_invocation: Whether a Lambda function should be invoked for the dialog.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgs'] post_code_hook_specification: Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `post_code_hook_specification`.
        :param pulumi.Input[str] invocation_label: Label that indicates the dialog step from which the dialog code hook is happening.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "enable_code_hook_invocation", enable_code_hook_invocation)
        pulumi.set(__self__, "post_code_hook_specification", post_code_hook_specification)
        if invocation_label is not None:
            pulumi.set(__self__, "invocation_label", invocation_label)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a dialog code hook is used when the intent is activated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="enableCodeHookInvocation")
    def enable_code_hook_invocation(self) -> pulumi.Input[bool]:
        """
        Whether a Lambda function should be invoked for the dialog.
        """
        return pulumi.get(self, "enable_code_hook_invocation")

    @enable_code_hook_invocation.setter
    def enable_code_hook_invocation(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_code_hook_invocation", value)

    @property
    @pulumi.getter(name="postCodeHookSpecification")
    def post_code_hook_specification(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgs']:
        """
        Configuration block that contains the responses and actions that Amazon Lex takes after the Lambda function is complete. See `post_code_hook_specification`.
        """
        return pulumi.get(self, "post_code_hook_specification")

    @post_code_hook_specification.setter
    def post_code_hook_specification(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgs']):
        pulumi.set(self, "post_code_hook_specification", value)

    @property
    @pulumi.getter(name="invocationLabel")
    def invocation_label(self) -> Optional[pulumi.Input[str]]:
        """
        Label that indicates the dialog step from which the dialog code hook is happening.
        """
        return pulumi.get(self, "invocation_label")

    @invocation_label.setter
    def invocation_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invocation_label", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgsDict(TypedDict):
        failure_conditional: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        """
        failure_next_step: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgsDict']]
        """
        Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failure_next_step`.
        """
        failure_response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgsDict']]
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        success_conditional: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        """
        success_next_step: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgsDict']]
        """
        Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        """
        success_response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgsDict']]
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        """
        timeout_conditional: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgsDict']]
        """
        Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        """
        timeout_next_step: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgsDict']]
        """
        Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        """
        timeout_response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationArgs:
    def __init__(__self__, *,
                 failure_conditional: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs']] = None,
                 failure_next_step: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs']] = None,
                 failure_response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgs']] = None,
                 success_conditional: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs']] = None,
                 success_next_step: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs']] = None,
                 success_response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs']] = None,
                 timeout_conditional: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs']] = None,
                 timeout_next_step: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs']] = None,
                 timeout_response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs'] failure_conditional: Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs'] failure_next_step: Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failure_next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgs'] failure_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs'] success_conditional: Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs'] success_next_step: Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs'] success_response: Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs'] timeout_conditional: Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs'] timeout_next_step: Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs'] timeout_response: Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if success_conditional is not None:
            pulumi.set(__self__, "success_conditional", success_conditional)
        if success_next_step is not None:
            pulumi.set(__self__, "success_next_step", success_next_step)
        if success_response is not None:
            pulumi.set(__self__, "success_response", success_response)
        if timeout_conditional is not None:
            pulumi.set(__self__, "timeout_conditional", timeout_conditional)
        if timeout_next_step is not None:
            pulumi.set(__self__, "timeout_next_step", timeout_next_step)
        if timeout_response is not None:
            pulumi.set(__self__, "timeout_response", timeout_response)

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
        """
        return pulumi.get(self, "failure_conditional")

    @failure_conditional.setter
    def failure_conditional(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs']]):
        pulumi.set(self, "failure_conditional", value)

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs']]:
        """
        Configuration block for the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed . See `failure_next_step`.
        """
        return pulumi.get(self, "failure_next_step")

    @failure_next_step.setter
    def failure_next_step(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs']]):
        pulumi.set(self, "failure_next_step", value)

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgs']]:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `failure_response`.
        """
        return pulumi.get(self, "failure_response")

    @failure_response.setter
    def failure_response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgs']]):
        pulumi.set(self, "failure_response", value)

    @property
    @pulumi.getter(name="successConditional")
    def success_conditional(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate after the dialog code hook finishes successfully. See `success_conditional`.
        """
        return pulumi.get(self, "success_conditional")

    @success_conditional.setter
    def success_conditional(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs']]):
        pulumi.set(self, "success_conditional", value)

    @property
    @pulumi.getter(name="successNextStep")
    def success_next_step(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs']]:
        """
        Configuration block for the next step the bot runs after the dialog code hook finishes successfully. See `success_next_step`.
        """
        return pulumi.get(self, "success_next_step")

    @success_next_step.setter
    def success_next_step(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs']]):
        pulumi.set(self, "success_next_step", value)

    @property
    @pulumi.getter(name="successResponse")
    def success_response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs']]:
        """
        Configuration block for message groups that Amazon Lex uses to respond the user input. See `success_response`.
        """
        return pulumi.get(self, "success_response")

    @success_response.setter
    def success_response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs']]):
        pulumi.set(self, "success_response", value)

    @property
    @pulumi.getter(name="timeoutConditional")
    def timeout_conditional(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs']]:
        """
        Configuration block for conditional branches to evaluate if the code hook times out. See `timeout_conditional`.
        """
        return pulumi.get(self, "timeout_conditional")

    @timeout_conditional.setter
    def timeout_conditional(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs']]):
        pulumi.set(self, "timeout_conditional", value)

    @property
    @pulumi.getter(name="timeoutNextStep")
    def timeout_next_step(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs']]:
        """
        Configuration block for the next step that the bot runs when the code hook times out. See `timeout_next_step`.
        """
        return pulumi.get(self, "timeout_next_step")

    @timeout_next_step.setter
    def timeout_next_step(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs']]):
        pulumi.set(self, "timeout_next_step", value)

    @property
    @pulumi.getter(name="timeoutResponse")
    def timeout_response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond the user input. See `timeout_response`.
        """
        return pulumi.get(self, "timeout_response")

    @timeout_response.setter
    def timeout_response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs']]):
        pulumi.set(self, "timeout_response", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationFailureResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationSuccessResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingCodeHookPostCodeHookSpecificationTimeoutResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalArgsDict(TypedDict):
        active: pulumi.Input[bool]
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        default_branch: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgsDict']
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        conditional_branches: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgsDict']]]]
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 default_branch: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgs'],
                 conditional_branches: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgs'] default_branch: Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgs']]] conditional_branches: Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "default_branch", default_branch)
        if conditional_branches is not None:
            pulumi.set(__self__, "conditional_branches", conditional_branches)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether a conditional branch is active. When active is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgs']:
        """
        Configuration block for the conditional branch that should be followed when the conditions for other branches are not satisfied. A branch is made up of a condition, a response and a next step. See `default_branch`.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgs']):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgs']]]]:
        """
        Configuration blocks for conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true. See `conditional_branch`.
        """
        return pulumi.get(self, "conditional_branches")

    @conditional_branches.setter
    def conditional_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgs']]]]):
        pulumi.set(self, "conditional_branches", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgsDict(TypedDict):
        condition: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgsDict']
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        name: pulumi.Input[str]
        """
        Name of the branch.
        """
        next_step: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgsDict']
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgs'],
                 name: pulumi.Input[str],
                 next_step: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgs'],
                 response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgs'] condition: Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        :param pulumi.Input[str] name: Name of the branch.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgs']:
        """
        Configuration block for the expression to evaluate. If the condition is true, the branch's actions are taken. See `condition`.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgs']:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgs']):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgsDict(TypedDict):
        expression_string: pulumi.Input[str]
        """
        Expression string that is evaluated.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchConditionArgs:
    def __init__(__self__, *,
                 expression_string: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expression_string: Expression string that is evaluated.
        """
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> pulumi.Input[str]:
        """
        Expression string that is evaluated.
        """
        return pulumi.get(self, "expression_string")

    @expression_string.setter
    def expression_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression_string", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalConditionalBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgsDict(TypedDict):
        next_step: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgsDict']]
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        response: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgsDict']]
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchArgs:
    def __init__(__self__, *,
                 next_step: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgs']] = None,
                 response: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgs'] next_step: Configuration block for the next step in the conversation. See `next_step`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgs'] response: Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgs']]:
        """
        Configuration block for the next step in the conversation. See `next_step`.
        """
        return pulumi.get(self, "next_step")

    @next_step.setter
    def next_step(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgs']]):
        pulumi.set(self, "next_step", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgs']]:
        """
        Configuration block for a list of message groups that Amazon Lex uses to respond to the user input. See `response`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgs']]):
        pulumi.set(self, "response", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingConditionalDefaultBranchResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime. See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user. See `message`.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user. See `variation`.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgsDict']]
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        image_response_card: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgsDict']]
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        plain_text_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgsDict']]
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        ssml_message: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgsDict']]
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgs']] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgs'] custom_payload: Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgs'] image_response_card: Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgs'] plain_text_message: Configuration block for a message in plain text format. See `plain_text_message`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgs'] ssml_message: Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgs']]:
        """
        Configuration block for a message in a custom format defined by the client application. See `custom_payload`.
        """
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgs']]:
        """
        Configuration block for a message that defines a response card that the client application can show to the user. See `image_response_card`.
        """
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgs']]:
        """
        Configuration block for a message in plain text format. See `plain_text_message`.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgs']]:
        """
        Configuration block for a message in Speech Synthesis Markup Language (SSML). See `ssml_message`.
        """
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        String that is sent to your application.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: String that is sent to your application.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        String that is sent to your application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        image_url: NotRequired[pulumi.Input[str]]
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        subtitle: NotRequired[pulumi.Input[str]]
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgs']]] buttons: Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        :param pulumi.Input[str] image_url: URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        :param pulumi.Input[str] subtitle: Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title to display on the response card. The format of the title is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        """
        Configuration blocks for buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button. See `button`.
        """
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        value: pulumi.Input[str]
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] text: Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        :param pulumi.Input[str] value: Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        Text that appears on the button. Use this to tell the user what value is returned when they choose this button.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Message to send to the user.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Message to send to the user.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Message to send to the user.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        SSML text that defines the prompt.
        """
elif False:
    V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingInitialResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: SSML text that defines the prompt.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        SSML text that defines the prompt.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingNextStepArgsDict(TypedDict):
        dialog_action: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepDialogActionArgsDict']]
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        intent: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentArgsDict']]
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        session_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
elif False:
    V2modelsIntentInitialResponseSettingNextStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingNextStepArgs:
    def __init__(__self__, *,
                 dialog_action: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepDialogActionArgs']] = None,
                 intent: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentArgs']] = None,
                 session_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['V2modelsIntentInitialResponseSettingNextStepDialogActionArgs'] dialog_action: Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentArgs'] intent: Configuration block for override settings to configure the intent state. See `intent`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepDialogActionArgs']]:
        """
        Configuration block for action that the bot executes at runtime when the conversation reaches this step. See `dialog_action`.
        """
        return pulumi.get(self, "dialog_action")

    @dialog_action.setter
    def dialog_action(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepDialogActionArgs']]):
        pulumi.set(self, "dialog_action", value)

    @property
    @pulumi.getter
    def intent(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentArgs']]:
        """
        Configuration block for override settings to configure the intent state. See `intent`.
        """
        return pulumi.get(self, "intent")

    @intent.setter
    def intent(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentArgs']]):
        pulumi.set(self, "intent", value)

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")

    @session_attributes.setter
    def session_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_attributes", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingNextStepDialogActionArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        slot_to_elicit: NotRequired[pulumi.Input[str]]
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        suppress_next_message: NotRequired[pulumi.Input[bool]]
        """
        Whether the next message for the intent is _not_ used.
        """
elif False:
    V2modelsIntentInitialResponseSettingNextStepDialogActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingNextStepDialogActionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 slot_to_elicit: Optional[pulumi.Input[str]] = None,
                 suppress_next_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        :param pulumi.Input[str] slot_to_elicit: If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        :param pulumi.Input[bool] suppress_next_message: Whether the next message for the intent is _not_ used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Action that the bot should execute. Valid values are `ElicitIntent`, `StartIntent`, `ElicitSlot`, `EvaluateConditional`, `InvokeDialogCodeHook`, `ConfirmIntent`, `FulfillIntent`, `CloseIntent`, `EndConversation`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[pulumi.Input[str]]:
        """
        If the dialog action is `ElicitSlot`, defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @slot_to_elicit.setter
    def slot_to_elicit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_to_elicit", value)

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the next message for the intent is _not_ used.
        """
        return pulumi.get(self, "suppress_next_message")

    @suppress_next_message.setter
    def suppress_next_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_next_message", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingNextStepIntentArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the intent.
        """
        slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentSlotArgsDict']]]]
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
elif False:
    V2modelsIntentInitialResponseSettingNextStepIntentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingNextStepIntentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentSlotArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the intent.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentSlotArgs']]] slots: Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the intent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentSlotArgs']]]]:
        """
        Configuration block for all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden. See `slot`.
        """
        return pulumi.get(self, "slots")

    @slots.setter
    def slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentSlotArgs']]]]):
        pulumi.set(self, "slots", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingNextStepIntentSlotArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        value: NotRequired[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgsDict']]
        """
        Configuration block for the current value of the slot. See `value`.
        """
elif False:
    V2modelsIntentInitialResponseSettingNextStepIntentSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingNextStepIntentSlotArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 shape: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgs']] = None):
        """
        :param pulumi.Input[str] map_block_key: Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        :param pulumi.Input[str] shape: When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        :param pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgs'] value: Configuration block for the current value of the slot. See `value`.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        """
        Which attempt to configure. Valid values are `Initial`, `Retry1`, `Retry2`, `Retry3`, `Retry4`, `Retry5`.
        """
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        When the shape value is `List`, `values` contains a list of slot values. When the value is `Scalar`, `value` contains a single value.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgs']]:
        """
        Configuration block for the current value of the slot. See `value`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgsDict(TypedDict):
        interpreted_value: NotRequired[pulumi.Input[str]]
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
elif False:
    V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInitialResponseSettingNextStepIntentSlotValueArgs:
    def __init__(__self__, *,
                 interpreted_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interpreted_value: Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.
        """
        return pulumi.get(self, "interpreted_value")

    @interpreted_value.setter
    def interpreted_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interpreted_value", value)


if not MYPY:
    class V2modelsIntentInputContextArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the context.
        """
elif False:
    V2modelsIntentInputContextArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentInputContextArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of the context.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the context.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class V2modelsIntentKendraConfigurationArgsDict(TypedDict):
        kendra_index: pulumi.Input[str]
        """
        ARN of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.
        """
        query_filter_string: NotRequired[pulumi.Input[str]]
        """
        Query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html).
        """
        query_filter_string_enabled: NotRequired[pulumi.Input[bool]]
        """
        Whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
        """
elif False:
    V2modelsIntentKendraConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentKendraConfigurationArgs:
    def __init__(__self__, *,
                 kendra_index: pulumi.Input[str],
                 query_filter_string: Optional[pulumi.Input[str]] = None,
                 query_filter_string_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] kendra_index: ARN of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.
        :param pulumi.Input[str] query_filter_string: Query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html).
        :param pulumi.Input[bool] query_filter_string_enabled: Whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
        """
        pulumi.set(__self__, "kendra_index", kendra_index)
        if query_filter_string is not None:
            pulumi.set(__self__, "query_filter_string", query_filter_string)
        if query_filter_string_enabled is not None:
            pulumi.set(__self__, "query_filter_string_enabled", query_filter_string_enabled)

    @property
    @pulumi.getter(name="kendraIndex")
    def kendra_index(self) -> pulumi.Input[str]:
        """
        ARN of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot.
        """
        return pulumi.get(self, "kendra_index")

    @kendra_index.setter
    def kendra_index(self, value: pulumi.Input[str]):
        pulumi.set(self, "kendra_index", value)

    @property
    @pulumi.getter(name="queryFilterString")
    def query_filter_string(self) -> Optional[pulumi.Input[str]]:
        """
        Query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html).
        """
        return pulumi.get(self, "query_filter_string")

    @query_filter_string.setter
    def query_filter_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_filter_string", value)

    @property
    @pulumi.getter(name="queryFilterStringEnabled")
    def query_filter_string_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
        """
        return pulumi.get(self, "query_filter_string_enabled")

    @query_filter_string_enabled.setter
    def query_filter_string_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "query_filter_string_enabled", value)


if not MYPY:
    class V2modelsIntentOutputContextArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the output context.
        """
        time_to_live_in_seconds: pulumi.Input[int]
        """
        Amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user.
        """
        turns_to_live: pulumi.Input[int]
        """
        Number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user.
        """
elif False:
    V2modelsIntentOutputContextArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentOutputContextArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 time_to_live_in_seconds: pulumi.Input[int],
                 turns_to_live: pulumi.Input[int]):
        """
        :param pulumi.Input[str] name: Name of the output context.
        :param pulumi.Input[int] time_to_live_in_seconds: Amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user.
        :param pulumi.Input[int] turns_to_live: Number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        pulumi.set(__self__, "turns_to_live", turns_to_live)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the output context.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> pulumi.Input[int]:
        """
        Amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user.
        """
        return pulumi.get(self, "time_to_live_in_seconds")

    @time_to_live_in_seconds.setter
    def time_to_live_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "time_to_live_in_seconds", value)

    @property
    @pulumi.getter(name="turnsToLive")
    def turns_to_live(self) -> pulumi.Input[int]:
        """
        Number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user.
        """
        return pulumi.get(self, "turns_to_live")

    @turns_to_live.setter
    def turns_to_live(self, value: pulumi.Input[int]):
        pulumi.set(self, "turns_to_live", value)


if not MYPY:
    class V2modelsIntentSampleUtteranceArgsDict(TypedDict):
        utterance: pulumi.Input[str]
        """
        Sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
elif False:
    V2modelsIntentSampleUtteranceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentSampleUtteranceArgs:
    def __init__(__self__, *,
                 utterance: pulumi.Input[str]):
        """
        :param pulumi.Input[str] utterance: Sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
        pulumi.set(__self__, "utterance", utterance)

    @property
    @pulumi.getter
    def utterance(self) -> pulumi.Input[str]:
        """
        Sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
        return pulumi.get(self, "utterance")

    @utterance.setter
    def utterance(self, value: pulumi.Input[str]):
        pulumi.set(self, "utterance", value)


if not MYPY:
    class V2modelsIntentSlotPriorityArgsDict(TypedDict):
        priority: pulumi.Input[int]
        """
        Priority that Amazon Lex should apply to the slot.
        """
        slot_id: pulumi.Input[str]
        """
        Unique identifier of the slot.
        """
elif False:
    V2modelsIntentSlotPriorityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentSlotPriorityArgs:
    def __init__(__self__, *,
                 priority: pulumi.Input[int],
                 slot_id: pulumi.Input[str]):
        """
        :param pulumi.Input[int] priority: Priority that Amazon Lex should apply to the slot.
        :param pulumi.Input[str] slot_id: Unique identifier of the slot.
        """
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "slot_id", slot_id)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        Priority that Amazon Lex should apply to the slot.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="slotId")
    def slot_id(self) -> pulumi.Input[str]:
        """
        Unique identifier of the slot.
        """
        return pulumi.get(self, "slot_id")

    @slot_id.setter
    def slot_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slot_id", value)


if not MYPY:
    class V2modelsIntentTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        update: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    V2modelsIntentTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsIntentTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class V2modelsSlotMultipleValuesSettingArgsDict(TypedDict):
        allow_multiple_values: NotRequired[pulumi.Input[bool]]
        """
        Whether a slot can return multiple values. When `true`, the slot may return more than one value in a response. When `false`, the slot returns only a single value. Multi-value slots are only available in the `en-US` locale.
        """
elif False:
    V2modelsSlotMultipleValuesSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotMultipleValuesSettingArgs:
    def __init__(__self__, *,
                 allow_multiple_values: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] allow_multiple_values: Whether a slot can return multiple values. When `true`, the slot may return more than one value in a response. When `false`, the slot returns only a single value. Multi-value slots are only available in the `en-US` locale.
        """
        if allow_multiple_values is not None:
            pulumi.set(__self__, "allow_multiple_values", allow_multiple_values)

    @property
    @pulumi.getter(name="allowMultipleValues")
    def allow_multiple_values(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a slot can return multiple values. When `true`, the slot may return more than one value in a response. When `false`, the slot returns only a single value. Multi-value slots are only available in the `en-US` locale.
        """
        return pulumi.get(self, "allow_multiple_values")

    @allow_multiple_values.setter
    def allow_multiple_values(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_multiple_values", value)


if not MYPY:
    class V2modelsSlotObfuscationSettingArgsDict(TypedDict):
        obfuscation_setting_type: pulumi.Input[str]
        """
        Whether Amazon Lex obscures slot values in conversation logs. Valid values are `DefaultObfuscation` and `None`.
        """
elif False:
    V2modelsSlotObfuscationSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotObfuscationSettingArgs:
    def __init__(__self__, *,
                 obfuscation_setting_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] obfuscation_setting_type: Whether Amazon Lex obscures slot values in conversation logs. Valid values are `DefaultObfuscation` and `None`.
        """
        pulumi.set(__self__, "obfuscation_setting_type", obfuscation_setting_type)

    @property
    @pulumi.getter(name="obfuscationSettingType")
    def obfuscation_setting_type(self) -> pulumi.Input[str]:
        """
        Whether Amazon Lex obscures slot values in conversation logs. Valid values are `DefaultObfuscation` and `None`.
        """
        return pulumi.get(self, "obfuscation_setting_type")

    @obfuscation_setting_type.setter
    def obfuscation_setting_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "obfuscation_setting_type", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingArgsDict(TypedDict):
        expression: NotRequired[pulumi.Input[str]]
        """
        Expression text for defining the constituent sub slots in the composite slot using logical `AND` and `OR` operators.
        """
        slot_specifications: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationArgsDict']]]]
        """
        Specifications for the constituent sub slots of a composite slot.
        See the `slot_specification` argument reference below.
        """
elif False:
    V2modelsSlotSubSlotSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 slot_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationArgs']]]] = None):
        """
        :param pulumi.Input[str] expression: Expression text for defining the constituent sub slots in the composite slot using logical `AND` and `OR` operators.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationArgs']]] slot_specifications: Specifications for the constituent sub slots of a composite slot.
               See the `slot_specification` argument reference below.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if slot_specifications is not None:
            pulumi.set(__self__, "slot_specifications", slot_specifications)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Expression text for defining the constituent sub slots in the composite slot using logical `AND` and `OR` operators.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="slotSpecifications")
    def slot_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationArgs']]]]:
        """
        Specifications for the constituent sub slots of a composite slot.
        See the `slot_specification` argument reference below.
        """
        return pulumi.get(self, "slot_specifications")

    @slot_specifications.setter
    def slot_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationArgs']]]]):
        pulumi.set(self, "slot_specifications", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationArgsDict(TypedDict):
        map_block_key: pulumi.Input[str]
        slot_type_id: pulumi.Input[str]
        """
        Unique identifier assigned to the slot type.
        """
        value_elicitation_settings: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingArgsDict']]]]
        """
        Elicitation setting details for constituent sub slots of a composite slot.
        See the `value_elicitation_setting` argument reference below.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationArgs:
    def __init__(__self__, *,
                 map_block_key: pulumi.Input[str],
                 slot_type_id: pulumi.Input[str],
                 value_elicitation_settings: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingArgs']]]] = None):
        """
        :param pulumi.Input[str] slot_type_id: Unique identifier assigned to the slot type.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingArgs']]] value_elicitation_settings: Elicitation setting details for constituent sub slots of a composite slot.
               See the `value_elicitation_setting` argument reference below.
        """
        pulumi.set(__self__, "map_block_key", map_block_key)
        pulumi.set(__self__, "slot_type_id", slot_type_id)
        if value_elicitation_settings is not None:
            pulumi.set(__self__, "value_elicitation_settings", value_elicitation_settings)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter(name="slotTypeId")
    def slot_type_id(self) -> pulumi.Input[str]:
        """
        Unique identifier assigned to the slot type.
        """
        return pulumi.get(self, "slot_type_id")

    @slot_type_id.setter
    def slot_type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slot_type_id", value)

    @property
    @pulumi.getter(name="valueElicitationSettings")
    def value_elicitation_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingArgs']]]]:
        """
        Elicitation setting details for constituent sub slots of a composite slot.
        See the `value_elicitation_setting` argument reference below.
        """
        return pulumi.get(self, "value_elicitation_settings")

    @value_elicitation_settings.setter
    def value_elicitation_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingArgs']]]]):
        pulumi.set(self, "value_elicitation_settings", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingArgsDict(TypedDict):
        prompt_specification: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationArgsDict']
        """
        Prompt that Amazon Lex uses to elicit the slot value from the user.
        See the `lex.V2modelsIntent` resource for details on the `prompt_specification` argument reference - they are identical.
        """
        default_value_specifications: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationArgsDict']]]]
        """
        List of default values for a slot.
        See the `default_value_specification` argument reference below.
        """
        sample_utterances: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingSampleUtteranceArgsDict']]]]
        wait_and_continue_specifications: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationArgsDict']]]]
        """
        Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
        See the `wait_and_continue_specification` argument reference below.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingArgs:
    def __init__(__self__, *,
                 prompt_specification: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationArgs'],
                 default_value_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationArgs']]]] = None,
                 sample_utterances: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingSampleUtteranceArgs']]]] = None,
                 wait_and_continue_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationArgs'] prompt_specification: Prompt that Amazon Lex uses to elicit the slot value from the user.
               See the `lex.V2modelsIntent` resource for details on the `prompt_specification` argument reference - they are identical.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationArgs']]] default_value_specifications: List of default values for a slot.
               See the `default_value_specification` argument reference below.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationArgs']]] wait_and_continue_specifications: Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
               See the `wait_and_continue_specification` argument reference below.
        """
        pulumi.set(__self__, "prompt_specification", prompt_specification)
        if default_value_specifications is not None:
            pulumi.set(__self__, "default_value_specifications", default_value_specifications)
        if sample_utterances is not None:
            pulumi.set(__self__, "sample_utterances", sample_utterances)
        if wait_and_continue_specifications is not None:
            pulumi.set(__self__, "wait_and_continue_specifications", wait_and_continue_specifications)

    @property
    @pulumi.getter(name="promptSpecification")
    def prompt_specification(self) -> pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationArgs']:
        """
        Prompt that Amazon Lex uses to elicit the slot value from the user.
        See the `lex.V2modelsIntent` resource for details on the `prompt_specification` argument reference - they are identical.
        """
        return pulumi.get(self, "prompt_specification")

    @prompt_specification.setter
    def prompt_specification(self, value: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationArgs']):
        pulumi.set(self, "prompt_specification", value)

    @property
    @pulumi.getter(name="defaultValueSpecifications")
    def default_value_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationArgs']]]]:
        """
        List of default values for a slot.
        See the `default_value_specification` argument reference below.
        """
        return pulumi.get(self, "default_value_specifications")

    @default_value_specifications.setter
    def default_value_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationArgs']]]]):
        pulumi.set(self, "default_value_specifications", value)

    @property
    @pulumi.getter(name="sampleUtterances")
    def sample_utterances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingSampleUtteranceArgs']]]]:
        return pulumi.get(self, "sample_utterances")

    @sample_utterances.setter
    def sample_utterances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingSampleUtteranceArgs']]]]):
        pulumi.set(self, "sample_utterances", value)

    @property
    @pulumi.getter(name="waitAndContinueSpecifications")
    def wait_and_continue_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationArgs']]]]:
        """
        Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
        See the `wait_and_continue_specification` argument reference below.
        """
        return pulumi.get(self, "wait_and_continue_specifications")

    @wait_and_continue_specifications.setter
    def wait_and_continue_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationArgs']]]]):
        pulumi.set(self, "wait_and_continue_specifications", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationArgsDict(TypedDict):
        default_value_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationDefaultValueListArgsDict']]]]
        """
        List of default values.
        Amazon Lex chooses the default value to use in the order that they are presented in the list.
        See the `default_value_list` argument reference below.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationArgs:
    def __init__(__self__, *,
                 default_value_lists: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs']]] default_value_lists: List of default values.
               Amazon Lex chooses the default value to use in the order that they are presented in the list.
               See the `default_value_list` argument reference below.
        """
        if default_value_lists is not None:
            pulumi.set(__self__, "default_value_lists", default_value_lists)

    @property
    @pulumi.getter(name="defaultValueLists")
    def default_value_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs']]]]:
        """
        List of default values.
        Amazon Lex chooses the default value to use in the order that they are presented in the list.
        See the `default_value_list` argument reference below.
        """
        return pulumi.get(self, "default_value_lists")

    @default_value_lists.setter
    def default_value_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs']]]]):
        pulumi.set(self, "default_value_lists", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationDefaultValueListArgsDict(TypedDict):
        default_value: pulumi.Input[str]
        """
        Default value to use when a user doesn't provide a value for a slot.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationDefaultValueListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs:
    def __init__(__self__, *,
                 default_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] default_value: Default value to use when a user doesn't provide a value for a slot.
        """
        pulumi.set(__self__, "default_value", default_value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> pulumi.Input[str]:
        """
        Default value to use when a user doesn't provide a value for a slot.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationArgsDict(TypedDict):
        max_retries: pulumi.Input[int]
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupArgsDict']]]]
        message_selection_strategy: NotRequired[pulumi.Input[str]]
        prompt_attempts_specifications: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict']]]]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationArgs:
    def __init__(__self__, *,
                 max_retries: pulumi.Input[int],
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupArgs']]]] = None,
                 message_selection_strategy: Optional[pulumi.Input[str]] = None,
                 prompt_attempts_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgs']]]] = None):
        pulumi.set(__self__, "max_retries", max_retries)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)
        if message_selection_strategy is not None:
            pulumi.set(__self__, "message_selection_strategy", message_selection_strategy)
        if prompt_attempts_specifications is not None:
            pulumi.set(__self__, "prompt_attempts_specifications", prompt_attempts_specifications)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupArgs']]]]:
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)

    @property
    @pulumi.getter(name="messageSelectionStrategy")
    def message_selection_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_selection_strategy")

    @message_selection_strategy.setter
    def message_selection_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_selection_strategy", value)

    @property
    @pulumi.getter(name="promptAttemptsSpecifications")
    def prompt_attempts_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgs']]]]:
        return pulumi.get(self, "prompt_attempts_specifications")

    @prompt_attempts_specifications.setter
    def prompt_attempts_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgs']]]]):
        pulumi.set(self, "prompt_attempts_specifications", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user.
               See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user.
               When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
               See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict']]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict']]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs']] = None):
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs']]:
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict']]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict']]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs']] = None):
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs']]:
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict(TypedDict):
        allowed_input_types: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict']
        map_block_key: pulumi.Input[str]
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        audio_and_dtmf_input_specification: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict']]
        text_input_specification: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict']]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgs:
    def __init__(__self__, *,
                 allowed_input_types: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs'],
                 map_block_key: pulumi.Input[str],
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 audio_and_dtmf_input_specification: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs']] = None,
                 text_input_specification: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs']] = None):
        pulumi.set(__self__, "allowed_input_types", allowed_input_types)
        pulumi.set(__self__, "map_block_key", map_block_key)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if audio_and_dtmf_input_specification is not None:
            pulumi.set(__self__, "audio_and_dtmf_input_specification", audio_and_dtmf_input_specification)
        if text_input_specification is not None:
            pulumi.set(__self__, "text_input_specification", text_input_specification)

    @property
    @pulumi.getter(name="allowedInputTypes")
    def allowed_input_types(self) -> pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs']:
        return pulumi.get(self, "allowed_input_types")

    @allowed_input_types.setter
    def allowed_input_types(self, value: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs']):
        pulumi.set(self, "allowed_input_types", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="audioAndDtmfInputSpecification")
    def audio_and_dtmf_input_specification(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs']]:
        return pulumi.get(self, "audio_and_dtmf_input_specification")

    @audio_and_dtmf_input_specification.setter
    def audio_and_dtmf_input_specification(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs']]):
        pulumi.set(self, "audio_and_dtmf_input_specification", value)

    @property
    @pulumi.getter(name="textInputSpecification")
    def text_input_specification(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs']]:
        return pulumi.get(self, "text_input_specification")

    @text_input_specification.setter
    def text_input_specification(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs']]):
        pulumi.set(self, "text_input_specification", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict(TypedDict):
        allow_audio_input: pulumi.Input[bool]
        allow_dtmf_input: pulumi.Input[bool]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs:
    def __init__(__self__, *,
                 allow_audio_input: pulumi.Input[bool],
                 allow_dtmf_input: pulumi.Input[bool]):
        pulumi.set(__self__, "allow_audio_input", allow_audio_input)
        pulumi.set(__self__, "allow_dtmf_input", allow_dtmf_input)

    @property
    @pulumi.getter(name="allowAudioInput")
    def allow_audio_input(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_audio_input")

    @allow_audio_input.setter
    def allow_audio_input(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_audio_input", value)

    @property
    @pulumi.getter(name="allowDtmfInput")
    def allow_dtmf_input(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_dtmf_input")

    @allow_dtmf_input.setter
    def allow_dtmf_input(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_dtmf_input", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict(TypedDict):
        start_timeout_ms: pulumi.Input[int]
        audio_specification: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict']]
        dtmf_specification: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict']]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs:
    def __init__(__self__, *,
                 start_timeout_ms: pulumi.Input[int],
                 audio_specification: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs']] = None,
                 dtmf_specification: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs']] = None):
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)
        if audio_specification is not None:
            pulumi.set(__self__, "audio_specification", audio_specification)
        if dtmf_specification is not None:
            pulumi.set(__self__, "dtmf_specification", dtmf_specification)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start_timeout_ms")

    @start_timeout_ms.setter
    def start_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_timeout_ms", value)

    @property
    @pulumi.getter(name="audioSpecification")
    def audio_specification(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs']]:
        return pulumi.get(self, "audio_specification")

    @audio_specification.setter
    def audio_specification(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs']]):
        pulumi.set(self, "audio_specification", value)

    @property
    @pulumi.getter(name="dtmfSpecification")
    def dtmf_specification(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs']]:
        return pulumi.get(self, "dtmf_specification")

    @dtmf_specification.setter
    def dtmf_specification(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs']]):
        pulumi.set(self, "dtmf_specification", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict(TypedDict):
        end_timeout_ms: pulumi.Input[int]
        max_length_ms: pulumi.Input[int]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs:
    def __init__(__self__, *,
                 end_timeout_ms: pulumi.Input[int],
                 max_length_ms: pulumi.Input[int]):
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length_ms", max_length_ms)

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "end_timeout_ms")

    @end_timeout_ms.setter
    def end_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "end_timeout_ms", value)

    @property
    @pulumi.getter(name="maxLengthMs")
    def max_length_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_length_ms")

    @max_length_ms.setter
    def max_length_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_length_ms", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict(TypedDict):
        deletion_character: pulumi.Input[str]
        end_character: pulumi.Input[str]
        end_timeout_ms: pulumi.Input[int]
        max_length: pulumi.Input[int]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs:
    def __init__(__self__, *,
                 deletion_character: pulumi.Input[str],
                 end_character: pulumi.Input[str],
                 end_timeout_ms: pulumi.Input[int],
                 max_length: pulumi.Input[int]):
        pulumi.set(__self__, "deletion_character", deletion_character)
        pulumi.set(__self__, "end_character", end_character)
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length", max_length)

    @property
    @pulumi.getter(name="deletionCharacter")
    def deletion_character(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deletion_character")

    @deletion_character.setter
    def deletion_character(self, value: pulumi.Input[str]):
        pulumi.set(self, "deletion_character", value)

    @property
    @pulumi.getter(name="endCharacter")
    def end_character(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_character")

    @end_character.setter
    def end_character(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_character", value)

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "end_timeout_ms")

    @end_timeout_ms.setter
    def end_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "end_timeout_ms", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_length", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict(TypedDict):
        start_timeout_ms: pulumi.Input[int]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs:
    def __init__(__self__, *,
                 start_timeout_ms: pulumi.Input[int]):
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start_timeout_ms")

    @start_timeout_ms.setter
    def start_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_timeout_ms", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingSampleUtteranceArgsDict(TypedDict):
        utterance: pulumi.Input[str]
        """
        The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingSampleUtteranceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingSampleUtteranceArgs:
    def __init__(__self__, *,
                 utterance: pulumi.Input[str]):
        """
        :param pulumi.Input[str] utterance: The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
        pulumi.set(__self__, "utterance", utterance)

    @property
    @pulumi.getter
    def utterance(self) -> pulumi.Input[str]:
        """
        The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
        return pulumi.get(self, "utterance")

    @utterance.setter
    def utterance(self, value: pulumi.Input[str]):
        pulumi.set(self, "utterance", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationArgsDict(TypedDict):
        active: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether the bot will wait for a user to respond.
        When this field is `false`, wait and continue responses for a slot aren't used.
        If the active field isn't specified, the default is `true`.
        """
        continue_responses: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgsDict']]]]
        """
        Response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
        See the `continue_response` argument reference below.
        """
        still_waiting_responses: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgsDict']]]]
        """
        Response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
        See the `still_waiting_response` argument reference below.
        """
        waiting_responses: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgsDict']]]]
        """
        Response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
        See the `waiting_response` argument reference below.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationArgs:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 continue_responses: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs']]]] = None,
                 still_waiting_responses: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs']]]] = None,
                 waiting_responses: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Specifies whether the bot will wait for a user to respond.
               When this field is `false`, wait and continue responses for a slot aren't used.
               If the active field isn't specified, the default is `true`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs']]] continue_responses: Response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
               See the `continue_response` argument reference below.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs']]] still_waiting_responses: Response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
               See the `still_waiting_response` argument reference below.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs']]] waiting_responses: Response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
               See the `waiting_response` argument reference below.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if continue_responses is not None:
            pulumi.set(__self__, "continue_responses", continue_responses)
        if still_waiting_responses is not None:
            pulumi.set(__self__, "still_waiting_responses", still_waiting_responses)
        if waiting_responses is not None:
            pulumi.set(__self__, "waiting_responses", waiting_responses)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the bot will wait for a user to respond.
        When this field is `false`, wait and continue responses for a slot aren't used.
        If the active field isn't specified, the default is `true`.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="continueResponses")
    def continue_responses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs']]]]:
        """
        Response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
        See the `continue_response` argument reference below.
        """
        return pulumi.get(self, "continue_responses")

    @continue_responses.setter
    def continue_responses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs']]]]):
        pulumi.set(self, "continue_responses", value)

    @property
    @pulumi.getter(name="stillWaitingResponses")
    def still_waiting_responses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs']]]]:
        """
        Response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
        See the `still_waiting_response` argument reference below.
        """
        return pulumi.get(self, "still_waiting_responses")

    @still_waiting_responses.setter
    def still_waiting_responses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs']]]]):
        pulumi.set(self, "still_waiting_responses", value)

    @property
    @pulumi.getter(name="waitingResponses")
    def waiting_responses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs']]]]:
        """
        Response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
        See the `waiting_response` argument reference below.
        """
        return pulumi.get(self, "waiting_responses")

    @waiting_responses.setter
    def waiting_responses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs']]]]):
        pulumi.set(self, "waiting_responses", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user.
        Amazon Lex chooses the actual response to send at runtime.
        See `message_group`.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user.
               Amazon Lex chooses the actual response to send at runtime.
               See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user.
        Amazon Lex chooses the actual response to send at runtime.
        See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user.
               See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user.
               When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
               See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgsDict']]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgsDict']]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgs']] = None):
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgs']]:
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgsDict']]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgsDict']]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgs']] = None):
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgs']]:
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgsDict(TypedDict):
        frequency_in_seconds: pulumi.Input[int]
        """
        How often a message should be sent to the user.
        """
        timeout_in_seconds: pulumi.Input[int]
        """
        If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.
        """
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgsDict']]]]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs:
    def __init__(__self__, *,
                 frequency_in_seconds: pulumi.Input[int],
                 timeout_in_seconds: pulumi.Input[int],
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[int] frequency_in_seconds: How often a message should be sent to the user.
        :param pulumi.Input[int] timeout_in_seconds: If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        """
        pulumi.set(__self__, "frequency_in_seconds", frequency_in_seconds)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="frequencyInSeconds")
    def frequency_in_seconds(self) -> pulumi.Input[int]:
        """
        How often a message should be sent to the user.
        """
        return pulumi.get(self, "frequency_in_seconds")

    @frequency_in_seconds.setter
    def frequency_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency_in_seconds", value)

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> pulumi.Input[int]:
        """
        If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.
        """
        return pulumi.get(self, "timeout_in_seconds")

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "timeout_in_seconds", value)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgs']]]]:
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user.
               See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user.
               When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
               See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgsDict']]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgsDict']]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgs']] = None):
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgs']]:
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgsDict']]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgsDict']]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgs']] = None):
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgs']]:
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user.
        Amazon Lex chooses the actual response to send at runtime.
        See `message_group`.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user.
               Amazon Lex chooses the actual response to send at runtime.
               See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user.
        Amazon Lex chooses the actual response to send at runtime.
        See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user.
               See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user.
               When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
               See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgsDict']]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgsDict']]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgs']] = None):
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgs']]:
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payload: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgsDict']]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgsDict']]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payload: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgs']] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgs']] = None):
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgs']]:
        return pulumi.get(self, "custom_payload")

    @custom_payload.setter
    def custom_payload(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgs']]):
        pulumi.set(self, "custom_payload", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotSubSlotSettingSlotSpecificationValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        update: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    V2modelsSlotTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class V2modelsSlotTypeCompositeSlotTypeSettingArgsDict(TypedDict):
        sub_slots: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgsDict']]]]
        """
        Sub slots in the composite slot.
        See `sub_slots` argument reference below.
        """
elif False:
    V2modelsSlotTypeCompositeSlotTypeSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeCompositeSlotTypeSettingArgs:
    def __init__(__self__, *,
                 sub_slots: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs']]] sub_slots: Sub slots in the composite slot.
               See `sub_slots` argument reference below.
        """
        if sub_slots is not None:
            pulumi.set(__self__, "sub_slots", sub_slots)

    @property
    @pulumi.getter(name="subSlots")
    def sub_slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs']]]]:
        """
        Sub slots in the composite slot.
        See `sub_slots` argument reference below.
        """
        return pulumi.get(self, "sub_slots")

    @sub_slots.setter
    def sub_slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs']]]]):
        pulumi.set(self, "sub_slots", value)


if not MYPY:
    class V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of a constituent sub slot inside a composite slot.
        """
        slot_type_id: pulumi.Input[str]
        """
        Unique identifier assigned to a slot type.
        This refers to either a built-in slot type or the unique `slot_type_id` of a custom slot type.
        """
elif False:
    V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeCompositeSlotTypeSettingSubSlotArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 slot_type_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of a constituent sub slot inside a composite slot.
        :param pulumi.Input[str] slot_type_id: Unique identifier assigned to a slot type.
               This refers to either a built-in slot type or the unique `slot_type_id` of a custom slot type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slot_type_id", slot_type_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of a constituent sub slot inside a composite slot.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="slotTypeId")
    def slot_type_id(self) -> pulumi.Input[str]:
        """
        Unique identifier assigned to a slot type.
        This refers to either a built-in slot type or the unique `slot_type_id` of a custom slot type.
        """
        return pulumi.get(self, "slot_type_id")

    @slot_type_id.setter
    def slot_type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slot_type_id", value)


if not MYPY:
    class V2modelsSlotTypeExternalSourceSettingArgsDict(TypedDict):
        grammar_slot_type_setting: NotRequired[pulumi.Input['V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgsDict']]
        """
        Settings required for a slot type based on a grammar that you provide.
        See `grammar_slot_type_setting` argument reference below.
        """
elif False:
    V2modelsSlotTypeExternalSourceSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeExternalSourceSettingArgs:
    def __init__(__self__, *,
                 grammar_slot_type_setting: Optional[pulumi.Input['V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgs']] = None):
        """
        :param pulumi.Input['V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgs'] grammar_slot_type_setting: Settings required for a slot type based on a grammar that you provide.
               See `grammar_slot_type_setting` argument reference below.
        """
        if grammar_slot_type_setting is not None:
            pulumi.set(__self__, "grammar_slot_type_setting", grammar_slot_type_setting)

    @property
    @pulumi.getter(name="grammarSlotTypeSetting")
    def grammar_slot_type_setting(self) -> Optional[pulumi.Input['V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgs']]:
        """
        Settings required for a slot type based on a grammar that you provide.
        See `grammar_slot_type_setting` argument reference below.
        """
        return pulumi.get(self, "grammar_slot_type_setting")

    @grammar_slot_type_setting.setter
    def grammar_slot_type_setting(self, value: Optional[pulumi.Input['V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgs']]):
        pulumi.set(self, "grammar_slot_type_setting", value)


if not MYPY:
    class V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgsDict(TypedDict):
        source: NotRequired[pulumi.Input['V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgsDict']]
        """
        Source of the grammar used to create the slot type.
        See `source` argument reference below.
        """
elif False:
    V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingArgs:
    def __init__(__self__, *,
                 source: Optional[pulumi.Input['V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgs']] = None):
        """
        :param pulumi.Input['V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgs'] source: Source of the grammar used to create the slot type.
               See `source` argument reference below.
        """
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgs']]:
        """
        Source of the grammar used to create the slot type.
        See `source` argument reference below.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgs']]):
        pulumi.set(self, "source", value)


if not MYPY:
    class V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgsDict(TypedDict):
        kms_key_arn: pulumi.Input[str]
        """
        KMS key required to decrypt the contents of the grammar, if any.
        """
        s3_bucket_name: pulumi.Input[str]
        """
        Name of the Amazon S3 bucket that contains the grammar source.
        """
        s3_object_key: pulumi.Input[str]
        """
        Path to the grammar in the Amazon S3 bucket.
        """
elif False:
    V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeExternalSourceSettingGrammarSlotTypeSettingSourceArgs:
    def __init__(__self__, *,
                 kms_key_arn: pulumi.Input[str],
                 s3_bucket_name: pulumi.Input[str],
                 s3_object_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] kms_key_arn: KMS key required to decrypt the contents of the grammar, if any.
        :param pulumi.Input[str] s3_bucket_name: Name of the Amazon S3 bucket that contains the grammar source.
        :param pulumi.Input[str] s3_object_key: Path to the grammar in the Amazon S3 bucket.
        """
        pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_object_key", s3_object_key)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> pulumi.Input[str]:
        """
        KMS key required to decrypt the contents of the grammar, if any.
        """
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_key_arn", value)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[str]:
        """
        Name of the Amazon S3 bucket that contains the grammar source.
        """
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_name", value)

    @property
    @pulumi.getter(name="s3ObjectKey")
    def s3_object_key(self) -> pulumi.Input[str]:
        """
        Path to the grammar in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_object_key")

    @s3_object_key.setter
    def s3_object_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_object_key", value)


if not MYPY:
    class V2modelsSlotTypeSlotTypeValuesArgsDict(TypedDict):
        sample_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeSlotTypeValuesSampleValueArgsDict']]]]
        """
        Value of the slot type entry.
        See `sample_value` argument reference below.
        """
        synonyms: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeSlotTypeValuesSynonymArgsDict']]]]
        """
        A list of additional values related to the slot type entry.
        See `synonyms` argument reference below.
        """
elif False:
    V2modelsSlotTypeSlotTypeValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeSlotTypeValuesArgs:
    def __init__(__self__, *,
                 sample_values: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeSlotTypeValuesSampleValueArgs']]]] = None,
                 synonyms: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeSlotTypeValuesSynonymArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeSlotTypeValuesSampleValueArgs']]] sample_values: Value of the slot type entry.
               See `sample_value` argument reference below.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeSlotTypeValuesSynonymArgs']]] synonyms: A list of additional values related to the slot type entry.
               See `synonyms` argument reference below.
        """
        if sample_values is not None:
            pulumi.set(__self__, "sample_values", sample_values)
        if synonyms is not None:
            pulumi.set(__self__, "synonyms", synonyms)

    @property
    @pulumi.getter(name="sampleValues")
    def sample_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeSlotTypeValuesSampleValueArgs']]]]:
        """
        Value of the slot type entry.
        See `sample_value` argument reference below.
        """
        return pulumi.get(self, "sample_values")

    @sample_values.setter
    def sample_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeSlotTypeValuesSampleValueArgs']]]]):
        pulumi.set(self, "sample_values", value)

    @property
    @pulumi.getter
    def synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeSlotTypeValuesSynonymArgs']]]]:
        """
        A list of additional values related to the slot type entry.
        See `synonyms` argument reference below.
        """
        return pulumi.get(self, "synonyms")

    @synonyms.setter
    def synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeSlotTypeValuesSynonymArgs']]]]):
        pulumi.set(self, "synonyms", value)


if not MYPY:
    class V2modelsSlotTypeSlotTypeValuesSampleValueArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Value that can be used for a slot type.
        """
elif False:
    V2modelsSlotTypeSlotTypeValuesSampleValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeSlotTypeValuesSampleValueArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Value that can be used for a slot type.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value that can be used for a slot type.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotTypeSlotTypeValuesSynonymArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Value that can be used for a slot type.
        """
elif False:
    V2modelsSlotTypeSlotTypeValuesSynonymArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeSlotTypeValuesSynonymArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] value: Value that can be used for a slot type.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value that can be used for a slot type.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotTypeTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        update: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    V2modelsSlotTypeTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class V2modelsSlotTypeValueSelectionSettingArgsDict(TypedDict):
        resolution_strategy: pulumi.Input[str]
        """
        Determines the slot resolution strategy that Amazon Lex uses to return slot type values.
        Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
        """
        advanced_recognition_settings: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgsDict']]]]
        """
        Provides settings that enable advanced recognition settings for slot values.
        You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.
        See `advanced_recognition_setting` argument reference below.
        """
        regex_filters: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeValueSelectionSettingRegexFilterArgsDict']]]]
        """
        Used to validate the value of the slot.
        See `regex_filter` argument reference below.
        """
elif False:
    V2modelsSlotTypeValueSelectionSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeValueSelectionSettingArgs:
    def __init__(__self__, *,
                 resolution_strategy: pulumi.Input[str],
                 advanced_recognition_settings: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs']]]] = None,
                 regex_filters: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeValueSelectionSettingRegexFilterArgs']]]] = None):
        """
        :param pulumi.Input[str] resolution_strategy: Determines the slot resolution strategy that Amazon Lex uses to return slot type values.
               Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs']]] advanced_recognition_settings: Provides settings that enable advanced recognition settings for slot values.
               You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.
               See `advanced_recognition_setting` argument reference below.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeValueSelectionSettingRegexFilterArgs']]] regex_filters: Used to validate the value of the slot.
               See `regex_filter` argument reference below.
        """
        pulumi.set(__self__, "resolution_strategy", resolution_strategy)
        if advanced_recognition_settings is not None:
            pulumi.set(__self__, "advanced_recognition_settings", advanced_recognition_settings)
        if regex_filters is not None:
            pulumi.set(__self__, "regex_filters", regex_filters)

    @property
    @pulumi.getter(name="resolutionStrategy")
    def resolution_strategy(self) -> pulumi.Input[str]:
        """
        Determines the slot resolution strategy that Amazon Lex uses to return slot type values.
        Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
        """
        return pulumi.get(self, "resolution_strategy")

    @resolution_strategy.setter
    def resolution_strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "resolution_strategy", value)

    @property
    @pulumi.getter(name="advancedRecognitionSettings")
    def advanced_recognition_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs']]]]:
        """
        Provides settings that enable advanced recognition settings for slot values.
        You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.
        See `advanced_recognition_setting` argument reference below.
        """
        return pulumi.get(self, "advanced_recognition_settings")

    @advanced_recognition_settings.setter
    def advanced_recognition_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs']]]]):
        pulumi.set(self, "advanced_recognition_settings", value)

    @property
    @pulumi.getter(name="regexFilters")
    def regex_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeValueSelectionSettingRegexFilterArgs']]]]:
        """
        Used to validate the value of the slot.
        See `regex_filter` argument reference below.
        """
        return pulumi.get(self, "regex_filters")

    @regex_filters.setter
    def regex_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotTypeValueSelectionSettingRegexFilterArgs']]]]):
        pulumi.set(self, "regex_filters", value)


if not MYPY:
    class V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgsDict(TypedDict):
        audio_recognition_strategy: NotRequired[pulumi.Input[str]]
        """
        Enables using the slot values as a custom vocabulary for recognizing user utterances.
        Valid value is `UseSlotValuesAsCustomVocabulary`.
        """
elif False:
    V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeValueSelectionSettingAdvancedRecognitionSettingArgs:
    def __init__(__self__, *,
                 audio_recognition_strategy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] audio_recognition_strategy: Enables using the slot values as a custom vocabulary for recognizing user utterances.
               Valid value is `UseSlotValuesAsCustomVocabulary`.
        """
        if audio_recognition_strategy is not None:
            pulumi.set(__self__, "audio_recognition_strategy", audio_recognition_strategy)

    @property
    @pulumi.getter(name="audioRecognitionStrategy")
    def audio_recognition_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Enables using the slot values as a custom vocabulary for recognizing user utterances.
        Valid value is `UseSlotValuesAsCustomVocabulary`.
        """
        return pulumi.get(self, "audio_recognition_strategy")

    @audio_recognition_strategy.setter
    def audio_recognition_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audio_recognition_strategy", value)


if not MYPY:
    class V2modelsSlotTypeValueSelectionSettingRegexFilterArgsDict(TypedDict):
        pattern: pulumi.Input[str]
        """
        A regular expression used to validate the value of a slot.
        """
elif False:
    V2modelsSlotTypeValueSelectionSettingRegexFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotTypeValueSelectionSettingRegexFilterArgs:
    def __init__(__self__, *,
                 pattern: pulumi.Input[str]):
        """
        :param pulumi.Input[str] pattern: A regular expression used to validate the value of a slot.
        """
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[str]:
        """
        A regular expression used to validate the value of a slot.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "pattern", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingArgsDict(TypedDict):
        prompt_specification: pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationArgsDict']
        """
        Prompt that Amazon Lex uses to elicit the slot value from the user.
        See the `lex.V2modelsIntent` resource for details on the `prompt_specification` argument reference - they are identical.
        """
        slot_constraint: pulumi.Input[str]
        """
        Whether the slot is required or optional. Valid values are `Required` or `Optional`.
        """
        default_value_specifications: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingDefaultValueSpecificationArgsDict']]]]
        """
        List of default values for a slot.
        See the `default_value_specification` argument reference below.
        """
        sample_utterances: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingSampleUtteranceArgsDict']]]]
        slot_resolution_settings: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingSlotResolutionSettingArgsDict']]]]
        """
        Information about whether assisted slot resolution is turned on for the slot or not.
        See the `slot_resolution_setting` argument reference below.
        """
        wait_and_continue_specifications: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationArgsDict']]]]
        """
        Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
        See the `wait_and_continue_specification` argument reference below.
        """
elif False:
    V2modelsSlotValueElicitationSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingArgs:
    def __init__(__self__, *,
                 prompt_specification: pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationArgs'],
                 slot_constraint: pulumi.Input[str],
                 default_value_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingDefaultValueSpecificationArgs']]]] = None,
                 sample_utterances: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingSampleUtteranceArgs']]]] = None,
                 slot_resolution_settings: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingSlotResolutionSettingArgs']]]] = None,
                 wait_and_continue_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationArgs'] prompt_specification: Prompt that Amazon Lex uses to elicit the slot value from the user.
               See the `lex.V2modelsIntent` resource for details on the `prompt_specification` argument reference - they are identical.
        :param pulumi.Input[str] slot_constraint: Whether the slot is required or optional. Valid values are `Required` or `Optional`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingDefaultValueSpecificationArgs']]] default_value_specifications: List of default values for a slot.
               See the `default_value_specification` argument reference below.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingSlotResolutionSettingArgs']]] slot_resolution_settings: Information about whether assisted slot resolution is turned on for the slot or not.
               See the `slot_resolution_setting` argument reference below.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationArgs']]] wait_and_continue_specifications: Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
               See the `wait_and_continue_specification` argument reference below.
        """
        pulumi.set(__self__, "prompt_specification", prompt_specification)
        pulumi.set(__self__, "slot_constraint", slot_constraint)
        if default_value_specifications is not None:
            pulumi.set(__self__, "default_value_specifications", default_value_specifications)
        if sample_utterances is not None:
            pulumi.set(__self__, "sample_utterances", sample_utterances)
        if slot_resolution_settings is not None:
            pulumi.set(__self__, "slot_resolution_settings", slot_resolution_settings)
        if wait_and_continue_specifications is not None:
            pulumi.set(__self__, "wait_and_continue_specifications", wait_and_continue_specifications)

    @property
    @pulumi.getter(name="promptSpecification")
    def prompt_specification(self) -> pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationArgs']:
        """
        Prompt that Amazon Lex uses to elicit the slot value from the user.
        See the `lex.V2modelsIntent` resource for details on the `prompt_specification` argument reference - they are identical.
        """
        return pulumi.get(self, "prompt_specification")

    @prompt_specification.setter
    def prompt_specification(self, value: pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationArgs']):
        pulumi.set(self, "prompt_specification", value)

    @property
    @pulumi.getter(name="slotConstraint")
    def slot_constraint(self) -> pulumi.Input[str]:
        """
        Whether the slot is required or optional. Valid values are `Required` or `Optional`.
        """
        return pulumi.get(self, "slot_constraint")

    @slot_constraint.setter
    def slot_constraint(self, value: pulumi.Input[str]):
        pulumi.set(self, "slot_constraint", value)

    @property
    @pulumi.getter(name="defaultValueSpecifications")
    def default_value_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingDefaultValueSpecificationArgs']]]]:
        """
        List of default values for a slot.
        See the `default_value_specification` argument reference below.
        """
        return pulumi.get(self, "default_value_specifications")

    @default_value_specifications.setter
    def default_value_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingDefaultValueSpecificationArgs']]]]):
        pulumi.set(self, "default_value_specifications", value)

    @property
    @pulumi.getter(name="sampleUtterances")
    def sample_utterances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingSampleUtteranceArgs']]]]:
        return pulumi.get(self, "sample_utterances")

    @sample_utterances.setter
    def sample_utterances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingSampleUtteranceArgs']]]]):
        pulumi.set(self, "sample_utterances", value)

    @property
    @pulumi.getter(name="slotResolutionSettings")
    def slot_resolution_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingSlotResolutionSettingArgs']]]]:
        """
        Information about whether assisted slot resolution is turned on for the slot or not.
        See the `slot_resolution_setting` argument reference below.
        """
        return pulumi.get(self, "slot_resolution_settings")

    @slot_resolution_settings.setter
    def slot_resolution_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingSlotResolutionSettingArgs']]]]):
        pulumi.set(self, "slot_resolution_settings", value)

    @property
    @pulumi.getter(name="waitAndContinueSpecifications")
    def wait_and_continue_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationArgs']]]]:
        """
        Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
        See the `wait_and_continue_specification` argument reference below.
        """
        return pulumi.get(self, "wait_and_continue_specifications")

    @wait_and_continue_specifications.setter
    def wait_and_continue_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationArgs']]]]):
        pulumi.set(self, "wait_and_continue_specifications", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingDefaultValueSpecificationArgsDict(TypedDict):
        default_value_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueListArgsDict']]]]
        """
        List of default values.
        Amazon Lex chooses the default value to use in the order that they are presented in the list.
        See the `default_value_list` argument reference below.
        """
elif False:
    V2modelsSlotValueElicitationSettingDefaultValueSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingDefaultValueSpecificationArgs:
    def __init__(__self__, *,
                 default_value_lists: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs']]] default_value_lists: List of default values.
               Amazon Lex chooses the default value to use in the order that they are presented in the list.
               See the `default_value_list` argument reference below.
        """
        if default_value_lists is not None:
            pulumi.set(__self__, "default_value_lists", default_value_lists)

    @property
    @pulumi.getter(name="defaultValueLists")
    def default_value_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs']]]]:
        """
        List of default values.
        Amazon Lex chooses the default value to use in the order that they are presented in the list.
        See the `default_value_list` argument reference below.
        """
        return pulumi.get(self, "default_value_lists")

    @default_value_lists.setter
    def default_value_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs']]]]):
        pulumi.set(self, "default_value_lists", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueListArgsDict(TypedDict):
        default_value: pulumi.Input[str]
        """
        Default value to use when a user doesn't provide a value for a slot.
        """
elif False:
    V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingDefaultValueSpecificationDefaultValueListArgs:
    def __init__(__self__, *,
                 default_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] default_value: Default value to use when a user doesn't provide a value for a slot.
        """
        pulumi.set(__self__, "default_value", default_value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> pulumi.Input[str]:
        """
        Default value to use when a user doesn't provide a value for a slot.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationArgsDict(TypedDict):
        max_retries: pulumi.Input[int]
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupArgsDict']]]]
        message_selection_strategy: NotRequired[pulumi.Input[str]]
        prompt_attempts_specifications: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict']]]]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationArgs:
    def __init__(__self__, *,
                 max_retries: pulumi.Input[int],
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupArgs']]]] = None,
                 message_selection_strategy: Optional[pulumi.Input[str]] = None,
                 prompt_attempts_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgs']]]] = None):
        pulumi.set(__self__, "max_retries", max_retries)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)
        if message_selection_strategy is not None:
            pulumi.set(__self__, "message_selection_strategy", message_selection_strategy)
        if prompt_attempts_specifications is not None:
            pulumi.set(__self__, "prompt_attempts_specifications", prompt_attempts_specifications)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupArgs']]]]:
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)

    @property
    @pulumi.getter(name="messageSelectionStrategy")
    def message_selection_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_selection_strategy")

    @message_selection_strategy.setter
    def message_selection_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_selection_strategy", value)

    @property
    @pulumi.getter(name="promptAttemptsSpecifications")
    def prompt_attempts_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgs']]]]:
        return pulumi.get(self, "prompt_attempts_specifications")

    @prompt_attempts_specifications.setter
    def prompt_attempts_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgs']]]]):
        pulumi.set(self, "prompt_attempts_specifications", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user.
               See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user.
               When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
               See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageArgsDict(TypedDict):
        custom_payloads: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict']]]]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict']]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payloads: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs']]]] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs']] = None):
        if custom_payloads is not None:
            pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs']]]]:
        return pulumi.get(self, "custom_payloads")

    @custom_payloads.setter
    def custom_payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs']]]]):
        pulumi.set(self, "custom_payloads", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationArgsDict(TypedDict):
        custom_payloads: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict']]]]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict']]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payloads: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs']]]] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs']] = None):
        if custom_payloads is not None:
            pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs']]]]:
        return pulumi.get(self, "custom_payloads")

    @custom_payloads.setter
    def custom_payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs']]]]):
        pulumi.set(self, "custom_payloads", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict(TypedDict):
        allowed_input_types: pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict']
        map_block_key: pulumi.Input[str]
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        audio_and_dtmf_input_specification: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict']]
        text_input_specification: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict']]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationArgs:
    def __init__(__self__, *,
                 allowed_input_types: pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs'],
                 map_block_key: pulumi.Input[str],
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 audio_and_dtmf_input_specification: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs']] = None,
                 text_input_specification: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs']] = None):
        pulumi.set(__self__, "allowed_input_types", allowed_input_types)
        pulumi.set(__self__, "map_block_key", map_block_key)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if audio_and_dtmf_input_specification is not None:
            pulumi.set(__self__, "audio_and_dtmf_input_specification", audio_and_dtmf_input_specification)
        if text_input_specification is not None:
            pulumi.set(__self__, "text_input_specification", text_input_specification)

    @property
    @pulumi.getter(name="allowedInputTypes")
    def allowed_input_types(self) -> pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs']:
        return pulumi.get(self, "allowed_input_types")

    @allowed_input_types.setter
    def allowed_input_types(self, value: pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs']):
        pulumi.set(self, "allowed_input_types", value)

    @property
    @pulumi.getter(name="mapBlockKey")
    def map_block_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "map_block_key")

    @map_block_key.setter
    def map_block_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "map_block_key", value)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="audioAndDtmfInputSpecification")
    def audio_and_dtmf_input_specification(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs']]:
        return pulumi.get(self, "audio_and_dtmf_input_specification")

    @audio_and_dtmf_input_specification.setter
    def audio_and_dtmf_input_specification(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs']]):
        pulumi.set(self, "audio_and_dtmf_input_specification", value)

    @property
    @pulumi.getter(name="textInputSpecification")
    def text_input_specification(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs']]:
        return pulumi.get(self, "text_input_specification")

    @text_input_specification.setter
    def text_input_specification(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs']]):
        pulumi.set(self, "text_input_specification", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict(TypedDict):
        allow_audio_input: pulumi.Input[bool]
        allow_dtmf_input: pulumi.Input[bool]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAllowedInputTypesArgs:
    def __init__(__self__, *,
                 allow_audio_input: pulumi.Input[bool],
                 allow_dtmf_input: pulumi.Input[bool]):
        pulumi.set(__self__, "allow_audio_input", allow_audio_input)
        pulumi.set(__self__, "allow_dtmf_input", allow_dtmf_input)

    @property
    @pulumi.getter(name="allowAudioInput")
    def allow_audio_input(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_audio_input")

    @allow_audio_input.setter
    def allow_audio_input(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_audio_input", value)

    @property
    @pulumi.getter(name="allowDtmfInput")
    def allow_dtmf_input(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_dtmf_input")

    @allow_dtmf_input.setter
    def allow_dtmf_input(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_dtmf_input", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict(TypedDict):
        start_timeout_ms: pulumi.Input[int]
        audio_specification: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict']]
        dtmf_specification: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict']]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationArgs:
    def __init__(__self__, *,
                 start_timeout_ms: pulumi.Input[int],
                 audio_specification: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs']] = None,
                 dtmf_specification: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs']] = None):
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)
        if audio_specification is not None:
            pulumi.set(__self__, "audio_specification", audio_specification)
        if dtmf_specification is not None:
            pulumi.set(__self__, "dtmf_specification", dtmf_specification)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start_timeout_ms")

    @start_timeout_ms.setter
    def start_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_timeout_ms", value)

    @property
    @pulumi.getter(name="audioSpecification")
    def audio_specification(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs']]:
        return pulumi.get(self, "audio_specification")

    @audio_specification.setter
    def audio_specification(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs']]):
        pulumi.set(self, "audio_specification", value)

    @property
    @pulumi.getter(name="dtmfSpecification")
    def dtmf_specification(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs']]:
        return pulumi.get(self, "dtmf_specification")

    @dtmf_specification.setter
    def dtmf_specification(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs']]):
        pulumi.set(self, "dtmf_specification", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict(TypedDict):
        end_timeout_ms: pulumi.Input[int]
        max_length_ms: pulumi.Input[int]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationAudioSpecificationArgs:
    def __init__(__self__, *,
                 end_timeout_ms: pulumi.Input[int],
                 max_length_ms: pulumi.Input[int]):
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length_ms", max_length_ms)

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "end_timeout_ms")

    @end_timeout_ms.setter
    def end_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "end_timeout_ms", value)

    @property
    @pulumi.getter(name="maxLengthMs")
    def max_length_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_length_ms")

    @max_length_ms.setter
    def max_length_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_length_ms", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict(TypedDict):
        deletion_character: pulumi.Input[str]
        end_character: pulumi.Input[str]
        end_timeout_ms: pulumi.Input[int]
        max_length: pulumi.Input[int]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationAudioAndDtmfInputSpecificationDtmfSpecificationArgs:
    def __init__(__self__, *,
                 deletion_character: pulumi.Input[str],
                 end_character: pulumi.Input[str],
                 end_timeout_ms: pulumi.Input[int],
                 max_length: pulumi.Input[int]):
        pulumi.set(__self__, "deletion_character", deletion_character)
        pulumi.set(__self__, "end_character", end_character)
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length", max_length)

    @property
    @pulumi.getter(name="deletionCharacter")
    def deletion_character(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deletion_character")

    @deletion_character.setter
    def deletion_character(self, value: pulumi.Input[str]):
        pulumi.set(self, "deletion_character", value)

    @property
    @pulumi.getter(name="endCharacter")
    def end_character(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_character")

    @end_character.setter
    def end_character(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_character", value)

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "end_timeout_ms")

    @end_timeout_ms.setter
    def end_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "end_timeout_ms", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_length", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict(TypedDict):
        start_timeout_ms: pulumi.Input[int]
elif False:
    V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingPromptSpecificationPromptAttemptsSpecificationTextInputSpecificationArgs:
    def __init__(__self__, *,
                 start_timeout_ms: pulumi.Input[int]):
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start_timeout_ms")

    @start_timeout_ms.setter
    def start_timeout_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_timeout_ms", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingSampleUtteranceArgsDict(TypedDict):
        utterance: pulumi.Input[str]
        """
        The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
elif False:
    V2modelsSlotValueElicitationSettingSampleUtteranceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingSampleUtteranceArgs:
    def __init__(__self__, *,
                 utterance: pulumi.Input[str]):
        """
        :param pulumi.Input[str] utterance: The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
        pulumi.set(__self__, "utterance", utterance)

    @property
    @pulumi.getter
    def utterance(self) -> pulumi.Input[str]:
        """
        The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents.
        """
        return pulumi.get(self, "utterance")

    @utterance.setter
    def utterance(self, value: pulumi.Input[str]):
        pulumi.set(self, "utterance", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingSlotResolutionSettingArgsDict(TypedDict):
        slot_resolution_strategy: pulumi.Input[str]
        """
        Specifies whether assisted slot resolution is turned on for the slot or not.
        Valid values are `EnhancedFallback` or `Default`.
        If the value is `EnhancedFallback`, assisted slot resolution is activated when Amazon Lex defaults to the `AMAZON.FallbackIntent`.
        If the value is `Default`, assisted slot resolution is turned off.
        """
elif False:
    V2modelsSlotValueElicitationSettingSlotResolutionSettingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingSlotResolutionSettingArgs:
    def __init__(__self__, *,
                 slot_resolution_strategy: pulumi.Input[str]):
        """
        :param pulumi.Input[str] slot_resolution_strategy: Specifies whether assisted slot resolution is turned on for the slot or not.
               Valid values are `EnhancedFallback` or `Default`.
               If the value is `EnhancedFallback`, assisted slot resolution is activated when Amazon Lex defaults to the `AMAZON.FallbackIntent`.
               If the value is `Default`, assisted slot resolution is turned off.
        """
        pulumi.set(__self__, "slot_resolution_strategy", slot_resolution_strategy)

    @property
    @pulumi.getter(name="slotResolutionStrategy")
    def slot_resolution_strategy(self) -> pulumi.Input[str]:
        """
        Specifies whether assisted slot resolution is turned on for the slot or not.
        Valid values are `EnhancedFallback` or `Default`.
        If the value is `EnhancedFallback`, assisted slot resolution is activated when Amazon Lex defaults to the `AMAZON.FallbackIntent`.
        If the value is `Default`, assisted slot resolution is turned off.
        """
        return pulumi.get(self, "slot_resolution_strategy")

    @slot_resolution_strategy.setter
    def slot_resolution_strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "slot_resolution_strategy", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationArgsDict(TypedDict):
        active: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether the bot will wait for a user to respond.
        When this field is `false`, wait and continue responses for a slot aren't used.
        If the active field isn't specified, the default is `true`.
        """
        continue_responses: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgsDict']]]]
        """
        Response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
        See the `continue_response` argument reference below.
        """
        still_waiting_responses: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgsDict']]]]
        """
        Response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
        See the `still_waiting_response` argument reference below.
        """
        waiting_responses: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgsDict']]]]
        """
        Response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
        See the `waiting_response` argument reference below.
        """
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationArgs:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 continue_responses: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs']]]] = None,
                 still_waiting_responses: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs']]]] = None,
                 waiting_responses: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs']]]] = None):
        """
        :param pulumi.Input[bool] active: Specifies whether the bot will wait for a user to respond.
               When this field is `false`, wait and continue responses for a slot aren't used.
               If the active field isn't specified, the default is `true`.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs']]] continue_responses: Response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
               See the `continue_response` argument reference below.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs']]] still_waiting_responses: Response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
               See the `still_waiting_response` argument reference below.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs']]] waiting_responses: Response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
               See the `waiting_response` argument reference below.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if continue_responses is not None:
            pulumi.set(__self__, "continue_responses", continue_responses)
        if still_waiting_responses is not None:
            pulumi.set(__self__, "still_waiting_responses", still_waiting_responses)
        if waiting_responses is not None:
            pulumi.set(__self__, "waiting_responses", waiting_responses)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the bot will wait for a user to respond.
        When this field is `false`, wait and continue responses for a slot aren't used.
        If the active field isn't specified, the default is `true`.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="continueResponses")
    def continue_responses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs']]]]:
        """
        Response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
        See the `continue_response` argument reference below.
        """
        return pulumi.get(self, "continue_responses")

    @continue_responses.setter
    def continue_responses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs']]]]):
        pulumi.set(self, "continue_responses", value)

    @property
    @pulumi.getter(name="stillWaitingResponses")
    def still_waiting_responses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs']]]]:
        """
        Response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
        See the `still_waiting_response` argument reference below.
        """
        return pulumi.get(self, "still_waiting_responses")

    @still_waiting_responses.setter
    def still_waiting_responses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs']]]]):
        pulumi.set(self, "still_waiting_responses", value)

    @property
    @pulumi.getter(name="waitingResponses")
    def waiting_responses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs']]]]:
        """
        Response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
        See the `waiting_response` argument reference below.
        """
        return pulumi.get(self, "waiting_responses")

    @waiting_responses.setter
    def waiting_responses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs']]]]):
        pulumi.set(self, "waiting_responses", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user.
        Amazon Lex chooses the actual response to send at runtime.
        See `message_group`.
        """
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user.
               Amazon Lex chooses the actual response to send at runtime.
               See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user.
        Amazon Lex chooses the actual response to send at runtime.
        See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user.
               See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user.
               When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
               See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payloads: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgsDict']]]]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgsDict']]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payloads: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgs']]]] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgs']] = None):
        if custom_payloads is not None:
            pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgs']]]]:
        return pulumi.get(self, "custom_payloads")

    @custom_payloads.setter
    def custom_payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgs']]]]):
        pulumi.set(self, "custom_payloads", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payloads: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgsDict']]]]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgsDict']]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payloads: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgs']]]] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgs']] = None):
        if custom_payloads is not None:
            pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgs']]]]:
        return pulumi.get(self, "custom_payloads")

    @custom_payloads.setter
    def custom_payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgs']]]]):
        pulumi.set(self, "custom_payloads", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationContinueResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgsDict(TypedDict):
        frequency_in_seconds: pulumi.Input[int]
        """
        How often a message should be sent to the user.
        """
        timeout_in_seconds: pulumi.Input[int]
        """
        If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.
        """
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgsDict']]]]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseArgs:
    def __init__(__self__, *,
                 frequency_in_seconds: pulumi.Input[int],
                 timeout_in_seconds: pulumi.Input[int],
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[int] frequency_in_seconds: How often a message should be sent to the user.
        :param pulumi.Input[int] timeout_in_seconds: If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        """
        pulumi.set(__self__, "frequency_in_seconds", frequency_in_seconds)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="frequencyInSeconds")
    def frequency_in_seconds(self) -> pulumi.Input[int]:
        """
        How often a message should be sent to the user.
        """
        return pulumi.get(self, "frequency_in_seconds")

    @frequency_in_seconds.setter
    def frequency_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency_in_seconds", value)

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> pulumi.Input[int]:
        """
        If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.
        """
        return pulumi.get(self, "timeout_in_seconds")

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "timeout_in_seconds", value)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgs']]]]:
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user.
               See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user.
               When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
               See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payloads: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgsDict']]]]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgsDict']]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payloads: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgs']]]] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgs']] = None):
        if custom_payloads is not None:
            pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgs']]]]:
        return pulumi.get(self, "custom_payloads")

    @custom_payloads.setter
    def custom_payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgs']]]]):
        pulumi.set(self, "custom_payloads", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payloads: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgsDict']]]]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgsDict']]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payloads: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgs']]]] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgs']] = None):
        if custom_payloads is not None:
            pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgs']]]]:
        return pulumi.get(self, "custom_payloads")

    @custom_payloads.setter
    def custom_payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgs']]]]):
        pulumi.set(self, "custom_payloads", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationStillWaitingResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgsDict(TypedDict):
        allow_interrupt: NotRequired[pulumi.Input[bool]]
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        message_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgsDict']]]]
        """
        Configuration blocks for responses that Amazon Lex can send to the user.
        Amazon Lex chooses the actual response to send at runtime.
        See `message_group`.
        """
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseArgs:
    def __init__(__self__, *,
                 allow_interrupt: Optional[pulumi.Input[bool]] = None,
                 message_groups: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_interrupt: Whether the user can interrupt a speech response from Amazon Lex.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs']]] message_groups: Configuration blocks for responses that Amazon Lex can send to the user.
               Amazon Lex chooses the actual response to send at runtime.
               See `message_group`.
        """
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_groups is not None:
            pulumi.set(__self__, "message_groups", message_groups)

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")

    @allow_interrupt.setter
    def allow_interrupt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_interrupt", value)

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs']]]]:
        """
        Configuration blocks for responses that Amazon Lex can send to the user.
        Amazon Lex chooses the actual response to send at runtime.
        See `message_group`.
        """
        return pulumi.get(self, "message_groups")

    @message_groups.setter
    def message_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs']]]]):
        pulumi.set(self, "message_groups", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgsDict(TypedDict):
        message: pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgsDict']
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        variations: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgsDict']]]]
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupArgs:
    def __init__(__self__, *,
                 message: pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs'],
                 variations: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs']]]] = None):
        """
        :param pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs'] message: Configuration block for the primary message that Amazon Lex should send to the user.
               See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        :param pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs']]] variations: Configuration blocks for message variations to send to the user.
               When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
               See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs']:
        """
        Configuration block for the primary message that Amazon Lex should send to the user.
        See the `lex.V2modelsIntent` resource for details on the `message` argument reference - they are identical.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs']):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def variations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs']]]]:
        """
        Configuration blocks for message variations to send to the user.
        When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.
        See the `lex.V2modelsIntent` resource for details on the `variation` argument reference - they are identical.
        """
        return pulumi.get(self, "variations")

    @variations.setter
    def variations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs']]]]):
        pulumi.set(self, "variations", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgsDict(TypedDict):
        custom_payloads: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgsDict']]]]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgsDict']]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageArgs:
    def __init__(__self__, *,
                 custom_payloads: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgs']]]] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgs']] = None):
        if custom_payloads is not None:
            pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgs']]]]:
        return pulumi.get(self, "custom_payloads")

    @custom_payloads.setter
    def custom_payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgs']]]]):
        pulumi.set(self, "custom_payloads", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessagePlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupMessageSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgsDict(TypedDict):
        custom_payloads: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgsDict']]]]
        image_response_card: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgsDict']]
        plain_text_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgsDict']]
        ssml_message: NotRequired[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgsDict']]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationArgs:
    def __init__(__self__, *,
                 custom_payloads: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgs']]]] = None,
                 image_response_card: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgs']] = None,
                 plain_text_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgs']] = None,
                 ssml_message: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgs']] = None):
        if custom_payloads is not None:
            pulumi.set(__self__, "custom_payloads", custom_payloads)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayloads")
    def custom_payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgs']]]]:
        return pulumi.get(self, "custom_payloads")

    @custom_payloads.setter
    def custom_payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgs']]]]):
        pulumi.set(self, "custom_payloads", value)

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgs']]:
        return pulumi.get(self, "image_response_card")

    @image_response_card.setter
    def image_response_card(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgs']]):
        pulumi.set(self, "image_response_card", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgs']]:
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgs']]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgs']]:
        return pulumi.get(self, "ssml_message")

    @ssml_message.setter
    def ssml_message(self, value: Optional[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgs']]):
        pulumi.set(self, "ssml_message", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationCustomPayloadArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgsDict(TypedDict):
        title: pulumi.Input[str]
        buttons: NotRequired[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict']]]]
        image_url: NotRequired[pulumi.Input[str]]
        subtitle: NotRequired[pulumi.Input[str]]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 buttons: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def buttons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]]:
        return pulumi.get(self, "buttons")

    @buttons.setter
    def buttons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgs']]]]):
        pulumi.set(self, "buttons", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict(TypedDict):
        text: pulumi.Input[str]
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationImageResponseCardButtonArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationPlainTextMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgsDict(TypedDict):
        value: pulumi.Input[str]
elif False:
    V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class V2modelsSlotValueElicitationSettingWaitAndContinueSpecificationWaitingResponseMessageGroupVariationSsmlMessageArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


