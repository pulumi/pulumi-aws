# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BotArgs', 'Bot']

@pulumi.input_type
class BotArgs:
    def __init__(__self__, *,
                 abort_statement: pulumi.Input['BotAbortStatementArgs'],
                 child_directed: pulumi.Input[bool],
                 intents: pulumi.Input[Sequence[pulumi.Input['BotIntentArgs']]],
                 clarification_prompt: Optional[pulumi.Input['BotClarificationPromptArgs']] = None,
                 create_version: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detect_sentiment: Optional[pulumi.Input[bool]] = None,
                 enable_model_improvements: Optional[pulumi.Input[bool]] = None,
                 idle_session_ttl_in_seconds: Optional[pulumi.Input[int]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nlu_intent_confidence_threshold: Optional[pulumi.Input[float]] = None,
                 process_behavior: Optional[pulumi.Input[str]] = None,
                 voice_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Bot resource.
        """
        pulumi.set(__self__, "abort_statement", abort_statement)
        pulumi.set(__self__, "child_directed", child_directed)
        pulumi.set(__self__, "intents", intents)
        if clarification_prompt is not None:
            pulumi.set(__self__, "clarification_prompt", clarification_prompt)
        if create_version is not None:
            pulumi.set(__self__, "create_version", create_version)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detect_sentiment is not None:
            pulumi.set(__self__, "detect_sentiment", detect_sentiment)
        if enable_model_improvements is not None:
            pulumi.set(__self__, "enable_model_improvements", enable_model_improvements)
        if idle_session_ttl_in_seconds is not None:
            pulumi.set(__self__, "idle_session_ttl_in_seconds", idle_session_ttl_in_seconds)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nlu_intent_confidence_threshold is not None:
            pulumi.set(__self__, "nlu_intent_confidence_threshold", nlu_intent_confidence_threshold)
        if process_behavior is not None:
            pulumi.set(__self__, "process_behavior", process_behavior)
        if voice_id is not None:
            pulumi.set(__self__, "voice_id", voice_id)

    @property
    @pulumi.getter(name="abortStatement")
    def abort_statement(self) -> pulumi.Input['BotAbortStatementArgs']:
        return pulumi.get(self, "abort_statement")

    @abort_statement.setter
    def abort_statement(self, value: pulumi.Input['BotAbortStatementArgs']):
        pulumi.set(self, "abort_statement", value)

    @property
    @pulumi.getter(name="childDirected")
    def child_directed(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "child_directed")

    @child_directed.setter
    def child_directed(self, value: pulumi.Input[bool]):
        pulumi.set(self, "child_directed", value)

    @property
    @pulumi.getter
    def intents(self) -> pulumi.Input[Sequence[pulumi.Input['BotIntentArgs']]]:
        return pulumi.get(self, "intents")

    @intents.setter
    def intents(self, value: pulumi.Input[Sequence[pulumi.Input['BotIntentArgs']]]):
        pulumi.set(self, "intents", value)

    @property
    @pulumi.getter(name="clarificationPrompt")
    def clarification_prompt(self) -> Optional[pulumi.Input['BotClarificationPromptArgs']]:
        return pulumi.get(self, "clarification_prompt")

    @clarification_prompt.setter
    def clarification_prompt(self, value: Optional[pulumi.Input['BotClarificationPromptArgs']]):
        pulumi.set(self, "clarification_prompt", value)

    @property
    @pulumi.getter(name="createVersion")
    def create_version(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_version")

    @create_version.setter
    def create_version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_version", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectSentiment")
    def detect_sentiment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "detect_sentiment")

    @detect_sentiment.setter
    def detect_sentiment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_sentiment", value)

    @property
    @pulumi.getter(name="enableModelImprovements")
    def enable_model_improvements(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_model_improvements")

    @enable_model_improvements.setter
    def enable_model_improvements(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_model_improvements", value)

    @property
    @pulumi.getter(name="idleSessionTtlInSeconds")
    def idle_session_ttl_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_session_ttl_in_seconds")

    @idle_session_ttl_in_seconds.setter
    def idle_session_ttl_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_session_ttl_in_seconds", value)

    @property
    @pulumi.getter
    def locale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locale", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nluIntentConfidenceThreshold")
    def nlu_intent_confidence_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nlu_intent_confidence_threshold")

    @nlu_intent_confidence_threshold.setter
    def nlu_intent_confidence_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nlu_intent_confidence_threshold", value)

    @property
    @pulumi.getter(name="processBehavior")
    def process_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "process_behavior")

    @process_behavior.setter
    def process_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_behavior", value)

    @property
    @pulumi.getter(name="voiceId")
    def voice_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voice_id")

    @voice_id.setter
    def voice_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voice_id", value)


@pulumi.input_type
class _BotState:
    def __init__(__self__, *,
                 abort_statement: Optional[pulumi.Input['BotAbortStatementArgs']] = None,
                 arn: Optional[pulumi.Input[str]] = None,
                 checksum: Optional[pulumi.Input[str]] = None,
                 child_directed: Optional[pulumi.Input[bool]] = None,
                 clarification_prompt: Optional[pulumi.Input['BotClarificationPromptArgs']] = None,
                 create_version: Optional[pulumi.Input[bool]] = None,
                 created_date: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detect_sentiment: Optional[pulumi.Input[bool]] = None,
                 enable_model_improvements: Optional[pulumi.Input[bool]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 idle_session_ttl_in_seconds: Optional[pulumi.Input[int]] = None,
                 intents: Optional[pulumi.Input[Sequence[pulumi.Input['BotIntentArgs']]]] = None,
                 last_updated_date: Optional[pulumi.Input[str]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nlu_intent_confidence_threshold: Optional[pulumi.Input[float]] = None,
                 process_behavior: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 voice_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Bot resources.
        """
        if abort_statement is not None:
            pulumi.set(__self__, "abort_statement", abort_statement)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if child_directed is not None:
            pulumi.set(__self__, "child_directed", child_directed)
        if clarification_prompt is not None:
            pulumi.set(__self__, "clarification_prompt", clarification_prompt)
        if create_version is not None:
            pulumi.set(__self__, "create_version", create_version)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detect_sentiment is not None:
            pulumi.set(__self__, "detect_sentiment", detect_sentiment)
        if enable_model_improvements is not None:
            pulumi.set(__self__, "enable_model_improvements", enable_model_improvements)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if idle_session_ttl_in_seconds is not None:
            pulumi.set(__self__, "idle_session_ttl_in_seconds", idle_session_ttl_in_seconds)
        if intents is not None:
            pulumi.set(__self__, "intents", intents)
        if last_updated_date is not None:
            pulumi.set(__self__, "last_updated_date", last_updated_date)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nlu_intent_confidence_threshold is not None:
            pulumi.set(__self__, "nlu_intent_confidence_threshold", nlu_intent_confidence_threshold)
        if process_behavior is not None:
            pulumi.set(__self__, "process_behavior", process_behavior)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if voice_id is not None:
            pulumi.set(__self__, "voice_id", voice_id)

    @property
    @pulumi.getter(name="abortStatement")
    def abort_statement(self) -> Optional[pulumi.Input['BotAbortStatementArgs']]:
        return pulumi.get(self, "abort_statement")

    @abort_statement.setter
    def abort_statement(self, value: Optional[pulumi.Input['BotAbortStatementArgs']]):
        pulumi.set(self, "abort_statement", value)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "checksum")

    @checksum.setter
    def checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum", value)

    @property
    @pulumi.getter(name="childDirected")
    def child_directed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "child_directed")

    @child_directed.setter
    def child_directed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "child_directed", value)

    @property
    @pulumi.getter(name="clarificationPrompt")
    def clarification_prompt(self) -> Optional[pulumi.Input['BotClarificationPromptArgs']]:
        return pulumi.get(self, "clarification_prompt")

    @clarification_prompt.setter
    def clarification_prompt(self, value: Optional[pulumi.Input['BotClarificationPromptArgs']]):
        pulumi.set(self, "clarification_prompt", value)

    @property
    @pulumi.getter(name="createVersion")
    def create_version(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_version")

    @create_version.setter
    def create_version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_version", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectSentiment")
    def detect_sentiment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "detect_sentiment")

    @detect_sentiment.setter
    def detect_sentiment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_sentiment", value)

    @property
    @pulumi.getter(name="enableModelImprovements")
    def enable_model_improvements(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_model_improvements")

    @enable_model_improvements.setter
    def enable_model_improvements(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_model_improvements", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="idleSessionTtlInSeconds")
    def idle_session_ttl_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_session_ttl_in_seconds")

    @idle_session_ttl_in_seconds.setter
    def idle_session_ttl_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_session_ttl_in_seconds", value)

    @property
    @pulumi.getter
    def intents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BotIntentArgs']]]]:
        return pulumi.get(self, "intents")

    @intents.setter
    def intents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BotIntentArgs']]]]):
        pulumi.set(self, "intents", value)

    @property
    @pulumi.getter(name="lastUpdatedDate")
    def last_updated_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_updated_date")

    @last_updated_date.setter
    def last_updated_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated_date", value)

    @property
    @pulumi.getter
    def locale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locale", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nluIntentConfidenceThreshold")
    def nlu_intent_confidence_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nlu_intent_confidence_threshold")

    @nlu_intent_confidence_threshold.setter
    def nlu_intent_confidence_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nlu_intent_confidence_threshold", value)

    @property
    @pulumi.getter(name="processBehavior")
    def process_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "process_behavior")

    @process_behavior.setter
    def process_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_behavior", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="voiceId")
    def voice_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "voice_id")

    @voice_id.setter
    def voice_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voice_id", value)


class Bot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abort_statement: Optional[pulumi.Input[pulumi.InputType['BotAbortStatementArgs']]] = None,
                 child_directed: Optional[pulumi.Input[bool]] = None,
                 clarification_prompt: Optional[pulumi.Input[pulumi.InputType['BotClarificationPromptArgs']]] = None,
                 create_version: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detect_sentiment: Optional[pulumi.Input[bool]] = None,
                 enable_model_improvements: Optional[pulumi.Input[bool]] = None,
                 idle_session_ttl_in_seconds: Optional[pulumi.Input[int]] = None,
                 intents: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BotIntentArgs']]]]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nlu_intent_confidence_threshold: Optional[pulumi.Input[float]] = None,
                 process_behavior: Optional[pulumi.Input[str]] = None,
                 voice_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Bot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BotArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Bot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abort_statement: Optional[pulumi.Input[pulumi.InputType['BotAbortStatementArgs']]] = None,
                 child_directed: Optional[pulumi.Input[bool]] = None,
                 clarification_prompt: Optional[pulumi.Input[pulumi.InputType['BotClarificationPromptArgs']]] = None,
                 create_version: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 detect_sentiment: Optional[pulumi.Input[bool]] = None,
                 enable_model_improvements: Optional[pulumi.Input[bool]] = None,
                 idle_session_ttl_in_seconds: Optional[pulumi.Input[int]] = None,
                 intents: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BotIntentArgs']]]]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nlu_intent_confidence_threshold: Optional[pulumi.Input[float]] = None,
                 process_behavior: Optional[pulumi.Input[str]] = None,
                 voice_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BotArgs.__new__(BotArgs)

            if abort_statement is None and not opts.urn:
                raise TypeError("Missing required property 'abort_statement'")
            __props__.__dict__["abort_statement"] = abort_statement
            if child_directed is None and not opts.urn:
                raise TypeError("Missing required property 'child_directed'")
            __props__.__dict__["child_directed"] = child_directed
            __props__.__dict__["clarification_prompt"] = clarification_prompt
            __props__.__dict__["create_version"] = create_version
            __props__.__dict__["description"] = description
            __props__.__dict__["detect_sentiment"] = detect_sentiment
            __props__.__dict__["enable_model_improvements"] = enable_model_improvements
            __props__.__dict__["idle_session_ttl_in_seconds"] = idle_session_ttl_in_seconds
            if intents is None and not opts.urn:
                raise TypeError("Missing required property 'intents'")
            __props__.__dict__["intents"] = intents
            __props__.__dict__["locale"] = locale
            __props__.__dict__["name"] = name
            __props__.__dict__["nlu_intent_confidence_threshold"] = nlu_intent_confidence_threshold
            __props__.__dict__["process_behavior"] = process_behavior
            __props__.__dict__["voice_id"] = voice_id
            __props__.__dict__["arn"] = None
            __props__.__dict__["checksum"] = None
            __props__.__dict__["created_date"] = None
            __props__.__dict__["failure_reason"] = None
            __props__.__dict__["last_updated_date"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["version"] = None
        super(Bot, __self__).__init__(
            'aws:lex/bot:Bot',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abort_statement: Optional[pulumi.Input[pulumi.InputType['BotAbortStatementArgs']]] = None,
            arn: Optional[pulumi.Input[str]] = None,
            checksum: Optional[pulumi.Input[str]] = None,
            child_directed: Optional[pulumi.Input[bool]] = None,
            clarification_prompt: Optional[pulumi.Input[pulumi.InputType['BotClarificationPromptArgs']]] = None,
            create_version: Optional[pulumi.Input[bool]] = None,
            created_date: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            detect_sentiment: Optional[pulumi.Input[bool]] = None,
            enable_model_improvements: Optional[pulumi.Input[bool]] = None,
            failure_reason: Optional[pulumi.Input[str]] = None,
            idle_session_ttl_in_seconds: Optional[pulumi.Input[int]] = None,
            intents: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BotIntentArgs']]]]] = None,
            last_updated_date: Optional[pulumi.Input[str]] = None,
            locale: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nlu_intent_confidence_threshold: Optional[pulumi.Input[float]] = None,
            process_behavior: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None,
            voice_id: Optional[pulumi.Input[str]] = None) -> 'Bot':
        """
        Get an existing Bot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BotState.__new__(_BotState)

        __props__.__dict__["abort_statement"] = abort_statement
        __props__.__dict__["arn"] = arn
        __props__.__dict__["checksum"] = checksum
        __props__.__dict__["child_directed"] = child_directed
        __props__.__dict__["clarification_prompt"] = clarification_prompt
        __props__.__dict__["create_version"] = create_version
        __props__.__dict__["created_date"] = created_date
        __props__.__dict__["description"] = description
        __props__.__dict__["detect_sentiment"] = detect_sentiment
        __props__.__dict__["enable_model_improvements"] = enable_model_improvements
        __props__.__dict__["failure_reason"] = failure_reason
        __props__.__dict__["idle_session_ttl_in_seconds"] = idle_session_ttl_in_seconds
        __props__.__dict__["intents"] = intents
        __props__.__dict__["last_updated_date"] = last_updated_date
        __props__.__dict__["locale"] = locale
        __props__.__dict__["name"] = name
        __props__.__dict__["nlu_intent_confidence_threshold"] = nlu_intent_confidence_threshold
        __props__.__dict__["process_behavior"] = process_behavior
        __props__.__dict__["status"] = status
        __props__.__dict__["version"] = version
        __props__.__dict__["voice_id"] = voice_id
        return Bot(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abortStatement")
    def abort_statement(self) -> pulumi.Output['outputs.BotAbortStatement']:
        return pulumi.get(self, "abort_statement")

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def checksum(self) -> pulumi.Output[str]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="childDirected")
    def child_directed(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "child_directed")

    @property
    @pulumi.getter(name="clarificationPrompt")
    def clarification_prompt(self) -> pulumi.Output[Optional['outputs.BotClarificationPrompt']]:
        return pulumi.get(self, "clarification_prompt")

    @property
    @pulumi.getter(name="createVersion")
    def create_version(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "create_version")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detectSentiment")
    def detect_sentiment(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "detect_sentiment")

    @property
    @pulumi.getter(name="enableModelImprovements")
    def enable_model_improvements(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_model_improvements")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> pulumi.Output[str]:
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="idleSessionTtlInSeconds")
    def idle_session_ttl_in_seconds(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "idle_session_ttl_in_seconds")

    @property
    @pulumi.getter
    def intents(self) -> pulumi.Output[Sequence['outputs.BotIntent']]:
        return pulumi.get(self, "intents")

    @property
    @pulumi.getter(name="lastUpdatedDate")
    def last_updated_date(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_updated_date")

    @property
    @pulumi.getter
    def locale(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nluIntentConfidenceThreshold")
    def nlu_intent_confidence_threshold(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "nlu_intent_confidence_threshold")

    @property
    @pulumi.getter(name="processBehavior")
    def process_behavior(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "process_behavior")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="voiceId")
    def voice_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "voice_id")

